[{"authorTime":"2019-03-20 01:26:31","codes":[{"authorDate":"2019-03-20 01:26:31","commitOrder":1,"curCode":"  protected List<SolrCmdDistributor.Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    \r\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     \r\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      \r\n      \r\n      \r\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        \r\n        \r\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     \r\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      \r\n      \r\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      \r\n      \r\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        \r\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        \r\n        \r\n        forwardToLeader = false;\n        ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        \r\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        \r\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n","date":"2019-03-20 01:26:31","endLine":701,"groupId":"41176","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupRequest","params":"(Stringid@SolrInputDocumentdoc@Stringroute)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ab/e4754e0d9f8a919b6ee8a7eb38aaafafadd265.src","preCode":"  protected List<SolrCmdDistributor.Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    \r\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     \r\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      \r\n      \r\n      \r\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        \r\n        \r\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     \r\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      \r\n      \r\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      \r\n      \r\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        \r\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        \r\n        \r\n        forwardToLeader = false;\n        ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        \r\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        \r\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":580,"status":"B"},{"authorDate":"2019-03-20 01:26:31","commitOrder":1,"curCode":"  protected List<SolrCmdDistributor.Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    String leaderCoreNodeName = leaderReplica.getName();\n    List<Replica> replicas = clusterState.getCollection(collection)\n        .getSlice(shardId)\n        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n    if (replicas.isEmpty()) {\n      return null;\n    }\n\n    \r\n    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n    Set<String> skipListSet = null;\n    if (skipList != null) {\n      skipListSet = new HashSet<>(skipList.length);\n      skipListSet.addAll(Arrays.asList(skipList));\n      log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n    }\n\n    List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n    skippedCoreNodeNames = new HashSet<>();\n    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n    for (Replica replica : replicas) {\n      String coreNodeName = replica.getName();\n      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n        log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n        log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n        skippedCoreNodeNames.add(replica.getName());\n      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())\n          || replica.getState() == Replica.State.DOWN) {\n        skippedCoreNodeNames.add(replica.getName());\n      } else {\n        nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n      }\n    }\n    return nodes;\n  }\n","date":"2019-03-20 01:26:31","endLine":844,"groupId":"41176","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaNodesForLeader","params":"(StringshardId@ReplicaleaderReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ab/e4754e0d9f8a919b6ee8a7eb38aaafafadd265.src","preCode":"  protected List<SolrCmdDistributor.Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    String leaderCoreNodeName = leaderReplica.getName();\n    List<Replica> replicas = clusterState.getCollection(collection)\n        .getSlice(shardId)\n        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n    if (replicas.isEmpty()) {\n      return null;\n    }\n\n    \r\n    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n    Set<String> skipListSet = null;\n    if (skipList != null) {\n      skipListSet = new HashSet<>(skipList.length);\n      skipListSet.addAll(Arrays.asList(skipList));\n      log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n    }\n\n    List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n    skippedCoreNodeNames = new HashSet<>();\n    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n    for (Replica replica : replicas) {\n      String coreNodeName = replica.getName();\n      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n        log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n        log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n        skippedCoreNodeNames.add(replica.getName());\n      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())\n          || replica.getState() == Replica.State.DOWN) {\n        skippedCoreNodeNames.add(replica.getName());\n      } else {\n        nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n      }\n    }\n    return nodes;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":806,"status":"B"}],"commitId":"5b7866b0851eff66cb7e929beef5249e3c72ac36","commitMessage":"@@@SOLR-12955: Refactored DistributedUpdateProcessor to put SolrCloud specifics into a subclass\nCloses #528\n","date":"2019-03-20 01:26:31","modifiedFileCount":"8","status":"B","submitter":"Bar Rotstein"},{"authorTime":"2019-10-12 03:07:03","codes":[{"authorDate":"2019-10-12 03:07:03","commitOrder":2,"curCode":"  protected List<SolrCmdDistributor.Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    \r\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     \r\n      forwardToLeader = false;\n      return null;\n    }\n\n    clusterState = zkController.getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      \r\n      \r\n      \r\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        \r\n        \r\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     \r\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      \r\n      \r\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      \r\n      \r\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        \r\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        \r\n        \r\n        forwardToLeader = false;\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        \r\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        \r\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n","date":"2019-10-12 03:07:03","endLine":716,"groupId":"41176","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupRequest","params":"(Stringid@SolrInputDocumentdoc@Stringroute)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a7/6b6be2aac9b3007a7d9729eed36a7291f1397c.src","preCode":"  protected List<SolrCmdDistributor.Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    \r\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     \r\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      \r\n      \r\n      \r\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        \r\n        \r\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     \r\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      \r\n      \r\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      \r\n      \r\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        \r\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        \r\n        \r\n        forwardToLeader = false;\n        ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        \r\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        \r\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":596,"status":"M"},{"authorDate":"2019-10-12 03:07:03","commitOrder":2,"curCode":"  protected List<SolrCmdDistributor.Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {\n    String leaderCoreNodeName = leaderReplica.getName();\n    List<Replica> replicas = clusterState.getCollection(collection)\n        .getSlice(shardId)\n        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n    if (replicas.isEmpty()) {\n      return null;\n    }\n\n    \r\n    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n    Set<String> skipListSet = null;\n    if (skipList != null) {\n      skipListSet = new HashSet<>(skipList.length);\n      skipListSet.addAll(Arrays.asList(skipList));\n      log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n    }\n\n    List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n    skippedCoreNodeNames = new HashSet<>();\n    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n    for (Replica replica : replicas) {\n      String coreNodeName = replica.getName();\n      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n        log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n        log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n        skippedCoreNodeNames.add(replica.getName());\n      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())\n          || replica.getState() == Replica.State.DOWN) {\n        skippedCoreNodeNames.add(replica.getName());\n      } else {\n        nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n      }\n    }\n    return nodes;\n  }\n","date":"2019-10-12 03:07:03","endLine":857,"groupId":"41176","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaNodesForLeader","params":"(StringshardId@ReplicaleaderReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a7/6b6be2aac9b3007a7d9729eed36a7291f1397c.src","preCode":"  protected List<SolrCmdDistributor.Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    String leaderCoreNodeName = leaderReplica.getName();\n    List<Replica> replicas = clusterState.getCollection(collection)\n        .getSlice(shardId)\n        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n    if (replicas.isEmpty()) {\n      return null;\n    }\n\n    \r\n    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n    Set<String> skipListSet = null;\n    if (skipList != null) {\n      skipListSet = new HashSet<>(skipList.length);\n      skipListSet.addAll(Arrays.asList(skipList));\n      log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n    }\n\n    List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n    skippedCoreNodeNames = new HashSet<>();\n    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n    for (Replica replica : replicas) {\n      String coreNodeName = replica.getName();\n      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n        log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n        log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n        skippedCoreNodeNames.add(replica.getName());\n      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())\n          || replica.getState() == Replica.State.DOWN) {\n        skippedCoreNodeNames.add(replica.getName());\n      } else {\n        nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n      }\n    }\n    return nodes;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":820,"status":"M"}],"commitId":"a057b0d159f669d28565f48c3ee2bee76ab3d821","commitMessage":"@@@SOLR-13815: fix live split data loss due to cluster state change between checking current shard state and getting list of subShards (#920)\n\n* SOLR-13815: add simple live split test to help debugging possible issue\n\n* SOLR-13815: fix live split data loss due to cluster state change berween checking current shard state and getting list of subShards\n","date":"2019-10-12 03:07:03","modifiedFileCount":"2","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2020-04-21 09:08:15","codes":[{"authorDate":"2020-04-21 09:08:15","commitOrder":3,"curCode":"  protected List<SolrCmdDistributor.Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    \r\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     \r\n      forwardToLeader = false;\n      return null;\n    }\n\n    clusterState = zkController.getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      \r\n      \r\n      \r\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        \r\n        \r\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     \r\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      \r\n      \r\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      \r\n      \r\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        \r\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        \r\n        \r\n        forwardToLeader = false;\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        \r\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:{}\", skipListSet);\n        }\n\n        List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            if (log.isInfoEnabled()) {\n              log.info(\"check url:{} against:{} result:true\", replica.getCoreUrl(), skipListSet);\n            }\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            if (log.isDebugEnabled()) {\n              log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            }\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        \r\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n","date":"2020-04-21 09:08:15","endLine":720,"groupId":"122060","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupRequest","params":"(Stringid@SolrInputDocumentdoc@Stringroute)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/64/947aba6c50d3bb39605d31d525accdb2596922.src","preCode":"  protected List<SolrCmdDistributor.Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    \r\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     \r\n      forwardToLeader = false;\n      return null;\n    }\n\n    clusterState = zkController.getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      \r\n      \r\n      \r\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        \r\n        \r\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     \r\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      \r\n      \r\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      \r\n      \r\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        \r\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        \r\n        \r\n        forwardToLeader = false;\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        \r\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        \r\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":596,"status":"M"},{"authorDate":"2020-04-21 09:08:15","commitOrder":3,"curCode":"  protected List<SolrCmdDistributor.Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {\n    String leaderCoreNodeName = leaderReplica.getName();\n    List<Replica> replicas = clusterState.getCollection(collection)\n        .getSlice(shardId)\n        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n    if (replicas.isEmpty()) {\n      return null;\n    }\n\n    \r\n    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n    Set<String> skipListSet = null;\n    if (skipList != null) {\n      skipListSet = new HashSet<>(skipList.length);\n      skipListSet.addAll(Arrays.asList(skipList));\n      log.info(\"test.distrib.skip.servers was found and contains:{}\", skipListSet);\n    }\n\n    List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n    skippedCoreNodeNames = new HashSet<>();\n    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n    for (Replica replica : replicas) {\n      String coreNodeName = replica.getName();\n      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n        if (log.isInfoEnabled()) {\n          log.info(\"check url:{} against:{} result:true\", replica.getCoreUrl(), skipListSet);\n        }\n      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n        }\n        skippedCoreNodeNames.add(replica.getName());\n      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())\n          || replica.getState() == Replica.State.DOWN) {\n        skippedCoreNodeNames.add(replica.getName());\n      } else {\n        nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n      }\n    }\n    return nodes;\n  }\n","date":"2020-04-21 09:08:15","endLine":865,"groupId":"122060","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaNodesForLeader","params":"(StringshardId@ReplicaleaderReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/64/947aba6c50d3bb39605d31d525accdb2596922.src","preCode":"  protected List<SolrCmdDistributor.Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {\n    String leaderCoreNodeName = leaderReplica.getName();\n    List<Replica> replicas = clusterState.getCollection(collection)\n        .getSlice(shardId)\n        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n    if (replicas.isEmpty()) {\n      return null;\n    }\n\n    \r\n    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n    Set<String> skipListSet = null;\n    if (skipList != null) {\n      skipListSet = new HashSet<>(skipList.length);\n      skipListSet.addAll(Arrays.asList(skipList));\n      log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n    }\n\n    List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n    skippedCoreNodeNames = new HashSet<>();\n    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n    for (Replica replica : replicas) {\n      String coreNodeName = replica.getName();\n      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n        log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n        log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n        skippedCoreNodeNames.add(replica.getName());\n      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())\n          || replica.getState() == Replica.State.DOWN) {\n        skippedCoreNodeNames.add(replica.getName());\n      } else {\n        nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId));\n      }\n    }\n    return nodes;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":824,"status":"M"}],"commitId":"c94770c2b9c00ccdc2d617d595d62f85a332dc0c","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-21 09:08:15","modifiedFileCount":"38","status":"M","submitter":"Erick Erickson"}]
