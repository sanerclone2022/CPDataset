[{"authorTime":"2016-05-26 01:42:11","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":2,"curCode":"    public Object get(IndexReader reader, Object key) {\n      Map innerCache;\n      Object value;\n      synchronized (readerCache) {\n        innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(reader, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n              onlyForTesting = progress.value;\n            }\n          }\n          return progress.value;\n        }\n      }\n\n      return value;\n    }\n","date":"2011-07-10 07:01:53","endLine":172,"groupId":"32137","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(IndexReaderreader@Objectkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7b/265776df58b55b26d4507ca3c89bd7eb0acaed.src","preCode":"    public Object get(IndexReader reader, Object key) {\n      Map innerCache;\n      Object value;\n      synchronized (readerCache) {\n        innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(reader, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n              onlyForTesting = progress.value;\n            }\n          }\n          return progress.value;\n        }\n      }\n\n      return value;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"NB"},{"authorDate":"2016-05-26 01:42:11","commitOrder":2,"curCode":"    public void put(LeafReader reader, CacheKey key, Accountable value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Accountable> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          \r\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          \r\n          \r\n        }\n      }\n    }\n","date":"2016-05-26 01:42:11","endLine":166,"groupId":"13421","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(LeafReaderreader@CacheKeykey@Accountablevalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e6/a066d8767df5686ea65fd512d9d78a3089e77b.src","preCode":"    public void put(LeafReader reader, CacheKey key, Accountable value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Accountable> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          \r\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          \r\n          \r\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"}],"commitId":"366f8d18fe3ac9c9fb93493fe60d2bf4157de032","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-26 01:42:11","modifiedFileCount":"50","status":"M","submitter":"Noble Paul"},{"authorTime":"2017-02-28 21:21:30","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":3,"curCode":"    public Object get(IndexReader reader, Object key) {\n      Map innerCache;\n      Object value;\n      synchronized (readerCache) {\n        innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(reader, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n              onlyForTesting = progress.value;\n            }\n          }\n          return progress.value;\n        }\n      }\n\n      return value;\n    }\n","date":"2011-07-10 07:01:53","endLine":172,"groupId":"32137","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(IndexReaderreader@Objectkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7b/265776df58b55b26d4507ca3c89bd7eb0acaed.src","preCode":"    public Object get(IndexReader reader, Object key) {\n      Map innerCache;\n      Object value;\n      synchronized (readerCache) {\n        innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(reader, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n              onlyForTesting = progress.value;\n            }\n          }\n          return progress.value;\n        }\n      }\n\n      return value;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"N"},{"authorDate":"2017-02-28 21:21:30","commitOrder":3,"curCode":"    public void put(LeafReader reader, CacheKey key, Accountable value) {\n      IndexReader.CacheHelper cacheHelper = reader.getCoreCacheHelper();\n      if (cacheHelper == null) {\n        throw new IllegalStateException(\"Cannot cache on \" + reader);\n      }\n      final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Accountable> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          \r\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          \r\n          \r\n        }\n      }\n    }\n","date":"2017-02-28 21:46:45","endLine":168,"groupId":"13421","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(LeafReaderreader@CacheKeykey@Accountablevalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e6/e8fdac5fc78bb28c82b9c8c05a90124a522095.src","preCode":"    public void put(LeafReader reader, CacheKey key, Accountable value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Accountable> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          \r\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          \r\n          \r\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"df6f83072303b4891a296b700a50c743284d3c30","commitMessage":"@@@LUCENE-7410: Make cache keys and close listeners less trappy.\n","date":"2017-02-28 21:46:45","modifiedFileCount":"75","status":"M","submitter":"Adrien Grand"},{"authorTime":"2017-02-28 21:21:30","codes":[{"authorDate":"2020-05-23 01:40:20","commitOrder":4,"curCode":"    public Object get(IndexReader reader, Object key) {\n      @SuppressWarnings({\"rawtypes\"})\n      Map innerCache;\n      Object value;\n      synchronized (readerCache) {\n        innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap<>();\n          readerCache.put(reader, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n              onlyForTesting = progress.value;\n            }\n          }\n          return progress.value;\n        }\n      }\n\n      return value;\n    }\n","date":"2020-05-23 01:40:20","endLine":223,"groupId":"32137","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(IndexReaderreader@Objectkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/18/3cf2d8e9c3393266be54d9588fbea368b96610.src","preCode":"    public Object get(IndexReader reader, Object key) {\n      Map innerCache;\n      Object value;\n      synchronized (readerCache) {\n        innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(reader, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n              onlyForTesting = progress.value;\n            }\n          }\n          return progress.value;\n        }\n      }\n\n      return value;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"},{"authorDate":"2017-02-28 21:21:30","commitOrder":4,"curCode":"    public void put(LeafReader reader, CacheKey key, Accountable value) {\n      IndexReader.CacheHelper cacheHelper = reader.getCoreCacheHelper();\n      if (cacheHelper == null) {\n        throw new IllegalStateException(\"Cannot cache on \" + reader);\n      }\n      final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Accountable> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          \r\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          \r\n          \r\n        }\n      }\n    }\n","date":"2017-02-28 21:46:45","endLine":168,"groupId":"13421","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(LeafReaderreader@CacheKeykey@Accountablevalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e6/e8fdac5fc78bb28c82b9c8c05a90124a522095.src","preCode":"    public void put(LeafReader reader, CacheKey key, Accountable value) {\n      IndexReader.CacheHelper cacheHelper = reader.getCoreCacheHelper();\n      if (cacheHelper == null) {\n        throw new IllegalStateException(\"Cannot cache on \" + reader);\n      }\n      final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Accountable> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          \r\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          \r\n          \r\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"N"}],"commitId":"675956c0041b18d48a7c059ea458c49f5310d74a","commitMessage":"@@@SOLR-14495: Fix or suppress warnings in solr/search/function\n","date":"2020-05-23 01:40:20","modifiedFileCount":"15","status":"M","submitter":"Erick Erickson"},{"authorTime":"2017-02-28 21:21:30","codes":[{"authorDate":"2021-07-13 23:49:56","commitOrder":5,"curCode":"    public Object get(IndexReader reader, Object key) {\n      Map<Object, Object> innerCache;\n      Object value;\n      synchronized (readerCache) {\n        innerCache = readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap<>();\n          readerCache.put(reader, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n              onlyForTesting = progress.value;\n            }\n          }\n          return progress.value;\n        }\n      }\n\n      return value;\n    }\n","date":"2021-07-13 23:49:56","endLine":212,"groupId":"102300","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"get","params":"(IndexReaderreader@Objectkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/19/ae494828e526640e1a7fe80073ee2bc0a68549.src","preCode":"    public Object get(IndexReader reader, Object key) {\n      @SuppressWarnings({\"rawtypes\"})\n      Map innerCache;\n      Object value;\n      synchronized (readerCache) {\n        innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap<>();\n          readerCache.put(reader, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n              onlyForTesting = progress.value;\n            }\n          }\n          return progress.value;\n        }\n      }\n\n      return value;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"},{"authorDate":"2017-02-28 21:21:30","commitOrder":5,"curCode":"    public void put(LeafReader reader, CacheKey key, Accountable value) {\n      IndexReader.CacheHelper cacheHelper = reader.getCoreCacheHelper();\n      if (cacheHelper == null) {\n        throw new IllegalStateException(\"Cannot cache on \" + reader);\n      }\n      final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Accountable> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          \r\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          \r\n          \r\n        }\n      }\n    }\n","date":"2017-02-28 21:46:45","endLine":168,"groupId":"102300","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(LeafReaderreader@CacheKeykey@Accountablevalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e6/e8fdac5fc78bb28c82b9c8c05a90124a522095.src","preCode":"    public void put(LeafReader reader, CacheKey key, Accountable value) {\n      IndexReader.CacheHelper cacheHelper = reader.getCoreCacheHelper();\n      if (cacheHelper == null) {\n        throw new IllegalStateException(\"Cannot cache on \" + reader);\n      }\n      final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Accountable> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          \r\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          \r\n          \r\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"N"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
