[{"authorTime":"2017-02-10 13:39:06","codes":[{"authorDate":"2016-10-07 07:36:39","commitOrder":4,"curCode":"  public List<StreamExpression> getExpressionOperandsRepresentingTypes(StreamExpression expression, Class ... clazzes){\n    List<StreamExpression> matchingStreamExpressions = new ArrayList<>();\n    List<StreamExpression> allStreamExpressions = getExpressionOperands(expression);\n    \n    parameterLoop:\n    for(StreamExpression streamExpression : allStreamExpressions){\n      if(functionNames.containsKey(streamExpression.getFunctionName())){\n        for(Class clazz : clazzes){\n          if(!clazz.isAssignableFrom(functionNames.get(streamExpression.getFunctionName()))){\n            continue parameterLoop;\n          }\n        }\n        \n        matchingStreamExpressions.add(streamExpression);\n      }\n    }\n    \n    return matchingStreamExpressions;   \n  }\n","date":"2016-10-07 21:24:02","endLine":175,"groupId":"10685","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getExpressionOperandsRepresentingTypes","params":"(StreamExpressionexpression@Class...clazzes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d2/e72dfc9ea841b8b8c4e00e09892bf88ccca9d7.src","preCode":"  public List<StreamExpression> getExpressionOperandsRepresentingTypes(StreamExpression expression, Class ... clazzes){\n    List<StreamExpression> matchingStreamExpressions = new ArrayList<>();\n    List<StreamExpression> allStreamExpressions = getExpressionOperands(expression);\n    \n    parameterLoop:\n    for(StreamExpression streamExpression : allStreamExpressions){\n      if(functionNames.containsKey(streamExpression.getFunctionName())){\n        for(Class clazz : clazzes){\n          if(!clazz.isAssignableFrom(functionNames.get(streamExpression.getFunctionName()))){\n            continue parameterLoop;\n          }\n        }\n        \n        matchingStreamExpressions.add(streamExpression);\n      }\n    }\n    \n    return matchingStreamExpressions;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"NB"},{"authorDate":"2017-02-10 13:39:06","commitOrder":4,"curCode":"  public boolean doesRepresentTypes(StreamExpression expression, Class ... clazzes){\n    if(functionNames.containsKey(expression.getFunctionName())){\n      for(Class clazz : clazzes){\n        if(!clazz.isAssignableFrom(functionNames.get(expression.getFunctionName()))){\n          return false;\n        }\n      }\n      return true;\n    }\n    \n    return false;    \n  }\n","date":"2017-02-10 13:39:51","endLine":196,"groupId":"10685","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doesRepresentTypes","params":"(StreamExpressionexpression@Class...clazzes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/7319d36a4797356f1044aad0d4b56feb961a3b.src","preCode":"  public boolean doesRepresentTypes(StreamExpression expression, Class ... clazzes){\n    if(functionNames.containsKey(expression.getFunctionName())){\n      for(Class clazz : clazzes){\n        if(!clazz.isAssignableFrom(functionNames.get(expression.getFunctionName()))){\n          return false;\n        }\n      }\n      return true;\n    }\n    \n    return false;    \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"}],"commitId":"62489678d074edb2ee962e1c4ee38026ff504b2a","commitMessage":"@@@SOLR-9916: Adds Stream Evaluators to support evaluating values from tuples\n","date":"2017-02-10 13:39:51","modifiedFileCount":"6","status":"M","submitter":"Dennis Gove"},{"authorTime":"2019-12-23 12:20:26","codes":[{"authorDate":"2019-12-23 12:20:26","commitOrder":5,"curCode":"  public List<StreamExpression> getExpressionOperandsRepresentingTypes(StreamExpression expression, Class ... clazzes){\n    List<StreamExpression> matchingStreamExpressions = new ArrayList<>();\n    List<StreamExpression> allStreamExpressions = getExpressionOperands(expression);\n    \n    parameterLoop:\n    for(StreamExpression streamExpression : allStreamExpressions) {\n      Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(streamExpression.getFunctionName());\n      if (classSupplier != null) {\n        for (Class clazz : clazzes) {\n          if (!clazz.isAssignableFrom(classSupplier.get())) {\n            continue parameterLoop;\n          }\n        }\n\n        matchingStreamExpressions.add(streamExpression);\n      }\n    }\n    \n    return matchingStreamExpressions;   \n  }\n","date":"2019-12-23 12:20:26","endLine":198,"groupId":"23003","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getExpressionOperandsRepresentingTypes","params":"(StreamExpressionexpression@Class...clazzes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/176dd212c3e82fd07c7479b3863fedaf18857d.src","preCode":"  public List<StreamExpression> getExpressionOperandsRepresentingTypes(StreamExpression expression, Class ... clazzes){\n    List<StreamExpression> matchingStreamExpressions = new ArrayList<>();\n    List<StreamExpression> allStreamExpressions = getExpressionOperands(expression);\n    \n    parameterLoop:\n    for(StreamExpression streamExpression : allStreamExpressions){\n      if(functionNames.containsKey(streamExpression.getFunctionName())){\n        for(Class clazz : clazzes){\n          if(!clazz.isAssignableFrom(functionNames.get(streamExpression.getFunctionName()))){\n            continue parameterLoop;\n          }\n        }\n        \n        matchingStreamExpressions.add(streamExpression);\n      }\n    }\n    \n    return matchingStreamExpressions;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"},{"authorDate":"2019-12-23 12:20:26","commitOrder":5,"curCode":"  public boolean doesRepresentTypes(StreamExpression expression, Class ... clazzes){\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(expression.getFunctionName());\n    if(classSupplier != null){\n      for(Class clazz : clazzes){\n        if(!clazz.isAssignableFrom(classSupplier.get())){\n          return false;\n        }\n      }\n      return true;\n    }\n    \n    return false;    \n  }\n","date":"2019-12-23 12:20:26","endLine":212,"groupId":"23003","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doesRepresentTypes","params":"(StreamExpressionexpression@Class...clazzes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/176dd212c3e82fd07c7479b3863fedaf18857d.src","preCode":"  public boolean doesRepresentTypes(StreamExpression expression, Class ... clazzes){\n    if(functionNames.containsKey(expression.getFunctionName())){\n      for(Class clazz : clazzes){\n        if(!clazz.isAssignableFrom(functionNames.get(expression.getFunctionName()))){\n          return false;\n        }\n      }\n      return true;\n    }\n    \n    return false;    \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"ef15ae9805557685874c2a3269dae15ef7f58ccf","commitMessage":"@@@SOLR-14125 : Streaming expressions to be loadable from packages (#1108)\n\n SOLR-14125: Make <expressible> plugins work with packages","date":"2019-12-23 12:20:26","modifiedFileCount":"8","status":"M","submitter":"Noble Paul"},{"authorTime":"2020-06-10 07:16:14","codes":[{"authorDate":"2020-06-10 07:16:14","commitOrder":6,"curCode":"  public List<StreamExpression> getExpressionOperandsRepresentingTypes(StreamExpression expression,\n                                                                       @SuppressWarnings({\"rawtypes\"})Class ... clazzes) {\n    List<StreamExpression> matchingStreamExpressions = new ArrayList<>();\n    List<StreamExpression> allStreamExpressions = getExpressionOperands(expression);\n    \n    parameterLoop:\n    for (StreamExpression streamExpression : allStreamExpressions) {\n      Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(streamExpression.getFunctionName());\n      if (classSupplier != null) {\n        for (@SuppressWarnings({\"rawtypes\"})Class clazz : clazzes) {\n          if (!clazz.isAssignableFrom(classSupplier.get())) {\n            continue parameterLoop;\n          }\n        }\n        matchingStreamExpressions.add(streamExpression);\n      }\n    }\n    return matchingStreamExpressions;   \n  }\n","date":"2020-06-10 07:21:36","endLine":221,"groupId":"23003","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getExpressionOperandsRepresentingTypes","params":"(StreamExpressionexpression@@SuppressWarnings({\"rawtypes\"})Class...clazzes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f3/443e9c60bae95de61db442b8cae15153b4801d.src","preCode":"  public List<StreamExpression> getExpressionOperandsRepresentingTypes(StreamExpression expression, Class ... clazzes) {\n    List<StreamExpression> matchingStreamExpressions = new ArrayList<>();\n    List<StreamExpression> allStreamExpressions = getExpressionOperands(expression);\n    \n    parameterLoop:\n    for (StreamExpression streamExpression : allStreamExpressions) {\n      Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(streamExpression.getFunctionName());\n      if (classSupplier != null) {\n        for (Class clazz : clazzes) {\n          if (!clazz.isAssignableFrom(classSupplier.get())) {\n            continue parameterLoop;\n          }\n        }\n        matchingStreamExpressions.add(streamExpression);\n      }\n    }\n    return matchingStreamExpressions;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2020-06-10 07:16:14","commitOrder":6,"curCode":"  public boolean doesRepresentTypes(StreamExpression expression, @SuppressWarnings({\"rawtypes\"})Class ... clazzes) {\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(expression.getFunctionName());\n    if (classSupplier != null) {\n      for (@SuppressWarnings({\"rawtypes\"})Class clazz : clazzes) {\n        if (!clazz.isAssignableFrom(classSupplier.get())) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;    \n  }\n","date":"2020-06-10 07:21:36","endLine":235,"groupId":"23003","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doesRepresentTypes","params":"(StreamExpressionexpression@@SuppressWarnings({\"rawtypes\"})Class...clazzes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f3/443e9c60bae95de61db442b8cae15153b4801d.src","preCode":"  public boolean doesRepresentTypes(StreamExpression expression, Class ... clazzes) {\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(expression.getFunctionName());\n    if (classSupplier != null) {\n      for (Class clazz : clazzes) {\n        if (!clazz.isAssignableFrom(classSupplier.get())) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;    \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"}],"commitId":"c8f48d470108e5bbb356a9dbc8d040b75214c7dc","commitMessage":"@@@SOLR-14547: Fix or suppress warnings in solr/client/solrj/io/stream\n","date":"2020-06-10 07:21:36","modifiedFileCount":"43","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-03 06:17:26","codes":[{"authorDate":"2021-06-03 06:17:26","commitOrder":7,"curCode":"  public List<StreamExpression> getExpressionOperandsRepresentingTypes(StreamExpression expression, Class<?>... clazzes) {\n    List<StreamExpression> matchingStreamExpressions = new ArrayList<>();\n    List<StreamExpression> allStreamExpressions = getExpressionOperands(expression);\n    \n    parameterLoop:\n    for (StreamExpression streamExpression : allStreamExpressions) {\n      Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(streamExpression.getFunctionName());\n      if (classSupplier != null) {\n        for (Class<?> clazz : clazzes) {\n          if (!clazz.isAssignableFrom(classSupplier.get())) {\n            continue parameterLoop;\n          }\n        }\n        matchingStreamExpressions.add(streamExpression);\n      }\n    }\n    return matchingStreamExpressions;   \n  }\n","date":"2021-06-03 06:17:26","endLine":217,"groupId":"10355","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"getExpressionOperandsRepresentingTypes","params":"(StreamExpressionexpression@Class<?>...clazzes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/83/81da1bf58fac3cb043b56e0583c74a16396806.src","preCode":"  public List<StreamExpression> getExpressionOperandsRepresentingTypes(StreamExpression expression,\n                                                                       @SuppressWarnings({\"rawtypes\"})Class ... clazzes) {\n    List<StreamExpression> matchingStreamExpressions = new ArrayList<>();\n    List<StreamExpression> allStreamExpressions = getExpressionOperands(expression);\n    \n    parameterLoop:\n    for (StreamExpression streamExpression : allStreamExpressions) {\n      Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(streamExpression.getFunctionName());\n      if (classSupplier != null) {\n        for (@SuppressWarnings({\"rawtypes\"})Class clazz : clazzes) {\n          if (!clazz.isAssignableFrom(classSupplier.get())) {\n            continue parameterLoop;\n          }\n        }\n        matchingStreamExpressions.add(streamExpression);\n      }\n    }\n    return matchingStreamExpressions;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2021-06-03 06:17:26","commitOrder":7,"curCode":"  public boolean doesRepresentTypes(StreamExpression expression, Class<?>... clazzes) {\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(expression.getFunctionName());\n    if (classSupplier != null) {\n      for (Class<?> clazz : clazzes) {\n        if (!clazz.isAssignableFrom(classSupplier.get())) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;    \n  }\n","date":"2021-06-03 06:17:26","endLine":230,"groupId":"10355","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"doesRepresentTypes","params":"(StreamExpressionexpression@Class<?>...clazzes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/83/81da1bf58fac3cb043b56e0583c74a16396806.src","preCode":"  public boolean doesRepresentTypes(StreamExpression expression, @SuppressWarnings({\"rawtypes\"})Class ... clazzes) {\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(expression.getFunctionName());\n    if (classSupplier != null) {\n      for (@SuppressWarnings({\"rawtypes\"})Class clazz : clazzes) {\n        if (!clazz.isAssignableFrom(classSupplier.get())) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;    \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"}]
