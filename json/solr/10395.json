[{"authorTime":"2019-06-18 00:59:43","codes":[{"authorDate":"2019-06-18 00:59:43","commitOrder":3,"curCode":"  public void testStateWatcherChecksCurrentStateOnRegister() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"currentstate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerDocCollectionWatcher(\"currentstate\", (c) -> {\n      latch.countDown();\n      return false;\n    });\n\n    assertTrue(\"DocCollectionWatcher isn't called on new registration\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    assertEquals(\"DocCollectionWatcher should be retained\",\n                 1, client.getZkStateReader().getStateWatchers(\"currentstate\").size());\n\n    final CountDownLatch latch2 = new CountDownLatch(1);\n    client.registerDocCollectionWatcher(\"currentstate\", (c) -> {\n      latch2.countDown();\n      return true;\n    });\n\n    assertTrue(\"DocCollectionWatcher isn't called when registering for already-watched collection\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    waitFor(\"DocCollectionWatcher should be removed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n            () -> client.getZkStateReader().getStateWatchers(\"currentstate\").size() == 1);\n  }\n","date":"2019-06-18 00:59:43","endLine":134,"groupId":"24703","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateWatcherChecksCurrentStateOnRegister","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/24a1c929c47e061b241a2536395e4a77cec598.src","preCode":"  public void testStateWatcherChecksCurrentStateOnRegister() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"currentstate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerDocCollectionWatcher(\"currentstate\", (c) -> {\n      latch.countDown();\n      return false;\n    });\n\n    assertTrue(\"DocCollectionWatcher isn't called on new registration\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    assertEquals(\"DocCollectionWatcher should be retained\",\n                 1, client.getZkStateReader().getStateWatchers(\"currentstate\").size());\n\n    final CountDownLatch latch2 = new CountDownLatch(1);\n    client.registerDocCollectionWatcher(\"currentstate\", (c) -> {\n      latch2.countDown();\n      return true;\n    });\n\n    assertTrue(\"DocCollectionWatcher isn't called when registering for already-watched collection\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    waitFor(\"DocCollectionWatcher should be removed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n            () -> client.getZkStateReader().getStateWatchers(\"currentstate\").size() == 1);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/cloud/TestDocCollectionWatcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"},{"authorDate":"2019-06-18 00:59:43","commitOrder":3,"curCode":"  public void testStateWatcherChecksCurrentStateOnRegister() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"currentstate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"currentstate\", (n, c) -> {\n      latch.countDown();\n      return false;\n    });\n\n    assertTrue(\"CollectionStateWatcher isn't called on new registration\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    assertEquals(\"CollectionStateWatcher should be retained\",\n                 1, client.getZkStateReader().getStateWatchers(\"currentstate\").size());\n\n    final CountDownLatch latch2 = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"currentstate\", (n, c) -> {\n      latch2.countDown();\n      return true;\n    });\n\n    assertTrue(\"CollectionStateWatcher isn't called when registering for already-watched collection\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    waitFor(\"CollectionStateWatcher should be removed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n            () -> client.getZkStateReader().getStateWatchers(\"currentstate\").size() == 1);\n  }\n","date":"2019-06-18 00:59:43","endLine":193,"groupId":"57238","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateWatcherChecksCurrentStateOnRegister","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f9/7b537e64883c945844f08e3dd57dedafd207cc.src","preCode":"  public void testStateWatcherChecksCurrentStateOnRegister() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"currentstate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"currentstate\", (n, c) -> {\n      latch.countDown();\n      return false;\n    });\n\n    assertTrue(\"CollectionStateWatcher isn't called on new registration\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    assertEquals(\"CollectionStateWatcher should be retained\",\n                 1, client.getZkStateReader().getStateWatchers(\"currentstate\").size());\n\n    final CountDownLatch latch2 = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"currentstate\", (n, c) -> {\n      latch2.countDown();\n      return true;\n    });\n\n    assertTrue(\"CollectionStateWatcher isn't called when registering for already-watched collection\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    waitFor(\"CollectionStateWatcher should be removed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n            () -> client.getZkStateReader().getStateWatchers(\"currentstate\").size() == 1);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"MB"}],"commitId":"5a974860fa83408a86ca64b417f3111b037da7eb","commitMessage":"@@@SOLR-13490: Fix CollectionStateWatcher/CollectionStatePredicate based APIs in ZkStateReader and CloudSolrClient to be triggered on liveNode changes.\n\nAlso add Predicate<DocCollection> equivilents for callers that don't care about liveNodes.\n","date":"2019-06-18 00:59:43","modifiedFileCount":"15","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2021-01-18 23:59:41","codes":[{"authorDate":"2019-06-18 00:59:43","commitOrder":4,"curCode":"  public void testStateWatcherChecksCurrentStateOnRegister() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"currentstate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerDocCollectionWatcher(\"currentstate\", (c) -> {\n      latch.countDown();\n      return false;\n    });\n\n    assertTrue(\"DocCollectionWatcher isn't called on new registration\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    assertEquals(\"DocCollectionWatcher should be retained\",\n                 1, client.getZkStateReader().getStateWatchers(\"currentstate\").size());\n\n    final CountDownLatch latch2 = new CountDownLatch(1);\n    client.registerDocCollectionWatcher(\"currentstate\", (c) -> {\n      latch2.countDown();\n      return true;\n    });\n\n    assertTrue(\"DocCollectionWatcher isn't called when registering for already-watched collection\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    waitFor(\"DocCollectionWatcher should be removed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n            () -> client.getZkStateReader().getStateWatchers(\"currentstate\").size() == 1);\n  }\n","date":"2019-06-18 00:59:43","endLine":134,"groupId":"10395","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateWatcherChecksCurrentStateOnRegister","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/24a1c929c47e061b241a2536395e4a77cec598.src","preCode":"  public void testStateWatcherChecksCurrentStateOnRegister() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"currentstate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerDocCollectionWatcher(\"currentstate\", (c) -> {\n      latch.countDown();\n      return false;\n    });\n\n    assertTrue(\"DocCollectionWatcher isn't called on new registration\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    assertEquals(\"DocCollectionWatcher should be retained\",\n                 1, client.getZkStateReader().getStateWatchers(\"currentstate\").size());\n\n    final CountDownLatch latch2 = new CountDownLatch(1);\n    client.registerDocCollectionWatcher(\"currentstate\", (c) -> {\n      latch2.countDown();\n      return true;\n    });\n\n    assertTrue(\"DocCollectionWatcher isn't called when registering for already-watched collection\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    waitFor(\"DocCollectionWatcher should be removed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n            () -> client.getZkStateReader().getStateWatchers(\"currentstate\").size() == 1);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/cloud/TestDocCollectionWatcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"N"},{"authorDate":"2021-01-18 23:59:41","commitOrder":4,"curCode":"  public void testStateWatcherChecksCurrentStateOnRegister() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"currentstate\", \"config\", 1, 1)\n        .setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"currentstate\", (n, c) -> {\n      latch.countDown();\n      return false;\n    });\n\n    assertTrue(\"CollectionStateWatcher isn't called on new registration\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    assertEquals(\"CollectionStateWatcher should be retained\",\n                 1, client.getZkStateReader().getStateWatchers(\"currentstate\").size());\n\n    final CountDownLatch latch2 = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"currentstate\", (n, c) -> {\n      latch2.countDown();\n      return true;\n    });\n\n    assertTrue(\"CollectionStateWatcher isn't called when registering for already-watched collection\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    waitFor(\"CollectionStateWatcher should be removed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n            () -> client.getZkStateReader().getStateWatchers(\"currentstate\").size() == 1);\n  }\n","date":"2021-01-18 23:59:41","endLine":198,"groupId":"10395","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testStateWatcherChecksCurrentStateOnRegister","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/94/eae27b05c2869601c305c17d036f1058236bd1.src","preCode":"  public void testStateWatcherChecksCurrentStateOnRegister() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"currentstate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"currentstate\", (n, c) -> {\n      latch.countDown();\n      return false;\n    });\n\n    assertTrue(\"CollectionStateWatcher isn't called on new registration\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    assertEquals(\"CollectionStateWatcher should be retained\",\n                 1, client.getZkStateReader().getStateWatchers(\"currentstate\").size());\n\n    final CountDownLatch latch2 = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"currentstate\", (n, c) -> {\n      latch2.countDown();\n      return true;\n    });\n\n    assertTrue(\"CollectionStateWatcher isn't called when registering for already-watched collection\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n    waitFor(\"CollectionStateWatcher should be removed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n            () -> client.getZkStateReader().getStateWatchers(\"currentstate\").size() == 1);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
