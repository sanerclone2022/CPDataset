[{"authorTime":"2016-07-07 04:42:21","codes":[{"authorDate":"2016-07-07 04:42:21","commitOrder":4,"curCode":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    \r\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",StringUtils.join(fl.toArray(),','));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams p : Arrays.asList(singleFl, multiFl)) {\n        assertQ(p.toString(),\n                req(p)\n                ,\"//result[@numFound='5']\"\n                ,\"//result/doc/str[@name='id']\"\n                ,\"//result/doc/float[@name='score']\"\n                ,\"//result/doc/str[@name='subject']\"\n                ,\"//result/doc/int[@name='val_i']\"\n                ,\"//result/doc/int[@name='[docid]']\"\n                ,\"//result/doc/str[@name='[explain]']\"\n                \n                ,\"//result/doc[count(*)=6]\"\n                );\n      }\n    }\n  }\n","date":"2016-07-07 04:42:21","endLine":711,"groupId":"56652","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAugmentersGlobsExplicitAndScoreOhMy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/6848b7c028597e5836faf5c70afecc68fa3cef.src","preCode":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    \r\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",StringUtils.join(fl.toArray(),','));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams p : Arrays.asList(singleFl, multiFl)) {\n        assertQ(p.toString(),\n                req(p)\n                ,\"//result[@numFound='5']\"\n                ,\"//result/doc/str[@name='id']\"\n                ,\"//result/doc/float[@name='score']\"\n                ,\"//result/doc/str[@name='subject']\"\n                ,\"//result/doc/int[@name='val_i']\"\n                ,\"//result/doc/int[@name='[docid]']\"\n                ,\"//result/doc/str[@name='[explain]']\"\n                \n                ,\"//result/doc[count(*)=6]\"\n                );\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":679,"status":"MB"},{"authorDate":"2016-07-07 04:42:21","commitOrder":4,"curCode":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    \r\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",StringUtils.join(fl.toArray(),','));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams params : Arrays.asList(singleFl, multiFl)) {\n        SolrDocumentList docs = assertSearch(params);\n        assertEquals(params + \" => \" + docs, 5, docs.getNumFound());\n        \r\n        for (SolrDocument doc : docs) {\n          String msg = params + \" => \" + doc;\n          assertEquals(msg, 6, doc.size());\n          assertTrue(msg, doc.getFieldValue(\"id\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"[docid]\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"[explain]\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"score\") instanceof Float);\n          assertTrue(msg, doc.getFieldValue(\"val_i\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"subject\") instanceof String);\n        }\n      }\n    }\n  }\n","date":"2016-07-07 04:42:21","endLine":751,"groupId":"56652","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAugmentersGlobsExplicitAndScoreOhMy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bf/56821a61489923d2f691634fd073c8590c7b6a.src","preCode":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    \r\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",StringUtils.join(fl.toArray(),','));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams params : Arrays.asList(singleFl, multiFl)) {\n        SolrDocumentList docs = assertSearch(params);\n        assertEquals(params + \" => \" + docs, 5, docs.getNumFound());\n        \r\n        for (SolrDocument doc : docs) {\n          String msg = params + \" => \" + doc;\n          assertEquals(msg, 6, doc.size());\n          assertTrue(msg, doc.getFieldValue(\"id\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"[docid]\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"[explain]\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"score\") instanceof Float);\n          assertTrue(msg, doc.getFieldValue(\"val_i\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"subject\") instanceof String);\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":718,"status":"B"}],"commitId":"ae316f1e39e58d89758f997913a38059d74ccb47","commitMessage":"@@@SOLR-9180: More comprehensive tests of psuedo-fields for RTG and SolrCloud requests\n\nThis commit also includes new @AwaitsFix'ed tests for the following known issues...\n\n * SOLR-9285 ArrayIndexOutOfBoundsException when ValueSourceAugmenter used with RTG on uncommitted doc\n * SOLR-9286 SolrCloud RTG: psuedo-fields (like ValueSourceAugmenter.  [shard].  etc...) silently fails (even for committed doc)\n * SOLR-9287 single node RTG: NPE if score is requested\n * SOLR-9288 RTG: fl=[docid] silently missing for uncommitted docs\n * SOLR-9289 SolrCloud RTG: fl=[docid] silently ignored for all docs\n","date":"2016-07-07 04:42:21","modifiedFileCount":"1","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2019-03-20 03:04:00","codes":[{"authorDate":"2019-03-20 03:04:00","commitOrder":5,"curCode":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    \r\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",String.join(\",\", fl));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams p : Arrays.asList(singleFl, multiFl)) {\n        assertQ(p.toString(),\n                req(p)\n                ,\"//result[@numFound='5']\"\n                ,\"//result/doc/str[@name='id']\"\n                ,\"//result/doc/float[@name='score']\"\n                ,\"//result/doc/str[@name='subject']\"\n                ,\"//result/doc/int[@name='val_i']\"\n                ,\"//result/doc/int[@name='[docid]']\"\n                ,\"//result/doc/str[@name='[explain]']\"\n                \n                ,\"//result/doc[count(*)=6]\"\n                );\n      }\n    }\n  }\n","date":"2019-03-21 07:37:19","endLine":712,"groupId":"103173","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAugmentersGlobsExplicitAndScoreOhMy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e5/6f265b47fb83804b9f92badcb8c950b369c671.src","preCode":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    \r\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",StringUtils.join(fl.toArray(),','));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams p : Arrays.asList(singleFl, multiFl)) {\n        assertQ(p.toString(),\n                req(p)\n                ,\"//result[@numFound='5']\"\n                ,\"//result/doc/str[@name='id']\"\n                ,\"//result/doc/float[@name='score']\"\n                ,\"//result/doc/str[@name='subject']\"\n                ,\"//result/doc/int[@name='val_i']\"\n                ,\"//result/doc/int[@name='[docid]']\"\n                ,\"//result/doc/str[@name='[explain]']\"\n                \n                ,\"//result/doc[count(*)=6]\"\n                );\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":680,"status":"M"},{"authorDate":"2019-03-20 03:04:00","commitOrder":5,"curCode":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    \r\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",String.join(\",\", fl));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams params : Arrays.asList(singleFl, multiFl)) {\n        SolrDocumentList docs = assertSearch(params);\n        assertEquals(params + \" => \" + docs, 5, docs.getNumFound());\n        \r\n        for (SolrDocument doc : docs) {\n          String msg = params + \" => \" + doc;\n          assertEquals(msg, 6, doc.size());\n          assertTrue(msg, doc.getFieldValue(\"id\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"[docid]\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"[explain]\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"score\") instanceof Float);\n          assertTrue(msg, doc.getFieldValue(\"val_i\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"subject\") instanceof String);\n        }\n      }\n    }\n  }\n","date":"2019-03-21 07:37:19","endLine":755,"groupId":"103173","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAugmentersGlobsExplicitAndScoreOhMy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d4/aeae64c17281c04de1872bbc939e0296f55151.src","preCode":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    \r\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",StringUtils.join(fl.toArray(),','));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams params : Arrays.asList(singleFl, multiFl)) {\n        SolrDocumentList docs = assertSearch(params);\n        assertEquals(params + \" => \" + docs, 5, docs.getNumFound());\n        \r\n        for (SolrDocument doc : docs) {\n          String msg = params + \" => \" + doc;\n          assertEquals(msg, 6, doc.size());\n          assertTrue(msg, doc.getFieldValue(\"id\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"[docid]\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"[explain]\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"score\") instanceof Float);\n          assertTrue(msg, doc.getFieldValue(\"val_i\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"subject\") instanceof String);\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":722,"status":"M"}],"commitId":"6222abf4480ee15bad2e67942263f563ce5ee434","commitMessage":"@@@SOLR-9079: Remove commons-lang as a dependency\n\nSigned-off-by: Kevin Risden <krisden@apache.org>\n","date":"2019-03-21 07:37:19","modifiedFileCount":"56","status":"M","submitter":"Kevin Risden"}]
