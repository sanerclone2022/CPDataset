[{"authorTime":"2020-06-18 23:12:50","codes":[{"authorDate":"2021-04-06 00:57:24","commitOrder":4,"curCode":"  public SentinelIntSet assertFullWalkNoDupsElevated(final SolrParams params, final SentinelIntSet allExpected)\n    throws Exception {\n\n    final SentinelIntSet ids = new SentinelIntSet(allExpected.size(), -1);\n    final SentinelIntSet idsElevated = new SentinelIntSet(32, -1);\n\n    assertFullWalkNoDups(params, (doc) -> {\n        final int id = Integer.parseInt(doc.get(\"id\").toString());\n        final boolean elevated = Boolean.parseBoolean(doc.getOrDefault(\"[elevated]\",\"false\").toString());\n        assertTrue(id + \" is not expected to match query\",\n                   allExpected.exists(id));\n        assertFalse(\"walk already seen: \" + id,\n                    ids.exists(id));\n        if (elevated) {\n          assertEquals(\"id is elevated, but we've already seen non elevated ids: \" + id,\n                       idsElevated.size(), ids.size());\n          idsElevated.put(id);\n        }\n        ids.put(id);\n      });\n    assertEquals(\"total number of ids seen did not match expected\",\n                 allExpected.size(), ids.size());\n    \n    return idsElevated;\n  }\n","date":"2021-04-06 00:57:24","endLine":820,"groupId":"18961","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertFullWalkNoDupsElevated","params":"(finalSolrParamsparams@finalSentinelIntSetallExpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/33/75b8e9500653518d5146fee74f74dca98dd7f9.src","preCode":"  public SentinelIntSet assertFullWalkNoDupsElevated(final SolrParams params, final SentinelIntSet allExpected)\n    throws Exception {\n\n    final SentinelIntSet ids = new SentinelIntSet(allExpected.size(), -1);\n    final SentinelIntSet idsElevated = new SentinelIntSet(32, -1);\n\n    assertFullWalkNoDups(params, (doc) -> {\n        final int id = Integer.parseInt(doc.get(\"id\").toString());\n        final boolean elevated = Boolean.parseBoolean(doc.getOrDefault(\"[elevated]\",\"false\").toString());\n        assertTrue(id + \" is not expected to match query\",\n                   allExpected.exists(id));\n        assertFalse(\"walk already seen: \" + id,\n                    ids.exists(id));\n        if (elevated) {\n          assertEquals(\"id is elevated, but we've already seen non elevated ids: \" + id,\n                       idsElevated.size(), ids.size());\n          idsElevated.put(id);\n        }\n        ids.put(id);\n      });\n    assertEquals(\"total number of ids seen did not match expected\",\n                 allExpected.size(), ids.size());\n    \n    return idsElevated;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":796,"status":"B"},{"authorDate":"2020-06-18 23:12:50","commitOrder":4,"curCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    @SuppressWarnings({\"rawtypes\"})\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","date":"2020-06-18 23:12:50","endLine":842,"groupId":"19296","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCursor","params":"(SolrQueryRequestreq@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/22/10e18ec3f8283d3a93ed4728fe8defedf74380.src","preCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    @SuppressWarnings({\"rawtypes\"})\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":833,"status":"NB"}],"commitId":"59a59138668e9513060824d85ee375a1723f4bfb","commitMessage":"@@@SOLR-11921: Move \"cursorMark\" logic from QueryComponent to SearchHandler so it can work with things like QueryElevationComponent that modify the SortSpec in prepare().  as well as possible custom \"search\" components other then QueryComponent\n","date":"2021-04-06 00:57:24","modifiedFileCount":"9","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2021-07-13 23:49:56","codes":[{"authorDate":"2021-04-06 00:57:24","commitOrder":5,"curCode":"  public SentinelIntSet assertFullWalkNoDupsElevated(final SolrParams params, final SentinelIntSet allExpected)\n    throws Exception {\n\n    final SentinelIntSet ids = new SentinelIntSet(allExpected.size(), -1);\n    final SentinelIntSet idsElevated = new SentinelIntSet(32, -1);\n\n    assertFullWalkNoDups(params, (doc) -> {\n        final int id = Integer.parseInt(doc.get(\"id\").toString());\n        final boolean elevated = Boolean.parseBoolean(doc.getOrDefault(\"[elevated]\",\"false\").toString());\n        assertTrue(id + \" is not expected to match query\",\n                   allExpected.exists(id));\n        assertFalse(\"walk already seen: \" + id,\n                    ids.exists(id));\n        if (elevated) {\n          assertEquals(\"id is elevated, but we've already seen non elevated ids: \" + id,\n                       idsElevated.size(), ids.size());\n          idsElevated.put(id);\n        }\n        ids.put(id);\n      });\n    assertEquals(\"total number of ids seen did not match expected\",\n                 allExpected.size(), ids.size());\n    \n    return idsElevated;\n  }\n","date":"2021-04-06 00:57:24","endLine":820,"groupId":"102764","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertFullWalkNoDupsElevated","params":"(finalSolrParamsparams@finalSentinelIntSetallExpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/33/75b8e9500653518d5146fee74f74dca98dd7f9.src","preCode":"  public SentinelIntSet assertFullWalkNoDupsElevated(final SolrParams params, final SentinelIntSet allExpected)\n    throws Exception {\n\n    final SentinelIntSet ids = new SentinelIntSet(allExpected.size(), -1);\n    final SentinelIntSet idsElevated = new SentinelIntSet(32, -1);\n\n    assertFullWalkNoDups(params, (doc) -> {\n        final int id = Integer.parseInt(doc.get(\"id\").toString());\n        final boolean elevated = Boolean.parseBoolean(doc.getOrDefault(\"[elevated]\",\"false\").toString());\n        assertTrue(id + \" is not expected to match query\",\n                   allExpected.exists(id));\n        assertFalse(\"walk already seen: \" + id,\n                    ids.exists(id));\n        if (elevated) {\n          assertEquals(\"id is elevated, but we've already seen non elevated ids: \" + id,\n                       idsElevated.size(), ids.size());\n          idsElevated.put(id);\n        }\n        ids.put(id);\n      });\n    assertEquals(\"total number of ids seen did not match expected\",\n                 allExpected.size(), ids.size());\n    \n    return idsElevated;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":796,"status":"N"},{"authorDate":"2021-07-13 23:49:56","commitOrder":5,"curCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map<?, ?> rsp = (Map<?, ?>) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","date":"2021-07-13 23:49:56","endLine":1022,"groupId":"102764","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertCursor","params":"(SolrQueryRequestreq@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/37/8574c5282e4ef5640946d05498ca4ddd1c7ea8.src","preCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    @SuppressWarnings({\"rawtypes\"})\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1014,"status":"M"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
