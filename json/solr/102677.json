[{"authorTime":"2017-07-15 01:54:27","codes":[{"authorDate":"2017-07-15 01:54:27","commitOrder":4,"curCode":"  private void doTestIntPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Integer> values = getRandomInts(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\"; \n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/int[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\" \n          + (-1.0f * (float)values.get(i)) + \"']\"; \n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Integer>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Integer> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/int[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"), \n        ascNegXpathChecks);\n  }\n","date":"2017-07-15 01:54:35","endLine":2453,"groupId":"11667","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4e55e42bf83ea67b994b5fb6824d315756699a.src","preCode":"  private void doTestIntPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Integer> values = getRandomInts(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\"; \n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/int[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\" \n          + (-1.0f * (float)values.get(i)) + \"']\"; \n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Integer>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Integer> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/int[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"), \n        ascNegXpathChecks);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2420,"status":"MB"},{"authorDate":"2017-07-15 01:54:27","commitOrder":4,"curCode":"  private void doTestLongPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Long> values = getRandomLongs(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/long[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * (float)values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Long>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Long> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/long[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n  }\n","date":"2017-07-15 01:54:35","endLine":2488,"groupId":"11667","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestLongPointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4e55e42bf83ea67b994b5fb6824d315756699a.src","preCode":"  private void doTestLongPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Long> values = getRandomLongs(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/long[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * (float)values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Long>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Long> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/long[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2455,"status":"B"}],"commitId":"82515fd329ce02cee68ea533e7d4bfb022b2fb00","commitMessage":"@@@SOLR-10796: TestPointFields: increase randomized testing of non-trivial values (part 2)\n","date":"2017-07-15 01:54:35","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"},{"authorTime":"2017-07-15 04:40:19","codes":[{"authorDate":"2017-07-15 04:40:19","commitOrder":5,"curCode":"  private void doTestIntPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Integer> values = getRandomInts(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\"; \n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/int[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\" \n          + (-1.0f * (float)values.get(i)) + \"']\"; \n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Integer>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Integer> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/int[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"), \n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-07-15 04:40:19","endLine":2456,"groupId":"102677","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/b6971749523c4450f320fa25f8f31c6fe6db28.src","preCode":"  private void doTestIntPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Integer> values = getRandomInts(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\"; \n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/int[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\" \n          + (-1.0f * (float)values.get(i)) + \"']\"; \n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Integer>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Integer> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/int[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"), \n        ascNegXpathChecks);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2420,"status":"M"},{"authorDate":"2017-07-15 04:40:19","commitOrder":5,"curCode":"  private void doTestLongPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Long> values = getRandomLongs(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/long[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * (float)values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Long>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Long> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/long[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-07-15 04:40:19","endLine":2494,"groupId":"102677","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestLongPointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/b6971749523c4450f320fa25f8f31c6fe6db28.src","preCode":"  private void doTestLongPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Long> values = getRandomLongs(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/long[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * (float)values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Long>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Long> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/long[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2458,"status":"M"}],"commitId":"4cb74a50ef8a3386a436e69da6f9cd80fe4d746d","commitMessage":"@@@SOLR-10796: fix test bugs when RANDOM_MULTIPLIER > 1\n","date":"2017-07-15 04:40:19","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"}]
