[{"authorTime":"2019-10-29 06:49:21","codes":[{"authorDate":"2019-10-29 06:49:21","commitOrder":1,"curCode":"  public void replicaTypeAndReplicaBase() {\n    RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Replica> replicas = getBasicReplicaList();\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node4\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            )\n        )\n    );\n\n    \r\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n    ReplicaListTransformer rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node4\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n\n    params.set(\"routingPreference\", \"1\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n  }\n","date":"2019-10-29 06:49:21","endLine":112,"groupId":"48138","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"replicaTypeAndReplicaBase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/f2e681640bde718e8134a3f772e99527feae37.src","preCode":"  public void replicaTypeAndReplicaBase() {\n    RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Replica> replicas = getBasicReplicaList();\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node4\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            )\n        )\n    );\n\n    \r\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n    ReplicaListTransformer rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node4\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n\n    params.set(\"routingPreference\", \"1\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGeneratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"},{"authorDate":"2019-10-29 06:49:21","commitOrder":1,"curCode":"  public void replicaTypeAndReplicaLocationTest() {\n    List<Replica> replicas = getBasicReplicaList();\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node4\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            )\n        )\n    );\n\n    List<PreferenceRule> rules = PreferenceRule.from(\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\");\n    NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules, null);\n\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n  }\n","date":"2019-10-29 06:49:21","endLine":93,"groupId":"61022","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"replicaTypeAndReplicaLocationTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/24/5947a1788e5a47624d83fb0ce43a6cb82f46d4.src","preCode":"  public void replicaTypeAndReplicaLocationTest() {\n    List<Replica> replicas = getBasicReplicaList();\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node4\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            )\n        )\n    );\n\n    List<PreferenceRule> rules = PreferenceRule.from(\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\");\n    NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules, null);\n\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/NodePreferenceRulesComparatorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"}],"commitId":"fa27e476f74bc4ba83e3fcdc39b421bc53a45d16","commitMessage":"@@@SOLR-13865: Migrate replica routing code to SolrJ (#974)\n\n* [SOLR-13865] Migrate replica routing code to  solrJ\n\n* Added a CommonTestInjection class.\n\n* Fixing imports.\n\n* Reverted extraneous streaming changes.\n\n* Fix precommit errors.\n\n* Changing name of the RLTManager.\n\n* Splitting up existing tests.\n\n* Updated documentation.\n\n* Added solr/CHANGES.txt entry\n","date":"2019-10-29 06:49:21","modifiedFileCount":"7","status":"B","submitter":"Houston Putman"},{"authorTime":"2019-12-03 10:10:19","codes":[{"authorDate":"2019-12-03 10:10:19","commitOrder":2,"curCode":"  public void replicaTypeAndReplicaBase() {\n    RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Replica> replicas = getBasicReplicaList();\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node4\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n    ReplicaListTransformer rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node4\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n\n    params.set(\"routingPreference\", \"1\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n  }\n","date":"2019-12-03 10:10:19","endLine":112,"groupId":"48138","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"replicaTypeAndReplicaBase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5b/64fde54ba44ac9977196fb5e4e1df8cf85042e.src","preCode":"  public void replicaTypeAndReplicaBase() {\n    RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Replica> replicas = getBasicReplicaList();\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node4\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            )\n        )\n    );\n\n    \r\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n    ReplicaListTransformer rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node4\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n\n    params.set(\"routingPreference\", \"1\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGeneratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2019-12-03 10:10:19","commitOrder":2,"curCode":"  public void replicaTypeAndReplicaLocationTest() {\n    List<Replica> replicas = getBasicReplicaList();\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node4\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ),\"collection1\",\"shard1\"\n        )\n    );\n\n    List<PreferenceRule> rules = PreferenceRule.from(\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\");\n    NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules, null);\n\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n  }\n","date":"2019-12-03 10:10:19","endLine":93,"groupId":"61022","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"replicaTypeAndReplicaLocationTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/98dd08507babbaa4eabf455fa3ea07cbf35628.src","preCode":"  public void replicaTypeAndReplicaLocationTest() {\n    List<Replica> replicas = getBasicReplicaList();\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node4\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            )\n        )\n    );\n\n    List<PreferenceRule> rules = PreferenceRule.from(\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\");\n    NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules, null);\n\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/NodePreferenceRulesComparatorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"d8f9f47ca0ecf762e91602d984a1882f1f5e3da9","commitMessage":"@@@SOLR-13992: Refactor code to have collection.  shard name in Replica. Slice (#1051)\n\n* SOLR-13992: Refactor code to have collection name shard name in Replica. Slice","date":"2019-12-03 10:10:19","modifiedFileCount":"25","status":"M","submitter":"Noble Paul"},{"authorTime":"2019-12-03 10:10:19","codes":[{"authorDate":"2020-05-15 12:31:35","commitOrder":3,"curCode":"  public void replicaTypeAndReplicaBase() {\n    RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Replica> replicas = getBasicReplicaList();\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node4\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node5\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node5\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"PULL\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n    ReplicaListTransformer rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node4\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n    assertEquals(\"node5\", replicas.get(4).getNodeName());\n\n    params.set(\"routingPreference\", \"1\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node5\", replicas.get(3).getNodeName());\n    assertEquals(\"node3\", replicas.get(4).getNodeName());\n  }\n","date":"2020-05-15 12:31:35","endLine":127,"groupId":"48138","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"replicaTypeAndReplicaBase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c0/ebad379d6ff0580c649d3f60a87c46966eda5a.src","preCode":"  public void replicaTypeAndReplicaBase() {\n    RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Replica> replicas = getBasicReplicaList();\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node4\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n    ReplicaListTransformer rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node4\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n\n    params.set(\"routingPreference\", \"1\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGeneratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2019-12-03 10:10:19","commitOrder":3,"curCode":"  public void replicaTypeAndReplicaLocationTest() {\n    List<Replica> replicas = getBasicReplicaList();\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node4\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ),\"collection1\",\"shard1\"\n        )\n    );\n\n    List<PreferenceRule> rules = PreferenceRule.from(\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\");\n    NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules, null);\n\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n  }\n","date":"2019-12-03 10:10:19","endLine":93,"groupId":"61022","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"replicaTypeAndReplicaLocationTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/98dd08507babbaa4eabf455fa3ea07cbf35628.src","preCode":"  public void replicaTypeAndReplicaLocationTest() {\n    List<Replica> replicas = getBasicReplicaList();\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node4\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ),\"collection1\",\"shard1\"\n        )\n    );\n\n    List<PreferenceRule> rules = PreferenceRule.from(\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\");\n    NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules, null);\n\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/NodePreferenceRulesComparatorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"54dca800a9432a72b93723d40fa4abc9a8e11f14","commitMessage":"@@@SOLR-14471: Fix last-place replica after shards.preference rules  (#1507)\n\nProperly apply base replica ordering to last-place shards.preference matches","date":"2020-05-15 12:31:35","modifiedFileCount":"2","status":"M","submitter":"Michael Gibney"},{"authorTime":"2020-12-01 03:05:48","codes":[{"authorDate":"2020-12-01 03:05:48","commitOrder":4,"curCode":"  public void replicaTypeAndReplicaBase() {\n    RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Replica> replicas = getBasicReplicaList();\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.NODE_NAME_PROP, \"node4:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node5\",\n            map(\n                ZkStateReader.NODE_NAME_PROP, \"node5:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"PULL\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n    ReplicaListTransformer rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(3).getNodeName()));\n    assertEquals(\"node5\", getHost(replicas.get(4).getNodeName()));\n\n    params.set(\"routingPreference\", \"1\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node5\", getHost(replicas.get(3).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(4).getNodeName()));\n  }\n","date":"2020-12-01 03:05:48","endLine":130,"groupId":"6468","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"replicaTypeAndReplicaBase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c0/9366decf89768d3776daec38b667fd989ca84d.src","preCode":"  public void replicaTypeAndReplicaBase() {\n    RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Replica> replicas = getBasicReplicaList();\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node4\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node5\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node5\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"PULL\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n    ReplicaListTransformer rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node4\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n    assertEquals(\"node5\", replicas.get(4).getNodeName());\n\n    params.set(\"routingPreference\", \"1\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node5\", replicas.get(3).getNodeName());\n    assertEquals(\"node3\", replicas.get(4).getNodeName());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGeneratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2020-12-01 03:05:48","commitOrder":4,"curCode":"  public void replicaTypeAndReplicaLocationTest() {\n    List<Replica> replicas = getBasicReplicaList();\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.NODE_NAME_PROP, \"node4:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ),\"collection1\",\"shard1\"\n        )\n    );\n\n    List<PreferenceRule> rules = PreferenceRule.from(\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://node4\");\n    NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules, null);\n\n    replicas.sort(comparator);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(3).getNodeName()));\n  }\n","date":"2020-12-01 03:05:48","endLine":94,"groupId":"24568","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"replicaTypeAndReplicaLocationTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/63/c44db8b3c165ee2c87f1430188197ba886bd99.src","preCode":"  public void replicaTypeAndReplicaLocationTest() {\n    List<Replica> replicas = getBasicReplicaList();\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n                ZkStateReader.NODE_NAME_PROP, \"node4\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ),\"collection1\",\"shard1\"\n        )\n    );\n\n    List<PreferenceRule> rules = PreferenceRule.from(\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://host2_2\");\n    NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules, null);\n\n    replicas.sort(comparator);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/NodePreferenceRulesComparatorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"a0492840ee8690ddf48369665c744d16c7dd30cb","commitMessage":"@@@SOLR-12182: Don't persist base_url in ZK as the scheme is variable.  compute from node_name instead (#2010)\n\n","date":"2020-12-01 03:05:48","modifiedFileCount":"53","status":"M","submitter":"Timothy Potter"},{"authorTime":"2021-06-03 06:17:26","codes":[{"authorDate":"2021-06-03 06:17:26","commitOrder":5,"curCode":"  public void replicaTypeAndReplicaBase() {\n    RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Replica> replicas = getBasicReplicaList();\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            Map.of(\n                ZkStateReader.NODE_NAME_PROP, \"node4:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node5\",\n            Map.of(\n                ZkStateReader.NODE_NAME_PROP, \"node5:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"PULL\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n    ReplicaListTransformer rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(3).getNodeName()));\n    assertEquals(\"node5\", getHost(replicas.get(4).getNodeName()));\n\n    params.set(\"routingPreference\", \"1\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node5\", getHost(replicas.get(3).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(4).getNodeName()));\n  }\n","date":"2021-06-03 06:17:26","endLine":130,"groupId":"6468","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"replicaTypeAndReplicaBase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/49/9565a282232723f8e18e8017d30360e80033c9.src","preCode":"  public void replicaTypeAndReplicaBase() {\n    RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Replica> replicas = getBasicReplicaList();\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.NODE_NAME_PROP, \"node4:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node5\",\n            map(\n                ZkStateReader.NODE_NAME_PROP, \"node5:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"PULL\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n    ReplicaListTransformer rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(3).getNodeName()));\n    assertEquals(\"node5\", getHost(replicas.get(4).getNodeName()));\n\n    params.set(\"routingPreference\", \"1\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node5\", getHost(replicas.get(3).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(4).getNodeName()));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGeneratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-06-03 06:17:26","commitOrder":5,"curCode":"  public void replicaTypeAndReplicaLocationTest() {\n    List<Replica> replicas = getBasicReplicaList();\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            Map.of(\n                ZkStateReader.NODE_NAME_PROP, \"node4:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ),\"collection1\",\"shard1\"\n        )\n    );\n\n    List<PreferenceRule> rules = PreferenceRule.from(\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://node4\");\n    NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules, null);\n\n    replicas.sort(comparator);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(3).getNodeName()));\n  }\n","date":"2021-06-03 06:17:26","endLine":94,"groupId":"24568","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"replicaTypeAndReplicaLocationTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/31400bf8a2173da2ae50feecb579ee30782cb7.src","preCode":"  public void replicaTypeAndReplicaLocationTest() {\n    List<Replica> replicas = getBasicReplicaList();\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            map(\n                ZkStateReader.NODE_NAME_PROP, \"node4:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ),\"collection1\",\"shard1\"\n        )\n    );\n\n    List<PreferenceRule> rules = PreferenceRule.from(\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://node4\");\n    NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules, null);\n\n    replicas.sort(comparator);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(3).getNodeName()));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/NodePreferenceRulesComparatorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"},{"authorTime":"2021-06-03 06:17:26","codes":[{"authorDate":"2021-06-24 02:21:51","commitOrder":6,"curCode":"  public void replicaTypeAndReplicaBase() {\n    RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Replica> replicas = getBasicReplicaList();\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            Map.of(\n                ZkStateReader.NODE_NAME_PROP, \"node4:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node5\",\n            Map.of(\n                ZkStateReader.NODE_NAME_PROP, \"node5:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"PULL\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_LEADER + \":true,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n    ReplicaListTransformer rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(3).getNodeName()));\n    assertEquals(\"node5\", getHost(replicas.get(4).getNodeName()));\n\n    params.set(\"routingPreference\", \"1\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node5\", getHost(replicas.get(3).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(4).getNodeName()));\n  }\n","date":"2021-06-24 02:21:51","endLine":131,"groupId":"10445","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"replicaTypeAndReplicaBase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5d/cc6a1accf06f88725d337f31c3a4ce19a1dc3f.src","preCode":"  public void replicaTypeAndReplicaBase() {\n    RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Replica> replicas = getBasicReplicaList();\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            Map.of(\n                ZkStateReader.NODE_NAME_PROP, \"node4:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    replicas.add(\n        new Replica(\n            \"node5\",\n            Map.of(\n                ZkStateReader.NODE_NAME_PROP, \"node5:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"PULL\"\n            ), \"c1\",\"s1\"\n        )\n    );\n\n    \r\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n        ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n    ReplicaListTransformer rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(3).getNodeName()));\n    assertEquals(\"node5\", getHost(replicas.get(4).getNodeName()));\n\n    params.set(\"routingPreference\", \"1\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node5\", getHost(replicas.get(3).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(4).getNodeName()));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGeneratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-06-03 06:17:26","commitOrder":6,"curCode":"  public void replicaTypeAndReplicaLocationTest() {\n    List<Replica> replicas = getBasicReplicaList();\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            Map.of(\n                ZkStateReader.NODE_NAME_PROP, \"node4:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ),\"collection1\",\"shard1\"\n        )\n    );\n\n    List<PreferenceRule> rules = PreferenceRule.from(\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://node4\");\n    NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules, null);\n\n    replicas.sort(comparator);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(3).getNodeName()));\n  }\n","date":"2021-06-03 06:17:26","endLine":94,"groupId":"10445","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"replicaTypeAndReplicaLocationTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/31400bf8a2173da2ae50feecb579ee30782cb7.src","preCode":"  public void replicaTypeAndReplicaLocationTest() {\n    List<Replica> replicas = getBasicReplicaList();\n    \r\n    replicas.add(\n        new Replica(\n            \"node4\",\n            Map.of(\n                ZkStateReader.NODE_NAME_PROP, \"node4:8983_solr\",\n                ZkStateReader.CORE_NAME_PROP, \"collection1\",\n                ZkStateReader.REPLICA_TYPE, \"TLOG\"\n            ),\"collection1\",\"shard1\"\n        )\n    );\n\n    List<PreferenceRule> rules = PreferenceRule.from(\n        ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" +\n            ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":http://node4\");\n    NodePreferenceRulesComparator comparator = new NodePreferenceRulesComparator(rules, null);\n\n    replicas.sort(comparator);\n    assertEquals(\"node1\", getHost(replicas.get(0).getNodeName()));\n    assertEquals(\"node4\", getHost(replicas.get(1).getNodeName()));\n    assertEquals(\"node2\", getHost(replicas.get(2).getNodeName()));\n    assertEquals(\"node3\", getHost(replicas.get(3).getNodeName()));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/NodePreferenceRulesComparatorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"}],"commitId":"a6d92b10aed60d6bdf43684d3c5359b4f49ccd85","commitMessage":"@@@SOLR-15472: New shards.preference option for preferring replicas based on their leader status (#188)\n\n","date":"2021-06-24 02:21:51","modifiedFileCount":"4","status":"M","submitter":"Timothy Potter"}]
