[{"authorTime":"2018-01-23 20:35:14","codes":[{"authorDate":"2013-03-15 05:01:00","commitOrder":2,"curCode":"  public void testErrorCases() throws Exception {\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    boolean gotExp = false;\n    NamedList<Object> resp = null;\n    try {\n      resp = getSolrAdmin().request(request);\n    } catch (SolrException e) {\n      gotExp = true;\n    }\n    \n    assertTrue(gotExp);\n  }\n","date":"2013-03-15 05:01:00","endLine":118,"groupId":"11438","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testErrorCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9b/e49721784d69dc4561d669d4afc133533cc53d.src","preCode":"  public void testErrorCases() throws Exception {\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    boolean gotExp = false;\n    NamedList<Object> resp = null;\n    try {\n      resp = getSolrAdmin().request(request);\n    } catch (SolrException e) {\n      gotExp = true;\n    }\n    \n    assertTrue(gotExp);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"NB"},{"authorDate":"2018-01-23 20:35:14","commitOrder":2,"curCode":"  public void testBadActionNames() throws Exception {\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    final QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(request);\n    });\n\n  }\n","date":"2018-01-23 20:35:14","endLine":219,"groupId":"11438","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadActionNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/21/3e554426fb5f879ed3ef41f611e7f11258bc4a.src","preCode":"  public void testBadActionNames() throws Exception {\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    final QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(request);\n    });\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"B"}],"commitId":"653935bbdfd70fa9490f8c363ffcf9832d3141a5","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-01-23 20:35:14","modifiedFileCount":"279","status":"M","submitter":"Karl Wright"},{"authorTime":"2019-02-26 21:46:46","codes":[{"authorDate":"2013-03-15 05:01:00","commitOrder":3,"curCode":"  public void testErrorCases() throws Exception {\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    boolean gotExp = false;\n    NamedList<Object> resp = null;\n    try {\n      resp = getSolrAdmin().request(request);\n    } catch (SolrException e) {\n      gotExp = true;\n    }\n    \n    assertTrue(gotExp);\n  }\n","date":"2013-03-15 05:01:00","endLine":118,"groupId":"11438","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testErrorCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9b/e49721784d69dc4561d669d4afc133533cc53d.src","preCode":"  public void testErrorCases() throws Exception {\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    boolean gotExp = false;\n    NamedList<Object> resp = null;\n    try {\n      resp = getSolrAdmin().request(request);\n    } catch (SolrException e) {\n      gotExp = true;\n    }\n    \n    assertTrue(gotExp);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"N"},{"authorDate":"2019-02-26 21:46:46","commitOrder":3,"curCode":"  public void testBadActionNames() {\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    final QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(request);\n    });\n  }\n","date":"2019-02-26 21:46:46","endLine":210,"groupId":"11438","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadActionNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/47/18a109ac73a258c44bffb05f426dd1045932bb.src","preCode":"  public void testBadActionNames() throws Exception {\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    final QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(request);\n    });\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"9a6f942f82ee4ec6b778f4607fdd259d5e4dbcf5","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2019-02-26 21:46:46","modifiedFileCount":"4","status":"M","submitter":"Karl Wright"},{"authorTime":"2019-02-26 21:46:46","codes":[{"authorDate":"2019-08-03 15:30:49","commitOrder":4,"curCode":"  public void testErrorCases() throws Exception {\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    expectThrows(SolrException.class, () -> getSolrAdmin().request(request));\n  }\n","date":"2019-08-03 15:30:49","endLine":166,"groupId":"10935","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testErrorCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0c/f59b71001dacb0d66f6572fca59d81bd99afaa.src","preCode":"  public void testErrorCases() throws Exception {\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/cores\");\n    boolean gotExp = false;\n    NamedList<Object> resp = null;\n    try {\n      resp = getSolrAdmin().request(request);\n    } catch (SolrException e) {\n      gotExp = true;\n    }\n    \n    assertTrue(gotExp);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2019-02-26 21:46:46","commitOrder":4,"curCode":"  public void testBadActionNames() {\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    final QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(request);\n    });\n  }\n","date":"2019-02-26 21:46:46","endLine":210,"groupId":"10935","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadActionNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/47/18a109ac73a258c44bffb05f426dd1045932bb.src","preCode":"  public void testBadActionNames() {\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"BADACTION\");\n    String collectionName = \"badactioncollection\";\n    params.set(\"name\", collectionName);\n    params.set(\"numShards\", 2);\n    final QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(request);\n    });\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"N"}],"commitId":"8c4fde94fe93c70b95ed3563fb65972bb303e0af","commitMessage":"@@@SOLR-12555: use expectThrows() to verify the ex thrown in tests\n","date":"2019-08-03 15:30:49","modifiedFileCount":"89","status":"M","submitter":"Munendra S N"}]
