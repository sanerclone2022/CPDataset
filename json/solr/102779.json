[{"authorTime":"2014-01-07 05:15:45","codes":[{"authorDate":"2014-01-14 02:27:02","commitOrder":2,"curCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<String,MutableValueInt>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","date":"2014-01-14 02:27:02","endLine":733,"groupId":"18961","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertFullWalkNoDupsWithFacets","params":"(intmaxSize@SolrParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/09/c49ce0ec695a67c8bafabe88444962cedbb225.src","preCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<String,MutableValueInt>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":661,"status":"B"},{"authorDate":"2014-01-07 05:15:45","commitOrder":2,"curCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) ObjectBuilder.fromJSON(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","date":"2014-01-07 05:15:45","endLine":627,"groupId":"19296","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCursor","params":"(SolrQueryRequestreq@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/6fa6bc87c45fcc6bd03565bf3be402ff0cde76.src","preCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) ObjectBuilder.fromJSON(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"NB"}],"commitId":"4460fb2560b90ebd48cd616ee9096aa50fa867d9","commitMessage":"@@@SOLR-5463: added randomized faceting test to CursorPagingTest\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1557800 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-14 02:27:02","modifiedFileCount":"1","status":"M","submitter":"Steven Rowe"},{"authorTime":"2014-01-07 05:15:45","codes":[{"authorDate":"2014-03-12 22:39:17","commitOrder":3,"curCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","date":"2014-03-12 22:39:17","endLine":828,"groupId":"18961","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertFullWalkNoDupsWithFacets","params":"(intmaxSize@SolrParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e2/91d8c144dc662176d17a95083c8dd079cd5cee.src","preCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<String,MutableValueInt>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":756,"status":"M"},{"authorDate":"2014-01-07 05:15:45","commitOrder":3,"curCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) ObjectBuilder.fromJSON(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","date":"2014-01-07 05:15:45","endLine":627,"groupId":"19296","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCursor","params":"(SolrQueryRequestreq@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/6fa6bc87c45fcc6bd03565bf3be402ff0cde76.src","preCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) ObjectBuilder.fromJSON(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"N"}],"commitId":"3b67b17493216f6b0c81a981073fd5f61eace6f4","commitMessage":"@@@LUCENE-5512: remove redundant typing (diamond operator) in trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1576755 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-12 22:39:17","modifiedFileCount":"1241","status":"M","submitter":"Robert Muir"},{"authorTime":"2014-01-07 05:15:45","codes":[{"authorDate":"2017-06-29 17:00:17","commitOrder":4,"curCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","date":"2017-06-29 17:00:17","endLine":819,"groupId":"18961","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertFullWalkNoDupsWithFacets","params":"(intmaxSize@SolrParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c1/b993560b7aad6249e340508e1d76e318094abe.src","preCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = ((Long)doc.get(\"id\")).intValue();\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":747,"status":"M"},{"authorDate":"2014-01-07 05:15:45","commitOrder":4,"curCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) ObjectBuilder.fromJSON(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","date":"2014-01-07 05:15:45","endLine":627,"groupId":"19296","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCursor","params":"(SolrQueryRequestreq@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/6fa6bc87c45fcc6bd03565bf3be402ff0cde76.src","preCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) ObjectBuilder.fromJSON(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"N"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"},{"authorTime":"2019-05-03 05:20:05","codes":[{"authorDate":"2019-05-03 05:20:05","commitOrder":5,"curCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","date":"2019-05-03 05:20:05","endLine":818,"groupId":"18961","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertFullWalkNoDupsWithFacets","params":"(intmaxSize@SolrParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/331473d89e496917d1f922cc256026ba87b451.src","preCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) ObjectBuilder.fromJSON(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"M"},{"authorDate":"2019-05-03 05:20:05","commitOrder":5,"curCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","date":"2019-05-03 05:20:05","endLine":834,"groupId":"19296","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCursor","params":"(SolrQueryRequestreq@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/331473d89e496917d1f922cc256026ba87b451.src","preCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) ObjectBuilder.fromJSON(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":826,"status":"M"}],"commitId":"8908205b428f2ae68bcef0f22a944a62cfcd93d5","commitMessage":"@@@SOLR-13441: Refactor code to minimize direct use of noggit\n","date":"2019-05-03 05:20:05","modifiedFileCount":"58","status":"M","submitter":"noble"},{"authorTime":"2020-06-18 23:12:50","codes":[{"authorDate":"2020-06-18 23:12:50","commitOrder":6,"curCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    @SuppressWarnings({\"rawtypes\"})\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      @SuppressWarnings({\"rawtypes\"})\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      @SuppressWarnings({\"rawtypes\"})\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","date":"2020-06-18 23:12:50","endLine":825,"groupId":"18961","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"assertFullWalkNoDupsWithFacets","params":"(intmaxSize@SolrParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/22/10e18ec3f8283d3a93ed4728fe8defedf74380.src","preCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":749,"status":"M"},{"authorDate":"2020-06-18 23:12:50","commitOrder":6,"curCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    @SuppressWarnings({\"rawtypes\"})\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","date":"2020-06-18 23:12:50","endLine":842,"groupId":"19296","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCursor","params":"(SolrQueryRequestreq@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/22/10e18ec3f8283d3a93ed4728fe8defedf74380.src","preCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":833,"status":"M"}],"commitId":"84729edbba04ad7de4b1cae635d8d0fbe803f124","commitMessage":"@@@SOLR-14574: Fix or suppress warnings in solr/core/src/test (part 2)\n","date":"2020-06-18 23:12:50","modifiedFileCount":"122","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-07-13 23:49:56","codes":[{"authorDate":"2021-07-13 23:49:56","commitOrder":7,"curCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    List<?> previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      Map<?, ?> rsp = (Map<?, ?>) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      @SuppressWarnings({\"unchecked\"})\n      List<Map<Object,Object>> docs = (List<Map<Object, Object>>)(((Map<?, ?>)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      Map<?, ?> facetFields = (Map<?, ?>)((Map<?, ?>)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      List<?> facets = (List<?>)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","date":"2021-07-13 23:49:56","endLine":1006,"groupId":"102779","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"assertFullWalkNoDupsWithFacets","params":"(intmaxSize@SolrParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/37/8574c5282e4ef5640946d05498ca4ddd1c7ea8.src","preCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    @SuppressWarnings({\"rawtypes\"})\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      @SuppressWarnings({\"rawtypes\"})\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      @SuppressWarnings({\"rawtypes\"})\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":933,"status":"M"},{"authorDate":"2021-07-13 23:49:56","commitOrder":7,"curCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map<?, ?> rsp = (Map<?, ?>) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","date":"2021-07-13 23:49:56","endLine":1022,"groupId":"102779","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"assertCursor","params":"(SolrQueryRequestreq@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/37/8574c5282e4ef5640946d05498ca4ddd1c7ea8.src","preCode":"  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    @SuppressWarnings({\"rawtypes\"})\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1014,"status":"M"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
