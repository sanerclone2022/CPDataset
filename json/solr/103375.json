[{"authorTime":"2015-01-24 00:13:32","codes":[{"authorDate":"2015-01-24 00:13:32","commitOrder":1,"curCode":"  public void test() throws Exception {\n\n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n        \r\n        \r\n        \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"krakow london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"krakow london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"krakow la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\",\n        \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"krakow cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    doShardTestTopStats();\n    doTestRefinementRequest();\n  }\n","date":"2015-01-24 00:13:32","endLine":65,"groupId":"15472","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"test","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8f/bfe5a366f8e20b05fe131903183253a7193fd1.src","preCode":"  public void test() throws Exception {\n\n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n        \r\n        \r\n        \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"krakow london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"krakow london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"krakow la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\",\n        \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"krakow cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    doShardTestTopStats();\n    doTestRefinementRequest();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotWhiteBoxTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"},{"authorDate":"2015-01-24 00:13:32","commitOrder":1,"curCode":"  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          \r\n          \r\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    \r\n    \r\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    \r\n\n    index(\"id\",777); \r\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  \r\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      \r\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); \r\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats();\n\n    doTestPivotStatsFromOneShard();\n  }\n","date":"2015-01-24 00:13:32","endLine":340,"groupId":"5773","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"test","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/19/baf831eb410aa7749ac34e7f99bf80eec5a17f.src","preCode":"  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          \r\n          \r\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    \r\n    \r\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    \r\n\n    index(\"id\",777); \r\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  \r\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      \r\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); \r\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats();\n\n    doTestPivotStatsFromOneShard();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"}],"commitId":"7fda449473be9bf78ef320474763607e9ef5ef93","commitMessage":"@@@SOLR-6902: Use JUnit rules instead of inheritance with distributed Solr tests to allow for multiple tests without the same class\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1654256 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-01-24 00:13:32","modifiedFileCount":"98","status":"B","submitter":"Erick Erickson"},{"authorTime":"2015-03-10 23:34:06","codes":[{"authorDate":"2015-01-24 00:13:32","commitOrder":2,"curCode":"  public void test() throws Exception {\n\n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n        \r\n        \r\n        \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"krakow london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"krakow london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"krakow la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\",\n        \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"krakow cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    doShardTestTopStats();\n    doTestRefinementRequest();\n  }\n","date":"2015-01-24 00:13:32","endLine":65,"groupId":"15472","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"test","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8f/bfe5a366f8e20b05fe131903183253a7193fd1.src","preCode":"  public void test() throws Exception {\n\n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n        \r\n        \r\n        \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"krakow london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"krakow london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"krakow la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\",\n        \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"krakow cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    doShardTestTopStats();\n    doTestRefinementRequest();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotWhiteBoxTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"N"},{"authorDate":"2015-03-10 23:34:06","commitOrder":2,"curCode":"  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          \r\n          \r\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    \r\n    \r\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    \r\n\n    index(\"id\",777); \r\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  \r\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      \r\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); \r\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats(false); \r\n    doTestDeepPivotStats(true); \r\n\n    doTestPivotStatsFromOneShard();\n  }\n","date":"2015-03-10 23:34:06","endLine":341,"groupId":"5773","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"test","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6c/16cb627ecc6f1017a7bfd4061e96d0c0dd9410.src","preCode":"  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          \r\n          \r\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    \r\n    \r\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    \r\n\n    index(\"id\",777); \r\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  \r\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      \r\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); \r\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats();\n\n    doTestPivotStatsFromOneShard();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"10dd59701ccc0828e2282ab882506528df301e57","commitMessage":"@@@SOLR-6349 + SOLR-6682: Added support for stats.field localparams to enable/disable individual stats; Fix response when using EnumField with StatsComponent\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1665579 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-10 23:34:06","modifiedFileCount":"15","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2015-07-08 15:46:09","codes":[{"authorDate":"2015-01-24 00:13:32","commitOrder":3,"curCode":"  public void test() throws Exception {\n\n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n        \r\n        \r\n        \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"krakow london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"krakow london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"krakow la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\",\n        \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"krakow cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    doShardTestTopStats();\n    doTestRefinementRequest();\n  }\n","date":"2015-01-24 00:13:32","endLine":65,"groupId":"15472","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"test","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8f/bfe5a366f8e20b05fe131903183253a7193fd1.src","preCode":"  public void test() throws Exception {\n\n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n        \r\n        \r\n        \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"krakow london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"krakow london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"krakow la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\",\n        \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"krakow cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    doShardTestTopStats();\n    doTestRefinementRequest();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotWhiteBoxTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"N"},{"authorDate":"2015-07-08 15:46:09","commitOrder":3,"curCode":"  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          \r\n          \r\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    \r\n    \r\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    \r\n\n    index(\"id\",777); \r\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  \r\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      \r\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); \r\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats(false); \r\n    doTestDeepPivotStats(true); \r\n\n    doTestPivotStatsFromOneShard();\n\n    testFacetPivotRange();\n\n    testFacetPivotQuery();\n\n    testNegativeFacetQuery();\n\n    testNegativeRangeQuery();\n\n    testPivotFacetRangeAndQuery();\n  }\n","date":"2015-07-08 15:46:09","endLine":353,"groupId":"5773","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"test","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/01c7b59057a2edf3f868bc08e934cc208f1f7f.src","preCode":"  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          \r\n          \r\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    \r\n    \r\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    \r\n\n    index(\"id\",777); \r\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  \r\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      \r\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); \r\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats(false); \r\n    doTestDeepPivotStats(true); \r\n\n    doTestPivotStatsFromOneShard();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"32c740005a4da111f89ab7d51fe9c5d76ff5d70d","commitMessage":"@@@SOLR-4212: SOLR-6353: Let facet queries and facet ranges hang off of pivots\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1689802 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-08 15:46:09","modifiedFileCount":"13","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2015-07-28 11:32:20","codes":[{"authorDate":"2015-01-24 00:13:32","commitOrder":4,"curCode":"  public void test() throws Exception {\n\n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n        \r\n        \r\n        \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"krakow london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"krakow london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"krakow la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\",\n        \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"krakow cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    doShardTestTopStats();\n    doTestRefinementRequest();\n  }\n","date":"2015-01-24 00:13:32","endLine":65,"groupId":"103375","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"test","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8f/bfe5a366f8e20b05fe131903183253a7193fd1.src","preCode":"  public void test() throws Exception {\n\n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n        \r\n        \r\n        \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"krakow london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"krakow london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"krakow la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\",\n        \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"krakow cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n\n    doShardTestTopStats();\n    doTestRefinementRequest();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotWhiteBoxTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"N"},{"authorDate":"2015-07-28 11:32:20","commitOrder":4,"curCode":"  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          \r\n          \r\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    \r\n    \r\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    \r\n\n    index(\"id\",777); \r\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  \"f.place_t.facet.mincount\", \"2\",\n                                  \r\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      \r\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); \r\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats(false); \r\n    doTestDeepPivotStats(true); \r\n\n    doTestPivotStatsFromOneShard();\n\n    testFacetPivotRange();\n\n    testFacetPivotQuery();\n\n    testNegativeFacetQuery();\n\n    testNegativeRangeQuery();\n\n    testPivotFacetRangeAndQuery();\n  }\n","date":"2015-07-28 11:32:20","endLine":354,"groupId":"103375","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"test","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/48/08dc48e3675dbf127ea7eec910204646da7e51.src","preCode":"  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    \r\n    \r\n    \r\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          \r\n          \r\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    \r\n    \r\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    \r\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    \r\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    \r\n\n    index(\"id\",777); \r\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  \r\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      \r\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); \r\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    \r\n    for (SolrParams variableParams : new SolrParams[] { \n        \r\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats(false); \r\n    doTestDeepPivotStats(true); \r\n\n    doTestPivotStatsFromOneShard();\n\n    testFacetPivotRange();\n\n    testFacetPivotQuery();\n\n    testNegativeFacetQuery();\n\n    testNegativeRangeQuery();\n\n    testPivotFacetRangeAndQuery();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"0155076b1f1b430f9d5e5eff3c0fef73dad48d5e","commitMessage":"@@@SOLR-7829: Fixed a bug in distributed pivot faceting that could result in a facet.missing=true count which was lower then the correct count if facet.sort=index and facet.pivot.mincount > 1\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1692983 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-28 11:32:20","modifiedFileCount":"3","status":"M","submitter":"Chris M. Hostetter"}]
