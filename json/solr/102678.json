[{"authorTime":"2017-01-19 09:27:21","codes":[{"authorDate":"2017-01-19 09:27:21","commitOrder":1,"curCode":"  private void doTestIntPointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, String.valueOf(i), nonDvFieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,\" + dvFieldName + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", product(-1,\" + dvFieldName + \")\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + dvFieldName + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + dvFieldName + \")'][.='-1.0']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + dvFieldName + \")'][.='-2.0']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + dvFieldName + \")'][.='-9.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='9']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\", \n        \"sort param could not be parsed as a query\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n","date":"2017-01-19 09:27:21","endLine":981,"groupId":"17572","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFunctionQuery","params":"(StringdvFieldName@StringnonDvFieldName@Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/12/f15049c6918132b30ee767ca26785052fa0638.src","preCode":"  private void doTestIntPointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, String.valueOf(i), nonDvFieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,\" + dvFieldName + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", product(-1,\" + dvFieldName + \")\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + dvFieldName + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + dvFieldName + \")'][.='-1.0']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + dvFieldName + \")'][.='-2.0']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + dvFieldName + \")'][.='-9.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='9']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\", \n        \"sort param could not be parsed as a query\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":946,"status":"B"},{"authorDate":"2017-01-19 09:27:21","commitOrder":1,"curCode":"  private void doTestFloatPointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, String.format(Locale.ROOT, \"%f\", (float)i*1.1), nonDvFieldName, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,\" + dvFieldName + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='9.9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='8.8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='7.7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", product(-1,\" + dvFieldName + \")\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + dvFieldName + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + dvFieldName + \")'][.='-1.1']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + dvFieldName + \")'][.='-2.2']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + dvFieldName + \")'][.='-9.9']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1.1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='2.2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='9.9']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\", \n        \"sort param could not be parsed as a query\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n","date":"2017-01-19 09:27:21","endLine":1435,"groupId":"17572","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFloatPointFunctionQuery","params":"(StringdvFieldName@StringnonDvFieldName@Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/12/f15049c6918132b30ee767ca26785052fa0638.src","preCode":"  private void doTestFloatPointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, String.format(Locale.ROOT, \"%f\", (float)i*1.1), nonDvFieldName, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,\" + dvFieldName + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='9.9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='8.8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='7.7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", product(-1,\" + dvFieldName + \")\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + dvFieldName + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + dvFieldName + \")'][.='-1.1']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + dvFieldName + \")'][.='-2.2']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + dvFieldName + \")'][.='-9.9']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1.1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='2.2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='9.9']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\", \n        \"sort param could not be parsed as a query\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1400,"status":"B"}],"commitId":"57934ba4480d71218c7f60d0417dbae9d26188d0","commitMessage":"@@@SOLR-8396: Add support for PointFields in Solr\n","date":"2017-01-19 09:27:21","modifiedFileCount":"33","status":"B","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2017-03-15 00:49:22","codes":[{"authorDate":"2017-03-15 00:49:22","commitOrder":2,"curCode":"  private void doTestIntPointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, String.valueOf(i), nonDvFieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,\" + dvFieldName + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", product(-1,\" + dvFieldName + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + dvFieldName + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + dvFieldName + \")'][.='-1.0']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + dvFieldName + \")'][.='-2.0']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + dvFieldName + \")'][.='-9.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='9']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\", \n        \"sort param could not be parsed as a query\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n","date":"2017-03-15 00:49:22","endLine":1158,"groupId":"4488","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFunctionQuery","params":"(StringdvFieldName@StringnonDvFieldName@Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/e8c1031f7e1268711817735be0b20bbc3208fd.src","preCode":"  private void doTestIntPointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, String.valueOf(i), nonDvFieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,\" + dvFieldName + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", product(-1,\" + dvFieldName + \")\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + dvFieldName + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + dvFieldName + \")'][.='-1.0']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + dvFieldName + \")'][.='-2.0']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + dvFieldName + \")'][.='-9.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='9']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\", \n        \"sort param could not be parsed as a query\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1123,"status":"M"},{"authorDate":"2017-03-15 00:49:22","commitOrder":2,"curCode":"  private void doTestFloatPointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, String.format(Locale.ROOT, \"%f\", (float)i*1.1), nonDvFieldName, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,\" + dvFieldName + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='9.9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='8.8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='7.7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", product(-1,\" + dvFieldName + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + dvFieldName + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + dvFieldName + \")'][.='-1.1']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + dvFieldName + \")'][.='-2.2']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + dvFieldName + \")'][.='-9.9']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1.1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='2.2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='9.9']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\", \n        \"sort param could not be parsed as a query\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n","date":"2017-03-15 00:49:22","endLine":1825,"groupId":"4488","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFloatPointFunctionQuery","params":"(StringdvFieldName@StringnonDvFieldName@Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/e8c1031f7e1268711817735be0b20bbc3208fd.src","preCode":"  private void doTestFloatPointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, String.format(Locale.ROOT, \"%f\", (float)i*1.1), nonDvFieldName, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,\" + dvFieldName + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='9.9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='8.8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='7.7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", product(-1,\" + dvFieldName + \")\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + dvFieldName + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + dvFieldName + \")'][.='-1.1']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + dvFieldName + \")'][.='-2.2']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + dvFieldName + \")'][.='-9.9']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1.1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='2.2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='9.9']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\", \n        \"sort param could not be parsed as a query\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1790,"status":"M"}],"commitId":"9417367b1afd404b944692d9947f78587e2b2d94","commitMessage":"@@@SOLR-10266: fix implicit test assumptions about doc order\n","date":"2017-03-15 00:49:22","modifiedFileCount":"1","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2017-04-19 02:58:35","codes":[{"authorDate":"2017-04-19 02:58:35","commitOrder":3,"curCode":"  private void doTestIntPointFunctionQuery(String field, String type) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + field + \"'][.='9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + field + \"'][.='8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + field + \"'][.='7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + field + \"'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + field + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + field + \")'][.='-1.0']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + field + \")'][.='-2.0']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + field + \")'][.='-9.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + field + \")'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + field + \")'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + field + \")'][.='2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + field + \")'][.='9']\");\n    \n  }\n","date":"2017-04-19 02:58:35","endLine":1518,"groupId":"45579","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFunctionQuery","params":"(Stringfield@Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/02/d2ac24ae76375c074fcfc982a0cbc5a9836e66.src","preCode":"  private void doTestIntPointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, String.valueOf(i), nonDvFieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,\" + dvFieldName + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", product(-1,\" + dvFieldName + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + dvFieldName + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + dvFieldName + \")'][.='-1.0']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + dvFieldName + \")'][.='-2.0']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + dvFieldName + \")'][.='-9.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='9']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\", \n        \"sort param could not be parsed as a query\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1490,"status":"M"},{"authorDate":"2017-04-19 02:58:35","commitOrder":3,"curCode":"  private void doTestFloatPointFunctionQuery(String field, String type) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + field + \"'][.='9.9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + field + \"'][.='8.8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + field + \"'][.='7.7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + field + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + field + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + field + \")'][.='-1.1']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + field + \")'][.='-2.2']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + field + \")'][.='-9.9']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + field + \")'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + field + \")'][.='1.1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + field + \")'][.='2.2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + field + \")'][.='9.9']\");\n  }\n","date":"2017-04-19 02:58:35","endLine":2294,"groupId":"45579","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFloatPointFunctionQuery","params":"(Stringfield@Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/02/d2ac24ae76375c074fcfc982a0cbc5a9836e66.src","preCode":"  private void doTestFloatPointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, String.format(Locale.ROOT, \"%f\", (float)i*1.1), nonDvFieldName, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,\" + dvFieldName + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='9.9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='8.8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='7.7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", product(-1,\" + dvFieldName + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + dvFieldName + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + dvFieldName + \")'][.='-1.1']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + dvFieldName + \")'][.='-2.2']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + dvFieldName + \")'][.='-9.9']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1.1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='2.2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='9.9']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\", \n        \"sort param could not be parsed as a query\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2268,"status":"M"}],"commitId":"10772121eee97023aed415751e49a06d116b26ad","commitMessage":"@@@SOLR-10472: Fixed uninversion (aka: FieldCache) bugs with the numeric PointField classes.  and CurrencyField\n","date":"2017-04-19 02:58:35","modifiedFileCount":"12","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2017-07-15 01:54:27","codes":[{"authorDate":"2017-07-15 01:54:27","commitOrder":4,"curCode":"  private void doTestIntPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Integer> values = getRandomInts(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\"; \n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/int[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\" \n          + (-1.0f * (float)values.get(i)) + \"']\"; \n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Integer>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Integer> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/int[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"), \n        ascNegXpathChecks);\n  }\n","date":"2017-07-15 01:54:35","endLine":2453,"groupId":"11667","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4e55e42bf83ea67b994b5fb6824d315756699a.src","preCode":"  private void doTestIntPointFunctionQuery(String field, String type) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + field + \"'][.='9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + field + \"'][.='8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + field + \"'][.='7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + field + \"'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + field + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + field + \")'][.='-1.0']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + field + \")'][.='-2.0']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + field + \")'][.='-9.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + field + \")'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + field + \")'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + field + \")'][.='2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + field + \")'][.='9']\");\n    \n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2420,"status":"M"},{"authorDate":"2017-07-15 01:54:27","commitOrder":4,"curCode":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n  }\n","date":"2017-07-15 01:54:35","endLine":3213,"groupId":"11667","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFloatPointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4e55e42bf83ea67b994b5fb6824d315756699a.src","preCode":"  private void doTestFloatPointFunctionQuery(String field, String type) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.format(Locale.ROOT, \"%f\", (float)i*1.1)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + field + \"'][.='9.9']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + field + \"'][.='8.8']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + field + \"'][.='7.7']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + field + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='product(-1,\" + field + \")'][.='-0.0']\",\n        \"//result/doc[2]/float[@name='product(-1,\" + field + \")'][.='-1.1']\",\n        \"//result/doc[3]/float[@name='product(-1,\" + field + \")'][.='-2.2']\",\n        \"//result/doc[10]/float[@name='product(-1,\" + field + \")'][.='-9.9']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + field + \")'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + field + \")'][.='1.1']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + field + \")'][.='2.2']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + field + \")'][.='9.9']\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3180,"status":"M"}],"commitId":"82515fd329ce02cee68ea533e7d4bfb022b2fb00","commitMessage":"@@@SOLR-10796: TestPointFields: increase randomized testing of non-trivial values (part 2)\n","date":"2017-07-15 01:54:35","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"},{"authorTime":"2017-07-15 04:40:19","codes":[{"authorDate":"2017-07-15 04:40:19","commitOrder":5,"curCode":"  private void doTestIntPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Integer> values = getRandomInts(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\"; \n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/int[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\" \n          + (-1.0f * (float)values.get(i)) + \"']\"; \n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Integer>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Integer> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/int[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"), \n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-07-15 04:40:19","endLine":2456,"groupId":"102678","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/b6971749523c4450f320fa25f8f31c6fe6db28.src","preCode":"  private void doTestIntPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Integer> values = getRandomInts(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\"; \n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/int[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\" \n          + (-1.0f * (float)values.get(i)) + \"']\"; \n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Integer>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Integer> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/int[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"), \n        ascNegXpathChecks);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2420,"status":"M"},{"authorDate":"2017-07-15 04:40:19","commitOrder":5,"curCode":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-07-15 04:40:19","endLine":3222,"groupId":"102678","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFloatPointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/b6971749523c4450f320fa25f8f31c6fe6db28.src","preCode":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3186,"status":"M"}],"commitId":"4cb74a50ef8a3386a436e69da6f9cd80fe4d746d","commitMessage":"@@@SOLR-10796: fix test bugs when RANDOM_MULTIPLIER > 1\n","date":"2017-07-15 04:40:19","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"}]
