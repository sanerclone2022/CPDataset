[{"authorTime":"2016-11-02 01:50:14","codes":[{"authorDate":"2016-11-02 01:50:14","commitOrder":1,"curCode":"  public void existingNameTest() {\n    final SolrException expectedException =\n        new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            ModelException.class.getCanonicalName()+\": model 'test3' already exists. Please use a different name\");\n    try {\n      final List<Feature> features = getFeatures(new String[]\n          {\"constant1\", \"constant5\"});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test3\",\n          features, norms, \"test\", fstore.getFeatures(),\n              params);\n      store.addModel(ltrScoringModel);\n      final LTRScoringModel m = store.getModel(\"test3\");\n      assertEquals(ltrScoringModel, m);\n      store.addModel(ltrScoringModel);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (SolrException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","date":"2016-11-02 01:50:14","endLine":128,"groupId":"9566","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"existingNameTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e8/ee22482cbf1318220274a64aaaa89f66ed3864.src","preCode":"  public void existingNameTest() {\n    final SolrException expectedException =\n        new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            ModelException.class.getCanonicalName()+\": model 'test3' already exists. Please use a different name\");\n    try {\n      final List<Feature> features = getFeatures(new String[]\n          {\"constant1\", \"constant5\"});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test3\",\n          features, norms, \"test\", fstore.getFeatures(),\n              params);\n      store.addModel(ltrScoringModel);\n      final LTRScoringModel m = store.getModel(\"test3\");\n      assertEquals(ltrScoringModel, m);\n      store.addModel(ltrScoringModel);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (SolrException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestLinearModel.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2016-11-02 01:50:14","commitOrder":1,"curCode":"  public void duplicateFeatureTest() {\n    final ModelException expectedException =\n        new ModelException(\"duplicated feature constant1 in model test4\");\n    try {\n      final List<Feature> features = getFeatures(new String[]\n          {\"constant1\", \"constant1\"});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test4\",\n          features, norms, \"test\", fstore.getFeatures(),\n              params);\n      store.addModel(ltrScoringModel);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (ModelException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n\n  }\n","date":"2016-11-02 01:50:14","endLine":155,"groupId":"9566","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"duplicateFeatureTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e8/ee22482cbf1318220274a64aaaa89f66ed3864.src","preCode":"  public void duplicateFeatureTest() {\n    final ModelException expectedException =\n        new ModelException(\"duplicated feature constant1 in model test4\");\n    try {\n      final List<Feature> features = getFeatures(new String[]\n          {\"constant1\", \"constant1\"});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test4\",\n          features, norms, \"test\", fstore.getFeatures(),\n              params);\n      store.addModel(ltrScoringModel);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (ModelException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestLinearModel.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"5a66b3bc089e4b3e73b1c41c4cdcd89b183b85e7","commitMessage":"@@@SOLR-8542: Adds Solr Learning to Rank (LTR) plugin for reranking results with machine learning models. (Michael Nilsson.  Diego Ceccarelli.  Joshua Pantony.  Jon Dorando.  Naveen Santhapuri.  Alessandro Benedetti.  David Grohmann.  Christine Poerschke)\n","date":"2016-11-02 01:50:14","modifiedFileCount":"0","status":"B","submitter":"Christine Poerschke"},{"authorTime":"2016-11-02 01:50:14","codes":[{"authorDate":"2018-02-10 02:56:59","commitOrder":2,"curCode":"  public void existingNameTest() {\n    final SolrException expectedException =\n        new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            ModelException.class.getName()+\": model 'test3' already exists. Please use a different name\");\n    try {\n      final List<Feature> features = getFeatures(new String[]\n          {\"constant1\", \"constant5\"});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test3\",\n          features, norms, \"test\", fstore.getFeatures(),\n              params);\n      store.addModel(ltrScoringModel);\n      final LTRScoringModel m = store.getModel(\"test3\");\n      assertEquals(ltrScoringModel, m);\n      store.addModel(ltrScoringModel);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (SolrException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","date":"2018-02-10 02:56:59","endLine":138,"groupId":"9566","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"existingNameTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/66/20441cd5f89cef8df05b8282b5e75b2b86abee.src","preCode":"  public void existingNameTest() {\n    final SolrException expectedException =\n        new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            ModelException.class.getCanonicalName()+\": model 'test3' already exists. Please use a different name\");\n    try {\n      final List<Feature> features = getFeatures(new String[]\n          {\"constant1\", \"constant5\"});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test3\",\n          features, norms, \"test\", fstore.getFeatures(),\n              params);\n      store.addModel(ltrScoringModel);\n      final LTRScoringModel m = store.getModel(\"test3\");\n      assertEquals(ltrScoringModel, m);\n      store.addModel(ltrScoringModel);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (SolrException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestLinearModel.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2016-11-02 01:50:14","commitOrder":2,"curCode":"  public void duplicateFeatureTest() {\n    final ModelException expectedException =\n        new ModelException(\"duplicated feature constant1 in model test4\");\n    try {\n      final List<Feature> features = getFeatures(new String[]\n          {\"constant1\", \"constant1\"});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test4\",\n          features, norms, \"test\", fstore.getFeatures(),\n              params);\n      store.addModel(ltrScoringModel);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (ModelException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n\n  }\n","date":"2016-11-02 01:50:14","endLine":155,"groupId":"9566","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"duplicateFeatureTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e8/ee22482cbf1318220274a64aaaa89f66ed3864.src","preCode":"  public void duplicateFeatureTest() {\n    final ModelException expectedException =\n        new ModelException(\"duplicated feature constant1 in model test4\");\n    try {\n      final List<Feature> features = getFeatures(new String[]\n          {\"constant1\", \"constant1\"});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test4\",\n          features, norms, \"test\", fstore.getFeatures(),\n              params);\n      store.addModel(ltrScoringModel);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (ModelException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestLinearModel.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"N"}],"commitId":"7d3fccefe613afe7cd94ffeebab1217f92eb9d5c","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-02-10 02:56:59","modifiedFileCount":"28","status":"M","submitter":"Uwe Schindler"},{"authorTime":"2019-08-03 15:30:49","codes":[{"authorDate":"2019-08-03 15:30:49","commitOrder":3,"curCode":"  public void existingNameTest() {\n    final SolrException expectedException =\n        new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            ModelException.class.getName()+\": model 'test3' already exists. Please use a different name\");\n\n    final List<Feature> features = getFeatures(new String[]\n        {\"constant1\", \"constant5\"});\n    final List<Normalizer> norms =\n        new ArrayList<>(Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final Map<String,Object> weights = new HashMap<>();\n    weights.put(\"constant1\", 1d);\n    weights.put(\"constant5\", 1d);\n\n    Map<String,Object> params = new HashMap<>();\n    params.put(\"weights\", weights);\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test3\",\n          features, norms, \"test\", fstore.getFeatures(), params);\n      store.addModel(ltrScoringModel);\n      final LTRScoringModel m = store.getModel(\"test3\");\n      assertEquals(ltrScoringModel, m);\n      store.addModel(ltrScoringModel);\n    });\n    assertEquals(expectedException.toString(), ex.toString());\n  }\n","date":"2019-08-03 15:30:49","endLine":133,"groupId":"101302","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"existingNameTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/bba9105bfa9deb87fd18e017f57c694685a0dc.src","preCode":"  public void existingNameTest() {\n    final SolrException expectedException =\n        new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            ModelException.class.getName()+\": model 'test3' already exists. Please use a different name\");\n    try {\n      final List<Feature> features = getFeatures(new String[]\n          {\"constant1\", \"constant5\"});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test3\",\n          features, norms, \"test\", fstore.getFeatures(),\n              params);\n      store.addModel(ltrScoringModel);\n      final LTRScoringModel m = store.getModel(\"test3\");\n      assertEquals(ltrScoringModel, m);\n      store.addModel(ltrScoringModel);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (SolrException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestLinearModel.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2019-08-03 15:30:49","commitOrder":3,"curCode":"  public void duplicateFeatureTest() {\n    final ModelException expectedException =\n        new ModelException(\"duplicated feature constant1 in model test4\");\n    final List<Feature> features = getFeatures(new String[]\n        {\"constant1\", \"constant1\"});\n    final List<Normalizer> norms =\n        new ArrayList<>(Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final Map<String,Object> weights = new HashMap<>();\n    weights.put(\"constant1\", 1d);\n    weights.put(\"constant5\", 1d);\n\n    Map<String,Object> params = new HashMap<>();\n    params.put(\"weights\", weights);\n    ModelException ex = expectThrows(ModelException.class, () -> {\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test4\",\n          features, norms, \"test\", fstore.getFeatures(), params);\n      store.addModel(ltrScoringModel);\n    });\n    assertEquals(expectedException.toString(), ex.toString());\n\n  }\n","date":"2019-08-03 15:30:49","endLine":156,"groupId":"101302","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"duplicateFeatureTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/bba9105bfa9deb87fd18e017f57c694685a0dc.src","preCode":"  public void duplicateFeatureTest() {\n    final ModelException expectedException =\n        new ModelException(\"duplicated feature constant1 in model test4\");\n    try {\n      final List<Feature> features = getFeatures(new String[]\n          {\"constant1\", \"constant1\"});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test4\",\n          features, norms, \"test\", fstore.getFeatures(),\n              params);\n      store.addModel(ltrScoringModel);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (ModelException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestLinearModel.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"}],"commitId":"8c4fde94fe93c70b95ed3563fb65972bb303e0af","commitMessage":"@@@SOLR-12555: use expectThrows() to verify the ex thrown in tests\n","date":"2019-08-03 15:30:49","modifiedFileCount":"89","status":"M","submitter":"Munendra S N"}]
