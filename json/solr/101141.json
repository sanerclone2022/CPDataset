[{"authorTime":"2015-11-03 08:43:17","codes":[{"authorDate":"2017-12-16 00:24:18","commitOrder":2,"curCode":"  private void initSimpleRegexReplacement(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n\n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n\n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n          REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n          DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n          PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n          \"' to be combined with other options.\");\n    }\n\n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n\n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n          \" is not a valid regex pattern: \" + patt, pe);\n\n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","date":"2017-12-16 00:24:18","endLine":306,"groupId":"33102","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initSimpleRegexReplacement","params":"(NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d0/0df2bcba1bbb9e9fe080ca40b2f84ee6c32ebf.src","preCode":"  private void initSimpleRegexReplacement(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n\n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n\n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n          REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n          DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n          PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n          \"' to be combined with other options.\");\n    }\n\n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n\n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n          \" is not a valid regex pattern: \" + patt, pe);\n\n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","realPath":"solr/contrib/analysis-extras/src/java/org/apache/solr/update/processor/OpenNLPExtractNamedEntitiesUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"B"},{"authorDate":"2015-11-03 08:43:17","commitOrder":2,"curCode":"  private void initSimpleRegexReplacement(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" + \n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n    \n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n    \n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n                              REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n                              DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n                              PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n                              \"' to be combined with other options.\");\n    }\n    \n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    \n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n                              \" is not a valid regex pattern: \" + patt, pe);\n      \n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","date":"2015-11-03 08:43:17","endLine":276,"groupId":"33102","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initSimpleRegexReplacement","params":"(NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/0cf9dee4976ce406836737ce84a0006eac79af.src","preCode":"  private void initSimpleRegexReplacement(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" + \n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n    \n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n    \n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n                              REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n                              DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n                              PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n                              \"' to be combined with other options.\");\n    }\n    \n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    \n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n                              \" is not a valid regex pattern: \" + patt, pe);\n      \n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"NB"}],"commitId":"3e2f9e62d772218bf1fcae6d58542fad3ec43742","commitMessage":"@@@LUCENE-2899: Add OpenNLP Analysis capabilities as a module\n","date":"2017-12-16 00:24:18","modifiedFileCount":"3","status":"M","submitter":"Steve Rowe"},{"authorTime":"2015-11-03 08:43:17","codes":[{"authorDate":"2020-06-12 22:56:22","commitOrder":3,"curCode":"  private void initSimpleRegexReplacement(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n\n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n\n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n          REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n          DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n          PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n          \"' to be combined with other options.\");\n    }\n\n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n\n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n          \" is not a valid regex pattern: \" + patt, pe);\n\n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","date":"2020-06-12 22:56:22","endLine":312,"groupId":"33102","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initSimpleRegexReplacement","params":"(@SuppressWarnings({\"rawtypes\"})NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/dbd013c50f4f9e84dce8642d10a89491cff930.src","preCode":"  private void initSimpleRegexReplacement(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n\n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n\n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n          REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n          DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n          PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n          \"' to be combined with other options.\");\n    }\n\n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n\n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n          \" is not a valid regex pattern: \" + patt, pe);\n\n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","realPath":"solr/contrib/analysis-extras/src/java/org/apache/solr/update/processor/OpenNLPExtractNamedEntitiesUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"},{"authorDate":"2015-11-03 08:43:17","commitOrder":3,"curCode":"  private void initSimpleRegexReplacement(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" + \n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n    \n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n    \n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n                              REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n                              DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n                              PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n                              \"' to be combined with other options.\");\n    }\n    \n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    \n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n                              \" is not a valid regex pattern: \" + patt, pe);\n      \n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","date":"2015-11-03 08:43:17","endLine":276,"groupId":"33102","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initSimpleRegexReplacement","params":"(NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/0cf9dee4976ce406836737ce84a0006eac79af.src","preCode":"  private void initSimpleRegexReplacement(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" + \n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n    \n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n    \n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n                              REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n                              DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n                              PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n                              \"' to be combined with other options.\");\n    }\n    \n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    \n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n                              \" is not a valid regex pattern: \" + patt, pe);\n      \n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"N"}],"commitId":"8cbfb192ab151312efe7d0de42478329604cba90","commitMessage":"@@@SOLR-14563: Fix or suppress warnings in solr/contrib\n","date":"2020-06-12 22:56:22","modifiedFileCount":"23","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-06-13 23:00:58","codes":[{"authorDate":"2020-06-12 22:56:22","commitOrder":4,"curCode":"  private void initSimpleRegexReplacement(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n\n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n\n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n          REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n          DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n          PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n          \"' to be combined with other options.\");\n    }\n\n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n\n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n          \" is not a valid regex pattern: \" + patt, pe);\n\n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","date":"2020-06-12 22:56:22","endLine":312,"groupId":"33102","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"initSimpleRegexReplacement","params":"(@SuppressWarnings({\"rawtypes\"})NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/dbd013c50f4f9e84dce8642d10a89491cff930.src","preCode":"  private void initSimpleRegexReplacement(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n\n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n\n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n          REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n          DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n          PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n          \"' to be combined with other options.\");\n    }\n\n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n\n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n          \" is not a valid regex pattern: \" + patt, pe);\n\n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","realPath":"solr/contrib/analysis-extras/src/java/org/apache/solr/update/processor/OpenNLPExtractNamedEntitiesUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"N"},{"authorDate":"2020-06-13 23:00:58","commitOrder":4,"curCode":"  private void initSimpleRegexReplacement(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" + \n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n    \n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n    \n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n                              REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n                              DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n                              PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n                              \"' to be combined with other options.\");\n    }\n    \n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    \n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n                              \" is not a valid regex pattern: \" + patt, pe);\n      \n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","date":"2020-06-13 23:00:58","endLine":279,"groupId":"33102","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"initSimpleRegexReplacement","params":"(@SuppressWarnings({\"rawtypes\"})NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/11/fe324afb1632e604e2089631fe1c22a1f65fbe.src","preCode":"  private void initSimpleRegexReplacement(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" + \n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n    \n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n    \n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n                              REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n                              DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n                              PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n                              \"' to be combined with other options.\");\n    }\n    \n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    \n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n                              \" is not a valid regex pattern: \" + patt, pe);\n      \n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"}],"commitId":"a41aa20b0afaadf47ec6e58476a947c6936c1921","commitMessage":"@@@SOLR-14564: Fix or suppress remaining warnings in solr/core\n","date":"2020-06-13 23:00:58","modifiedFileCount":"91","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-09 02:08:25","codes":[{"authorDate":"2021-06-09 02:08:25","commitOrder":5,"curCode":"  private void initSimpleRegexReplacement(NamedList<?> args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n\n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n\n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n          REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n          DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n          PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n          \"' to be combined with other options.\");\n    }\n\n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n\n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n          \" is not a valid regex pattern: \" + patt, pe);\n\n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","date":"2021-06-09 02:08:25","endLine":310,"groupId":"101141","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"initSimpleRegexReplacement","params":"(NamedList<?>args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/35/1edc3f513422aa1e0ea9e8f92e7d8c7e4f914a.src","preCode":"  private void initSimpleRegexReplacement(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n\n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n\n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n          REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n          DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n          PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n          \"' to be combined with other options.\");\n    }\n\n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n\n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n          \" is not a valid regex pattern: \" + patt, pe);\n\n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","realPath":"solr/contrib/analysis-extras/src/java/org/apache/solr/update/processor/OpenNLPExtractNamedEntitiesUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"},{"authorDate":"2021-06-09 02:08:25","commitOrder":5,"curCode":"  private void initSimpleRegexReplacement(NamedList<?> args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" + \n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n    \n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n    \n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n                              REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n                              DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n                              PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n                              \"' to be combined with other options.\");\n    }\n    \n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    \n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n                              \" is not a valid regex pattern: \" + patt, pe);\n      \n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","date":"2021-06-09 02:08:25","endLine":277,"groupId":"101141","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"initSimpleRegexReplacement","params":"(NamedList<?>args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1f/36aa8d35346c5555aca63d0b65b2c18e632eb5.src","preCode":"  private void initSimpleRegexReplacement(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \n    \r\n    \r\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) || 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" + \n          PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \" but also found \" + SOURCE_PARAM + \" or \" + DEST_PARAM);\n    }\n    \n    assert args.indexOf(SOURCE_PARAM, 0) < 0;\n    \n    Object patt = args.remove(PATTERN_PARAM);\n    Object replacement = args.remove(REPLACEMENT_PARAM);\n\n    if (null == patt || null == replacement) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + PATTERN_PARAM + \"' and '\" +\n                              REPLACEMENT_PARAM + \"' are both mandatory if '\" + SOURCE_PARAM + \"' and '\"+\n                              DEST_PARAM + \"' are not both specified\");\n    }\n\n    if (0 != args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Init params '\" + REPLACEMENT_PARAM + \"' and '\" +\n                              PATTERN_PARAM + \"' must be children of '\" + DEST_PARAM +\n                              \"' to be combined with other options.\");\n    }\n    \n    if (!(replacement instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + REPLACEMENT_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    if (!(patt instanceof String)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + PATTERN_PARAM + \"' must be a string (i.e. <str>)\");\n    }\n    \n    dest = replacement.toString();\n    try {\n      this.pattern = Pattern.compile(patt.toString());\n    } catch (PatternSyntaxException pe) {\n      throw new SolrException(SERVER_ERROR, \"Init param \" + PATTERN_PARAM +\n                              \" is not a valid regex pattern: \" + patt, pe);\n      \n    }\n    srcInclusions = new SelectorParams();\n    srcInclusions.fieldRegex = Collections.singletonList(this.pattern);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"916b7a04f65490179a73e2c1620bab1df65e4bb8","commitMessage":"@@@SOLR-15385 RawTypes Part II.  Searching for NamedList (#165)\n\nMost updates relate to NamedListInitializationPlugin init method.  and RequestHandler.\n\nLink to JIRA issues for some extant bugs.\n\nCo-authored-by: David Smiley <dsmiley@apache.org>","date":"2021-06-09 02:08:25","modifiedFileCount":"221","status":"M","submitter":"Mike Drob"}]
