[{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2017-04-06 05:57:11","commitOrder":4,"curCode":"  public ShuffleStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, zkHost, mParams);\n  }\n","date":"2017-04-06 05:57:24","endLine":96,"groupId":"49412","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ShuffleStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d3/0918be7a83da9af275f7834a00be1b8e0859e0.src","preCode":"  public ShuffleStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, zkHost, mParams);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ShuffleStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"},{"authorDate":"2016-05-23 14:35:53","commitOrder":4,"curCode":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    init(collectionName, zkHost, mParams);\n  }\n","date":"2016-05-23 14:35:53","endLine":182,"groupId":"49412","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"CloudSolrStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8a/ba89c2e6627a6894f483d275fcdc2a4a085940.src","preCode":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    init(collectionName, zkHost, mParams);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"NB"}],"commitId":"37b6c60548f3288ee057dbd8ce1e1594ab48d314","commitMessage":"@@@SOLR-10426: Add shuffle Streaming Expression\n","date":"2017-04-06 05:57:24","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-04-12 03:17:03","codes":[{"authorDate":"2017-04-06 05:57:11","commitOrder":5,"curCode":"  public ShuffleStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, zkHost, mParams);\n  }\n","date":"2017-04-06 05:57:24","endLine":96,"groupId":"10353","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"ShuffleStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d3/0918be7a83da9af275f7834a00be1b8e0859e0.src","preCode":"  public ShuffleStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, zkHost, mParams);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ShuffleStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"N"},{"authorDate":"2017-04-12 03:17:03","commitOrder":5,"curCode":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    \r\n\r\n\r\n\r\n\n    \n    \r\n    init(collectionName, zkHost, mParams);\n  }\n","date":"2017-04-12 03:24:42","endLine":184,"groupId":"10353","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"CloudSolrStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6d/1764ade092573e568d420c8e732989376a0a86.src","preCode":"  public CloudSolrStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter aliasExpression = factory.getNamedOperand(expression, \"aliases\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"aliases\")){\n        mParams.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    if(null != aliasExpression && aliasExpression.getParameter() instanceof StreamExpressionValue){\n      fieldMappings = new HashMap<>();\n      for(String mapping : ((StreamExpressionValue)aliasExpression.getParameter()).getValue().split(\",\")){\n        String[] parts = mapping.trim().split(\"=\");\n        if(2 == parts.length){\n          fieldMappings.put(parts[0], parts[1]);\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - alias expected of the format origName=newName\",expression));\n        }\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    init(collectionName, zkHost, mParams);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"06a55b73b97db0a2cff490dcf40670079a953f60","commitMessage":"@@@SOLR-10274: The search Streaming Expression should work in non-SolrCloud mode\n","date":"2017-04-12 03:24:42","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"}]
