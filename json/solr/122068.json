[{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2011-07-10 07:01:53","endLine":230,"groupId":"52354","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/ae78cbdc694445449653cecfdc01358a4c227d.src","preCode":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"},{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"429093b236e30940d69edc8869346819c337cd10","commitMessage":"@@@SOLR-2452: Rewrote Solr build system (tighter integration with the Lucene build system) and restructured Solr internal and contrib modules\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1144761 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-07-10 07:01:53","modifiedFileCount":"0","status":"B","submitter":"Steven Rowe"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2012-03-07 05:59:31","commitOrder":2,"curCode":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2012-03-07 05:59:31","endLine":236,"groupId":"54731","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3c/5c90975b7301e787f71680641d64f37e29c1d0.src","preCode":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":2,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"5811b6229a12c6866f6c6007f04021e6829104f2","commitMessage":"@@@SOLR-141: Errors and Exceptions are formated by ResponseWriter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1297749 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-03-07 05:59:31","modifiedFileCount":"6","status":"M","submitter":"Ryan McKinley"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2012-06-29 00:39:25","commitOrder":3,"curCode":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2012-06-29 00:39:25","endLine":231,"groupId":"54731","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/7a9c367b96c9ccbb8705507b98c2a2d8b0e4bc.src","preCode":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":3,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"fd16190940d7495e985f44ce7504562c8bbc91e6","commitMessage":"@@@LUCENE-4172: clean up redundant throws clauses\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1355069 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-06-29 00:39:25","modifiedFileCount":"402","status":"M","submitter":"Steven Rowe"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2015-01-19 21:25:29","commitOrder":4,"curCode":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2015-01-19 21:25:29","endLine":228,"groupId":"54731","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/50/df70b767ff3bfe3bb3a0b34abd4dbc7c89645d.src","preCode":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":4,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"e61cd9654b069c45712c81ea39713ca352e529a8","commitMessage":"@@@SOLR-6840: Remove support for old-style solr.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1652995 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-01-19 21:25:29","modifiedFileCount":"56","status":"M","submitter":"Alan Woodward"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2015-01-21 23:06:04","commitOrder":5,"curCode":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2015-01-21 23:06:04","endLine":215,"groupId":"54731","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/5051d08b425fea27574a80c9b10233f3647961.src","preCode":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":5,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"344be1a6b196e5fce7ffeae020ff97de77f75ff7","commitMessage":"@@@SOLR-6976: Remove methods and classes deprecated in 4.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1653549 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-01-21 23:06:04","modifiedFileCount":"44","status":"M","submitter":"Alan Woodward"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2015-01-22 05:39:15","commitOrder":6,"curCode":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch( IOException | SolrException iox ) {\n      throw iox;\n    } catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2015-01-22 05:39:15","endLine":210,"groupId":"54731","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e4/3a57954cd9ce9babb6d8ad429f619d3793aa9a.src","preCode":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":6,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"0961e4179d5078aed1639f8894911d6793d41d78","commitMessage":"@@@SOLR-7014: Collapse identical catch branches in try-catch statements\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1653665 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-01-22 05:39:15","modifiedFileCount":"34","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2015-03-05 19:29:24","commitOrder":7,"curCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException\n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch( IOException | SolrException iox ) {\n      throw iox;\n    } catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2015-03-05 19:29:24","endLine":213,"groupId":"54731","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ca/5542c0dc6372fe74155f20e4f2acb985bf2988.src","preCode":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch( IOException | SolrException iox ) {\n      throw iox;\n    } catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":7,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"a43843701d9dbf790f9104a2ce1f6f38e98e8370","commitMessage":"@@@SOLR-7155: Add optional collection parameter to all SolrClient methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1664310 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-05 19:29:24","modifiedFileCount":"9","status":"M","submitter":"Alan Woodward"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2015-03-26 17:21:01","commitOrder":8,"curCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(\"path\", path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2015-03-26 17:21:01","endLine":243,"groupId":"0","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/ec0bdd73fd3939017cd7f21b4d2432c3d423dd.src","preCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException\n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      \r\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      \r\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              \r\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              \r\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch( IOException | SolrException iox ) {\n      throw iox;\n    } catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":8,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"5048456a7a73dd6273fdfe95a3a12167ac827fbc","commitMessage":"@@@SOLR-7307: Add constructors to EmbeddedSolrServer taking Path or NodeConfig\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1669305 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-26 17:21:01","modifiedFileCount":"4","status":"M","submitter":"Alan Woodward"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2015-04-02 12:08:05","commitOrder":9,"curCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2015-04-02 12:08:05","endLine":245,"groupId":"36878","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/7a945bbdb95d388260f74496480a771216749d.src","preCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(\"path\", path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":9,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"9baabd177c8a63873ac4f3dbead4edae87a8bd25","commitMessage":"@@@SOLR-6615: Refactor code to use String constants\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1670813 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-02 12:08:05","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2015-06-16 23:17:14","commitOrder":10,"curCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2015-06-16 23:17:14","endLine":245,"groupId":"36878","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/50/557cbb407f684843d672b509ba2a3cca25bda9.src","preCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":10,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"8ab21aa657c6c1d5ae05080a4500d527ad120b4f","commitMessage":"@@@SOLR-7662: Refactored response writing to consolidate the logic in one place\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1685856 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-16 23:17:14","modifiedFileCount":"11","status":"M","submitter":"Noble Paul"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2015-08-29 05:24:44","commitOrder":11,"curCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2015-08-29 05:24:44","endLine":245,"groupId":"36878","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/e7e4e755233d961d3588b423d67bbb737daa23.src","preCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":11,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"db780237368f54c44e8be319d8febb4a53422698","commitMessage":"@@@SOLR-7957: expand ResultContext to allow for multiple DocLists per response.  remove redundant TransformContext\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1698421 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-08-29 05:24:44","modifiedFileCount":"29","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":12,"curCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = out.toInputStream();\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2016-05-23 14:35:53","endLine":244,"groupId":"36878","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fc/283f42ef613687d39846770a11b2ba667beed2.src","preCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":12,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"eae605b53294282e50452e60440c138a3529f11d","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-23 14:35:53","modifiedFileCount":"309","status":"M","submitter":"Noble Paul"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2017-02-23 05:40:40","commitOrder":13,"curCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try(ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try(InputStream in = out.toInputStream()){\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2017-03-01 13:32:35","endLine":226,"groupId":"36879","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8d/e5fc92fafaccbb99aa5a39b30b2175dc638f08.src","preCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              \r\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = out.toInputStream();\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":13,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"0baf2fa33cef485df94649fd408c22e6430b68cf","commitMessage":"@@@SOLR-10134: EmbeddedSolrServer handles SchemaAPI requests\n","date":"2017-03-01 13:32:35","modifiedFileCount":"4","status":"M","submitter":"Mikhail Khludnev"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2017-06-30 06:18:02","commitOrder":14,"curCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try(ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try(InputStream in = out.toInputStream()){\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2017-06-30 06:18:33","endLine":227,"groupId":"36879","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0c/7ea25f1835ba0533560f1eacb86074503859cf.src","preCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try(ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try(InputStream in = out.toInputStream()){\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":14,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"19a8be3c9f4850d9f944ac8af97da58584b445a8","commitMessage":"@@@SOLR-11272: fix NPE from EmbeddedSolrServer on /admin/info/system\n","date":"2017-06-30 06:18:33","modifiedFileCount":"1","status":"M","submitter":"Mikhail Khludnev"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2018-04-19 11:37:31","commitOrder":15,"curCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), Collections.singleton(new ContentStreamBase() {\n          @Override\n          public InputStream getStream() throws IOException {\n            BAOS baos = new BAOS();\n            new BinaryRequestWriter().write(request, baos);\n            return new ByteArrayInputStream(baos.getbuf());\n          }\n          @Override\n          public String getContentType() {\n            return CommonParams.JAVABIN_MIME;\n\n          }\n        }));\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2018-04-19 11:37:31","endLine":243,"groupId":"36879","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/90/eb0d145b6e6ee7d9223149dba9831b251fa68e.src","preCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try(ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try(InputStream in = out.toInputStream()){\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":15,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"1c8ab330d66557a289dd5398576726a43964c9e8","commitMessage":"@@@SOLR-12142: EmbeddedSolrServer should use req.getContentWriter\n","date":"2018-04-19 11:37:31","modifiedFileCount":"1","status":"M","submitter":"noble"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2018-06-08 00:38:50","commitOrder":16,"curCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2018-06-08 00:38:50","endLine":238,"groupId":"48085","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/cf374156c171b95ed4d0aacc82515264798731.src","preCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), Collections.singleton(new ContentStreamBase() {\n          @Override\n          public InputStream getStream() throws IOException {\n            BAOS baos = new BAOS();\n            new BinaryRequestWriter().write(request, baos);\n            return new ByteArrayInputStream(baos.getbuf());\n          }\n          @Override\n          public String getContentType() {\n            return CommonParams.JAVABIN_MIME;\n\n          }\n        }));\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":16,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"9b65d7e1a20c6f1cb4eeb298951e98bef6a6cf8a","commitMessage":"@@@SOLR-12142: EmbeddedSolrServer should use req.getContentWriter\n","date":"2018-06-08 00:38:50","modifiedFileCount":"5","status":"M","submitter":"Noble Paul"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2019-09-25 23:33:28","commitOrder":17,"curCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2019-09-25 23:33:28","endLine":240,"groupId":"48085","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/4396f0150b8ee760e650b98050a1a653d8b088.src","preCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":17,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"0d0af505a034a04e3d86cd24447b5a747bfa23c0","commitMessage":"@@@SOLR-13784: EmbeddedSolrServer coreName optional\n","date":"2019-09-25 23:33:28","modifiedFileCount":"5","status":"M","submitter":"David Smiley"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2020-05-09 05:25:47","commitOrder":18,"curCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setNumFoundExact(ctx.getDocList().hitCountRelation() == Relation.EQUAL_TO);\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2020-05-09 05:25:47","endLine":276,"groupId":"48085","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(SolrRequestrequest@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bb/bb8a0bdf9813653ce5935bf0c1c04f58935802.src","preCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":18,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"d9f9d6dd47c06f5fe092d43d6bf0c77c5ff2019f","commitMessage":"@@@SOLR-13289: Add Support for BlockMax WAND (#1456)\n\nAdd support for BlockMax WAND via a minExactHits parameter. Hits will be counted accurately at least until this value.  and above that.  the count will be an approximation. In distributed search requests.  the count will be per shard.  so potentially the count will be accurately counted until numShards * minExactHits. The response will include the value numFoundExact which can be true (The value in numFound is exact) or false (the value in numFound is an approximation).","date":"2020-05-09 05:25:47","modifiedFileCount":"47","status":"M","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2020-06-13 23:00:58","commitOrder":19,"curCode":"  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setNumFoundExact(ctx.getDocList().hitCountRelation() == Relation.EQUAL_TO);\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","date":"2020-06-13 23:00:58","endLine":277,"groupId":"48085","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(@SuppressWarnings({\"rawtypes\"})SolrRequestrequest@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b0/b26c1f9193e328597393005bd9329e1146c30f.src","preCode":"  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setNumFoundExact(ctx.getDocList().hitCountRelation() == Relation.EQUAL_TO);\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":19,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"a41aa20b0afaadf47ec6e58476a947c6936c1921","commitMessage":"@@@SOLR-14564: Fix or suppress remaining warnings in solr/core\n","date":"2020-06-13 23:00:58","modifiedFileCount":"91","status":"M","submitter":"Erick Erickson"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2020-06-16 13:46:50","commitOrder":20,"curCode":"  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setNumFoundExact(ctx.getDocList().hitCountRelation() == Relation.EQUAL_TO);\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) {\n        req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n  }\n","date":"2020-06-16 13:46:50","endLine":279,"groupId":"48085","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(@SuppressWarnings({\"rawtypes\"})SolrRequestrequest@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3c/2b490bb294e245b8ff9185eeeeb05c53a3c274.src","preCode":"  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setNumFoundExact(ctx.getDocList().hitCountRelation() == Relation.EQUAL_TO);\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":20,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"47273","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"2da71c2a405483e2cf5270dfc20cbd760cd66486","commitMessage":"@@@SOLR-14384: SolrRequestInfo now stacks internally.\n* \"set\" now MUST pair with a \"clear\"\n* fixes SolrIndexSearcher.warm which should have re-instated previous SRI\n* cleans up some SRI set/clear users\n\nCloses #1527\n","date":"2020-06-16 13:46:50","modifiedFileCount":"9","status":"M","submitter":"Nazerke Seidan"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2021-06-03 06:17:26","commitOrder":21,"curCode":"  public NamedList<Object> request(SolrRequest<?> request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setNumFoundExact(ctx.getDocList().hitCountRelation() == Relation.EQUAL_TO);\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              @SuppressWarnings({\"unchecked\"})\n              NamedList<Object> resolved = (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n              return resolved;\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) {\n        req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n  }\n","date":"2021-06-03 06:17:26","endLine":278,"groupId":"122068","id":41,"instanceNumber":1,"isCurCommit":1,"methodName":"request","params":"(SolrRequest<?>request@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/10/66c3ef7e77f0958c58f6d3572946b34b2adbd0.src","preCode":"  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    \r\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      \r\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      \r\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  \r\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setNumFoundExact(ctx.getDocList().hitCountRelation() == Relation.EQUAL_TO);\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  \r\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      \r\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) {\n        req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":21,"curCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","date":"2011-07-10 07:01:53","endLine":113,"groupId":"122068","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"request","params":"(Stringpath@SolrParamsparams@Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/c4a902dda40fc9d5b07652e9141c704a0c6d97.src","preCode":"  public String request(String path, SolrParams params, String body) throws Exception\n  {\n    \r\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        if (params == null)\n          params = new MapSolrParams( new HashMap<String, String>() );        \n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    return request(handler, params, body);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"}]
