[{"authorTime":"2018-01-23 20:35:14","codes":[{"authorDate":"2018-07-07 00:34:05","commitOrder":2,"curCode":"  public static void setupCluster() throws Exception {\n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int maxShardsPerNode = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setMaxShardsPerNode(maxShardsPerNode)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    final int numDocs = atLeast(1000);\n    final int maxTermId = atLeast(TERM_VALUES_RANDOMIZER);\n    \n    \r\n    for (int i = 0; i < NUM_RANGE_VALUES; i++) {\n      TERM_MODEL[i] = new LinkedHashMap<>();\n    }\n\n    \r\n    for (int id = 0; id < numDocs; id++) {\n      final int rangeVal = random().nextInt(NUM_RANGE_VALUES);\n      final String termVal = \"x\" + random().nextInt(maxTermId);\n      final SolrInputDocument doc = sdoc(\"id\", \"\"+id,\n                                         INT_FIELD, \"\"+rangeVal,\n                                         STR_FIELD, termVal);\n      RANGE_MODEL[rangeVal]++;\n      TERM_MODEL[rangeVal].merge(termVal, 1, Integer::sum);\n\n      assertEquals(0, (new UpdateRequest().add(doc)).process(cluster.getSolrClient()).getStatus());\n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n    \n  }\n","date":"2018-07-07 00:34:05","endLine":124,"groupId":"5903","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/05/c25cf03fd615a328632f72b48d6f05db6c3790.src","preCode":"  public static void setupCluster() throws Exception {\n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int maxShardsPerNode = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setMaxShardsPerNode(maxShardsPerNode)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    final int numDocs = atLeast(1000);\n    final int maxTermId = atLeast(TERM_VALUES_RANDOMIZER);\n    \n    \r\n    for (int i = 0; i < NUM_RANGE_VALUES; i++) {\n      TERM_MODEL[i] = new LinkedHashMap<>();\n    }\n\n    \r\n    for (int id = 0; id < numDocs; id++) {\n      final int rangeVal = random().nextInt(NUM_RANGE_VALUES);\n      final String termVal = \"x\" + random().nextInt(maxTermId);\n      final SolrInputDocument doc = sdoc(\"id\", \"\"+id,\n                                         INT_FIELD, \"\"+rangeVal,\n                                         STR_FIELD, termVal);\n      RANGE_MODEL[rangeVal]++;\n      TERM_MODEL[rangeVal].merge(termVal, 1, Integer::sum);\n\n      assertEquals(0, (new UpdateRequest().add(doc)).process(cluster.getSolrClient()).getStatus());\n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n    \n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2018-01-23 20:35:14","commitOrder":2,"curCode":"  public static void setupCluster() throws Exception {\n    CurrencyFieldTypeTest.assumeCurrencySupport(\"USD\", \"EUR\", \"MXN\", \"GBP\", \"JPY\", \"NOK\");\n    FIELD = usually() ? \"amount_CFT\" : \"amount\";\n    \n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int maxShardsPerNode = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setMaxShardsPerNode(maxShardsPerNode)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n    \n    for (int id = 0; id < NUM_DOCS; id++) { \r\n      \r\n      \r\n      final String x = STR_VALS.get(id % STR_VALS.size());\n      final String val = VALUES.get(id % VALUES.size());\n      assertEquals(0, (new UpdateRequest().add(sdoc(\"id\", \"\" + id,\n                                                    \"x_s\", x,\n                                                    FIELD, val))\n                       ).process(cluster.getSolrClient()).getStatus());\n      \n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n  }\n","date":"2018-01-23 20:35:14","endLine":95,"groupId":"54523","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/b9281cc46bb77cfc4f91a0a536d8b1460d0088.src","preCode":"  public static void setupCluster() throws Exception {\n    CurrencyFieldTypeTest.assumeCurrencySupport(\"USD\", \"EUR\", \"MXN\", \"GBP\", \"JPY\", \"NOK\");\n    FIELD = usually() ? \"amount_CFT\" : \"amount\";\n    \n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int maxShardsPerNode = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setMaxShardsPerNode(maxShardsPerNode)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n    \n    for (int id = 0; id < NUM_DOCS; id++) { \r\n      \r\n      \r\n      final String x = STR_VALS.get(id % STR_VALS.size());\n      final String val = VALUES.get(id % VALUES.size());\n      assertEquals(0, (new UpdateRequest().add(sdoc(\"id\", \"\" + id,\n                                                    \"x_s\", x,\n                                                    FIELD, val))\n                       ).process(cluster.getSolrClient()).getStatus());\n      \n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"NB"}],"commitId":"7d8ef9e39d3321a5366fcfe1a358ec015fb7b8b1","commitMessage":"@@@SOLR-12516: Fix some bugs in 'type:range' Facet refinement when sub-facets are combined with non default values for the 'other' and 'include' options.\n\n1) the optional other buckets (before/after/between) are not considered during refinement\n\n2) when using the include option: if edge is specified.  then the refinement of all range buckets mistakenly includes the lower bound of the range.  regardless of whether lower was specified.\n","date":"2018-07-07 00:34:05","modifiedFileCount":"5","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2018-01-23 20:35:14","codes":[{"authorDate":"2019-05-30 01:27:15","commitOrder":3,"curCode":"  public static void setupCluster() throws Exception {\n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int maxShardsPerNode = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setMaxShardsPerNode(maxShardsPerNode)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    final int numDocs = atLeast(1000);\n    final int maxTermId = atLeast(TERM_VALUES_RANDOMIZER);\n\n    \r\n    Arrays.fill(RANGE_MODEL, 0);\n    \r\n    for (int i = 0; i < NUM_RANGE_VALUES; i++) {\n      TERM_MODEL[i] = new LinkedHashMap<>();\n    }\n\n    \r\n    for (int id = 0; id < numDocs; id++) {\n      final int rangeVal = random().nextInt(NUM_RANGE_VALUES);\n      final String termVal = \"x\" + random().nextInt(maxTermId);\n      final SolrInputDocument doc = sdoc(\"id\", \"\"+id,\n                                         INT_FIELD, \"\"+rangeVal,\n                                         STR_FIELD, termVal);\n      RANGE_MODEL[rangeVal]++;\n      TERM_MODEL[rangeVal].merge(termVal, 1, Integer::sum);\n\n      assertEquals(0, (new UpdateRequest().add(doc)).process(cluster.getSolrClient()).getStatus());\n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n    \n  }\n","date":"2019-05-30 01:27:15","endLine":126,"groupId":"5903","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8e/53b4e68a3018610d7731f167ab7bd413a71951.src","preCode":"  public static void setupCluster() throws Exception {\n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int maxShardsPerNode = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setMaxShardsPerNode(maxShardsPerNode)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    final int numDocs = atLeast(1000);\n    final int maxTermId = atLeast(TERM_VALUES_RANDOMIZER);\n    \n    \r\n    for (int i = 0; i < NUM_RANGE_VALUES; i++) {\n      TERM_MODEL[i] = new LinkedHashMap<>();\n    }\n\n    \r\n    for (int id = 0; id < numDocs; id++) {\n      final int rangeVal = random().nextInt(NUM_RANGE_VALUES);\n      final String termVal = \"x\" + random().nextInt(maxTermId);\n      final SolrInputDocument doc = sdoc(\"id\", \"\"+id,\n                                         INT_FIELD, \"\"+rangeVal,\n                                         STR_FIELD, termVal);\n      RANGE_MODEL[rangeVal]++;\n      TERM_MODEL[rangeVal].merge(termVal, 1, Integer::sum);\n\n      assertEquals(0, (new UpdateRequest().add(doc)).process(cluster.getSolrClient()).getStatus());\n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n    \n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2018-01-23 20:35:14","commitOrder":3,"curCode":"  public static void setupCluster() throws Exception {\n    CurrencyFieldTypeTest.assumeCurrencySupport(\"USD\", \"EUR\", \"MXN\", \"GBP\", \"JPY\", \"NOK\");\n    FIELD = usually() ? \"amount_CFT\" : \"amount\";\n    \n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int maxShardsPerNode = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setMaxShardsPerNode(maxShardsPerNode)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n    \n    for (int id = 0; id < NUM_DOCS; id++) { \r\n      \r\n      \r\n      final String x = STR_VALS.get(id % STR_VALS.size());\n      final String val = VALUES.get(id % VALUES.size());\n      assertEquals(0, (new UpdateRequest().add(sdoc(\"id\", \"\" + id,\n                                                    \"x_s\", x,\n                                                    FIELD, val))\n                       ).process(cluster.getSolrClient()).getStatus());\n      \n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n  }\n","date":"2018-01-23 20:35:14","endLine":95,"groupId":"54523","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/b9281cc46bb77cfc4f91a0a536d8b1460d0088.src","preCode":"  public static void setupCluster() throws Exception {\n    CurrencyFieldTypeTest.assumeCurrencySupport(\"USD\", \"EUR\", \"MXN\", \"GBP\", \"JPY\", \"NOK\");\n    FIELD = usually() ? \"amount_CFT\" : \"amount\";\n    \n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int maxShardsPerNode = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setMaxShardsPerNode(maxShardsPerNode)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n    \n    for (int id = 0; id < NUM_DOCS; id++) { \r\n      \r\n      \r\n      final String x = STR_VALS.get(id % STR_VALS.size());\n      final String val = VALUES.get(id % VALUES.size());\n      assertEquals(0, (new UpdateRequest().add(sdoc(\"id\", \"\" + id,\n                                                    \"x_s\", x,\n                                                    FIELD, val))\n                       ).process(cluster.getSolrClient()).getStatus());\n      \n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"c2b92f3015d44a48abc7cc5f7c972298ea317a07","commitMessage":"@@@Fix all solr tests to pass w/ -Dtests.dups=2 -Dtests.jvms=1\n","date":"2019-05-30 01:27:15","modifiedFileCount":"18","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2020-07-08 23:57:24","codes":[{"authorDate":"2020-07-08 23:57:24","commitOrder":4,"curCode":"  public static void setupCluster() throws Exception {\n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    final int numDocs = atLeast(1000);\n    final int maxTermId = atLeast(TERM_VALUES_RANDOMIZER);\n\n    \r\n    Arrays.fill(RANGE_MODEL, 0);\n    \r\n    for (int i = 0; i < NUM_RANGE_VALUES; i++) {\n      TERM_MODEL[i] = new LinkedHashMap<>();\n    }\n\n    \r\n    for (int id = 0; id < numDocs; id++) {\n      final int rangeVal = random().nextInt(NUM_RANGE_VALUES);\n      final String termVal = \"x\" + random().nextInt(maxTermId);\n      final SolrInputDocument doc = sdoc(\"id\", \"\"+id,\n                                         INT_FIELD, \"\"+rangeVal,\n                                         STR_FIELD, termVal);\n      RANGE_MODEL[rangeVal]++;\n      TERM_MODEL[rangeVal].merge(termVal, 1, Integer::sum);\n\n      assertEquals(0, (new UpdateRequest().add(doc)).process(cluster.getSolrClient()).getStatus());\n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n    \n  }\n","date":"2020-07-08 23:57:24","endLine":124,"groupId":"103207","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/9b864a144da20393d29817f4872113233c08f2.src","preCode":"  public static void setupCluster() throws Exception {\n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int maxShardsPerNode = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setMaxShardsPerNode(maxShardsPerNode)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    final int numDocs = atLeast(1000);\n    final int maxTermId = atLeast(TERM_VALUES_RANDOMIZER);\n\n    \r\n    Arrays.fill(RANGE_MODEL, 0);\n    \r\n    for (int i = 0; i < NUM_RANGE_VALUES; i++) {\n      TERM_MODEL[i] = new LinkedHashMap<>();\n    }\n\n    \r\n    for (int id = 0; id < numDocs; id++) {\n      final int rangeVal = random().nextInt(NUM_RANGE_VALUES);\n      final String termVal = \"x\" + random().nextInt(maxTermId);\n      final SolrInputDocument doc = sdoc(\"id\", \"\"+id,\n                                         INT_FIELD, \"\"+rangeVal,\n                                         STR_FIELD, termVal);\n      RANGE_MODEL[rangeVal]++;\n      TERM_MODEL[rangeVal].merge(termVal, 1, Integer::sum);\n\n      assertEquals(0, (new UpdateRequest().add(doc)).process(cluster.getSolrClient()).getStatus());\n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n    \n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-07-08 23:57:24","commitOrder":4,"curCode":"  public static void setupCluster() throws Exception {\n    CurrencyFieldTypeTest.assumeCurrencySupport(\"USD\", \"EUR\", \"MXN\", \"GBP\", \"JPY\", \"NOK\");\n    FIELD = usually() ? \"amount_CFT\" : \"amount\";\n    \n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n    \n    for (int id = 0; id < NUM_DOCS; id++) { \r\n      \r\n      \r\n      final String x = STR_VALS.get(id % STR_VALS.size());\n      final String val = VALUES.get(id % VALUES.size());\n      assertEquals(0, (new UpdateRequest().add(sdoc(\"id\", \"\" + id,\n                                                    \"x_s\", x,\n                                                    FIELD, val))\n                       ).process(cluster.getSolrClient()).getStatus());\n      \n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n  }\n","date":"2020-07-08 23:57:24","endLine":93,"groupId":"103207","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c5/4c7f12f5d4e202c109f4094195f7f91aca569b.src","preCode":"  public static void setupCluster() throws Exception {\n    CurrencyFieldTypeTest.assumeCurrencySupport(\"USD\", \"EUR\", \"MXN\", \"GBP\", \"JPY\", \"NOK\");\n    FIELD = usually() ? \"amount_CFT\" : \"amount\";\n    \n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int maxShardsPerNode = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setMaxShardsPerNode(maxShardsPerNode)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n    \n    for (int id = 0; id < NUM_DOCS; id++) { \r\n      \r\n      \r\n      final String x = STR_VALS.get(id % STR_VALS.size());\n      final String val = VALUES.get(id % VALUES.size());\n      assertEquals(0, (new UpdateRequest().add(sdoc(\"id\", \"\" + id,\n                                                    \"x_s\", x,\n                                                    FIELD, val))\n                       ).process(cluster.getSolrClient()).getStatus());\n      \n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"cf742f45963f4747e7041e8131248bc3a2b44864","commitMessage":"@@@SOLR-12847: Remove support for maxShardsPerNode.\n","date":"2020-07-08 23:57:24","modifiedFileCount":"144","status":"M","submitter":"Andrzej Bialecki"}]
