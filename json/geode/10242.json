[{"authorTime":"2018-09-21 01:36:27","codes":[{"authorDate":"2018-09-21 01:36:27","commitOrder":3,"curCode":"  public void testCloseAllCqsAndDrainEventsNoInterestRegistered() {\n    String greaterThan5Query = \"select * from /\" + regionName + \" p where p.ID > 5\";\n    String allQuery = \"select * from /\" + regionName + \" p where p.ID > -1\";\n    String lessThan5Query = \"select * from /\" + regionName + \" p where p.ID < 5\";\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    durableClientId = getName() + \"_client\";\n\n    startDurableClient(durableClientVM, durableClientId, server1Port, regionName);\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", greaterThan5Query, true);\n    createCq(durableClientVM, \"All\", allQuery, true);\n    createCq(durableClientVM, \"LessThan5\", lessThan5Query, true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    startClient(publisherClientVM, server1Port, regionName);\n\n    \r\n    publishEntries(regionName, 10);\n\n    closeCQsforDurableClient(durableClientId);\n\n    \r\n    startDurableClient(durableClientVM, durableClientId, server1Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", \"select * from /\" + regionName + \" p where p.ID > 5\",\n        true);\n    createCq(durableClientVM, \"All\", \"select * from /\" + regionName + \" p where p.ID > -1\", true);\n    createCq(durableClientVM, \"LessThan5\", \"select * from /\" + regionName + \" p where p.ID < 5\",\n        true);\n    \r\n    sendClientReady(durableClientVM);\n\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 0 ,\n         5);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 0 ,\n         5);\n    checkCqListenerEvents(durableClientVM, \"All\", 0 ,\n         5);\n    \r\n    \r\n    \r\n    \r\n    flushEntries(server1VM, durableClientVM, regionName);\n\n    \r\n    \r\n    this.checkHAQueueSize(server1VM, durableClientId, 0, 1);\n\n    \r\n    publishEntries(regionName, 10);\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 4 ,\n         10);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 5 ,\n         10);\n    checkCqListenerEvents(durableClientVM, \"All\", 10 ,\n         10);\n\n    \r\n    \r\n    \r\n    \r\n    flushEntries(server1VM, durableClientVM, regionName);\n\n    \r\n    \r\n    this.checkHAQueueSize(server1VM, durableClientId, 0, 1);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-09-21 01:36:27","endLine":310,"groupId":"16674","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloseAllCqsAndDrainEventsNoInterestRegistered","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ff/6e620015e19002bc67e4e4113b1fa23fb62b67.src","preCode":"  public void testCloseAllCqsAndDrainEventsNoInterestRegistered() {\n    String greaterThan5Query = \"select * from /\" + regionName + \" p where p.ID > 5\";\n    String allQuery = \"select * from /\" + regionName + \" p where p.ID > -1\";\n    String lessThan5Query = \"select * from /\" + regionName + \" p where p.ID < 5\";\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    durableClientId = getName() + \"_client\";\n\n    startDurableClient(durableClientVM, durableClientId, server1Port, regionName);\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", greaterThan5Query, true);\n    createCq(durableClientVM, \"All\", allQuery, true);\n    createCq(durableClientVM, \"LessThan5\", lessThan5Query, true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    startClient(publisherClientVM, server1Port, regionName);\n\n    \r\n    publishEntries(regionName, 10);\n\n    closeCQsforDurableClient(durableClientId);\n\n    \r\n    startDurableClient(durableClientVM, durableClientId, server1Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", \"select * from /\" + regionName + \" p where p.ID > 5\",\n        true);\n    createCq(durableClientVM, \"All\", \"select * from /\" + regionName + \" p where p.ID > -1\", true);\n    createCq(durableClientVM, \"LessThan5\", \"select * from /\" + regionName + \" p where p.ID < 5\",\n        true);\n    \r\n    sendClientReady(durableClientVM);\n\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 0 ,\n         5);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 0 ,\n         5);\n    checkCqListenerEvents(durableClientVM, \"All\", 0 ,\n         5);\n    \r\n    \r\n    \r\n    \r\n    flushEntries(server1VM, durableClientVM, regionName);\n\n    \r\n    \r\n    this.checkHAQueueSize(server1VM, durableClientId, 0, 1);\n\n    \r\n    publishEntries(regionName, 10);\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 4 ,\n         10);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 5 ,\n         10);\n    checkCqListenerEvents(durableClientVM, \"All\", 10 ,\n         10);\n\n    \r\n    \r\n    \r\n    \r\n    flushEntries(server1VM, durableClientVM, regionName);\n\n    \r\n    \r\n    this.checkHAQueueSize(server1VM, durableClientId, 0, 1);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientCQDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"B"},{"authorDate":"2018-09-21 01:36:27","commitOrder":3,"curCode":"  public void testDurableClientConnectServerStopStart() {\n    \r\n    \r\n    Integer[] ports = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, Boolean.TRUE));\n    final int serverPort = ports[0];\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        serverPort));\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 10);\n\n    \r\n    checkListenerEvents(10, 1, -1, this.durableClientVM);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-09-21 01:36:27","endLine":427,"groupId":"37226","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDurableClientConnectServerStopStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/90/d4f7a0115cfe9d6fec81bc13dd96550cd75742.src","preCode":"  public void testDurableClientConnectServerStopStart() {\n    \r\n    \r\n    Integer[] ports = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, Boolean.TRUE));\n    final int serverPort = ports[0];\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        serverPort));\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 10);\n\n    \r\n    checkListenerEvents(10, 1, -1, this.durableClientVM);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"MB"}],"commitId":"4da7c59049561588f87bd571213fed6ffede1de5","commitMessage":"@@@GEODE-5428: Refactored DurableClientTests due to massive duplication\n\nThe DurableClientSimpleDUnitTest class was huge and doing three different\ntypes of testing.  so the code was partitioned into classes representing\nthe types.\n\nFurther.  there were some bugs that needed to be addressed in the code.\n\nCo-Authored-By: Galen O'Sullivan <gosullivan@pivotal.io>","date":"2018-09-21 01:36:27","modifiedFileCount":"7","status":"M","submitter":"mhansonp"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2018-09-21 01:36:27","commitOrder":4,"curCode":"  public void testCloseAllCqsAndDrainEventsNoInterestRegistered() {\n    String greaterThan5Query = \"select * from /\" + regionName + \" p where p.ID > 5\";\n    String allQuery = \"select * from /\" + regionName + \" p where p.ID > -1\";\n    String lessThan5Query = \"select * from /\" + regionName + \" p where p.ID < 5\";\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    durableClientId = getName() + \"_client\";\n\n    startDurableClient(durableClientVM, durableClientId, server1Port, regionName);\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", greaterThan5Query, true);\n    createCq(durableClientVM, \"All\", allQuery, true);\n    createCq(durableClientVM, \"LessThan5\", lessThan5Query, true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    startClient(publisherClientVM, server1Port, regionName);\n\n    \r\n    publishEntries(regionName, 10);\n\n    closeCQsforDurableClient(durableClientId);\n\n    \r\n    startDurableClient(durableClientVM, durableClientId, server1Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", \"select * from /\" + regionName + \" p where p.ID > 5\",\n        true);\n    createCq(durableClientVM, \"All\", \"select * from /\" + regionName + \" p where p.ID > -1\", true);\n    createCq(durableClientVM, \"LessThan5\", \"select * from /\" + regionName + \" p where p.ID < 5\",\n        true);\n    \r\n    sendClientReady(durableClientVM);\n\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 0 ,\n         5);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 0 ,\n         5);\n    checkCqListenerEvents(durableClientVM, \"All\", 0 ,\n         5);\n    \r\n    \r\n    \r\n    \r\n    flushEntries(server1VM, durableClientVM, regionName);\n\n    \r\n    \r\n    this.checkHAQueueSize(server1VM, durableClientId, 0, 1);\n\n    \r\n    publishEntries(regionName, 10);\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 4 ,\n         10);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 5 ,\n         10);\n    checkCqListenerEvents(durableClientVM, \"All\", 10 ,\n         10);\n\n    \r\n    \r\n    \r\n    \r\n    flushEntries(server1VM, durableClientVM, regionName);\n\n    \r\n    \r\n    this.checkHAQueueSize(server1VM, durableClientId, 0, 1);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-09-21 01:36:27","endLine":310,"groupId":"16674","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloseAllCqsAndDrainEventsNoInterestRegistered","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ff/6e620015e19002bc67e4e4113b1fa23fb62b67.src","preCode":"  public void testCloseAllCqsAndDrainEventsNoInterestRegistered() {\n    String greaterThan5Query = \"select * from /\" + regionName + \" p where p.ID > 5\";\n    String allQuery = \"select * from /\" + regionName + \" p where p.ID > -1\";\n    String lessThan5Query = \"select * from /\" + regionName + \" p where p.ID < 5\";\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    durableClientId = getName() + \"_client\";\n\n    startDurableClient(durableClientVM, durableClientId, server1Port, regionName);\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", greaterThan5Query, true);\n    createCq(durableClientVM, \"All\", allQuery, true);\n    createCq(durableClientVM, \"LessThan5\", lessThan5Query, true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    startClient(publisherClientVM, server1Port, regionName);\n\n    \r\n    publishEntries(regionName, 10);\n\n    closeCQsforDurableClient(durableClientId);\n\n    \r\n    startDurableClient(durableClientVM, durableClientId, server1Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", \"select * from /\" + regionName + \" p where p.ID > 5\",\n        true);\n    createCq(durableClientVM, \"All\", \"select * from /\" + regionName + \" p where p.ID > -1\", true);\n    createCq(durableClientVM, \"LessThan5\", \"select * from /\" + regionName + \" p where p.ID < 5\",\n        true);\n    \r\n    sendClientReady(durableClientVM);\n\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 0 ,\n         5);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 0 ,\n         5);\n    checkCqListenerEvents(durableClientVM, \"All\", 0 ,\n         5);\n    \r\n    \r\n    \r\n    \r\n    flushEntries(server1VM, durableClientVM, regionName);\n\n    \r\n    \r\n    this.checkHAQueueSize(server1VM, durableClientId, 0, 1);\n\n    \r\n    publishEntries(regionName, 10);\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 4 ,\n         10);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 5 ,\n         10);\n    checkCqListenerEvents(durableClientVM, \"All\", 10 ,\n         10);\n\n    \r\n    \r\n    \r\n    \r\n    flushEntries(server1VM, durableClientVM, regionName);\n\n    \r\n    \r\n    this.checkHAQueueSize(server1VM, durableClientId, 0, 1);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientCQDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"},{"authorDate":"2019-01-12 07:53:54","commitOrder":4,"curCode":"  public void testDurableClientConnectServerStopStart() {\n    \r\n    \r\n    Integer[] ports = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, Boolean.TRUE));\n    final int serverPort = ports[0];\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        serverPort));\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 10);\n\n    \r\n    checkListenerEvents(10, 1, -1, this.durableClientVM);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2019-01-12 07:53:54","endLine":419,"groupId":"28569","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDurableClientConnectServerStopStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/17/2c4807de920a3912a9977a89929d36b4e1c7b4.src","preCode":"  public void testDurableClientConnectServerStopStart() {\n    \r\n    \r\n    Integer[] ports = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, Boolean.TRUE));\n    final int serverPort = ports[0];\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        serverPort));\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 10);\n\n    \r\n    checkListenerEvents(10, 1, -1, this.durableClientVM);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":5,"curCode":"  public void testCloseAllCqsAndDrainEventsNoInterestRegistered() {\n    String greaterThan5Query = \"select * from \" + SEPARATOR + regionName + \" p where p.ID > 5\";\n    String allQuery = \"select * from \" + SEPARATOR + regionName + \" p where p.ID > -1\";\n    String lessThan5Query = \"select * from \" + SEPARATOR + regionName + \" p where p.ID < 5\";\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    durableClientId = getName() + \"_client\";\n\n    startDurableClient(durableClientVM, durableClientId, server1Port, regionName);\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", greaterThan5Query, true);\n    createCq(durableClientVM, \"All\", allQuery, true);\n    createCq(durableClientVM, \"LessThan5\", lessThan5Query, true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    startClient(publisherClientVM, server1Port, regionName);\n\n    \r\n    publishEntries(regionName, 10);\n\n    closeCQsforDurableClient(durableClientId);\n\n    \r\n    startDurableClient(durableClientVM, durableClientId, server1Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\",\n        \"select * from \" + SEPARATOR + regionName + \" p where p.ID > 5\",\n        true);\n    createCq(durableClientVM, \"All\",\n        \"select * from \" + SEPARATOR + regionName + \" p where p.ID > -1\", true);\n    createCq(durableClientVM, \"LessThan5\",\n        \"select * from \" + SEPARATOR + regionName + \" p where p.ID < 5\",\n        true);\n    \r\n    sendClientReady(durableClientVM);\n\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 0 ,\n         5);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 0 ,\n         5);\n    checkCqListenerEvents(durableClientVM, \"All\", 0 ,\n         5);\n    \r\n    \r\n    \r\n    \r\n    flushEntries(server1VM, durableClientVM, regionName);\n\n    \r\n    \r\n    this.checkHAQueueSize(server1VM, durableClientId, 0, 1);\n\n    \r\n    publishEntries(regionName, 10);\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 4 ,\n         10);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 5 ,\n         10);\n    checkCqListenerEvents(durableClientVM, \"All\", 10 ,\n         10);\n\n    \r\n    \r\n    \r\n    \r\n    flushEntries(server1VM, durableClientVM, regionName);\n\n    \r\n    \r\n    this.checkHAQueueSize(server1VM, durableClientId, 0, 1);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2020-05-29 00:37:39","endLine":318,"groupId":"10242","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloseAllCqsAndDrainEventsNoInterestRegistered","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/9a/35897cd51e1bbafded8b4e35af5be07d01a0bf.src","preCode":"  public void testCloseAllCqsAndDrainEventsNoInterestRegistered() {\n    String greaterThan5Query = \"select * from /\" + regionName + \" p where p.ID > 5\";\n    String allQuery = \"select * from /\" + regionName + \" p where p.ID > -1\";\n    String lessThan5Query = \"select * from /\" + regionName + \" p where p.ID < 5\";\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    durableClientId = getName() + \"_client\";\n\n    startDurableClient(durableClientVM, durableClientId, server1Port, regionName);\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", greaterThan5Query, true);\n    createCq(durableClientVM, \"All\", allQuery, true);\n    createCq(durableClientVM, \"LessThan5\", lessThan5Query, true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    startClient(publisherClientVM, server1Port, regionName);\n\n    \r\n    publishEntries(regionName, 10);\n\n    closeCQsforDurableClient(durableClientId);\n\n    \r\n    startDurableClient(durableClientVM, durableClientId, server1Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", \"select * from /\" + regionName + \" p where p.ID > 5\",\n        true);\n    createCq(durableClientVM, \"All\", \"select * from /\" + regionName + \" p where p.ID > -1\", true);\n    createCq(durableClientVM, \"LessThan5\", \"select * from /\" + regionName + \" p where p.ID < 5\",\n        true);\n    \r\n    sendClientReady(durableClientVM);\n\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 0 ,\n         5);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 0 ,\n         5);\n    checkCqListenerEvents(durableClientVM, \"All\", 0 ,\n         5);\n    \r\n    \r\n    \r\n    \r\n    flushEntries(server1VM, durableClientVM, regionName);\n\n    \r\n    \r\n    this.checkHAQueueSize(server1VM, durableClientId, 0, 1);\n\n    \r\n    publishEntries(regionName, 10);\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 4 ,\n         10);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 5 ,\n         10);\n    checkCqListenerEvents(durableClientVM, \"All\", 10 ,\n         10);\n\n    \r\n    \r\n    \r\n    \r\n    flushEntries(server1VM, durableClientVM, regionName);\n\n    \r\n    \r\n    this.checkHAQueueSize(server1VM, durableClientId, 0, 1);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientCQDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":5,"curCode":"  public void testDurableClientConnectServerStopStart() {\n    \r\n    \r\n    Integer[] ports = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, Boolean.TRUE));\n    final int serverPort = ports[0];\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        serverPort));\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 10);\n\n    \r\n    checkListenerEvents(10, 1, -1, this.durableClientVM);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2019-01-12 07:53:54","endLine":419,"groupId":"10242","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDurableClientConnectServerStopStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/17/2c4807de920a3912a9977a89929d36b4e1c7b4.src","preCode":"  public void testDurableClientConnectServerStopStart() {\n    \r\n    \r\n    Integer[] ports = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, Boolean.TRUE));\n    final int serverPort = ports[0];\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        serverPort));\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 10);\n\n    \r\n    checkListenerEvents(10, 1, -1, this.durableClientVM);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"N"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
