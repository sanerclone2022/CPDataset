[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public static void createClientCache(String hostName, Integer port1, Integer port2)\n      throws Exception {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    new HABugInPutDUnitTest().createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(Region.SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n    region.registerInterest(KEY1);\n  }\n","date":"2018-07-18 03:54:18","endLine":150,"groupId":"25600","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createClientCache","params":"(StringhostName@Integerport1@Integerport2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6f/b2770d5e4aaeb4f4162891c80bb05c59fffa64.src","preCode":"  public static void createClientCache(String hostName, Integer port1, Integer port2)\n      throws Exception {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    new HABugInPutDUnitTest().createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(Region.SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n    region.registerInterest(KEY1);\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/internal/cache/ha/HABugInPutDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  private void createClientCache(String hostName, Integer port1, Integer port2,\n      Boolean isListenerPresent) throws CqException, CqExistsException, RegionNotFoundException {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    if (isListenerPresent.booleanValue() == true) {\n      CacheListener clientListener = new HAClientListener();\n      factory.setCacheListener(clientListener);\n    }\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(Region.SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n\n    {\n      LocalRegion lr = (LocalRegion) region;\n      final PoolImpl pool = (PoolImpl) (lr.getServerProxy().getPool());\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return pool.getPrimary() != null;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      waitForCriterion(ev, 30 * 1000, 200, true);\n      ev = new WaitCriterion() {\n        public boolean done() {\n          return pool.getRedundants().size() >= 1;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      waitForCriterion(ev, 30 * 1000, 200, true);\n\n      assertNotNull(pool.getPrimary());\n      assertTrue(\"backups=\" + pool.getRedundants() + \" expected=\" + 1,\n          pool.getRedundants().size() >= 1);\n      assertEquals(PORT1, pool.getPrimaryPort());\n    }\n\n    region.registerInterest(KEY1);\n\n    \r\n    createCQ();\n  }\n","date":"2018-07-18 03:54:18","endLine":375,"groupId":"10724","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createClientCache","params":"(StringhostName@Integerport1@Integerport2@BooleanisListenerPresent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d8/66ad5605357082f38608af47d309052bce7e54.src","preCode":"  private void createClientCache(String hostName, Integer port1, Integer port2,\n      Boolean isListenerPresent) throws CqException, CqExistsException, RegionNotFoundException {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    if (isListenerPresent.booleanValue() == true) {\n      CacheListener clientListener = new HAClientListener();\n      factory.setCacheListener(clientListener);\n    }\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(Region.SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n\n    {\n      LocalRegion lr = (LocalRegion) region;\n      final PoolImpl pool = (PoolImpl) (lr.getServerProxy().getPool());\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return pool.getPrimary() != null;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      waitForCriterion(ev, 30 * 1000, 200, true);\n      ev = new WaitCriterion() {\n        public boolean done() {\n          return pool.getRedundants().size() >= 1;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      waitForCriterion(ev, 30 * 1000, 200, true);\n\n      assertNotNull(pool.getPrimary());\n      assertTrue(\"backups=\" + pool.getRedundants() + \" expected=\" + 1,\n          pool.getRedundants().size() >= 1);\n      assertEquals(PORT1, pool.getPrimaryPort());\n    }\n\n    region.registerInterest(KEY1);\n\n    \r\n    createCQ();\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/ha/HADispatcherDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-10-06 04:56:13","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public static void createClientCache(String hostName, Integer port1, Integer port2)\n      throws Exception {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    new HABugInPutDUnitTest().createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(Region.SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n    region.registerInterest(KEY1);\n  }\n","date":"2018-07-18 03:54:18","endLine":150,"groupId":"25600","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createClientCache","params":"(StringhostName@Integerport1@Integerport2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6f/b2770d5e4aaeb4f4162891c80bb05c59fffa64.src","preCode":"  public static void createClientCache(String hostName, Integer port1, Integer port2)\n      throws Exception {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    new HABugInPutDUnitTest().createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(Region.SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n    region.registerInterest(KEY1);\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/internal/cache/ha/HABugInPutDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"},{"authorDate":"2018-10-06 04:56:13","commitOrder":2,"curCode":"  private void createClientCache(String hostName, Integer port1, Integer port2,\n      Boolean isListenerPresent) throws CqException, CqExistsException, RegionNotFoundException {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    if (isListenerPresent.booleanValue() == true) {\n      CacheListener clientListener = new HAClientListener();\n      factory.setCacheListener(clientListener);\n    }\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(Region.SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n\n    {\n      LocalRegion lr = (LocalRegion) region;\n      final PoolImpl pool = (PoolImpl) (lr.getServerProxy().getPool());\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return pool.getPrimary() != null;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n      ev = new WaitCriterion() {\n        public boolean done() {\n          return pool.getRedundants().size() >= 1;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n\n      assertNotNull(pool.getPrimary());\n      assertTrue(\"backups=\" + pool.getRedundants() + \" expected=\" + 1,\n          pool.getRedundants().size() >= 1);\n      assertEquals(PORT1, pool.getPrimaryPort());\n    }\n\n    region.registerInterest(KEY1);\n\n    \r\n    createCQ();\n  }\n","date":"2018-10-19 08:01:02","endLine":375,"groupId":"48301","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createClientCache","params":"(StringhostName@Integerport1@Integerport2@BooleanisListenerPresent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a5/963afd6c3995d64413ac38d3365b535717fd8b.src","preCode":"  private void createClientCache(String hostName, Integer port1, Integer port2,\n      Boolean isListenerPresent) throws CqException, CqExistsException, RegionNotFoundException {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    if (isListenerPresent.booleanValue() == true) {\n      CacheListener clientListener = new HAClientListener();\n      factory.setCacheListener(clientListener);\n    }\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(Region.SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n\n    {\n      LocalRegion lr = (LocalRegion) region;\n      final PoolImpl pool = (PoolImpl) (lr.getServerProxy().getPool());\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return pool.getPrimary() != null;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      waitForCriterion(ev, 30 * 1000, 200, true);\n      ev = new WaitCriterion() {\n        public boolean done() {\n          return pool.getRedundants().size() >= 1;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      waitForCriterion(ev, 30 * 1000, 200, true);\n\n      assertNotNull(pool.getPrimary());\n      assertTrue(\"backups=\" + pool.getRedundants() + \" expected=\" + 1,\n          pool.getRedundants().size() >= 1);\n      assertEquals(PORT1, pool.getPrimaryPort());\n    }\n\n    region.registerInterest(KEY1);\n\n    \r\n    createCQ();\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/ha/HADispatcherDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"}],"commitId":"8fa6ef6205938767d0106810daca1f91ee8bb3a8","commitMessage":"@@@GEODE-5424: Replacing calls to waitForCriterion with Awaitility\n\nReplacing all of the calls to waitForCriterion with awaitility instead. \nto use a standard timeout.\n","date":"2018-10-19 08:01:02","modifiedFileCount":"132","status":"M","submitter":"Dan Smith"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":3,"curCode":"  public static void createClientCache(String hostName, Integer port1, Integer port2)\n      throws Exception {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    new HABugInPutDUnitTest().createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(Region.SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n    region.registerInterest(KEY1);\n  }\n","date":"2018-07-18 03:54:18","endLine":150,"groupId":"25600","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createClientCache","params":"(StringhostName@Integerport1@Integerport2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6f/b2770d5e4aaeb4f4162891c80bb05c59fffa64.src","preCode":"  public static void createClientCache(String hostName, Integer port1, Integer port2)\n      throws Exception {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    new HABugInPutDUnitTest().createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(Region.SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n    region.registerInterest(KEY1);\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/internal/cache/ha/HABugInPutDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"},{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  private void createClientCache(String hostName, Integer port1, Integer port2,\n      Boolean isListenerPresent) throws CqException, CqExistsException, RegionNotFoundException {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    if (isListenerPresent.booleanValue() == true) {\n      CacheListener clientListener = new HAClientListener();\n      factory.setCacheListener(clientListener);\n    }\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(Region.SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n\n    {\n      LocalRegion lr = (LocalRegion) region;\n      final PoolImpl pool = (PoolImpl) (lr.getServerProxy().getPool());\n      WaitCriterion ev = new WaitCriterion() {\n        @Override\n        public boolean done() {\n          return pool.getPrimary() != null;\n        }\n\n        @Override\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n      ev = new WaitCriterion() {\n        @Override\n        public boolean done() {\n          return pool.getRedundants().size() >= 1;\n        }\n\n        @Override\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n\n      assertNotNull(pool.getPrimary());\n      assertTrue(\"backups=\" + pool.getRedundants() + \" expected=\" + 1,\n          pool.getRedundants().size() >= 1);\n      assertEquals(PORT1, pool.getPrimaryPort());\n    }\n\n    region.registerInterest(KEY1);\n\n    \r\n    createCQ();\n  }\n","date":"2019-01-12 07:53:54","endLine":379,"groupId":"48301","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createClientCache","params":"(StringhostName@Integerport1@Integerport2@BooleanisListenerPresent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/43/7d27612ea9d0c71ffb7be6a38280fce514413f.src","preCode":"  private void createClientCache(String hostName, Integer port1, Integer port2,\n      Boolean isListenerPresent) throws CqException, CqExistsException, RegionNotFoundException {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    if (isListenerPresent.booleanValue() == true) {\n      CacheListener clientListener = new HAClientListener();\n      factory.setCacheListener(clientListener);\n    }\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(Region.SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n\n    {\n      LocalRegion lr = (LocalRegion) region;\n      final PoolImpl pool = (PoolImpl) (lr.getServerProxy().getPool());\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return pool.getPrimary() != null;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n      ev = new WaitCriterion() {\n        public boolean done() {\n          return pool.getRedundants().size() >= 1;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n\n      assertNotNull(pool.getPrimary());\n      assertTrue(\"backups=\" + pool.getRedundants() + \" expected=\" + 1,\n          pool.getRedundants().size() >= 1);\n      assertEquals(PORT1, pool.getPrimaryPort());\n    }\n\n    region.registerInterest(KEY1);\n\n    \r\n    createCQ();\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/ha/HADispatcherDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":4,"curCode":"  public static void createClientCache(String hostName, Integer port1, Integer port2)\n      throws Exception {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    new HABugInPutDUnitTest().createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n    region.registerInterest(KEY1);\n  }\n","date":"2020-05-29 00:37:39","endLine":151,"groupId":"10256","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createClientCache","params":"(StringhostName@Integerport1@Integerport2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6e/1cd82f4839c557efd3a24ba645d14e5b035379.src","preCode":"  public static void createClientCache(String hostName, Integer port1, Integer port2)\n      throws Exception {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    new HABugInPutDUnitTest().createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(Region.SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n    region.registerInterest(KEY1);\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/internal/cache/ha/HABugInPutDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":4,"curCode":"  private void createClientCache(String hostName, Integer port1, Integer port2,\n      Boolean isListenerPresent) throws CqException, CqExistsException, RegionNotFoundException {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    if (isListenerPresent.booleanValue() == true) {\n      CacheListener clientListener = new HAClientListener();\n      factory.setCacheListener(clientListener);\n    }\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n\n    {\n      LocalRegion lr = (LocalRegion) region;\n      final PoolImpl pool = (PoolImpl) (lr.getServerProxy().getPool());\n      WaitCriterion ev = new WaitCriterion() {\n        @Override\n        public boolean done() {\n          return pool.getPrimary() != null;\n        }\n\n        @Override\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n      ev = new WaitCriterion() {\n        @Override\n        public boolean done() {\n          return pool.getRedundants().size() >= 1;\n        }\n\n        @Override\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n\n      assertNotNull(pool.getPrimary());\n      assertTrue(\"backups=\" + pool.getRedundants() + \" expected=\" + 1,\n          pool.getRedundants().size() >= 1);\n      assertEquals(PORT1, pool.getPrimaryPort());\n    }\n\n    region.registerInterest(KEY1);\n\n    \r\n    createCQ();\n  }\n","date":"2020-05-29 00:37:39","endLine":380,"groupId":"10256","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createClientCache","params":"(StringhostName@Integerport1@Integerport2@BooleanisListenerPresent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/00/321848f751ccf0540df80ac8f808077c45465a.src","preCode":"  private void createClientCache(String hostName, Integer port1, Integer port2,\n      Boolean isListenerPresent) throws CqException, CqExistsException, RegionNotFoundException {\n    int PORT1 = port1.intValue();\n    int PORT2 = port2.intValue();\n    Properties props = new Properties();\n    props.setProperty(MCAST_PORT, \"0\");\n    props.setProperty(LOCATORS, \"\");\n    createCache(props);\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.DISTRIBUTED_ACK);\n    ClientServerTestCase.configureConnectionPool(factory, hostName, new int[] {PORT1, PORT2}, true,\n        -1, 2, null);\n    if (isListenerPresent.booleanValue() == true) {\n      CacheListener clientListener = new HAClientListener();\n      factory.setCacheListener(clientListener);\n    }\n    RegionAttributes attrs = factory.create();\n    cache.createRegion(REGION_NAME, attrs);\n    Region region = cache.getRegion(Region.SEPARATOR + REGION_NAME);\n    assertNotNull(region);\n\n    {\n      LocalRegion lr = (LocalRegion) region;\n      final PoolImpl pool = (PoolImpl) (lr.getServerProxy().getPool());\n      WaitCriterion ev = new WaitCriterion() {\n        @Override\n        public boolean done() {\n          return pool.getPrimary() != null;\n        }\n\n        @Override\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n      ev = new WaitCriterion() {\n        @Override\n        public boolean done() {\n          return pool.getRedundants().size() >= 1;\n        }\n\n        @Override\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n\n      assertNotNull(pool.getPrimary());\n      assertTrue(\"backups=\" + pool.getRedundants() + \" expected=\" + 1,\n          pool.getRedundants().size() >= 1);\n      assertEquals(PORT1, pool.getPrimaryPort());\n    }\n\n    region.registerInterest(KEY1);\n\n    \r\n    createCQ();\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/ha/HADispatcherDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
