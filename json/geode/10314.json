[{"authorTime":"2018-09-21 01:36:27","codes":[{"authorDate":"2018-09-21 01:36:27","commitOrder":1,"curCode":"  public void testHAQueuedCqStatForGII() {\n    String greaterThan5Query = \"select * from /\" + regionName + \" p where p.ID > 5\";\n    String allQuery = \"select * from /\" + regionName + \" p where p.ID > -1\";\n    String lessThan5Query = \"select * from /\" + regionName + \" p where p.ID < 5\";\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", greaterThan5Query, true);\n    createCq(durableClientVM, \"All\", allQuery, true);\n    createCq(durableClientVM, \"LessThan5\", lessThan5Query, true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server2VM);\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    checkNumDurableCqs(server1VM, durableClientId, 3);\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n\n    \r\n    closeCache(server2VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    startClient(publisherClientVM, server1Port, regionName);\n\n    \r\n    publishEntries(regionName, 10);\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        server2Port));\n\n    \r\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 10);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 4);\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 5);\n\n    closeCache(server1VM);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", \"select * from /\" + regionName + \" p where p.ID > 5\",\n        true);\n    createCq(durableClientVM, \"All\", \"select * from /\" + regionName + \" p where p.ID > -1\", true);\n    createCq(durableClientVM, \"LessThan5\", \"select * from /\" + regionName + \" p where p.ID < 5\",\n        true);\n    \r\n    sendClientReady(durableClientVM);\n\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 4 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 5 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"All\", 10 ,\n         15);\n\n    \r\n    flushEntries(server2VM, durableClientVM, regionName);\n\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 0);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-09-21 01:36:27","endLine":571,"groupId":"41589","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHAQueuedCqStatForGII","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/26/0ec473c6e36d23566caf404d03dfade4db2656.src","preCode":"  public void testHAQueuedCqStatForGII() {\n    String greaterThan5Query = \"select * from /\" + regionName + \" p where p.ID > 5\";\n    String allQuery = \"select * from /\" + regionName + \" p where p.ID > -1\";\n    String lessThan5Query = \"select * from /\" + regionName + \" p where p.ID < 5\";\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", greaterThan5Query, true);\n    createCq(durableClientVM, \"All\", allQuery, true);\n    createCq(durableClientVM, \"LessThan5\", lessThan5Query, true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server2VM);\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    checkNumDurableCqs(server1VM, durableClientId, 3);\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n\n    \r\n    closeCache(server2VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    startClient(publisherClientVM, server1Port, regionName);\n\n    \r\n    publishEntries(regionName, 10);\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        server2Port));\n\n    \r\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 10);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 4);\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 5);\n\n    closeCache(server1VM);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", \"select * from /\" + regionName + \" p where p.ID > 5\",\n        true);\n    createCq(durableClientVM, \"All\", \"select * from /\" + regionName + \" p where p.ID > -1\", true);\n    createCq(durableClientVM, \"LessThan5\", \"select * from /\" + regionName + \" p where p.ID < 5\",\n        true);\n    \r\n    sendClientReady(durableClientVM);\n\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 4 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 5 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"All\", 10 ,\n         15);\n\n    \r\n    flushEntries(server2VM, durableClientVM, regionName);\n\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 0);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientHAQueuedDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":478,"status":"B"},{"authorDate":"2018-09-21 01:36:27","commitOrder":1,"curCode":"  public void testHAQueuedCqStatForFailover() {\n    String greaterThan5Query = \"select * from /\" + regionName + \" p where p.ID > 5\";\n    String allQuery = \"select * from /\" + regionName + \" p where p.ID > -1\";\n    String lessThan5Query = \"select * from /\" + regionName + \" p where p.ID < 5\";\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", greaterThan5Query, true);\n    createCq(durableClientVM, \"All\", allQuery, true);\n    createCq(durableClientVM, \"LessThan5\", lessThan5Query, true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server2VM);\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    checkNumDurableCqs(server1VM, durableClientId, 3);\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    startClient(publisherClientVM, server1Port, regionName);\n\n    \r\n    publishEntries(regionName, 10);\n\n    closeCache(server1VM);\n\n    \r\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 10);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 4);\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 5);\n\n    \r\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", \"select * from /\" + regionName + \" p where p.ID > 5\",\n        true);\n    createCq(durableClientVM, \"All\", \"select * from /\" + regionName + \" p where p.ID > -1\", true);\n    createCq(durableClientVM, \"LessThan5\", \"select * from /\" + regionName + \" p where p.ID < 5\",\n        true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 4 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 5 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"All\", 10 ,\n         15);\n\n    \r\n    flushEntries(server2VM, durableClientVM, regionName);\n\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 0);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-09-21 01:36:27","endLine":871,"groupId":"41589","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHAQueuedCqStatForFailover","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/26/0ec473c6e36d23566caf404d03dfade4db2656.src","preCode":"  public void testHAQueuedCqStatForFailover() {\n    String greaterThan5Query = \"select * from /\" + regionName + \" p where p.ID > 5\";\n    String allQuery = \"select * from /\" + regionName + \" p where p.ID > -1\";\n    String lessThan5Query = \"select * from /\" + regionName + \" p where p.ID < 5\";\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", greaterThan5Query, true);\n    createCq(durableClientVM, \"All\", allQuery, true);\n    createCq(durableClientVM, \"LessThan5\", lessThan5Query, true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server2VM);\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    checkNumDurableCqs(server1VM, durableClientId, 3);\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    startClient(publisherClientVM, server1Port, regionName);\n\n    \r\n    publishEntries(regionName, 10);\n\n    closeCache(server1VM);\n\n    \r\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 10);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 4);\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 5);\n\n    \r\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", \"select * from /\" + regionName + \" p where p.ID > 5\",\n        true);\n    createCq(durableClientVM, \"All\", \"select * from /\" + regionName + \" p where p.ID > -1\", true);\n    createCq(durableClientVM, \"LessThan5\", \"select * from /\" + regionName + \" p where p.ID < 5\",\n        true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 4 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 5 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"All\", 10 ,\n         15);\n\n    \r\n    flushEntries(server2VM, durableClientVM, regionName);\n\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 0);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientHAQueuedDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":782,"status":"B"}],"commitId":"4da7c59049561588f87bd571213fed6ffede1de5","commitMessage":"@@@GEODE-5428: Refactored DurableClientTests due to massive duplication\n\nThe DurableClientSimpleDUnitTest class was huge and doing three different\ntypes of testing.  so the code was partitioned into classes representing\nthe types.\n\nFurther.  there were some bugs that needed to be addressed in the code.\n\nCo-Authored-By: Galen O'Sullivan <gosullivan@pivotal.io>","date":"2018-09-21 01:36:27","modifiedFileCount":"7","status":"B","submitter":"mhansonp"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testHAQueuedCqStatForGII() {\n    String greaterThan5Query = \"select * from \" + SEPARATOR + regionName + \" p where p.ID > 5\";\n    String allQuery = \"select * from \" + SEPARATOR + regionName + \" p where p.ID > -1\";\n    String lessThan5Query = \"select * from \" + SEPARATOR + regionName + \" p where p.ID < 5\";\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", greaterThan5Query, true);\n    createCq(durableClientVM, \"All\", allQuery, true);\n    createCq(durableClientVM, \"LessThan5\", lessThan5Query, true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server2VM);\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    checkNumDurableCqs(server1VM, durableClientId, 3);\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n\n    \r\n    closeCache(server2VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    startClient(publisherClientVM, server1Port, regionName);\n\n    \r\n    publishEntries(regionName, 10);\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        server2Port));\n\n    \r\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 10);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 4);\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 5);\n\n    closeCache(server1VM);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\",\n        \"select * from \" + SEPARATOR + regionName + \" p where p.ID > 5\",\n        true);\n    createCq(durableClientVM, \"All\",\n        \"select * from \" + SEPARATOR + regionName + \" p where p.ID > -1\", true);\n    createCq(durableClientVM, \"LessThan5\",\n        \"select * from \" + SEPARATOR + regionName + \" p where p.ID < 5\",\n        true);\n    \r\n    sendClientReady(durableClientVM);\n\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 4 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 5 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"All\", 10 ,\n         15);\n\n    \r\n    flushEntries(server2VM, durableClientVM, regionName);\n\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 0);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2020-05-29 00:37:39","endLine":590,"groupId":"10314","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testHAQueuedCqStatForGII","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/98/3ee8781d9f833b3b5bc1f6482777196cd1de4e.src","preCode":"  public void testHAQueuedCqStatForGII() {\n    String greaterThan5Query = \"select * from /\" + regionName + \" p where p.ID > 5\";\n    String allQuery = \"select * from /\" + regionName + \" p where p.ID > -1\";\n    String lessThan5Query = \"select * from /\" + regionName + \" p where p.ID < 5\";\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", greaterThan5Query, true);\n    createCq(durableClientVM, \"All\", allQuery, true);\n    createCq(durableClientVM, \"LessThan5\", lessThan5Query, true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server2VM);\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    checkNumDurableCqs(server1VM, durableClientId, 3);\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n\n    \r\n    closeCache(server2VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    startClient(publisherClientVM, server1Port, regionName);\n\n    \r\n    publishEntries(regionName, 10);\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        server2Port));\n\n    \r\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 10);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 4);\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 5);\n\n    closeCache(server1VM);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", \"select * from /\" + regionName + \" p where p.ID > 5\",\n        true);\n    createCq(durableClientVM, \"All\", \"select * from /\" + regionName + \" p where p.ID > -1\", true);\n    createCq(durableClientVM, \"LessThan5\", \"select * from /\" + regionName + \" p where p.ID < 5\",\n        true);\n    \r\n    sendClientReady(durableClientVM);\n\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 4 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 5 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"All\", 10 ,\n         15);\n\n    \r\n    flushEntries(server2VM, durableClientVM, regionName);\n\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 0);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientHAQueuedDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":494,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testHAQueuedCqStatForFailover() {\n    String greaterThan5Query = \"select * from \" + SEPARATOR + regionName + \" p where p.ID > 5\";\n    String allQuery = \"select * from \" + SEPARATOR + regionName + \" p where p.ID > -1\";\n    String lessThan5Query = \"select * from \" + SEPARATOR + regionName + \" p where p.ID < 5\";\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", greaterThan5Query, true);\n    createCq(durableClientVM, \"All\", allQuery, true);\n    createCq(durableClientVM, \"LessThan5\", lessThan5Query, true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server2VM);\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    checkNumDurableCqs(server1VM, durableClientId, 3);\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    startClient(publisherClientVM, server1Port, regionName);\n\n    \r\n    publishEntries(regionName, 10);\n\n    closeCache(server1VM);\n\n    \r\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 10);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 4);\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 5);\n\n    \r\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\",\n        \"select * from \" + SEPARATOR + regionName + \" p where p.ID > 5\",\n        true);\n    createCq(durableClientVM, \"All\",\n        \"select * from \" + SEPARATOR + regionName + \" p where p.ID > -1\", true);\n    createCq(durableClientVM, \"LessThan5\",\n        \"select * from \" + SEPARATOR + regionName + \" p where p.ID < 5\",\n        true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 4 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 5 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"All\", 10 ,\n         15);\n\n    \r\n    flushEntries(server2VM, durableClientVM, regionName);\n\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 0);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2020-05-29 00:37:39","endLine":899,"groupId":"10314","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testHAQueuedCqStatForFailover","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/98/3ee8781d9f833b3b5bc1f6482777196cd1de4e.src","preCode":"  public void testHAQueuedCqStatForFailover() {\n    String greaterThan5Query = \"select * from /\" + regionName + \" p where p.ID > 5\";\n    String allQuery = \"select * from /\" + regionName + \" p where p.ID > -1\";\n    String lessThan5Query = \"select * from /\" + regionName + \" p where p.ID < 5\";\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", greaterThan5Query, true);\n    createCq(durableClientVM, \"All\", allQuery, true);\n    createCq(durableClientVM, \"LessThan5\", lessThan5Query, true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server2VM);\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    checkNumDurableCqs(server1VM, durableClientId, 3);\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    startClient(publisherClientVM, server1Port, regionName);\n\n    \r\n    publishEntries(regionName, 10);\n\n    closeCache(server1VM);\n\n    \r\n    checkNumDurableCqs(server2VM, durableClientId, 3);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 10);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 4);\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 5);\n\n    \r\n    startDurableClient(durableClientVM, durableClientId, server1Port, server2Port, regionName);\n\n    \r\n    createCq(durableClientVM, \"GreaterThan5\", \"select * from /\" + regionName + \" p where p.ID > 5\",\n        true);\n    createCq(durableClientVM, \"All\", \"select * from /\" + regionName + \" p where p.ID > -1\", true);\n    createCq(durableClientVM, \"LessThan5\", \"select * from /\" + regionName + \" p where p.ID < 5\",\n        true);\n    \r\n    sendClientReady(durableClientVM);\n\n    \r\n    checkCqListenerEvents(durableClientVM, \"GreaterThan5\", 4 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"LessThan5\", 5 ,\n         15);\n    checkCqListenerEvents(durableClientVM, \"All\", 10 ,\n         15);\n\n    \r\n    flushEntries(server2VM, durableClientVM, regionName);\n\n    checkCqStatOnServer(server2VM, durableClientId, \"LessThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"GreaterThan5\", 0);\n    checkCqStatOnServer(server2VM, durableClientId, \"All\", 0);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientHAQueuedDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":807,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
