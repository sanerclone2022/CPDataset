[{"authorTime":"2020-03-03 05:09:07","codes":[{"authorDate":"2020-03-03 05:09:07","commitOrder":8,"curCode":"  private void issueStopRequest(final int port)\n      throws ConnectException, UnknownHostException {\n    new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n            .stop(new HostAndPort(InetAddress.getLocalHost().getHostName(), port));\n  }\n","date":"2020-03-03 05:09:07","endLine":166,"groupId":"26359","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"issueStopRequest","params":"(finalintport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/75/34ecd2e81a51e3ee6e2feddb7b4bc2ad690c0b.src","preCode":"  private void issueStopRequest(final int port)\n      throws ConnectException, UnknownHostException {\n    new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n            .stop(new HostAndPort(InetAddress.getLocalHost().getHostName(), port));\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/AutoConnectionSourceImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"B"},{"authorDate":"2020-03-03 05:09:07","commitOrder":8,"curCode":"  public void locatorStop(File directory, String portOption, String addressOption,\n      Properties propertyOption) throws InterruptedException {\n    if (Thread.interrupted())\n      throw new InterruptedException();\n    InetAddress addr = null; \r\n    if (addressOption == null) {\n      addressOption = \"\";\n    }\n    addressOption = addressOption.trim();\n    if (!addressOption.equals(\"\")) {\n      \r\n      try {\n        addr = InetAddress.getByName(addressOption);\n      } catch (UnknownHostException ex) {\n        throw new IllegalArgumentException(\n            String.format(\"-address value was not a known IP address: %s\",\n                ex));\n      }\n    }\n\n    if (propertyOption != null) {\n      Iterator iter = propertyOption.keySet().iterator();\n      while (iter.hasNext()) {\n        String key = (String) iter.next();\n        System.setProperty(key, propertyOption.getProperty(key));\n      }\n    }\n    int port = DistributionLocator.parsePort(portOption);\n    int pid = 0;\n    try {\n      ManagerInfo info = ManagerInfo.loadLocatorInfo(directory);\n      pid = info.getManagerProcessId();\n      if (portOption == null || portOption.trim().length() == 0) {\n        port = info.getManagerPort();\n      }\n      if (addr == null) {\n        addr = info.getManagerAddress();\n      }\n\n      try {\n        new TcpClient(SocketCreatorFactory\n            .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n            InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n            InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n                .stop(new HostAndPort(addr.getHostName(), port));\n      } catch (java.net.ConnectException ce) {\n        System.out.println(\n            \"Unable to connect to Locator process. Possible causes are that an incorrect bind address/port combination was specified to the stop-locator command or the process is unresponsive.\");\n        return;\n      }\n      \r\n      \r\n      if (!quiet) {\n        System.out.println(\n            \"Waiting 5 seconds for locator process to terminate...\");\n      }\n      Thread.sleep(5000);\n    } catch (UnstartedSystemException ex) {\n      \r\n      throw new UnstartedSystemException(\n          String.format(\"Locator in directory %s is not running.\",\n              directory));\n    } catch (NoSystemException ex) {\n      \r\n      cleanupAfterKilledLocator(directory);\n      throw ex;\n    }\n  }\n","date":"2020-03-03 05:09:07","endLine":327,"groupId":"26359","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"locatorStop","params":"(Filedirectory@StringportOption@StringaddressOption@PropertiespropertyOption)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/75/b7821118a72c5d50f37422374db3908bd37280.src","preCode":"  public void locatorStop(File directory, String portOption, String addressOption,\n      Properties propertyOption) throws InterruptedException {\n    if (Thread.interrupted())\n      throw new InterruptedException();\n    InetAddress addr = null; \r\n    if (addressOption == null) {\n      addressOption = \"\";\n    }\n    addressOption = addressOption.trim();\n    if (!addressOption.equals(\"\")) {\n      \r\n      try {\n        addr = InetAddress.getByName(addressOption);\n      } catch (UnknownHostException ex) {\n        throw new IllegalArgumentException(\n            String.format(\"-address value was not a known IP address: %s\",\n                ex));\n      }\n    }\n\n    if (propertyOption != null) {\n      Iterator iter = propertyOption.keySet().iterator();\n      while (iter.hasNext()) {\n        String key = (String) iter.next();\n        System.setProperty(key, propertyOption.getProperty(key));\n      }\n    }\n    int port = DistributionLocator.parsePort(portOption);\n    int pid = 0;\n    try {\n      ManagerInfo info = ManagerInfo.loadLocatorInfo(directory);\n      pid = info.getManagerProcessId();\n      if (portOption == null || portOption.trim().length() == 0) {\n        port = info.getManagerPort();\n      }\n      if (addr == null) {\n        addr = info.getManagerAddress();\n      }\n\n      try {\n        new TcpClient(SocketCreatorFactory\n            .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n            InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n            InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n                .stop(new HostAndPort(addr.getHostName(), port));\n      } catch (java.net.ConnectException ce) {\n        System.out.println(\n            \"Unable to connect to Locator process. Possible causes are that an incorrect bind address/port combination was specified to the stop-locator command or the process is unresponsive.\");\n        return;\n      }\n      \r\n      \r\n      if (!quiet) {\n        System.out.println(\n            \"Waiting 5 seconds for locator process to terminate...\");\n      }\n      Thread.sleep(5000);\n    } catch (UnstartedSystemException ex) {\n      \r\n      throw new UnstartedSystemException(\n          String.format(\"Locator in directory %s is not running.\",\n              directory));\n    } catch (NoSystemException ex) {\n      \r\n      cleanupAfterKilledLocator(directory);\n      throw ex;\n    }\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"MB"}],"commitId":"0af626462642c6352840cd6e81a5265c74045c7f","commitMessage":"@@@GEODE-7808: standardize on use of HostAndPort to form client-side connections (#4743)\n\n* Squashed merge of feature/GEODE-7808\n\nremoved HostAddress\nrenamed LocatorAddress to HostAndPort\nmodified TcpClient methods to take a HostAndPort argument instead of\nInetAddress\nmodified SocketCreator to take a HostAndPort argument instead of\nInetAddress\n\n* GEODE-7808 - standardize on use of HostAndPort for connection formation\n\nThis continues a previous PR that passed and was approved for merge.\nThis commit raises up several methods from SocketCreator into the\nTcpSocketCreator interface.  This is an intermediate commit.  A\nsubsequent commit will refactor TcpSocketCreator to separate the client\nand server methods for creating server-sockets and client connections to\nserver-sockets.\n\n* refactored socket-creators to separate concerns\n\nServerSocketCreator holds methods for non-client comms\nClientSocketCreator holds methods that clients should use for comms\nAdvancedSocketCreator holds methods for people who need to get around\nthe limitations of the other two interfaces\n\n* adding missing interface\n\n* move code out of inner-classes into first-class classes\n\n* renaming interfaces and methods to be less confusing\n","date":"2020-03-03 05:09:07","modifiedFileCount":"78","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-03-04 03:17:00","codes":[{"authorDate":"2020-03-03 05:09:07","commitOrder":9,"curCode":"  private void issueStopRequest(final int port)\n      throws ConnectException, UnknownHostException {\n    new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n            .stop(new HostAndPort(InetAddress.getLocalHost().getHostName(), port));\n  }\n","date":"2020-03-03 05:09:07","endLine":166,"groupId":"26359","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"issueStopRequest","params":"(finalintport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/75/34ecd2e81a51e3ee6e2feddb7b4bc2ad690c0b.src","preCode":"  private void issueStopRequest(final int port)\n      throws ConnectException, UnknownHostException {\n    new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n            .stop(new HostAndPort(InetAddress.getLocalHost().getHostName(), port));\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/AutoConnectionSourceImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"N"},{"authorDate":"2020-03-04 03:17:00","commitOrder":9,"curCode":"  public void locatorStop(File directory, String portOption, String addressOption,\n      Properties propertyOption) throws InterruptedException {\n    if (Thread.interrupted())\n      throw new InterruptedException();\n    InetAddress addr = null; \r\n    if (addressOption == null)\n      addressOption = \"\";\n    if (!addressOption.equals(\"\")) {\n      \r\n      try {\n        addr = InetAddress.getByName(addressOption);\n      } catch (UnknownHostException ex) {\n        throw new IllegalArgumentException(\n            String.format(\"-address value was not a known IP address: %s\",\n                ex));\n      }\n    }\n\n    if (propertyOption != null) {\n      Iterator iter = propertyOption.keySet().iterator();\n      while (iter.hasNext()) {\n        String key = (String) iter.next();\n        System.setProperty(key, propertyOption.getProperty(key));\n      }\n    }\n    int port = DistributionLocator.parsePort(portOption);\n    int pid = 0;\n    try {\n      ManagerInfo info = ManagerInfo.loadLocatorInfo(directory);\n      pid = info.getManagerProcessId();\n      if (portOption == null || portOption.trim().length() == 0) {\n        port = info.getManagerPort();\n      }\n      if (addressOption.trim().length() == 0) {\n        addr = info.getManagerAddress();\n      }\n\n      try {\n        new TcpClient(SocketCreatorFactory\n            .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n            InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n            InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n                .stop(addr, port);\n      } catch (java.net.ConnectException ce) {\n        System.out.println(\n            \"Unable to connect to Locator process. Possible causes are that an incorrect bind address/port combination was specified to the stop-locator command or the process is unresponsive.\");\n        return;\n      }\n      \r\n      \r\n      if (!quiet) {\n        System.out.println(\n            \"Waiting 5 seconds for locator process to terminate...\");\n      }\n      Thread.sleep(5000);\n    } catch (UnstartedSystemException ex) {\n      \r\n      throw new UnstartedSystemException(\n          String.format(\"Locator in directory %s is not running.\",\n              directory));\n    } catch (NoSystemException ex) {\n      \r\n      cleanupAfterKilledLocator(directory);\n      throw ex;\n    }\n  }\n","date":"2020-03-04 03:17:00","endLine":324,"groupId":"41783","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"locatorStop","params":"(Filedirectory@StringportOption@StringaddressOption@PropertiespropertyOption)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/33/a15a5e6c5d4aa631aa0fd8a96582c23ed8690c.src","preCode":"  public void locatorStop(File directory, String portOption, String addressOption,\n      Properties propertyOption) throws InterruptedException {\n    if (Thread.interrupted())\n      throw new InterruptedException();\n    InetAddress addr = null; \r\n    if (addressOption == null) {\n      addressOption = \"\";\n    }\n    addressOption = addressOption.trim();\n    if (!addressOption.equals(\"\")) {\n      \r\n      try {\n        addr = InetAddress.getByName(addressOption);\n      } catch (UnknownHostException ex) {\n        throw new IllegalArgumentException(\n            String.format(\"-address value was not a known IP address: %s\",\n                ex));\n      }\n    }\n\n    if (propertyOption != null) {\n      Iterator iter = propertyOption.keySet().iterator();\n      while (iter.hasNext()) {\n        String key = (String) iter.next();\n        System.setProperty(key, propertyOption.getProperty(key));\n      }\n    }\n    int port = DistributionLocator.parsePort(portOption);\n    int pid = 0;\n    try {\n      ManagerInfo info = ManagerInfo.loadLocatorInfo(directory);\n      pid = info.getManagerProcessId();\n      if (portOption == null || portOption.trim().length() == 0) {\n        port = info.getManagerPort();\n      }\n      if (addr == null) {\n        addr = info.getManagerAddress();\n      }\n\n      try {\n        new TcpClient(SocketCreatorFactory\n            .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n            InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n            InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n                .stop(new HostAndPort(addr.getHostName(), port));\n      } catch (java.net.ConnectException ce) {\n        System.out.println(\n            \"Unable to connect to Locator process. Possible causes are that an incorrect bind address/port combination was specified to the stop-locator command or the process is unresponsive.\");\n        return;\n      }\n      \r\n      \r\n      if (!quiet) {\n        System.out.println(\n            \"Waiting 5 seconds for locator process to terminate...\");\n      }\n      Thread.sleep(5000);\n    } catch (UnstartedSystemException ex) {\n      \r\n      throw new UnstartedSystemException(\n          String.format(\"Locator in directory %s is not running.\",\n              directory));\n    } catch (NoSystemException ex) {\n      \r\n      cleanupAfterKilledLocator(directory);\n      throw ex;\n    }\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"4b06a7ae04e3eb3e32d8a6a96c7eb5e5d3269df0","commitMessage":"@@@Revert \"GEODE-7808: standardize on use of HostAndPort to form client-side connections (#4743)\" (#4761)\n\nThis reverts commit 0af626462642c6352840cd6e81a5265c74045c7f.\nThat commit seems to have caused a severe performance drop in several\nBenchmark tests:\n\norg.apache.geode.benchmark.tests.PartitionedGetBenchmark\n              average ops/second  Baseline:    981794.46  Test:     41239.82  Difference:  -95.8%\norg.apache.geode.benchmark.tests.ReplicatedGetBenchmark\n              average ops/second  Baseline:    972769.18  Test:     41299.96  Difference:  -95.8%\norg.apache.geode.benchmark.tests.PartitionedNonIndexedQueryBenchmark\n              average ops/second  Baseline:        90.05  Test:        70.52  Difference:  -21.7%","date":"2020-03-04 03:17:00","modifiedFileCount":"78","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-03-05 05:06:54","codes":[{"authorDate":"2020-03-03 05:09:07","commitOrder":10,"curCode":"  private void issueStopRequest(final int port)\n      throws ConnectException, UnknownHostException {\n    new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n            .stop(new HostAndPort(InetAddress.getLocalHost().getHostName(), port));\n  }\n","date":"2020-03-03 05:09:07","endLine":166,"groupId":"26359","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"issueStopRequest","params":"(finalintport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/75/34ecd2e81a51e3ee6e2feddb7b4bc2ad690c0b.src","preCode":"  private void issueStopRequest(final int port)\n      throws ConnectException, UnknownHostException {\n    new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n            .stop(new HostAndPort(InetAddress.getLocalHost().getHostName(), port));\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/AutoConnectionSourceImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"N"},{"authorDate":"2020-03-05 05:06:54","commitOrder":10,"curCode":"  public void locatorStop(File directory, String portOption, String addressOption,\n      Properties propertyOption) throws InterruptedException {\n    if (Thread.interrupted())\n      throw new InterruptedException();\n    InetAddress addr = null; \r\n    if (addressOption == null) {\n      addressOption = \"\";\n    }\n    addressOption = addressOption.trim();\n    if (!addressOption.equals(\"\")) {\n      \r\n      try {\n        addr = InetAddress.getByName(addressOption);\n      } catch (UnknownHostException ex) {\n        throw new IllegalArgumentException(\n            String.format(\"-address value was not a known IP address: %s\",\n                ex));\n      }\n    }\n\n    if (propertyOption != null) {\n      Iterator iter = propertyOption.keySet().iterator();\n      while (iter.hasNext()) {\n        String key = (String) iter.next();\n        System.setProperty(key, propertyOption.getProperty(key));\n      }\n    }\n    int port = DistributionLocator.parsePort(portOption);\n    int pid = 0;\n    try {\n      ManagerInfo info = ManagerInfo.loadLocatorInfo(directory);\n      pid = info.getManagerProcessId();\n      if (portOption == null || portOption.trim().length() == 0) {\n        port = info.getManagerPort();\n      }\n      if (addr == null) {\n        addr = info.getManagerAddress();\n      }\n\n      try {\n        new TcpClient(SocketCreatorFactory\n            .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n            InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n            InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n                .stop(new HostAndPort(addr.getHostName(), port));\n      } catch (java.net.ConnectException ce) {\n        System.out.println(\n            \"Unable to connect to Locator process. Possible causes are that an incorrect bind address/port combination was specified to the stop-locator command or the process is unresponsive.\");\n        return;\n      }\n      \r\n      \r\n      if (!quiet) {\n        System.out.println(\n            \"Waiting 5 seconds for locator process to terminate...\");\n      }\n      Thread.sleep(5000);\n    } catch (UnstartedSystemException ex) {\n      \r\n      throw new UnstartedSystemException(\n          String.format(\"Locator in directory %s is not running.\",\n              directory));\n    } catch (NoSystemException ex) {\n      \r\n      cleanupAfterKilledLocator(directory);\n      throw ex;\n    }\n  }\n","date":"2020-03-05 05:06:54","endLine":327,"groupId":"26359","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"locatorStop","params":"(Filedirectory@StringportOption@StringaddressOption@PropertiespropertyOption)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/75/b7821118a72c5d50f37422374db3908bd37280.src","preCode":"  public void locatorStop(File directory, String portOption, String addressOption,\n      Properties propertyOption) throws InterruptedException {\n    if (Thread.interrupted())\n      throw new InterruptedException();\n    InetAddress addr = null; \r\n    if (addressOption == null)\n      addressOption = \"\";\n    if (!addressOption.equals(\"\")) {\n      \r\n      try {\n        addr = InetAddress.getByName(addressOption);\n      } catch (UnknownHostException ex) {\n        throw new IllegalArgumentException(\n            String.format(\"-address value was not a known IP address: %s\",\n                ex));\n      }\n    }\n\n    if (propertyOption != null) {\n      Iterator iter = propertyOption.keySet().iterator();\n      while (iter.hasNext()) {\n        String key = (String) iter.next();\n        System.setProperty(key, propertyOption.getProperty(key));\n      }\n    }\n    int port = DistributionLocator.parsePort(portOption);\n    int pid = 0;\n    try {\n      ManagerInfo info = ManagerInfo.loadLocatorInfo(directory);\n      pid = info.getManagerProcessId();\n      if (portOption == null || portOption.trim().length() == 0) {\n        port = info.getManagerPort();\n      }\n      if (addressOption.trim().length() == 0) {\n        addr = info.getManagerAddress();\n      }\n\n      try {\n        new TcpClient(SocketCreatorFactory\n            .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n            InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n            InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n                .stop(addr, port);\n      } catch (java.net.ConnectException ce) {\n        System.out.println(\n            \"Unable to connect to Locator process. Possible causes are that an incorrect bind address/port combination was specified to the stop-locator command or the process is unresponsive.\");\n        return;\n      }\n      \r\n      \r\n      if (!quiet) {\n        System.out.println(\n            \"Waiting 5 seconds for locator process to terminate...\");\n      }\n      Thread.sleep(5000);\n    } catch (UnstartedSystemException ex) {\n      \r\n      throw new UnstartedSystemException(\n          String.format(\"Locator in directory %s is not running.\",\n              directory));\n    } catch (NoSystemException ex) {\n      \r\n      cleanupAfterKilledLocator(directory);\n      throw ex;\n    }\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"5c2b959e98a6330ecaeddb4d26e11ea29f7a2d7f","commitMessage":"@@@GEODE-7808: standardize on use of HostAndPort for creating connections (#4765)\n\n* Squashed merge of feature/GEODE-7808\n\nremoved HostAddress\nrenamed LocatorAddress to HostAndPort\nmodified TcpClient methods to take a HostAndPort argument instead of\nInetAddress\nmodified SocketCreator to take a HostAndPort argument instead of\nInetAddress\n\n* GEODE-7808 - standardize on use of HostAndPort for connection formation\n\nThis continues a previous PR that passed and was approved for merge.\nThis commit raises up several methods from SocketCreator into the\nTcpSocketCreator interface.  This is an intermediate commit.  A\nsubsequent commit will refactor TcpSocketCreator to separate the client\nand server methods for creating server-sockets and client connections to\nserver-sockets.\n\n* refactored socket-creators to separate concerns\n\nServerSocketCreator holds methods for non-client comms\nClientSocketCreator holds methods that clients should use for comms\nAdvancedSocketCreator holds methods for people who need to get around\nthe limitations of the other two interfaces\n\n* adding missing interface\n\n* move code out of inner-classes into first-class classes\n\n* renaming interfaces and methods to be less confusing\n\n* reinstate SocketCreator ip to hostname cache for performance\n\n* changes from review comments\n","date":"2020-03-05 05:06:54","modifiedFileCount":"80","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-03-21 04:40:24","codes":[{"authorDate":"2020-03-21 04:40:24","commitOrder":11,"curCode":"  private void issueStopRequest(final int port)\n      throws ConnectException, UnknownHostException {\n    new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer(),\n        TcpSocketFactory.DEFAULT)\n            .stop(new HostAndPort(InetAddress.getLocalHost().getHostName(), port));\n  }\n","date":"2020-03-21 04:40:24","endLine":169,"groupId":"26359","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"issueStopRequest","params":"(finalintport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c3/6cc6c6f9cde7965382ee212715c8e827419251.src","preCode":"  private void issueStopRequest(final int port)\n      throws ConnectException, UnknownHostException {\n    new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n            .stop(new HostAndPort(InetAddress.getLocalHost().getHostName(), port));\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/AutoConnectionSourceImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2020-03-21 04:40:24","commitOrder":11,"curCode":"  public void locatorStop(File directory, String portOption, String addressOption,\n      Properties propertyOption) throws InterruptedException {\n    if (Thread.interrupted())\n      throw new InterruptedException();\n    InetAddress addr = null; \r\n    if (addressOption == null) {\n      addressOption = \"\";\n    }\n    addressOption = addressOption.trim();\n    if (!addressOption.equals(\"\")) {\n      \r\n      try {\n        addr = InetAddress.getByName(addressOption);\n      } catch (UnknownHostException ex) {\n        throw new IllegalArgumentException(\n            String.format(\"-address value was not a known IP address: %s\",\n                ex));\n      }\n    }\n\n    if (propertyOption != null) {\n      Iterator iter = propertyOption.keySet().iterator();\n      while (iter.hasNext()) {\n        String key = (String) iter.next();\n        System.setProperty(key, propertyOption.getProperty(key));\n      }\n    }\n    int port = DistributionLocator.parsePort(portOption);\n    int pid = 0;\n    try {\n      ManagerInfo info = ManagerInfo.loadLocatorInfo(directory);\n      pid = info.getManagerProcessId();\n      if (portOption == null || portOption.trim().length() == 0) {\n        port = info.getManagerPort();\n      }\n      if (addr == null) {\n        addr = info.getManagerAddress();\n      }\n\n      try {\n        new TcpClient(SocketCreatorFactory\n            .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n            InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n            InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer(),\n            TcpSocketFactory.DEFAULT)\n                .stop(new HostAndPort(addr.getHostName(), port));\n      } catch (java.net.ConnectException ce) {\n        System.out.println(\n            \"Unable to connect to Locator process. Possible causes are that an incorrect bind address/port combination was specified to the stop-locator command or the process is unresponsive.\");\n        return;\n      }\n      \r\n      \r\n      if (!quiet) {\n        System.out.println(\n            \"Waiting 5 seconds for locator process to terminate...\");\n      }\n      Thread.sleep(5000);\n    } catch (UnstartedSystemException ex) {\n      \r\n      throw new UnstartedSystemException(\n          String.format(\"Locator in directory %s is not running.\",\n              directory));\n    } catch (NoSystemException ex) {\n      \r\n      cleanupAfterKilledLocator(directory);\n      throw ex;\n    }\n  }\n","date":"2020-03-21 04:40:24","endLine":329,"groupId":"26359","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"locatorStop","params":"(Filedirectory@StringportOption@StringaddressOption@PropertiespropertyOption)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c0/1b33fc4b77dfaade44a7a6edb3d9c30a84da75.src","preCode":"  public void locatorStop(File directory, String portOption, String addressOption,\n      Properties propertyOption) throws InterruptedException {\n    if (Thread.interrupted())\n      throw new InterruptedException();\n    InetAddress addr = null; \r\n    if (addressOption == null) {\n      addressOption = \"\";\n    }\n    addressOption = addressOption.trim();\n    if (!addressOption.equals(\"\")) {\n      \r\n      try {\n        addr = InetAddress.getByName(addressOption);\n      } catch (UnknownHostException ex) {\n        throw new IllegalArgumentException(\n            String.format(\"-address value was not a known IP address: %s\",\n                ex));\n      }\n    }\n\n    if (propertyOption != null) {\n      Iterator iter = propertyOption.keySet().iterator();\n      while (iter.hasNext()) {\n        String key = (String) iter.next();\n        System.setProperty(key, propertyOption.getProperty(key));\n      }\n    }\n    int port = DistributionLocator.parsePort(portOption);\n    int pid = 0;\n    try {\n      ManagerInfo info = ManagerInfo.loadLocatorInfo(directory);\n      pid = info.getManagerProcessId();\n      if (portOption == null || portOption.trim().length() == 0) {\n        port = info.getManagerPort();\n      }\n      if (addr == null) {\n        addr = info.getManagerAddress();\n      }\n\n      try {\n        new TcpClient(SocketCreatorFactory\n            .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n            InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n            InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n                .stop(new HostAndPort(addr.getHostName(), port));\n      } catch (java.net.ConnectException ce) {\n        System.out.println(\n            \"Unable to connect to Locator process. Possible causes are that an incorrect bind address/port combination was specified to the stop-locator command or the process is unresponsive.\");\n        return;\n      }\n      \r\n      \r\n      if (!quiet) {\n        System.out.println(\n            \"Waiting 5 seconds for locator process to terminate...\");\n      }\n      Thread.sleep(5000);\n    } catch (UnstartedSystemException ex) {\n      \r\n      throw new UnstartedSystemException(\n          String.format(\"Locator in directory %s is not running.\",\n              directory));\n    } catch (NoSystemException ex) {\n      \r\n      cleanupAfterKilledLocator(directory);\n      throw ex;\n    }\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"53f1e1a81c3b58989a835d37f94466eb3dfc752f","commitMessage":"@@@GEODE-7852: Adding a SocketFactory configuration for client Pools (#4830)\n\nAdding the ability to provide a SocketFactory to a client pool for use in\ncreating sockets. Adding an implementation of this SocketFactory that\nconfigures the pool to use an SNI proxy.\n\nAdding an automated test of the SniSocketFactory that uses docker compose\nto use a real SNI proxy and geode servers that are not reachable without\ngoing through the proxy.\n\nCo-authored-by: Bill Burcham <bburcham@pivotal.io>","date":"2020-03-21 04:40:24","modifiedFileCount":"51","status":"M","submitter":"Dan Smith"},{"authorTime":"2021-06-04 00:32:09","codes":[{"authorDate":"2020-03-21 04:40:24","commitOrder":12,"curCode":"  private void issueStopRequest(final int port)\n      throws ConnectException, UnknownHostException {\n    new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer(),\n        TcpSocketFactory.DEFAULT)\n            .stop(new HostAndPort(InetAddress.getLocalHost().getHostName(), port));\n  }\n","date":"2020-03-21 04:40:24","endLine":169,"groupId":"104441","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"issueStopRequest","params":"(finalintport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c3/6cc6c6f9cde7965382ee212715c8e827419251.src","preCode":"  private void issueStopRequest(final int port)\n      throws ConnectException, UnknownHostException {\n    new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer(),\n        TcpSocketFactory.DEFAULT)\n            .stop(new HostAndPort(InetAddress.getLocalHost().getHostName(), port));\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/AutoConnectionSourceImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"},{"authorDate":"2021-06-04 00:32:09","commitOrder":12,"curCode":"  public void locatorStop(File directory, String portOption, String addressOption,\n      Properties propertyOption) throws InterruptedException {\n    if (Thread.interrupted()) {\n      throw new InterruptedException();\n    }\n    InetAddress addr = null; \r\n    if (addressOption == null) {\n      addressOption = \"\";\n    }\n    addressOption = addressOption.trim();\n    if (!addressOption.equals(\"\")) {\n      \r\n      try {\n        addr = InetAddress.getByName(addressOption);\n      } catch (UnknownHostException ex) {\n        throw new IllegalArgumentException(\n            String.format(\"-address value was not a known IP address: %s\",\n                ex));\n      }\n    }\n\n    if (propertyOption != null) {\n      Iterator iter = propertyOption.keySet().iterator();\n      while (iter.hasNext()) {\n        String key = (String) iter.next();\n        System.setProperty(key, propertyOption.getProperty(key));\n      }\n    }\n    int port = DistributionLocator.parsePort(portOption);\n    int pid = 0;\n    try {\n      ManagerInfo info = ManagerInfo.loadLocatorInfo(directory);\n      pid = info.getManagerProcessId();\n      if (portOption == null || portOption.trim().length() == 0) {\n        port = info.getManagerPort();\n      }\n      if (addr == null) {\n        addr = info.getManagerAddress();\n      }\n\n      try {\n        new TcpClient(SocketCreatorFactory\n            .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n            InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n            InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer(),\n            TcpSocketFactory.DEFAULT)\n                .stop(new HostAndPort(addr.getHostName(), port));\n      } catch (java.net.ConnectException ce) {\n        System.out.println(\n            \"Unable to connect to Locator process. Possible causes are that an incorrect bind address/port combination was specified to the stop-locator command or the process is unresponsive.\");\n        return;\n      }\n      \r\n      \r\n      if (!quiet) {\n        System.out.println(\n            \"Waiting 5 seconds for locator process to terminate...\");\n      }\n      Thread.sleep(5000);\n    } catch (UnstartedSystemException ex) {\n      \r\n      throw new UnstartedSystemException(\n          String.format(\"Locator in directory %s is not running.\",\n              directory));\n    } catch (NoSystemException ex) {\n      \r\n      cleanupAfterKilledLocator(directory);\n      throw ex;\n    }\n  }\n","date":"2021-06-04 00:32:09","endLine":333,"groupId":"104441","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"locatorStop","params":"(Filedirectory@StringportOption@StringaddressOption@PropertiespropertyOption)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/0a/ddbc08579c719968e0707496d798cfd8be6ed0.src","preCode":"  public void locatorStop(File directory, String portOption, String addressOption,\n      Properties propertyOption) throws InterruptedException {\n    if (Thread.interrupted())\n      throw new InterruptedException();\n    InetAddress addr = null; \r\n    if (addressOption == null) {\n      addressOption = \"\";\n    }\n    addressOption = addressOption.trim();\n    if (!addressOption.equals(\"\")) {\n      \r\n      try {\n        addr = InetAddress.getByName(addressOption);\n      } catch (UnknownHostException ex) {\n        throw new IllegalArgumentException(\n            String.format(\"-address value was not a known IP address: %s\",\n                ex));\n      }\n    }\n\n    if (propertyOption != null) {\n      Iterator iter = propertyOption.keySet().iterator();\n      while (iter.hasNext()) {\n        String key = (String) iter.next();\n        System.setProperty(key, propertyOption.getProperty(key));\n      }\n    }\n    int port = DistributionLocator.parsePort(portOption);\n    int pid = 0;\n    try {\n      ManagerInfo info = ManagerInfo.loadLocatorInfo(directory);\n      pid = info.getManagerProcessId();\n      if (portOption == null || portOption.trim().length() == 0) {\n        port = info.getManagerPort();\n      }\n      if (addr == null) {\n        addr = info.getManagerAddress();\n      }\n\n      try {\n        new TcpClient(SocketCreatorFactory\n            .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n            InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n            InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer(),\n            TcpSocketFactory.DEFAULT)\n                .stop(new HostAndPort(addr.getHostName(), port));\n      } catch (java.net.ConnectException ce) {\n        System.out.println(\n            \"Unable to connect to Locator process. Possible causes are that an incorrect bind address/port combination was specified to the stop-locator command or the process is unresponsive.\");\n        return;\n      }\n      \r\n      \r\n      if (!quiet) {\n        System.out.println(\n            \"Waiting 5 seconds for locator process to terminate...\");\n      }\n      Thread.sleep(5000);\n    } catch (UnstartedSystemException ex) {\n      \r\n      throw new UnstartedSystemException(\n          String.format(\"Locator in directory %s is not running.\",\n              directory));\n    } catch (NoSystemException ex) {\n      \r\n      cleanupAfterKilledLocator(directory);\n      throw ex;\n    }\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"}],"commitId":"2879573ffb04e9e029e14ca37d8a064268cc8f44","commitMessage":"@@@GEODE-7864: Always use curly braces for control flow statements (#6523)\n\nAuthored-by: Donal Evans <doevans@vmware.com>","date":"2021-06-04 00:32:09","modifiedFileCount":"640","status":"M","submitter":"Donal Evans"}]
