[{"authorTime":"2019-05-12 01:42:15","codes":[{"authorDate":"2019-04-16 00:55:36","commitOrder":10,"curCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result = ClusterStartupRule.getLocator().getClusterManagementService()\n          .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-04-16 00:55:36","endLine":83,"groupId":"26951","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createsPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/07/f2941dff61110b1075444b58de1f84b6f14fa2.src","preCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result = ClusterStartupRule.getLocator().getClusterManagementService()\n          .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"NB"},{"authorDate":"2019-05-12 01:42:15","commitOrder":10,"curCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result = ClusterStartupRule.getLocator().getClusterManagementService()\n          .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-05-12 01:42:15","endLine":116,"groupId":"26951","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8d/66409959b33262df039b3acca813b3ec8ac892.src","preCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result = ClusterStartupRule.getLocator().getClusterManagementService()\n          .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"}],"commitId":"1f458c9516d476f0889708210e76e892985f41c7","commitMessage":"@@@GEODE-6756: rework type and regionAttributes setter/getter (#3578)\n\nCo-authored-by: Jens Deppe <jdeppe@pivotal.io>\n\n* make type a required attribute for RegionConfig\n* Do the type to attributes mapping in the RegionConfigValidator for the ultimate attributes validation.","date":"2019-05-12 01:42:15","modifiedFileCount":"15","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2019-06-19 06:26:48","codes":[{"authorDate":"2019-06-19 06:26:48","commitOrder":11,"curCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult<RegionConfig> result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-06-19 06:26:48","endLine":84,"groupId":"26951","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createsPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/07/778576df9b37fd78d640db7015bb04b434624e.src","preCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result = ClusterStartupRule.getLocator().getClusterManagementService()\n          .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-06-19 06:26:48","commitOrder":11,"curCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult<RegionConfig> result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-06-19 06:26:48","endLine":119,"groupId":"26951","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/07/778576df9b37fd78d640db7015bb04b434624e.src","preCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result = ClusterStartupRule.getLocator().getClusterManagementService()\n          .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"a60ade270e3dc1901fe900e2521351bdc93ecced","commitMessage":"@@@GEODE-6861: Generify ClusterManagementService (#3708)\n\n* GEODE-6861: Generify ClusterManagementService","date":"2019-06-19 06:26:48","modifiedFileCount":"50","status":"M","submitter":"Owen Nichols"},{"authorTime":"2019-06-28 00:27:11","codes":[{"authorDate":"2019-06-28 00:27:11","commitOrder":12,"curCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      SimpleClusterManagementResult result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-06-28 00:27:11","endLine":84,"groupId":"26951","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createsPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2f/1f5f7f01b6b0ac660b11d8a17733324a8c2a29.src","preCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult<RegionConfig> result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-06-28 00:27:11","commitOrder":12,"curCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      SimpleClusterManagementResult result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-06-28 00:27:11","endLine":119,"groupId":"26951","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2f/1f5f7f01b6b0ac660b11d8a17733324a8c2a29.src","preCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult<RegionConfig> result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"b3157c94cd9738be618b59b3f0ab064a9356a589","commitMessage":"@@@* GEODE-6861: have create/delete/update return SimpleClusterManagementResult which does not need generics.\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\n\n\n","date":"2019-06-28 00:27:11","modifiedFileCount":"25","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2019-06-28 01:35:06","codes":[{"authorDate":"2019-06-28 01:35:06","commitOrder":13,"curCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult<RegionConfig> result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-06-28 01:35:06","endLine":84,"groupId":"26951","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createsPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/07/778576df9b37fd78d640db7015bb04b434624e.src","preCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      SimpleClusterManagementResult result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-06-28 01:35:06","commitOrder":13,"curCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult<RegionConfig> result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-06-28 01:35:06","endLine":119,"groupId":"26951","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/07/778576df9b37fd78d640db7015bb04b434624e.src","preCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      SimpleClusterManagementResult result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"24fc3195e214cdbcacc6688c5045747e32c62bc1","commitMessage":"@@@Revert \"* GEODE-6861: have create/delete/update return SimpleClusterManagementResult which does not need generics.\"\n\nThis reverts commit b3157c94\n","date":"2019-06-28 01:35:06","modifiedFileCount":"25","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2019-06-29 02:10:02","codes":[{"authorDate":"2019-06-29 02:10:02","commitOrder":14,"curCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult<?, ?> result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-06-29 02:10:02","endLine":84,"groupId":"26951","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createsPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/65/ec4d2169fbd0061f4948fe22883a5450624392.src","preCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult<RegionConfig> result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-06-29 02:10:02","commitOrder":14,"curCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult<?, ?> result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-06-29 02:10:02","endLine":119,"groupId":"26951","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/65/ec4d2169fbd0061f4948fe22883a5450624392.src","preCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult<RegionConfig> result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"2c39f92dc5fa129058144a9ec16606092dc3d51e","commitMessage":"@@@GEODE-6861: separate static config object from runtime info in the Cl? (#3754)\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\n\n* use ConfigRealizer to retrieve the runtime information for configuration on each member\n* list result would return a List of Response object which has a configuration object and a list runtime objects\n* use existing object for runtime member info and move them to geode-management module.\n","date":"2019-06-29 02:10:02","modifiedFileCount":"61","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2019-07-12 06:08:46","codes":[{"authorDate":"2019-07-12 06:08:46","commitOrder":15,"curCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-07-12 06:08:46","endLine":84,"groupId":"26951","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createsPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/29/f0675f2d0fd2b8ebb63fcfed3f204691a0609c.src","preCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult<?, ?> result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-07-12 06:08:46","commitOrder":15,"curCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-07-12 06:08:46","endLine":119,"groupId":"26951","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/29/f0675f2d0fd2b8ebb63fcfed3f204691a0609c.src","preCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult<?, ?> result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"592875c12cf723be42d62747efcc71a97887cfd4","commitMessage":"@@@GEODE-6897: refactor ClusterManagementResult into subclasses (#3793)\n\n* GEODE-6897: refactoring of ClusterManagementResult into subclasses","date":"2019-07-12 06:08:46","modifiedFileCount":"30","status":"M","submitter":"Owen Nichols"},{"authorTime":"2019-08-16 05:45:33","codes":[{"authorDate":"2019-08-16 05:45:33","commitOrder":16,"curCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      Region config = new Region();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-08-16 05:45:33","endLine":84,"groupId":"26951","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createsPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/9b/41cb84a4595085f6bf9dbf061767892acb80d7.src","preCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-08-16 05:45:33","commitOrder":16,"curCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      Region config = new Region();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-08-16 05:45:33","endLine":119,"groupId":"26951","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/9b/41cb84a4595085f6bf9dbf061767892acb80d7.src","preCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      RegionConfig config = new RegionConfig();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"550e19e9c9bfd147a387c56019f00dbf162a2b26","commitMessage":"@@@GEODE-6945:geode-managment should create its own set of configuration? (#3928)\n\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>\n\n* do not use xml domain object for region configuration\n* add RegionType.UNSUPPORTED\n","date":"2019-08-16 05:45:33","modifiedFileCount":"40","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2019-08-16 05:45:33","codes":[{"authorDate":"2020-05-09 09:44:08","commitOrder":17,"curCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      Region config = new Region();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2020-05-09 09:44:08","endLine":85,"groupId":"105382","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"createsPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f3/f5e1ab2f82b33dd4ef4c6cabee5a06b1ac0a07.src","preCode":"  public void createsPartitionedRegion() {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      Region config = new Region();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/\" + regionName, 1);\n\n    gfsh.executeAndAssertThat(\"put --key='foo' --value='125' --region=\" + regionName)\n        .statusIsSuccess();\n    gfsh.executeAndAssertThat(\"get --key='foo' --region=\" + regionName)\n        .statusIsSuccess()\n        .containsKeyValuePair(\"Value\", \"\\\"125\\\"\");\n\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2019-08-16 05:45:33","commitOrder":17,"curCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      Region config = new Region();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","date":"2019-08-16 05:45:33","endLine":119,"groupId":"105382","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/9b/41cb84a4595085f6bf9dbf061767892acb80d7.src","preCode":"  public void createPartitionedRegion() throws Exception {\n    String regionName = testName.getMethodName();\n    locator.invoke(() -> {\n      Region config = new Region();\n      config.setName(regionName);\n      config.setType(RegionType.PARTITION);\n      ClusterManagementResult result =\n          ClusterStartupRule.getLocator().getClusterManagementService()\n              .create(config);\n      assertThat(result.isSuccessful()).isTrue();\n    });\n\n    server.invoke(() -> verifyRegionCreated(regionName, \"PARTITION\"));\n    locator.invoke(() -> verifyRegionPersisted(regionName, \"PARTITION\"));\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/api/RegionAPIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"N"}],"commitId":"8f0650e83e22d4c22d9bf9b15beffff0fcb451d2","commitMessage":"@@@GEODE-7864: Replace uses of hardcoded \"/\" with Region.SEPARATOR (#5049)\n\n* GEODE-7864: Replace uses of hardcoded \"/\" with Region.SEPARATOR\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-09 09:44:08","modifiedFileCount":"149","status":"M","submitter":"Donal Evans"}]
