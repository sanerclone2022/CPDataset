[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testMultiFromWithSingleConditionUsingIndex() throws Exception {\n    \r\n    Region region1 = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    Region region2 = CacheUtils.createRegion(\"portfolios2\", Portfolio.class);\n    for (int i = 0; i < 100; i++) {\n      Portfolio p = null;\n      if (i != 0 && i < 5) {\n        p = new Portfolio(5);\n      } else {\n        p = new Portfolio(i);\n      }\n      region1.put(i, p);\n      region2.put(i, p);\n    }\n\n    QueryService qs = CacheUtils.getQueryService();\n    \r\n    String queryString = \"SELECT * from /portfolios1 P1, /portfolios2 P2 WHERE P1.ID = 5\";\n    Query query = qs.newQuery(queryString);\n    SelectResults sr1 = (SelectResults) query.execute();\n\n    \r\n    Index index = qs.createIndex(\"P1IDIndex\", IndexType.FUNCTIONAL, \"P1.ID\", \"/portfolios1 P1\");\n\n    \r\n    SelectResults sr2 = (SelectResults) query.execute();\n    assertEquals(\"Index result set does not match unindexed result set size\", sr1.size(),\n        sr2.size());\n    \r\n    assertEquals(\"Query result set size does not match expected size\", 5 * region2.size(),\n        sr2.size());\n  }\n","date":"2018-07-18 03:54:18","endLine":214,"groupId":"9780","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiFromWithSingleConditionUsingIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/75/27d4cd910c2d0a33a81cbedf30c73845835932.src","preCode":"  public void testMultiFromWithSingleConditionUsingIndex() throws Exception {\n    \r\n    Region region1 = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    Region region2 = CacheUtils.createRegion(\"portfolios2\", Portfolio.class);\n    for (int i = 0; i < 100; i++) {\n      Portfolio p = null;\n      if (i != 0 && i < 5) {\n        p = new Portfolio(5);\n      } else {\n        p = new Portfolio(i);\n      }\n      region1.put(i, p);\n      region2.put(i, p);\n    }\n\n    QueryService qs = CacheUtils.getQueryService();\n    \r\n    String queryString = \"SELECT * from /portfolios1 P1, /portfolios2 P2 WHERE P1.ID = 5\";\n    Query query = qs.newQuery(queryString);\n    SelectResults sr1 = (SelectResults) query.execute();\n\n    \r\n    Index index = qs.createIndex(\"P1IDIndex\", IndexType.FUNCTIONAL, \"P1.ID\", \"/portfolios1 P1\");\n\n    \r\n    SelectResults sr2 = (SelectResults) query.execute();\n    assertEquals(\"Index result set does not match unindexed result set size\", sr1.size(),\n        sr2.size());\n    \r\n    assertEquals(\"Query result set size does not match expected size\", 5 * region2.size(),\n        sr2.size());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexUseMultFrmSnglCondJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testMultiFromWithSingleConditionUsingRangeIndex() throws Exception {\n    \r\n    Region region1 = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    Region region2 = CacheUtils.createRegion(\"portfolios2\", Portfolio.class);\n    for (int i = 0; i < 100; i++) {\n      Portfolio p = null;\n      if (i != 0 && i < 5) {\n        p = new Portfolio(5);\n      } else {\n        p = new Portfolio(i);\n      }\n      region1.put(i, p);\n      region2.put(i, p);\n    }\n\n    QueryService qs = CacheUtils.getQueryService();\n    \r\n    String queryString = \"SELECT * from /portfolios1 P1, P1.positions.values WHERE P1.ID = 5\";\n    Query query = qs.newQuery(queryString);\n    SelectResults sr1 = (SelectResults) query.execute();\n\n    \r\n    Index index = qs.createIndex(\"P1IDIndex\", IndexType.FUNCTIONAL, \"P1.ID\",\n        \"/portfolios1 P1, P1.positions.values\");\n\n    \r\n    SelectResults sr2 = (SelectResults) query.execute();\n    assertEquals(\"Index result set does not match unindexed result set size\", sr1.size(),\n        sr2.size());\n    \r\n    assertEquals(\"Query result set size does not match expected size\", 10, sr2.size());\n  }\n","date":"2018-07-18 03:54:18","endLine":248,"groupId":"9780","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiFromWithSingleConditionUsingRangeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/75/27d4cd910c2d0a33a81cbedf30c73845835932.src","preCode":"  public void testMultiFromWithSingleConditionUsingRangeIndex() throws Exception {\n    \r\n    Region region1 = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    Region region2 = CacheUtils.createRegion(\"portfolios2\", Portfolio.class);\n    for (int i = 0; i < 100; i++) {\n      Portfolio p = null;\n      if (i != 0 && i < 5) {\n        p = new Portfolio(5);\n      } else {\n        p = new Portfolio(i);\n      }\n      region1.put(i, p);\n      region2.put(i, p);\n    }\n\n    QueryService qs = CacheUtils.getQueryService();\n    \r\n    String queryString = \"SELECT * from /portfolios1 P1, P1.positions.values WHERE P1.ID = 5\";\n    Query query = qs.newQuery(queryString);\n    SelectResults sr1 = (SelectResults) query.execute();\n\n    \r\n    Index index = qs.createIndex(\"P1IDIndex\", IndexType.FUNCTIONAL, \"P1.ID\",\n        \"/portfolios1 P1, P1.positions.values\");\n\n    \r\n    SelectResults sr2 = (SelectResults) query.execute();\n    assertEquals(\"Index result set does not match unindexed result set size\", sr1.size(),\n        sr2.size());\n    \r\n    assertEquals(\"Query result set size does not match expected size\", 10, sr2.size());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexUseMultFrmSnglCondJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testMultiFromWithSingleConditionUsingIndex() throws Exception {\n    \r\n    Region region1 = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    Region region2 = CacheUtils.createRegion(\"portfolios2\", Portfolio.class);\n    for (int i = 0; i < 100; i++) {\n      Portfolio p = null;\n      if (i != 0 && i < 5) {\n        p = new Portfolio(5);\n      } else {\n        p = new Portfolio(i);\n      }\n      region1.put(i, p);\n      region2.put(i, p);\n    }\n\n    QueryService qs = CacheUtils.getQueryService();\n    \r\n    String queryString = \"SELECT * from \" + SEPARATOR + \"portfolios1 P1, \" + SEPARATOR\n        + \"portfolios2 P2 WHERE P1.ID = 5\";\n    Query query = qs.newQuery(queryString);\n    SelectResults sr1 = (SelectResults) query.execute();\n\n    \r\n    Index index =\n        qs.createIndex(\"P1IDIndex\", IndexType.FUNCTIONAL, \"P1.ID\", SEPARATOR + \"portfolios1 P1\");\n\n    \r\n    SelectResults sr2 = (SelectResults) query.execute();\n    assertEquals(\"Index result set does not match unindexed result set size\", sr1.size(),\n        sr2.size());\n    \r\n    assertEquals(\"Query result set size does not match expected size\", 5 * region2.size(),\n        sr2.size());\n  }\n","date":"2020-05-29 00:37:39","endLine":218,"groupId":"104911","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiFromWithSingleConditionUsingIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/57/9b0bddc1e82af799ca8d7b40e9e14cdc1fd8bb.src","preCode":"  public void testMultiFromWithSingleConditionUsingIndex() throws Exception {\n    \r\n    Region region1 = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    Region region2 = CacheUtils.createRegion(\"portfolios2\", Portfolio.class);\n    for (int i = 0; i < 100; i++) {\n      Portfolio p = null;\n      if (i != 0 && i < 5) {\n        p = new Portfolio(5);\n      } else {\n        p = new Portfolio(i);\n      }\n      region1.put(i, p);\n      region2.put(i, p);\n    }\n\n    QueryService qs = CacheUtils.getQueryService();\n    \r\n    String queryString = \"SELECT * from /portfolios1 P1, /portfolios2 P2 WHERE P1.ID = 5\";\n    Query query = qs.newQuery(queryString);\n    SelectResults sr1 = (SelectResults) query.execute();\n\n    \r\n    Index index = qs.createIndex(\"P1IDIndex\", IndexType.FUNCTIONAL, \"P1.ID\", \"/portfolios1 P1\");\n\n    \r\n    SelectResults sr2 = (SelectResults) query.execute();\n    assertEquals(\"Index result set does not match unindexed result set size\", sr1.size(),\n        sr2.size());\n    \r\n    assertEquals(\"Query result set size does not match expected size\", 5 * region2.size(),\n        sr2.size());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexUseMultFrmSnglCondJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testMultiFromWithSingleConditionUsingRangeIndex() throws Exception {\n    \r\n    Region region1 = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    Region region2 = CacheUtils.createRegion(\"portfolios2\", Portfolio.class);\n    for (int i = 0; i < 100; i++) {\n      Portfolio p = null;\n      if (i != 0 && i < 5) {\n        p = new Portfolio(5);\n      } else {\n        p = new Portfolio(i);\n      }\n      region1.put(i, p);\n      region2.put(i, p);\n    }\n\n    QueryService qs = CacheUtils.getQueryService();\n    \r\n    String queryString =\n        \"SELECT * from \" + SEPARATOR + \"portfolios1 P1, P1.positions.values WHERE P1.ID = 5\";\n    Query query = qs.newQuery(queryString);\n    SelectResults sr1 = (SelectResults) query.execute();\n\n    \r\n    Index index = qs.createIndex(\"P1IDIndex\", IndexType.FUNCTIONAL, \"P1.ID\",\n        SEPARATOR + \"portfolios1 P1, P1.positions.values\");\n\n    \r\n    SelectResults sr2 = (SelectResults) query.execute();\n    assertEquals(\"Index result set does not match unindexed result set size\", sr1.size(),\n        sr2.size());\n    \r\n    assertEquals(\"Query result set size does not match expected size\", 10, sr2.size());\n  }\n","date":"2020-05-29 00:37:39","endLine":253,"groupId":"104911","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiFromWithSingleConditionUsingRangeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/57/9b0bddc1e82af799ca8d7b40e9e14cdc1fd8bb.src","preCode":"  public void testMultiFromWithSingleConditionUsingRangeIndex() throws Exception {\n    \r\n    Region region1 = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    Region region2 = CacheUtils.createRegion(\"portfolios2\", Portfolio.class);\n    for (int i = 0; i < 100; i++) {\n      Portfolio p = null;\n      if (i != 0 && i < 5) {\n        p = new Portfolio(5);\n      } else {\n        p = new Portfolio(i);\n      }\n      region1.put(i, p);\n      region2.put(i, p);\n    }\n\n    QueryService qs = CacheUtils.getQueryService();\n    \r\n    String queryString = \"SELECT * from /portfolios1 P1, P1.positions.values WHERE P1.ID = 5\";\n    Query query = qs.newQuery(queryString);\n    SelectResults sr1 = (SelectResults) query.execute();\n\n    \r\n    Index index = qs.createIndex(\"P1IDIndex\", IndexType.FUNCTIONAL, \"P1.ID\",\n        \"/portfolios1 P1, P1.positions.values\");\n\n    \r\n    SelectResults sr2 = (SelectResults) query.execute();\n    assertEquals(\"Index result set does not match unindexed result set size\", sr1.size(),\n        sr2.size());\n    \r\n    assertEquals(\"Query result set size does not match expected size\", 10, sr2.size());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexUseMultFrmSnglCondJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
