[{"authorTime":"2016-09-15 02:08:18","codes":[{"authorDate":"2016-09-15 02:08:18","commitOrder":1,"curCode":"  public void testRemoveServer() {\n    LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    sn.addServer(l1, new String[0], new ServerLoad(1, 1, 1, 1));\n    sn.addServer(l2, new String[0], new ServerLoad(100, .2f, 10, .2f));\n    \n    assertEquals(l1, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2} ), sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    sn.removeServer(l1);\n    assertEquals(l2, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Collections.singletonList(l2), sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n  }\n","date":"2016-09-15 02:08:18","endLine":131,"groupId":"21653","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoveServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/9d/4ceb47b931ca0492015fd50dd3de667f421e2a.src","preCode":"  public void testRemoveServer() {\n    LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    sn.addServer(l1, new String[0], new ServerLoad(1, 1, 1, 1));\n    sn.addServer(l2, new String[0], new ServerLoad(100, .2f, 10, .2f));\n    \n    assertEquals(l1, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2} ), sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    sn.removeServer(l1);\n    assertEquals(l2, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Collections.singletonList(l2), sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/distributed/internal/LocatorLoadSnapshotJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"},{"authorDate":"2016-09-15 02:08:18","commitOrder":1,"curCode":"  public void testGroups() {\n    LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    sn.addServer(l1, new String[] {\"a\", \"b\"}, new ServerLoad(1, 1, 1, 1));\n    sn.addServer(l2, new String[]{\"b\", \"c\"}, new ServerLoad(1, 1, 1, 1));\n    assertNotNull(sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(l1, sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    sn.updateLoad(l1, new ServerLoad(10,1,1,1));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    sn.updateLoad(l2, new ServerLoad(100,1,1,1));\n    assertEquals(l1, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1} ), sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2} ), sn.getServersForQueue(\"c\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2} ), sn.getServersForQueue(\"b\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2} ), sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2} ), sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n    \n    sn.removeServer(l1);\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertNull(sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {} ), sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2} ), sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n  }\n","date":"2016-09-15 02:08:18","endLine":164,"groupId":"21655","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroups","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/9d/4ceb47b931ca0492015fd50dd3de667f421e2a.src","preCode":"  public void testGroups() {\n    LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    sn.addServer(l1, new String[] {\"a\", \"b\"}, new ServerLoad(1, 1, 1, 1));\n    sn.addServer(l2, new String[]{\"b\", \"c\"}, new ServerLoad(1, 1, 1, 1));\n    assertNotNull(sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(l1, sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    sn.updateLoad(l1, new ServerLoad(10,1,1,1));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    sn.updateLoad(l2, new ServerLoad(100,1,1,1));\n    assertEquals(l1, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1} ), sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2} ), sn.getServersForQueue(\"c\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2} ), sn.getServersForQueue(\"b\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2} ), sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2} ), sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n    \n    sn.removeServer(l1);\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertNull(sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {} ), sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2} ), sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/distributed/internal/LocatorLoadSnapshotJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"}],"commitId":"8ea08da3d2baa64ca631641430b54d71ce3ff362","commitMessage":"@@@GEODE-37 Merge branch 'feature/GEODE-37_2' into develop\n\nConflicts:\n\tgeode-core/src/main/java/com/gemstone/gemfire/cache/query/internal/IndexTrackingQueryObserver.java\n","date":"2016-09-15 02:08:18","modifiedFileCount":"151","status":"B","submitter":"Hitesh Khamesra"},{"authorTime":"2020-04-18 07:18:11","codes":[{"authorDate":"2020-04-18 07:18:11","commitOrder":2,"curCode":"  public void testRemoveServer() {\n    LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    sn.addServer(l1, \"\", new String[0], new ServerLoad(1, 1, 1, 1), LOAD_POLL_INTERVAL);\n    sn.addServer(l2, \"\", new String[0], new ServerLoad(100, .2f, 10, .2f), LOAD_POLL_INTERVAL);\n\n    assertEquals(l1, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    sn.removeServer(l1, \"\");\n    assertEquals(l2, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Collections.singletonList(l2),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n  }\n","date":"2020-04-18 07:18:11","endLine":137,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoveServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e7/d20c9fb8cd82fe29871bf48f5f99936d946460.src","preCode":"  public void testRemoveServer() {\n    LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    sn.addServer(l1, new String[0], new ServerLoad(1, 1, 1, 1));\n    sn.addServer(l2, new String[0], new ServerLoad(100, .2f, 10, .2f));\n\n    assertEquals(l1, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    sn.removeServer(l1);\n    assertEquals(l2, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Collections.singletonList(l2),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/distributed/internal/LocatorLoadSnapshotJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2020-04-18 07:18:11","commitOrder":2,"curCode":"  public void testGroups() {\n    LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    sn.addServer(l1, \"\", new String[] {\"a\", \"b\"}, new ServerLoad(1, 1, 1, 1), LOAD_POLL_INTERVAL);\n    sn.addServer(l2, \"\", new String[] {\"b\", \"c\"}, new ServerLoad(1, 1, 1, 1), LOAD_POLL_INTERVAL);\n    assertNotNull(sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(l1, sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    sn.updateLoad(l1, \"\", new ServerLoad(10, 1, 1, 1));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    sn.updateLoad(l2, \"\", new ServerLoad(100, 1, 1, 1));\n    assertEquals(l1, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1}),\n        sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2}),\n        sn.getServersForQueue(\"c\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n\n    sn.removeServer(l1, \"\");\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertNull(sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {}),\n        sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n  }\n","date":"2020-04-18 07:18:11","endLine":176,"groupId":"21655","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroups","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e7/d20c9fb8cd82fe29871bf48f5f99936d946460.src","preCode":"  public void testGroups() {\n    LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    sn.addServer(l1, new String[] {\"a\", \"b\"}, new ServerLoad(1, 1, 1, 1));\n    sn.addServer(l2, new String[] {\"b\", \"c\"}, new ServerLoad(1, 1, 1, 1));\n    assertNotNull(sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(l1, sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    sn.updateLoad(l1, new ServerLoad(10, 1, 1, 1));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    sn.updateLoad(l2, new ServerLoad(100, 1, 1, 1));\n    assertEquals(l1, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1}),\n        sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2}),\n        sn.getServersForQueue(\"c\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n\n    sn.removeServer(l1);\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertNull(sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {}),\n        sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/distributed/internal/LocatorLoadSnapshotJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"dd23ee8200cba67cea82e57e2e4ccedcdf9e8266","commitMessage":"@@@GEODE-7565: Allow gateway receivers with same host and port (#4824)\n\nThere was a problem with Geode WAN replication when GW receivers are configured with the same hostname-for-senders and port on all servers. The reason for such a setup is deploying Geode cluster on a Kubernetes cluster where all GW receivers are reachable from the outside world on the same VIP and port.\n\nThe problem experienced is that shutting down one server is stopping replication to this cluster until the server is up again. This is because Geode incorrectly assumes there are no more alive servers when just one of them is down.  because since they share hostname-for-senders and port.  they are treated as one same server.\n\nWith these changes locator is able to distinguish the different receivers using the same hostname and port so replication is not impacted when one server is stopped. ","date":"2020-04-18 07:18:11","modifiedFileCount":"13","status":"M","submitter":"Alberto Bustamante Reyes"},{"authorTime":"2020-04-20 23:50:25","codes":[{"authorDate":"2020-04-20 23:50:25","commitOrder":3,"curCode":"  public void testRemoveServer() {\n    LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    sn.addServer(l1, new String[0], new ServerLoad(1, 1, 1, 1));\n    sn.addServer(l2, new String[0], new ServerLoad(100, .2f, 10, .2f));\n\n    assertEquals(l1, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    sn.removeServer(l1);\n    assertEquals(l2, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Collections.singletonList(l2),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n  }\n","date":"2020-04-20 23:50:25","endLine":135,"groupId":"21653","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoveServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5a/38b28e3ad30fd476cd768d1e5d1b275a3b33e8.src","preCode":"  public void testRemoveServer() {\n    LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    sn.addServer(l1, \"\", new String[0], new ServerLoad(1, 1, 1, 1), LOAD_POLL_INTERVAL);\n    sn.addServer(l2, \"\", new String[0], new ServerLoad(100, .2f, 10, .2f), LOAD_POLL_INTERVAL);\n\n    assertEquals(l1, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    sn.removeServer(l1, \"\");\n    assertEquals(l2, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Collections.singletonList(l2),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/distributed/internal/LocatorLoadSnapshotJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2020-04-20 23:50:25","commitOrder":3,"curCode":"  public void testGroups() {\n    LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    sn.addServer(l1, new String[] {\"a\", \"b\"}, new ServerLoad(1, 1, 1, 1));\n    sn.addServer(l2, new String[] {\"b\", \"c\"}, new ServerLoad(1, 1, 1, 1));\n    assertNotNull(sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(l1, sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    sn.updateLoad(l1, new ServerLoad(10, 1, 1, 1));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    sn.updateLoad(l2, new ServerLoad(100, 1, 1, 1));\n    assertEquals(l1, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1}),\n        sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2}),\n        sn.getServersForQueue(\"c\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n\n    sn.removeServer(l1);\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertNull(sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {}),\n        sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n  }\n","date":"2020-04-20 23:50:25","endLine":174,"groupId":"21655","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroups","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5a/38b28e3ad30fd476cd768d1e5d1b275a3b33e8.src","preCode":"  public void testGroups() {\n    LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    sn.addServer(l1, \"\", new String[] {\"a\", \"b\"}, new ServerLoad(1, 1, 1, 1), LOAD_POLL_INTERVAL);\n    sn.addServer(l2, \"\", new String[] {\"b\", \"c\"}, new ServerLoad(1, 1, 1, 1), LOAD_POLL_INTERVAL);\n    assertNotNull(sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(l1, sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    sn.updateLoad(l1, \"\", new ServerLoad(10, 1, 1, 1));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    sn.updateLoad(l2, \"\", new ServerLoad(100, 1, 1, 1));\n    assertEquals(l1, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1}),\n        sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2}),\n        sn.getServersForQueue(\"c\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n\n    sn.removeServer(l1, \"\");\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertNull(sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {}),\n        sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/distributed/internal/LocatorLoadSnapshotJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"}],"commitId":"e1c17e16fd28174b37a5426b30d729a94d6766a3","commitMessage":"@@@Revert \"GEODE-7565: Allow gateway receivers with same host and port (#4824)\" (#4974)\n\nThis reverts commit dd23ee8200cba67cea82e57e2e4ccedcdf9e8266.","date":"2020-04-20 23:50:25","modifiedFileCount":"13","status":"M","submitter":"Juan Jos? Ramos"},{"authorTime":"2020-05-08 21:11:48","codes":[{"authorDate":"2020-05-08 21:11:48","commitOrder":4,"curCode":"  public void testRemoveServer() {\n    final LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    final ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    final ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    final String uniqueId1 = new InternalDistributedMember(\"localhost\", 1).getUniqueId();\n    final String uniqueId2 = new InternalDistributedMember(\"localhost\", 2).getUniqueId();\n    sn.addServer(l1, uniqueId1, new String[0], new ServerLoad(1, 1, 1, 1), LOAD_POLL_INTERVAL);\n    sn.addServer(l2, uniqueId2, new String[0], new ServerLoad(100, .2f, 10, .2f),\n        LOAD_POLL_INTERVAL);\n\n    assertEquals(l1, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    sn.removeServer(l1, uniqueId1);\n    assertEquals(l2, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Collections.singletonList(l2),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n  }\n","date":"2020-05-08 21:11:48","endLine":147,"groupId":"102828","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testRemoveServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8f/6ad81c73a884cd8e5cbb298df17f653ce452a5.src","preCode":"  public void testRemoveServer() {\n    LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    sn.addServer(l1, new String[0], new ServerLoad(1, 1, 1, 1));\n    sn.addServer(l2, new String[0], new ServerLoad(100, .2f, 10, .2f));\n\n    assertEquals(l1, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    sn.removeServer(l1);\n    assertEquals(l2, sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(Collections.singletonList(l2),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/distributed/internal/LocatorLoadSnapshotJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2020-05-08 21:11:48","commitOrder":4,"curCode":"  public void testGroups() {\n    final LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    final ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    final ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    final String uniqueId1 = new InternalDistributedMember(\"localhost\", 1).getUniqueId();\n    final String uniqueId2 = new InternalDistributedMember(\"localhost\", 2).getUniqueId();\n    sn.addServer(l1, uniqueId1, new String[] {\"a\", \"b\"}, new ServerLoad(1, 1, 1, 1),\n        LOAD_POLL_INTERVAL);\n    sn.addServer(l2, uniqueId2, new String[] {\"b\", \"c\"}, new ServerLoad(1, 1, 1, 1),\n        LOAD_POLL_INTERVAL);\n    assertNotNull(sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(l1, sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    sn.updateLoad(l1, uniqueId1, new ServerLoad(10, 1, 1, 1));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    sn.updateLoad(l2, uniqueId2, new ServerLoad(100, 1, 1, 1));\n    assertEquals(l1, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1}),\n        sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2}),\n        sn.getServersForQueue(\"c\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n\n    sn.removeServer(l1, uniqueId1);\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertNull(sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {}),\n        sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n  }\n","date":"2020-05-08 21:11:48","endLine":190,"groupId":"102828","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testGroups","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8f/6ad81c73a884cd8e5cbb298df17f653ce452a5.src","preCode":"  public void testGroups() {\n    LocatorLoadSnapshot sn = new LocatorLoadSnapshot();\n    ServerLocation l1 = new ServerLocation(\"localhost\", 1);\n    ServerLocation l2 = new ServerLocation(\"localhost\", 2);\n    sn.addServer(l1, new String[] {\"a\", \"b\"}, new ServerLoad(1, 1, 1, 1));\n    sn.addServer(l2, new String[] {\"b\", \"c\"}, new ServerLoad(1, 1, 1, 1));\n    assertNotNull(sn.getServerForConnection(null, Collections.EMPTY_SET));\n    assertEquals(l1, sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    sn.updateLoad(l1, new ServerLoad(10, 1, 1, 1));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    sn.updateLoad(l2, new ServerLoad(100, 1, 1, 1));\n    assertEquals(l1, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1}),\n        sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2}),\n        sn.getServersForQueue(\"c\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(null, Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l1, l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n\n    sn.removeServer(l1);\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"b\", Collections.EMPTY_SET));\n    assertNull(sn.getServerForConnection(\"a\", Collections.EMPTY_SET));\n    assertEquals(l2, sn.getServerForConnection(\"c\", Collections.EMPTY_SET));\n    assertEquals(Arrays.asList(new ServerLocation[] {}),\n        sn.getServersForQueue(\"a\", Collections.EMPTY_SET, -1));\n    assertEquals(Arrays.asList(new ServerLocation[] {l2}),\n        sn.getServersForQueue(\"b\", Collections.EMPTY_SET, 5));\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/distributed/internal/LocatorLoadSnapshotJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"be877883f3e123ba3c00af7d01464c2c80785522","commitMessage":"@@@GEODE-7565: Allow gateway receivers with same host and port (2nd try)\n\nThis reverts the revert of the original commit.  adds extra tests and\nalso fixes the originally introduced issues.\n\n----\n\nThere was a problem with Geode WAN replication when GW receivers are\nconfigured with the same hostname-for-senders and port on all servers.\nThe reason for such a setup is deploying Geode cluster on a Kubernetes\ncluster where all GW receivers are reachable from the outside world on\nthe same VIP and port.\n\nThe problem experienced is that shutting down one server is stopping\nreplication to this cluster until the server is up again. This is\nbecause Geode incorrectly assumes there are no more alive servers when\njust one of them is down.  because since they share hostname-for-senders\nand port.  they are treated as one same server.\n\nWith these changes locator is able to distinguish the different\nreceivers using the same hostname and port so replication is not\nimpacted when one server is stopped.","date":"2020-05-08 21:11:48","modifiedFileCount":"13","status":"M","submitter":"Alberto Bustamante Reyes"}]
