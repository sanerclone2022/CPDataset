[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testIndexUsageWithOrderBy3() throws Exception {\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n\n    int numObjects = 30;\n    \r\n    \r\n    \r\n    for (int i = 0; i < numObjects; i++) {\n      Portfolio p = new Portfolio(i);\n      p.pkid = (\"\" + (numObjects - i));\n      testRgn.put(\"\" + i, p);\n    }\n\n    qs = CacheUtils.getQueryService();\n    String queries[] =\n        {\"SELECT DISTINCT * FROM /testRgn p  WHERE p.ID <= 10 order by ID asc limit 1\",\n            \"SELECT DISTINCT * FROM /testRgn p  WHERE p.ID <= 10 order by p.ID desc limit 1\",};\n\n    Object r[][] = new Object[queries.length][2];\n\n    Index i1 = qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"p.ID\", \"/testRgn p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n      CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n      QueryObserverImpl observer = new QueryObserverImpl();\n      QueryObserverHolder.setInstance(observer);\n      SelectResults sr = (SelectResults) q.execute();\n      List results = sr.asList();\n      for (int rows = 0; rows < results.size(); rows++) {\n        Portfolio p = (Portfolio) results.get(0);\n        CacheUtils.getLogger().info(\"index p: \" + p);\n        if (i == 0) {\n          assertEquals(p.getID(), 0);\n\n        } else if (i == 1) {\n          assertEquals(p.getID(), 10);\n\n        }\n      }\n      r[i][1] = sr;\n      CacheUtils.log(\"Executing query: \" + queries[i] + \" with index created\");\n      if (!observer.isIndexesUsed) {\n        fail(\"Index is NOT uesd\");\n      }\n      Iterator itr = observer.indexesUsed.iterator();\n      assertTrue(itr.hasNext());\n      String temp = itr.next().toString();\n      assertEquals(temp, \"Index1\");\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":604,"groupId":"13990","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexUsageWithOrderBy3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/69/c58110d1e654d3465022d2caaa0e30f95a803c.src","preCode":"  public void testIndexUsageWithOrderBy3() throws Exception {\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n\n    int numObjects = 30;\n    \r\n    \r\n    \r\n    for (int i = 0; i < numObjects; i++) {\n      Portfolio p = new Portfolio(i);\n      p.pkid = (\"\" + (numObjects - i));\n      testRgn.put(\"\" + i, p);\n    }\n\n    qs = CacheUtils.getQueryService();\n    String queries[] =\n        {\"SELECT DISTINCT * FROM /testRgn p  WHERE p.ID <= 10 order by ID asc limit 1\",\n            \"SELECT DISTINCT * FROM /testRgn p  WHERE p.ID <= 10 order by p.ID desc limit 1\",};\n\n    Object r[][] = new Object[queries.length][2];\n\n    Index i1 = qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"p.ID\", \"/testRgn p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n      CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n      QueryObserverImpl observer = new QueryObserverImpl();\n      QueryObserverHolder.setInstance(observer);\n      SelectResults sr = (SelectResults) q.execute();\n      List results = sr.asList();\n      for (int rows = 0; rows < results.size(); rows++) {\n        Portfolio p = (Portfolio) results.get(0);\n        CacheUtils.getLogger().info(\"index p: \" + p);\n        if (i == 0) {\n          assertEquals(p.getID(), 0);\n\n        } else if (i == 1) {\n          assertEquals(p.getID(), 10);\n\n        }\n      }\n      r[i][1] = sr;\n      CacheUtils.log(\"Executing query: \" + queries[i] + \" with index created\");\n      if (!observer.isIndexesUsed) {\n        fail(\"Index is NOT uesd\");\n      }\n      Iterator itr = observer.indexesUsed.iterator();\n      assertTrue(itr.hasNext());\n      String temp = itr.next().toString();\n      assertEquals(temp, \"Index1\");\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testIndexUsageWithOrderBy2() throws Exception {\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n\n    int numObjects = 30;\n    \r\n    \r\n    \r\n    for (int i = 0; i < numObjects; i++) {\n      Portfolio p = new Portfolio(i % 2);\n      p.createTime = (numObjects - i);\n      testRgn.put(\"\" + i, p);\n    }\n\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT p.key, p.value FROM /testRgn.entrySet p  WHERE p.value.ID <= 10 order by p.value.createTime asc limit 1\",\n        \"SELECT DISTINCT p.key, p.value FROM /testRgn.entrySet p  WHERE p.value.ID <= 10 order by p.value.createTime desc limit 1\",};\n\n    Object r[][] = new Object[queries.length][2];\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n      CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n      \r\n      SelectResults sr = (SelectResults) q.execute();\n      List results = sr.asList();\n      for (int rows = 0; rows < results.size(); rows++) {\n        Struct s = (Struct) results.get(0);\n        Portfolio p = (Portfolio) s.get(\"value\");\n        CacheUtils.getLogger().info(\"p: \" + p);\n        if (i == 0) {\n          assertEquals(p.createTime, 1);\n        } else if (i == 1) {\n          assertEquals(p.createTime, numObjects);\n        }\n      }\n      r[i][0] = sr;\n      CacheUtils.log(\"Executed query: \" + queries[i]);\n    }\n\n    Index i1 = qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"p.value.ID\", \"/testRgn.entrySet p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n      CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n      QueryObserverImpl observer = new QueryObserverImpl();\n      QueryObserverHolder.setInstance(observer);\n      SelectResults sr = (SelectResults) q.execute();\n      List results = sr.asList();\n      for (int rows = 0; rows < results.size(); rows++) {\n        Struct s = (Struct) results.get(0);\n        Portfolio p = (Portfolio) s.get(\"value\");\n        CacheUtils.getLogger().info(\"index p: \" + p);\n        if (i == 0) {\n          assertEquals(p.createTime, 1);\n        } else if (i == 1) {\n          assertEquals(p.createTime, numObjects);\n        }\n      }\n      r[i][1] = sr;\n      CacheUtils.log(\"Executing query: \" + queries[i] + \" with index created\");\n      if (!observer.isIndexesUsed) {\n        fail(\"Index is NOT uesd\");\n      }\n      Iterator itr = observer.indexesUsed.iterator();\n      assertTrue(itr.hasNext());\n      String temp = itr.next().toString();\n      assertEquals(temp, \"Index1\");\n    }\n    StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n    ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n  }\n","date":"2018-07-18 03:54:18","endLine":681,"groupId":"13992","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexUsageWithOrderBy2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/69/c58110d1e654d3465022d2caaa0e30f95a803c.src","preCode":"  public void testIndexUsageWithOrderBy2() throws Exception {\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n\n    int numObjects = 30;\n    \r\n    \r\n    \r\n    for (int i = 0; i < numObjects; i++) {\n      Portfolio p = new Portfolio(i % 2);\n      p.createTime = (numObjects - i);\n      testRgn.put(\"\" + i, p);\n    }\n\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT p.key, p.value FROM /testRgn.entrySet p  WHERE p.value.ID <= 10 order by p.value.createTime asc limit 1\",\n        \"SELECT DISTINCT p.key, p.value FROM /testRgn.entrySet p  WHERE p.value.ID <= 10 order by p.value.createTime desc limit 1\",};\n\n    Object r[][] = new Object[queries.length][2];\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n      CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n      \r\n      SelectResults sr = (SelectResults) q.execute();\n      List results = sr.asList();\n      for (int rows = 0; rows < results.size(); rows++) {\n        Struct s = (Struct) results.get(0);\n        Portfolio p = (Portfolio) s.get(\"value\");\n        CacheUtils.getLogger().info(\"p: \" + p);\n        if (i == 0) {\n          assertEquals(p.createTime, 1);\n        } else if (i == 1) {\n          assertEquals(p.createTime, numObjects);\n        }\n      }\n      r[i][0] = sr;\n      CacheUtils.log(\"Executed query: \" + queries[i]);\n    }\n\n    Index i1 = qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"p.value.ID\", \"/testRgn.entrySet p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n      CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n      QueryObserverImpl observer = new QueryObserverImpl();\n      QueryObserverHolder.setInstance(observer);\n      SelectResults sr = (SelectResults) q.execute();\n      List results = sr.asList();\n      for (int rows = 0; rows < results.size(); rows++) {\n        Struct s = (Struct) results.get(0);\n        Portfolio p = (Portfolio) s.get(\"value\");\n        CacheUtils.getLogger().info(\"index p: \" + p);\n        if (i == 0) {\n          assertEquals(p.createTime, 1);\n        } else if (i == 1) {\n          assertEquals(p.createTime, numObjects);\n        }\n      }\n      r[i][1] = sr;\n      CacheUtils.log(\"Executing query: \" + queries[i] + \" with index created\");\n      if (!observer.isIndexesUsed) {\n        fail(\"Index is NOT uesd\");\n      }\n      Iterator itr = observer.indexesUsed.iterator();\n      assertTrue(itr.hasNext());\n      String temp = itr.next().toString();\n      assertEquals(temp, \"Index1\");\n    }\n    StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n    ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":607,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testIndexUsageWithOrderBy3() throws Exception {\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n\n    int numObjects = 30;\n    \r\n    \r\n    \r\n    for (int i = 0; i < numObjects; i++) {\n      Portfolio p = new Portfolio(i);\n      p.pkid = (\"\" + (numObjects - i));\n      testRgn.put(\"\" + i, p);\n    }\n\n    qs = CacheUtils.getQueryService();\n    String queries[] =\n        {\"SELECT DISTINCT * FROM \" + SEPARATOR\n            + \"testRgn p  WHERE p.ID <= 10 order by ID asc limit 1\",\n            \"SELECT DISTINCT * FROM \" + SEPARATOR\n                + \"testRgn p  WHERE p.ID <= 10 order by p.ID desc limit 1\",};\n\n    Object r[][] = new Object[queries.length][2];\n\n    Index i1 = qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"p.ID\", SEPARATOR + \"testRgn p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n      CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n      QueryObserverImpl observer = new QueryObserverImpl();\n      QueryObserverHolder.setInstance(observer);\n      SelectResults sr = (SelectResults) q.execute();\n      List results = sr.asList();\n      for (int rows = 0; rows < results.size(); rows++) {\n        Portfolio p = (Portfolio) results.get(0);\n        CacheUtils.getLogger().info(\"index p: \" + p);\n        if (i == 0) {\n          assertEquals(p.getID(), 0);\n\n        } else if (i == 1) {\n          assertEquals(p.getID(), 10);\n\n        }\n      }\n      r[i][1] = sr;\n      CacheUtils.log(\"Executing query: \" + queries[i] + \" with index created\");\n      if (!observer.isIndexesUsed) {\n        fail(\"Index is NOT uesd\");\n      }\n      Iterator itr = observer.indexesUsed.iterator();\n      assertTrue(itr.hasNext());\n      String temp = itr.next().toString();\n      assertEquals(temp, \"Index1\");\n    }\n  }\n","date":"2020-05-29 00:37:39","endLine":618,"groupId":"104637","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testIndexUsageWithOrderBy3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5d/1a1f1313fd495ea562370d8b35707c312c307c.src","preCode":"  public void testIndexUsageWithOrderBy3() throws Exception {\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n\n    int numObjects = 30;\n    \r\n    \r\n    \r\n    for (int i = 0; i < numObjects; i++) {\n      Portfolio p = new Portfolio(i);\n      p.pkid = (\"\" + (numObjects - i));\n      testRgn.put(\"\" + i, p);\n    }\n\n    qs = CacheUtils.getQueryService();\n    String queries[] =\n        {\"SELECT DISTINCT * FROM /testRgn p  WHERE p.ID <= 10 order by ID asc limit 1\",\n            \"SELECT DISTINCT * FROM /testRgn p  WHERE p.ID <= 10 order by p.ID desc limit 1\",};\n\n    Object r[][] = new Object[queries.length][2];\n\n    Index i1 = qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"p.ID\", \"/testRgn p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n      CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n      QueryObserverImpl observer = new QueryObserverImpl();\n      QueryObserverHolder.setInstance(observer);\n      SelectResults sr = (SelectResults) q.execute();\n      List results = sr.asList();\n      for (int rows = 0; rows < results.size(); rows++) {\n        Portfolio p = (Portfolio) results.get(0);\n        CacheUtils.getLogger().info(\"index p: \" + p);\n        if (i == 0) {\n          assertEquals(p.getID(), 0);\n\n        } else if (i == 1) {\n          assertEquals(p.getID(), 10);\n\n        }\n      }\n      r[i][1] = sr;\n      CacheUtils.log(\"Executing query: \" + queries[i] + \" with index created\");\n      if (!observer.isIndexesUsed) {\n        fail(\"Index is NOT uesd\");\n      }\n      Iterator itr = observer.indexesUsed.iterator();\n      assertTrue(itr.hasNext());\n      String temp = itr.next().toString();\n      assertEquals(temp, \"Index1\");\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":564,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testIndexUsageWithOrderBy2() throws Exception {\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n\n    int numObjects = 30;\n    \r\n    \r\n    \r\n    for (int i = 0; i < numObjects; i++) {\n      Portfolio p = new Portfolio(i % 2);\n      p.createTime = (numObjects - i);\n      testRgn.put(\"\" + i, p);\n    }\n\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT p.key, p.value FROM \" + SEPARATOR\n            + \"testRgn.entrySet p  WHERE p.value.ID <= 10 order by p.value.createTime asc limit 1\",\n        \"SELECT DISTINCT p.key, p.value FROM \" + SEPARATOR\n            + \"testRgn.entrySet p  WHERE p.value.ID <= 10 order by p.value.createTime desc limit 1\",};\n\n    Object r[][] = new Object[queries.length][2];\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n      CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n      \r\n      SelectResults sr = (SelectResults) q.execute();\n      List results = sr.asList();\n      for (int rows = 0; rows < results.size(); rows++) {\n        Struct s = (Struct) results.get(0);\n        Portfolio p = (Portfolio) s.get(\"value\");\n        CacheUtils.getLogger().info(\"p: \" + p);\n        if (i == 0) {\n          assertEquals(p.createTime, 1);\n        } else if (i == 1) {\n          assertEquals(p.createTime, numObjects);\n        }\n      }\n      r[i][0] = sr;\n      CacheUtils.log(\"Executed query: \" + queries[i]);\n    }\n\n    Index i1 = qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"p.value.ID\",\n        SEPARATOR + \"testRgn.entrySet p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n      CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n      QueryObserverImpl observer = new QueryObserverImpl();\n      QueryObserverHolder.setInstance(observer);\n      SelectResults sr = (SelectResults) q.execute();\n      List results = sr.asList();\n      for (int rows = 0; rows < results.size(); rows++) {\n        Struct s = (Struct) results.get(0);\n        Portfolio p = (Portfolio) s.get(\"value\");\n        CacheUtils.getLogger().info(\"index p: \" + p);\n        if (i == 0) {\n          assertEquals(p.createTime, 1);\n        } else if (i == 1) {\n          assertEquals(p.createTime, numObjects);\n        }\n      }\n      r[i][1] = sr;\n      CacheUtils.log(\"Executing query: \" + queries[i] + \" with index created\");\n      if (!observer.isIndexesUsed) {\n        fail(\"Index is NOT uesd\");\n      }\n      Iterator itr = observer.indexesUsed.iterator();\n      assertTrue(itr.hasNext());\n      String temp = itr.next().toString();\n      assertEquals(temp, \"Index1\");\n    }\n    StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n    ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n  }\n","date":"2020-05-29 00:37:39","endLine":698,"groupId":"104637","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testIndexUsageWithOrderBy2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5d/1a1f1313fd495ea562370d8b35707c312c307c.src","preCode":"  public void testIndexUsageWithOrderBy2() throws Exception {\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n\n    int numObjects = 30;\n    \r\n    \r\n    \r\n    for (int i = 0; i < numObjects; i++) {\n      Portfolio p = new Portfolio(i % 2);\n      p.createTime = (numObjects - i);\n      testRgn.put(\"\" + i, p);\n    }\n\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT p.key, p.value FROM /testRgn.entrySet p  WHERE p.value.ID <= 10 order by p.value.createTime asc limit 1\",\n        \"SELECT DISTINCT p.key, p.value FROM /testRgn.entrySet p  WHERE p.value.ID <= 10 order by p.value.createTime desc limit 1\",};\n\n    Object r[][] = new Object[queries.length][2];\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n      CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n      \r\n      SelectResults sr = (SelectResults) q.execute();\n      List results = sr.asList();\n      for (int rows = 0; rows < results.size(); rows++) {\n        Struct s = (Struct) results.get(0);\n        Portfolio p = (Portfolio) s.get(\"value\");\n        CacheUtils.getLogger().info(\"p: \" + p);\n        if (i == 0) {\n          assertEquals(p.createTime, 1);\n        } else if (i == 1) {\n          assertEquals(p.createTime, numObjects);\n        }\n      }\n      r[i][0] = sr;\n      CacheUtils.log(\"Executed query: \" + queries[i]);\n    }\n\n    Index i1 = qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"p.value.ID\", \"/testRgn.entrySet p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n      CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n      QueryObserverImpl observer = new QueryObserverImpl();\n      QueryObserverHolder.setInstance(observer);\n      SelectResults sr = (SelectResults) q.execute();\n      List results = sr.asList();\n      for (int rows = 0; rows < results.size(); rows++) {\n        Struct s = (Struct) results.get(0);\n        Portfolio p = (Portfolio) s.get(\"value\");\n        CacheUtils.getLogger().info(\"index p: \" + p);\n        if (i == 0) {\n          assertEquals(p.createTime, 1);\n        } else if (i == 1) {\n          assertEquals(p.createTime, numObjects);\n        }\n      }\n      r[i][1] = sr;\n      CacheUtils.log(\"Executing query: \" + queries[i] + \" with index created\");\n      if (!observer.isIndexesUsed) {\n        fail(\"Index is NOT uesd\");\n      }\n      Iterator itr = observer.indexesUsed.iterator();\n      assertTrue(itr.hasNext());\n      String temp = itr.next().toString();\n      assertEquals(temp, \"Index1\");\n    }\n    StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n    ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":621,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
