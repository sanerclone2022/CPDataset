[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2018-07-18 03:54:18","endLine":953,"groupId":"42400","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEventsDuringQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f4/3276ee163242416cc04af89b2ca00088c4b47a.src","preCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":830,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testMultipleExecuteWithInitialResults() throws Exception {\n    final int numObjects = 200;\n    final int totalObjects = 500;\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    client.invoke(setTestHook());\n    final String cqName = \"testMultiExecuteWithInitialResults\";\n\n    \r\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ first\") {\n          public void run2() throws CacheException {\n            SelectResults cqResults = null;\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            try {\n              cqResults = cq1.executeWithInitialResults();\n\n            } catch (Exception e) {\n              AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n              err.initCause(e);\n              throw err;\n            }\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ second\") {\n      public void run2() throws CacheException {\n        try {\n          Thread.sleep(2000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n        try {\n          cq1.executeWithInitialResults();\n        } catch (IllegalStateException e) {\n          \r\n        } catch (Exception e) {\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Release latch\") {\n      public void run2() throws CacheException {\n        \r\n        \r\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n        CqQueryImpl.testHook.ready();\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2018-07-18 03:54:18","endLine":1124,"groupId":"42402","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleExecuteWithInitialResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f4/3276ee163242416cc04af89b2ca00088c4b47a.src","preCode":"  public void testMultipleExecuteWithInitialResults() throws Exception {\n    final int numObjects = 200;\n    final int totalObjects = 500;\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    client.invoke(setTestHook());\n    final String cqName = \"testMultiExecuteWithInitialResults\";\n\n    \r\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ first\") {\n          public void run2() throws CacheException {\n            SelectResults cqResults = null;\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            try {\n              cqResults = cq1.executeWithInitialResults();\n\n            } catch (Exception e) {\n              AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n              err.initCause(e);\n              throw err;\n            }\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ second\") {\n      public void run2() throws CacheException {\n        try {\n          Thread.sleep(2000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n        try {\n          cq1.executeWithInitialResults();\n        } catch (IllegalStateException e) {\n          \r\n        } catch (Exception e) {\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Release latch\") {\n      public void run2() throws CacheException {\n        \r\n        \r\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n        CqQueryImpl.testHook.ready();\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":965,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-10-13 03:52:43","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2018-07-18 03:54:18","endLine":953,"groupId":"42400","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEventsDuringQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f4/3276ee163242416cc04af89b2ca00088c4b47a.src","preCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":830,"status":"N"},{"authorDate":"2018-10-13 03:52:43","commitOrder":2,"curCode":"  public void testMultipleExecuteWithInitialResults() throws Exception {\n    final int numObjects = 200;\n    final int totalObjects = 500;\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    client.invoke(setTestHook());\n    final String cqName = \"testMultiExecuteWithInitialResults\";\n\n    \r\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ first\") {\n          public void run2() throws CacheException {\n            SelectResults cqResults = null;\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            try {\n              cqResults = cq1.executeWithInitialResults();\n\n            } catch (Exception e) {\n              AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n              err.initCause(e);\n              throw err;\n            }\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ second\") {\n      public void run2() throws CacheException {\n        try {\n          Thread.sleep(2000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n        try {\n          cq1.executeWithInitialResults();\n        } catch (IllegalStateException e) {\n          \r\n        } catch (Exception e) {\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Release latch\") {\n      public void run2() throws CacheException {\n        \r\n        \r\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n        CqQueryImpl.testHook.ready();\n      }\n    });\n\n    \r\n    processCqs.get(1, TimeUnit.MINUTES);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2018-10-19 08:01:02","endLine":1129,"groupId":"42402","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleExecuteWithInitialResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/fa/c2d7f54b443b7cf5f4034f0a37350093709563.src","preCode":"  public void testMultipleExecuteWithInitialResults() throws Exception {\n    final int numObjects = 200;\n    final int totalObjects = 500;\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    client.invoke(setTestHook());\n    final String cqName = \"testMultiExecuteWithInitialResults\";\n\n    \r\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ first\") {\n          public void run2() throws CacheException {\n            SelectResults cqResults = null;\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            try {\n              cqResults = cq1.executeWithInitialResults();\n\n            } catch (Exception e) {\n              AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n              err.initCause(e);\n              throw err;\n            }\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ second\") {\n      public void run2() throws CacheException {\n        try {\n          Thread.sleep(2000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n        try {\n          cq1.executeWithInitialResults();\n        } catch (IllegalStateException e) {\n          \r\n        } catch (Exception e) {\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Release latch\") {\n      public void run2() throws CacheException {\n        \r\n        \r\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n        CqQueryImpl.testHook.ready();\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":969,"status":"M"}],"commitId":"61014b2f20f4e57e59bb2ffe2e9968545ba0e37a","commitMessage":"@@@GEODE-5863: Ingoring testMultipleExecuteWithInitialResults\n\nThis test fails after increasing the Awaitility timeout. However.  it\npreviously was not testing anything because it hit the (smaller)\nawailitity timeout but ignored the timeout exception.\n\nIgnoring this test until we actually rework this into a valid test.\n\nCo-Authored-By \"Ken Howe\" <khowe@pivotal.io>\n","date":"2018-10-19 08:01:02","modifiedFileCount":"1","status":"M","submitter":"Dan Smith"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2019-01-12 07:53:54","endLine":971,"groupId":"5962","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEventsDuringQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f5/b9f0166626aa1d97623ee84b1431b9cbc5068b.src","preCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":845,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public void testMultipleExecuteWithInitialResults() throws Exception {\n    final int numObjects = 200;\n    final int totalObjects = 500;\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    client.invoke(setTestHook());\n    final String cqName = \"testMultiExecuteWithInitialResults\";\n\n    \r\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ first\") {\n          @Override\n          public void run2() throws CacheException {\n            SelectResults cqResults = null;\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            try {\n              cqResults = cq1.executeWithInitialResults();\n\n            } catch (Exception e) {\n              AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n              err.initCause(e);\n              throw err;\n            }\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ second\") {\n      @Override\n      public void run2() throws CacheException {\n        try {\n          Thread.sleep(2000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n        try {\n          cq1.executeWithInitialResults();\n        } catch (IllegalStateException e) {\n          \r\n        } catch (Exception e) {\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Release latch\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        \r\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n        CqQueryImpl.testHook.ready();\n      }\n    });\n\n    \r\n    processCqs.get(1, TimeUnit.MINUTES);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2019-01-12 07:53:54","endLine":1149,"groupId":"5964","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleExecuteWithInitialResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f5/b9f0166626aa1d97623ee84b1431b9cbc5068b.src","preCode":"  public void testMultipleExecuteWithInitialResults() throws Exception {\n    final int numObjects = 200;\n    final int totalObjects = 500;\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    client.invoke(setTestHook());\n    final String cqName = \"testMultiExecuteWithInitialResults\";\n\n    \r\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ first\") {\n          public void run2() throws CacheException {\n            SelectResults cqResults = null;\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            try {\n              cqResults = cq1.executeWithInitialResults();\n\n            } catch (Exception e) {\n              AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n              err.initCause(e);\n              throw err;\n            }\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ second\") {\n      public void run2() throws CacheException {\n        try {\n          Thread.sleep(2000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n        try {\n          cq1.executeWithInitialResults();\n        } catch (IllegalStateException e) {\n          \r\n        } catch (Exception e) {\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Release latch\") {\n      public void run2() throws CacheException {\n        \r\n        \r\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n        CqQueryImpl.testHook.ready();\n      }\n    });\n\n    \r\n    processCqs.get(1, TimeUnit.MINUTES);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":984,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":4,"curCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region =\n            getCache().getRegion(SEPARATOR + \"root\" + SEPARATOR + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region =\n            getCache().getRegion(SEPARATOR + \"root\" + SEPARATOR + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2020-05-29 00:37:39","endLine":978,"groupId":"10647","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testEventsDuringQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/02/3ed283244cf7e81ebaa53df877b684b01bc642.src","preCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":850,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":4,"curCode":"  public void testMultipleExecuteWithInitialResults() throws Exception {\n    final int numObjects = 200;\n    final int totalObjects = 500;\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    client.invoke(setTestHook());\n    final String cqName = \"testMultiExecuteWithInitialResults\";\n\n    \r\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region =\n            getCache().getRegion(SEPARATOR + \"root\" + SEPARATOR + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region =\n            getCache().getRegion(SEPARATOR + \"root\" + SEPARATOR + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ first\") {\n          @Override\n          public void run2() throws CacheException {\n            SelectResults cqResults = null;\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            try {\n              cqResults = cq1.executeWithInitialResults();\n\n            } catch (Exception e) {\n              AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n              err.initCause(e);\n              throw err;\n            }\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ second\") {\n      @Override\n      public void run2() throws CacheException {\n        try {\n          Thread.sleep(2000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n        try {\n          cq1.executeWithInitialResults();\n        } catch (IllegalStateException e) {\n          \r\n        } catch (Exception e) {\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Release latch\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        \r\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n        CqQueryImpl.testHook.ready();\n      }\n    });\n\n    \r\n    processCqs.get(1, TimeUnit.MINUTES);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2020-05-29 00:37:39","endLine":1158,"groupId":"10647","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testMultipleExecuteWithInitialResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/02/3ed283244cf7e81ebaa53df877b684b01bc642.src","preCode":"  public void testMultipleExecuteWithInitialResults() throws Exception {\n    final int numObjects = 200;\n    final int totalObjects = 500;\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    client.invoke(setTestHook());\n    final String cqName = \"testMultiExecuteWithInitialResults\";\n\n    \r\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ first\") {\n          @Override\n          public void run2() throws CacheException {\n            SelectResults cqResults = null;\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            try {\n              cqResults = cq1.executeWithInitialResults();\n\n            } catch (Exception e) {\n              AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n              err.initCause(e);\n              throw err;\n            }\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ second\") {\n      @Override\n      public void run2() throws CacheException {\n        try {\n          Thread.sleep(2000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n        try {\n          cq1.executeWithInitialResults();\n        } catch (IllegalStateException e) {\n          \r\n        } catch (Exception e) {\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invokeAsync(new CacheSerializableRunnable(\"Release latch\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        \r\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          AssertionError err = new AssertionError(\"test hook lock interrupted\" + cqName);\n          err.initCause(e);\n          throw err;\n        }\n        CqQueryImpl.testHook.ready();\n      }\n    });\n\n    \r\n    processCqs.get(1, TimeUnit.MINUTES);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":991,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
