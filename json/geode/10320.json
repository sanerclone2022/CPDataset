[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void durableFailover(int redundancyLevel) throws InterruptedException {\n\n    \r\n    Integer[] ports = ((Integer[]) this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, new Boolean(true))));\n    final int server1Port = ports[0].intValue();\n\n    \r\n    final int server2Port = ((Integer) this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(Host.getHost(0)), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(Host.getHost(0)), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.disableShufflingOfEndpoints());\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true),\n        new Integer(server2Port)));\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(publisherClientVM.getHost()), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(5000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    publishEntries(numberOfEntries);\n\n\n    \r\n    this.restartDurableClient(new Object[] {clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE});\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries before failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 1; i < numberOfEntries + 1; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(1000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    setPrimaryRecoveryCheck();\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        assertNull(region.getEntry(\"0\"));\n      }\n    });\n\n    checkPrimaryRecovery();\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries after failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 2; i < numberOfEntries + 2; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries + 2, numberOfEntries);\n\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","date":"2018-07-18 03:54:18","endLine":1273,"groupId":"2075","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"durableFailover","params":"(intredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/76/8162abc8cbdec3b3bda52515564537fadc2ec4.src","preCode":"  public void durableFailover(int redundancyLevel) throws InterruptedException {\n\n    \r\n    Integer[] ports = ((Integer[]) this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, new Boolean(true))));\n    final int server1Port = ports[0].intValue();\n\n    \r\n    final int server2Port = ((Integer) this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(Host.getHost(0)), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(Host.getHost(0)), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.disableShufflingOfEndpoints());\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true),\n        new Integer(server2Port)));\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(publisherClientVM.getHost()), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(5000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    publishEntries(numberOfEntries);\n\n\n    \r\n    this.restartDurableClient(new Object[] {clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE});\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries before failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 1; i < numberOfEntries + 1; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(1000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    setPrimaryRecoveryCheck();\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        assertNull(region.getEntry(\"0\"));\n      }\n    });\n\n    checkPrimaryRecovery();\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries after failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 2; i < numberOfEntries + 2; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries + 2, numberOfEntries);\n\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1110,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void durableFailoverAfterReconnect(int redundancyLevel) {\n    \r\n    Integer[] ports = ((Integer[]) this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, true)));\n    final int server1Port = ports[0].intValue();\n\n    ports = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, true));\n    int server2Port = ports[0];\n\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(Host.getHost(0)), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(Host.getHost(0)), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.disableShufflingOfEndpoints());\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(publisherClientVM.getHost()), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(10000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n      }\n    });\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    publishEntries(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE});\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries before failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 1; i < numberOfEntries + 1; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    if (redundancyLevel == 1) {\n      this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n    } else {\n      this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n    }\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        assertNull(region.getEntry(\"0\"));\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries after failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 2; i < numberOfEntries + 2; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    if (redundancyLevel == 1) {\n      this.verifyListenerUpdates(numberOfEntries + 2, numberOfEntries);\n    } else {\n      this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n    }\n\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","date":"2018-07-18 03:54:18","endLine":1440,"groupId":"20203","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"durableFailoverAfterReconnect","params":"(intredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/76/8162abc8cbdec3b3bda52515564537fadc2ec4.src","preCode":"  public void durableFailoverAfterReconnect(int redundancyLevel) {\n    \r\n    Integer[] ports = ((Integer[]) this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, true)));\n    final int server1Port = ports[0].intValue();\n\n    ports = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, true));\n    int server2Port = ports[0];\n\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(Host.getHost(0)), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(Host.getHost(0)), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.disableShufflingOfEndpoints());\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(publisherClientVM.getHost()), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(10000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n      }\n    });\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    publishEntries(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE});\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries before failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 1; i < numberOfEntries + 1; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    if (redundancyLevel == 1) {\n      this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n    } else {\n      this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n    }\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        assertNull(region.getEntry(\"0\"));\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries after failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 2; i < numberOfEntries + 2; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    if (redundancyLevel == 1) {\n      this.verifyListenerUpdates(numberOfEntries + 2, numberOfEntries);\n    } else {\n      this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n    }\n\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1276,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-07-20 04:46:49","codes":[{"authorDate":"2018-07-20 04:46:49","commitOrder":2,"curCode":"  public void durableFailover(int redundancyLevel) {\n\n    \r\n    Integer[] ports = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, Boolean.TRUE));\n    final int server1Port = ports[0];\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        server2Port));\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(5000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    publishEntries(numberOfEntries);\n\n\n    \r\n    this.restartDurableClient(new Object[] {clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE});\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries before failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region<String, String> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 1; i < numberOfEntries + 1; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(1000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    setPrimaryRecoveryCheck();\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        assertNull(region.getEntry(\"0\"));\n      }\n    });\n\n    checkPrimaryRecovery();\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries after failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region<String, String> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 2; i < numberOfEntries + 2; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries + 2, numberOfEntries);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-07-20 04:46:49","endLine":1215,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"durableFailover","params":"(intredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3f/de87cbe2e68648bca650b7cd09f691efea0908.src","preCode":"  public void durableFailover(int redundancyLevel) throws InterruptedException {\n\n    \r\n    Integer[] ports = ((Integer[]) this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, new Boolean(true))));\n    final int server1Port = ports[0].intValue();\n\n    \r\n    final int server2Port = ((Integer) this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(Host.getHost(0)), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(Host.getHost(0)), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.disableShufflingOfEndpoints());\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true),\n        new Integer(server2Port)));\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(publisherClientVM.getHost()), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(5000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    publishEntries(numberOfEntries);\n\n\n    \r\n    this.restartDurableClient(new Object[] {clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE});\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries before failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 1; i < numberOfEntries + 1; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(1000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    setPrimaryRecoveryCheck();\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        assertNull(region.getEntry(\"0\"));\n      }\n    });\n\n    checkPrimaryRecovery();\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries after failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 2; i < numberOfEntries + 2; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries + 2, numberOfEntries);\n\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1053,"status":"M"},{"authorDate":"2018-07-20 04:46:49","commitOrder":2,"curCode":"  public void durableFailoverAfterReconnect(int redundancyLevel) {\n    \r\n    Integer[] ports = this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, true));\n    final int server1Port = ports[0];\n\n    ports = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, true));\n    int server2Port = ports[0];\n\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(10000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n      }\n    });\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    publishEntries(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE});\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries before failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region<String, String> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 1; i < numberOfEntries + 1; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    if (redundancyLevel == 1) {\n      this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n    } else {\n      this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n    }\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        assertNull(region.getEntry(\"0\"));\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries after failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region<String, String> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 2; i < numberOfEntries + 2; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    if (redundancyLevel == 1) {\n      this.verifyListenerUpdates(numberOfEntries + 2, numberOfEntries);\n    } else {\n      this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n    }\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-07-20 04:46:49","endLine":1382,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"durableFailoverAfterReconnect","params":"(intredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3f/de87cbe2e68648bca650b7cd09f691efea0908.src","preCode":"  public void durableFailoverAfterReconnect(int redundancyLevel) {\n    \r\n    Integer[] ports = ((Integer[]) this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, true)));\n    final int server1Port = ports[0].intValue();\n\n    ports = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, true));\n    int server2Port = ports[0];\n\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(Host.getHost(0)), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(Host.getHost(0)), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.disableShufflingOfEndpoints());\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(publisherClientVM.getHost()), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(10000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n      }\n    });\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    publishEntries(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE});\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries before failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 1; i < numberOfEntries + 1; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    if (redundancyLevel == 1) {\n      this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n    } else {\n      this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n    }\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        assertNull(region.getEntry(\"0\"));\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries after failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 2; i < numberOfEntries + 2; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    if (redundancyLevel == 1) {\n      this.verifyListenerUpdates(numberOfEntries + 2, numberOfEntries);\n    } else {\n      this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n    }\n\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1218,"status":"M"}],"commitId":"053efe9a5d4c17f6b753c2962fd2b73167320487","commitMessage":"@@@GEODE-5428: Fix test and cleanup of warnings. (#2159)\n\n* GEODE-5428: Fix test and cleanup of warnings.\n\nCo-authored-by: Finn Southerland <fsoutherland@pivotal.io>\n\n* GEODE-5428: Intellij Analyze != spotless\n\n* GEODE-1703: fixed a few items that were commented on.\n","date":"2018-07-20 04:46:49","modifiedFileCount":"6","status":"M","submitter":"mhansonp"},{"authorTime":"2018-09-21 01:36:27","codes":[{"authorDate":"2018-09-21 01:36:27","commitOrder":3,"curCode":"  private void durableFailover(int redundancyLevel) {\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    durableClientId = getName() + \"_client\";\n\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, VERY_LONG_DURABLE_TIMEOUT_SECONDS),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        server2Port));\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.restartDurableClient(VERY_LONG_DURABLE_TIMEOUT_SECONDS, clientPool, Boolean.TRUE);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    publishEntries(2, 1);\n\n    \r\n    this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      public void run2() throws CacheException {\n\n        Region<Object, Object> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertThat(region).isNotNull();\n\n        assertThat(region.getEntry(\"0\")).isNull();\n        assertThat(region.getEntry(\"2\")).isNotNull();\n      }\n    });\n\n    publishEntries(3, 1);\n\n    if (redundancyLevel == 1) {\n      \r\n      this.checkListenerEvents(3, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n    }\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-09-21 01:36:27","endLine":551,"groupId":"37229","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"durableFailover","params":"(intredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/90/d4f7a0115cfe9d6fec81bc13dd96550cd75742.src","preCode":"  public void durableFailover(int redundancyLevel) {\n\n    \r\n    Integer[] ports = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, Boolean.TRUE));\n    final int server1Port = ports[0];\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        server2Port));\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(5000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    publishEntries(numberOfEntries);\n\n\n    \r\n    this.restartDurableClient(new Object[] {clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE});\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries before failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region<String, String> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 1; i < numberOfEntries + 1; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(1000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    setPrimaryRecoveryCheck();\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        assertNull(region.getEntry(\"0\"));\n      }\n    });\n\n    checkPrimaryRecovery();\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries after failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region<String, String> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 2; i < numberOfEntries + 2; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries + 2, numberOfEntries);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":449,"status":"M"},{"authorDate":"2018-09-21 01:36:27","commitOrder":3,"curCode":"  private void durableFailoverAfterReconnect(int redundancyLevel) {\n    \r\n    server1Port = this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, true));\n\n    int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, true));\n\n    \r\n    durableClientId = getName() + \"_client\";\n\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, VERY_LONG_DURABLE_TIMEOUT_SECONDS),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    verifyDurableClientPresent(VERY_LONG_DURABLE_TIMEOUT_SECONDS, durableClientId, server1VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.restartDurableClient(VERY_LONG_DURABLE_TIMEOUT_SECONDS, clientPool, Boolean.TRUE);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    publishEntries(2, 2);\n\n    \r\n    if (redundancyLevel == 1) {\n      this.checkListenerEvents(4, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n    }\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      public void run2() throws CacheException {\n        Region<Object, Object> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertThat(region).isNotNull();\n\n        \r\n        assertThat(region.getEntry(\"0\")).isNull();\n      }\n    });\n\n    publishEntries(4, 1);\n\n    \r\n    if (redundancyLevel == 1) {\n      this.checkListenerEvents(5, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(3, 1, -1, this.durableClientVM);\n    }\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-09-21 01:36:27","endLine":652,"groupId":"912","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"durableFailoverAfterReconnect","params":"(intredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/90/d4f7a0115cfe9d6fec81bc13dd96550cd75742.src","preCode":"  public void durableFailoverAfterReconnect(int redundancyLevel) {\n    \r\n    Integer[] ports = this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, true));\n    final int server1Port = ports[0];\n\n    ports = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServerReturnPorts(regionName, true));\n    int server2Port = ports[0];\n\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    try {\n      java.lang.Thread.sleep(10000);\n    } catch (java.lang.InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n      }\n    });\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    publishEntries(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, durableClientTimeout), Boolean.TRUE});\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries before failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region<String, String> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 1; i < numberOfEntries + 1; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    if (redundancyLevel == 1) {\n      this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n    } else {\n      this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n    }\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        assertNull(region.getEntry(\"0\"));\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish entries after failover\") {\n      public void run2() throws CacheException {\n        \r\n        Region<String, String> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 2; i < numberOfEntries + 2; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    \r\n    if (redundancyLevel == 1) {\n      this.verifyListenerUpdates(numberOfEntries + 2, numberOfEntries);\n    } else {\n      this.verifyListenerUpdates(numberOfEntries + 1, numberOfEntries);\n    }\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":554,"status":"M"}],"commitId":"4da7c59049561588f87bd571213fed6ffede1de5","commitMessage":"@@@GEODE-5428: Refactored DurableClientTests due to massive duplication\n\nThe DurableClientSimpleDUnitTest class was huge and doing three different\ntypes of testing.  so the code was partitioned into classes representing\nthe types.\n\nFurther.  there were some bugs that needed to be addressed in the code.\n\nCo-Authored-By: Galen O'Sullivan <gosullivan@pivotal.io>","date":"2018-09-21 01:36:27","modifiedFileCount":"7","status":"M","submitter":"mhansonp"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":4,"curCode":"  private void durableFailover(int redundancyLevel) {\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    durableClientId = getName() + \"_client\";\n\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, VERY_LONG_DURABLE_TIMEOUT_SECONDS),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        server2Port));\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.restartDurableClient(VERY_LONG_DURABLE_TIMEOUT_SECONDS, clientPool, Boolean.TRUE);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    publishEntries(2, 1);\n\n    \r\n    this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      @Override\n      public void run2() throws CacheException {\n\n        Region<Object, Object> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertThat(region).isNotNull();\n\n        assertThat(region.getEntry(\"0\")).isNull();\n        assertThat(region.getEntry(\"2\")).isNotNull();\n      }\n    });\n\n    publishEntries(3, 1);\n\n    if (redundancyLevel == 1) {\n      \r\n      this.checkListenerEvents(3, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n    }\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2019-01-12 07:53:54","endLine":545,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"durableFailover","params":"(intredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/17/2c4807de920a3912a9977a89929d36b4e1c7b4.src","preCode":"  private void durableFailover(int redundancyLevel) {\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    durableClientId = getName() + \"_client\";\n\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, VERY_LONG_DURABLE_TIMEOUT_SECONDS),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        server2Port));\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.restartDurableClient(VERY_LONG_DURABLE_TIMEOUT_SECONDS, clientPool, Boolean.TRUE);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    publishEntries(2, 1);\n\n    \r\n    this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      public void run2() throws CacheException {\n\n        Region<Object, Object> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertThat(region).isNotNull();\n\n        assertThat(region.getEntry(\"0\")).isNull();\n        assertThat(region.getEntry(\"2\")).isNotNull();\n      }\n    });\n\n    publishEntries(3, 1);\n\n    if (redundancyLevel == 1) {\n      \r\n      this.checkListenerEvents(3, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n    }\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":4,"curCode":"  private void durableFailoverAfterReconnect(int redundancyLevel) {\n    \r\n    server1Port = this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, true));\n\n    int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, true));\n\n    \r\n    durableClientId = getName() + \"_client\";\n\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, VERY_LONG_DURABLE_TIMEOUT_SECONDS),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    verifyDurableClientPresent(VERY_LONG_DURABLE_TIMEOUT_SECONDS, durableClientId, server1VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.restartDurableClient(VERY_LONG_DURABLE_TIMEOUT_SECONDS, clientPool, Boolean.TRUE);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    publishEntries(2, 2);\n\n    \r\n    if (redundancyLevel == 1) {\n      this.checkListenerEvents(4, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n    }\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      @Override\n      public void run2() throws CacheException {\n        Region<Object, Object> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertThat(region).isNotNull();\n\n        \r\n        assertThat(region.getEntry(\"0\")).isNull();\n      }\n    });\n\n    publishEntries(4, 1);\n\n    \r\n    if (redundancyLevel == 1) {\n      this.checkListenerEvents(5, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(3, 1, -1, this.durableClientVM);\n    }\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2019-01-12 07:53:54","endLine":666,"groupId":"28570","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"durableFailoverAfterReconnect","params":"(intredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/17/2c4807de920a3912a9977a89929d36b4e1c7b4.src","preCode":"  private void durableFailoverAfterReconnect(int redundancyLevel) {\n    \r\n    server1Port = this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, true));\n\n    int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, true));\n\n    \r\n    durableClientId = getName() + \"_client\";\n\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, VERY_LONG_DURABLE_TIMEOUT_SECONDS),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    verifyDurableClientPresent(VERY_LONG_DURABLE_TIMEOUT_SECONDS, durableClientId, server1VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.restartDurableClient(VERY_LONG_DURABLE_TIMEOUT_SECONDS, clientPool, Boolean.TRUE);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    publishEntries(2, 2);\n\n    \r\n    if (redundancyLevel == 1) {\n      this.checkListenerEvents(4, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n    }\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      public void run2() throws CacheException {\n        Region<Object, Object> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertThat(region).isNotNull();\n\n        \r\n        assertThat(region.getEntry(\"0\")).isNull();\n      }\n    });\n\n    publishEntries(4, 1);\n\n    \r\n    if (redundancyLevel == 1) {\n      this.checkListenerEvents(5, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(3, 1, -1, this.durableClientVM);\n    }\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2019-10-26 06:51:12","commitOrder":5,"curCode":"  private void durableFailover(int redundancyLevel) {\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    durableClientId = getName() + \"_client\";\n\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, VERY_LONG_DURABLE_TIMEOUT_SECONDS),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        server2Port));\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.restartDurableClient(VERY_LONG_DURABLE_TIMEOUT_SECONDS, clientPool, Boolean.TRUE);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    publishEntries(2, 1);\n\n    \r\n    this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      @Override\n      public void run2() throws CacheException {\n\n        Region<Object, Object> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertThat(region).isNotNull();\n\n        assertThat(region.getEntry(\"0\")).isNull();\n        assertThat(region.getEntry(\"2\")).isNotNull();\n      }\n    });\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    if (redundancyLevel == 0) {\n      this.server2VM.invoke(() -> verifyClientHasConnected());\n    }\n\n    publishEntries(3, 1);\n\n    \r\n    this.checkListenerEvents(3, 1, -1, this.durableClientVM);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2019-10-26 06:51:12","endLine":548,"groupId":"18436","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"durableFailover","params":"(intredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/35/3c39f6f3723e8abac69a02572a93c9c4b1e374.src","preCode":"  private void durableFailover(int redundancyLevel) {\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    durableClientId = getName() + \"_client\";\n\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, VERY_LONG_DURABLE_TIMEOUT_SECONDS),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        server2Port));\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.restartDurableClient(VERY_LONG_DURABLE_TIMEOUT_SECONDS, clientPool, Boolean.TRUE);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    publishEntries(2, 1);\n\n    \r\n    this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      @Override\n      public void run2() throws CacheException {\n\n        Region<Object, Object> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertThat(region).isNotNull();\n\n        assertThat(region.getEntry(\"0\")).isNull();\n        assertThat(region.getEntry(\"2\")).isNotNull();\n      }\n    });\n\n    publishEntries(3, 1);\n\n    if (redundancyLevel == 1) {\n      \r\n      this.checkListenerEvents(3, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n    }\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":5,"curCode":"  private void durableFailoverAfterReconnect(int redundancyLevel) {\n    \r\n    server1Port = this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, true));\n\n    int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, true));\n\n    \r\n    durableClientId = getName() + \"_client\";\n\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, VERY_LONG_DURABLE_TIMEOUT_SECONDS),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    verifyDurableClientPresent(VERY_LONG_DURABLE_TIMEOUT_SECONDS, durableClientId, server1VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.restartDurableClient(VERY_LONG_DURABLE_TIMEOUT_SECONDS, clientPool, Boolean.TRUE);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    publishEntries(2, 2);\n\n    \r\n    if (redundancyLevel == 1) {\n      this.checkListenerEvents(4, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n    }\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      @Override\n      public void run2() throws CacheException {\n        Region<Object, Object> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertThat(region).isNotNull();\n\n        \r\n        assertThat(region.getEntry(\"0\")).isNull();\n      }\n    });\n\n    publishEntries(4, 1);\n\n    \r\n    if (redundancyLevel == 1) {\n      this.checkListenerEvents(5, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(3, 1, -1, this.durableClientVM);\n    }\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2019-01-12 07:53:54","endLine":666,"groupId":"28570","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"durableFailoverAfterReconnect","params":"(intredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/17/2c4807de920a3912a9977a89929d36b4e1c7b4.src","preCode":"  private void durableFailoverAfterReconnect(int redundancyLevel) {\n    \r\n    server1Port = this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, true));\n\n    int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, true));\n\n    \r\n    durableClientId = getName() + \"_client\";\n\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, VERY_LONG_DURABLE_TIMEOUT_SECONDS),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    verifyDurableClientPresent(VERY_LONG_DURABLE_TIMEOUT_SECONDS, durableClientId, server1VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.restartDurableClient(VERY_LONG_DURABLE_TIMEOUT_SECONDS, clientPool, Boolean.TRUE);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    publishEntries(2, 2);\n\n    \r\n    if (redundancyLevel == 1) {\n      this.checkListenerEvents(4, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n    }\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      @Override\n      public void run2() throws CacheException {\n        Region<Object, Object> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertThat(region).isNotNull();\n\n        \r\n        assertThat(region.getEntry(\"0\")).isNull();\n      }\n    });\n\n    publishEntries(4, 1);\n\n    \r\n    if (redundancyLevel == 1) {\n      this.checkListenerEvents(5, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(3, 1, -1, this.durableClientVM);\n    }\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"N"}],"commitId":"090af9cc8ccd991895a0da62a23315697902e427","commitMessage":"@@@GEODE-7286: Reset _socketClosed AtomicBoolean when durable client reconnects\n\n","date":"2019-10-26 06:51:12","modifiedFileCount":"2","status":"M","submitter":"Barry Oglesby"},{"authorTime":"2020-04-18 07:46:23","codes":[{"authorDate":"2020-04-18 07:46:23","commitOrder":6,"curCode":"  private void durableFailover(int redundancyLevel) {\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    durableClientId = getName() + \"_client\";\n\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, VERY_LONG_DURABLE_TIMEOUT_SECONDS),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        server2Port));\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.restartDurableClient(VERY_LONG_DURABLE_TIMEOUT_SECONDS, clientPool, Boolean.TRUE);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    publishEntries(2, 1);\n\n    \r\n    this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n\n    this.durableClientVM.invoke(\"Get\", () -> {\n      await().untilAsserted(() -> {\n        Region<Object, Object> region = getCache().getRegion(regionName);\n        assertThat(region).isNotNull();\n\n        assertThat(region.getEntry(\"0\")).isNull();\n        assertThat(region.getEntry(\"2\")).isNotNull();\n      });\n    });\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    if (redundancyLevel == 0) {\n      this.server2VM.invoke(() -> verifyClientHasConnected());\n    }\n\n    publishEntries(3, 1);\n\n    \r\n    this.checkListenerEvents(3, 1, -1, this.durableClientVM);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2020-04-18 07:46:23","endLine":551,"groupId":"10320","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"durableFailover","params":"(intredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/8da53fe99507b9c05889547ac5c80259eeb807.src","preCode":"  private void durableFailover(int redundancyLevel) {\n\n    \r\n    server1Port = this.server1VM.invoke(\n        () -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    final int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    durableClientId = getName() + \"_client\";\n\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, VERY_LONG_DURABLE_TIMEOUT_SECONDS),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.server2VM.invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE,\n        server2Port));\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.restartDurableClient(VERY_LONG_DURABLE_TIMEOUT_SECONDS, clientPool, Boolean.TRUE);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    publishEntries(2, 1);\n\n    \r\n    this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      @Override\n      public void run2() throws CacheException {\n\n        Region<Object, Object> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertThat(region).isNotNull();\n\n        assertThat(region.getEntry(\"0\")).isNull();\n        assertThat(region.getEntry(\"2\")).isNotNull();\n      }\n    });\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    if (redundancyLevel == 0) {\n      this.server2VM.invoke(() -> verifyClientHasConnected());\n    }\n\n    publishEntries(3, 1);\n\n    \r\n    this.checkListenerEvents(3, 1, -1, this.durableClientVM);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"M"},{"authorDate":"2020-04-18 07:46:23","commitOrder":6,"curCode":"  private void durableFailoverAfterReconnect(int redundancyLevel) {\n    \r\n    server1Port = this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, true));\n\n    int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, true));\n\n    \r\n    durableClientId = getName() + \"_client\";\n\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, VERY_LONG_DURABLE_TIMEOUT_SECONDS),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    verifyDurableClientPresent(VERY_LONG_DURABLE_TIMEOUT_SECONDS, durableClientId, server1VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.restartDurableClient(VERY_LONG_DURABLE_TIMEOUT_SECONDS, clientPool, Boolean.TRUE);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    publishEntries(2, 2);\n\n    \r\n    if (redundancyLevel == 1) {\n      this.checkListenerEvents(4, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n    }\n\n    this.durableClientVM.invoke(\"Get\", () -> {\n      await().untilAsserted(() -> {\n        Region<Object, Object> region = getCache().getRegion(regionName);\n        assertThat(region).isNotNull();\n        \r\n        assertThat(region.getEntry(\"0\")).isNull();\n      });\n    });\n\n    publishEntries(4, 1);\n\n    \r\n    if (redundancyLevel == 1) {\n      this.checkListenerEvents(5, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(3, 1, -1, this.durableClientVM);\n    }\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2020-04-18 07:46:23","endLine":670,"groupId":"10320","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"durableFailoverAfterReconnect","params":"(intredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/8da53fe99507b9c05889547ac5c80259eeb807.src","preCode":"  private void durableFailoverAfterReconnect(int redundancyLevel) {\n    \r\n    server1Port = this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, true));\n\n    int server2Port = this.server2VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, true));\n\n    \r\n    durableClientId = getName() + \"_client\";\n\n    Pool clientPool;\n    if (redundancyLevel == 1) {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true);\n    } else {\n      clientPool = getClientPool(NetworkUtils.getServerHostName(), server1Port,\n          server2Port, true, 0);\n    }\n\n    this.durableClientVM.invoke(CacheServerTestUtil::disableShufflingOfEndpoints);\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(clientPool, regionName,\n        getClientDistributedSystemProperties(durableClientId, VERY_LONG_DURABLE_TIMEOUT_SECONDS),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            server2Port, false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    verifyDurableClientPresent(VERY_LONG_DURABLE_TIMEOUT_SECONDS, durableClientId, server1VM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.restartDurableClient(VERY_LONG_DURABLE_TIMEOUT_SECONDS, clientPool, Boolean.TRUE);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    publishEntries(2, 2);\n\n    \r\n    if (redundancyLevel == 1) {\n      this.checkListenerEvents(4, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(2, 1, -1, this.durableClientVM);\n    }\n\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Get\") {\n      @Override\n      public void run2() throws CacheException {\n        Region<Object, Object> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertThat(region).isNotNull();\n\n        \r\n        assertThat(region.getEntry(\"0\")).isNull();\n      }\n    });\n\n    publishEntries(4, 1);\n\n    \r\n    if (redundancyLevel == 1) {\n      this.checkListenerEvents(5, 1, -1, this.durableClientVM);\n    } else {\n      this.checkListenerEvents(3, 1, -1, this.durableClientVM);\n    }\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server2VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"M"}],"commitId":"aab948a5e6c82319a631c901a17cc01692da14c2","commitMessage":"@@@GEODE-5428 (#4972)\n\n* Made a few asserts await.\n","date":"2020-04-18 07:46:23","modifiedFileCount":"1","status":"M","submitter":"mhansonp"}]
