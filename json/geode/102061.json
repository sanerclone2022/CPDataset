[{"authorTime":"2016-09-15 02:08:18","codes":[{"authorDate":"2016-09-15 02:08:18","commitOrder":1,"curCode":"  public void testLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes, noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n      public void processData(PartitionedRegionQueryEvaluator prqe) {\n        \r\n      }\n      \n      public void executeQueryLocally(Collection resultsCollector) {\n        resultsCollector.add(resultsForMember1);\n      }\n    });\n    \n    Set allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n    \n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr, query, null, new LinkedResultSet(), allBucketsToQuery, scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n    assertNotNull(results);\n    assertEquals(resultsForMember1.size(), results.size());\n    results.removeAll(resultsForMember1);\n    assertTrue(results.isEmpty());\n  }\n","date":"2016-09-15 02:08:18","endLine":119,"groupId":"21761","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalQueryReturnsResultsToPartitionedQueryEvaluator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c4/6c275f7bee1bb2cf323bdc32ff4f0f1c5f623e.src","preCode":"  public void testLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes, noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n      public void processData(PartitionedRegionQueryEvaluator prqe) {\n        \r\n      }\n      \n      public void executeQueryLocally(Collection resultsCollector) {\n        resultsCollector.add(resultsForMember1);\n      }\n    });\n    \n    Set allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n    \n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr, query, null, new LinkedResultSet(), allBucketsToQuery, scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n    assertNotNull(results);\n    assertEquals(resultsForMember1.size(), results.size());\n    results.removeAll(resultsForMember1);\n    assertTrue(results.isEmpty());\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionQueryEvaluatorTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"},{"authorDate":"2016-09-15 02:08:18","commitOrder":1,"curCode":"  public void testRemoteAndLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n    List resultsForMember2 = createResultObjects(\"4\", \"5\", \"6\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes, noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n      public void processData(PartitionedRegionQueryEvaluator prqe) {\n        prqe.processData(resultsForMember2, remoteNodeA, 0, true);\n      }\n      \n      public void executeQueryLocally(Collection resultsCollector) {\n        resultsCollector.add(resultsForMember1);\n      }\n    });\n    \n    Set allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n    \n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr, query, null, new LinkedResultSet(), allBucketsToQuery, scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n    List expectedResults = new LinkedList();\n    expectedResults.addAll(resultsForMember1);\n    expectedResults.addAll(resultsForMember2);\n    assertNotNull(results);\n    assertEquals(expectedResults.size(), results.size());\n    results.removeAll(expectedResults);\n    assertTrue(results.isEmpty());\n  }\n","date":"2016-09-15 02:08:18","endLine":149,"groupId":"17731","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoteAndLocalQueryReturnsResultsToPartitionedQueryEvaluator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c4/6c275f7bee1bb2cf323bdc32ff4f0f1c5f623e.src","preCode":"  public void testRemoteAndLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n    List resultsForMember2 = createResultObjects(\"4\", \"5\", \"6\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes, noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n      public void processData(PartitionedRegionQueryEvaluator prqe) {\n        prqe.processData(resultsForMember2, remoteNodeA, 0, true);\n      }\n      \n      public void executeQueryLocally(Collection resultsCollector) {\n        resultsCollector.add(resultsForMember1);\n      }\n    });\n    \n    Set allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n    \n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr, query, null, new LinkedResultSet(), allBucketsToQuery, scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n    List expectedResults = new LinkedList();\n    expectedResults.addAll(resultsForMember1);\n    expectedResults.addAll(resultsForMember2);\n    assertNotNull(results);\n    assertEquals(expectedResults.size(), results.size());\n    results.removeAll(expectedResults);\n    assertTrue(results.isEmpty());\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionQueryEvaluatorTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"}],"commitId":"8ea08da3d2baa64ca631641430b54d71ce3ff362","commitMessage":"@@@GEODE-37 Merge branch 'feature/GEODE-37_2' into develop\n\nConflicts:\n\tgeode-core/src/main/java/com/gemstone/gemfire/cache/query/internal/IndexTrackingQueryObserver.java\n","date":"2016-09-15 02:08:18","modifiedFileCount":"151","status":"B","submitter":"Hitesh Khamesra"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":2,"curCode":"  public void testLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes,\n        noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n          @Override\n          public void processData(PartitionedRegionQueryEvaluator prqe) {\n            \r\n          }\n\n          @Override\n          public void executeQueryLocally(Collection resultsCollector) {\n            resultsCollector.add(resultsForMember1);\n          }\n        });\n\n    Set allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n\n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr,\n        query, null, new LinkedResultSet(), allBucketsToQuery, scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n    assertNotNull(results);\n    assertEquals(resultsForMember1.size(), results.size());\n    results.removeAll(resultsForMember1);\n    assertTrue(results.isEmpty());\n  }\n","date":"2019-01-12 07:53:54","endLine":123,"groupId":"21761","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalQueryReturnsResultsToPartitionedQueryEvaluator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c0/5e27971dc8d44936d1714511125fd081578f43.src","preCode":"  public void testLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes,\n        noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n          public void processData(PartitionedRegionQueryEvaluator prqe) {\n            \r\n          }\n\n          public void executeQueryLocally(Collection resultsCollector) {\n            resultsCollector.add(resultsForMember1);\n          }\n        });\n\n    Set allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n\n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr,\n        query, null, new LinkedResultSet(), allBucketsToQuery, scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n    assertNotNull(results);\n    assertEquals(resultsForMember1.size(), results.size());\n    results.removeAll(resultsForMember1);\n    assertTrue(results.isEmpty());\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionQueryEvaluatorTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":2,"curCode":"  public void testRemoteAndLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n    List resultsForMember2 = createResultObjects(\"4\", \"5\", \"6\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes,\n        noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n          @Override\n          public void processData(PartitionedRegionQueryEvaluator prqe) {\n            prqe.processData(resultsForMember2, remoteNodeA, 0, true);\n          }\n\n          @Override\n          public void executeQueryLocally(Collection resultsCollector) {\n            resultsCollector.add(resultsForMember1);\n          }\n        });\n\n    Set allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n\n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr,\n        query, null, new LinkedResultSet(), allBucketsToQuery, scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n    List expectedResults = new LinkedList();\n    expectedResults.addAll(resultsForMember1);\n    expectedResults.addAll(resultsForMember2);\n    assertNotNull(results);\n    assertEquals(expectedResults.size(), results.size());\n    results.removeAll(expectedResults);\n    assertTrue(results.isEmpty());\n  }\n","date":"2019-01-12 07:53:54","endLine":157,"groupId":"10197","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoteAndLocalQueryReturnsResultsToPartitionedQueryEvaluator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c0/5e27971dc8d44936d1714511125fd081578f43.src","preCode":"  public void testRemoteAndLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n    List resultsForMember2 = createResultObjects(\"4\", \"5\", \"6\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes,\n        noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n          public void processData(PartitionedRegionQueryEvaluator prqe) {\n            prqe.processData(resultsForMember2, remoteNodeA, 0, true);\n          }\n\n          public void executeQueryLocally(Collection resultsCollector) {\n            resultsCollector.add(resultsForMember1);\n          }\n        });\n\n    Set allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n\n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr,\n        query, null, new LinkedResultSet(), allBucketsToQuery, scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n    List expectedResults = new LinkedList();\n    expectedResults.addAll(resultsForMember1);\n    expectedResults.addAll(resultsForMember2);\n    assertNotNull(results);\n    assertEquals(expectedResults.size(), results.size());\n    results.removeAll(expectedResults);\n    assertTrue(results.isEmpty());\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionQueryEvaluatorTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2019-03-20 23:38:04","codes":[{"authorDate":"2019-03-20 23:38:04","commitOrder":3,"curCode":"  public void testLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes,\n        noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n          @Override\n          public void processData(PartitionedRegionQueryEvaluator prqe) {\n            \r\n          }\n\n          @Override\n          public void executeQueryLocally(Collection resultsCollector) {\n            resultsCollector.add(resultsForMember1);\n          }\n        });\n\n    Set allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n\n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr,\n        query, mock(ExecutionContext.class), null, new LinkedResultSet(), allBucketsToQuery,\n        scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n    assertNotNull(results);\n    assertEquals(resultsForMember1.size(), results.size());\n    results.removeAll(resultsForMember1);\n    assertTrue(results.isEmpty());\n  }\n","date":"2019-03-20 23:38:04","endLine":126,"groupId":"21761","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalQueryReturnsResultsToPartitionedQueryEvaluator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ad/f36d8dabaa746f5e832735925ac466dd88be5e.src","preCode":"  public void testLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes,\n        noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n          @Override\n          public void processData(PartitionedRegionQueryEvaluator prqe) {\n            \r\n          }\n\n          @Override\n          public void executeQueryLocally(Collection resultsCollector) {\n            resultsCollector.add(resultsForMember1);\n          }\n        });\n\n    Set allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n\n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr,\n        query, null, new LinkedResultSet(), allBucketsToQuery, scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n    assertNotNull(results);\n    assertEquals(resultsForMember1.size(), results.size());\n    results.removeAll(resultsForMember1);\n    assertTrue(results.isEmpty());\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionQueryEvaluatorTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2019-03-20 23:38:04","commitOrder":3,"curCode":"  public void testRemoteAndLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n    List resultsForMember2 = createResultObjects(\"4\", \"5\", \"6\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes,\n        noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n          @Override\n          public void processData(PartitionedRegionQueryEvaluator prqe) {\n            prqe.processData(resultsForMember2, remoteNodeA, 0, true);\n          }\n\n          @Override\n          public void executeQueryLocally(Collection resultsCollector) {\n            resultsCollector.add(resultsForMember1);\n          }\n        });\n\n    Set allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n\n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr,\n        query, mock(ExecutionContext.class), null, new LinkedResultSet(), allBucketsToQuery,\n        scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n    List expectedResults = new LinkedList();\n    expectedResults.addAll(resultsForMember1);\n    expectedResults.addAll(resultsForMember2);\n    assertNotNull(results);\n    assertEquals(expectedResults.size(), results.size());\n    results.removeAll(expectedResults);\n    assertTrue(results.isEmpty());\n  }\n","date":"2019-03-20 23:38:04","endLine":161,"groupId":"10197","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoteAndLocalQueryReturnsResultsToPartitionedQueryEvaluator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ad/f36d8dabaa746f5e832735925ac466dd88be5e.src","preCode":"  public void testRemoteAndLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n    List resultsForMember2 = createResultObjects(\"4\", \"5\", \"6\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes,\n        noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n          @Override\n          public void processData(PartitionedRegionQueryEvaluator prqe) {\n            prqe.processData(resultsForMember2, remoteNodeA, 0, true);\n          }\n\n          @Override\n          public void executeQueryLocally(Collection resultsCollector) {\n            resultsCollector.add(resultsForMember1);\n          }\n        });\n\n    Set allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n\n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr,\n        query, null, new LinkedResultSet(), allBucketsToQuery, scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n    List expectedResults = new LinkedList();\n    expectedResults.addAll(resultsForMember1);\n    expectedResults.addAll(resultsForMember2);\n    assertNotNull(results);\n    assertEquals(expectedResults.size(), results.size());\n    results.removeAll(expectedResults);\n    assertTrue(results.isEmpty());\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionQueryEvaluatorTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"3ffbc4183de59aa0603bea2e25f91a6e80a1d079","commitMessage":"@@@GEODE-6488: Migrating cancellation state to execution context (#3322)\n\nThis work solves two problems.  One is that the query cancellation task\nreference in DefaultQuery could be overwritten and thus never removed\nfrom monitoring upon successful completion of a query.  Second is that\nonce a query execution timed out once.  the query object was in an\nunusable state which is undesirable.\n\nThe solution is to attach the cancellation state to the execution\ncontext rather than the query object.  so that cancellation is associated\nwith each independent execution of a query rather than having\ncancellation state that applies to the entire query object.","date":"2019-03-20 23:38:04","modifiedFileCount":"35","status":"M","submitter":"Ryan McMahon"},{"authorTime":"2019-10-26 00:34:11","codes":[{"authorDate":"2019-10-26 00:34:11","commitOrder":4,"curCode":"  public void testLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes,\n        noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n          @Override\n          public void processData(PartitionedRegionQueryEvaluator prqe) {\n            \r\n          }\n\n          @Override\n          @SuppressWarnings(\"unchecked\")\n          public void executeQueryLocally(Collection resultsCollector) {\n            resultsCollector.add(resultsForMember1);\n          }\n        });\n\n    Set<Integer> allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n\n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr,\n        query, mock(ExecutionContext.class), null, new LinkedResultSet(), allBucketsToQuery,\n        scenarios);\n\n    Collection results = prqe.queryBuckets(null).asList();\n    assertThat(results).isNotNull();\n    assertThat(results.size()).isEqualTo(resultsForMember1.size());\n    results.removeAll(resultsForMember1);\n    assertThat(results.isEmpty()).isTrue();\n  }\n","date":"2019-10-26 00:34:11","endLine":129,"groupId":"102061","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalQueryReturnsResultsToPartitionedQueryEvaluator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/83/36733676ec48fdd9f7e62e6948b2fbc54976eb.src","preCode":"  public void testLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes,\n        noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n          @Override\n          public void processData(PartitionedRegionQueryEvaluator prqe) {\n            \r\n          }\n\n          @Override\n          public void executeQueryLocally(Collection resultsCollector) {\n            resultsCollector.add(resultsForMember1);\n          }\n        });\n\n    Set allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n\n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr,\n        query, mock(ExecutionContext.class), null, new LinkedResultSet(), allBucketsToQuery,\n        scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n    assertNotNull(results);\n    assertEquals(resultsForMember1.size(), results.size());\n    results.removeAll(resultsForMember1);\n    assertTrue(results.isEmpty());\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionQueryEvaluatorTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2019-10-26 00:34:11","commitOrder":4,"curCode":"  public void testRemoteAndLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List<Object> resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n    List<Object> resultsForMember2 = createResultObjects(\"4\", \"5\", \"6\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes,\n        noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n          @Override\n          public void processData(PartitionedRegionQueryEvaluator prqe) {\n            prqe.processData(resultsForMember2, remoteNodeA, 0, true);\n          }\n\n          @Override\n          @SuppressWarnings(\"unchecked\")\n          public void executeQueryLocally(Collection resultsCollector) {\n            resultsCollector.add(resultsForMember1);\n          }\n        });\n\n    Set<Integer> allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n\n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr,\n        query, mock(ExecutionContext.class), null, new LinkedResultSet(), allBucketsToQuery,\n        scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n\n    List<Object> expectedResults = new LinkedList();\n    expectedResults.addAll(resultsForMember1);\n    expectedResults.addAll(resultsForMember2);\n    assertThat(results).isNotNull();\n    assertThat(results.size()).isEqualTo(expectedResults.size());\n    results.removeAll(expectedResults);\n    assertThat(results.isEmpty()).isTrue();\n  }\n","date":"2019-10-26 00:34:11","endLine":166,"groupId":"102061","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoteAndLocalQueryReturnsResultsToPartitionedQueryEvaluator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/83/36733676ec48fdd9f7e62e6948b2fbc54976eb.src","preCode":"  public void testRemoteAndLocalQueryReturnsResultsToPartitionedQueryEvaluator() throws Exception {\n    List resultsForMember1 = createResultObjects(\"1\", \"2\", \"3\");\n    List resultsForMember2 = createResultObjects(\"4\", \"5\", \"6\");\n\n    PartitionedQueryScenario scenario = new PartitionedQueryScenario(localNode, allNodes,\n        noFailingMembers, createFakeBucketMap(), new ProcessDataFaker() {\n          @Override\n          public void processData(PartitionedRegionQueryEvaluator prqe) {\n            prqe.processData(resultsForMember2, remoteNodeA, 0, true);\n          }\n\n          @Override\n          public void executeQueryLocally(Collection resultsCollector) {\n            resultsCollector.add(resultsForMember1);\n          }\n        });\n\n    Set allBucketsToQuery = scenario.getAllBucketsToQuery();\n    Queue<PartitionedQueryScenario> scenarios = createScenariosQueue(scenario);\n    dataStore.setScenarios(scenarios);\n\n    PartitionedRegionQueryEvaluator prqe = new ExtendedPartitionedRegionQueryEvaluator(system, pr,\n        query, mock(ExecutionContext.class), null, new LinkedResultSet(), allBucketsToQuery,\n        scenarios);\n    Collection results = prqe.queryBuckets(null).asList();\n    List expectedResults = new LinkedList();\n    expectedResults.addAll(resultsForMember1);\n    expectedResults.addAll(resultsForMember2);\n    assertNotNull(results);\n    assertEquals(expectedResults.size(), results.size());\n    results.removeAll(expectedResults);\n    assertTrue(results.isEmpty());\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionQueryEvaluatorTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"bd03dc7ff99e9cf95b3d9a9369ec8b0de308620d","commitMessage":"@@@GEODE-7283: Store MethodAuthorizer in Context (#4179)\n\nThe MethodInvocationAuthorizer should be unique per query and should\nnot be changed for a particular query while it's being executed so. \nstarting with this commit.  it is directly stored as part of the\nExecutionContext. This also prevents the creation of multiple instances\nof the DefaultQueryService and the configured authorizer itself while\nthe intermediate result objects are being traversed during the query\nevaluation.\n\n- Added tests.\n- Fixed minor warnings and spelling.\n- Replaced usages of 'junit.Assert' by 'assertj'.\n- The AttributeDescriptor and MethodDispatch classes do not require\n  MethodInvocationAuthorizer as a constructor parameter anymore.  the\n  authorizer is obtained from the context.  and **only** when needed.\n- The MethodDispatch class does not internally store and cache the\n  MethodInvocationAuthorizer instance anymore.  thus allowing Geode to\n  change the authorizer in runtime without needing to re-load every\n  already known method (expensive due to reflection).\n- The ExecutionContext uses a no-op authorizer when created from a\n  client cache: authorization and authentication logic happens only on\n  server side.  and the authorizer will be obtained from the cluster\n  configuration service directly instead of the query service when OQL\n  security is fully implemented.","date":"2019-10-26 00:34:11","modifiedFileCount":"15","status":"M","submitter":"Juan Jos? Ramos"}]
