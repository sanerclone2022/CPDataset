[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testForSupportedRegionAttributes() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    \r\n    SerializableRunnable createServer = new CacheSerializableRunnable(\"Create Cache Server\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create Cache Server. ###\");\n\n        \r\n        AttributesFactory factory1 = new AttributesFactory();\n        factory1.setScope(Scope.GLOBAL);\n        factory1.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[0], factory1.createRegionAttributes());\n\n        \r\n        AttributesFactory factory2 = new AttributesFactory();\n        factory2.setScope(Scope.DISTRIBUTED_NO_ACK);\n        factory2.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[1], factory2.createRegionAttributes());\n\n        Wait.pause(2000);\n\n        try {\n          startBridgeServer(port, true);\n        }\n\n        catch (Exception ex) {\n          Assert.fail(\"While starting CacheServer\", ex);\n        }\n        Wait.pause(2000);\n\n      }\n    };\n\n    server1.invoke(createServer);\n    server2.invoke(createServer);\n\n    final int port1 = server1.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int thePort2 = server2.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n\n    \r\n    createClient(client, new int[] {port1, thePort2}, host0, \"-1\");\n\n    \r\n    createCQ(client, \"testForSupportedRegionAttributes_0\", cqs[0]);\n    executeCQ(client, \"testForSupportedRegionAttributes_0\", false, null);\n\n    int size = 5;\n\n    createValues(server1, regions[0], size);\n\n    for (int i = 1; i <= size; i++) {\n      waitForCreated(client, \"testForSupportedRegionAttributes_0\", KEY + i);\n    }\n\n    \r\n    createCQ(client, \"testForSupportedRegionAttributes_1\", cqs[2]);\n\n    String errMsg =\n        \"The replicated region \" + \" specified in CQ creation does not have scope supported by CQ.\"\n            + \" The CQ supported scopes are DISTRIBUTED_ACK and GLOBAL.\";\n    final String expectedErr = \"Cq not registered on primary\";\n    client.invoke(new CacheSerializableRunnable(\"Set expect\") {\n      public void run2() {\n        getCache().getLogger()\n            .info(\"<ExpectedException action=add>\" + expectedErr + \"</ExpectedException>\");\n      }\n    });\n\n    try {\n      executeCQ(client, \"testForSupportedRegionAttributes_1\", false, \"CqException\");\n      fail(\"The test should have failed with exception, \" + errMsg);\n    } catch (Exception ex) {\n      \r\n    } finally {\n      client.invoke(new CacheSerializableRunnable(\"Remove expect\") {\n        public void run2() {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=remove>\" + expectedErr + \"</ExpectedException>\");\n        }\n      });\n    }\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n    closeServer(server2);\n\n  }\n","date":"2018-07-18 03:54:18","endLine":3212,"groupId":"27810","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testForSupportedRegionAttributes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/72f987b8bfe0450ffa77a55fdf0efa1c66c36f.src","preCode":"  public void testForSupportedRegionAttributes() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    \r\n    SerializableRunnable createServer = new CacheSerializableRunnable(\"Create Cache Server\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create Cache Server. ###\");\n\n        \r\n        AttributesFactory factory1 = new AttributesFactory();\n        factory1.setScope(Scope.GLOBAL);\n        factory1.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[0], factory1.createRegionAttributes());\n\n        \r\n        AttributesFactory factory2 = new AttributesFactory();\n        factory2.setScope(Scope.DISTRIBUTED_NO_ACK);\n        factory2.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[1], factory2.createRegionAttributes());\n\n        Wait.pause(2000);\n\n        try {\n          startBridgeServer(port, true);\n        }\n\n        catch (Exception ex) {\n          Assert.fail(\"While starting CacheServer\", ex);\n        }\n        Wait.pause(2000);\n\n      }\n    };\n\n    server1.invoke(createServer);\n    server2.invoke(createServer);\n\n    final int port1 = server1.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int thePort2 = server2.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n\n    \r\n    createClient(client, new int[] {port1, thePort2}, host0, \"-1\");\n\n    \r\n    createCQ(client, \"testForSupportedRegionAttributes_0\", cqs[0]);\n    executeCQ(client, \"testForSupportedRegionAttributes_0\", false, null);\n\n    int size = 5;\n\n    createValues(server1, regions[0], size);\n\n    for (int i = 1; i <= size; i++) {\n      waitForCreated(client, \"testForSupportedRegionAttributes_0\", KEY + i);\n    }\n\n    \r\n    createCQ(client, \"testForSupportedRegionAttributes_1\", cqs[2]);\n\n    String errMsg =\n        \"The replicated region \" + \" specified in CQ creation does not have scope supported by CQ.\"\n            + \" The CQ supported scopes are DISTRIBUTED_ACK and GLOBAL.\";\n    final String expectedErr = \"Cq not registered on primary\";\n    client.invoke(new CacheSerializableRunnable(\"Set expect\") {\n      public void run2() {\n        getCache().getLogger()\n            .info(\"<ExpectedException action=add>\" + expectedErr + \"</ExpectedException>\");\n      }\n    });\n\n    try {\n      executeCQ(client, \"testForSupportedRegionAttributes_1\", false, \"CqException\");\n      fail(\"The test should have failed with exception, \" + errMsg);\n    } catch (Exception ex) {\n      \r\n    } finally {\n      client.invoke(new CacheSerializableRunnable(\"Remove expect\") {\n        public void run2() {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=remove>\" + expectedErr + \"</ExpectedException>\");\n        }\n      });\n    }\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n    closeServer(server2);\n\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":3118,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testForSupportedRegionAttributes() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    \r\n    SerializableRunnable createServer = new CacheSerializableRunnable(\"Create Cache Server\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create Cache Server. ###\");\n\n        \r\n        AttributesFactory factory1 = new AttributesFactory();\n        factory1.setScope(Scope.GLOBAL);\n        factory1.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[0], factory1.createRegionAttributes());\n\n        \r\n        AttributesFactory factory2 = new AttributesFactory();\n        factory2.setScope(Scope.DISTRIBUTED_NO_ACK);\n        factory2.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[1], factory2.createRegionAttributes());\n\n        Wait.pause(2000);\n\n        try {\n          startBridgeServer(port, true);\n        }\n\n        catch (Exception ex) {\n          Assert.fail(\"While starting CacheServer\", ex);\n        }\n        Wait.pause(2000);\n\n      }\n    };\n\n    server1.invoke(createServer);\n    server2.invoke(createServer);\n\n    final int port1 = server1.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int thePort2 = server2.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n\n    String poolName = \"testForSupportedRegionAttributes\";\n    createPool(client, poolName, new String[] {host0, host0}, new int[] {port1, thePort2});\n\n    \r\n    createCQ(client, poolName, \"testForSupportedRegionAttributes_0\", cqs[0]);\n    executeCQ(client, \"testForSupportedRegionAttributes_0\", false, null);\n\n    int size = 5;\n\n    createValues(server1, regions[0], size);\n\n    for (int i = 1; i <= size; i++) {\n      waitForCreated(client, \"testForSupportedRegionAttributes_0\", KEY + i);\n    }\n\n    \r\n    createCQ(client, poolName, \"testForSupportedRegionAttributes_1\", cqs[2]);\n\n    String errMsg =\n        \"The replicated region \" + \" specified in CQ creation does not have scope supported by CQ.\"\n            + \" The CQ supported scopes are DISTRIBUTED_ACK and GLOBAL.\";\n    final String expectedErr = \"Cq not registered on primary\";\n    client.invoke(new CacheSerializableRunnable(\"Set expect\") {\n      @Override\n      public void run2() {\n        getCache().getLogger()\n            .info(\"<ExpectedException action=add>\" + expectedErr + \"</ExpectedException>\");\n      }\n    });\n\n    try {\n      executeCQ(client, \"testForSupportedRegionAttributes_1\", false, \"CqException\");\n      fail(\"The test should have failed with exception, \" + errMsg);\n    } catch (Exception expected) {\n      \r\n    } finally {\n      client.invoke(new CacheSerializableRunnable(\"Remove expect\") {\n        @Override\n        public void run2() {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=remove>\" + expectedErr + \"</ExpectedException>\");\n        }\n      });\n    }\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n    closeServer(server2);\n  }\n","date":"2018-07-18 03:54:18","endLine":2964,"groupId":"29520","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testForSupportedRegionAttributes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/5172d12d02b90c1af7e602c4eef42915b15293.src","preCode":"  public void testForSupportedRegionAttributes() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    \r\n    SerializableRunnable createServer = new CacheSerializableRunnable(\"Create Cache Server\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create Cache Server. ###\");\n\n        \r\n        AttributesFactory factory1 = new AttributesFactory();\n        factory1.setScope(Scope.GLOBAL);\n        factory1.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[0], factory1.createRegionAttributes());\n\n        \r\n        AttributesFactory factory2 = new AttributesFactory();\n        factory2.setScope(Scope.DISTRIBUTED_NO_ACK);\n        factory2.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[1], factory2.createRegionAttributes());\n\n        Wait.pause(2000);\n\n        try {\n          startBridgeServer(port, true);\n        }\n\n        catch (Exception ex) {\n          Assert.fail(\"While starting CacheServer\", ex);\n        }\n        Wait.pause(2000);\n\n      }\n    };\n\n    server1.invoke(createServer);\n    server2.invoke(createServer);\n\n    final int port1 = server1.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int thePort2 = server2.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n\n    String poolName = \"testForSupportedRegionAttributes\";\n    createPool(client, poolName, new String[] {host0, host0}, new int[] {port1, thePort2});\n\n    \r\n    createCQ(client, poolName, \"testForSupportedRegionAttributes_0\", cqs[0]);\n    executeCQ(client, \"testForSupportedRegionAttributes_0\", false, null);\n\n    int size = 5;\n\n    createValues(server1, regions[0], size);\n\n    for (int i = 1; i <= size; i++) {\n      waitForCreated(client, \"testForSupportedRegionAttributes_0\", KEY + i);\n    }\n\n    \r\n    createCQ(client, poolName, \"testForSupportedRegionAttributes_1\", cqs[2]);\n\n    String errMsg =\n        \"The replicated region \" + \" specified in CQ creation does not have scope supported by CQ.\"\n            + \" The CQ supported scopes are DISTRIBUTED_ACK and GLOBAL.\";\n    final String expectedErr = \"Cq not registered on primary\";\n    client.invoke(new CacheSerializableRunnable(\"Set expect\") {\n      @Override\n      public void run2() {\n        getCache().getLogger()\n            .info(\"<ExpectedException action=add>\" + expectedErr + \"</ExpectedException>\");\n      }\n    });\n\n    try {\n      executeCQ(client, \"testForSupportedRegionAttributes_1\", false, \"CqException\");\n      fail(\"The test should have failed with exception, \" + errMsg);\n    } catch (Exception expected) {\n      \r\n    } finally {\n      client.invoke(new CacheSerializableRunnable(\"Remove expect\") {\n        @Override\n        public void run2() {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=remove>\" + expectedErr + \"</ExpectedException>\");\n        }\n      });\n    }\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n    closeServer(server2);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2868,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-08-31 08:10:50","commitOrder":2,"curCode":"  public void testForSupportedRegionAttributes() {\n    VM server1 = VM.getVM(0);\n    VM server2 = VM.getVM(1);\n    VM client = VM.getVM(2);\n\n    \r\n    SerializableRunnable createServer = new CacheSerializableRunnable(\"Create Cache Server\") {\n      public void run2() throws CacheException {\n        logger.info(\"### Create Cache Server. ###\");\n\n        \r\n        AttributesFactory factory1 = new AttributesFactory();\n        factory1.setScope(Scope.GLOBAL);\n        factory1.setDataPolicy(DataPolicy.REPLICATE);\n        createRegion(regions[0], factory1.createRegionAttributes());\n\n        \r\n        AttributesFactory factory2 = new AttributesFactory();\n        factory2.setScope(Scope.DISTRIBUTED_NO_ACK);\n        factory2.setDataPolicy(DataPolicy.REPLICATE);\n        createRegion(regions[1], factory2.createRegionAttributes());\n\n        Wait.pause(2000);\n\n        try {\n          startBridgeServer(port, true);\n        } catch (Exception ex) {\n          fail(\"While starting CacheServer\", ex);\n        }\n        Wait.pause(2000);\n\n      }\n    };\n\n    server1.invoke(createServer);\n    server2.invoke(createServer);\n\n    final int port1 = server1.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName();\n\n    final int thePort2 = server2.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n\n    \r\n    createClient(client, new int[] {port1, thePort2}, host0, \"-1\");\n\n    \r\n    createCQ(client, \"testForSupportedRegionAttributes_0\", cqs[0]);\n    executeCQ(client, \"testForSupportedRegionAttributes_0\", false, null);\n\n    int size = 5;\n\n    createValues(server1, regions[0], size);\n\n    for (int i = 1; i <= size; i++) {\n      waitForCreated(client, \"testForSupportedRegionAttributes_0\", KEY + i);\n    }\n\n    \r\n    createCQ(client, \"testForSupportedRegionAttributes_1\", cqs[2]);\n\n    String errMsg =\n        \"The replicated region \" + \" specified in CQ creation does not have scope supported by CQ.\"\n            + \" The CQ supported scopes are DISTRIBUTED_ACK and GLOBAL.\";\n    final String expectedErr = \"Cq not registered on primary\";\n    client.invoke(new CacheSerializableRunnable(\"Set expect\") {\n      public void run2() {\n        getCache().getLogger()\n            .info(\"<ExpectedException action=add>\" + expectedErr + \"</ExpectedException>\");\n      }\n    });\n\n    try {\n      executeCQ(client, \"testForSupportedRegionAttributes_1\", false, \"CqException\");\n      fail(\"The test should have failed with exception, \" + errMsg);\n    } catch (Exception ex) {\n      \r\n    } finally {\n      client.invoke(new CacheSerializableRunnable(\"Remove expect\") {\n        public void run2() {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=remove>\" + expectedErr + \"</ExpectedException>\");\n        }\n      });\n    }\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n    closeServer(server2);\n\n  }\n","date":"2018-08-31 08:10:50","endLine":2724,"groupId":"46157","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testForSupportedRegionAttributes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void testForSupportedRegionAttributes() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    \r\n    SerializableRunnable createServer = new CacheSerializableRunnable(\"Create Cache Server\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create Cache Server. ###\");\n\n        \r\n        AttributesFactory factory1 = new AttributesFactory();\n        factory1.setScope(Scope.GLOBAL);\n        factory1.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[0], factory1.createRegionAttributes());\n\n        \r\n        AttributesFactory factory2 = new AttributesFactory();\n        factory2.setScope(Scope.DISTRIBUTED_NO_ACK);\n        factory2.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[1], factory2.createRegionAttributes());\n\n        Wait.pause(2000);\n\n        try {\n          startBridgeServer(port, true);\n        }\n\n        catch (Exception ex) {\n          Assert.fail(\"While starting CacheServer\", ex);\n        }\n        Wait.pause(2000);\n\n      }\n    };\n\n    server1.invoke(createServer);\n    server2.invoke(createServer);\n\n    final int port1 = server1.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int thePort2 = server2.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n\n    \r\n    createClient(client, new int[] {port1, thePort2}, host0, \"-1\");\n\n    \r\n    createCQ(client, \"testForSupportedRegionAttributes_0\", cqs[0]);\n    executeCQ(client, \"testForSupportedRegionAttributes_0\", false, null);\n\n    int size = 5;\n\n    createValues(server1, regions[0], size);\n\n    for (int i = 1; i <= size; i++) {\n      waitForCreated(client, \"testForSupportedRegionAttributes_0\", KEY + i);\n    }\n\n    \r\n    createCQ(client, \"testForSupportedRegionAttributes_1\", cqs[2]);\n\n    String errMsg =\n        \"The replicated region \" + \" specified in CQ creation does not have scope supported by CQ.\"\n            + \" The CQ supported scopes are DISTRIBUTED_ACK and GLOBAL.\";\n    final String expectedErr = \"Cq not registered on primary\";\n    client.invoke(new CacheSerializableRunnable(\"Set expect\") {\n      public void run2() {\n        getCache().getLogger()\n            .info(\"<ExpectedException action=add>\" + expectedErr + \"</ExpectedException>\");\n      }\n    });\n\n    try {\n      executeCQ(client, \"testForSupportedRegionAttributes_1\", false, \"CqException\");\n      fail(\"The test should have failed with exception, \" + errMsg);\n    } catch (Exception ex) {\n      \r\n    } finally {\n      client.invoke(new CacheSerializableRunnable(\"Remove expect\") {\n        public void run2() {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=remove>\" + expectedErr + \"</ExpectedException>\");\n        }\n      });\n    }\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n    closeServer(server2);\n\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2633,"status":"M"},{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public void testForSupportedRegionAttributes() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    \r\n    SerializableRunnable createServer = new CacheSerializableRunnable(\"Create Cache Server\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create Cache Server. ###\");\n\n        \r\n        AttributesFactory factory1 = new AttributesFactory();\n        factory1.setScope(Scope.GLOBAL);\n        factory1.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[0], factory1.createRegionAttributes());\n\n        \r\n        AttributesFactory factory2 = new AttributesFactory();\n        factory2.setScope(Scope.DISTRIBUTED_NO_ACK);\n        factory2.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[1], factory2.createRegionAttributes());\n\n        Wait.pause(2000);\n\n        try {\n          startBridgeServer(port, true);\n        }\n\n        catch (Exception ex) {\n          Assert.fail(\"While starting CacheServer\", ex);\n        }\n        Wait.pause(2000);\n\n      }\n    };\n\n    server1.invoke(createServer);\n    server2.invoke(createServer);\n\n    final int port1 = server1.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int thePort2 = server2.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n\n    String poolName = \"testForSupportedRegionAttributes\";\n    createPool(client, poolName, new String[] {host0, host0}, new int[] {port1, thePort2});\n\n    \r\n    createCQ(client, poolName, \"testForSupportedRegionAttributes_0\", cqs[0]);\n    executeCQ(client, \"testForSupportedRegionAttributes_0\", false, null);\n\n    int size = 5;\n\n    createValues(server1, regions[0], size);\n\n    for (int i = 1; i <= size; i++) {\n      waitForCreated(client, \"testForSupportedRegionAttributes_0\", KEY + i);\n    }\n\n    \r\n    createCQ(client, poolName, \"testForSupportedRegionAttributes_1\", cqs[2]);\n\n    String errMsg =\n        \"The replicated region \" + \" specified in CQ creation does not have scope supported by CQ.\"\n            + \" The CQ supported scopes are DISTRIBUTED_ACK and GLOBAL.\";\n    final String expectedErr = \"Cq not registered on primary\";\n    client.invoke(new CacheSerializableRunnable(\"Set expect\") {\n      @Override\n      public void run2() {\n        getCache().getLogger()\n            .info(\"<ExpectedException action=add>\" + expectedErr + \"</ExpectedException>\");\n      }\n    });\n\n    try {\n      executeCQ(client, \"testForSupportedRegionAttributes_1\", false, \"CqException\");\n      fail(\"The test should have failed with exception, \" + errMsg);\n    } catch (Exception expected) {\n      \r\n    } finally {\n      client.invoke(new CacheSerializableRunnable(\"Remove expect\") {\n        @Override\n        public void run2() {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=remove>\" + expectedErr + \"</ExpectedException>\");\n        }\n      });\n    }\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n    closeServer(server2);\n  }\n","date":"2018-07-18 03:54:18","endLine":2964,"groupId":"29520","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testForSupportedRegionAttributes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/5172d12d02b90c1af7e602c4eef42915b15293.src","preCode":"  public void testForSupportedRegionAttributes() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    \r\n    SerializableRunnable createServer = new CacheSerializableRunnable(\"Create Cache Server\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create Cache Server. ###\");\n\n        \r\n        AttributesFactory factory1 = new AttributesFactory();\n        factory1.setScope(Scope.GLOBAL);\n        factory1.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[0], factory1.createRegionAttributes());\n\n        \r\n        AttributesFactory factory2 = new AttributesFactory();\n        factory2.setScope(Scope.DISTRIBUTED_NO_ACK);\n        factory2.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[1], factory2.createRegionAttributes());\n\n        Wait.pause(2000);\n\n        try {\n          startBridgeServer(port, true);\n        }\n\n        catch (Exception ex) {\n          Assert.fail(\"While starting CacheServer\", ex);\n        }\n        Wait.pause(2000);\n\n      }\n    };\n\n    server1.invoke(createServer);\n    server2.invoke(createServer);\n\n    final int port1 = server1.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int thePort2 = server2.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n\n    String poolName = \"testForSupportedRegionAttributes\";\n    createPool(client, poolName, new String[] {host0, host0}, new int[] {port1, thePort2});\n\n    \r\n    createCQ(client, poolName, \"testForSupportedRegionAttributes_0\", cqs[0]);\n    executeCQ(client, \"testForSupportedRegionAttributes_0\", false, null);\n\n    int size = 5;\n\n    createValues(server1, regions[0], size);\n\n    for (int i = 1; i <= size; i++) {\n      waitForCreated(client, \"testForSupportedRegionAttributes_0\", KEY + i);\n    }\n\n    \r\n    createCQ(client, poolName, \"testForSupportedRegionAttributes_1\", cqs[2]);\n\n    String errMsg =\n        \"The replicated region \" + \" specified in CQ creation does not have scope supported by CQ.\"\n            + \" The CQ supported scopes are DISTRIBUTED_ACK and GLOBAL.\";\n    final String expectedErr = \"Cq not registered on primary\";\n    client.invoke(new CacheSerializableRunnable(\"Set expect\") {\n      @Override\n      public void run2() {\n        getCache().getLogger()\n            .info(\"<ExpectedException action=add>\" + expectedErr + \"</ExpectedException>\");\n      }\n    });\n\n    try {\n      executeCQ(client, \"testForSupportedRegionAttributes_1\", false, \"CqException\");\n      fail(\"The test should have failed with exception, \" + errMsg);\n    } catch (Exception expected) {\n      \r\n    } finally {\n      client.invoke(new CacheSerializableRunnable(\"Remove expect\") {\n        @Override\n        public void run2() {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=remove>\" + expectedErr + \"</ExpectedException>\");\n        }\n      });\n    }\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n    closeServer(server2);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2868,"status":"N"}],"commitId":"46b78978d894e8851daf86d929ae5efbd9093097","commitMessage":"@@@GEODE-5411: Adding awaitility fixing timing issue in CqPerfDUnitTest\n\n- Fixing timing issue by waiting for cq set to reach the right size\n- Code modernization and cleanup","date":"2018-08-31 08:10:50","modifiedFileCount":"3","status":"M","submitter":"mhansonp"},{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public void testForSupportedRegionAttributes() {\n    VM server1 = VM.getVM(0);\n    VM server2 = VM.getVM(1);\n    VM client = VM.getVM(2);\n\n    \r\n    SerializableRunnable createServer = new CacheSerializableRunnable(\"Create Cache Server\") {\n      @Override\n      public void run2() throws CacheException {\n        logger.info(\"### Create Cache Server. ###\");\n\n        \r\n        AttributesFactory factory1 = new AttributesFactory();\n        factory1.setScope(Scope.GLOBAL);\n        factory1.setDataPolicy(DataPolicy.REPLICATE);\n        createRegion(regions[0], factory1.createRegionAttributes());\n\n        \r\n        AttributesFactory factory2 = new AttributesFactory();\n        factory2.setScope(Scope.DISTRIBUTED_NO_ACK);\n        factory2.setDataPolicy(DataPolicy.REPLICATE);\n        createRegion(regions[1], factory2.createRegionAttributes());\n\n        Wait.pause(2000);\n\n        try {\n          startBridgeServer(port, true);\n        } catch (Exception ex) {\n          fail(\"While starting CacheServer\", ex);\n        }\n        Wait.pause(2000);\n\n      }\n    };\n\n    server1.invoke(createServer);\n    server2.invoke(createServer);\n\n    final int port1 = server1.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName();\n\n    final int thePort2 = server2.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n\n    \r\n    createClient(client, new int[] {port1, thePort2}, host0, \"-1\");\n\n    \r\n    createCQ(client, \"testForSupportedRegionAttributes_0\", cqs[0]);\n    executeCQ(client, \"testForSupportedRegionAttributes_0\", false, null);\n\n    int size = 5;\n\n    createValues(server1, regions[0], size);\n\n    for (int i = 1; i <= size; i++) {\n      waitForCreated(client, \"testForSupportedRegionAttributes_0\", KEY + i);\n    }\n\n    \r\n    createCQ(client, \"testForSupportedRegionAttributes_1\", cqs[2]);\n\n    String errMsg =\n        \"The replicated region \" + \" specified in CQ creation does not have scope supported by CQ.\"\n            + \" The CQ supported scopes are DISTRIBUTED_ACK and GLOBAL.\";\n    final String expectedErr = \"Cq not registered on primary\";\n    client.invoke(new CacheSerializableRunnable(\"Set expect\") {\n      @Override\n      public void run2() {\n        getCache().getLogger()\n            .info(\"<ExpectedException action=add>\" + expectedErr + \"</ExpectedException>\");\n      }\n    });\n\n    try {\n      executeCQ(client, \"testForSupportedRegionAttributes_1\", false, \"CqException\");\n      fail(\"The test should have failed with exception, \" + errMsg);\n    } catch (Exception ex) {\n      \r\n    } finally {\n      client.invoke(new CacheSerializableRunnable(\"Remove expect\") {\n        @Override\n        public void run2() {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=remove>\" + expectedErr + \"</ExpectedException>\");\n        }\n      });\n    }\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n    closeServer(server2);\n\n  }\n","date":"2019-01-12 07:53:54","endLine":2761,"groupId":"10547","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testForSupportedRegionAttributes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/12/01d65d4e254284a3b2774d91deec45ce8f0fa0.src","preCode":"  public void testForSupportedRegionAttributes() {\n    VM server1 = VM.getVM(0);\n    VM server2 = VM.getVM(1);\n    VM client = VM.getVM(2);\n\n    \r\n    SerializableRunnable createServer = new CacheSerializableRunnable(\"Create Cache Server\") {\n      public void run2() throws CacheException {\n        logger.info(\"### Create Cache Server. ###\");\n\n        \r\n        AttributesFactory factory1 = new AttributesFactory();\n        factory1.setScope(Scope.GLOBAL);\n        factory1.setDataPolicy(DataPolicy.REPLICATE);\n        createRegion(regions[0], factory1.createRegionAttributes());\n\n        \r\n        AttributesFactory factory2 = new AttributesFactory();\n        factory2.setScope(Scope.DISTRIBUTED_NO_ACK);\n        factory2.setDataPolicy(DataPolicy.REPLICATE);\n        createRegion(regions[1], factory2.createRegionAttributes());\n\n        Wait.pause(2000);\n\n        try {\n          startBridgeServer(port, true);\n        } catch (Exception ex) {\n          fail(\"While starting CacheServer\", ex);\n        }\n        Wait.pause(2000);\n\n      }\n    };\n\n    server1.invoke(createServer);\n    server2.invoke(createServer);\n\n    final int port1 = server1.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName();\n\n    final int thePort2 = server2.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n\n    \r\n    createClient(client, new int[] {port1, thePort2}, host0, \"-1\");\n\n    \r\n    createCQ(client, \"testForSupportedRegionAttributes_0\", cqs[0]);\n    executeCQ(client, \"testForSupportedRegionAttributes_0\", false, null);\n\n    int size = 5;\n\n    createValues(server1, regions[0], size);\n\n    for (int i = 1; i <= size; i++) {\n      waitForCreated(client, \"testForSupportedRegionAttributes_0\", KEY + i);\n    }\n\n    \r\n    createCQ(client, \"testForSupportedRegionAttributes_1\", cqs[2]);\n\n    String errMsg =\n        \"The replicated region \" + \" specified in CQ creation does not have scope supported by CQ.\"\n            + \" The CQ supported scopes are DISTRIBUTED_ACK and GLOBAL.\";\n    final String expectedErr = \"Cq not registered on primary\";\n    client.invoke(new CacheSerializableRunnable(\"Set expect\") {\n      public void run2() {\n        getCache().getLogger()\n            .info(\"<ExpectedException action=add>\" + expectedErr + \"</ExpectedException>\");\n      }\n    });\n\n    try {\n      executeCQ(client, \"testForSupportedRegionAttributes_1\", false, \"CqException\");\n      fail(\"The test should have failed with exception, \" + errMsg);\n    } catch (Exception ex) {\n      \r\n    } finally {\n      client.invoke(new CacheSerializableRunnable(\"Remove expect\") {\n        public void run2() {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=remove>\" + expectedErr + \"</ExpectedException>\");\n        }\n      });\n    }\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n    closeServer(server2);\n\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2667,"status":"M"},{"authorDate":"2018-07-18 03:54:18","commitOrder":3,"curCode":"  public void testForSupportedRegionAttributes() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    \r\n    SerializableRunnable createServer = new CacheSerializableRunnable(\"Create Cache Server\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create Cache Server. ###\");\n\n        \r\n        AttributesFactory factory1 = new AttributesFactory();\n        factory1.setScope(Scope.GLOBAL);\n        factory1.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[0], factory1.createRegionAttributes());\n\n        \r\n        AttributesFactory factory2 = new AttributesFactory();\n        factory2.setScope(Scope.DISTRIBUTED_NO_ACK);\n        factory2.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[1], factory2.createRegionAttributes());\n\n        Wait.pause(2000);\n\n        try {\n          startBridgeServer(port, true);\n        }\n\n        catch (Exception ex) {\n          Assert.fail(\"While starting CacheServer\", ex);\n        }\n        Wait.pause(2000);\n\n      }\n    };\n\n    server1.invoke(createServer);\n    server2.invoke(createServer);\n\n    final int port1 = server1.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int thePort2 = server2.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n\n    String poolName = \"testForSupportedRegionAttributes\";\n    createPool(client, poolName, new String[] {host0, host0}, new int[] {port1, thePort2});\n\n    \r\n    createCQ(client, poolName, \"testForSupportedRegionAttributes_0\", cqs[0]);\n    executeCQ(client, \"testForSupportedRegionAttributes_0\", false, null);\n\n    int size = 5;\n\n    createValues(server1, regions[0], size);\n\n    for (int i = 1; i <= size; i++) {\n      waitForCreated(client, \"testForSupportedRegionAttributes_0\", KEY + i);\n    }\n\n    \r\n    createCQ(client, poolName, \"testForSupportedRegionAttributes_1\", cqs[2]);\n\n    String errMsg =\n        \"The replicated region \" + \" specified in CQ creation does not have scope supported by CQ.\"\n            + \" The CQ supported scopes are DISTRIBUTED_ACK and GLOBAL.\";\n    final String expectedErr = \"Cq not registered on primary\";\n    client.invoke(new CacheSerializableRunnable(\"Set expect\") {\n      @Override\n      public void run2() {\n        getCache().getLogger()\n            .info(\"<ExpectedException action=add>\" + expectedErr + \"</ExpectedException>\");\n      }\n    });\n\n    try {\n      executeCQ(client, \"testForSupportedRegionAttributes_1\", false, \"CqException\");\n      fail(\"The test should have failed with exception, \" + errMsg);\n    } catch (Exception expected) {\n      \r\n    } finally {\n      client.invoke(new CacheSerializableRunnable(\"Remove expect\") {\n        @Override\n        public void run2() {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=remove>\" + expectedErr + \"</ExpectedException>\");\n        }\n      });\n    }\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n    closeServer(server2);\n  }\n","date":"2018-07-18 03:54:18","endLine":2964,"groupId":"10547","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testForSupportedRegionAttributes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/5172d12d02b90c1af7e602c4eef42915b15293.src","preCode":"  public void testForSupportedRegionAttributes() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    \r\n    SerializableRunnable createServer = new CacheSerializableRunnable(\"Create Cache Server\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create Cache Server. ###\");\n\n        \r\n        AttributesFactory factory1 = new AttributesFactory();\n        factory1.setScope(Scope.GLOBAL);\n        factory1.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[0], factory1.createRegionAttributes());\n\n        \r\n        AttributesFactory factory2 = new AttributesFactory();\n        factory2.setScope(Scope.DISTRIBUTED_NO_ACK);\n        factory2.setMirrorType(MirrorType.KEYS_VALUES);\n        createRegion(regions[1], factory2.createRegionAttributes());\n\n        Wait.pause(2000);\n\n        try {\n          startBridgeServer(port, true);\n        }\n\n        catch (Exception ex) {\n          Assert.fail(\"While starting CacheServer\", ex);\n        }\n        Wait.pause(2000);\n\n      }\n    };\n\n    server1.invoke(createServer);\n    server2.invoke(createServer);\n\n    final int port1 = server1.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int thePort2 = server2.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n\n    String poolName = \"testForSupportedRegionAttributes\";\n    createPool(client, poolName, new String[] {host0, host0}, new int[] {port1, thePort2});\n\n    \r\n    createCQ(client, poolName, \"testForSupportedRegionAttributes_0\", cqs[0]);\n    executeCQ(client, \"testForSupportedRegionAttributes_0\", false, null);\n\n    int size = 5;\n\n    createValues(server1, regions[0], size);\n\n    for (int i = 1; i <= size; i++) {\n      waitForCreated(client, \"testForSupportedRegionAttributes_0\", KEY + i);\n    }\n\n    \r\n    createCQ(client, poolName, \"testForSupportedRegionAttributes_1\", cqs[2]);\n\n    String errMsg =\n        \"The replicated region \" + \" specified in CQ creation does not have scope supported by CQ.\"\n            + \" The CQ supported scopes are DISTRIBUTED_ACK and GLOBAL.\";\n    final String expectedErr = \"Cq not registered on primary\";\n    client.invoke(new CacheSerializableRunnable(\"Set expect\") {\n      @Override\n      public void run2() {\n        getCache().getLogger()\n            .info(\"<ExpectedException action=add>\" + expectedErr + \"</ExpectedException>\");\n      }\n    });\n\n    try {\n      executeCQ(client, \"testForSupportedRegionAttributes_1\", false, \"CqException\");\n      fail(\"The test should have failed with exception, \" + errMsg);\n    } catch (Exception expected) {\n      \r\n    } finally {\n      client.invoke(new CacheSerializableRunnable(\"Remove expect\") {\n        @Override\n        public void run2() {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=remove>\" + expectedErr + \"</ExpectedException>\");\n        }\n      });\n    }\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n    closeServer(server2);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2868,"status":"N"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"}]
