[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testBasicCompositeIndexUsageWithOneIndexExpansionAndTruncation() throws Exception {\n    try {\n      IndexManager.TEST_RANGEINDEX_ONLY = true;\n\n      Object r[][] = new Object[1][2];\n      QueryService qs = CacheUtils.getQueryService();\n      Position.resetCounter();\n      \r\n      Region r1 = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n      for (int i = 0; i < 1000; i++) {\n        r1.put(i + \"\", new Portfolio(i));\n      }\n      Set add1 = new HashSet();\n      add1.add(new Address(\"411045\", \"Baner\"));\n      add1.add(new Address(\"411001\", \"DholePatilRd\"));\n\n      Region r2 = CacheUtils.createRegion(\"employee\", Employee.class);\n      for (int i = 0; i < 1000; i++) {\n        r2.put(i + \"\", new Employee(\"empName\", (20 + i), i, \"Mr.\", (5000 + i), add1));\n      }\n\n      String queries[] = {\n          \r\n          \"SELECT DISTINCT * FROM /portfolio pf, pf.positions pos, /employee emp WHERE pf.iD = emp.empId\",};\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        r[i][0] = q.execute();\n      }\n      \r\n      qs.createIndex(\"idIndexPf\", IndexType.FUNCTIONAL, \"iD\",\n          \"/portfolio pf , pf.collectionHolderMap\");\n      qs.createIndex(\"empIdIndexPf2\", IndexType.FUNCTIONAL, \"empId\", \"/employee\");\n\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n        if (!observer.isIndexesUsed) {\n          fail(\"Index is NOT uesd\");\n        }\n\n        Iterator itr = observer.indexesUsed.iterator();\n        while (itr.hasNext()) {\n          String temp = itr.next().toString();\n          if (!(temp.equals(\"idIndexPf\") || temp.equals(\"empIdIndexPf2\"))) {\n            fail(\"<idIndexPf> or <empIdIndexPf2>    was expected but found \" + temp.toString());\n          }\n        }\n\n        int indxs = observer.indexesUsed.size();\n        assertTrue(\"Indexes used is not of size = 2\", indxs == 2);\n      }\n      StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n      ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n    } finally {\n      IndexManager.TEST_RANGEINDEX_ONLY = false;\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":756,"groupId":"10117","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicCompositeIndexUsageWithOneIndexExpansionAndTruncation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/51/765d91cc7c5df99b1ba7aa4a69b027ab3cd0c9.src","preCode":"  public void testBasicCompositeIndexUsageWithOneIndexExpansionAndTruncation() throws Exception {\n    try {\n      IndexManager.TEST_RANGEINDEX_ONLY = true;\n\n      Object r[][] = new Object[1][2];\n      QueryService qs = CacheUtils.getQueryService();\n      Position.resetCounter();\n      \r\n      Region r1 = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n      for (int i = 0; i < 1000; i++) {\n        r1.put(i + \"\", new Portfolio(i));\n      }\n      Set add1 = new HashSet();\n      add1.add(new Address(\"411045\", \"Baner\"));\n      add1.add(new Address(\"411001\", \"DholePatilRd\"));\n\n      Region r2 = CacheUtils.createRegion(\"employee\", Employee.class);\n      for (int i = 0; i < 1000; i++) {\n        r2.put(i + \"\", new Employee(\"empName\", (20 + i), i, \"Mr.\", (5000 + i), add1));\n      }\n\n      String queries[] = {\n          \r\n          \"SELECT DISTINCT * FROM /portfolio pf, pf.positions pos, /employee emp WHERE pf.iD = emp.empId\",};\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        r[i][0] = q.execute();\n      }\n      \r\n      qs.createIndex(\"idIndexPf\", IndexType.FUNCTIONAL, \"iD\",\n          \"/portfolio pf , pf.collectionHolderMap\");\n      qs.createIndex(\"empIdIndexPf2\", IndexType.FUNCTIONAL, \"empId\", \"/employee\");\n\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n        if (!observer.isIndexesUsed) {\n          fail(\"Index is NOT uesd\");\n        }\n\n        Iterator itr = observer.indexesUsed.iterator();\n        while (itr.hasNext()) {\n          String temp = itr.next().toString();\n          if (!(temp.equals(\"idIndexPf\") || temp.equals(\"empIdIndexPf2\"))) {\n            fail(\"<idIndexPf> or <empIdIndexPf2>    was expected but found \" + temp.toString());\n          }\n        }\n\n        int indxs = observer.indexesUsed.size();\n        assertTrue(\"Indexes used is not of size = 2\", indxs == 2);\n      }\n      StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n      ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n    } finally {\n      IndexManager.TEST_RANGEINDEX_ONLY = false;\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":696,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testBasicCompositeIndexUsageInAllGroupJunction() throws Exception {\n    try {\n      IndexManager.TEST_RANGEINDEX_ONLY = true;\n\n      Object r[][] = new Object[1][2];\n      QueryService qs = CacheUtils.getQueryService();\n      Position.resetCounter();\n      \r\n      Region r1 = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n      for (int i = 0; i < 100; i++) {\n        r1.put(i + \"\", new Portfolio(i));\n      }\n\n      Region r3 = CacheUtils.createRegion(\"portfolio3\", Portfolio.class);\n      for (int i = 0; i < 10; i++) {\n        r3.put(i + \"\", new Portfolio(i));\n      }\n      Set add1 = new HashSet();\n      add1.add(new Address(\"411045\", \"Baner\"));\n      add1.add(new Address(\"411001\", \"DholePatilRd\"));\n\n      Region r2 = CacheUtils.createRegion(\"employee\", Employee.class);\n      for (int i = 0; i < 100; i++) {\n        r2.put(i + \"\", new Employee(\"empName\", (20 + i), i, \"Mr.\", (5000 + i), add1));\n      }\n\n      String queries[] = {\n          \r\n          \"SELECT DISTINCT * FROM /portfolio pf, pf.positions pos, /portfolio3 pf3, /employee emp WHERE pf.iD = emp.empId and pf.status='active' and emp.age > 50 and pf3.status='active'\",};\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        r[i][0] = q.execute();\n      }\n      \r\n      qs.createIndex(\"idIndexPf\", IndexType.FUNCTIONAL, \"iD\",\n          \"/portfolio pf , pf.collectionHolderMap\");\n      qs.createIndex(\"empIdIndexPf2\", IndexType.FUNCTIONAL, \"empId\", \"/employee\");\n      qs.createIndex(\"statusIndexPf3\", IndexType.FUNCTIONAL, \"status\", \"/portfolio3 pf3 \");\n      qs.createIndex(\"ageIndexemp\", IndexType.FUNCTIONAL, \"age\", \"/employee emp \");\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n        if (!observer.isIndexesUsed) {\n          fail(\"Index is NOT uesd\");\n        }\n\n        Iterator itr = observer.indexesUsed.iterator();\n        while (itr.hasNext()) {\n          String temp = itr.next().toString();\n          if (!(temp.equals(\"ageIndexemp\") || temp.equals(\"idIndexPf\")\n              || temp.equals(\"empIdIndexPf2\") || temp.equals(\"statusIndexPf3\"))) {\n            fail(\"<idIndexPf> or <empIdIndexPf2>    was expected but found \" + temp.toString());\n          }\n        }\n\n        int indxs = observer.indexesUsed.size();\n        assertTrue(\"Indexes used is not of size = 4 but of size = \" + indxs, indxs == 4);\n      }\n      StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n      ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n    } finally {\n      IndexManager.TEST_RANGEINDEX_ONLY = false;\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":974,"groupId":"10113","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasicCompositeIndexUsageInAllGroupJunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/51/765d91cc7c5df99b1ba7aa4a69b027ab3cd0c9.src","preCode":"  public void testBasicCompositeIndexUsageInAllGroupJunction() throws Exception {\n    try {\n      IndexManager.TEST_RANGEINDEX_ONLY = true;\n\n      Object r[][] = new Object[1][2];\n      QueryService qs = CacheUtils.getQueryService();\n      Position.resetCounter();\n      \r\n      Region r1 = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n      for (int i = 0; i < 100; i++) {\n        r1.put(i + \"\", new Portfolio(i));\n      }\n\n      Region r3 = CacheUtils.createRegion(\"portfolio3\", Portfolio.class);\n      for (int i = 0; i < 10; i++) {\n        r3.put(i + \"\", new Portfolio(i));\n      }\n      Set add1 = new HashSet();\n      add1.add(new Address(\"411045\", \"Baner\"));\n      add1.add(new Address(\"411001\", \"DholePatilRd\"));\n\n      Region r2 = CacheUtils.createRegion(\"employee\", Employee.class);\n      for (int i = 0; i < 100; i++) {\n        r2.put(i + \"\", new Employee(\"empName\", (20 + i), i, \"Mr.\", (5000 + i), add1));\n      }\n\n      String queries[] = {\n          \r\n          \"SELECT DISTINCT * FROM /portfolio pf, pf.positions pos, /portfolio3 pf3, /employee emp WHERE pf.iD = emp.empId and pf.status='active' and emp.age > 50 and pf3.status='active'\",};\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        r[i][0] = q.execute();\n      }\n      \r\n      qs.createIndex(\"idIndexPf\", IndexType.FUNCTIONAL, \"iD\",\n          \"/portfolio pf , pf.collectionHolderMap\");\n      qs.createIndex(\"empIdIndexPf2\", IndexType.FUNCTIONAL, \"empId\", \"/employee\");\n      qs.createIndex(\"statusIndexPf3\", IndexType.FUNCTIONAL, \"status\", \"/portfolio3 pf3 \");\n      qs.createIndex(\"ageIndexemp\", IndexType.FUNCTIONAL, \"age\", \"/employee emp \");\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n        if (!observer.isIndexesUsed) {\n          fail(\"Index is NOT uesd\");\n        }\n\n        Iterator itr = observer.indexesUsed.iterator();\n        while (itr.hasNext()) {\n          String temp = itr.next().toString();\n          if (!(temp.equals(\"ageIndexemp\") || temp.equals(\"idIndexPf\")\n              || temp.equals(\"empIdIndexPf2\") || temp.equals(\"statusIndexPf3\"))) {\n            fail(\"<idIndexPf> or <empIdIndexPf2>    was expected but found \" + temp.toString());\n          }\n        }\n\n        int indxs = observer.indexesUsed.size();\n        assertTrue(\"Indexes used is not of size = 4 but of size = \" + indxs, indxs == 4);\n      }\n      StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n      ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n    } finally {\n      IndexManager.TEST_RANGEINDEX_ONLY = false;\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":907,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testBasicCompositeIndexUsageWithOneIndexExpansionAndTruncation() throws Exception {\n    try {\n      IndexManager.TEST_RANGEINDEX_ONLY = true;\n\n      Object r[][] = new Object[1][2];\n      QueryService qs = CacheUtils.getQueryService();\n      Position.resetCounter();\n      \r\n      Region r1 = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n      for (int i = 0; i < 1000; i++) {\n        r1.put(i + \"\", new Portfolio(i));\n      }\n      Set add1 = new HashSet();\n      add1.add(new Address(\"411045\", \"Baner\"));\n      add1.add(new Address(\"411001\", \"DholePatilRd\"));\n\n      Region r2 = CacheUtils.createRegion(\"employee\", Employee.class);\n      for (int i = 0; i < 1000; i++) {\n        r2.put(i + \"\", new Employee(\"empName\", (20 + i), i, \"Mr.\", (5000 + i), add1));\n      }\n\n      String queries[] = {\n          \r\n          \"SELECT DISTINCT * FROM \" + SEPARATOR + \"portfolio pf, pf.positions pos, \" + SEPARATOR\n              + \"employee emp WHERE pf.iD = emp.empId\",};\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        r[i][0] = q.execute();\n      }\n      \r\n      qs.createIndex(\"idIndexPf\", IndexType.FUNCTIONAL, \"iD\",\n          SEPARATOR + \"portfolio pf , pf.collectionHolderMap\");\n      qs.createIndex(\"empIdIndexPf2\", IndexType.FUNCTIONAL, \"empId\", SEPARATOR + \"employee\");\n\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n        if (!observer.isIndexesUsed) {\n          fail(\"Index is NOT uesd\");\n        }\n\n        Iterator itr = observer.indexesUsed.iterator();\n        while (itr.hasNext()) {\n          String temp = itr.next().toString();\n          if (!(temp.equals(\"idIndexPf\") || temp.equals(\"empIdIndexPf2\"))) {\n            fail(\"<idIndexPf> or <empIdIndexPf2>    was expected but found \" + temp.toString());\n          }\n        }\n\n        int indxs = observer.indexesUsed.size();\n        assertTrue(\"Indexes used is not of size = 2\", indxs == 2);\n      }\n      StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n      ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n    } finally {\n      IndexManager.TEST_RANGEINDEX_ONLY = false;\n    }\n  }\n","date":"2020-05-29 00:37:39","endLine":792,"groupId":"104870","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testBasicCompositeIndexUsageWithOneIndexExpansionAndTruncation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8b/d46344f7bb61cc811d40680265b58290f48e21.src","preCode":"  public void testBasicCompositeIndexUsageWithOneIndexExpansionAndTruncation() throws Exception {\n    try {\n      IndexManager.TEST_RANGEINDEX_ONLY = true;\n\n      Object r[][] = new Object[1][2];\n      QueryService qs = CacheUtils.getQueryService();\n      Position.resetCounter();\n      \r\n      Region r1 = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n      for (int i = 0; i < 1000; i++) {\n        r1.put(i + \"\", new Portfolio(i));\n      }\n      Set add1 = new HashSet();\n      add1.add(new Address(\"411045\", \"Baner\"));\n      add1.add(new Address(\"411001\", \"DholePatilRd\"));\n\n      Region r2 = CacheUtils.createRegion(\"employee\", Employee.class);\n      for (int i = 0; i < 1000; i++) {\n        r2.put(i + \"\", new Employee(\"empName\", (20 + i), i, \"Mr.\", (5000 + i), add1));\n      }\n\n      String queries[] = {\n          \r\n          \"SELECT DISTINCT * FROM /portfolio pf, pf.positions pos, /employee emp WHERE pf.iD = emp.empId\",};\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        r[i][0] = q.execute();\n      }\n      \r\n      qs.createIndex(\"idIndexPf\", IndexType.FUNCTIONAL, \"iD\",\n          \"/portfolio pf , pf.collectionHolderMap\");\n      qs.createIndex(\"empIdIndexPf2\", IndexType.FUNCTIONAL, \"empId\", \"/employee\");\n\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n        if (!observer.isIndexesUsed) {\n          fail(\"Index is NOT uesd\");\n        }\n\n        Iterator itr = observer.indexesUsed.iterator();\n        while (itr.hasNext()) {\n          String temp = itr.next().toString();\n          if (!(temp.equals(\"idIndexPf\") || temp.equals(\"empIdIndexPf2\"))) {\n            fail(\"<idIndexPf> or <empIdIndexPf2>    was expected but found \" + temp.toString());\n          }\n        }\n\n        int indxs = observer.indexesUsed.size();\n        assertTrue(\"Indexes used is not of size = 2\", indxs == 2);\n      }\n      StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n      ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n    } finally {\n      IndexManager.TEST_RANGEINDEX_ONLY = false;\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":731,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testBasicCompositeIndexUsageInAllGroupJunction() throws Exception {\n    try {\n      IndexManager.TEST_RANGEINDEX_ONLY = true;\n\n      Object r[][] = new Object[1][2];\n      QueryService qs = CacheUtils.getQueryService();\n      Position.resetCounter();\n      \r\n      Region r1 = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n      for (int i = 0; i < 100; i++) {\n        r1.put(i + \"\", new Portfolio(i));\n      }\n\n      Region r3 = CacheUtils.createRegion(\"portfolio3\", Portfolio.class);\n      for (int i = 0; i < 10; i++) {\n        r3.put(i + \"\", new Portfolio(i));\n      }\n      Set add1 = new HashSet();\n      add1.add(new Address(\"411045\", \"Baner\"));\n      add1.add(new Address(\"411001\", \"DholePatilRd\"));\n\n      Region r2 = CacheUtils.createRegion(\"employee\", Employee.class);\n      for (int i = 0; i < 100; i++) {\n        r2.put(i + \"\", new Employee(\"empName\", (20 + i), i, \"Mr.\", (5000 + i), add1));\n      }\n\n      String queries[] = {\n          \r\n          \"SELECT DISTINCT * FROM \" + SEPARATOR + \"portfolio pf, pf.positions pos, \" + SEPARATOR\n              + \"portfolio3 pf3, \" + SEPARATOR\n              + \"employee emp WHERE pf.iD = emp.empId and pf.status='active' and emp.age > 50 and pf3.status='active'\",};\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        r[i][0] = q.execute();\n      }\n      \r\n      qs.createIndex(\"idIndexPf\", IndexType.FUNCTIONAL, \"iD\",\n          SEPARATOR + \"portfolio pf , pf.collectionHolderMap\");\n      qs.createIndex(\"empIdIndexPf2\", IndexType.FUNCTIONAL, \"empId\", SEPARATOR + \"employee\");\n      qs.createIndex(\"statusIndexPf3\", IndexType.FUNCTIONAL, \"status\",\n          SEPARATOR + \"portfolio3 pf3 \");\n      qs.createIndex(\"ageIndexemp\", IndexType.FUNCTIONAL, \"age\", SEPARATOR + \"employee emp \");\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n        if (!observer.isIndexesUsed) {\n          fail(\"Index is NOT uesd\");\n        }\n\n        Iterator itr = observer.indexesUsed.iterator();\n        while (itr.hasNext()) {\n          String temp = itr.next().toString();\n          if (!(temp.equals(\"ageIndexemp\") || temp.equals(\"idIndexPf\")\n              || temp.equals(\"empIdIndexPf2\") || temp.equals(\"statusIndexPf3\"))) {\n            fail(\"<idIndexPf> or <empIdIndexPf2>    was expected but found \" + temp.toString());\n          }\n        }\n\n        int indxs = observer.indexesUsed.size();\n        assertTrue(\"Indexes used is not of size = 4 but of size = \" + indxs, indxs == 4);\n      }\n      StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n      ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n    } finally {\n      IndexManager.TEST_RANGEINDEX_ONLY = false;\n    }\n  }\n","date":"2020-05-29 00:37:39","endLine":1016,"groupId":"104870","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testBasicCompositeIndexUsageInAllGroupJunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8b/d46344f7bb61cc811d40680265b58290f48e21.src","preCode":"  public void testBasicCompositeIndexUsageInAllGroupJunction() throws Exception {\n    try {\n      IndexManager.TEST_RANGEINDEX_ONLY = true;\n\n      Object r[][] = new Object[1][2];\n      QueryService qs = CacheUtils.getQueryService();\n      Position.resetCounter();\n      \r\n      Region r1 = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n      for (int i = 0; i < 100; i++) {\n        r1.put(i + \"\", new Portfolio(i));\n      }\n\n      Region r3 = CacheUtils.createRegion(\"portfolio3\", Portfolio.class);\n      for (int i = 0; i < 10; i++) {\n        r3.put(i + \"\", new Portfolio(i));\n      }\n      Set add1 = new HashSet();\n      add1.add(new Address(\"411045\", \"Baner\"));\n      add1.add(new Address(\"411001\", \"DholePatilRd\"));\n\n      Region r2 = CacheUtils.createRegion(\"employee\", Employee.class);\n      for (int i = 0; i < 100; i++) {\n        r2.put(i + \"\", new Employee(\"empName\", (20 + i), i, \"Mr.\", (5000 + i), add1));\n      }\n\n      String queries[] = {\n          \r\n          \"SELECT DISTINCT * FROM /portfolio pf, pf.positions pos, /portfolio3 pf3, /employee emp WHERE pf.iD = emp.empId and pf.status='active' and emp.age > 50 and pf3.status='active'\",};\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        r[i][0] = q.execute();\n      }\n      \r\n      qs.createIndex(\"idIndexPf\", IndexType.FUNCTIONAL, \"iD\",\n          \"/portfolio pf , pf.collectionHolderMap\");\n      qs.createIndex(\"empIdIndexPf2\", IndexType.FUNCTIONAL, \"empId\", \"/employee\");\n      qs.createIndex(\"statusIndexPf3\", IndexType.FUNCTIONAL, \"status\", \"/portfolio3 pf3 \");\n      qs.createIndex(\"ageIndexemp\", IndexType.FUNCTIONAL, \"age\", \"/employee emp \");\n      \r\n      for (int i = 0; i < queries.length; i++) {\n        Query q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n        if (!observer.isIndexesUsed) {\n          fail(\"Index is NOT uesd\");\n        }\n\n        Iterator itr = observer.indexesUsed.iterator();\n        while (itr.hasNext()) {\n          String temp = itr.next().toString();\n          if (!(temp.equals(\"ageIndexemp\") || temp.equals(\"idIndexPf\")\n              || temp.equals(\"empIdIndexPf2\") || temp.equals(\"statusIndexPf3\"))) {\n            fail(\"<idIndexPf> or <empIdIndexPf2>    was expected but found \" + temp.toString());\n          }\n        }\n\n        int indxs = observer.indexesUsed.size();\n        assertTrue(\"Indexes used is not of size = 4 but of size = \" + indxs, indxs == 4);\n      }\n      StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n      ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n    } finally {\n      IndexManager.TEST_RANGEINDEX_ONLY = false;\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IUMRMultiIndexesMultiRegionJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":946,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
