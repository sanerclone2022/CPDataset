[{"authorTime":"2018-02-24 07:41:13","codes":[{"authorDate":"2018-02-24 07:41:13","commitOrder":1,"curCode":"  public void validateBatchConflationWithBatchContainingDuplicateConflatableEvents()\n      throws Exception {\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n    Object lastUpdateValue = \"Object_13964_5\";\n    long lastUpdateSequenceId = 104, lastUpdateShadowKey = 28161;\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964_1\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_2\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_3\", 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_4\", 103, 28048));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", lastUpdateValue, lastUpdateSequenceId, lastUpdateShadowKey));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 28274));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    \r\n    \r\n    \r\n    assertThat(conflatedEvents.size()).isEqualTo(3);\n    GatewaySenderEventImpl gsei1 = conflatedEvents.get(0);\n    assertThat(gsei1.getOperation()).isEqualTo(Operation.CREATE);\n    GatewaySenderEventImpl gsei2 = conflatedEvents.get(1);\n    assertThat(gsei2.getOperation()).isEqualTo(Operation.UPDATE);\n    GatewaySenderEventImpl gsei3 = conflatedEvents.get(2);\n    assertThat(gsei3.getOperation()).isEqualTo(Operation.DESTROY);\n    assertThat(gsei2.getDeserializedValue()).isEqualTo(lastUpdateValue);\n    assertThat(gsei2.getEventId().getSequenceID()).isEqualTo(lastUpdateSequenceId);\n    assertThat(gsei2.getShadowKey()).isEqualTo(lastUpdateShadowKey);\n  }\n","date":"2018-02-24 07:41:13","endLine":105,"groupId":"2289","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validateBatchConflationWithBatchContainingDuplicateConflatableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/53/3ed382ea6d5e352bde300ca6fd9a7300cfcd3a.src","preCode":"  public void validateBatchConflationWithBatchContainingDuplicateConflatableEvents()\n      throws Exception {\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n    Object lastUpdateValue = \"Object_13964_5\";\n    long lastUpdateSequenceId = 104, lastUpdateShadowKey = 28161;\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964_1\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_2\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_3\", 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_4\", 103, 28048));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", lastUpdateValue, lastUpdateSequenceId, lastUpdateShadowKey));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 28274));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    \r\n    \r\n    \r\n    assertThat(conflatedEvents.size()).isEqualTo(3);\n    GatewaySenderEventImpl gsei1 = conflatedEvents.get(0);\n    assertThat(gsei1.getOperation()).isEqualTo(Operation.CREATE);\n    GatewaySenderEventImpl gsei2 = conflatedEvents.get(1);\n    assertThat(gsei2.getOperation()).isEqualTo(Operation.UPDATE);\n    GatewaySenderEventImpl gsei3 = conflatedEvents.get(2);\n    assertThat(gsei3.getOperation()).isEqualTo(Operation.DESTROY);\n    assertThat(gsei2.getDeserializedValue()).isEqualTo(lastUpdateValue);\n    assertThat(gsei2.getEventId().getSequenceID()).isEqualTo(lastUpdateSequenceId);\n    assertThat(gsei2.getShadowKey()).isEqualTo(lastUpdateShadowKey);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2018-02-24 07:41:13","commitOrder":1,"curCode":"  public void validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents()\n      throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_13964\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 104, 28161));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    assertThat(originalEvents).isEqualTo(conflatedEvents);\n  }\n","date":"2018-02-24 07:41:13","endLine":140,"groupId":"43236","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/53/3ed382ea6d5e352bde300ca6fd9a7300cfcd3a.src","preCode":"  public void validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents()\n      throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_13964\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 104, 28161));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    assertThat(originalEvents).isEqualTo(conflatedEvents);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"}],"commitId":"147e6bc6b9009aa8e878141ef30e55145732943d","commitMessage":"@@@GEODE-4704: Modified ConflationKey to use shadowKey when comparing events\n\n","date":"2018-02-24 07:41:13","modifiedFileCount":"3","status":"B","submitter":"Barry Oglesby"},{"authorTime":"2019-05-31 05:47:34","codes":[{"authorDate":"2019-05-31 05:47:34","commitOrder":2,"curCode":"  public void validateBatchConflationWithBatchContainingDuplicateConflatableEvents()\n      throws Exception {\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n\n    InternalCache cache = mock(InternalCache.class);\n    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n    when(lr.getCache()).thenReturn(cache);\n    when(cache.getDistributedSystem()).thenReturn(ids);\n    when(ids.getOffHeapStore()).thenReturn(null);\n\n    Object lastUpdateValue = \"Object_13964_5\";\n    long lastUpdateSequenceId = 104, lastUpdateShadowKey = 28161;\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964_1\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_2\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_3\", 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_4\", 103, 28048));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", lastUpdateValue, lastUpdateSequenceId, lastUpdateShadowKey));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 28274));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    \r\n    \r\n    \r\n    assertThat(conflatedEvents.size()).isEqualTo(3);\n    GatewaySenderEventImpl gsei1 = conflatedEvents.get(0);\n    assertThat(gsei1.getOperation()).isEqualTo(Operation.CREATE);\n    GatewaySenderEventImpl gsei2 = conflatedEvents.get(1);\n    assertThat(gsei2.getOperation()).isEqualTo(Operation.UPDATE);\n    GatewaySenderEventImpl gsei3 = conflatedEvents.get(2);\n    assertThat(gsei3.getOperation()).isEqualTo(Operation.DESTROY);\n    assertThat(gsei2.getDeserializedValue()).isEqualTo(lastUpdateValue);\n    assertThat(gsei2.getEventId().getSequenceID()).isEqualTo(lastUpdateSequenceId);\n    assertThat(gsei2.getShadowKey()).isEqualTo(lastUpdateShadowKey);\n  }\n","date":"2019-05-31 05:47:34","endLine":111,"groupId":"2289","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validateBatchConflationWithBatchContainingDuplicateConflatableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/55/8df5cb9a6891428ad9c02534ae1d1371658603.src","preCode":"  public void validateBatchConflationWithBatchContainingDuplicateConflatableEvents()\n      throws Exception {\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n    Object lastUpdateValue = \"Object_13964_5\";\n    long lastUpdateSequenceId = 104, lastUpdateShadowKey = 28161;\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964_1\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_2\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_3\", 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_4\", 103, 28048));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", lastUpdateValue, lastUpdateSequenceId, lastUpdateShadowKey));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 28274));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    \r\n    \r\n    \r\n    assertThat(conflatedEvents.size()).isEqualTo(3);\n    GatewaySenderEventImpl gsei1 = conflatedEvents.get(0);\n    assertThat(gsei1.getOperation()).isEqualTo(Operation.CREATE);\n    GatewaySenderEventImpl gsei2 = conflatedEvents.get(1);\n    assertThat(gsei2.getOperation()).isEqualTo(Operation.UPDATE);\n    GatewaySenderEventImpl gsei3 = conflatedEvents.get(2);\n    assertThat(gsei3.getOperation()).isEqualTo(Operation.DESTROY);\n    assertThat(gsei2.getDeserializedValue()).isEqualTo(lastUpdateValue);\n    assertThat(gsei2.getEventId().getSequenceID()).isEqualTo(lastUpdateSequenceId);\n    assertThat(gsei2.getShadowKey()).isEqualTo(lastUpdateShadowKey);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2019-05-31 05:47:34","commitOrder":2,"curCode":"  public void validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents()\n      throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n\n    InternalCache cache = mock(InternalCache.class);\n    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n    when(lr.getCache()).thenReturn(cache);\n    when(cache.getDistributedSystem()).thenReturn(ids);\n    when(ids.getOffHeapStore()).thenReturn(null);\n\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_13964\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 104, 28161));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    assertThat(originalEvents).isEqualTo(conflatedEvents);\n  }\n","date":"2019-05-31 05:47:34","endLine":153,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/55/8df5cb9a6891428ad9c02534ae1d1371658603.src","preCode":"  public void validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents()\n      throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_13964\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 104, 28161));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    assertThat(originalEvents).isEqualTo(conflatedEvents);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"327feec1946a0b6e28dd552d175e7833dc8d8dd2","commitMessage":"@@@GEODE-6696: EntryEvenImpl.offHeapLock created only if off-heap in use (#3581)\n\n","date":"2019-05-31 05:47:34","modifiedFileCount":"11","status":"M","submitter":"mivanac"},{"authorTime":"2019-06-18 05:58:09","codes":[{"authorDate":"2019-06-18 05:58:09","commitOrder":3,"curCode":"  public void validateBatchConflationWithBatchContainingDuplicateConflatableEvents()\n      throws Exception {\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n    when(lr.getCache()).thenReturn(this.cache);\n\n    Object lastUpdateValue = \"Object_13964_5\";\n    long lastUpdateSequenceId = 104, lastUpdateShadowKey = 28161;\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964_1\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_2\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_3\", 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_4\", 103, 28048));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", lastUpdateValue, lastUpdateSequenceId, lastUpdateShadowKey));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 104, 28274));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    \r\n    \r\n    \r\n    assertThat(conflatedEvents.size()).isEqualTo(3);\n    GatewaySenderEventImpl gsei1 = conflatedEvents.get(0);\n    assertThat(gsei1.getOperation()).isEqualTo(Operation.CREATE);\n    GatewaySenderEventImpl gsei2 = conflatedEvents.get(1);\n    assertThat(gsei2.getOperation()).isEqualTo(Operation.UPDATE);\n    GatewaySenderEventImpl gsei3 = conflatedEvents.get(2);\n    assertThat(gsei3.getOperation()).isEqualTo(Operation.DESTROY);\n    assertThat(gsei2.getDeserializedValue()).isEqualTo(lastUpdateValue);\n    assertThat(gsei2.getEventId().getSequenceID()).isEqualTo(lastUpdateSequenceId);\n    assertThat(gsei2.getShadowKey()).isEqualTo(lastUpdateShadowKey);\n  }\n","date":"2019-06-18 05:58:09","endLine":107,"groupId":"2289","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"validateBatchConflationWithBatchContainingDuplicateConflatableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7b/0cfb2931347631baecc4e563475436e6bd388b.src","preCode":"  public void validateBatchConflationWithBatchContainingDuplicateConflatableEvents()\n      throws Exception {\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n\n    InternalCache cache = mock(InternalCache.class);\n    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n    when(lr.getCache()).thenReturn(cache);\n    when(cache.getDistributedSystem()).thenReturn(ids);\n    when(ids.getOffHeapStore()).thenReturn(null);\n\n    Object lastUpdateValue = \"Object_13964_5\";\n    long lastUpdateSequenceId = 104, lastUpdateShadowKey = 28161;\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964_1\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_2\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_3\", 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_4\", 103, 28048));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", lastUpdateValue, lastUpdateSequenceId, lastUpdateShadowKey));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 28274));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    \r\n    \r\n    \r\n    assertThat(conflatedEvents.size()).isEqualTo(3);\n    GatewaySenderEventImpl gsei1 = conflatedEvents.get(0);\n    assertThat(gsei1.getOperation()).isEqualTo(Operation.CREATE);\n    GatewaySenderEventImpl gsei2 = conflatedEvents.get(1);\n    assertThat(gsei2.getOperation()).isEqualTo(Operation.UPDATE);\n    GatewaySenderEventImpl gsei3 = conflatedEvents.get(2);\n    assertThat(gsei3.getOperation()).isEqualTo(Operation.DESTROY);\n    assertThat(gsei2.getDeserializedValue()).isEqualTo(lastUpdateValue);\n    assertThat(gsei2.getEventId().getSequenceID()).isEqualTo(lastUpdateSequenceId);\n    assertThat(gsei2.getShadowKey()).isEqualTo(lastUpdateShadowKey);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-06-18 05:58:09","commitOrder":3,"curCode":"  public void validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents()\n      throws Exception {\n    \r\n    \r\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n    when(lr.getCache()).thenReturn(this.cache);\n\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 104, 28161));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    assertThat(originalEvents).isEqualTo(conflatedEvents);\n  }\n","date":"2019-06-18 05:58:09","endLine":145,"groupId":"43236","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7b/0cfb2931347631baecc4e563475436e6bd388b.src","preCode":"  public void validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents()\n      throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n\n    InternalCache cache = mock(InternalCache.class);\n    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n    when(lr.getCache()).thenReturn(cache);\n    when(cache.getDistributedSystem()).thenReturn(ids);\n    when(ids.getOffHeapStore()).thenReturn(null);\n\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_13964\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 104, 28161));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    assertThat(originalEvents).isEqualTo(conflatedEvents);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"20a8a1f17c3c4c4d882719adf0479e5a55315e9d","commitMessage":"@@@GEODE-6854: Skipped events already contained in the batch during conflation\n\n","date":"2019-06-18 05:58:09","modifiedFileCount":"4","status":"M","submitter":"Barry Oglesby"},{"authorTime":"2019-06-18 05:58:09","codes":[{"authorDate":"2019-08-27 01:06:01","commitOrder":4,"curCode":"  public void validateBatchConflationWithBatchContainingDuplicateConflatableEvents()\n      throws Exception {\n    \r\n\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n    when(lr.getCache()).thenReturn(this.cache);\n\n    Object lastUpdateValue = \"Object_13964_5\";\n    long lastUpdateSequenceId = 104, lastUpdateShadowKey = 28161;\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964_1\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_2\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_3\", 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_4\", 103, 28048));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", lastUpdateValue, lastUpdateSequenceId, lastUpdateShadowKey));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 105, 28274));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    \r\n    \r\n    \r\n    assertThat(conflatedEvents.size()).isEqualTo(3);\n    GatewaySenderEventImpl gsei1 = conflatedEvents.get(0);\n    assertThat(gsei1.getOperation()).isEqualTo(Operation.CREATE);\n    GatewaySenderEventImpl gsei2 = conflatedEvents.get(1);\n    assertThat(gsei2.getOperation()).isEqualTo(Operation.UPDATE);\n    GatewaySenderEventImpl gsei3 = conflatedEvents.get(2);\n    assertThat(gsei3.getOperation()).isEqualTo(Operation.DESTROY);\n    assertThat(gsei2.getDeserializedValue()).isEqualTo(lastUpdateValue);\n    assertThat(gsei2.getEventId().getSequenceID()).isEqualTo(lastUpdateSequenceId);\n    assertThat(gsei2.getShadowKey()).isEqualTo(lastUpdateShadowKey);\n  }\n","date":"2019-08-27 01:06:01","endLine":112,"groupId":"2289","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"validateBatchConflationWithBatchContainingDuplicateConflatableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/97/7be4a6f790aa54d48472ca05006185b177e21e.src","preCode":"  public void validateBatchConflationWithBatchContainingDuplicateConflatableEvents()\n      throws Exception {\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n    when(lr.getCache()).thenReturn(this.cache);\n\n    Object lastUpdateValue = \"Object_13964_5\";\n    long lastUpdateSequenceId = 104, lastUpdateShadowKey = 28161;\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964_1\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_2\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_3\", 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_4\", 103, 28048));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", lastUpdateValue, lastUpdateSequenceId, lastUpdateShadowKey));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 104, 28274));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    \r\n    \r\n    \r\n    assertThat(conflatedEvents.size()).isEqualTo(3);\n    GatewaySenderEventImpl gsei1 = conflatedEvents.get(0);\n    assertThat(gsei1.getOperation()).isEqualTo(Operation.CREATE);\n    GatewaySenderEventImpl gsei2 = conflatedEvents.get(1);\n    assertThat(gsei2.getOperation()).isEqualTo(Operation.UPDATE);\n    GatewaySenderEventImpl gsei3 = conflatedEvents.get(2);\n    assertThat(gsei3.getOperation()).isEqualTo(Operation.DESTROY);\n    assertThat(gsei2.getDeserializedValue()).isEqualTo(lastUpdateValue);\n    assertThat(gsei2.getEventId().getSequenceID()).isEqualTo(lastUpdateSequenceId);\n    assertThat(gsei2.getShadowKey()).isEqualTo(lastUpdateShadowKey);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2019-06-18 05:58:09","commitOrder":4,"curCode":"  public void validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents()\n      throws Exception {\n    \r\n    \r\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n    when(lr.getCache()).thenReturn(this.cache);\n\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 104, 28161));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    assertThat(originalEvents).isEqualTo(conflatedEvents);\n  }\n","date":"2019-06-18 05:58:09","endLine":145,"groupId":"43236","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7b/0cfb2931347631baecc4e563475436e6bd388b.src","preCode":"  public void validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents()\n      throws Exception {\n    \r\n    \r\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n    when(lr.getCache()).thenReturn(this.cache);\n\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 104, 28161));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    assertThat(originalEvents).isEqualTo(conflatedEvents);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"}],"commitId":"0c16b1bfe964c122251b6459400dcacb0362062c","commitMessage":"@@@GEODE-7066: Modified batch conflation to use event id instead of shadow key\n\n","date":"2019-08-27 01:06:01","modifiedFileCount":"3","status":"M","submitter":"Barry Oglesby"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":5,"curCode":"  public void validateBatchConflationWithBatchContainingDuplicateConflatableEvents()\n      throws Exception {\n    \r\n\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(SEPARATOR + \"dataStoreRegion\");\n    when(lr.getCache()).thenReturn(this.cache);\n\n    Object lastUpdateValue = \"Object_13964_5\";\n    long lastUpdateSequenceId = 104, lastUpdateShadowKey = 28161;\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964_1\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_2\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_3\", 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_4\", 103, 28048));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", lastUpdateValue, lastUpdateSequenceId, lastUpdateShadowKey));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 105, 28274));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    \r\n    \r\n    \r\n    assertThat(conflatedEvents.size()).isEqualTo(3);\n    GatewaySenderEventImpl gsei1 = conflatedEvents.get(0);\n    assertThat(gsei1.getOperation()).isEqualTo(Operation.CREATE);\n    GatewaySenderEventImpl gsei2 = conflatedEvents.get(1);\n    assertThat(gsei2.getOperation()).isEqualTo(Operation.UPDATE);\n    GatewaySenderEventImpl gsei3 = conflatedEvents.get(2);\n    assertThat(gsei3.getOperation()).isEqualTo(Operation.DESTROY);\n    assertThat(gsei2.getDeserializedValue()).isEqualTo(lastUpdateValue);\n    assertThat(gsei2.getEventId().getSequenceID()).isEqualTo(lastUpdateSequenceId);\n    assertThat(gsei2.getShadowKey()).isEqualTo(lastUpdateShadowKey);\n  }\n","date":"2020-05-29 00:37:39","endLine":113,"groupId":"101577","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"validateBatchConflationWithBatchContainingDuplicateConflatableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/06/6bae95a9320d14d17454e947af08e7e841011c.src","preCode":"  public void validateBatchConflationWithBatchContainingDuplicateConflatableEvents()\n      throws Exception {\n    \r\n\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n    when(lr.getCache()).thenReturn(this.cache);\n\n    Object lastUpdateValue = \"Object_13964_5\";\n    long lastUpdateSequenceId = 104, lastUpdateShadowKey = 28161;\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964_1\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_2\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_3\", 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", \"Object_13964_4\", 103, 28048));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.UPDATE,\n        \"Object_13964\", lastUpdateValue, lastUpdateSequenceId, lastUpdateShadowKey));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 105, 28274));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    \r\n    \r\n    \r\n    assertThat(conflatedEvents.size()).isEqualTo(3);\n    GatewaySenderEventImpl gsei1 = conflatedEvents.get(0);\n    assertThat(gsei1.getOperation()).isEqualTo(Operation.CREATE);\n    GatewaySenderEventImpl gsei2 = conflatedEvents.get(1);\n    assertThat(gsei2.getOperation()).isEqualTo(Operation.UPDATE);\n    GatewaySenderEventImpl gsei3 = conflatedEvents.get(2);\n    assertThat(gsei3.getOperation()).isEqualTo(Operation.DESTROY);\n    assertThat(gsei2.getDeserializedValue()).isEqualTo(lastUpdateValue);\n    assertThat(gsei2.getEventId().getSequenceID()).isEqualTo(lastUpdateSequenceId);\n    assertThat(gsei2.getShadowKey()).isEqualTo(lastUpdateShadowKey);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":5,"curCode":"  public void validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents()\n      throws Exception {\n    \r\n    \r\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(SEPARATOR + \"dataStoreRegion\");\n    when(lr.getCache()).thenReturn(this.cache);\n\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 104, 28161));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    assertThat(originalEvents).isEqualTo(conflatedEvents);\n  }\n","date":"2020-05-29 00:37:39","endLine":183,"groupId":"101577","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/06/6bae95a9320d14d17454e947af08e7e841011c.src","preCode":"  public void validateBatchConflationWithBatchContainingDuplicateNonConflatableEvents()\n      throws Exception {\n    \r\n    \r\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    AbstractGatewaySenderEventProcessor processor =\n        ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);\n\n    \r\n    List<GatewaySenderEventImpl> originalEvents = new ArrayList<>();\n    LocalRegion lr = mock(LocalRegion.class);\n    when(lr.getFullPath()).thenReturn(\"/dataStoreRegion\");\n    when(lr.getCache()).thenReturn(this.cache);\n\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_13964\", \"Object_13964\", 100, 27709));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 101, 27822));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.DESTROY,\n        \"Object_13964\", null, 102, 27935));\n    originalEvents.add(ParallelGatewaySenderHelper.createGatewaySenderEvent(lr, Operation.CREATE,\n        \"Object_14024\", \"Object_14024\", 104, 28161));\n\n    \r\n    List<GatewaySenderEventImpl> conflatedEvents = processor.conflate(originalEvents);\n\n    \r\n    assertThat(originalEvents).isEqualTo(conflatedEvents);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
