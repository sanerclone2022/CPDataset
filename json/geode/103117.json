[{"authorTime":"2016-09-15 02:08:18","codes":[{"authorDate":"2016-09-15 02:08:18","commitOrder":1,"curCode":"  public void testContains() {\n    ResultsBag bag = getBagObject(Integer.class);\n    bag.add(wrap(new Integer(1), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(2), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(5), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(6), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(7), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(8), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(9), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(10), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(11), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(12), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(13), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(14), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(15), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(16), bag.getCollectionType().getElementType()));\n    bag.applyLimit(6);\n    List temp = bag.asList();\n    assertEquals(6, bag.size());\n    for (int i = 1; i < 17; ++i) {\n      Integer intg = new Integer(i);\n      assertTrue(temp.contains(wrap(intg, bag.getCollectionType().getElementType())) == bag.contains(wrap(intg, bag.getCollectionType().getElementType())));\n    }\n    assertTrue(temp.contains(wrap(null, bag.getCollectionType().getElementType())) == bag.contains(wrap(null, bag.getCollectionType().getElementType())));\n  }\n","date":"2016-09-15 02:08:18","endLine":145,"groupId":"21328","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testContains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d1/e4dbaa2a9c341f386ce9803c14424b977473d5.src","preCode":"  public void testContains() {\n    ResultsBag bag = getBagObject(Integer.class);\n    bag.add(wrap(new Integer(1), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(2), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(5), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(6), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(7), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(8), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(9), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(10), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(11), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(12), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(13), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(14), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(15), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(16), bag.getCollectionType().getElementType()));\n    bag.applyLimit(6);\n    List temp = bag.asList();\n    assertEquals(6, bag.size());\n    for (int i = 1; i < 17; ++i) {\n      Integer intg = new Integer(i);\n      assertTrue(temp.contains(wrap(intg, bag.getCollectionType().getElementType())) == bag.contains(wrap(intg, bag.getCollectionType().getElementType())));\n    }\n    assertTrue(temp.contains(wrap(null, bag.getCollectionType().getElementType())) == bag.contains(wrap(null, bag.getCollectionType().getElementType())));\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/query/internal/ResultsBagLimitBehaviourJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"},{"authorDate":"2016-09-15 02:08:18","commitOrder":1,"curCode":"  public void testRemove() {\n    \r\n    ResultsBag bag = getBagObject(String.class);\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"one\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"two\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"two\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"three\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"three\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"three\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.applyLimit(15);\n    assertEquals(12, bag.size());\n    bag.remove(wrap(null, bag.getCollectionType().getElementType()));\n    assertEquals(11, bag.size());\n    assertEquals(1, bag.occurrences(wrap(null, bag.getCollectionType().getElementType())));\n    bag.remove(wrap(\"three\", bag.getCollectionType().getElementType()));\n    assertEquals(10, bag.size());\n    assertEquals(2, bag.occurrences(wrap(\"three\", bag.getCollectionType().getElementType())));\n    \r\n    bag = getBagObject(Integer.class);\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(1), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(2), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(2), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.applyLimit(8);\n    List temp = bag.asList();\n    int currSize = 8;\n    assertEquals(currSize, 8);\n    for (int i = 1; i < 5; ++i) {\n      Integer intg = new Integer(i);\n      if (temp.contains(wrap(intg, bag.getCollectionType().getElementType()))) {\n        int occurence = bag.occurrences(wrap(intg, bag.getCollectionType().getElementType()));\n        assertTrue(bag.remove(wrap(intg, bag.getCollectionType().getElementType())));\n        assertEquals(--occurence, bag.occurrences(wrap(intg, bag.getCollectionType().getElementType())));\n        --currSize;\n        assertEquals(currSize, bag.size());\n      }\n      else {\n        assertEquals(0, bag.occurrences(wrap(intg, bag.getCollectionType().getElementType())));\n      }\n    }\n    if (temp.contains(wrap(null, bag.getCollectionType().getElementType()))) {\n      int occurence = bag.occurrences(wrap(null, bag.getCollectionType().getElementType()));\n      assertTrue(bag.remove(wrap(null, bag.getCollectionType().getElementType())));\n      assertEquals(--occurence, bag.occurrences(wrap(null, bag.getCollectionType().getElementType())));\n      --currSize;\n      assertEquals(currSize, bag.size());\n    }\n\n    \r\n    bag = getBagObject(Object.class);\n    for (int i = 0; i < 20; ++i) {\n      bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    }\n    bag.applyLimit(4);\n\n    for (int i = 0; i < 3; ++i) {\n      bag.remove(wrap(null, bag.getCollectionType().getElementType()));\n    }\n\n    assertEquals(1, bag.size());\n    assertTrue(bag.contains(wrap(null, bag.getCollectionType().getElementType())));\n    Iterator itr = bag.iterator();\n    assertEquals(wrap(null, bag.getCollectionType().getElementType()), itr.next());\n    assertFalse(itr.hasNext());\n    bag.remove(wrap(null, bag.getCollectionType().getElementType()));\n    assertEquals(0, bag.size());\n    assertFalse(bag.contains(wrap(null, bag.getCollectionType().getElementType())));\n    itr = bag.iterator();\n    assertFalse(itr.hasNext());\n\n  }\n","date":"2016-09-15 02:08:18","endLine":285,"groupId":"21328","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d1/e4dbaa2a9c341f386ce9803c14424b977473d5.src","preCode":"  public void testRemove() {\n    \r\n    ResultsBag bag = getBagObject(String.class);\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"one\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"two\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"two\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"three\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"three\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"three\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.applyLimit(15);\n    assertEquals(12, bag.size());\n    bag.remove(wrap(null, bag.getCollectionType().getElementType()));\n    assertEquals(11, bag.size());\n    assertEquals(1, bag.occurrences(wrap(null, bag.getCollectionType().getElementType())));\n    bag.remove(wrap(\"three\", bag.getCollectionType().getElementType()));\n    assertEquals(10, bag.size());\n    assertEquals(2, bag.occurrences(wrap(\"three\", bag.getCollectionType().getElementType())));\n    \r\n    bag = getBagObject(Integer.class);\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(1), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(2), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(2), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.applyLimit(8);\n    List temp = bag.asList();\n    int currSize = 8;\n    assertEquals(currSize, 8);\n    for (int i = 1; i < 5; ++i) {\n      Integer intg = new Integer(i);\n      if (temp.contains(wrap(intg, bag.getCollectionType().getElementType()))) {\n        int occurence = bag.occurrences(wrap(intg, bag.getCollectionType().getElementType()));\n        assertTrue(bag.remove(wrap(intg, bag.getCollectionType().getElementType())));\n        assertEquals(--occurence, bag.occurrences(wrap(intg, bag.getCollectionType().getElementType())));\n        --currSize;\n        assertEquals(currSize, bag.size());\n      }\n      else {\n        assertEquals(0, bag.occurrences(wrap(intg, bag.getCollectionType().getElementType())));\n      }\n    }\n    if (temp.contains(wrap(null, bag.getCollectionType().getElementType()))) {\n      int occurence = bag.occurrences(wrap(null, bag.getCollectionType().getElementType()));\n      assertTrue(bag.remove(wrap(null, bag.getCollectionType().getElementType())));\n      assertEquals(--occurence, bag.occurrences(wrap(null, bag.getCollectionType().getElementType())));\n      --currSize;\n      assertEquals(currSize, bag.size());\n    }\n\n    \r\n    bag = getBagObject(Object.class);\n    for (int i = 0; i < 20; ++i) {\n      bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    }\n    bag.applyLimit(4);\n\n    for (int i = 0; i < 3; ++i) {\n      bag.remove(wrap(null, bag.getCollectionType().getElementType()));\n    }\n\n    assertEquals(1, bag.size());\n    assertTrue(bag.contains(wrap(null, bag.getCollectionType().getElementType())));\n    Iterator itr = bag.iterator();\n    assertEquals(wrap(null, bag.getCollectionType().getElementType()), itr.next());\n    assertFalse(itr.hasNext());\n    bag.remove(wrap(null, bag.getCollectionType().getElementType()));\n    assertEquals(0, bag.size());\n    assertFalse(bag.contains(wrap(null, bag.getCollectionType().getElementType())));\n    itr = bag.iterator();\n    assertFalse(itr.hasNext());\n\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/query/internal/ResultsBagLimitBehaviourJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"B"}],"commitId":"8ea08da3d2baa64ca631641430b54d71ce3ff362","commitMessage":"@@@GEODE-37 Merge branch 'feature/GEODE-37_2' into develop\n\nConflicts:\n\tgeode-core/src/main/java/com/gemstone/gemfire/cache/query/internal/IndexTrackingQueryObserver.java\n","date":"2016-09-15 02:08:18","modifiedFileCount":"151","status":"B","submitter":"Hitesh Khamesra"},{"authorTime":"2018-04-26 00:13:14","codes":[{"authorDate":"2016-09-15 02:08:18","commitOrder":2,"curCode":"  public void testContains() {\n    ResultsBag bag = getBagObject(Integer.class);\n    bag.add(wrap(new Integer(1), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(2), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(5), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(6), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(7), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(8), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(9), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(10), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(11), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(12), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(13), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(14), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(15), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(16), bag.getCollectionType().getElementType()));\n    bag.applyLimit(6);\n    List temp = bag.asList();\n    assertEquals(6, bag.size());\n    for (int i = 1; i < 17; ++i) {\n      Integer intg = new Integer(i);\n      assertTrue(temp.contains(wrap(intg, bag.getCollectionType().getElementType())) == bag.contains(wrap(intg, bag.getCollectionType().getElementType())));\n    }\n    assertTrue(temp.contains(wrap(null, bag.getCollectionType().getElementType())) == bag.contains(wrap(null, bag.getCollectionType().getElementType())));\n  }\n","date":"2016-09-15 02:08:18","endLine":145,"groupId":"103117","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testContains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d1/e4dbaa2a9c341f386ce9803c14424b977473d5.src","preCode":"  public void testContains() {\n    ResultsBag bag = getBagObject(Integer.class);\n    bag.add(wrap(new Integer(1), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(2), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(5), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(6), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(7), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(8), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(9), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(10), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(11), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(12), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(13), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(14), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(15), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(16), bag.getCollectionType().getElementType()));\n    bag.applyLimit(6);\n    List temp = bag.asList();\n    assertEquals(6, bag.size());\n    for (int i = 1; i < 17; ++i) {\n      Integer intg = new Integer(i);\n      assertTrue(temp.contains(wrap(intg, bag.getCollectionType().getElementType())) == bag.contains(wrap(intg, bag.getCollectionType().getElementType())));\n    }\n    assertTrue(temp.contains(wrap(null, bag.getCollectionType().getElementType())) == bag.contains(wrap(null, bag.getCollectionType().getElementType())));\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/query/internal/ResultsBagLimitBehaviourJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"},{"authorDate":"2018-04-26 00:13:14","commitOrder":2,"curCode":"  public void testRemove() {\n    \r\n    ResultsBag bag = getBagObject(String.class);\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"one\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"two\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"two\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"three\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"three\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"three\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.applyLimit(15);\n    assertEquals(12, bag.size());\n    bag.remove(wrap(null, bag.getCollectionType().getElementType()));\n    assertEquals(11, bag.size());\n    assertEquals(1, bag.occurrences(wrap(null, bag.getCollectionType().getElementType())));\n    bag.remove(wrap(\"three\", bag.getCollectionType().getElementType()));\n    assertEquals(10, bag.size());\n    assertEquals(2, bag.occurrences(wrap(\"three\", bag.getCollectionType().getElementType())));\n    \r\n    bag = getBagObject(Integer.class);\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(1), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(2), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(2), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.applyLimit(8);\n    List temp = bag.asList();\n    int currSize = 8;\n    assertEquals(currSize, 8);\n    for (int i = 1; i < 5; ++i) {\n      Integer intg = new Integer(i);\n      if (temp.contains(wrap(intg, bag.getCollectionType().getElementType()))) {\n        int occurrence = bag.occurrences(wrap(intg, bag.getCollectionType().getElementType()));\n        assertTrue(bag.remove(wrap(intg, bag.getCollectionType().getElementType())));\n        assertEquals(--occurrence,\n            bag.occurrences(wrap(intg, bag.getCollectionType().getElementType())));\n        --currSize;\n        assertEquals(currSize, bag.size());\n      } else {\n        assertEquals(0, bag.occurrences(wrap(intg, bag.getCollectionType().getElementType())));\n      }\n    }\n    if (temp.contains(wrap(null, bag.getCollectionType().getElementType()))) {\n      int occurrence = bag.occurrences(wrap(null, bag.getCollectionType().getElementType()));\n      assertTrue(bag.remove(wrap(null, bag.getCollectionType().getElementType())));\n      assertEquals(--occurrence,\n          bag.occurrences(wrap(null, bag.getCollectionType().getElementType())));\n      --currSize;\n      assertEquals(currSize, bag.size());\n    }\n\n    \r\n    bag = getBagObject(Object.class);\n    for (int i = 0; i < 20; ++i) {\n      bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    }\n    bag.applyLimit(4);\n\n    for (int i = 0; i < 3; ++i) {\n      bag.remove(wrap(null, bag.getCollectionType().getElementType()));\n    }\n\n    assertEquals(1, bag.size());\n    assertTrue(bag.contains(wrap(null, bag.getCollectionType().getElementType())));\n    Iterator itr = bag.iterator();\n    assertEquals(wrap(null, bag.getCollectionType().getElementType()), itr.next());\n    assertFalse(itr.hasNext());\n    bag.remove(wrap(null, bag.getCollectionType().getElementType()));\n    assertEquals(0, bag.size());\n    assertFalse(bag.contains(wrap(null, bag.getCollectionType().getElementType())));\n    itr = bag.iterator();\n    assertFalse(itr.hasNext());\n\n  }\n","date":"2018-04-26 00:13:14","endLine":291,"groupId":"103117","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/88/d87d69e288d2a22f553397ffc732409d6e9b51.src","preCode":"  public void testRemove() {\n    \r\n    ResultsBag bag = getBagObject(String.class);\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"one\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"two\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"two\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"three\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"three\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"three\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.add(wrap(\"four\", bag.getCollectionType().getElementType()));\n    bag.applyLimit(15);\n    assertEquals(12, bag.size());\n    bag.remove(wrap(null, bag.getCollectionType().getElementType()));\n    assertEquals(11, bag.size());\n    assertEquals(1, bag.occurrences(wrap(null, bag.getCollectionType().getElementType())));\n    bag.remove(wrap(\"three\", bag.getCollectionType().getElementType()));\n    assertEquals(10, bag.size());\n    assertEquals(2, bag.occurrences(wrap(\"three\", bag.getCollectionType().getElementType())));\n    \r\n    bag = getBagObject(Integer.class);\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(1), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(2), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(2), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(3), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.add(wrap(new Integer(4), bag.getCollectionType().getElementType()));\n    bag.applyLimit(8);\n    List temp = bag.asList();\n    int currSize = 8;\n    assertEquals(currSize, 8);\n    for (int i = 1; i < 5; ++i) {\n      Integer intg = new Integer(i);\n      if (temp.contains(wrap(intg, bag.getCollectionType().getElementType()))) {\n        int occurence = bag.occurrences(wrap(intg, bag.getCollectionType().getElementType()));\n        assertTrue(bag.remove(wrap(intg, bag.getCollectionType().getElementType())));\n        assertEquals(--occurence,\n            bag.occurrences(wrap(intg, bag.getCollectionType().getElementType())));\n        --currSize;\n        assertEquals(currSize, bag.size());\n      } else {\n        assertEquals(0, bag.occurrences(wrap(intg, bag.getCollectionType().getElementType())));\n      }\n    }\n    if (temp.contains(wrap(null, bag.getCollectionType().getElementType()))) {\n      int occurence = bag.occurrences(wrap(null, bag.getCollectionType().getElementType()));\n      assertTrue(bag.remove(wrap(null, bag.getCollectionType().getElementType())));\n      assertEquals(--occurence,\n          bag.occurrences(wrap(null, bag.getCollectionType().getElementType())));\n      --currSize;\n      assertEquals(currSize, bag.size());\n    }\n\n    \r\n    bag = getBagObject(Object.class);\n    for (int i = 0; i < 20; ++i) {\n      bag.add(wrap(null, bag.getCollectionType().getElementType()));\n    }\n    bag.applyLimit(4);\n\n    for (int i = 0; i < 3; ++i) {\n      bag.remove(wrap(null, bag.getCollectionType().getElementType()));\n    }\n\n    assertEquals(1, bag.size());\n    assertTrue(bag.contains(wrap(null, bag.getCollectionType().getElementType())));\n    Iterator itr = bag.iterator();\n    assertEquals(wrap(null, bag.getCollectionType().getElementType()), itr.next());\n    assertFalse(itr.hasNext());\n    bag.remove(wrap(null, bag.getCollectionType().getElementType()));\n    assertEquals(0, bag.size());\n    assertFalse(bag.contains(wrap(null, bag.getCollectionType().getElementType())));\n    itr = bag.iterator();\n    assertFalse(itr.hasNext());\n\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/query/internal/ResultsBagLimitBehaviourJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"}],"commitId":"de8e24319783e4207f0986eabc4d9f564b165af7","commitMessage":"@@@GEODE-5118: Fix common typos in string literals and comments. (#1833)\n\n","date":"2018-04-26 00:13:14","modifiedFileCount":"97","status":"M","submitter":"Michael \"Sarge\" Dodge"}]
