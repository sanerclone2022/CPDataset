[{"authorTime":"2019-12-06 22:05:35","codes":[{"authorDate":"2019-12-06 22:05:35","commitOrder":1,"curCode":"  public void getRegionsAssociatedMembersInvalidRegions() {\n    locator.invoke(() -> {\n      InternalCache cache = ClusterStartupRule.getCache();\n      Set<String> regions = new HashSet<String>();\n      regions.add(\"/asdfghjkl\");\n      regions.add(\"/asdfghjklmn\");\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, true);\n      assertThat(members).isEmpty();\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, false);\n      assertThat(members).isEmpty();\n    });\n  }\n","date":"2019-12-06 22:05:35","endLine":210,"groupId":"32499","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getRegionsAssociatedMembersInvalidRegions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/66/c5f8a1335e616ea9092fe2181dbbc429199a95.src","preCode":"  public void getRegionsAssociatedMembersInvalidRegions() {\n    locator.invoke(() -> {\n      InternalCache cache = ClusterStartupRule.getCache();\n      Set<String> regions = new HashSet<String>();\n      regions.add(\"/asdfghjkl\");\n      regions.add(\"/asdfghjklmn\");\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, true);\n      assertThat(members).isEmpty();\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, false);\n      assertThat(members).isEmpty();\n    });\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/util/ManagementUtilsDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"B"},{"authorDate":"2019-12-06 22:05:35","commitOrder":1,"curCode":"  public void getRegionsAssociatedMembersInvalidAndValidRegions() {\n    locator.invoke(() -> {\n      InternalCache cache = ClusterStartupRule.getCache();\n      Set<String> regions = new HashSet<String>();\n      regions.add(\"/asdfghjkl\");\n      regions.add(\"/commonRegion\");\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, true);\n      assertThat(members).isEmpty();\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, false);\n      assertThat(members).isEmpty();\n    });\n  }\n","date":"2019-12-06 22:05:35","endLine":226,"groupId":"32499","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getRegionsAssociatedMembersInvalidAndValidRegions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/66/c5f8a1335e616ea9092fe2181dbbc429199a95.src","preCode":"  public void getRegionsAssociatedMembersInvalidAndValidRegions() {\n    locator.invoke(() -> {\n      InternalCache cache = ClusterStartupRule.getCache();\n      Set<String> regions = new HashSet<String>();\n      regions.add(\"/asdfghjkl\");\n      regions.add(\"/commonRegion\");\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, true);\n      assertThat(members).isEmpty();\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, false);\n      assertThat(members).isEmpty();\n    });\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/util/ManagementUtilsDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"B"}],"commitId":"d5a191ec02bcff8ebfd090484b50a63ec9352f8e","commitMessage":"@@@GEODE-7536 - Break Gfsh out into separate module (#4422)\n\n\n- ManagementUtils is split from CliUtil with non-CLI methods.\n- Introduce new CommandProcessor interface which is a CacheService. This\n  is implemented by OnlineCommandProcessor and is used in\n  MemberMBeanBridge.\n- Remove try/catch from ClusterConfigurationStatusRetriever since any\n  exception will be handled at a higher level.\n","date":"2019-12-06 22:05:35","modifiedFileCount":"125","status":"B","submitter":"Patrick Johnson"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void getRegionsAssociatedMembersInvalidRegions() {\n    locator.invoke(() -> {\n      InternalCache cache = ClusterStartupRule.getCache();\n      Set<String> regions = new HashSet<String>();\n      regions.add(SEPARATOR + \"asdfghjkl\");\n      regions.add(SEPARATOR + \"asdfghjklmn\");\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, true);\n      assertThat(members).isEmpty();\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, false);\n      assertThat(members).isEmpty();\n    });\n  }\n","date":"2020-05-29 00:37:39","endLine":211,"groupId":"105388","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getRegionsAssociatedMembersInvalidRegions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/91/9e979055829160afcb57c95024195864a869e6.src","preCode":"  public void getRegionsAssociatedMembersInvalidRegions() {\n    locator.invoke(() -> {\n      InternalCache cache = ClusterStartupRule.getCache();\n      Set<String> regions = new HashSet<String>();\n      regions.add(\"/asdfghjkl\");\n      regions.add(\"/asdfghjklmn\");\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, true);\n      assertThat(members).isEmpty();\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, false);\n      assertThat(members).isEmpty();\n    });\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/util/ManagementUtilsDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void getRegionsAssociatedMembersInvalidAndValidRegions() {\n    locator.invoke(() -> {\n      InternalCache cache = ClusterStartupRule.getCache();\n      Set<String> regions = new HashSet<String>();\n      regions.add(SEPARATOR + \"asdfghjkl\");\n      regions.add(SEPARATOR + \"commonRegion\");\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, true);\n      assertThat(members).isEmpty();\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, false);\n      assertThat(members).isEmpty();\n    });\n  }\n","date":"2020-05-29 00:37:39","endLine":227,"groupId":"105388","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getRegionsAssociatedMembersInvalidAndValidRegions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/91/9e979055829160afcb57c95024195864a869e6.src","preCode":"  public void getRegionsAssociatedMembersInvalidAndValidRegions() {\n    locator.invoke(() -> {\n      InternalCache cache = ClusterStartupRule.getCache();\n      Set<String> regions = new HashSet<String>();\n      regions.add(\"/asdfghjkl\");\n      regions.add(\"/commonRegion\");\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, true);\n      assertThat(members).isEmpty();\n\n      members = ManagementUtils.getQueryRegionsAssociatedMembers(regions, cache, false);\n      assertThat(members).isEmpty();\n    });\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/util/ManagementUtilsDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
