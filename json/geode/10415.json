[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testCq() throws CacheException {\n\n    final Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    VM vm1 = host.getVM(1);\n    VM vm2 = host.getVM(2);\n    VM vm3 = host.getVM(3);\n    final int numberOfEntries = 10;\n    final int queryLimit = 6; \r\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n      }\n    });\n\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n      }\n    });\n\n    \r\n    final int port0 = vm0.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n    final int port1 = vm1.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(vm0.getHost());\n\n    \r\n    final String poolName = \"testCqPool\";\n    createPool(vm2, poolName, new String[] {host0}, new int[] {port0}, true);\n    createPool(vm3, poolName, new String[] {host0}, new int[] {port1}, true);\n    final String cqName = \"testCq\";\n\n    \r\n    SerializableRunnable executeCq = new CacheSerializableRunnable(\"Execute queries\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName);\n        \r\n        QueryService qService = null;\n        try {\n          qService = (PoolManager.find(poolName)).getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n        \r\n        CqAttributesFactory cqf = new CqAttributesFactory();\n        CqListener[] cqListeners = {new CqQueryTestListener(LogWriterUtils.getLogWriter())};\n        ((CqQueryTestListener) cqListeners[0]).cqName = cqName;\n\n        cqf.initCqListeners(cqListeners);\n        CqAttributes cqa = cqf.create();\n\n        \r\n        try {\n          CqQuery cq = qService.newCq(cqName, queryString[3], cqa);\n          SelectResults sr = cq.executeWithInitialResults();\n          for (Object o : sr.asSet()) {\n            Struct s = (Struct) o;\n            Object value = s.get(\"value\");\n            if (!(value instanceof TestObject)) {\n              fail(\n                  \"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n            }\n          }\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to create CQ \" + cqName + \" . \");\n          err.initCause(ex);\n          LogWriterUtils.getLogWriter().info(\"QueryService is :\" + qService, err);\n          throw err;\n        }\n      }\n    };\n\n    vm2.invoke(executeCq);\n    vm3.invoke(executeCq);\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries * 2; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n        \r\n        assertEquals(numberOfEntries * 3, TestObject.numInstance);\n      }\n    });\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    SerializableRunnable validateCq = new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        final CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n\n        \r\n        Wait.waitForCriterion(new WaitCriterion() {\n\n          public boolean done() {\n            return listener.getTotalEventCount() >= (numberOfEntries * 2 - queryLimit);\n          }\n\n          public String description() {\n            return null;\n          }\n        }, 30000, 100, false);\n\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        assertEquals(\"Total Event Count mismatch\", (numberOfEntries * 2 - queryLimit),\n            listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", numberOfEntries, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", numberOfEntries - queryLimit,\n            listener.getUpdateEventCount());\n      }\n    };\n\n    vm2.invoke(validateCq);\n    vm3.invoke(validateCq);\n\n    this.closeClient(vm2);\n    this.closeClient(vm3);\n    this.closeClient(vm1);\n    this.closeClient(vm0);\n  }\n","date":"2018-07-18 03:54:18","endLine":241,"groupId":"48005","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/72/975af0849f367c9d38d7659f7f0ddca90cbb39.src","preCode":"  public void testCq() throws CacheException {\n\n    final Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    VM vm1 = host.getVM(1);\n    VM vm2 = host.getVM(2);\n    VM vm3 = host.getVM(3);\n    final int numberOfEntries = 10;\n    final int queryLimit = 6; \r\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n      }\n    });\n\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n      }\n    });\n\n    \r\n    final int port0 = vm0.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n    final int port1 = vm1.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(vm0.getHost());\n\n    \r\n    final String poolName = \"testCqPool\";\n    createPool(vm2, poolName, new String[] {host0}, new int[] {port0}, true);\n    createPool(vm3, poolName, new String[] {host0}, new int[] {port1}, true);\n    final String cqName = \"testCq\";\n\n    \r\n    SerializableRunnable executeCq = new CacheSerializableRunnable(\"Execute queries\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName);\n        \r\n        QueryService qService = null;\n        try {\n          qService = (PoolManager.find(poolName)).getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n        \r\n        CqAttributesFactory cqf = new CqAttributesFactory();\n        CqListener[] cqListeners = {new CqQueryTestListener(LogWriterUtils.getLogWriter())};\n        ((CqQueryTestListener) cqListeners[0]).cqName = cqName;\n\n        cqf.initCqListeners(cqListeners);\n        CqAttributes cqa = cqf.create();\n\n        \r\n        try {\n          CqQuery cq = qService.newCq(cqName, queryString[3], cqa);\n          SelectResults sr = cq.executeWithInitialResults();\n          for (Object o : sr.asSet()) {\n            Struct s = (Struct) o;\n            Object value = s.get(\"value\");\n            if (!(value instanceof TestObject)) {\n              fail(\n                  \"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n            }\n          }\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to create CQ \" + cqName + \" . \");\n          err.initCause(ex);\n          LogWriterUtils.getLogWriter().info(\"QueryService is :\" + qService, err);\n          throw err;\n        }\n      }\n    };\n\n    vm2.invoke(executeCq);\n    vm3.invoke(executeCq);\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries * 2; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n        \r\n        assertEquals(numberOfEntries * 3, TestObject.numInstance);\n      }\n    });\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    SerializableRunnable validateCq = new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        final CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n\n        \r\n        Wait.waitForCriterion(new WaitCriterion() {\n\n          public boolean done() {\n            return listener.getTotalEventCount() >= (numberOfEntries * 2 - queryLimit);\n          }\n\n          public String description() {\n            return null;\n          }\n        }, 30000, 100, false);\n\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        assertEquals(\"Total Event Count mismatch\", (numberOfEntries * 2 - queryLimit),\n            listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", numberOfEntries, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", numberOfEntries - queryLimit,\n            listener.getUpdateEventCount());\n      }\n    };\n\n    vm2.invoke(validateCq);\n    vm3.invoke(validateCq);\n\n    this.closeClient(vm2);\n    this.closeClient(vm3);\n    this.closeClient(vm1);\n    this.closeClient(vm0);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryCQDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void validateCq(VM vm, final String cqName, final int expectedEvents,\n      final int createEvents, final int updateEvents) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        if (listener.getTotalEventCount() != expectedEvents) {\n          listener.waitForTotalEvents(expectedEvents);\n        }\n\n        assertEquals(\"Total Event Count mismatch\", (expectedEvents), listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", createEvents, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", updateEvents, listener.getUpdateEventCount());\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":717,"groupId":"48004","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validateCq","params":"(VMvm@finalStringcqName@finalintexpectedEvents@finalintcreateEvents@finalintupdateEvents)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/72/975af0849f367c9d38d7659f7f0ddca90cbb39.src","preCode":"  public void validateCq(VM vm, final String cqName, final int expectedEvents,\n      final int createEvents, final int updateEvents) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        if (listener.getTotalEventCount() != expectedEvents) {\n          listener.waitForTotalEvents(expectedEvents);\n        }\n\n        assertEquals(\"Total Event Count mismatch\", (expectedEvents), listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", createEvents, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", updateEvents, listener.getUpdateEventCount());\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryCQDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-10-06 04:56:13","commitOrder":2,"curCode":"  public void testCq() throws CacheException {\n\n    final Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    VM vm1 = host.getVM(1);\n    VM vm2 = host.getVM(2);\n    VM vm3 = host.getVM(3);\n    final int numberOfEntries = 10;\n    final int queryLimit = 6; \r\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n      }\n    });\n\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n      }\n    });\n\n    \r\n    final int port0 = vm0.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n    final int port1 = vm1.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(vm0.getHost());\n\n    \r\n    final String poolName = \"testCqPool\";\n    createPool(vm2, poolName, new String[] {host0}, new int[] {port0}, true);\n    createPool(vm3, poolName, new String[] {host0}, new int[] {port1}, true);\n    final String cqName = \"testCq\";\n\n    \r\n    SerializableRunnable executeCq = new CacheSerializableRunnable(\"Execute queries\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName);\n        \r\n        QueryService qService = null;\n        try {\n          qService = (PoolManager.find(poolName)).getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n        \r\n        CqAttributesFactory cqf = new CqAttributesFactory();\n        CqListener[] cqListeners = {new CqQueryTestListener(LogWriterUtils.getLogWriter())};\n        ((CqQueryTestListener) cqListeners[0]).cqName = cqName;\n\n        cqf.initCqListeners(cqListeners);\n        CqAttributes cqa = cqf.create();\n\n        \r\n        try {\n          CqQuery cq = qService.newCq(cqName, queryString[3], cqa);\n          SelectResults sr = cq.executeWithInitialResults();\n          for (Object o : sr.asSet()) {\n            Struct s = (Struct) o;\n            Object value = s.get(\"value\");\n            if (!(value instanceof TestObject)) {\n              fail(\n                  \"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n            }\n          }\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to create CQ \" + cqName + \" . \");\n          err.initCause(ex);\n          LogWriterUtils.getLogWriter().info(\"QueryService is :\" + qService, err);\n          throw err;\n        }\n      }\n    };\n\n    vm2.invoke(executeCq);\n    vm3.invoke(executeCq);\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries * 2; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n        \r\n        assertEquals(numberOfEntries * 3, TestObject.numInstance);\n      }\n    });\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    SerializableRunnable validateCq = new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        final CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n\n        \r\n        await().until(() -> listener.getTotalEventCount() >= (numberOfEntries * 2 - queryLimit));\n\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        assertEquals(\"Total Event Count mismatch\", (numberOfEntries * 2 - queryLimit),\n            listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", numberOfEntries, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", numberOfEntries - queryLimit,\n            listener.getUpdateEventCount());\n      }\n    };\n\n    vm2.invoke(validateCq);\n    vm3.invoke(validateCq);\n\n    this.closeClient(vm2);\n    this.closeClient(vm3);\n    this.closeClient(vm1);\n    this.closeClient(vm0);\n  }\n","date":"2018-10-19 08:01:02","endLine":231,"groupId":"48005","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e7/523d9f81b9958288de186190ba343cf8458b19.src","preCode":"  public void testCq() throws CacheException {\n\n    final Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    VM vm1 = host.getVM(1);\n    VM vm2 = host.getVM(2);\n    VM vm3 = host.getVM(3);\n    final int numberOfEntries = 10;\n    final int queryLimit = 6; \r\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n      }\n    });\n\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n      }\n    });\n\n    \r\n    final int port0 = vm0.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n    final int port1 = vm1.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(vm0.getHost());\n\n    \r\n    final String poolName = \"testCqPool\";\n    createPool(vm2, poolName, new String[] {host0}, new int[] {port0}, true);\n    createPool(vm3, poolName, new String[] {host0}, new int[] {port1}, true);\n    final String cqName = \"testCq\";\n\n    \r\n    SerializableRunnable executeCq = new CacheSerializableRunnable(\"Execute queries\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName);\n        \r\n        QueryService qService = null;\n        try {\n          qService = (PoolManager.find(poolName)).getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n        \r\n        CqAttributesFactory cqf = new CqAttributesFactory();\n        CqListener[] cqListeners = {new CqQueryTestListener(LogWriterUtils.getLogWriter())};\n        ((CqQueryTestListener) cqListeners[0]).cqName = cqName;\n\n        cqf.initCqListeners(cqListeners);\n        CqAttributes cqa = cqf.create();\n\n        \r\n        try {\n          CqQuery cq = qService.newCq(cqName, queryString[3], cqa);\n          SelectResults sr = cq.executeWithInitialResults();\n          for (Object o : sr.asSet()) {\n            Struct s = (Struct) o;\n            Object value = s.get(\"value\");\n            if (!(value instanceof TestObject)) {\n              fail(\n                  \"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n            }\n          }\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to create CQ \" + cqName + \" . \");\n          err.initCause(ex);\n          LogWriterUtils.getLogWriter().info(\"QueryService is :\" + qService, err);\n          throw err;\n        }\n      }\n    };\n\n    vm2.invoke(executeCq);\n    vm3.invoke(executeCq);\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries * 2; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n        \r\n        assertEquals(numberOfEntries * 3, TestObject.numInstance);\n      }\n    });\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    SerializableRunnable validateCq = new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        final CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n\n        \r\n        Wait.waitForCriterion(new WaitCriterion() {\n\n          public boolean done() {\n            return listener.getTotalEventCount() >= (numberOfEntries * 2 - queryLimit);\n          }\n\n          public String description() {\n            return null;\n          }\n        }, 30000, 100, false);\n\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        assertEquals(\"Total Event Count mismatch\", (numberOfEntries * 2 - queryLimit),\n            listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", numberOfEntries, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", numberOfEntries - queryLimit,\n            listener.getUpdateEventCount());\n      }\n    };\n\n    vm2.invoke(validateCq);\n    vm3.invoke(validateCq);\n\n    this.closeClient(vm2);\n    this.closeClient(vm3);\n    this.closeClient(vm1);\n    this.closeClient(vm0);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryCQDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public void validateCq(VM vm, final String cqName, final int expectedEvents,\n      final int createEvents, final int updateEvents) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        if (listener.getTotalEventCount() != expectedEvents) {\n          listener.waitForTotalEvents(expectedEvents);\n        }\n\n        assertEquals(\"Total Event Count mismatch\", (expectedEvents), listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", createEvents, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", updateEvents, listener.getUpdateEventCount());\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":717,"groupId":"48004","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"validateCq","params":"(VMvm@finalStringcqName@finalintexpectedEvents@finalintcreateEvents@finalintupdateEvents)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/72/975af0849f367c9d38d7659f7f0ddca90cbb39.src","preCode":"  public void validateCq(VM vm, final String cqName, final int expectedEvents,\n      final int createEvents, final int updateEvents) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        if (listener.getTotalEventCount() != expectedEvents) {\n          listener.waitForTotalEvents(expectedEvents);\n        }\n\n        assertEquals(\"Total Event Count mismatch\", (expectedEvents), listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", createEvents, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", updateEvents, listener.getUpdateEventCount());\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryCQDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"N"}],"commitId":"8fa6ef6205938767d0106810daca1f91ee8bb3a8","commitMessage":"@@@GEODE-5424: Replacing calls to waitForCriterion with Awaitility\n\nReplacing all of the calls to waitForCriterion with awaitility instead. \nto use a standard timeout.\n","date":"2018-10-19 08:01:02","modifiedFileCount":"132","status":"M","submitter":"Dan Smith"},{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-11-02 04:59:55","commitOrder":3,"curCode":"  public void testCq() throws CacheException {\n\n    final Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    VM vm1 = host.getVM(1);\n    VM vm2 = host.getVM(2);\n    VM vm3 = host.getVM(3);\n    final int numberOfEntries = 10;\n    final int queryLimit = 6; \r\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n      }\n    });\n\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n      }\n    });\n\n    \r\n    final int port0 = vm0.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n    final int port1 = vm1.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(vm0.getHost());\n\n    \r\n    final String poolName = \"testCqPool\";\n    createPool(vm2, poolName, new String[] {host0}, new int[] {port0}, true);\n    createPool(vm3, poolName, new String[] {host0}, new int[] {port1}, true);\n    final String cqName = \"testCq\";\n\n    \r\n    SerializableRunnable executeCq = new CacheSerializableRunnable(\"Execute queries\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName);\n        \r\n        QueryService qService = null;\n        try {\n          qService = (PoolManager.find(poolName)).getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n        \r\n        CqAttributesFactory cqf = new CqAttributesFactory();\n        CqListener[] cqListeners = {new CqQueryTestListener(LogWriterUtils.getLogWriter())};\n        ((CqQueryTestListener) cqListeners[0]).cqName = cqName;\n\n        cqf.initCqListeners(cqListeners);\n        CqAttributes cqa = cqf.create();\n\n        \r\n        try {\n          CqQuery cq = qService.newCq(cqName, queryString[3], cqa);\n          SelectResults sr = cq.executeWithInitialResults();\n          for (Object o : sr.asSet()) {\n            Struct s = (Struct) o;\n            Object value = s.get(\"value\");\n            if (!(value instanceof TestObject)) {\n              fail(\n                  \"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n            }\n          }\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to create CQ \" + cqName + \" . \");\n          err.initCause(ex);\n          LogWriterUtils.getLogWriter().info(\"QueryService is :\" + qService, err);\n          throw err;\n        }\n      }\n    };\n\n    vm2.invoke(executeCq);\n    vm3.invoke(executeCq);\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      public void run2() throws CacheException {\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries * 2; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n        \r\n        assertEquals(numberOfEntries * 3, TestObject.numInstance);\n      }\n    });\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    SerializableRunnable validateCq = new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        final CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n\n        \r\n        await().until(() -> listener.getTotalEventCount() >= (numberOfEntries * 2 - queryLimit));\n\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        assertEquals(\"Total Event Count mismatch\", (numberOfEntries * 2 - queryLimit),\n            listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", numberOfEntries, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", numberOfEntries - queryLimit,\n            listener.getUpdateEventCount());\n      }\n    };\n\n    vm2.invoke(validateCq);\n    vm3.invoke(validateCq);\n\n    this.closeClient(vm2);\n    this.closeClient(vm3);\n    this.closeClient(vm1);\n    this.closeClient(vm0);\n  }\n","date":"2018-11-02 04:59:55","endLine":231,"groupId":"48005","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b4/4972c990f625624e09dd30ba04a4875b67de93.src","preCode":"  public void testCq() throws CacheException {\n\n    final Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    VM vm1 = host.getVM(1);\n    VM vm2 = host.getVM(2);\n    VM vm3 = host.getVM(3);\n    final int numberOfEntries = 10;\n    final int queryLimit = 6; \r\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n      }\n    });\n\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n      }\n    });\n\n    \r\n    final int port0 = vm0.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n    final int port1 = vm1.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(vm0.getHost());\n\n    \r\n    final String poolName = \"testCqPool\";\n    createPool(vm2, poolName, new String[] {host0}, new int[] {port0}, true);\n    createPool(vm3, poolName, new String[] {host0}, new int[] {port1}, true);\n    final String cqName = \"testCq\";\n\n    \r\n    SerializableRunnable executeCq = new CacheSerializableRunnable(\"Execute queries\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName);\n        \r\n        QueryService qService = null;\n        try {\n          qService = (PoolManager.find(poolName)).getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n        \r\n        CqAttributesFactory cqf = new CqAttributesFactory();\n        CqListener[] cqListeners = {new CqQueryTestListener(LogWriterUtils.getLogWriter())};\n        ((CqQueryTestListener) cqListeners[0]).cqName = cqName;\n\n        cqf.initCqListeners(cqListeners);\n        CqAttributes cqa = cqf.create();\n\n        \r\n        try {\n          CqQuery cq = qService.newCq(cqName, queryString[3], cqa);\n          SelectResults sr = cq.executeWithInitialResults();\n          for (Object o : sr.asSet()) {\n            Struct s = (Struct) o;\n            Object value = s.get(\"value\");\n            if (!(value instanceof TestObject)) {\n              fail(\n                  \"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n            }\n          }\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to create CQ \" + cqName + \" . \");\n          err.initCause(ex);\n          LogWriterUtils.getLogWriter().info(\"QueryService is :\" + qService, err);\n          throw err;\n        }\n      }\n    };\n\n    vm2.invoke(executeCq);\n    vm3.invoke(executeCq);\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries * 2; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n        \r\n        assertEquals(numberOfEntries * 3, TestObject.numInstance);\n      }\n    });\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\") {\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    SerializableRunnable validateCq = new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        final CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n\n        \r\n        await().until(() -> listener.getTotalEventCount() >= (numberOfEntries * 2 - queryLimit));\n\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        assertEquals(\"Total Event Count mismatch\", (numberOfEntries * 2 - queryLimit),\n            listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", numberOfEntries, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", numberOfEntries - queryLimit,\n            listener.getUpdateEventCount());\n      }\n    };\n\n    vm2.invoke(validateCq);\n    vm3.invoke(validateCq);\n\n    this.closeClient(vm2);\n    this.closeClient(vm3);\n    this.closeClient(vm1);\n    this.closeClient(vm0);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryCQDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2018-07-18 03:54:18","commitOrder":3,"curCode":"  public void validateCq(VM vm, final String cqName, final int expectedEvents,\n      final int createEvents, final int updateEvents) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        if (listener.getTotalEventCount() != expectedEvents) {\n          listener.waitForTotalEvents(expectedEvents);\n        }\n\n        assertEquals(\"Total Event Count mismatch\", (expectedEvents), listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", createEvents, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", updateEvents, listener.getUpdateEventCount());\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":717,"groupId":"48004","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"validateCq","params":"(VMvm@finalStringcqName@finalintexpectedEvents@finalintcreateEvents@finalintupdateEvents)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/72/975af0849f367c9d38d7659f7f0ddca90cbb39.src","preCode":"  public void validateCq(VM vm, final String cqName, final int expectedEvents,\n      final int createEvents, final int updateEvents) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        if (listener.getTotalEventCount() != expectedEvents) {\n          listener.waitForTotalEvents(expectedEvents);\n        }\n\n        assertEquals(\"Total Event Count mismatch\", (expectedEvents), listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", createEvents, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", updateEvents, listener.getUpdateEventCount());\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryCQDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"N"}],"commitId":"75c40cf18b830b2213de0c5ef1ea731238d29d5a","commitMessage":"@@@GEODE-5686: Remove LocalizedStrings\n\nFixing problems found by lgtm.com\n\nThere were a lot of logging calls that were improperly converted from\n(MessageFormatString.  Argument.  Exception) to a form that treated the\nException as part of the String.format() call.\n\nThere were a number of errors in format strings or number of arguments.\nMessageFormat was more forgiving about this than String.format().\n\nThere were a few dangling MessageFormat specs that needed to be\nconverted to String.format() specs.\n\nThis closes #2757\n","date":"2018-11-02 04:59:55","modifiedFileCount":"250","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":4,"curCode":"  public void testCq() throws CacheException {\n\n    final Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    VM vm1 = host.getVM(1);\n    VM vm2 = host.getVM(2);\n    VM vm3 = host.getVM(3);\n    final int numberOfEntries = 10;\n    final int queryLimit = 6; \r\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      @Override\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n      }\n    });\n\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      @Override\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n      }\n    });\n\n    \r\n    final int port0 = vm0.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n    final int port1 = vm1.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(vm0.getHost());\n\n    \r\n    final String poolName = \"testCqPool\";\n    createPool(vm2, poolName, new String[] {host0}, new int[] {port0}, true);\n    createPool(vm3, poolName, new String[] {host0}, new int[] {port1}, true);\n    final String cqName = \"testCq\";\n\n    \r\n    SerializableRunnable executeCq = new CacheSerializableRunnable(\"Execute queries\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName);\n        \r\n        QueryService qService = null;\n        try {\n          qService = (PoolManager.find(poolName)).getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n        \r\n        CqAttributesFactory cqf = new CqAttributesFactory();\n        CqListener[] cqListeners = {new CqQueryTestListener(LogWriterUtils.getLogWriter())};\n        ((CqQueryTestListener) cqListeners[0]).cqName = cqName;\n\n        cqf.initCqListeners(cqListeners);\n        CqAttributes cqa = cqf.create();\n\n        \r\n        try {\n          CqQuery cq = qService.newCq(cqName, queryString[3], cqa);\n          SelectResults sr = cq.executeWithInitialResults();\n          for (Object o : sr.asSet()) {\n            Struct s = (Struct) o;\n            Object value = s.get(\"value\");\n            if (!(value instanceof TestObject)) {\n              fail(\n                  \"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n            }\n          }\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to create CQ \" + cqName + \" . \");\n          err.initCause(ex);\n          LogWriterUtils.getLogWriter().info(\"QueryService is :\" + qService, err);\n          throw err;\n        }\n      }\n    };\n\n    vm2.invoke(executeCq);\n    vm3.invoke(executeCq);\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      @Override\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries * 2; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n        \r\n        assertEquals(numberOfEntries * 3, TestObject.numInstance);\n      }\n    });\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      @Override\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    SerializableRunnable validateCq = new CacheSerializableRunnable(\"Validate CQs\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        final CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n\n        \r\n        await().until(() -> listener.getTotalEventCount() >= (numberOfEntries * 2 - queryLimit));\n\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        assertEquals(\"Total Event Count mismatch\", (numberOfEntries * 2 - queryLimit),\n            listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", numberOfEntries, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", numberOfEntries - queryLimit,\n            listener.getUpdateEventCount());\n      }\n    };\n\n    vm2.invoke(validateCq);\n    vm3.invoke(validateCq);\n\n    this.closeClient(vm2);\n    this.closeClient(vm3);\n    this.closeClient(vm1);\n    this.closeClient(vm0);\n  }\n","date":"2019-01-12 07:53:54","endLine":238,"groupId":"10415","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testCq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/61/f4fa47f48af5c85f52ae5e8295bc464a13a09b.src","preCode":"  public void testCq() throws CacheException {\n\n    final Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    VM vm1 = host.getVM(1);\n    VM vm2 = host.getVM(2);\n    VM vm3 = host.getVM(3);\n    final int numberOfEntries = 10;\n    final int queryLimit = 6; \r\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n      }\n    });\n\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      public void run2() throws CacheException {\n        configAndStartBridgeServer();\n        Region region = getRootRegion().getSubregion(regionName);\n      }\n    });\n\n    \r\n    final int port0 = vm0.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n    final int port1 = vm1.invoke(() -> PdxQueryCQTestBase.getCacheServerPort());\n\n    final String host0 = NetworkUtils.getServerHostName(vm0.getHost());\n\n    \r\n    final String poolName = \"testCqPool\";\n    createPool(vm2, poolName, new String[] {host0}, new int[] {port0}, true);\n    createPool(vm3, poolName, new String[] {host0}, new int[] {port1}, true);\n    final String cqName = \"testCq\";\n\n    \r\n    SerializableRunnable executeCq = new CacheSerializableRunnable(\"Execute queries\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName);\n        \r\n        QueryService qService = null;\n        try {\n          qService = (PoolManager.find(poolName)).getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n        \r\n        CqAttributesFactory cqf = new CqAttributesFactory();\n        CqListener[] cqListeners = {new CqQueryTestListener(LogWriterUtils.getLogWriter())};\n        ((CqQueryTestListener) cqListeners[0]).cqName = cqName;\n\n        cqf.initCqListeners(cqListeners);\n        CqAttributes cqa = cqf.create();\n\n        \r\n        try {\n          CqQuery cq = qService.newCq(cqName, queryString[3], cqa);\n          SelectResults sr = cq.executeWithInitialResults();\n          for (Object o : sr.asSet()) {\n            Struct s = (Struct) o;\n            Object value = s.get(\"value\");\n            if (!(value instanceof TestObject)) {\n              fail(\n                  \"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n            }\n          }\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to create CQ \" + cqName + \" . \");\n          err.initCause(ex);\n          LogWriterUtils.getLogWriter().info(\"QueryService is :\" + qService, err);\n          throw err;\n        }\n      }\n    };\n\n    vm2.invoke(executeCq);\n    vm3.invoke(executeCq);\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    \r\n    vm0.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      public void run2() throws CacheException {\n        Region region = getRootRegion().getSubregion(regionName);\n        for (int i = 0; i < numberOfEntries * 2; i++) {\n          region.put(\"key-\" + i, new TestObject(i, \"vmware\"));\n        }\n        \r\n        assertEquals(numberOfEntries * 3, TestObject.numInstance);\n      }\n    });\n\n    \r\n    \r\n    vm1.invoke(new CacheSerializableRunnable(\"Create cache server\") {\n      public void run2() throws CacheException {\n        assertEquals(0, TestObject.numInstance);\n      }\n    });\n\n    SerializableRunnable validateCq = new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        final CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n\n        \r\n        await().until(() -> listener.getTotalEventCount() >= (numberOfEntries * 2 - queryLimit));\n\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        assertEquals(\"Total Event Count mismatch\", (numberOfEntries * 2 - queryLimit),\n            listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", numberOfEntries, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", numberOfEntries - queryLimit,\n            listener.getUpdateEventCount());\n      }\n    };\n\n    vm2.invoke(validateCq);\n    vm3.invoke(validateCq);\n\n    this.closeClient(vm2);\n    this.closeClient(vm3);\n    this.closeClient(vm1);\n    this.closeClient(vm0);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryCQDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":4,"curCode":"  public void validateCq(VM vm, final String cqName, final int expectedEvents,\n      final int createEvents, final int updateEvents) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        if (listener.getTotalEventCount() != expectedEvents) {\n          listener.waitForTotalEvents(expectedEvents);\n        }\n\n        assertEquals(\"Total Event Count mismatch\", (expectedEvents), listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", createEvents, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", updateEvents, listener.getUpdateEventCount());\n      }\n    });\n  }\n","date":"2019-01-12 07:53:54","endLine":737,"groupId":"10415","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"validateCq","params":"(VMvm@finalStringcqName@finalintexpectedEvents@finalintcreateEvents@finalintupdateEvents)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/61/f4fa47f48af5c85f52ae5e8295bc464a13a09b.src","preCode":"  public void validateCq(VM vm, final String cqName, final int expectedEvents,\n      final int createEvents, final int updateEvents) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService.\", cqe);\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n        listener.printInfo(false);\n\n        \r\n        Object[] cqEvents = listener.getEvents();\n        for (Object o : cqEvents) {\n          CqEvent cqEvent = (CqEvent) o;\n          Object value = cqEvent.getNewValue();\n          if (!(value instanceof TestObject)) {\n            fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass());\n          }\n        }\n\n        \r\n        if (listener.getTotalEventCount() != expectedEvents) {\n          listener.waitForTotalEvents(expectedEvents);\n        }\n\n        assertEquals(\"Total Event Count mismatch\", (expectedEvents), listener.getTotalEventCount());\n\n        \r\n        assertEquals(\"Create Event mismatch\", createEvents, listener.getCreateEventCount());\n\n        \r\n        assertEquals(\"Update Event mismatch\", updateEvents, listener.getUpdateEventCount());\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryCQDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":689,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"}]
