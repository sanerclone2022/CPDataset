[{"authorTime":"2017-12-08 03:07:40","codes":[{"authorDate":"2017-12-08 03:07:40","commitOrder":1,"curCode":"  public void doesNotEvictNodeThatIsEvicted() throws Exception {\n    LRUListWithSyncSorting list = new LRUListWithSyncSorting(stats, bucketRegion);\n\n    EvictionNode evictedNode = mock(EvictableEntry.class);\n    when(evictedNode.isEvicted()).thenReturn(true);\n\n    EvictionNode node = mock(EvictableEntry.class);\n    list.appendEntry(evictedNode);\n    list.appendEntry(node);\n    assertThat(list.size()).isEqualTo(2);\n\n    when(evictedNode.next()).thenReturn(node);\n    when(evictedNode.previous()).thenReturn(list.head);\n    when(node.next()).thenReturn(list.tail);\n    when(node.previous()).thenReturn(list.head);\n    assertThat(list.getEvictableEntry()).isSameAs(node);\n    assertThat(list.size()).isZero();\n  }\n","date":"2017-12-08 03:07:40","endLine":128,"groupId":"9221","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doesNotEvictNodeThatIsEvicted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/9f/cb6fb7c2ac372d1d37d916c225044297b8311a.src","preCode":"  public void doesNotEvictNodeThatIsEvicted() throws Exception {\n    LRUListWithSyncSorting list = new LRUListWithSyncSorting(stats, bucketRegion);\n\n    EvictionNode evictedNode = mock(EvictableEntry.class);\n    when(evictedNode.isEvicted()).thenReturn(true);\n\n    EvictionNode node = mock(EvictableEntry.class);\n    list.appendEntry(evictedNode);\n    list.appendEntry(node);\n    assertThat(list.size()).isEqualTo(2);\n\n    when(evictedNode.next()).thenReturn(node);\n    when(evictedNode.previous()).thenReturn(list.head);\n    when(node.next()).thenReturn(list.tail);\n    when(node.previous()).thenReturn(list.head);\n    assertThat(list.getEvictableEntry()).isSameAs(node);\n    assertThat(list.size()).isZero();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/eviction/LRUListWithSyncSortingTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"},{"authorDate":"2017-12-08 03:07:40","commitOrder":1,"curCode":"  public void doesNotEvictNodeThatIsEvicted() throws Exception {\n    LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(stats, bucketRegion, executor);\n\n    EvictionNode evictedNode = mock(EvictableEntry.class);\n    when(evictedNode.isEvicted()).thenReturn(true);\n\n    EvictionNode node = mock(EvictableEntry.class);\n    list.appendEntry(evictedNode);\n    list.appendEntry(node);\n    assertThat(list.size()).isEqualTo(2);\n\n    when(evictedNode.next()).thenReturn(node);\n    when(evictedNode.previous()).thenReturn(list.head);\n    when(node.next()).thenReturn(list.tail);\n    when(node.previous()).thenReturn(list.head);\n    assertThat(list.getEvictableEntry()).isSameAs(node);\n    assertThat(list.size()).isZero();\n  }\n","date":"2017-12-08 03:07:40","endLine":165,"groupId":"9221","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doesNotEvictNodeThatIsEvicted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/04/ab3e9b619b9a3cf5ce6bac3beb77a3e3fafeb8.src","preCode":"  public void doesNotEvictNodeThatIsEvicted() throws Exception {\n    LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(stats, bucketRegion, executor);\n\n    EvictionNode evictedNode = mock(EvictableEntry.class);\n    when(evictedNode.isEvicted()).thenReturn(true);\n\n    EvictionNode node = mock(EvictableEntry.class);\n    list.appendEntry(evictedNode);\n    list.appendEntry(node);\n    assertThat(list.size()).isEqualTo(2);\n\n    when(evictedNode.next()).thenReturn(node);\n    when(evictedNode.previous()).thenReturn(list.head);\n    when(node.next()).thenReturn(list.tail);\n    when(node.previous()).thenReturn(list.head);\n    assertThat(list.getEvictableEntry()).isSameAs(node);\n    assertThat(list.size()).isZero();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/eviction/LRUListWithAsyncSortingTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"B"}],"commitId":"1a291a4bc605a649fdec03efbec0b97370f775c4","commitMessage":"@@@GEODE-3622: Implement new algorithm for eviction (#1017)\n\n* GEODE-3622: Implement new algorithm for eviction\n\n  * Old algorithm is still used by default. Use \"-Dgeode.EvictionScanAsync=true\"\n    to enable the new algorithm. Note that the new algorithm is still experimental\n    and is subject to change. The new algorithm uses asynchronous sorting of the\n    LRU list to prevent a long synchronous sort when the first item is evicted.\n  * Moved region entries into their own package\n  * Organized eviction code into new eviction package\n  * General refactoring of eviction classes\n","date":"2017-12-08 03:07:40","modifiedFileCount":"270","status":"B","submitter":"Nick Reich"},{"authorTime":"2018-01-19 01:27:37","codes":[{"authorDate":"2018-01-19 01:27:37","commitOrder":2,"curCode":"  public void doesNotEvictNodeThatIsEvicted() throws Exception {\n    LRUListWithSyncSorting list = new LRUListWithSyncSorting(controller);\n\n    EvictionNode evictedNode = mock(EvictableEntry.class);\n    when(evictedNode.isEvicted()).thenReturn(true);\n\n    EvictionNode node = mock(EvictableEntry.class);\n    list.appendEntry(evictedNode);\n    list.appendEntry(node);\n    assertThat(list.size()).isEqualTo(2);\n\n    when(evictedNode.next()).thenReturn(node);\n    when(evictedNode.previous()).thenReturn(list.head);\n    when(node.next()).thenReturn(list.tail);\n    when(node.previous()).thenReturn(list.head);\n    assertThat(list.getEvictableEntry()).isSameAs(node);\n    assertThat(list.size()).isZero();\n  }\n","date":"2018-01-19 01:27:37","endLine":131,"groupId":"9221","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doesNotEvictNodeThatIsEvicted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b2/1afcc3a40884cb420475b5b1529981664a3b07.src","preCode":"  public void doesNotEvictNodeThatIsEvicted() throws Exception {\n    LRUListWithSyncSorting list = new LRUListWithSyncSorting(stats, bucketRegion);\n\n    EvictionNode evictedNode = mock(EvictableEntry.class);\n    when(evictedNode.isEvicted()).thenReturn(true);\n\n    EvictionNode node = mock(EvictableEntry.class);\n    list.appendEntry(evictedNode);\n    list.appendEntry(node);\n    assertThat(list.size()).isEqualTo(2);\n\n    when(evictedNode.next()).thenReturn(node);\n    when(evictedNode.previous()).thenReturn(list.head);\n    when(node.next()).thenReturn(list.tail);\n    when(node.previous()).thenReturn(list.head);\n    assertThat(list.getEvictableEntry()).isSameAs(node);\n    assertThat(list.size()).isZero();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/eviction/LRUListWithSyncSortingTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2018-01-19 01:27:37","commitOrder":2,"curCode":"  public void doesNotEvictNodeThatIsEvicted() throws Exception {\n    LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(controller, executor);\n\n    EvictionNode evictedNode = mock(EvictableEntry.class);\n    when(evictedNode.isEvicted()).thenReturn(true);\n\n    EvictionNode node = mock(EvictableEntry.class);\n    list.appendEntry(evictedNode);\n    list.appendEntry(node);\n    assertThat(list.size()).isEqualTo(2);\n\n    when(evictedNode.next()).thenReturn(node);\n    when(evictedNode.previous()).thenReturn(list.head);\n    when(node.next()).thenReturn(list.tail);\n    when(node.previous()).thenReturn(list.head);\n    assertThat(list.getEvictableEntry()).isSameAs(node);\n    assertThat(list.size()).isZero();\n  }\n","date":"2018-01-19 01:27:37","endLine":168,"groupId":"9221","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doesNotEvictNodeThatIsEvicted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6d/849b1a050317e3f7947735397cf866d2843447.src","preCode":"  public void doesNotEvictNodeThatIsEvicted() throws Exception {\n    LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(stats, bucketRegion, executor);\n\n    EvictionNode evictedNode = mock(EvictableEntry.class);\n    when(evictedNode.isEvicted()).thenReturn(true);\n\n    EvictionNode node = mock(EvictableEntry.class);\n    list.appendEntry(evictedNode);\n    list.appendEntry(node);\n    assertThat(list.size()).isEqualTo(2);\n\n    when(evictedNode.next()).thenReturn(node);\n    when(evictedNode.previous()).thenReturn(list.head);\n    when(node.next()).thenReturn(list.tail);\n    when(node.previous()).thenReturn(list.head);\n    assertThat(list.getEvictableEntry()).isSameAs(node);\n    assertThat(list.size()).isZero();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/eviction/LRUListWithAsyncSortingTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"c9feba399abf64e7d6797eca9f216a3cd969e9fb","commitMessage":"@@@GEODE-4299: refactor eviction (#1290)\n\nGEODE-4299: refactor eviction\n\nThe EvictionController classes are no longer Serializable nor Cloneable. These internal classes used to be external and needed to be these things in the past because they were stored in the configuration. But they no longer are so these interfaces were removed for clarity.\nThe EvictionController classes are no longer responsible for creating InternalEvictionStatistics. Instead the other entities it depends on are passed in to its constructor.\n\nThe only class with an EvictionController instance is now VMLRURegionMap which makes the code easier to understand and reduces the number of inter-module dependencies.\n\nrenamed internalSetMaximum to setMaximum on EvictionAttributesImpl\n\nAbstractBucketRegionQueue no longer uses EvictionStatistics to notify itself that it removed some objects from the queue. So it no longer needs to access all the EvictionStatistics.\n\nAbstractLRURegionMap has been moved to VMLRURegionMap\nCasts to AbstractLRURegionMap have been removed by added additional methods to RegionMap.\n\nnew EvictableRegion interface make clear the things a region implementation needs to do/provide for the eviction implementation\n\nEvictionAttributesMutator is now implemented by the dedicated class EvictionAttributesMutatorImpl\n\nclose and clear on RegionMap now take a BucketRegion parameter so that the eviction classes do not need to keep track of the BucketRegion.\n\nEvictionList no longer does some of the things it did before that should have been the responsibility of the EvictionController. Now the EvictionList is given the EvictionController it should defer to. The EvictionListBuilder has been simplified since EvictionList now only needs a controller.\n\nThe eviction classes that track statistics have been refactored to be clearer. Now the EvictionStats interface is implemented by classes that provide vsd type stats. The EvictionCounters interface is implemented by a class that wraps EvictionStats and provides atomics for some of them.* Removed old code that made the EvictionController classes\nSerializable.  Declarable.  and Clonable.\n","date":"2018-01-19 01:27:37","modifiedFileCount":"82","status":"M","submitter":"Darrel Schneider"},{"authorTime":"2018-02-08 10:08:06","codes":[{"authorDate":"2018-01-19 01:27:37","commitOrder":3,"curCode":"  public void doesNotEvictNodeThatIsEvicted() throws Exception {\n    LRUListWithSyncSorting list = new LRUListWithSyncSorting(controller);\n\n    EvictionNode evictedNode = mock(EvictableEntry.class);\n    when(evictedNode.isEvicted()).thenReturn(true);\n\n    EvictionNode node = mock(EvictableEntry.class);\n    list.appendEntry(evictedNode);\n    list.appendEntry(node);\n    assertThat(list.size()).isEqualTo(2);\n\n    when(evictedNode.next()).thenReturn(node);\n    when(evictedNode.previous()).thenReturn(list.head);\n    when(node.next()).thenReturn(list.tail);\n    when(node.previous()).thenReturn(list.head);\n    assertThat(list.getEvictableEntry()).isSameAs(node);\n    assertThat(list.size()).isZero();\n  }\n","date":"2018-01-19 01:27:37","endLine":131,"groupId":"101534","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doesNotEvictNodeThatIsEvicted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b2/1afcc3a40884cb420475b5b1529981664a3b07.src","preCode":"  public void doesNotEvictNodeThatIsEvicted() throws Exception {\n    LRUListWithSyncSorting list = new LRUListWithSyncSorting(controller);\n\n    EvictionNode evictedNode = mock(EvictableEntry.class);\n    when(evictedNode.isEvicted()).thenReturn(true);\n\n    EvictionNode node = mock(EvictableEntry.class);\n    list.appendEntry(evictedNode);\n    list.appendEntry(node);\n    assertThat(list.size()).isEqualTo(2);\n\n    when(evictedNode.next()).thenReturn(node);\n    when(evictedNode.previous()).thenReturn(list.head);\n    when(node.next()).thenReturn(list.tail);\n    when(node.previous()).thenReturn(list.head);\n    assertThat(list.getEvictableEntry()).isSameAs(node);\n    assertThat(list.size()).isZero();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/eviction/LRUListWithSyncSortingTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"N"},{"authorDate":"2018-02-08 10:08:06","commitOrder":3,"curCode":"  public void doesNotEvictNodeThatIsEvicted() throws Exception {\n    LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(controller, executor, 1);\n\n    EvictionNode evictedNode = mock(EvictableEntry.class);\n    when(evictedNode.isEvicted()).thenReturn(true);\n\n    EvictionNode node = mock(EvictableEntry.class);\n    list.appendEntry(evictedNode);\n    list.appendEntry(node);\n    assertThat(list.size()).isEqualTo(2);\n\n    when(evictedNode.next()).thenReturn(node);\n    when(evictedNode.previous()).thenReturn(list.head);\n    when(node.next()).thenReturn(list.tail);\n    when(node.previous()).thenReturn(list.head);\n    assertThat(list.getEvictableEntry()).isSameAs(node);\n    assertThat(list.size()).isZero();\n  }\n","date":"2018-02-08 10:08:06","endLine":168,"groupId":"101534","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doesNotEvictNodeThatIsEvicted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c5/f4fe462f7b37e9d0c7219d39b3e01d4cd8299a.src","preCode":"  public void doesNotEvictNodeThatIsEvicted() throws Exception {\n    LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(controller, executor);\n\n    EvictionNode evictedNode = mock(EvictableEntry.class);\n    when(evictedNode.isEvicted()).thenReturn(true);\n\n    EvictionNode node = mock(EvictableEntry.class);\n    list.appendEntry(evictedNode);\n    list.appendEntry(node);\n    assertThat(list.size()).isEqualTo(2);\n\n    when(evictedNode.next()).thenReturn(node);\n    when(evictedNode.previous()).thenReturn(list.head);\n    when(node.next()).thenReturn(list.tail);\n    when(node.previous()).thenReturn(list.head);\n    assertThat(list.getEvictableEntry()).isSameAs(node);\n    assertThat(list.size()).isZero();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/eviction/LRUListWithAsyncSortingTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"45312b9a06805875f6cf816d40729a0430d7f4ff","commitMessage":"@@@GEODE-4621: Schedule scans only if list is above max eviction attempt? (#1408)\n\n\n  * The number of eviction attempts can now be configured at list creation\n    to enable testability.\n","date":"2018-02-08 10:08:06","modifiedFileCount":"4","status":"M","submitter":"Nick Reich"}]
