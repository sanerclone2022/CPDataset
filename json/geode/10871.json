[{"authorTime":"2018-12-08 03:43:23","codes":[{"authorDate":"2018-12-08 03:43:23","commitOrder":1,"curCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n      boolean isClosed = false;\n\n      \r\n      this.removeFromCqMap();\n\n      \r\n      if (stateBeforeClosing == CqStateImpl.RUNNING) {\n        cqService.stats().decCqsActive();\n      } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n        cqService.stats().decCqsStopped();\n      }\n\n      \r\n      if (this.cqResultKeys != null) {\n        synchronized (this.cqResultKeys) {\n          this.cqResultKeys.clear();\n        }\n      }\n\n      \r\n      this.cqState.setState(CqStateImpl.CLOSED);\n      cqService.stats().incCqsClosed();\n      cqService.stats().decCqsOnClient();\n      if (this.stats != null)\n        this.stats.close();\n    }\n\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","date":"2018-12-08 03:43:23","endLine":475,"groupId":"12929","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"close","params":"(booleansendRequestToServer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b1/a4f0f8d696ba39dd62a75b60442cea161a1a14.src","preCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n      boolean isClosed = false;\n\n      \r\n      this.removeFromCqMap();\n\n      \r\n      if (stateBeforeClosing == CqStateImpl.RUNNING) {\n        cqService.stats().decCqsActive();\n      } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n        cqService.stats().decCqsStopped();\n      }\n\n      \r\n      if (this.cqResultKeys != null) {\n        synchronized (this.cqResultKeys) {\n          this.cqResultKeys.clear();\n        }\n      }\n\n      \r\n      this.cqState.setState(CqStateImpl.CLOSED);\n      cqService.stats().incCqsClosed();\n      cqService.stats().decCqsOnClient();\n      if (this.stats != null)\n        this.stats.close();\n    }\n\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","realPath":"geode-cq/src/main/java/org/apache/geode/cache/query/cq/internal/ServerCQImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"B"},{"authorDate":"2018-12-08 03:43:23","commitOrder":1,"curCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n      boolean isClosed = false;\n\n      \r\n      \r\n      \r\n      Exception exception = null;\n      if (this.cqProxy != null && sendRequestToServer) {\n        try {\n          if (this.proxyCache != null) {\n            if (this.proxyCache.isClosed()) {\n              throw proxyCache.getCacheClosedException(\"Cache is closed for this user.\");\n            }\n            UserAttributes.userAttributes.set(this.proxyCache.getUserAttributes());\n          }\n          cqProxy.close(this);\n          isClosed = true;\n        } catch (CancelException e) {\n          throw e;\n        } catch (Exception ex) {\n          if (shutdownInProgress()) {\n            return;\n          }\n          exception = ex;\n        } finally {\n          UserAttributes.userAttributes.set(null);\n        }\n      }\n\n      \r\n      this.removeFromCqMap();\n\n      if (cqProxy == null || !sendRequestToServer || isClosed) {\n        \r\n        if (stateBeforeClosing == CqStateImpl.RUNNING) {\n          cqService.stats().decCqsActive();\n        } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n          cqService.stats().decCqsStopped();\n        }\n\n        \r\n        this.cqState.setState(CqStateImpl.CLOSED);\n        cqService.stats().incCqsClosed();\n        cqService.stats().decCqsOnClient();\n        if (this.stats != null)\n          this.stats.close();\n      } else {\n        if (shutdownInProgress()) {\n          return;\n        }\n        \r\n        if (exception != null) {\n          throw new CqException(\n              String.format(\"Failed to close the cq. CqName: %s. Error from last endpoint: %s\",\n                  this.cqName, exception.getLocalizedMessage()),\n              exception.getCause());\n        } else {\n          throw new CqException(\n              String.format(\n                  \"Failed to close the cq. CqName: %s. The server endpoints on which this cq was registered were not found.\",\n                  this.cqName));\n        }\n      }\n    }\n\n    \r\n    if (this.cqAttributes != null) {\n      CqListener[] cqListeners = this.getCqAttributes().getCqListeners();\n\n      if (cqListeners != null) {\n        if (isDebugEnabled) {\n          logger.debug(\n              \"Invoking CqListeners close() api for the CQ, CqName: {} Number of CqListeners: {}\",\n              cqName, cqListeners.length);\n        }\n        for (int lCnt = 0; lCnt < cqListeners.length; lCnt++) {\n          try {\n            cqListeners[lCnt].close();\n            \r\n          } catch (Exception ex) {\n            logger.warn(\"Exception occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, ex.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(ex.getMessage(), ex);\n            }\n          } catch (VirtualMachineError err) {\n            SystemFailure.initiateFailure(err);\n            \r\n            \r\n            throw err;\n          } catch (Throwable t) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            SystemFailure.checkFailure();\n            logger.warn(\n                \"RuntimeException occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, t.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(t.getMessage(), t);\n            }\n          }\n        }\n      }\n    }\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","date":"2018-12-08 03:43:23","endLine":243,"groupId":"13528","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"(booleansendRequestToServer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/53/d14a453e9a5618535f485053b4eec59bca91f1.src","preCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n      boolean isClosed = false;\n\n      \r\n      \r\n      \r\n      Exception exception = null;\n      if (this.cqProxy != null && sendRequestToServer) {\n        try {\n          if (this.proxyCache != null) {\n            if (this.proxyCache.isClosed()) {\n              throw proxyCache.getCacheClosedException(\"Cache is closed for this user.\");\n            }\n            UserAttributes.userAttributes.set(this.proxyCache.getUserAttributes());\n          }\n          cqProxy.close(this);\n          isClosed = true;\n        } catch (CancelException e) {\n          throw e;\n        } catch (Exception ex) {\n          if (shutdownInProgress()) {\n            return;\n          }\n          exception = ex;\n        } finally {\n          UserAttributes.userAttributes.set(null);\n        }\n      }\n\n      \r\n      this.removeFromCqMap();\n\n      if (cqProxy == null || !sendRequestToServer || isClosed) {\n        \r\n        if (stateBeforeClosing == CqStateImpl.RUNNING) {\n          cqService.stats().decCqsActive();\n        } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n          cqService.stats().decCqsStopped();\n        }\n\n        \r\n        this.cqState.setState(CqStateImpl.CLOSED);\n        cqService.stats().incCqsClosed();\n        cqService.stats().decCqsOnClient();\n        if (this.stats != null)\n          this.stats.close();\n      } else {\n        if (shutdownInProgress()) {\n          return;\n        }\n        \r\n        if (exception != null) {\n          throw new CqException(\n              String.format(\"Failed to close the cq. CqName: %s. Error from last endpoint: %s\",\n                  this.cqName, exception.getLocalizedMessage()),\n              exception.getCause());\n        } else {\n          throw new CqException(\n              String.format(\n                  \"Failed to close the cq. CqName: %s. The server endpoints on which this cq was registered were not found.\",\n                  this.cqName));\n        }\n      }\n    }\n\n    \r\n    if (this.cqAttributes != null) {\n      CqListener[] cqListeners = this.getCqAttributes().getCqListeners();\n\n      if (cqListeners != null) {\n        if (isDebugEnabled) {\n          logger.debug(\n              \"Invoking CqListeners close() api for the CQ, CqName: {} Number of CqListeners: {}\",\n              cqName, cqListeners.length);\n        }\n        for (int lCnt = 0; lCnt < cqListeners.length; lCnt++) {\n          try {\n            cqListeners[lCnt].close();\n            \r\n          } catch (Exception ex) {\n            logger.warn(\"Exception occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, ex.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(ex.getMessage(), ex);\n            }\n          } catch (VirtualMachineError err) {\n            SystemFailure.initiateFailure(err);\n            \r\n            \r\n            throw err;\n          } catch (Throwable t) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            SystemFailure.checkFailure();\n            logger.warn(\n                \"RuntimeException occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, t.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(t.getMessage(), t);\n            }\n          }\n        }\n      }\n    }\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","realPath":"geode-cq/src/main/java/org/apache/geode/cache/query/cq/internal/ClientCQImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"}],"commitId":"22a5017745acd4ca22cbcb08b70cc3cedbb4b5fd","commitMessage":"@@@GEODE-6117: Makes modules out of geode-core and geode-cq (#2915)\n\n* Moves all o.a.g.internal.cq(ish) classes to o.a.g.cache.querycq.internal.\n* Use Spring BOM plugin.\n* Adds geode-client BOM.\n\nCo-authored-by: Jacob Barrett <jbarrett@pivotal.io>\nCo-authored-by: Owen Nichols <onichols@pivotal.io>\n","date":"2018-12-08 03:43:23","modifiedFileCount":"33","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-01-25 04:40:08","codes":[{"authorDate":"2018-12-08 03:43:23","commitOrder":2,"curCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n      boolean isClosed = false;\n\n      \r\n      this.removeFromCqMap();\n\n      \r\n      if (stateBeforeClosing == CqStateImpl.RUNNING) {\n        cqService.stats().decCqsActive();\n      } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n        cqService.stats().decCqsStopped();\n      }\n\n      \r\n      if (this.cqResultKeys != null) {\n        synchronized (this.cqResultKeys) {\n          this.cqResultKeys.clear();\n        }\n      }\n\n      \r\n      this.cqState.setState(CqStateImpl.CLOSED);\n      cqService.stats().incCqsClosed();\n      cqService.stats().decCqsOnClient();\n      if (this.stats != null)\n        this.stats.close();\n    }\n\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","date":"2018-12-08 03:43:23","endLine":475,"groupId":"12929","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"close","params":"(booleansendRequestToServer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b1/a4f0f8d696ba39dd62a75b60442cea161a1a14.src","preCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n      boolean isClosed = false;\n\n      \r\n      this.removeFromCqMap();\n\n      \r\n      if (stateBeforeClosing == CqStateImpl.RUNNING) {\n        cqService.stats().decCqsActive();\n      } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n        cqService.stats().decCqsStopped();\n      }\n\n      \r\n      if (this.cqResultKeys != null) {\n        synchronized (this.cqResultKeys) {\n          this.cqResultKeys.clear();\n        }\n      }\n\n      \r\n      this.cqState.setState(CqStateImpl.CLOSED);\n      cqService.stats().incCqsClosed();\n      cqService.stats().decCqsOnClient();\n      if (this.stats != null)\n        this.stats.close();\n    }\n\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","realPath":"geode-cq/src/main/java/org/apache/geode/cache/query/cq/internal/ServerCQImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"N"},{"authorDate":"2020-01-25 04:40:08","commitOrder":2,"curCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n      boolean isClosed = false;\n\n      \r\n      \r\n      \r\n      Exception exception = null;\n      if (this.cqProxy != null && sendRequestToServer) {\n        try {\n          if (this.proxyCache != null) {\n            if (this.proxyCache.isClosed()) {\n              throw proxyCache.getCacheClosedException(\"Cache is closed for this user.\");\n            }\n            UserAttributes.userAttributes.set(this.proxyCache.getUserAttributes());\n          }\n          cqProxy.close(this);\n          isClosed = true;\n        } catch (CancelException e) {\n          throw e;\n        } catch (Exception ex) {\n          if (shutdownInProgress()) {\n            return;\n          }\n          exception = ex;\n        } finally {\n          UserAttributes.userAttributes.set(null);\n        }\n      }\n\n      \r\n      this.removeFromCqMap();\n\n      if (cqProxy == null || !sendRequestToServer || isClosed) {\n        \r\n        if (stateBeforeClosing == CqStateImpl.RUNNING) {\n          cqService.stats().decCqsActive();\n        } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n          cqService.stats().decCqsStopped();\n        }\n\n        \r\n        this.cqState.setState(CqStateImpl.CLOSED);\n        cqService.stats().incCqsClosed();\n        cqService.stats().decCqsOnClient();\n        if (this.stats != null)\n          this.stats.close();\n      } else {\n        if (shutdownInProgress()) {\n          return;\n        }\n        \r\n        if (exception != null) {\n          throw new CqException(\n              String.format(\"Failed to close the cq. CqName: %s. Error from last endpoint: %s\",\n                  this.cqName, exception.getLocalizedMessage()),\n              exception.getCause());\n        } else {\n          throw new CqException(\n              String.format(\n                  \"Failed to close the cq. CqName: %s. The server endpoints on which this cq was registered were not found.\",\n                  this.cqName));\n        }\n      }\n    }\n\n    \r\n    if (this.cqAttributes != null) {\n      CqListener[] cqListeners = this.getCqAttributes().getCqListeners();\n\n      if (cqListeners != null) {\n        if (isDebugEnabled) {\n          logger.debug(\n              \"Invoking CqListeners close() api for the CQ, CqName: {} Number of CqListeners: {}\",\n              cqName, cqListeners.length);\n        }\n        for (CqListener cqListener : cqListeners) {\n          try {\n            cqListener.close();\n            \r\n          } catch (Exception ex) {\n            logger.warn(\"Exception occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, ex.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(ex.getMessage(), ex);\n            }\n          } catch (VirtualMachineError err) {\n            SystemFailure.initiateFailure(err);\n            \r\n            \r\n            throw err;\n          } catch (Throwable t) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            SystemFailure.checkFailure();\n            logger.warn(\n                \"RuntimeException occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, t.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(t.getMessage(), t);\n            }\n          }\n        }\n      }\n    }\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","date":"2020-01-25 04:40:08","endLine":243,"groupId":"13528","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"(booleansendRequestToServer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a7/0063df6ed7633d3da656c98671747f5cd4f1f3.src","preCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n      boolean isClosed = false;\n\n      \r\n      \r\n      \r\n      Exception exception = null;\n      if (this.cqProxy != null && sendRequestToServer) {\n        try {\n          if (this.proxyCache != null) {\n            if (this.proxyCache.isClosed()) {\n              throw proxyCache.getCacheClosedException(\"Cache is closed for this user.\");\n            }\n            UserAttributes.userAttributes.set(this.proxyCache.getUserAttributes());\n          }\n          cqProxy.close(this);\n          isClosed = true;\n        } catch (CancelException e) {\n          throw e;\n        } catch (Exception ex) {\n          if (shutdownInProgress()) {\n            return;\n          }\n          exception = ex;\n        } finally {\n          UserAttributes.userAttributes.set(null);\n        }\n      }\n\n      \r\n      this.removeFromCqMap();\n\n      if (cqProxy == null || !sendRequestToServer || isClosed) {\n        \r\n        if (stateBeforeClosing == CqStateImpl.RUNNING) {\n          cqService.stats().decCqsActive();\n        } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n          cqService.stats().decCqsStopped();\n        }\n\n        \r\n        this.cqState.setState(CqStateImpl.CLOSED);\n        cqService.stats().incCqsClosed();\n        cqService.stats().decCqsOnClient();\n        if (this.stats != null)\n          this.stats.close();\n      } else {\n        if (shutdownInProgress()) {\n          return;\n        }\n        \r\n        if (exception != null) {\n          throw new CqException(\n              String.format(\"Failed to close the cq. CqName: %s. Error from last endpoint: %s\",\n                  this.cqName, exception.getLocalizedMessage()),\n              exception.getCause());\n        } else {\n          throw new CqException(\n              String.format(\n                  \"Failed to close the cq. CqName: %s. The server endpoints on which this cq was registered were not found.\",\n                  this.cqName));\n        }\n      }\n    }\n\n    \r\n    if (this.cqAttributes != null) {\n      CqListener[] cqListeners = this.getCqAttributes().getCqListeners();\n\n      if (cqListeners != null) {\n        if (isDebugEnabled) {\n          logger.debug(\n              \"Invoking CqListeners close() api for the CQ, CqName: {} Number of CqListeners: {}\",\n              cqName, cqListeners.length);\n        }\n        for (int lCnt = 0; lCnt < cqListeners.length; lCnt++) {\n          try {\n            cqListeners[lCnt].close();\n            \r\n          } catch (Exception ex) {\n            logger.warn(\"Exception occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, ex.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(ex.getMessage(), ex);\n            }\n          } catch (VirtualMachineError err) {\n            SystemFailure.initiateFailure(err);\n            \r\n            \r\n            throw err;\n          } catch (Throwable t) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            SystemFailure.checkFailure();\n            logger.warn(\n                \"RuntimeException occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, t.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(t.getMessage(), t);\n            }\n          }\n        }\n      }\n    }\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","realPath":"geode-cq/src/main/java/org/apache/geode/cache/query/cq/internal/ClientCQImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"4f078de38a38de31e7558b99b7f0fff979ce87c5","commitMessage":"@@@GEODE-7660: Code cleanup for cqs (#4540)\n\n* Assign to string instead of Object\n* Migration to post Java 5 and Java 7 'features'","date":"2020-01-25 04:40:08","modifiedFileCount":"6","status":"M","submitter":"Jason Huynh"},{"authorTime":"2020-01-25 04:40:08","codes":[{"authorDate":"2020-03-16 18:33:52","commitOrder":3,"curCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n\n      \r\n      this.removeFromCqMap();\n\n      \r\n      if (stateBeforeClosing == CqStateImpl.RUNNING) {\n        cqService.stats().decCqsActive();\n      } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n        cqService.stats().decCqsStopped();\n      }\n\n      \r\n      serverCQResultsCache.clear();\n\n      \r\n      this.cqState.setState(CqStateImpl.CLOSED);\n      cqService.stats().incCqsClosed();\n      cqService.stats().decCqsOnClient();\n      if (this.stats != null)\n        this.stats.close();\n    }\n\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","date":"2020-03-16 18:33:52","endLine":390,"groupId":"30200","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"close","params":"(booleansendRequestToServer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e4/8ec2be7d1e21962fbdfdeef025f638f1675b0c.src","preCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n      boolean isClosed = false;\n\n      \r\n      this.removeFromCqMap();\n\n      \r\n      if (stateBeforeClosing == CqStateImpl.RUNNING) {\n        cqService.stats().decCqsActive();\n      } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n        cqService.stats().decCqsStopped();\n      }\n\n      \r\n      if (this.cqResultKeys != null) {\n        synchronized (this.cqResultKeys) {\n          this.cqResultKeys.clear();\n        }\n      }\n\n      \r\n      this.cqState.setState(CqStateImpl.CLOSED);\n      cqService.stats().incCqsClosed();\n      cqService.stats().decCqsOnClient();\n      if (this.stats != null)\n        this.stats.close();\n    }\n\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","realPath":"geode-cq/src/main/java/org/apache/geode/cache/query/cq/internal/ServerCQImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"},{"authorDate":"2020-01-25 04:40:08","commitOrder":3,"curCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n      boolean isClosed = false;\n\n      \r\n      \r\n      \r\n      Exception exception = null;\n      if (this.cqProxy != null && sendRequestToServer) {\n        try {\n          if (this.proxyCache != null) {\n            if (this.proxyCache.isClosed()) {\n              throw proxyCache.getCacheClosedException(\"Cache is closed for this user.\");\n            }\n            UserAttributes.userAttributes.set(this.proxyCache.getUserAttributes());\n          }\n          cqProxy.close(this);\n          isClosed = true;\n        } catch (CancelException e) {\n          throw e;\n        } catch (Exception ex) {\n          if (shutdownInProgress()) {\n            return;\n          }\n          exception = ex;\n        } finally {\n          UserAttributes.userAttributes.set(null);\n        }\n      }\n\n      \r\n      this.removeFromCqMap();\n\n      if (cqProxy == null || !sendRequestToServer || isClosed) {\n        \r\n        if (stateBeforeClosing == CqStateImpl.RUNNING) {\n          cqService.stats().decCqsActive();\n        } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n          cqService.stats().decCqsStopped();\n        }\n\n        \r\n        this.cqState.setState(CqStateImpl.CLOSED);\n        cqService.stats().incCqsClosed();\n        cqService.stats().decCqsOnClient();\n        if (this.stats != null)\n          this.stats.close();\n      } else {\n        if (shutdownInProgress()) {\n          return;\n        }\n        \r\n        if (exception != null) {\n          throw new CqException(\n              String.format(\"Failed to close the cq. CqName: %s. Error from last endpoint: %s\",\n                  this.cqName, exception.getLocalizedMessage()),\n              exception.getCause());\n        } else {\n          throw new CqException(\n              String.format(\n                  \"Failed to close the cq. CqName: %s. The server endpoints on which this cq was registered were not found.\",\n                  this.cqName));\n        }\n      }\n    }\n\n    \r\n    if (this.cqAttributes != null) {\n      CqListener[] cqListeners = this.getCqAttributes().getCqListeners();\n\n      if (cqListeners != null) {\n        if (isDebugEnabled) {\n          logger.debug(\n              \"Invoking CqListeners close() api for the CQ, CqName: {} Number of CqListeners: {}\",\n              cqName, cqListeners.length);\n        }\n        for (CqListener cqListener : cqListeners) {\n          try {\n            cqListener.close();\n            \r\n          } catch (Exception ex) {\n            logger.warn(\"Exception occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, ex.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(ex.getMessage(), ex);\n            }\n          } catch (VirtualMachineError err) {\n            SystemFailure.initiateFailure(err);\n            \r\n            \r\n            throw err;\n          } catch (Throwable t) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            SystemFailure.checkFailure();\n            logger.warn(\n                \"RuntimeException occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, t.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(t.getMessage(), t);\n            }\n          }\n        }\n      }\n    }\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","date":"2020-01-25 04:40:08","endLine":243,"groupId":"13528","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"(booleansendRequestToServer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a7/0063df6ed7633d3da656c98671747f5cd4f1f3.src","preCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n      boolean isClosed = false;\n\n      \r\n      \r\n      \r\n      Exception exception = null;\n      if (this.cqProxy != null && sendRequestToServer) {\n        try {\n          if (this.proxyCache != null) {\n            if (this.proxyCache.isClosed()) {\n              throw proxyCache.getCacheClosedException(\"Cache is closed for this user.\");\n            }\n            UserAttributes.userAttributes.set(this.proxyCache.getUserAttributes());\n          }\n          cqProxy.close(this);\n          isClosed = true;\n        } catch (CancelException e) {\n          throw e;\n        } catch (Exception ex) {\n          if (shutdownInProgress()) {\n            return;\n          }\n          exception = ex;\n        } finally {\n          UserAttributes.userAttributes.set(null);\n        }\n      }\n\n      \r\n      this.removeFromCqMap();\n\n      if (cqProxy == null || !sendRequestToServer || isClosed) {\n        \r\n        if (stateBeforeClosing == CqStateImpl.RUNNING) {\n          cqService.stats().decCqsActive();\n        } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n          cqService.stats().decCqsStopped();\n        }\n\n        \r\n        this.cqState.setState(CqStateImpl.CLOSED);\n        cqService.stats().incCqsClosed();\n        cqService.stats().decCqsOnClient();\n        if (this.stats != null)\n          this.stats.close();\n      } else {\n        if (shutdownInProgress()) {\n          return;\n        }\n        \r\n        if (exception != null) {\n          throw new CqException(\n              String.format(\"Failed to close the cq. CqName: %s. Error from last endpoint: %s\",\n                  this.cqName, exception.getLocalizedMessage()),\n              exception.getCause());\n        } else {\n          throw new CqException(\n              String.format(\n                  \"Failed to close the cq. CqName: %s. The server endpoints on which this cq was registered were not found.\",\n                  this.cqName));\n        }\n      }\n    }\n\n    \r\n    if (this.cqAttributes != null) {\n      CqListener[] cqListeners = this.getCqAttributes().getCqListeners();\n\n      if (cqListeners != null) {\n        if (isDebugEnabled) {\n          logger.debug(\n              \"Invoking CqListeners close() api for the CQ, CqName: {} Number of CqListeners: {}\",\n              cqName, cqListeners.length);\n        }\n        for (CqListener cqListener : cqListeners) {\n          try {\n            cqListener.close();\n            \r\n          } catch (Exception ex) {\n            logger.warn(\"Exception occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, ex.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(ex.getMessage(), ex);\n            }\n          } catch (VirtualMachineError err) {\n            SystemFailure.initiateFailure(err);\n            \r\n            \r\n            throw err;\n          } catch (Throwable t) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            SystemFailure.checkFailure();\n            logger.warn(\n                \"RuntimeException occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, t.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(t.getMessage(), t);\n            }\n          }\n        }\n      }\n    }\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","realPath":"geode-cq/src/main/java/org/apache/geode/cache/query/cq/internal/ClientCQImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"}],"commitId":"9e3c473e9cf6d72126d0e84319b1192a5e2b6fdb","commitMessage":"@@@GEODE-7863: Reduce ServerCQImpl Contention (#4798)\n\nWe don't need to lock the entire internal cache for Partitioned\nregions so the implementation is now split by region type.  this will\nus to improve/change them independently in the future.\n\n- Removed redundant checks.\n- Keep current behavior for Replicate Regions.\n- Use ConcurrentMap instead of locking the entire internal cache on\nevery operation for Partition Regions.\n- Keep the lock on ServerCQImpl instance only while executing the\nquery and leave stats operations outside of the synchronized block.","date":"2020-03-16 18:33:52","modifiedFileCount":"7","status":"M","submitter":"Juan Jos? Ramos"},{"authorTime":"2021-06-04 00:32:09","codes":[{"authorDate":"2021-06-04 00:32:09","commitOrder":4,"curCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n\n      \r\n      this.removeFromCqMap();\n\n      \r\n      if (stateBeforeClosing == CqStateImpl.RUNNING) {\n        cqService.stats().decCqsActive();\n      } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n        cqService.stats().decCqsStopped();\n      }\n\n      \r\n      serverCQResultsCache.clear();\n\n      \r\n      this.cqState.setState(CqStateImpl.CLOSED);\n      cqService.stats().incCqsClosed();\n      cqService.stats().decCqsOnClient();\n      if (this.stats != null) {\n        this.stats.close();\n      }\n    }\n\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","date":"2021-06-04 00:32:09","endLine":400,"groupId":"10871","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"close","params":"(booleansendRequestToServer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a9/de60513eff84a0564c3d57aaab92156140a27f.src","preCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n\n      \r\n      this.removeFromCqMap();\n\n      \r\n      if (stateBeforeClosing == CqStateImpl.RUNNING) {\n        cqService.stats().decCqsActive();\n      } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n        cqService.stats().decCqsStopped();\n      }\n\n      \r\n      serverCQResultsCache.clear();\n\n      \r\n      this.cqState.setState(CqStateImpl.CLOSED);\n      cqService.stats().incCqsClosed();\n      cqService.stats().decCqsOnClient();\n      if (this.stats != null)\n        this.stats.close();\n    }\n\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","realPath":"geode-cq/src/main/java/org/apache/geode/cache/query/cq/internal/ServerCQImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":355,"status":"M"},{"authorDate":"2021-06-04 00:32:09","commitOrder":4,"curCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n      boolean isClosed = false;\n\n      \r\n      \r\n      \r\n      Exception exception = null;\n      if (this.cqProxy != null && sendRequestToServer) {\n        try {\n          if (this.proxyCache != null) {\n            if (this.proxyCache.isClosed()) {\n              throw proxyCache.getCacheClosedException(\"Cache is closed for this user.\");\n            }\n            UserAttributes.userAttributes.set(this.proxyCache.getUserAttributes());\n          }\n          cqProxy.close(this);\n          isClosed = true;\n        } catch (CancelException e) {\n          throw e;\n        } catch (Exception ex) {\n          if (shutdownInProgress()) {\n            return;\n          }\n          exception = ex;\n        } finally {\n          UserAttributes.userAttributes.set(null);\n        }\n      }\n\n      \r\n      this.removeFromCqMap();\n\n      if (cqProxy == null || !sendRequestToServer || isClosed) {\n        \r\n        if (stateBeforeClosing == CqStateImpl.RUNNING) {\n          cqService.stats().decCqsActive();\n        } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n          cqService.stats().decCqsStopped();\n        }\n\n        \r\n        this.cqState.setState(CqStateImpl.CLOSED);\n        cqService.stats().incCqsClosed();\n        cqService.stats().decCqsOnClient();\n        if (this.stats != null) {\n          this.stats.close();\n        }\n      } else {\n        if (shutdownInProgress()) {\n          return;\n        }\n        \r\n        if (exception != null) {\n          throw new CqException(\n              String.format(\"Failed to close the cq. CqName: %s. Error from last endpoint: %s\",\n                  this.cqName, exception.getLocalizedMessage()),\n              exception.getCause());\n        } else {\n          throw new CqException(\n              String.format(\n                  \"Failed to close the cq. CqName: %s. The server endpoints on which this cq was registered were not found.\",\n                  this.cqName));\n        }\n      }\n    }\n\n    \r\n    if (this.cqAttributes != null) {\n      CqListener[] cqListeners = this.getCqAttributes().getCqListeners();\n\n      if (cqListeners != null) {\n        if (isDebugEnabled) {\n          logger.debug(\n              \"Invoking CqListeners close() api for the CQ, CqName: {} Number of CqListeners: {}\",\n              cqName, cqListeners.length);\n        }\n        for (CqListener cqListener : cqListeners) {\n          try {\n            cqListener.close();\n            \r\n          } catch (Exception ex) {\n            logger.warn(\"Exception occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, ex.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(ex.getMessage(), ex);\n            }\n          } catch (VirtualMachineError err) {\n            SystemFailure.initiateFailure(err);\n            \r\n            \r\n            throw err;\n          } catch (Throwable t) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            SystemFailure.checkFailure();\n            logger.warn(\n                \"RuntimeException occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, t.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(t.getMessage(), t);\n            }\n          }\n        }\n      }\n    }\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","date":"2021-06-04 00:32:09","endLine":244,"groupId":"10871","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"close","params":"(booleansendRequestToServer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7b/2bc9c7f8ae55fec568c980ffd39eed4a3b655a.src","preCode":"  public void close(boolean sendRequestToServer) throws CqClosedException, CqException {\n    final boolean isDebugEnabled = logger.isDebugEnabled();\n    if (isDebugEnabled) {\n      logger.debug(\"Started closing CQ CqName: {} SendRequestToServer: {}\", cqName,\n          sendRequestToServer);\n    }\n    \r\n    synchronized (this.cqState) {\n      \r\n      if (this.isClosed()) {\n        \r\n        if (isDebugEnabled) {\n          logger.debug(\"CQ is already closed, CqName: {}\", this.cqName);\n        }\n        return;\n      }\n\n      int stateBeforeClosing = this.cqState.getState();\n      this.cqState.setState(CqStateImpl.CLOSING);\n      boolean isClosed = false;\n\n      \r\n      \r\n      \r\n      Exception exception = null;\n      if (this.cqProxy != null && sendRequestToServer) {\n        try {\n          if (this.proxyCache != null) {\n            if (this.proxyCache.isClosed()) {\n              throw proxyCache.getCacheClosedException(\"Cache is closed for this user.\");\n            }\n            UserAttributes.userAttributes.set(this.proxyCache.getUserAttributes());\n          }\n          cqProxy.close(this);\n          isClosed = true;\n        } catch (CancelException e) {\n          throw e;\n        } catch (Exception ex) {\n          if (shutdownInProgress()) {\n            return;\n          }\n          exception = ex;\n        } finally {\n          UserAttributes.userAttributes.set(null);\n        }\n      }\n\n      \r\n      this.removeFromCqMap();\n\n      if (cqProxy == null || !sendRequestToServer || isClosed) {\n        \r\n        if (stateBeforeClosing == CqStateImpl.RUNNING) {\n          cqService.stats().decCqsActive();\n        } else if (stateBeforeClosing == CqStateImpl.STOPPED) {\n          cqService.stats().decCqsStopped();\n        }\n\n        \r\n        this.cqState.setState(CqStateImpl.CLOSED);\n        cqService.stats().incCqsClosed();\n        cqService.stats().decCqsOnClient();\n        if (this.stats != null)\n          this.stats.close();\n      } else {\n        if (shutdownInProgress()) {\n          return;\n        }\n        \r\n        if (exception != null) {\n          throw new CqException(\n              String.format(\"Failed to close the cq. CqName: %s. Error from last endpoint: %s\",\n                  this.cqName, exception.getLocalizedMessage()),\n              exception.getCause());\n        } else {\n          throw new CqException(\n              String.format(\n                  \"Failed to close the cq. CqName: %s. The server endpoints on which this cq was registered were not found.\",\n                  this.cqName));\n        }\n      }\n    }\n\n    \r\n    if (this.cqAttributes != null) {\n      CqListener[] cqListeners = this.getCqAttributes().getCqListeners();\n\n      if (cqListeners != null) {\n        if (isDebugEnabled) {\n          logger.debug(\n              \"Invoking CqListeners close() api for the CQ, CqName: {} Number of CqListeners: {}\",\n              cqName, cqListeners.length);\n        }\n        for (CqListener cqListener : cqListeners) {\n          try {\n            cqListener.close();\n            \r\n          } catch (Exception ex) {\n            logger.warn(\"Exception occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, ex.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(ex.getMessage(), ex);\n            }\n          } catch (VirtualMachineError err) {\n            SystemFailure.initiateFailure(err);\n            \r\n            \r\n            throw err;\n          } catch (Throwable t) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            SystemFailure.checkFailure();\n            logger.warn(\n                \"RuntimeException occurred in the CqListener of the CQ, CqName : {} Error : {}\",\n                new Object[] {cqName, t.getLocalizedMessage()});\n            if (isDebugEnabled) {\n              logger.debug(t.getMessage(), t);\n            }\n          }\n        }\n      }\n    }\n    if (isDebugEnabled) {\n      logger.debug(\"Successfully closed the CQ. {}\", cqName);\n    }\n  }\n","realPath":"geode-cq/src/main/java/org/apache/geode/cache/query/cq/internal/ClientCQImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"2879573ffb04e9e029e14ca37d8a064268cc8f44","commitMessage":"@@@GEODE-7864: Always use curly braces for control flow statements (#6523)\n\nAuthored-by: Donal Evans <doevans@vmware.com>","date":"2021-06-04 00:32:09","modifiedFileCount":"640","status":"M","submitter":"Donal Evans"}]
