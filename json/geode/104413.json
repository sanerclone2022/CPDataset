[{"authorTime":"2019-04-02 01:00:49","codes":[{"authorDate":"2019-04-02 01:00:49","commitOrder":1,"curCode":"  public void borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    ServerLocation serverLocation = mock(ServerLocation.class);\n    when(connectionFactory.createClientToServerConnection(serverLocation, false))\n        .thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(serverLocation, timeout, false))\n        .isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","date":"2019-04-02 01:00:49","endLine":118,"groupId":"18580","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/35/afea368fdc0c00f5aff1d768aae4e075cbd4a2.src","preCode":"  public void borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    ServerLocation serverLocation = mock(ServerLocation.class);\n    when(connectionFactory.createClientToServerConnection(serverLocation, false))\n        .thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(serverLocation, timeout, false))\n        .isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"},{"authorDate":"2019-04-02 01:00:49","commitOrder":1,"curCode":"  public void borrowConnectionCreatesAConnectionWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    when(connectionFactory.createClientToServerConnection(any())).thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(timeout)).isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","date":"2019-04-02 01:00:49","endLine":132,"groupId":"36078","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"borrowConnectionCreatesAConnectionWhenNoneExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/35/afea368fdc0c00f5aff1d768aae4e075cbd4a2.src","preCode":"  public void borrowConnectionCreatesAConnectionWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    when(connectionFactory.createClientToServerConnection(any())).thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(timeout)).isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"}],"commitId":"e87e720b331f164723c36ec82cd8d01c559b1ae3","commitMessage":"@@@GEODE-6515: refactor ConnectionManagerImpl (#3304)\n\nRefactors the ConnectionManagerImpl to a non-locking implementation to allow gets to scale with more threads. The previous implementation locked around all logic for getting.  creating.  or returning a connection to the pool.  which resulted in a high degree of contention for that lock.\n\nAdditionally.  much of the logic for accounting for the number of total connections.  and the dequeue of available connections have been extracted to ConnectionAccounting and AvailableConnectionManager respectively. This was done in order to add unit and concurrent tests for that logic.\n\n* Refactor ConnectionManagerImpl to a non-locking implementation\n* add unit tests for ConnectionManagerImpl\n* update ConnectionManagerImpl Javadocs\n* extract ConnectionAccounting from ConnectionManagerImpl\n* add unit test for ConnectionAccounting\n* add concurrency tests for ConnectionAccounting\n* extract AvailableConnectionManager from ConnectionManagerImpl\n* add unit tests for AvailableConnectionManager\n* add concurrency tests for AvailableConnectionManager\n* add unit test for ConcurrentTestRunner\n* add javadocs to AvailableConnectionManager and improved the method names\n* activate returns false if the connection has been destroyed instead of throwing ConnectionDestroyedException\n* start background prefill if under the minimum number of connections in ConnectionManagerImpl#borrowConnection when create fails\n* add generic <ServerLocation> to Set in ConnectionManagerImpl\n* Correct invalidateServer logic in ConnectionManagerImpl\n* make NOT_WAITING private in ConnectionManagerImpl\n* made createLifetimeReplacementConnection private since it is only\nused by ConnectionMap\n\nSigned-off-by: Helena Bales <hbales@pivotal.io>\nSigned-off-by: Jacob Barrett <jbarrett@pivotal.io>\nSigned-off-by: Darrel Schneider <dschneider@pivotal.io>\n","date":"2019-04-02 01:00:49","modifiedFileCount":"10","status":"B","submitter":"Helena Bales"},{"authorTime":"2019-04-02 01:00:49","codes":[{"authorDate":"2019-06-11 11:44:45","commitOrder":2,"curCode":"  public void borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    ServerLocation serverLocation = mock(ServerLocation.class);\n    when(connectionFactory.createClientToServerConnection(serverLocation, false))\n        .thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(serverLocation, false))\n        .isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","date":"2019-06-11 11:44:45","endLine":118,"groupId":"18580","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/54/2a8fe866dce6e6ceff9d2f905656c64f7a2540.src","preCode":"  public void borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    ServerLocation serverLocation = mock(ServerLocation.class);\n    when(connectionFactory.createClientToServerConnection(serverLocation, false))\n        .thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(serverLocation, timeout, false))\n        .isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2019-04-02 01:00:49","commitOrder":2,"curCode":"  public void borrowConnectionCreatesAConnectionWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    when(connectionFactory.createClientToServerConnection(any())).thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(timeout)).isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","date":"2019-04-02 01:00:49","endLine":132,"groupId":"36078","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"borrowConnectionCreatesAConnectionWhenNoneExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/35/afea368fdc0c00f5aff1d768aae4e075cbd4a2.src","preCode":"  public void borrowConnectionCreatesAConnectionWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    when(connectionFactory.createClientToServerConnection(any())).thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(timeout)).isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"}],"commitId":"8a9d767c7ca8dd97b22fc6d020b8063bef1e9d08","commitMessage":"@@@GEODE-6535 Remove unused timeout parameter (#3546)\n\n","date":"2019-06-11 11:44:45","modifiedFileCount":"7","status":"M","submitter":"mkevo"},{"authorTime":"2019-04-02 01:00:49","codes":[{"authorDate":"2020-02-27 14:38:31","commitOrder":3,"curCode":"  public void borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    ServerLocation serverLocation = mock(ServerLocation.class);\n    when(connectionFactory.createClientToServerConnection(serverLocation, false))\n        .thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(serverLocation, timeout, false))\n        .isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","date":"2020-02-27 14:38:31","endLine":118,"groupId":"18580","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/74/8f37b2fc1098e747664b33f49278107e080d23.src","preCode":"  public void borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    ServerLocation serverLocation = mock(ServerLocation.class);\n    when(connectionFactory.createClientToServerConnection(serverLocation, false))\n        .thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(serverLocation, false))\n        .isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2019-04-02 01:00:49","commitOrder":3,"curCode":"  public void borrowConnectionCreatesAConnectionWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    when(connectionFactory.createClientToServerConnection(any())).thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(timeout)).isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","date":"2019-04-02 01:00:49","endLine":132,"groupId":"36078","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"borrowConnectionCreatesAConnectionWhenNoneExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/35/afea368fdc0c00f5aff1d768aae4e075cbd4a2.src","preCode":"  public void borrowConnectionCreatesAConnectionWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    when(connectionFactory.createClientToServerConnection(any())).thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(timeout)).isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"}],"commitId":"9da2cd49e2e04564b446eaad579b51e986bc2179","commitMessage":"@@@GEODE-6536: Added retry in borrowConnection/single hop (#4719)\n\n* GEODE-6536: Added retry in borrowConnection/single hop\n\n* GEODE-6536: bug fix\n\n* GEODE-6536: update after comments\n","date":"2020-02-27 14:38:31","modifiedFileCount":"7","status":"M","submitter":"Mario Ivanac"},{"authorTime":"2019-04-02 01:00:49","codes":[{"authorDate":"2020-02-29 09:40:35","commitOrder":4,"curCode":"  public void borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    ServerLocation serverLocation = mock(ServerLocation.class);\n    when(connectionFactory.createClientToServerConnection(serverLocation, false))\n        .thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(serverLocation, false))\n        .isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","date":"2020-02-29 09:40:35","endLine":118,"groupId":"18580","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/54/2a8fe866dce6e6ceff9d2f905656c64f7a2540.src","preCode":"  public void borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    ServerLocation serverLocation = mock(ServerLocation.class);\n    when(connectionFactory.createClientToServerConnection(serverLocation, false))\n        .thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(serverLocation, timeout, false))\n        .isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2019-04-02 01:00:49","commitOrder":4,"curCode":"  public void borrowConnectionCreatesAConnectionWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    when(connectionFactory.createClientToServerConnection(any())).thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(timeout)).isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","date":"2019-04-02 01:00:49","endLine":132,"groupId":"36078","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"borrowConnectionCreatesAConnectionWhenNoneExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/35/afea368fdc0c00f5aff1d768aae4e075cbd4a2.src","preCode":"  public void borrowConnectionCreatesAConnectionWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    when(connectionFactory.createClientToServerConnection(any())).thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(timeout)).isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"}],"commitId":"c8198f1b9e006b8b5b1f9d16937dffe31aafa333","commitMessage":"@@@Revert \"GEODE-6536: Added retry in borrowConnection/single hop (#4719)\" (#4749)\n\nThis reverts commit 9da2cd49e2e04564b446eaad579b51e986bc2179.","date":"2020-02-29 09:40:35","modifiedFileCount":"7","status":"M","submitter":"Donal Evans"},{"authorTime":"2019-04-02 01:00:49","codes":[{"authorDate":"2020-03-11 05:56:49","commitOrder":5,"curCode":"  public void borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    ServerLocation serverLocation = mock(ServerLocation.class);\n    when(connectionFactory.createClientToServerConnection(serverLocation, false))\n        .thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(serverLocation, timeout, false))\n        .isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","date":"2020-03-11 05:56:49","endLine":127,"groupId":"18580","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a7/2a5b599ddf8526343c0c57648cc6dec81ac3a5.src","preCode":"  public void borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    ServerLocation serverLocation = mock(ServerLocation.class);\n    when(connectionFactory.createClientToServerConnection(serverLocation, false))\n        .thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(serverLocation, false))\n        .isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2019-04-02 01:00:49","commitOrder":5,"curCode":"  public void borrowConnectionCreatesAConnectionWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    when(connectionFactory.createClientToServerConnection(any())).thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(timeout)).isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","date":"2019-04-02 01:00:49","endLine":132,"groupId":"36078","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"borrowConnectionCreatesAConnectionWhenNoneExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/35/afea368fdc0c00f5aff1d768aae4e075cbd4a2.src","preCode":"  public void borrowConnectionCreatesAConnectionWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    when(connectionFactory.createClientToServerConnection(any())).thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(timeout)).isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"}],"commitId":"86defd40c6ba558b53753c51176e05f009bb32c3","commitMessage":"@@@Feature/geode 6536 1: modify borrowConnection singleHop solution (#4753)\n\n* GEODE-6536: Added retry in borrowConnection/single hop\n\n* GEODE-6536: bug fix\n\n* GEODE-6536: update after comments\n\n* GEODE-6536: modify borrowConnection singleHop solution\n\n* GEODE-6536: test update\n\n* GEODE-6536: updated tests.  and added parameter to desable timeout\n\n* GEODE-6536: update of cachexml impacts\n\n* GEODE-6536: remove cachexml restriction\n\n* GEODE-6536: update default value and documentation","date":"2020-03-11 05:56:49","modifiedFileCount":"23","status":"M","submitter":"Mario Ivanac"},{"authorTime":"2019-04-02 01:00:49","codes":[{"authorDate":"2020-03-14 06:50:37","commitOrder":6,"curCode":"  public void borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    ServerLocation serverLocation = mock(ServerLocation.class);\n    when(connectionFactory.createClientToServerConnection(serverLocation, false))\n        .thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(serverLocation, false))\n        .isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","date":"2020-03-14 06:50:37","endLine":118,"groupId":"18580","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/54/2a8fe866dce6e6ceff9d2f905656c64f7a2540.src","preCode":"  public void borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    ServerLocation serverLocation = mock(ServerLocation.class);\n    when(connectionFactory.createClientToServerConnection(serverLocation, false))\n        .thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(serverLocation, timeout, false))\n        .isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2019-04-02 01:00:49","commitOrder":6,"curCode":"  public void borrowConnectionCreatesAConnectionWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    when(connectionFactory.createClientToServerConnection(any())).thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(timeout)).isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","date":"2019-04-02 01:00:49","endLine":132,"groupId":"36078","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"borrowConnectionCreatesAConnectionWhenNoneExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/35/afea368fdc0c00f5aff1d768aae4e075cbd4a2.src","preCode":"  public void borrowConnectionCreatesAConnectionWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    when(connectionFactory.createClientToServerConnection(any())).thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(timeout)).isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"}],"commitId":"d013311296d40a1cec4d5a6071a4eb1a7707601a","commitMessage":"@@@GEODE-7880: revert changes related to GEODE-6536 (#4810)\n\nRevert \"Feature/geode 6536 1: modify borrowConnection singleHop solution (#4753)\"\n\nThis reverts commit 86defd40c6ba558b53753c51176e05f009bb32c3.\n\nCo-authored-by: anilkumar gingade <agingade@pivotal.io>\nCo-authored-by: Dale Emery <demery@pivotal.io>","date":"2020-03-14 06:50:37","modifiedFileCount":"23","status":"M","submitter":"agingade"},{"authorTime":"2019-04-02 01:00:49","codes":[{"authorDate":"2020-03-31 03:54:35","commitOrder":7,"curCode":"  public void borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    ServerLocation serverLocation = mock(ServerLocation.class);\n    when(connectionFactory.createClientToServerConnection(serverLocation, false))\n        .thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(serverLocation, timeout, false))\n        .isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","date":"2020-03-31 03:54:35","endLine":127,"groupId":"104413","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a7/2a5b599ddf8526343c0c57648cc6dec81ac3a5.src","preCode":"  public void borrowConnectionCreatesAConnectionOnSpecifiedServerWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    ServerLocation serverLocation = mock(ServerLocation.class);\n    when(connectionFactory.createClientToServerConnection(serverLocation, false))\n        .thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(serverLocation, false))\n        .isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2019-04-02 01:00:49","commitOrder":7,"curCode":"  public void borrowConnectionCreatesAConnectionWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    when(connectionFactory.createClientToServerConnection(any())).thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(timeout)).isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","date":"2019-04-02 01:00:49","endLine":132,"groupId":"104413","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"borrowConnectionCreatesAConnectionWhenNoneExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/35/afea368fdc0c00f5aff1d768aae4e075cbd4a2.src","preCode":"  public void borrowConnectionCreatesAConnectionWhenNoneExist() {\n    Connection connection = mock(Connection.class);\n    when(connectionFactory.createClientToServerConnection(any())).thenReturn(connection);\n\n    connectionManager = createDefaultConnectionManager();\n    connectionManager.start(backgroundProcessor);\n\n    assertThat(connectionManager.borrowConnection(timeout)).isInstanceOf(PooledConnection.class);\n    assertThat(connectionManager.getConnectionCount()).isEqualTo(1);\n\n    connectionManager.close(false);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"}],"commitId":"b021b127867d1e01e09fac26de10d29f896ed7dc","commitMessage":"@@@Feature/geode 6536 2: Added retry in borrowConnection/single hop (#4833)\n\n* GEODE-6536: Added retry in borrowConnection/single hop\n\n* GEODE-6536: bug fix\n\n* GEODE-6536: update after comments\n\n* GEODE-6536: modify borrowConnection singleHop solution\n\n* GEODE-6536: test update\n\n* GEODE-6536: updated tests.  and added parameter to desable timeout\n\n* GEODE-6536: update of cachexml impacts\n\n* GEODE-6536: remove cachexml restriction\n\n* GEODE-6536: update default value and documentation\n\n* GEODE-6536_2: change exception type\n\n* GEODE-6536_2: seize new connection only in case onlyUseExistingCnx=false","date":"2020-03-31 03:54:35","modifiedFileCount":"23","status":"M","submitter":"Mario Ivanac"}]
