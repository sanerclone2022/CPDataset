[{"authorTime":"2019-11-26 01:29:53","codes":[{"authorDate":"2019-11-26 01:29:53","commitOrder":1,"curCode":"  public void testVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> createServer(regionName, 0, true, 1, null));\n    server2.invoke(() -> createServer(regionName, 0, true, 1, null));\n    int serverPort3 = server3.invoke(() -> createServer(regionName, 0, true, 1, null));\n\n    \r\n    client1.invoke(() -> createClient(regionName, hostName, new int[] {serverPort3}, 0, 59000, true,\n        true, true, true));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n    });\n\n    \r\n    List<String> expectedVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n\n      return versions;\n    });\n\n    \r\n    sleep(1000);\n\n    \r\n    List<String> actualVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      RegionMap entries = ((InternalRegion) region).getRegionMap();\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n\n      return versions;\n    });\n\n    assertThat(actualVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedVersions) {\n      assertThat(actualVersions).contains(keyTag);\n    }\n  }\n","date":"2019-11-26 01:29:53","endLine":2700,"groupId":"47395","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testVersionsOnServersWithNotificationsOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/db/1a918af748ffd822bc92b189411267d25b1494.src","preCode":"  public void testVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> createServer(regionName, 0, true, 1, null));\n    server2.invoke(() -> createServer(regionName, 0, true, 1, null));\n    int serverPort3 = server3.invoke(() -> createServer(regionName, 0, true, 1, null));\n\n    \r\n    client1.invoke(() -> createClient(regionName, hostName, new int[] {serverPort3}, 0, 59000, true,\n        true, true, true));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n    });\n\n    \r\n    List<String> expectedVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n\n      return versions;\n    });\n\n    \r\n    sleep(1000);\n\n    \r\n    List<String> actualVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      RegionMap entries = ((InternalRegion) region).getRegionMap();\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n\n      return versions;\n    });\n\n    assertThat(actualVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedVersions) {\n      assertThat(actualVersions).contains(keyTag);\n    }\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2629,"status":"B"},{"authorDate":"2019-11-26 01:29:53","commitOrder":1,"curCode":"  public void testRAVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> createServer(regionName, 0, true, 1, null));\n    server2.invoke(() -> createServer(regionName, 0, true, 1, null));\n    int serverPort3 = server3.invoke(() -> createServer(regionName, 0, true, 1, null));\n\n    client1.invoke(() -> createClient(regionName, hostName, new int[] {serverPort3}, 0, 59000, true,\n        true, true, true));\n\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n    });\n\n    List<String> expectedRAVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n\n      return versions;\n    });\n\n    \r\n    sleep(1000);\n\n    List<String> actualRAVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      RegionMap entries = ((InternalRegion) region).getRegionMap();\n      assertThat(entries.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualRAVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedRAVersions) {\n      assertThat(actualRAVersions).contains(keyTag);\n    }\n  }\n","date":"2019-11-26 01:29:53","endLine":2777,"groupId":"47394","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRAVersionsOnServersWithNotificationsOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/db/1a918af748ffd822bc92b189411267d25b1494.src","preCode":"  public void testRAVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> createServer(regionName, 0, true, 1, null));\n    server2.invoke(() -> createServer(regionName, 0, true, 1, null));\n    int serverPort3 = server3.invoke(() -> createServer(regionName, 0, true, 1, null));\n\n    client1.invoke(() -> createClient(regionName, hostName, new int[] {serverPort3}, 0, 59000, true,\n        true, true, true));\n\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n    });\n\n    List<String> expectedRAVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n\n      return versions;\n    });\n\n    \r\n    sleep(1000);\n\n    List<String> actualRAVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      RegionMap entries = ((InternalRegion) region).getRegionMap();\n      assertThat(entries.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualRAVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedRAVersions) {\n      assertThat(actualRAVersions).contains(keyTag);\n    }\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2706,"status":"B"}],"commitId":"030f8815aeedcc9f00d2698f2c655fee6adf3f22","commitMessage":"@@@GEODE-6818: Fix PutAllClientServerDistributedTest (#4363)\n\nOverhaul test and fix sources of flakiness (wait/notify and sleeps).\n\n* Rename PutAllCSDUnitTest\n* Replace object wait/notify with CountDownLatch(es)\n* Replace sleeps with Awaitility\n* Inline super-class and lots of methods\n* Remove unused or unnecessary code\n* Update deprecated API usage\n* Update to AssertJ and Awaitility\n* Improve tearDown to prevent NullPointerException\n* Add javadocs to testBug51725\n* Add await for client2 in testBug51725","date":"2019-11-26 01:29:53","modifiedFileCount":"5","status":"B","submitter":"Kirk Lund"},{"authorTime":"2020-01-30 04:41:57","codes":[{"authorDate":"2020-01-30 04:41:57","commitOrder":2,"curCode":"  public void testVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> createServer(regionName, true, 1));\n    server2.invoke(() -> createServer(regionName, true, 1));\n    int serverPort3 = server3.invoke(() -> createServer(regionName, true, 1));\n\n    \r\n    client1.invoke(() -> createClient(serverPort3, 0, 59000, true, true, true, true));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n    });\n\n    \r\n    List<String> expectedVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n      return versions;\n    });\n\n    \r\n    List<String> actualVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      \r\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      RegionMap entries = ((DiskRecoveryStore) region).getRegionMap();\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedVersions) {\n      assertThat(actualVersions).contains(keyTag);\n    }\n  }\n","date":"2020-01-30 04:41:57","endLine":2571,"groupId":"11398","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testVersionsOnServersWithNotificationsOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/00/ac64349886b9e41717c965e5315c60aa9269e4.src","preCode":"  public void testVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> createServer(regionName, 0, true, 1, null));\n    server2.invoke(() -> createServer(regionName, 0, true, 1, null));\n    int serverPort3 = server3.invoke(() -> createServer(regionName, 0, true, 1, null));\n\n    \r\n    client1.invoke(() -> createClient(regionName, hostName, new int[] {serverPort3}, 0, 59000, true,\n        true, true, true));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n    });\n\n    \r\n    List<String> expectedVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n\n      return versions;\n    });\n\n    \r\n    sleep(1000);\n\n    \r\n    List<String> actualVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      RegionMap entries = ((InternalRegion) region).getRegionMap();\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n\n      return versions;\n    });\n\n    assertThat(actualVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedVersions) {\n      assertThat(actualVersions).contains(keyTag);\n    }\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2504,"status":"M"},{"authorDate":"2020-01-30 04:41:57","commitOrder":2,"curCode":"  public void testRAVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> createServer(regionName, true, 1));\n    server2.invoke(() -> createServer(regionName, true, 1));\n    int serverPort3 = server3.invoke(() -> createServer(regionName, true, 1));\n\n    client1.invoke(() -> createClient(serverPort3, 0, 59000, true, true, true, true));\n\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n    });\n\n    List<String> expectedRAVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n      return versions;\n    });\n\n    List<String> actualRAVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      \r\n      RegionMap entries = ((DiskRecoveryStore) region).getRegionMap();\n\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n        assertThat(entries.size()).isEqualTo(ONE_HUNDRED * 2);\n      });\n\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualRAVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedRAVersions) {\n      assertThat(actualRAVersions).contains(keyTag);\n    }\n  }\n","date":"2020-01-30 04:41:57","endLine":2647,"groupId":"48021","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRAVersionsOnServersWithNotificationsOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/00/ac64349886b9e41717c965e5315c60aa9269e4.src","preCode":"  public void testRAVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> createServer(regionName, 0, true, 1, null));\n    server2.invoke(() -> createServer(regionName, 0, true, 1, null));\n    int serverPort3 = server3.invoke(() -> createServer(regionName, 0, true, 1, null));\n\n    client1.invoke(() -> createClient(regionName, hostName, new int[] {serverPort3}, 0, 59000, true,\n        true, true, true));\n\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n    });\n\n    List<String> expectedRAVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n\n      return versions;\n    });\n\n    \r\n    sleep(1000);\n\n    List<String> actualRAVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      RegionMap entries = ((InternalRegion) region).getRegionMap();\n      assertThat(entries.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualRAVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedRAVersions) {\n      assertThat(actualRAVersions).contains(keyTag);\n    }\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2577,"status":"M"}],"commitId":"fe1d4d1c4220a08f5b9cb49bb3bb3f10ea178197","commitMessage":"@@@GEODE-7650: Cleanup PutAllClientServerDistributedTest (#4644)\n\n","date":"2020-01-30 04:41:57","modifiedFileCount":"1","status":"M","submitter":"Kirk Lund"},{"authorTime":"2020-02-11 01:59:50","codes":[{"authorDate":"2020-02-11 01:59:50","commitOrder":3,"curCode":"  public void testVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort3 = server3.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled(true)\n        .prSingleHopEnabled(true)\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort3)\n        .subscriptionEnabled(true)\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n    });\n\n    \r\n    List<String> expectedVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n      return versions;\n    });\n\n    \r\n    List<String> actualVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      \r\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      RegionMap entries = ((DiskRecoveryStore) region).getRegionMap();\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedVersions) {\n      assertThat(actualVersions).contains(keyTag);\n    }\n  }\n","date":"2020-02-11 01:59:50","endLine":2886,"groupId":"11398","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testVersionsOnServersWithNotificationsOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/34/b1671d0359b58970c37f3f8d41c125dc812c58.src","preCode":"  public void testVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> createServer(regionName, true, 1));\n    server2.invoke(() -> createServer(regionName, true, 1));\n    int serverPort3 = server3.invoke(() -> createServer(regionName, true, 1));\n\n    \r\n    client1.invoke(() -> createClient(serverPort3, 0, 59000, true, true, true, true));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n    });\n\n    \r\n    List<String> expectedVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n      return versions;\n    });\n\n    \r\n    List<String> actualVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      \r\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      RegionMap entries = ((DiskRecoveryStore) region).getRegionMap();\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedVersions) {\n      assertThat(actualVersions).contains(keyTag);\n    }\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2804,"status":"M"},{"authorDate":"2020-02-11 01:59:50","commitOrder":3,"curCode":"  public void testRAVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort3 = server3.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled(true)\n        .prSingleHopEnabled(true)\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort3)\n        .subscriptionEnabled(true)\n        .create());\n\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n    });\n\n    List<String> expectedRAVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n      return versions;\n    });\n\n    List<String> actualRAVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      \r\n      RegionMap entries = ((DiskRecoveryStore) region).getRegionMap();\n\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n        assertThat(entries.size()).isEqualTo(ONE_HUNDRED * 2);\n      });\n\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualRAVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedRAVersions) {\n      assertThat(actualRAVersions).contains(keyTag);\n    }\n  }\n","date":"2020-02-11 01:59:50","endLine":2978,"groupId":"48021","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRAVersionsOnServersWithNotificationsOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/34/b1671d0359b58970c37f3f8d41c125dc812c58.src","preCode":"  public void testRAVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> createServer(regionName, true, 1));\n    server2.invoke(() -> createServer(regionName, true, 1));\n    int serverPort3 = server3.invoke(() -> createServer(regionName, true, 1));\n\n    client1.invoke(() -> createClient(serverPort3, 0, 59000, true, true, true, true));\n\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n    });\n\n    List<String> expectedRAVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n      return versions;\n    });\n\n    List<String> actualRAVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      \r\n      RegionMap entries = ((DiskRecoveryStore) region).getRegionMap();\n\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n        assertThat(entries.size()).isEqualTo(ONE_HUNDRED * 2);\n      });\n\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualRAVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedRAVersions) {\n      assertThat(actualRAVersions).contains(keyTag);\n    }\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2892,"status":"M"}],"commitId":"01d78cad59bb1526c15ca45c555210a311e123f6","commitMessage":"@@@GEODE-7650: Cleanup PutAllClientServerDistributedTest (#4680)\n\n","date":"2020-02-11 01:59:50","modifiedFileCount":"1","status":"M","submitter":"Kirk Lund"},{"authorTime":"2020-05-09 03:55:15","codes":[{"authorDate":"2020-05-09 03:55:15","commitOrder":4,"curCode":"  public void testVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort3 = server3.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled()\n        .prSingleHopEnabled(true)\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort3)\n        .subscriptionEnabled(true)\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n    });\n\n    \r\n    List<String> expectedVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n      return versions;\n    });\n\n    \r\n    List<String> actualVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      \r\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      RegionMap entries = ((DiskRecoveryStore) region).getRegionMap();\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedVersions) {\n      assertThat(actualVersions).contains(keyTag);\n    }\n  }\n","date":"2020-05-09 03:55:15","endLine":2872,"groupId":"11398","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testVersionsOnServersWithNotificationsOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/56/96fe93341bda1ea4aee3d8d2a56d46c733c7ad.src","preCode":"  public void testVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort3 = server3.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled(true)\n        .prSingleHopEnabled(true)\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort3)\n        .subscriptionEnabled(true)\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n    });\n\n    \r\n    List<String> expectedVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n      return versions;\n    });\n\n    \r\n    List<String> actualVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      \r\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      RegionMap entries = ((DiskRecoveryStore) region).getRegionMap();\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedVersions) {\n      assertThat(actualVersions).contains(keyTag);\n    }\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2790,"status":"M"},{"authorDate":"2020-05-09 03:55:15","commitOrder":4,"curCode":"  public void testRAVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort3 = server3.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled()\n        .prSingleHopEnabled(true)\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort3)\n        .subscriptionEnabled(true)\n        .create());\n\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n    });\n\n    List<String> expectedRAVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n      return versions;\n    });\n\n    List<String> actualRAVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      \r\n      RegionMap entries = ((DiskRecoveryStore) region).getRegionMap();\n\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n        assertThat(entries.size()).isEqualTo(ONE_HUNDRED * 2);\n      });\n\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualRAVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedRAVersions) {\n      assertThat(actualRAVersions).contains(keyTag);\n    }\n  }\n","date":"2020-05-09 03:55:15","endLine":2964,"groupId":"48021","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRAVersionsOnServersWithNotificationsOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/56/96fe93341bda1ea4aee3d8d2a56d46c733c7ad.src","preCode":"  public void testRAVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort3 = server3.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled(true)\n        .prSingleHopEnabled(true)\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort3)\n        .subscriptionEnabled(true)\n        .create());\n\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n    });\n\n    List<String> expectedRAVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n      return versions;\n    });\n\n    List<String> actualRAVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      \r\n      RegionMap entries = ((DiskRecoveryStore) region).getRegionMap();\n\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n        assertThat(entries.size()).isEqualTo(ONE_HUNDRED * 2);\n      });\n\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualRAVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedRAVersions) {\n      assertThat(actualRAVersions).contains(keyTag);\n    }\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2878,"status":"M"}],"commitId":"a1d0c74d72c1daf87e7b854f7635fc6eb92ccd77","commitMessage":"@@@Geode 7812: Changes to PutAllClientServerDistributionTest (#5076)\n\nFixed issues causing testEventIdOutOfOrderInPartitionRegionSingleHop to fail\n\nCo-authored-by: Mark Hanson <agingade@vmware.com>","date":"2020-05-09 03:55:15","modifiedFileCount":"2","status":"M","submitter":"mhansonp"},{"authorTime":"2021-06-12 00:37:39","codes":[{"authorDate":"2021-06-12 00:37:39","commitOrder":5,"curCode":"  public void testVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort3 = server3.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .serverPorts(serverPort3)\n        .subscriptionEnabled(true)\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n    });\n\n    \r\n    List<String> expectedVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n      return versions;\n    });\n\n    \r\n    List<String> actualVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      \r\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      RegionMap entries = ((DiskRecoveryStore) region).getRegionMap();\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedVersions) {\n      assertThat(actualVersions).contains(keyTag);\n    }\n  }\n","date":"2021-06-12 00:37:39","endLine":2973,"groupId":"10404","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testVersionsOnServersWithNotificationsOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/67/423c8e1a111bbc232743747f5bc1987b447992.src","preCode":"  public void testVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort3 = server3.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled()\n        .prSingleHopEnabled(true)\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort3)\n        .subscriptionEnabled(true)\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n    });\n\n    \r\n    List<String> expectedVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n      return versions;\n    });\n\n    \r\n    List<String> actualVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      \r\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      RegionMap entries = ((DiskRecoveryStore) region).getRegionMap();\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedVersions) {\n      assertThat(actualVersions).contains(keyTag);\n    }\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2895,"status":"M"},{"authorDate":"2021-06-12 00:37:39","commitOrder":5,"curCode":"  public void testRAVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort3 = server3.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .serverPorts(serverPort3)\n        .subscriptionEnabled(true)\n        .create());\n\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n    });\n\n    List<String> expectedRAVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n      return versions;\n    });\n\n    List<String> actualRAVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      \r\n      RegionMap entries = ((DiskRecoveryStore) region).getRegionMap();\n\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n        assertThat(entries.size()).isEqualTo(ONE_HUNDRED * 2);\n      });\n\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualRAVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedRAVersions) {\n      assertThat(actualRAVersions).contains(keyTag);\n    }\n  }\n","date":"2021-06-12 00:37:39","endLine":3061,"groupId":"10404","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRAVersionsOnServersWithNotificationsOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/67/423c8e1a111bbc232743747f5bc1987b447992.src","preCode":"  public void testRAVersionsOnServersWithNotificationsOnly() {\n    VM server3 = client2;\n\n    \r\n    server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort3 = server3.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled()\n        .prSingleHopEnabled(true)\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort3)\n        .subscriptionEnabled(true)\n        .create());\n\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      region.registerInterest(\"ALL_KEYS\");\n    });\n\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      doPutAll(region, \"key-\", ONE_HUNDRED * 2);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n    });\n\n    List<String> expectedRAVersions = server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      PartitionedRegionDataStore dataStore = ((PartitionedRegion) region).getDataStore();\n      Set<BucketRegion> buckets = dataStore.getAllLocalPrimaryBucketRegions();\n\n      List<String> versions = new ArrayList<>();\n      for (BucketRegion bucketRegion : buckets) {\n        RegionMap entries = bucketRegion.entries;\n        for (Object key : entries.keySet()) {\n          RegionEntry regionEntry = entries.getEntry(key);\n          VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n          versions.add(key + \" \" + tag);\n        }\n      }\n      return versions;\n    });\n\n    List<String> actualRAVersions = client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      \r\n      RegionMap entries = ((DiskRecoveryStore) region).getRegionMap();\n\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n        assertThat(entries.size()).isEqualTo(ONE_HUNDRED * 2);\n      });\n\n      List<String> versions = new ArrayList<>();\n      for (Object key : entries.keySet()) {\n        RegionEntry regionEntry = entries.getEntry(key);\n        VersionTag<?> tag = regionEntry.getVersionStamp().asVersionTag();\n        tag.setMemberID(null);\n        versions.add(key + \" \" + tag);\n      }\n      return versions;\n    });\n\n    assertThat(actualRAVersions).hasSize(ONE_HUNDRED * 2);\n\n    for (String keyTag : expectedRAVersions) {\n      assertThat(actualRAVersions).contains(keyTag);\n    }\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2979,"status":"M"}],"commitId":"5df584bf4e9504e667ac70dd551a310c4921b53d","commitMessage":"@@@GEODE-9103: Fix failures in PutAllClientServerDistributedTest (#6542)\n\nPrevent ServerConnectivityExceptions when test encounters long GCs or\nslow CPUs.\n\nAdd test-only system property to AbstractCacheServer for\nmaximumTimeBetweenPings.\n\nUse system property to set maximumTimeBetweenPings to GeodeAwaitility\ntimeout.\n\nUse GeodeAwaitility timeout for client pool readTimeout.\n\nRemove unnecessary client pool settings within each test.\n\nInline getCause within Throwable assertions.\n\nFixes GEODE-8528.  GEODE-9103.  GEODE-9242.  GEODE-9296.","date":"2021-06-12 00:37:39","modifiedFileCount":"2","status":"M","submitter":"Kirk Lund"}]
