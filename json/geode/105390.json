[{"authorTime":"2019-03-19 08:29:56","codes":[{"authorDate":"2019-03-26 21:00:24","commitOrder":4,"curCode":"  private File getFunctionJar() throws IOException {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(),\n            \"/ClusterConfigServerRestartWithJarDeployFunction.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File functionJar = new File(temporaryFolder.newFolder(), \"output.jar\");\n    jarBuilder.buildJar(functionJar, new File(filePath));\n\n    return functionJar;\n  }\n","date":"2019-03-26 21:00:24","endLine":98,"groupId":"41149","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getFunctionJar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b8/3e4847904b33bd0ce3b4f82d53261bb239ad30.src","preCode":"  private File getFunctionJar() throws IOException {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(),\n            \"/ClusterConfigServerRestartWithJarDeployFunction.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File functionJar = new File(temporaryFolder.newFolder(), \"output.jar\");\n    jarBuilder.buildJar(functionJar, new File(filePath));\n\n    return functionJar;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/configuration/ClusterConfigServerRestartWithJarDeployDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"},{"authorDate":"2019-03-19 08:29:56","commitOrder":4,"curCode":"  public void clientCreatesRegionUsingClusterManagementService() throws Exception {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(), \"/ManagementClientCreateRegion.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File outputJar = new File(tempDir.getRoot(), \"output.jar\");\n    jarBuilder.buildJar(outputJar, new File(filePath));\n\n    GfshExecution startCluster =\n        GfshScript.of(\"start locator \" + getSslParameters(),\n            \"start server --locators=localhost[10334]\")\n            .withName(\"startCluster\").execute(gfsh);\n\n\n    assertThat(startCluster.getProcess().exitValue())\n        .as(\"Cluster did not start correctly\").isEqualTo(0);\n\n    Process process = launchClientProcess(outputJar);\n\n    boolean exited = process.waitFor(10, TimeUnit.SECONDS);\n    assertThat(exited).as(\"Process did not exit within 10 seconds\").isTrue();\n    assertThat(process.exitValue()).as(\"Process did not exit with 0 return code\").isEqualTo(0);\n\n    GfshExecution listRegionsResult = GfshScript.of(\"connect\", \"list regions\")\n        .withName(\"listRegions\").execute(gfsh);\n    assertThat(listRegionsResult.getOutputText()).contains(\"REGION1\");\n  }\n","date":"2019-03-19 08:29:56","endLine":111,"groupId":"49839","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"clientCreatesRegionUsingClusterManagementService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/21/7bd40a809729350c2dca00625214642ac8321a.src","preCode":"  public void clientCreatesRegionUsingClusterManagementService() throws Exception {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(), \"/ManagementClientCreateRegion.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File outputJar = new File(tempDir.getRoot(), \"output.jar\");\n    jarBuilder.buildJar(outputJar, new File(filePath));\n\n    GfshExecution startCluster =\n        GfshScript.of(\"start locator \" + getSslParameters(),\n            \"start server --locators=localhost[10334]\")\n            .withName(\"startCluster\").execute(gfsh);\n\n\n    assertThat(startCluster.getProcess().exitValue())\n        .as(\"Cluster did not start correctly\").isEqualTo(0);\n\n    Process process = launchClientProcess(outputJar);\n\n    boolean exited = process.waitFor(10, TimeUnit.SECONDS);\n    assertThat(exited).as(\"Process did not exit within 10 seconds\").isTrue();\n    assertThat(process.exitValue()).as(\"Process did not exit with 0 return code\").isEqualTo(0);\n\n    GfshExecution listRegionsResult = GfshScript.of(\"connect\", \"list regions\")\n        .withName(\"listRegions\").execute(gfsh);\n    assertThat(listRegionsResult.getOutputText()).contains(\"REGION1\");\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/rest/StandaloneClientManagementAPIAcceptanceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"NB"}],"commitId":"17a949b9379a680af066b0a249ad475014f86331","commitMessage":"@@@GEODE-6559: PdxInstance.getObject() is using class from older jar in case of Reconnect (#3353)\n\n- TypeRegistry needs to be cleared during reconnect\n- Fix ServerStarterRule to not blindly disable some PDX attributes on server start\n- Currently configuring PDX.  via gfsh.  does not work correctly in\n  conjunction with this rule.\n\nAuthored-by: Jens Deppe <jdeppe@pivotal.io>\n","date":"2019-03-26 21:00:24","modifiedFileCount":"8","status":"M","submitter":"Jens Deppe"},{"authorTime":"2019-03-27 02:40:43","codes":[{"authorDate":"2019-03-26 21:00:24","commitOrder":5,"curCode":"  private File getFunctionJar() throws IOException {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(),\n            \"/ClusterConfigServerRestartWithJarDeployFunction.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File functionJar = new File(temporaryFolder.newFolder(), \"output.jar\");\n    jarBuilder.buildJar(functionJar, new File(filePath));\n\n    return functionJar;\n  }\n","date":"2019-03-26 21:00:24","endLine":98,"groupId":"41149","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getFunctionJar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b8/3e4847904b33bd0ce3b4f82d53261bb239ad30.src","preCode":"  private File getFunctionJar() throws IOException {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(),\n            \"/ClusterConfigServerRestartWithJarDeployFunction.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File functionJar = new File(temporaryFolder.newFolder(), \"output.jar\");\n    jarBuilder.buildJar(functionJar, new File(filePath));\n\n    return functionJar;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/configuration/ClusterConfigServerRestartWithJarDeployDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2019-03-27 02:40:43","commitOrder":5,"curCode":"  public void clientCreatesRegionUsingClusterManagementService() throws Exception {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(), \"/ManagementClientTestCreateRegion.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File outputJar = new File(tempDir.getRoot(), \"output.jar\");\n    jarBuilder.buildJar(outputJar, new File(filePath));\n\n    GfshExecution startCluster =\n        GfshScript.of(\"start locator \" + getSslParameters(),\n            \"start server --locators=localhost[10334]\")\n            .withName(\"startCluster\").execute(gfsh);\n\n\n    assertThat(startCluster.getProcess().exitValue())\n        .as(\"Cluster did not start correctly\").isEqualTo(0);\n\n    Process process = launchClientProcess(outputJar);\n\n    boolean exited = process.waitFor(10, TimeUnit.SECONDS);\n    assertThat(exited).as(\"Process did not exit within 10 seconds\").isTrue();\n    assertThat(process.exitValue()).as(\"Process did not exit with 0 return code\").isEqualTo(0);\n\n    GfshExecution listRegionsResult = GfshScript.of(\"connect\", \"list regions\")\n        .withName(\"listRegions\").execute(gfsh);\n    assertThat(listRegionsResult.getOutputText()).contains(\"REGION1\");\n  }\n","date":"2019-03-27 02:40:43","endLine":111,"groupId":"49839","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"clientCreatesRegionUsingClusterManagementService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/92/b724c61d51648142733c8a038c3405f345861a.src","preCode":"  public void clientCreatesRegionUsingClusterManagementService() throws Exception {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(), \"/ManagementClientCreateRegion.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File outputJar = new File(tempDir.getRoot(), \"output.jar\");\n    jarBuilder.buildJar(outputJar, new File(filePath));\n\n    GfshExecution startCluster =\n        GfshScript.of(\"start locator \" + getSslParameters(),\n            \"start server --locators=localhost[10334]\")\n            .withName(\"startCluster\").execute(gfsh);\n\n\n    assertThat(startCluster.getProcess().exitValue())\n        .as(\"Cluster did not start correctly\").isEqualTo(0);\n\n    Process process = launchClientProcess(outputJar);\n\n    boolean exited = process.waitFor(10, TimeUnit.SECONDS);\n    assertThat(exited).as(\"Process did not exit within 10 seconds\").isTrue();\n    assertThat(process.exitValue()).as(\"Process did not exit with 0 return code\").isEqualTo(0);\n\n    GfshExecution listRegionsResult = GfshScript.of(\"connect\", \"list regions\")\n        .withName(\"listRegions\").execute(gfsh);\n    assertThat(listRegionsResult.getOutputText()).contains(\"REGION1\");\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/rest/StandaloneClientManagementAPIAcceptanceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"60f4f8c9aa1eb97b2ae1d28b22828713581141a6","commitMessage":"@@@GEODE-4806: Refactor SimpleTestSecurityManager usages and remove class. (#3261)\n\n* ExtendsFunctionAdapter was present in both integrationTest and\n  distributedTest resource trees. Removing one caused tests to fail.\n  Moving the class into geode-junit's resources seems to have resolved\n  the issue.\n\nCo-authored-by: Sean Goller <sgoller@pivotal.io>\nCo-authored-by: Helena Bales <hbales@pivotal.io>\n","date":"2019-03-27 02:40:43","modifiedFileCount":"45","status":"M","submitter":"Sean Goller"},{"authorTime":"2019-04-22 23:10:41","codes":[{"authorDate":"2019-03-26 21:00:24","commitOrder":6,"curCode":"  private File getFunctionJar() throws IOException {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(),\n            \"/ClusterConfigServerRestartWithJarDeployFunction.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File functionJar = new File(temporaryFolder.newFolder(), \"output.jar\");\n    jarBuilder.buildJar(functionJar, new File(filePath));\n\n    return functionJar;\n  }\n","date":"2019-03-26 21:00:24","endLine":98,"groupId":"41149","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getFunctionJar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b8/3e4847904b33bd0ce3b4f82d53261bb239ad30.src","preCode":"  private File getFunctionJar() throws IOException {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(),\n            \"/ClusterConfigServerRestartWithJarDeployFunction.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File functionJar = new File(temporaryFolder.newFolder(), \"output.jar\");\n    jarBuilder.buildJar(functionJar, new File(filePath));\n\n    return functionJar;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/configuration/ClusterConfigServerRestartWithJarDeployDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2019-04-22 23:10:41","commitOrder":6,"curCode":"  public void clientCreatesRegionUsingClusterManagementService() throws Exception {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(), \"/ManagementClientTestCreateRegion.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File outputJar = new File(tempDir.getRoot(), \"output.jar\");\n    jarBuilder.buildJar(outputJar, new File(filePath));\n\n    int[] availablePorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n    int locatorPort = availablePorts[0];\n    int httpPort = availablePorts[1];\n    GfshExecution startCluster =\n        GfshScript.of(String.format(\"start locator --port=%d --J=-Dgemfire.http-service-port=%d %s\",\n            locatorPort,\n            httpPort,\n            getSslParameters()),\n            String.format(\"start server --locators=localhost[%d] --server-port=0\", locatorPort))\n            .withName(\"startCluster\").execute(gfsh);\n\n\n    assertThat(startCluster.getProcess().exitValue())\n        .as(\"Cluster did not start correctly\").isEqualTo(0);\n\n    Process process = launchClientProcess(outputJar, httpPort);\n\n    boolean exited = process.waitFor(10, TimeUnit.SECONDS);\n    assertThat(exited).as(\"Process did not exit within 10 seconds\").isTrue();\n    assertThat(process.exitValue()).as(\"Process did not exit with 0 return code\").isEqualTo(0);\n\n    GfshExecution listRegionsResult = GfshScript\n        .of(String.format(\"connect --locator=localhost[%d]\", locatorPort), \"list regions\")\n        .withName(\"listRegions\").execute(gfsh);\n    assertThat(listRegionsResult.getOutputText()).contains(\"REGION1\");\n  }\n","date":"2019-04-22 23:10:41","endLine":119,"groupId":"18808","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"clientCreatesRegionUsingClusterManagementService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6a/baae52d96397b65944a7b64bd015dadbd65c1c.src","preCode":"  public void clientCreatesRegionUsingClusterManagementService() throws Exception {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(), \"/ManagementClientTestCreateRegion.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File outputJar = new File(tempDir.getRoot(), \"output.jar\");\n    jarBuilder.buildJar(outputJar, new File(filePath));\n\n    GfshExecution startCluster =\n        GfshScript.of(\"start locator \" + getSslParameters(),\n            \"start server --locators=localhost[10334]\")\n            .withName(\"startCluster\").execute(gfsh);\n\n\n    assertThat(startCluster.getProcess().exitValue())\n        .as(\"Cluster did not start correctly\").isEqualTo(0);\n\n    Process process = launchClientProcess(outputJar);\n\n    boolean exited = process.waitFor(10, TimeUnit.SECONDS);\n    assertThat(exited).as(\"Process did not exit within 10 seconds\").isTrue();\n    assertThat(process.exitValue()).as(\"Process did not exit with 0 return code\").isEqualTo(0);\n\n    GfshExecution listRegionsResult = GfshScript.of(\"connect\", \"list regions\")\n        .withName(\"listRegions\").execute(gfsh);\n    assertThat(listRegionsResult.getOutputText()).contains(\"REGION1\");\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/rest/StandaloneClientManagementAPIAcceptanceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"0adb400dd27180760342e7d69b431b14de48ada8","commitMessage":"@@@GEODE-6679: Use ephemeral ports in StandaloneClientManagementAPIAcceptanceTest (#3485)\n\n","date":"2019-04-22 23:10:41","modifiedFileCount":"2","status":"M","submitter":"Jens Deppe"},{"authorTime":"2019-05-03 00:34:02","codes":[{"authorDate":"2019-03-26 21:00:24","commitOrder":7,"curCode":"  private File getFunctionJar() throws IOException {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(),\n            \"/ClusterConfigServerRestartWithJarDeployFunction.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File functionJar = new File(temporaryFolder.newFolder(), \"output.jar\");\n    jarBuilder.buildJar(functionJar, new File(filePath));\n\n    return functionJar;\n  }\n","date":"2019-03-26 21:00:24","endLine":98,"groupId":"41149","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getFunctionJar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b8/3e4847904b33bd0ce3b4f82d53261bb239ad30.src","preCode":"  private File getFunctionJar() throws IOException {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(),\n            \"/ClusterConfigServerRestartWithJarDeployFunction.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File functionJar = new File(temporaryFolder.newFolder(), \"output.jar\");\n    jarBuilder.buildJar(functionJar, new File(filePath));\n\n    return functionJar;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/configuration/ClusterConfigServerRestartWithJarDeployDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2019-05-03 00:34:02","commitOrder":7,"curCode":"  public void clientCreatesRegionUsingClusterManagementService() throws Exception {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(), \"/ManagementClientCreateRegion.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File outputJar = new File(tempDir.getRoot(), \"output.jar\");\n    jarBuilder.buildJar(outputJar, new File(filePath));\n\n    int[] availablePorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n    int locatorPort = availablePorts[0];\n    int httpPort = availablePorts[1];\n    GfshExecution startCluster =\n        GfshScript.of(String.format(\"start locator --port=%d --J=-Dgemfire.http-service-port=%d %s\",\n            locatorPort,\n            httpPort,\n            getSslParameters()),\n            String.format(\"start server --locators=localhost[%d] --server-port=0\", locatorPort))\n            .withName(\"startCluster\").execute(gfsh);\n\n\n    assertThat(startCluster.getProcess().exitValue())\n        .as(\"Cluster did not start correctly\").isEqualTo(0);\n\n    Process process = launchClientProcess(outputJar, httpPort);\n\n    boolean exited = process.waitFor(10, TimeUnit.SECONDS);\n    assertThat(exited).as(\"Process did not exit within 10 seconds\").isTrue();\n    assertThat(process.exitValue()).as(\"Process did not exit with 0 return code\").isEqualTo(0);\n\n    GfshExecution listRegionsResult = GfshScript\n        .of(String.format(\"connect --locator=localhost[%d]\", locatorPort), \"list regions\")\n        .withName(\"listRegions\").execute(gfsh);\n    assertThat(listRegionsResult.getOutputText()).contains(\"REGION1\");\n  }\n","date":"2019-05-03 00:34:02","endLine":119,"groupId":"18808","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"clientCreatesRegionUsingClusterManagementService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/dd/d8e9be3b4cea3d2c2be5c2975e1f4fb9f6d065.src","preCode":"  public void clientCreatesRegionUsingClusterManagementService() throws Exception {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(), \"/ManagementClientTestCreateRegion.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File outputJar = new File(tempDir.getRoot(), \"output.jar\");\n    jarBuilder.buildJar(outputJar, new File(filePath));\n\n    int[] availablePorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n    int locatorPort = availablePorts[0];\n    int httpPort = availablePorts[1];\n    GfshExecution startCluster =\n        GfshScript.of(String.format(\"start locator --port=%d --J=-Dgemfire.http-service-port=%d %s\",\n            locatorPort,\n            httpPort,\n            getSslParameters()),\n            String.format(\"start server --locators=localhost[%d] --server-port=0\", locatorPort))\n            .withName(\"startCluster\").execute(gfsh);\n\n\n    assertThat(startCluster.getProcess().exitValue())\n        .as(\"Cluster did not start correctly\").isEqualTo(0);\n\n    Process process = launchClientProcess(outputJar, httpPort);\n\n    boolean exited = process.waitFor(10, TimeUnit.SECONDS);\n    assertThat(exited).as(\"Process did not exit within 10 seconds\").isTrue();\n    assertThat(process.exitValue()).as(\"Process did not exit with 0 return code\").isEqualTo(0);\n\n    GfshExecution listRegionsResult = GfshScript\n        .of(String.format(\"connect --locator=localhost[%d]\", locatorPort), \"list regions\")\n        .withName(\"listRegions\").execute(gfsh);\n    assertThat(listRegionsResult.getOutputText()).contains(\"REGION1\");\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/rest/StandaloneClientManagementAPIAcceptanceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"22659ee5c0c14f2e963047c2cab73a6910620ac5","commitMessage":"@@@GEODE-6728: have getResult return specified type (#3532)\n\n\n","date":"2019-05-03 00:34:02","modifiedFileCount":"7","status":"M","submitter":"jinmeiliao"},{"authorTime":"2019-05-03 02:00:10","codes":[{"authorDate":"2019-05-03 02:00:10","commitOrder":8,"curCode":"  private File getFunctionJar() throws IOException {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        createTempFileFromResource(this.getClass(),\n            \"/ClusterConfigServerRestartWithJarDeployFunction.java\").getAbsolutePath();\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File functionJar = new File(temporaryFolder.newFolder(), \"output.jar\");\n    jarBuilder.buildJar(functionJar, new File(filePath));\n\n    return functionJar;\n  }\n","date":"2019-05-08 00:21:55","endLine":98,"groupId":"17039","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getFunctionJar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/75/cbf459a6713e069cb96ed67523029c58e7b271.src","preCode":"  private File getFunctionJar() throws IOException {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(),\n            \"/ClusterConfigServerRestartWithJarDeployFunction.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File functionJar = new File(temporaryFolder.newFolder(), \"output.jar\");\n    jarBuilder.buildJar(functionJar, new File(filePath));\n\n    return functionJar;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/configuration/ClusterConfigServerRestartWithJarDeployDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2019-05-03 02:00:10","commitOrder":8,"curCode":"  public void clientCreatesRegionUsingClusterManagementService() throws Exception {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        createTempFileFromResource(this.getClass(), \"/ManagementClientCreateRegion.java\")\n            .getAbsolutePath();\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File outputJar = new File(tempDir.getRoot(), \"output.jar\");\n    jarBuilder.buildJar(outputJar, new File(filePath));\n\n    int[] availablePorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n    int locatorPort = availablePorts[0];\n    int httpPort = availablePorts[1];\n    GfshExecution startCluster =\n        GfshScript.of(String.format(\"start locator --port=%d --J=-Dgemfire.http-service-port=%d %s\",\n            locatorPort,\n            httpPort,\n            getSslParameters()),\n            String.format(\"start server --locators=localhost[%d] --server-port=0\", locatorPort))\n            .withName(\"startCluster\").execute(gfsh);\n\n\n    assertThat(startCluster.getProcess().exitValue())\n        .as(\"Cluster did not start correctly\").isEqualTo(0);\n\n    Process process = launchClientProcess(outputJar, httpPort);\n\n    boolean exited = process.waitFor(10, TimeUnit.SECONDS);\n    assertThat(exited).as(\"Process did not exit within 10 seconds\").isTrue();\n    assertThat(process.exitValue()).as(\"Process did not exit with 0 return code\").isEqualTo(0);\n\n    GfshExecution listRegionsResult = GfshScript\n        .of(String.format(\"connect --locator=localhost[%d]\", locatorPort), \"list regions\")\n        .withName(\"listRegions\").execute(gfsh);\n    assertThat(listRegionsResult.getOutputText()).contains(\"REGION1\");\n  }\n","date":"2019-05-08 00:21:55","endLine":121,"groupId":"18808","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"clientCreatesRegionUsingClusterManagementService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/98/32c589764feb80c0c165fb4f77d185a681c1fc.src","preCode":"  public void clientCreatesRegionUsingClusterManagementService() throws Exception {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        TestUtil.getResourcePath(this.getClass(), \"/ManagementClientCreateRegion.java\");\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File outputJar = new File(tempDir.getRoot(), \"output.jar\");\n    jarBuilder.buildJar(outputJar, new File(filePath));\n\n    int[] availablePorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n    int locatorPort = availablePorts[0];\n    int httpPort = availablePorts[1];\n    GfshExecution startCluster =\n        GfshScript.of(String.format(\"start locator --port=%d --J=-Dgemfire.http-service-port=%d %s\",\n            locatorPort,\n            httpPort,\n            getSslParameters()),\n            String.format(\"start server --locators=localhost[%d] --server-port=0\", locatorPort))\n            .withName(\"startCluster\").execute(gfsh);\n\n\n    assertThat(startCluster.getProcess().exitValue())\n        .as(\"Cluster did not start correctly\").isEqualTo(0);\n\n    Process process = launchClientProcess(outputJar, httpPort);\n\n    boolean exited = process.waitFor(10, TimeUnit.SECONDS);\n    assertThat(exited).as(\"Process did not exit within 10 seconds\").isTrue();\n    assertThat(process.exitValue()).as(\"Process did not exit with 0 return code\").isEqualTo(0);\n\n    GfshExecution listRegionsResult = GfshScript\n        .of(String.format(\"connect --locator=localhost[%d]\", locatorPort), \"list regions\")\n        .withName(\"listRegions\").execute(gfsh);\n    assertThat(listRegionsResult.getOutputText()).contains(\"REGION1\");\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/rest/StandaloneClientManagementAPIAcceptanceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"2a8259fd873ef0d5000cfe4bb2e3f513b61510fc","commitMessage":"@@@GEODE-6731: Make TestUtil delegate to ResourceUtils\n\n* Make TestUtil delegate to ResourceUtils.\n* Add deprecation annotations and javadocs.\n* Use static import for all uses of ResourceUtils.\n","date":"2019-05-08 00:21:55","modifiedFileCount":"75","status":"M","submitter":"Kirk Lund"},{"authorTime":"2019-05-21 09:02:24","codes":[{"authorDate":"2019-05-03 02:00:10","commitOrder":9,"curCode":"  private File getFunctionJar() throws IOException {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        createTempFileFromResource(this.getClass(),\n            \"/ClusterConfigServerRestartWithJarDeployFunction.java\").getAbsolutePath();\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File functionJar = new File(temporaryFolder.newFolder(), \"output.jar\");\n    jarBuilder.buildJar(functionJar, new File(filePath));\n\n    return functionJar;\n  }\n","date":"2019-05-08 00:21:55","endLine":98,"groupId":"17039","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getFunctionJar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/75/cbf459a6713e069cb96ed67523029c58e7b271.src","preCode":"  private File getFunctionJar() throws IOException {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        createTempFileFromResource(this.getClass(),\n            \"/ClusterConfigServerRestartWithJarDeployFunction.java\").getAbsolutePath();\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File functionJar = new File(temporaryFolder.newFolder(), \"output.jar\");\n    jarBuilder.buildJar(functionJar, new File(filePath));\n\n    return functionJar;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/configuration/ClusterConfigServerRestartWithJarDeployDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2019-05-21 09:02:24","commitOrder":9,"curCode":"  public void clientCreatesRegionUsingClusterManagementService() throws Exception {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        createTempFileFromResource(this.getClass(), \"/ManagementClientCreateRegion.java\")\n            .getAbsolutePath();\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File outputJar = new File(tempDir.getRoot(), \"output.jar\");\n    jarBuilder.buildJar(outputJar, new File(filePath));\n\n    int[] availablePorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n    int locatorPort = availablePorts[0];\n    int httpPort = availablePorts[1];\n    GfshExecution startCluster =\n        GfshScript.of(String.format(\"start locator --port=%d --J=-Dgemfire.http-service-port=%d %s\",\n            locatorPort,\n            httpPort,\n            getSslParameters()),\n            String.format(\"start server --locators=localhost[%d] --server-port=0\", locatorPort))\n            .withName(\"startCluster\").execute(gfsh);\n\n\n    assertThat(startCluster.getProcess().exitValue())\n        .as(\"Cluster did not start correctly\").isEqualTo(0);\n\n    Process process = launchClientProcess(outputJar, httpPort);\n\n    boolean exited = process.waitFor(30, TimeUnit.SECONDS);\n    assertThat(exited).as(\"Process did not exit within 10 seconds\").isTrue();\n    assertThat(process.exitValue()).as(\"Process did not exit with 0 return code\").isEqualTo(0);\n\n    GfshExecution listRegionsResult = GfshScript\n        .of(String.format(\"connect --locator=localhost[%d]\", locatorPort), \"list regions\")\n        .withName(\"listRegions\").execute(gfsh);\n    assertThat(listRegionsResult.getOutputText()).contains(\"REGION1\");\n  }\n","date":"2019-05-21 09:02:43","endLine":119,"groupId":"18808","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"clientCreatesRegionUsingClusterManagementService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a4/8e17ff996c3200bc11297914344d3be84adf25.src","preCode":"  public void clientCreatesRegionUsingClusterManagementService() throws Exception {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        createTempFileFromResource(this.getClass(), \"/ManagementClientCreateRegion.java\")\n            .getAbsolutePath();\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File outputJar = new File(tempDir.getRoot(), \"output.jar\");\n    jarBuilder.buildJar(outputJar, new File(filePath));\n\n    int[] availablePorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n    int locatorPort = availablePorts[0];\n    int httpPort = availablePorts[1];\n    GfshExecution startCluster =\n        GfshScript.of(String.format(\"start locator --port=%d --J=-Dgemfire.http-service-port=%d %s\",\n            locatorPort,\n            httpPort,\n            getSslParameters()),\n            String.format(\"start server --locators=localhost[%d] --server-port=0\", locatorPort))\n            .withName(\"startCluster\").execute(gfsh);\n\n\n    assertThat(startCluster.getProcess().exitValue())\n        .as(\"Cluster did not start correctly\").isEqualTo(0);\n\n    Process process = launchClientProcess(outputJar, httpPort);\n\n    boolean exited = process.waitFor(10, TimeUnit.SECONDS);\n    assertThat(exited).as(\"Process did not exit within 10 seconds\").isTrue();\n    assertThat(process.exitValue()).as(\"Process did not exit with 0 return code\").isEqualTo(0);\n\n    GfshExecution listRegionsResult = GfshScript\n        .of(String.format(\"connect --locator=localhost[%d]\", locatorPort), \"list regions\")\n        .withName(\"listRegions\").execute(gfsh);\n    assertThat(listRegionsResult.getOutputText()).contains(\"REGION1\");\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/rest/StandaloneClientManagementAPIAcceptanceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"6d1e5b08a74b784786751b1512d6a654fa63c1f1","commitMessage":"@@@GEODE-6784 increase test timeout from 10->30s\n\nsuccess case for http is observed to sometime take 9.8 seconds on Windows.  so 10s timeout seems too short esp for the https case.  which is the one that usually fails\n","date":"2019-05-21 09:02:43","modifiedFileCount":"1","status":"M","submitter":"Owen Nichols"},{"authorTime":"2019-10-12 07:31:43","codes":[{"authorDate":"2019-05-03 02:00:10","commitOrder":10,"curCode":"  private File getFunctionJar() throws IOException {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        createTempFileFromResource(this.getClass(),\n            \"/ClusterConfigServerRestartWithJarDeployFunction.java\").getAbsolutePath();\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File functionJar = new File(temporaryFolder.newFolder(), \"output.jar\");\n    jarBuilder.buildJar(functionJar, new File(filePath));\n\n    return functionJar;\n  }\n","date":"2019-05-08 00:21:55","endLine":98,"groupId":"105390","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getFunctionJar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/75/cbf459a6713e069cb96ed67523029c58e7b271.src","preCode":"  private File getFunctionJar() throws IOException {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        createTempFileFromResource(this.getClass(),\n            \"/ClusterConfigServerRestartWithJarDeployFunction.java\").getAbsolutePath();\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File functionJar = new File(temporaryFolder.newFolder(), \"output.jar\");\n    jarBuilder.buildJar(functionJar, new File(filePath));\n\n    return functionJar;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/internal/configuration/ClusterConfigServerRestartWithJarDeployDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2019-10-12 07:31:43","commitOrder":10,"curCode":"  public void clientCreatesRegionUsingClusterManagementService() throws Exception {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        createTempFileFromResource(this.getClass(), \"/ManagementClientCreateRegion.java\")\n            .getAbsolutePath();\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File outputJar = new File(tempDir.getRoot(), \"output.jar\");\n    jarBuilder.buildJar(outputJar, new File(filePath));\n\n    int[] availablePorts = AvailablePortHelper.getRandomAvailableTCPPorts(3);\n    int locatorPort = availablePorts[0];\n    int httpPort = availablePorts[1];\n    int jmxPort = availablePorts[2];\n    GfshExecution startCluster =\n        GfshScript.of(\n            String.format(\n                \"start locator --port=%d --http-service-port=%d --J=-Dgemfire.JMX_MANAGER_PORT=%d %s\",\n                locatorPort, httpPort, jmxPort, getSslParameters()),\n            String.format(\"start server --locators=localhost[%d] --server-port=0\", locatorPort))\n            .withName(\"startCluster\").execute(gfsh);\n\n\n    assertThat(startCluster.getProcess().exitValue())\n        .as(\"Cluster did not start correctly\").isEqualTo(0);\n\n    Process process = launchClientProcess(outputJar, httpPort);\n\n    boolean exited = process.waitFor(30, TimeUnit.SECONDS);\n    assertThat(exited).as(\"Process did not exit within 10 seconds\").isTrue();\n    assertThat(process.exitValue()).as(\"Process did not exit with 0 return code\").isEqualTo(0);\n\n    GfshExecution listRegionsResult = GfshScript\n        .of(String.format(\"connect --locator=localhost[%d]\", locatorPort), \"list regions\")\n        .withName(\"listRegions\").execute(gfsh);\n    assertThat(listRegionsResult.getOutputText()).contains(\"REGION1\");\n  }\n","date":"2019-10-12 07:31:43","endLine":120,"groupId":"105390","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"clientCreatesRegionUsingClusterManagementService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/4d/90e1e267bbf634ff2cf173c1ebc01a9baf80e7.src","preCode":"  public void clientCreatesRegionUsingClusterManagementService() throws Exception {\n    JarBuilder jarBuilder = new JarBuilder();\n    String filePath =\n        createTempFileFromResource(this.getClass(), \"/ManagementClientCreateRegion.java\")\n            .getAbsolutePath();\n    assertThat(filePath).as(\"java file resource not found\").isNotBlank();\n\n    File outputJar = new File(tempDir.getRoot(), \"output.jar\");\n    jarBuilder.buildJar(outputJar, new File(filePath));\n\n    int[] availablePorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n    int locatorPort = availablePorts[0];\n    int httpPort = availablePorts[1];\n    GfshExecution startCluster =\n        GfshScript.of(String.format(\"start locator --port=%d --J=-Dgemfire.http-service-port=%d %s\",\n            locatorPort,\n            httpPort,\n            getSslParameters()),\n            String.format(\"start server --locators=localhost[%d] --server-port=0\", locatorPort))\n            .withName(\"startCluster\").execute(gfsh);\n\n\n    assertThat(startCluster.getProcess().exitValue())\n        .as(\"Cluster did not start correctly\").isEqualTo(0);\n\n    Process process = launchClientProcess(outputJar, httpPort);\n\n    boolean exited = process.waitFor(30, TimeUnit.SECONDS);\n    assertThat(exited).as(\"Process did not exit within 10 seconds\").isTrue();\n    assertThat(process.exitValue()).as(\"Process did not exit with 0 return code\").isEqualTo(0);\n\n    GfshExecution listRegionsResult = GfshScript\n        .of(String.format(\"connect --locator=localhost[%d]\", locatorPort), \"list regions\")\n        .withName(\"listRegions\").execute(gfsh);\n    assertThat(listRegionsResult.getOutputText()).contains(\"REGION1\");\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/rest/StandaloneClientManagementAPIAcceptanceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"198bec05cd8212e8b8fffbf66f4ec4292eae8f56","commitMessage":"@@@GEODE-7289: Use random port in StandaloneClientManagementAPIAcceptanceTest (#4151)\n\nThe test is already using random ports for the locator port and http\nservice port. Use a random port for jmx manager port as well.","date":"2019-10-12 07:31:43","modifiedFileCount":"1","status":"M","submitter":"Kirk Lund"}]
