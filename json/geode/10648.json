[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2018-07-18 03:54:18","endLine":953,"groupId":"42400","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEventsDuringQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f4/3276ee163242416cc04af89b2ca00088c4b47a.src","preCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":830,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testEventsDuringQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n\n    final int port = server.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    String poolName = \"testEventsDuringQueryExecution\";\n    cqDUnitTest.createPool(client, poolName, host0, port);\n\n    \r\n    cqDUnitTest.createCQ(client, poolName, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invoke(setTestHook());\n\n    \r\n    AsyncInvocation executeCq =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ AsyncInvoke\") {\n          @Override\n          public void run2() throws CacheException {\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            SelectResults cqResults = null;\n            try {\n              cqResults = cq1.executeWithInitialResults();\n            } catch (Exception ex) {\n              Assert.fail(\"CQ execution failed\", ex);\n            }\n\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            Wait.waitForCriterion(new WaitCriterion() {\n\n              @Override\n              public boolean done() {\n                return testHook.numQueuedEvents() > 0;\n              }\n\n              @Override\n              public String description() {\n                return \"No queued events found.\";\n              }\n            }, 3000, 5, true);\n\n            getCache().getLogger().fine(\"Queued Events Size\" + testHook.numQueuedEvents());\n            \r\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Wait.pause(200);\n        client.invoke(new CacheSerializableRunnable(\"Releasing the latch\") {\n          @Override\n          public void run2() throws CacheException {\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            testHook.ready();\n          }\n        });\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2018-07-18 03:54:18","endLine":837,"groupId":"18275","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEventsDuringQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/44/e63605008e737dd7ba7324cb2c06266dd9d013.src","preCode":"  public void testEventsDuringQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n\n    final int port = server.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    String poolName = \"testEventsDuringQueryExecution\";\n    cqDUnitTest.createPool(client, poolName, host0, port);\n\n    \r\n    cqDUnitTest.createCQ(client, poolName, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invoke(setTestHook());\n\n    \r\n    AsyncInvocation executeCq =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ AsyncInvoke\") {\n          @Override\n          public void run2() throws CacheException {\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            SelectResults cqResults = null;\n            try {\n              cqResults = cq1.executeWithInitialResults();\n            } catch (Exception ex) {\n              Assert.fail(\"CQ execution failed\", ex);\n            }\n\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            Wait.waitForCriterion(new WaitCriterion() {\n\n              @Override\n              public boolean done() {\n                return testHook.numQueuedEvents() > 0;\n              }\n\n              @Override\n              public String description() {\n                return \"No queued events found.\";\n              }\n            }, 3000, 5, true);\n\n            getCache().getLogger().fine(\"Queued Events Size\" + testHook.numQueuedEvents());\n            \r\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Wait.pause(200);\n        client.invoke(new CacheSerializableRunnable(\"Releasing the latch\") {\n          @Override\n          public void run2() throws CacheException {\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            testHook.ready();\n          }\n        });\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":701,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-10-06 04:56:13","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2018-07-18 03:54:18","endLine":953,"groupId":"42400","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEventsDuringQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f4/3276ee163242416cc04af89b2ca00088c4b47a.src","preCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":830,"status":"N"},{"authorDate":"2018-10-06 04:56:13","commitOrder":2,"curCode":"  public void testEventsDuringQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n\n    final int port = server.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    String poolName = \"testEventsDuringQueryExecution\";\n    cqDUnitTest.createPool(client, poolName, host0, port);\n\n    \r\n    cqDUnitTest.createCQ(client, poolName, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invoke(setTestHook());\n\n    \r\n    AsyncInvocation executeCq =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ AsyncInvoke\") {\n          @Override\n          public void run2() throws CacheException {\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            SelectResults cqResults = null;\n            try {\n              cqResults = cq1.executeWithInitialResults();\n            } catch (Exception ex) {\n              fail(\"CQ execution failed\", ex);\n            }\n\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            GeodeAwaitility.await().untilAsserted(new WaitCriterion() {\n\n              @Override\n              public boolean done() {\n                return testHook.numQueuedEvents() > 0;\n              }\n\n              @Override\n              public String description() {\n                return \"No queued events found.\";\n              }\n            });\n\n            getCache().getLogger().fine(\"Queued Events Size\" + testHook.numQueuedEvents());\n            \r\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Wait.pause(200);\n        client.invoke(new CacheSerializableRunnable(\"Releasing the latch\") {\n          @Override\n          public void run2() throws CacheException {\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            testHook.ready();\n          }\n        });\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2018-10-19 08:01:02","endLine":839,"groupId":"8417","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEventsDuringQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/73/2d129fcda72d90bab88736d16fb3251a023401.src","preCode":"  public void testEventsDuringQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n\n    final int port = server.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    String poolName = \"testEventsDuringQueryExecution\";\n    cqDUnitTest.createPool(client, poolName, host0, port);\n\n    \r\n    cqDUnitTest.createCQ(client, poolName, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invoke(setTestHook());\n\n    \r\n    AsyncInvocation executeCq =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ AsyncInvoke\") {\n          @Override\n          public void run2() throws CacheException {\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            SelectResults cqResults = null;\n            try {\n              cqResults = cq1.executeWithInitialResults();\n            } catch (Exception ex) {\n              Assert.fail(\"CQ execution failed\", ex);\n            }\n\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            Wait.waitForCriterion(new WaitCriterion() {\n\n              @Override\n              public boolean done() {\n                return testHook.numQueuedEvents() > 0;\n              }\n\n              @Override\n              public String description() {\n                return \"No queued events found.\";\n              }\n            }, 3000, 5, true);\n\n            getCache().getLogger().fine(\"Queued Events Size\" + testHook.numQueuedEvents());\n            \r\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Wait.pause(200);\n        client.invoke(new CacheSerializableRunnable(\"Releasing the latch\") {\n          @Override\n          public void run2() throws CacheException {\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            testHook.ready();\n          }\n        });\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":703,"status":"M"}],"commitId":"8fa6ef6205938767d0106810daca1f91ee8bb3a8","commitMessage":"@@@GEODE-5424: Replacing calls to waitForCriterion with Awaitility\n\nReplacing all of the calls to waitForCriterion with awaitility instead. \nto use a standard timeout.\n","date":"2018-10-19 08:01:02","modifiedFileCount":"132","status":"M","submitter":"Dan Smith"},{"authorTime":"2018-10-06 04:56:13","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2019-01-12 07:53:54","endLine":971,"groupId":"5962","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEventsDuringQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f5/b9f0166626aa1d97623ee84b1431b9cbc5068b.src","preCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":845,"status":"M"},{"authorDate":"2018-10-06 04:56:13","commitOrder":3,"curCode":"  public void testEventsDuringQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n\n    final int port = server.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    String poolName = \"testEventsDuringQueryExecution\";\n    cqDUnitTest.createPool(client, poolName, host0, port);\n\n    \r\n    cqDUnitTest.createCQ(client, poolName, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invoke(setTestHook());\n\n    \r\n    AsyncInvocation executeCq =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ AsyncInvoke\") {\n          @Override\n          public void run2() throws CacheException {\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            SelectResults cqResults = null;\n            try {\n              cqResults = cq1.executeWithInitialResults();\n            } catch (Exception ex) {\n              fail(\"CQ execution failed\", ex);\n            }\n\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            GeodeAwaitility.await().untilAsserted(new WaitCriterion() {\n\n              @Override\n              public boolean done() {\n                return testHook.numQueuedEvents() > 0;\n              }\n\n              @Override\n              public String description() {\n                return \"No queued events found.\";\n              }\n            });\n\n            getCache().getLogger().fine(\"Queued Events Size\" + testHook.numQueuedEvents());\n            \r\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Wait.pause(200);\n        client.invoke(new CacheSerializableRunnable(\"Releasing the latch\") {\n          @Override\n          public void run2() throws CacheException {\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            testHook.ready();\n          }\n        });\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2018-10-19 08:01:02","endLine":839,"groupId":"8417","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEventsDuringQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/73/2d129fcda72d90bab88736d16fb3251a023401.src","preCode":"  public void testEventsDuringQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n\n    final int port = server.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    String poolName = \"testEventsDuringQueryExecution\";\n    cqDUnitTest.createPool(client, poolName, host0, port);\n\n    \r\n    cqDUnitTest.createCQ(client, poolName, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invoke(setTestHook());\n\n    \r\n    AsyncInvocation executeCq =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ AsyncInvoke\") {\n          @Override\n          public void run2() throws CacheException {\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            SelectResults cqResults = null;\n            try {\n              cqResults = cq1.executeWithInitialResults();\n            } catch (Exception ex) {\n              fail(\"CQ execution failed\", ex);\n            }\n\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            GeodeAwaitility.await().untilAsserted(new WaitCriterion() {\n\n              @Override\n              public boolean done() {\n                return testHook.numQueuedEvents() > 0;\n              }\n\n              @Override\n              public String description() {\n                return \"No queued events found.\";\n              }\n            });\n\n            getCache().getLogger().fine(\"Queued Events Size\" + testHook.numQueuedEvents());\n            \r\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Wait.pause(200);\n        client.invoke(new CacheSerializableRunnable(\"Releasing the latch\") {\n          @Override\n          public void run2() throws CacheException {\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            testHook.ready();\n          }\n        });\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":703,"status":"N"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":4,"curCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region =\n            getCache().getRegion(SEPARATOR + \"root\" + SEPARATOR + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region =\n            getCache().getRegion(SEPARATOR + \"root\" + SEPARATOR + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2020-05-29 00:37:39","endLine":978,"groupId":"10648","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testEventsDuringQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/02/3ed283244cf7e81ebaa53df877b684b01bc642.src","preCode":"  public void testEventsDuringQueryExecution() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n\n    \r\n    cqDUnitTest.createCQ(client, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    AsyncInvocation processCqs = client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService cqService = getCache().getQueryService();\n        \r\n        CqQuery cq1 = cqService.getCq(cqName);\n        if (cq1 == null) {\n          fail(\"Failed to get CQ \" + cqName);\n        }\n\n        SelectResults cqResults = null;\n\n        try {\n          cqResults = cq1.executeWithInitialResults();\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to execute  CQ \" + cqName);\n          err.initCause(ex);\n          throw err;\n        }\n\n        \r\n\n        CqQueryTestListener cqListener =\n            (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n        \r\n        cqListener.waitForCreated(\"\" + totalObjects);\n\n        \r\n        int oldId = 0;\n        for (Object cqEvent : cqListener.events.toArray()) {\n          int newId = new Integer(cqEvent.toString()).intValue();\n          if (oldId > newId) {\n            fail(\"Queued events for CQ Listener during execution with \"\n                + \"Initial results is not in the order in which they are created.\");\n          }\n          oldId = newId;\n        }\n\n        \r\n        HashSet ids = new HashSet(cqListener.events);\n        for (Object o : cqResults.asList()) {\n          Struct s = (Struct) o;\n          ids.add(s.get(\"key\"));\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        HashSet missingIds = new HashSet();\n        String key = \"\";\n        for (int i = 1; i <= totalObjects; i++) {\n          key = \"\" + i;\n          if (!(ids.contains(key))) {\n            missingIds.add(key);\n          }\n        }\n\n        if (!missingIds.isEmpty()) {\n          fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n              + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n              + \" Ids in ResultSet and CQ Events :\" + ids);\n        }\n\n      }\n    });\n\n    \r\n    server.invokeAsync(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    ThreadUtils.join(processCqs, 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":850,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":4,"curCode":"  public void testEventsDuringQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n\n    final int port = server.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    String poolName = \"testEventsDuringQueryExecution\";\n    cqDUnitTest.createPool(client, poolName, host0, port);\n\n    \r\n    cqDUnitTest.createCQ(client, poolName, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region =\n            getCache().getRegion(SEPARATOR + \"root\" + SEPARATOR + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invoke(setTestHook());\n\n    \r\n    AsyncInvocation executeCq =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ AsyncInvoke\") {\n          @Override\n          public void run2() throws CacheException {\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            SelectResults cqResults = null;\n            try {\n              cqResults = cq1.executeWithInitialResults();\n            } catch (Exception ex) {\n              fail(\"CQ execution failed\", ex);\n            }\n\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            GeodeAwaitility.await().untilAsserted(new WaitCriterion() {\n\n              @Override\n              public boolean done() {\n                return testHook.numQueuedEvents() > 0;\n              }\n\n              @Override\n              public String description() {\n                return \"No queued events found.\";\n              }\n            });\n\n            getCache().getLogger().fine(\"Queued Events Size\" + testHook.numQueuedEvents());\n            \r\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Wait.pause(200);\n        client.invoke(new CacheSerializableRunnable(\"Releasing the latch\") {\n          @Override\n          public void run2() throws CacheException {\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            testHook.ready();\n          }\n        });\n        Region region =\n            getCache().getRegion(SEPARATOR + \"root\" + SEPARATOR + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","date":"2020-05-29 00:37:39","endLine":846,"groupId":"10648","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testEventsDuringQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f2/1e4714029bec9005d8d0ed6db3eff2055d5ae3.src","preCode":"  public void testEventsDuringQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final String cqName = \"testEventsDuringQueryExecution_0\";\n    cqDUnitTest.createServer(server);\n\n    final int port = server.invoke(() -> CqQueryUsingPoolDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    String poolName = \"testEventsDuringQueryExecution\";\n    cqDUnitTest.createPool(client, poolName, host0, port);\n\n    \r\n    cqDUnitTest.createCQ(client, poolName, cqName, cqDUnitTest.cqs[0]);\n\n    final int numObjects = 200;\n    final int totalObjects = 500;\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = 1; i <= numObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    \r\n    client.invoke(setTestHook());\n\n    \r\n    AsyncInvocation executeCq =\n        client.invokeAsync(new CacheSerializableRunnable(\"Execute CQ AsyncInvoke\") {\n          @Override\n          public void run2() throws CacheException {\n            QueryService cqService = getCache().getQueryService();\n            \r\n            CqQuery cq1 = cqService.getCq(cqName);\n            if (cq1 == null) {\n              fail(\"Failed to get CQ \" + cqName);\n            }\n            SelectResults cqResults = null;\n            try {\n              cqResults = cq1.executeWithInitialResults();\n            } catch (Exception ex) {\n              fail(\"CQ execution failed\", ex);\n            }\n\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            GeodeAwaitility.await().untilAsserted(new WaitCriterion() {\n\n              @Override\n              public boolean done() {\n                return testHook.numQueuedEvents() > 0;\n              }\n\n              @Override\n              public String description() {\n                return \"No queued events found.\";\n              }\n            });\n\n            getCache().getLogger().fine(\"Queued Events Size\" + testHook.numQueuedEvents());\n            \r\n\n            CqQueryTestListener cqListener =\n                (CqQueryTestListener) cq1.getCqAttributes().getCqListener();\n            \r\n            cqListener.waitForCreated(\"\" + totalObjects);\n\n            \r\n            int oldId = 0;\n            for (Object cqEvent : cqListener.events.toArray()) {\n              int newId = new Integer(cqEvent.toString()).intValue();\n              if (oldId > newId) {\n                fail(\"Queued events for CQ Listener during execution with \"\n                    + \"Initial results is not in the order in which they are created.\");\n              }\n              oldId = newId;\n            }\n\n            \r\n            HashSet ids = new HashSet(cqListener.events);\n\n            for (Object o : cqResults.asList()) {\n              Struct s = (Struct) o;\n              ids.add(s.get(\"key\"));\n            }\n\n            HashSet missingIds = new HashSet();\n            String key = \"\";\n            for (int i = 1; i <= totalObjects; i++) {\n              key = \"\" + i;\n              if (!(ids.contains(key))) {\n                missingIds.add(key);\n              }\n            }\n\n            if (!missingIds.isEmpty()) {\n              fail(\"Missing Keys in either ResultSet or the Cq Event list. \"\n                  + \" Missing keys : [size : \" + missingIds.size() + \"]\" + missingIds\n                  + \" Ids in ResultSet and CQ Events :\" + ids);\n            }\n          }\n        });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Update Region\") {\n      @Override\n      public void run2() throws CacheException {\n        Wait.pause(200);\n        client.invoke(new CacheSerializableRunnable(\"Releasing the latch\") {\n          @Override\n          public void run2() throws CacheException {\n            \r\n            final TestHook testHook = CqQueryImpl.testHook;\n            testHook.ready();\n          }\n        });\n        Region region = getCache().getRegion(\"/root/\" + cqDUnitTest.regions[0]);\n        for (int i = numObjects + 1; i <= totalObjects; i++) {\n          Portfolio p = new Portfolio(i);\n          region.put(\"\" + i, p);\n        }\n      }\n    });\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":708,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
