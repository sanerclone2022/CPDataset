[{"authorTime":"2016-09-15 02:08:18","codes":[{"authorDate":"2016-09-15 02:08:18","commitOrder":1,"curCode":"  public void defragmentWithLargeChunkSizeReturnsFalse() {\n    int SMALL_SLAB = 16;\n    int MEDIUM_SLAB = 128;\n    Slab slab = new SlabImpl(DEFAULT_SLAB_SIZE);\n    this.freeListManager = createFreeListManager(ma, new Slab[] {\n        new SlabImpl(SMALL_SLAB), \n        new SlabImpl(SMALL_SLAB), \n        new SlabImpl(MEDIUM_SLAB), \n        slab});\n    ArrayList<OffHeapStoredObject> chunks = new ArrayList<>();\n    chunks.add(this.freeListManager.allocate(SMALL_SLAB-8+1));\n    chunks.add(this.freeListManager.allocate(DEFAULT_SLAB_SIZE/2-8));\n    chunks.add(this.freeListManager.allocate(DEFAULT_SLAB_SIZE/2-8));\n    chunks.add(this.freeListManager.allocate(SMALL_SLAB-8+1));\n    for (OffHeapStoredObject c: chunks) {\n      OffHeapStoredObject.release(c.getAddress(), this.freeListManager);\n    }\n    this.freeListManager.firstDefragmentation = false;\n    assertThat(this.freeListManager.defragment(DEFAULT_SLAB_SIZE+1)).isFalse();\n  }\n","date":"2016-09-15 02:08:18","endLine":290,"groupId":"14970","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"defragmentWithLargeChunkSizeReturnsFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/61/91306acf8200613edd6fe6df08bc427f0827e6.src","preCode":"  public void defragmentWithLargeChunkSizeReturnsFalse() {\n    int SMALL_SLAB = 16;\n    int MEDIUM_SLAB = 128;\n    Slab slab = new SlabImpl(DEFAULT_SLAB_SIZE);\n    this.freeListManager = createFreeListManager(ma, new Slab[] {\n        new SlabImpl(SMALL_SLAB), \n        new SlabImpl(SMALL_SLAB), \n        new SlabImpl(MEDIUM_SLAB), \n        slab});\n    ArrayList<OffHeapStoredObject> chunks = new ArrayList<>();\n    chunks.add(this.freeListManager.allocate(SMALL_SLAB-8+1));\n    chunks.add(this.freeListManager.allocate(DEFAULT_SLAB_SIZE/2-8));\n    chunks.add(this.freeListManager.allocate(DEFAULT_SLAB_SIZE/2-8));\n    chunks.add(this.freeListManager.allocate(SMALL_SLAB-8+1));\n    for (OffHeapStoredObject c: chunks) {\n      OffHeapStoredObject.release(c.getAddress(), this.freeListManager);\n    }\n    this.freeListManager.firstDefragmentation = false;\n    assertThat(this.freeListManager.defragment(DEFAULT_SLAB_SIZE+1)).isFalse();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/offheap/FreeListManagerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"B"},{"authorDate":"2016-09-15 02:08:18","commitOrder":1,"curCode":"  public void defragmentWithLiveChunks() {\n    int SMALL_SLAB = 16;\n    int MEDIUM_SLAB = 128;\n    Slab slab = new SlabImpl(DEFAULT_SLAB_SIZE);\n    this.freeListManager = createFreeListManager(ma, new Slab[] {\n        new SlabImpl(SMALL_SLAB), \n        new SlabImpl(SMALL_SLAB), \n        new SlabImpl(MEDIUM_SLAB), \n        slab});\n    ArrayList<OffHeapStoredObject> chunks = new ArrayList<>();\n    chunks.add(this.freeListManager.allocate(SMALL_SLAB-8+1));\n    this.freeListManager.allocate(DEFAULT_SLAB_SIZE/2-8);\n    chunks.add(this.freeListManager.allocate(DEFAULT_SLAB_SIZE/2-8));\n    this.freeListManager.allocate(SMALL_SLAB-8+1);\n    for (OffHeapStoredObject c: chunks) {\n      OffHeapStoredObject.release(c.getAddress(), this.freeListManager);\n    }\n    \n    this.freeListManager.firstDefragmentation = false;\n    assertThat(this.freeListManager.defragment(DEFAULT_SLAB_SIZE/2)).isTrue();\n  }\n","date":"2016-09-15 02:08:18","endLine":345,"groupId":"25997","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"defragmentWithLiveChunks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/61/91306acf8200613edd6fe6df08bc427f0827e6.src","preCode":"  public void defragmentWithLiveChunks() {\n    int SMALL_SLAB = 16;\n    int MEDIUM_SLAB = 128;\n    Slab slab = new SlabImpl(DEFAULT_SLAB_SIZE);\n    this.freeListManager = createFreeListManager(ma, new Slab[] {\n        new SlabImpl(SMALL_SLAB), \n        new SlabImpl(SMALL_SLAB), \n        new SlabImpl(MEDIUM_SLAB), \n        slab});\n    ArrayList<OffHeapStoredObject> chunks = new ArrayList<>();\n    chunks.add(this.freeListManager.allocate(SMALL_SLAB-8+1));\n    this.freeListManager.allocate(DEFAULT_SLAB_SIZE/2-8);\n    chunks.add(this.freeListManager.allocate(DEFAULT_SLAB_SIZE/2-8));\n    this.freeListManager.allocate(SMALL_SLAB-8+1);\n    for (OffHeapStoredObject c: chunks) {\n      OffHeapStoredObject.release(c.getAddress(), this.freeListManager);\n    }\n    \n    this.freeListManager.firstDefragmentation = false;\n    assertThat(this.freeListManager.defragment(DEFAULT_SLAB_SIZE/2)).isTrue();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/offheap/FreeListManagerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"B"}],"commitId":"8ea08da3d2baa64ca631641430b54d71ce3ff362","commitMessage":"@@@GEODE-37 Merge branch 'feature/GEODE-37_2' into develop\n\nConflicts:\n\tgeode-core/src/main/java/com/gemstone/gemfire/cache/query/internal/IndexTrackingQueryObserver.java\n","date":"2016-09-15 02:08:18","modifiedFileCount":"151","status":"B","submitter":"Hitesh Khamesra"},{"authorTime":"2021-03-30 01:18:33","codes":[{"authorDate":"2021-03-30 01:18:33","commitOrder":2,"curCode":"  public void defragmentWithLargeChunkSizeReturnsFalse() {\n    int SMALL_SLAB = 16;\n    int MEDIUM_SLAB = 128;\n    Slab slab = new SlabImpl(DEFAULT_SLAB_SIZE);\n    this.freeListManager = createFreeListManager(ma, new Slab[] {new SlabImpl(SMALL_SLAB),\n        new SlabImpl(SMALL_SLAB), new SlabImpl(MEDIUM_SLAB), slab});\n    ArrayList<OffHeapStoredObject> chunks = new ArrayList<>();\n    chunks.add(this.freeListManager.allocate(SMALL_SLAB - 8 + 1));\n    chunks.add(this.freeListManager.allocate(DEFAULT_SLAB_SIZE / 2 - 8));\n    chunks.add(this.freeListManager.allocate(DEFAULT_SLAB_SIZE / 2 - 8));\n    chunks.add(this.freeListManager.allocate(SMALL_SLAB - 8 + 1));\n    for (OffHeapStoredObject c : chunks) {\n      ReferenceCounter.release(c.getAddress(), this.freeListManager);\n    }\n    this.freeListManager.firstDefragmentation = false;\n    assertThat(this.freeListManager.defragment(DEFAULT_SLAB_SIZE + 1)).isFalse();\n  }\n","date":"2021-03-30 01:18:33","endLine":294,"groupId":"102280","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"defragmentWithLargeChunkSizeReturnsFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/4c/4a6fd3fc262a0d8b1d59f6432365dc50697332.src","preCode":"  public void defragmentWithLargeChunkSizeReturnsFalse() {\n    int SMALL_SLAB = 16;\n    int MEDIUM_SLAB = 128;\n    Slab slab = new SlabImpl(DEFAULT_SLAB_SIZE);\n    this.freeListManager = createFreeListManager(ma, new Slab[] {new SlabImpl(SMALL_SLAB),\n        new SlabImpl(SMALL_SLAB), new SlabImpl(MEDIUM_SLAB), slab});\n    ArrayList<OffHeapStoredObject> chunks = new ArrayList<>();\n    chunks.add(this.freeListManager.allocate(SMALL_SLAB - 8 + 1));\n    chunks.add(this.freeListManager.allocate(DEFAULT_SLAB_SIZE / 2 - 8));\n    chunks.add(this.freeListManager.allocate(DEFAULT_SLAB_SIZE / 2 - 8));\n    chunks.add(this.freeListManager.allocate(SMALL_SLAB - 8 + 1));\n    for (OffHeapStoredObject c : chunks) {\n      OffHeapStoredObject.release(c.getAddress(), this.freeListManager);\n    }\n    this.freeListManager.firstDefragmentation = false;\n    assertThat(this.freeListManager.defragment(DEFAULT_SLAB_SIZE + 1)).isFalse();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/offheap/FreeListManagerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"},{"authorDate":"2021-03-30 01:18:33","commitOrder":2,"curCode":"  public void defragmentWithLiveChunks() {\n    int SMALL_SLAB = 16;\n    int MEDIUM_SLAB = 128;\n    Slab slab = new SlabImpl(DEFAULT_SLAB_SIZE);\n    this.freeListManager = createFreeListManager(ma, new Slab[] {new SlabImpl(SMALL_SLAB),\n        new SlabImpl(SMALL_SLAB), new SlabImpl(MEDIUM_SLAB), slab});\n    ArrayList<OffHeapStoredObject> chunks = new ArrayList<>();\n    chunks.add(this.freeListManager.allocate(SMALL_SLAB - 8 + 1));\n    this.freeListManager.allocate(DEFAULT_SLAB_SIZE / 2 - 8);\n    chunks.add(this.freeListManager.allocate(DEFAULT_SLAB_SIZE / 2 - 8));\n    this.freeListManager.allocate(SMALL_SLAB - 8 + 1);\n    for (OffHeapStoredObject c : chunks) {\n      ReferenceCounter.release(c.getAddress(), this.freeListManager);\n    }\n\n    this.freeListManager.firstDefragmentation = false;\n    assertThat(this.freeListManager.defragment(DEFAULT_SLAB_SIZE / 2)).isTrue();\n  }\n","date":"2021-03-30 01:18:33","endLine":343,"groupId":"102280","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"defragmentWithLiveChunks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/4c/4a6fd3fc262a0d8b1d59f6432365dc50697332.src","preCode":"  public void defragmentWithLiveChunks() {\n    int SMALL_SLAB = 16;\n    int MEDIUM_SLAB = 128;\n    Slab slab = new SlabImpl(DEFAULT_SLAB_SIZE);\n    this.freeListManager = createFreeListManager(ma, new Slab[] {new SlabImpl(SMALL_SLAB),\n        new SlabImpl(SMALL_SLAB), new SlabImpl(MEDIUM_SLAB), slab});\n    ArrayList<OffHeapStoredObject> chunks = new ArrayList<>();\n    chunks.add(this.freeListManager.allocate(SMALL_SLAB - 8 + 1));\n    this.freeListManager.allocate(DEFAULT_SLAB_SIZE / 2 - 8);\n    chunks.add(this.freeListManager.allocate(DEFAULT_SLAB_SIZE / 2 - 8));\n    this.freeListManager.allocate(SMALL_SLAB - 8 + 1);\n    for (OffHeapStoredObject c : chunks) {\n      OffHeapStoredObject.release(c.getAddress(), this.freeListManager);\n    }\n\n    this.freeListManager.firstDefragmentation = false;\n    assertThat(this.freeListManager.defragment(DEFAULT_SLAB_SIZE / 2)).isTrue();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/offheap/FreeListManagerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"47c3b96f46cd36a23724e47a13a7f352574dd773","commitMessage":"@@@GEODE-6143: Remove PowerMock from offheap tests (#6179)\n\n* Clean-up offheap code and tests\n* Extract OffHeapClearRequired from OffHeapStoredObject\n* Extract ReferenceCounter from OffHeapStoredObject\n* Move remaining static methods to bottom of OffHeapStoredObject\n* Extract non-static delegate OffHeapRegionEntryHelperInstance from\n  OffHeapRegionEntryHelper\n* Extract non-static delegate ReferenceCounterInstance from\n  ReferenceCounter\n* Remove PowerMock from offheap tests\n* Remove PowerMock from Geode build files\n* Rename OffHeapRegionEntryHelperInstanceTest\n* Rename ReferenceCountHelperImplTest","date":"2021-03-30 01:18:33","modifiedFileCount":"13","status":"M","submitter":"Kirk Lund"}]
