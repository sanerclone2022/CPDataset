[{"authorTime":"2016-09-15 02:08:18","codes":[{"authorDate":"2016-09-15 02:08:18","commitOrder":1,"curCode":"  public void testTreeMap() throws Exception {\n    Random random = getRandom();\n    TreeMap map = new TreeMap();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Object key = new Long(random.nextLong());\n      Object value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeTreeMap(null, out);\n    DataSerializer.writeTreeMap(new TreeMap(), out);\n    DataSerializer.writeTreeMap(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    assertEquals(null, DataSerializer.readTreeMap(in));\n    assertEquals(new TreeMap(), DataSerializer.readTreeMap(in));\n    TreeMap map2 = DataSerializer.readTreeMap(in);\n    assertEquals(map, map2);\n  }\n","date":"2016-09-15 02:08:18","endLine":1476,"groupId":"24761","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTreeMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8f/75461e4dc621b2a51d03b8d0734e38d304cc3e.src","preCode":"  public void testTreeMap() throws Exception {\n    Random random = getRandom();\n    TreeMap map = new TreeMap();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Object key = new Long(random.nextLong());\n      Object value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeTreeMap(null, out);\n    DataSerializer.writeTreeMap(new TreeMap(), out);\n    DataSerializer.writeTreeMap(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    assertEquals(null, DataSerializer.readTreeMap(in));\n    assertEquals(new TreeMap(), DataSerializer.readTreeMap(in));\n    TreeMap map2 = DataSerializer.readTreeMap(in);\n    assertEquals(map, map2);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/DataSerializableJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1455,"status":"B"},{"authorDate":"2016-09-15 02:08:18","commitOrder":1,"curCode":"  public void testIdentityHashMap() throws Exception {\n    Random random = getRandom();\n    IdentityHashMap map = new IdentityHashMap();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Object key = new Long(random.nextLong());\n      Object value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeIdentityHashMap(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    IdentityHashMap map2 = DataSerializer.readIdentityHashMap(in);\n    assertEquals(new HashMap(map), new HashMap(map2));\n  }\n","date":"2016-09-15 02:08:18","endLine":1661,"groupId":"2728","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIdentityHashMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8f/75461e4dc621b2a51d03b8d0734e38d304cc3e.src","preCode":"  public void testIdentityHashMap() throws Exception {\n    Random random = getRandom();\n    IdentityHashMap map = new IdentityHashMap();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Object key = new Long(random.nextLong());\n      Object value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeIdentityHashMap(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    IdentityHashMap map2 = DataSerializer.readIdentityHashMap(in);\n    assertEquals(new HashMap(map), new HashMap(map2));\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/DataSerializableJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1644,"status":"B"}],"commitId":"8ea08da3d2baa64ca631641430b54d71ce3ff362","commitMessage":"@@@GEODE-37 Merge branch 'feature/GEODE-37_2' into develop\n\nConflicts:\n\tgeode-core/src/main/java/com/gemstone/gemfire/cache/query/internal/IndexTrackingQueryObserver.java\n","date":"2016-09-15 02:08:18","modifiedFileCount":"151","status":"B","submitter":"Hitesh Khamesra"},{"authorTime":"2021-05-19 13:32:42","codes":[{"authorDate":"2021-05-19 13:32:42","commitOrder":2,"curCode":"  public void testTreeMap() throws Exception {\n    Random random = getRandom();\n    TreeMap<Long, String> map = new TreeMap<>();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Long key = random.nextLong();\n      String value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeTreeMap(null, out);\n    DataSerializer.writeTreeMap(new TreeMap<Long, String>(), out);\n    DataSerializer.writeTreeMap(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    assertNull(DataSerializer.readTreeMap(in));\n    assertEquals(new TreeMap<Long, String>(), DataSerializer.readTreeMap(in));\n    TreeMap<Long, String> map2 = DataSerializer.readTreeMap(in);\n    assertEquals(map, map2);\n  }\n","date":"2021-06-30 01:58:48","endLine":1432,"groupId":"102705","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testTreeMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e9/722f7b9d627c7bfd09d36a5a25ec55cb733e67.src","preCode":"  public void testTreeMap() throws Exception {\n    Random random = getRandom();\n    TreeMap map = new TreeMap();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Object key = new Long(random.nextLong());\n      Object value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeTreeMap(null, out);\n    DataSerializer.writeTreeMap(new TreeMap(), out);\n    DataSerializer.writeTreeMap(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    assertEquals(null, DataSerializer.readTreeMap(in));\n    assertEquals(new TreeMap(), DataSerializer.readTreeMap(in));\n    TreeMap map2 = DataSerializer.readTreeMap(in);\n    assertEquals(map, map2);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/DataSerializableJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1411,"status":"M"},{"authorDate":"2021-05-19 13:32:42","commitOrder":2,"curCode":"  public void testIdentityHashMap() throws Exception {\n    Random random = getRandom();\n    IdentityHashMap<Long, String> map = new IdentityHashMap<>();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Long key = random.nextLong();\n      String value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeIdentityHashMap(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    IdentityHashMap<Long, String> map2 = DataSerializer.readIdentityHashMap(in);\n    assertEquals(new HashMap<>(map), new HashMap<>(map2));\n  }\n","date":"2021-06-30 01:58:48","endLine":1662,"groupId":"102705","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testIdentityHashMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e9/722f7b9d627c7bfd09d36a5a25ec55cb733e67.src","preCode":"  public void testIdentityHashMap() throws Exception {\n    Random random = getRandom();\n    IdentityHashMap map = new IdentityHashMap();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Object key = new Long(random.nextLong());\n      Object value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeIdentityHashMap(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    IdentityHashMap map2 = DataSerializer.readIdentityHashMap(in);\n    assertEquals(new HashMap(map), new HashMap(map2));\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/DataSerializableJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1645,"status":"M"}],"commitId":"cc6f2c307d66eb37b44bc33ac2f8a7f1f517ce13","commitMessage":"@@@GEODE-6588: Cleanup DataSerializableJUnitTest\n","date":"2021-06-30 01:58:48","modifiedFileCount":"1","status":"M","submitter":"Jacob Barrett"}]
