[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testEquijoinPRColocatedQuery_1() throws Exception {\n\n    AttributesFactory factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory().setRedundantCopies(1)\n        .setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).create());\n    PartitionedRegion pr1 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr1\", factory.create());\n    factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory()\n\n        .setRedundantCopies(1).setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).setColocatedWith(pr1.getName()).create());\n\n    final PartitionedRegion pr2 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr2\", factory.create());\n\n    createAllNumPRAndEvenNumPR(pr1, pr2, 80);\n    Set<Integer> set = createAndPopulateSet(15);\n    LocalDataSet lds = new LocalDataSet(pr1, set);\n\n    QueryObserverImpl observer = new QueryObserverImpl();\n    QueryObserverHolder.setInstance(observer);\n    QueryService qs = pr1.getCache().getQueryService();\n\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr1 e\");\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr2 e\");\n    String query =\n        \"select distinct e1.value from /pr1 e1, \" + \"/pr2  e2\" + \" where e1.value=e2.value\";\n    DefaultQuery cury = (DefaultQuery) CacheUtils.getQueryService().newQuery(query);\n    SelectResults r = (SelectResults) lds.executeQuery(cury, null, set);\n\n    if (!observer.isIndexesUsed) {\n      fail(\"Indexes should have been used\");\n    }\n\n  }\n","date":"2018-07-18 03:54:18","endLine":451,"groupId":"46353","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquijoinPRColocatedQuery_1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/69/7d88bf2ae5781a70f81848d27ed93135b54045.src","preCode":"  public void testEquijoinPRColocatedQuery_1() throws Exception {\n\n    AttributesFactory factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory().setRedundantCopies(1)\n        .setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).create());\n    PartitionedRegion pr1 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr1\", factory.create());\n    factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory()\n\n        .setRedundantCopies(1).setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).setColocatedWith(pr1.getName()).create());\n\n    final PartitionedRegion pr2 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr2\", factory.create());\n\n    createAllNumPRAndEvenNumPR(pr1, pr2, 80);\n    Set<Integer> set = createAndPopulateSet(15);\n    LocalDataSet lds = new LocalDataSet(pr1, set);\n\n    QueryObserverImpl observer = new QueryObserverImpl();\n    QueryObserverHolder.setInstance(observer);\n    QueryService qs = pr1.getCache().getQueryService();\n\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr1 e\");\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr2 e\");\n    String query =\n        \"select distinct e1.value from /pr1 e1, \" + \"/pr2  e2\" + \" where e1.value=e2.value\";\n    DefaultQuery cury = (DefaultQuery) CacheUtils.getQueryService().newQuery(query);\n    SelectResults r = (SelectResults) lds.executeQuery(cury, null, set);\n\n    if (!observer.isIndexesUsed) {\n      fail(\"Indexes should have been used\");\n    }\n\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceRegressionTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testEquijoinPRColocatedQuery_2() throws Exception {\n\n    AttributesFactory factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory().setRedundantCopies(1)\n        .setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).create());\n    PartitionedRegion pr1 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr1\", factory.create());\n    factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory()\n\n        .setRedundantCopies(1).setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).setColocatedWith(pr1.getName()).create());\n\n    final PartitionedRegion pr2 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr2\", factory.create());\n\n    createAllNumPRAndEvenNumPR(pr1, pr2, 80);\n    Set<Integer> set = createAndPopulateSet(15);\n    LocalDataSet lds = new LocalDataSet(pr1, set);\n\n    QueryObserverImpl observer = new QueryObserverImpl();\n    QueryObserverHolder.setInstance(observer);\n    QueryService qs = pr1.getCache().getQueryService();\n\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr1.entries e\");\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr2.entries e\");\n    String query =\n        \"select distinct e1.key from /pr1.entries e1,/pr2.entries  e2\" + \" where e1.value=e2.value\";\n    DefaultQuery cury = (DefaultQuery) CacheUtils.getQueryService().newQuery(query);\n    SelectResults r = (SelectResults) lds.executeQuery(cury, null, set);\n\n    if (!observer.isIndexesUsed) {\n      fail(\"Indexes should have been used\");\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":521,"groupId":"46353","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquijoinPRColocatedQuery_2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/69/7d88bf2ae5781a70f81848d27ed93135b54045.src","preCode":"  public void testEquijoinPRColocatedQuery_2() throws Exception {\n\n    AttributesFactory factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory().setRedundantCopies(1)\n        .setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).create());\n    PartitionedRegion pr1 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr1\", factory.create());\n    factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory()\n\n        .setRedundantCopies(1).setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).setColocatedWith(pr1.getName()).create());\n\n    final PartitionedRegion pr2 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr2\", factory.create());\n\n    createAllNumPRAndEvenNumPR(pr1, pr2, 80);\n    Set<Integer> set = createAndPopulateSet(15);\n    LocalDataSet lds = new LocalDataSet(pr1, set);\n\n    QueryObserverImpl observer = new QueryObserverImpl();\n    QueryObserverHolder.setInstance(observer);\n    QueryService qs = pr1.getCache().getQueryService();\n\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr1.entries e\");\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr2.entries e\");\n    String query =\n        \"select distinct e1.key from /pr1.entries e1,/pr2.entries  e2\" + \" where e1.value=e2.value\";\n    DefaultQuery cury = (DefaultQuery) CacheUtils.getQueryService().newQuery(query);\n    SelectResults r = (SelectResults) lds.executeQuery(cury, null, set);\n\n    if (!observer.isIndexesUsed) {\n      fail(\"Indexes should have been used\");\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceRegressionTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":454,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2019-03-20 23:38:04","codes":[{"authorDate":"2019-03-20 23:38:04","commitOrder":2,"curCode":"  public void testEquijoinPRColocatedQuery_1() throws Exception {\n\n    AttributesFactory factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory().setRedundantCopies(1)\n        .setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).create());\n    PartitionedRegion pr1 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr1\", factory.create());\n    factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory()\n\n        .setRedundantCopies(1).setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).setColocatedWith(pr1.getName()).create());\n\n    final PartitionedRegion pr2 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr2\", factory.create());\n\n    createAllNumPRAndEvenNumPR(pr1, pr2, 80);\n    Set<Integer> set = createAndPopulateSet(15);\n    LocalDataSet lds = new LocalDataSet(pr1, set);\n\n    QueryObserverImpl observer = new QueryObserverImpl();\n    QueryObserverHolder.setInstance(observer);\n    QueryService qs = pr1.getCache().getQueryService();\n\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr1 e\");\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr2 e\");\n    String query =\n        \"select distinct e1.value from /pr1 e1, \" + \"/pr2  e2\" + \" where e1.value=e2.value\";\n    DefaultQuery cury = (DefaultQuery) CacheUtils.getQueryService().newQuery(query);\n    final ExecutionContext executionContext =\n        new QueryExecutionContext(null, (InternalCache) cache, cury);\n    SelectResults r = (SelectResults) lds.executeQuery(cury, executionContext, null, set);\n\n    if (!observer.isIndexesUsed) {\n      fail(\"Indexes should have been used\");\n    }\n\n  }\n","date":"2019-03-20 23:38:04","endLine":456,"groupId":"46353","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquijoinPRColocatedQuery_1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/44/7de42bcfae540d44ff8f93f84729d5b93e22cc.src","preCode":"  public void testEquijoinPRColocatedQuery_1() throws Exception {\n\n    AttributesFactory factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory().setRedundantCopies(1)\n        .setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).create());\n    PartitionedRegion pr1 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr1\", factory.create());\n    factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory()\n\n        .setRedundantCopies(1).setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).setColocatedWith(pr1.getName()).create());\n\n    final PartitionedRegion pr2 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr2\", factory.create());\n\n    createAllNumPRAndEvenNumPR(pr1, pr2, 80);\n    Set<Integer> set = createAndPopulateSet(15);\n    LocalDataSet lds = new LocalDataSet(pr1, set);\n\n    QueryObserverImpl observer = new QueryObserverImpl();\n    QueryObserverHolder.setInstance(observer);\n    QueryService qs = pr1.getCache().getQueryService();\n\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr1 e\");\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr2 e\");\n    String query =\n        \"select distinct e1.value from /pr1 e1, \" + \"/pr2  e2\" + \" where e1.value=e2.value\";\n    DefaultQuery cury = (DefaultQuery) CacheUtils.getQueryService().newQuery(query);\n    SelectResults r = (SelectResults) lds.executeQuery(cury, null, set);\n\n    if (!observer.isIndexesUsed) {\n      fail(\"Indexes should have been used\");\n    }\n\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceRegressionTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"},{"authorDate":"2019-03-20 23:38:04","commitOrder":2,"curCode":"  public void testEquijoinPRColocatedQuery_2() throws Exception {\n\n    AttributesFactory factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory().setRedundantCopies(1)\n        .setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).create());\n    PartitionedRegion pr1 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr1\", factory.create());\n    factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory()\n\n        .setRedundantCopies(1).setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).setColocatedWith(pr1.getName()).create());\n\n    final PartitionedRegion pr2 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr2\", factory.create());\n\n    createAllNumPRAndEvenNumPR(pr1, pr2, 80);\n    Set<Integer> set = createAndPopulateSet(15);\n    LocalDataSet lds = new LocalDataSet(pr1, set);\n\n    QueryObserverImpl observer = new QueryObserverImpl();\n    QueryObserverHolder.setInstance(observer);\n    QueryService qs = pr1.getCache().getQueryService();\n\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr1.entries e\");\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr2.entries e\");\n    String query =\n        \"select distinct e1.key from /pr1.entries e1,/pr2.entries  e2\" + \" where e1.value=e2.value\";\n    DefaultQuery cury = (DefaultQuery) CacheUtils.getQueryService().newQuery(query);\n    final ExecutionContext executionContext =\n        new QueryExecutionContext(null, (InternalCache) cache, cury);\n    SelectResults r = (SelectResults) lds.executeQuery(cury, executionContext, null, set);\n\n    if (!observer.isIndexesUsed) {\n      fail(\"Indexes should have been used\");\n    }\n  }\n","date":"2019-03-20 23:38:04","endLine":528,"groupId":"46353","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquijoinPRColocatedQuery_2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/44/7de42bcfae540d44ff8f93f84729d5b93e22cc.src","preCode":"  public void testEquijoinPRColocatedQuery_2() throws Exception {\n\n    AttributesFactory factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory().setRedundantCopies(1)\n        .setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).create());\n    PartitionedRegion pr1 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr1\", factory.create());\n    factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory()\n\n        .setRedundantCopies(1).setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).setColocatedWith(pr1.getName()).create());\n\n    final PartitionedRegion pr2 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr2\", factory.create());\n\n    createAllNumPRAndEvenNumPR(pr1, pr2, 80);\n    Set<Integer> set = createAndPopulateSet(15);\n    LocalDataSet lds = new LocalDataSet(pr1, set);\n\n    QueryObserverImpl observer = new QueryObserverImpl();\n    QueryObserverHolder.setInstance(observer);\n    QueryService qs = pr1.getCache().getQueryService();\n\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr1.entries e\");\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr2.entries e\");\n    String query =\n        \"select distinct e1.key from /pr1.entries e1,/pr2.entries  e2\" + \" where e1.value=e2.value\";\n    DefaultQuery cury = (DefaultQuery) CacheUtils.getQueryService().newQuery(query);\n    SelectResults r = (SelectResults) lds.executeQuery(cury, null, set);\n\n    if (!observer.isIndexesUsed) {\n      fail(\"Indexes should have been used\");\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceRegressionTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"M"}],"commitId":"3ffbc4183de59aa0603bea2e25f91a6e80a1d079","commitMessage":"@@@GEODE-6488: Migrating cancellation state to execution context (#3322)\n\nThis work solves two problems.  One is that the query cancellation task\nreference in DefaultQuery could be overwritten and thus never removed\nfrom monitoring upon successful completion of a query.  Second is that\nonce a query execution timed out once.  the query object was in an\nunusable state which is undesirable.\n\nThe solution is to attach the cancellation state to the execution\ncontext rather than the query object.  so that cancellation is associated\nwith each independent execution of a query rather than having\ncancellation state that applies to the entire query object.","date":"2019-03-20 23:38:04","modifiedFileCount":"35","status":"M","submitter":"Ryan McMahon"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":3,"curCode":"  public void testEquijoinPRColocatedQuery_1() throws Exception {\n\n    AttributesFactory factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory().setRedundantCopies(1)\n        .setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).create());\n    PartitionedRegion pr1 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr1\", factory.create());\n    factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory()\n\n        .setRedundantCopies(1).setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).setColocatedWith(pr1.getName()).create());\n\n    final PartitionedRegion pr2 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr2\", factory.create());\n\n    createAllNumPRAndEvenNumPR(pr1, pr2, 80);\n    Set<Integer> set = createAndPopulateSet(15);\n    LocalDataSet lds = new LocalDataSet(pr1, set);\n\n    QueryObserverImpl observer = new QueryObserverImpl();\n    QueryObserverHolder.setInstance(observer);\n    QueryService qs = pr1.getCache().getQueryService();\n\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", SEPARATOR + \"pr1 e\");\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", SEPARATOR + \"pr2 e\");\n    String query =\n        \"select distinct e1.value from \" + SEPARATOR + \"pr1 e1, \" + SEPARATOR + \"pr2  e2\"\n            + \" where e1.value=e2.value\";\n    DefaultQuery cury = (DefaultQuery) CacheUtils.getQueryService().newQuery(query);\n    final ExecutionContext executionContext =\n        new QueryExecutionContext(null, (InternalCache) cache, cury);\n    SelectResults r = (SelectResults) lds.executeQuery(cury, executionContext, null, set);\n\n    if (!observer.isIndexesUsed) {\n      fail(\"Indexes should have been used\");\n    }\n\n  }\n","date":"2020-05-29 00:37:39","endLine":477,"groupId":"104488","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquijoinPRColocatedQuery_1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/07/5d596ae15e6166f5131238eb8fcf9c32902fac.src","preCode":"  public void testEquijoinPRColocatedQuery_1() throws Exception {\n\n    AttributesFactory factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory().setRedundantCopies(1)\n        .setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).create());\n    PartitionedRegion pr1 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr1\", factory.create());\n    factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory()\n\n        .setRedundantCopies(1).setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).setColocatedWith(pr1.getName()).create());\n\n    final PartitionedRegion pr2 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr2\", factory.create());\n\n    createAllNumPRAndEvenNumPR(pr1, pr2, 80);\n    Set<Integer> set = createAndPopulateSet(15);\n    LocalDataSet lds = new LocalDataSet(pr1, set);\n\n    QueryObserverImpl observer = new QueryObserverImpl();\n    QueryObserverHolder.setInstance(observer);\n    QueryService qs = pr1.getCache().getQueryService();\n\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr1 e\");\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr2 e\");\n    String query =\n        \"select distinct e1.value from /pr1 e1, \" + \"/pr2  e2\" + \" where e1.value=e2.value\";\n    DefaultQuery cury = (DefaultQuery) CacheUtils.getQueryService().newQuery(query);\n    final ExecutionContext executionContext =\n        new QueryExecutionContext(null, (InternalCache) cache, cury);\n    SelectResults r = (SelectResults) lds.executeQuery(cury, executionContext, null, set);\n\n    if (!observer.isIndexesUsed) {\n      fail(\"Indexes should have been used\");\n    }\n\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceRegressionTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":3,"curCode":"  public void testEquijoinPRColocatedQuery_2() throws Exception {\n\n    AttributesFactory factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory().setRedundantCopies(1)\n        .setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).create());\n    PartitionedRegion pr1 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr1\", factory.create());\n    factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory()\n\n        .setRedundantCopies(1).setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).setColocatedWith(pr1.getName()).create());\n\n    final PartitionedRegion pr2 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr2\", factory.create());\n\n    createAllNumPRAndEvenNumPR(pr1, pr2, 80);\n    Set<Integer> set = createAndPopulateSet(15);\n    LocalDataSet lds = new LocalDataSet(pr1, set);\n\n    QueryObserverImpl observer = new QueryObserverImpl();\n    QueryObserverHolder.setInstance(observer);\n    QueryService qs = pr1.getCache().getQueryService();\n\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", SEPARATOR + \"pr1.entries e\");\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", SEPARATOR + \"pr2.entries e\");\n    String query =\n        \"select distinct e1.key from \" + SEPARATOR + \"pr1.entries e1,\" + SEPARATOR\n            + \"pr2.entries  e2\" + \" where e1.value=e2.value\";\n    DefaultQuery cury = (DefaultQuery) CacheUtils.getQueryService().newQuery(query);\n    final ExecutionContext executionContext =\n        new QueryExecutionContext(null, (InternalCache) cache, cury);\n    SelectResults r = (SelectResults) lds.executeQuery(cury, executionContext, null, set);\n\n    if (!observer.isIndexesUsed) {\n      fail(\"Indexes should have been used\");\n    }\n  }\n","date":"2020-05-29 00:37:39","endLine":550,"groupId":"104488","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquijoinPRColocatedQuery_2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/07/5d596ae15e6166f5131238eb8fcf9c32902fac.src","preCode":"  public void testEquijoinPRColocatedQuery_2() throws Exception {\n\n    AttributesFactory factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory().setRedundantCopies(1)\n        .setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).create());\n    PartitionedRegion pr1 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr1\", factory.create());\n    factory = new AttributesFactory();\n    factory.setPartitionAttributes(new PartitionAttributesFactory()\n\n        .setRedundantCopies(1).setTotalNumBuckets(40).setPartitionResolver(new PartitionResolver() {\n\n          @Override\n          public String getName() {\n            return \"blah\";\n          }\n\n          @Override\n          public Serializable getRoutingObject(EntryOperation opDetails) {\n            return (Serializable) opDetails.getKey();\n          }\n\n          @Override\n          public void close() {\n\n        }\n\n        }).setColocatedWith(pr1.getName()).create());\n\n    final PartitionedRegion pr2 =\n        (PartitionedRegion) CacheUtils.getCache().createRegion(\"pr2\", factory.create());\n\n    createAllNumPRAndEvenNumPR(pr1, pr2, 80);\n    Set<Integer> set = createAndPopulateSet(15);\n    LocalDataSet lds = new LocalDataSet(pr1, set);\n\n    QueryObserverImpl observer = new QueryObserverImpl();\n    QueryObserverHolder.setInstance(observer);\n    QueryService qs = pr1.getCache().getQueryService();\n\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr1.entries e\");\n    qs.createIndex(\"valueIndex\", IndexType.FUNCTIONAL, \"e.value\", \"/pr2.entries e\");\n    String query =\n        \"select distinct e1.key from /pr1.entries e1,/pr2.entries  e2\" + \" where e1.value=e2.value\";\n    DefaultQuery cury = (DefaultQuery) CacheUtils.getQueryService().newQuery(query);\n    final ExecutionContext executionContext =\n        new QueryExecutionContext(null, (InternalCache) cache, cury);\n    SelectResults r = (SelectResults) lds.executeQuery(cury, executionContext, null, set);\n\n    if (!observer.isIndexesUsed) {\n      fail(\"Indexes should have been used\");\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/QueryServiceRegressionTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":480,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
