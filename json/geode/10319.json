[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testDurableClientPrimaryUpdate() {\n    \r\n    int serverPort = ((Integer) this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 120; \r\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(durableClientVM.getHost()), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId, durableClientTimeout),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(publisherClientVM.getHost()), serverPort,\n            false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Wait for paused\") {\n      public void run2() throws CacheException {\n        WaitCriterion wc = new WaitCriterion() {\n          public boolean done() {\n            CacheClientProxy proxy = getClientProxy();\n            return proxy != null && proxy.isPaused();\n          }\n\n          public String description() {\n            return \"Proxy was not paused: \" + getClientProxy();\n          }\n        };\n        \r\n        \r\n        Wait.waitForCriterion(wc, 60 * 1000, 1000, true);\n      }\n    });\n\n    \r\n    publishEntries(numberOfEntries);\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        WaitCriterion wc = new WaitCriterion() {\n          String excuse;\n\n          public boolean done() {\n            CacheClientProxy proxy = getClientProxy();\n            if (proxy == null) {\n              excuse = \"No CacheClientProxy\";\n              return false;\n            }\n            \r\n            int sz = proxy.getQueueSize();\n            if (numberOfEntries != sz) {\n              excuse = \"expected = \" + numberOfEntries + \", actual = \" + sz;\n              return false;\n            }\n            return true;\n          }\n\n          public String description() {\n            return excuse;\n          }\n        };\n        \r\n        \r\n        Wait.waitForCriterion(wc, 60 * 1000, 1000, true);\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {\n        getClientPool(NetworkUtils.getServerHostName(durableClientVM.getHost()), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE});\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n        assertEquals(durableClientId, proxy.getDurableId());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","date":"2018-07-18 03:54:18","endLine":722,"groupId":"28569","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDurableClientPrimaryUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/76/8162abc8cbdec3b3bda52515564537fadc2ec4.src","preCode":"  public void testDurableClientPrimaryUpdate() {\n    \r\n    int serverPort = ((Integer) this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 120; \r\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(durableClientVM.getHost()), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId, durableClientTimeout),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(publisherClientVM.getHost()), serverPort,\n            false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Wait for paused\") {\n      public void run2() throws CacheException {\n        WaitCriterion wc = new WaitCriterion() {\n          public boolean done() {\n            CacheClientProxy proxy = getClientProxy();\n            return proxy != null && proxy.isPaused();\n          }\n\n          public String description() {\n            return \"Proxy was not paused: \" + getClientProxy();\n          }\n        };\n        \r\n        \r\n        Wait.waitForCriterion(wc, 60 * 1000, 1000, true);\n      }\n    });\n\n    \r\n    publishEntries(numberOfEntries);\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        WaitCriterion wc = new WaitCriterion() {\n          String excuse;\n\n          public boolean done() {\n            CacheClientProxy proxy = getClientProxy();\n            if (proxy == null) {\n              excuse = \"No CacheClientProxy\";\n              return false;\n            }\n            \r\n            int sz = proxy.getQueueSize();\n            if (numberOfEntries != sz) {\n              excuse = \"expected = \" + numberOfEntries + \", actual = \" + sz;\n              return false;\n            }\n            return true;\n          }\n\n          public String description() {\n            return excuse;\n          }\n        };\n        \r\n        \r\n        Wait.waitForCriterion(wc, 60 * 1000, 1000, true);\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {\n        getClientPool(NetworkUtils.getServerHostName(durableClientVM.getHost()), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE});\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n        assertEquals(durableClientId, proxy.getDurableId());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testStartStopStartDurableClientUpdate() {\n    \r\n    int serverPort = ((Integer) this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(durableClientVM.getHost()), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId, durableClientTimeout),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(publisherClientVM.getHost()), serverPort,\n            false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    \r\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        final CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n        WaitCriterion ev = new WaitCriterion() {\n          public boolean done() {\n            return proxy.isPaused();\n          }\n\n          public String description() {\n            return null;\n          }\n        };\n        Wait.waitForCriterion(ev, 1000, 200, true);\n        assertTrue(proxy.isPaused());\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish more entries\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 0; i < numberOfEntries; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertEquals(numberOfEntries, proxy.getQueueSize());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {\n        getClientPool(NetworkUtils.getServerHostName(durableClientVM.getHost()), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE});\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n        assertEquals(durableClientId, proxy.getDurableId());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","date":"2018-07-18 03:54:18","endLine":888,"groupId":"39893","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartStopStartDurableClientUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/76/8162abc8cbdec3b3bda52515564537fadc2ec4.src","preCode":"  public void testStartStopStartDurableClientUpdate() {\n    \r\n    int serverPort = ((Integer) this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(durableClientVM.getHost()), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId, durableClientTimeout),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(publisherClientVM.getHost()), serverPort,\n            false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    \r\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        final CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n        WaitCriterion ev = new WaitCriterion() {\n          public boolean done() {\n            return proxy.isPaused();\n          }\n\n          public String description() {\n            return null;\n          }\n        };\n        Wait.waitForCriterion(ev, 1000, 200, true);\n        assertTrue(proxy.isPaused());\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish more entries\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 0; i < numberOfEntries; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertEquals(numberOfEntries, proxy.getQueueSize());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {\n        getClientPool(NetworkUtils.getServerHostName(durableClientVM.getHost()), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE});\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n        assertEquals(durableClientId, proxy.getDurableId());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":744,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-07-20 04:46:49","codes":[{"authorDate":"2018-07-20 04:46:49","commitOrder":2,"curCode":"  public void testDurableClientPrimaryUpdate() {\n    \r\n    int serverPort = this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 120; \r\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId, durableClientTimeout),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort,\n            false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Wait for paused\") {\n      public void run2() throws CacheException {\n        \r\n        \r\n        Awaitility.waitAtMost(60, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n          CacheClientProxy proxy = getClientProxy();\n          return proxy != null && proxy.isPaused();\n        });\n      }\n    });\n\n    \r\n    publishEntries(numberOfEntries);\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        \r\n        Awaitility.waitAtMost(60, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n          CacheClientProxy proxy = getClientProxy();\n          if (proxy == null) {\n            return false;\n          }\n          \r\n          int sz = proxy.getQueueSize();\n          return numberOfEntries == sz;\n        });\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {\n        getClientPool(NetworkUtils.getServerHostName(), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE});\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n        assertEquals(durableClientId, proxy.getDurableId());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-07-20 04:46:49","endLine":676,"groupId":"28569","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDurableClientPrimaryUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3f/de87cbe2e68648bca650b7cd09f691efea0908.src","preCode":"  public void testDurableClientPrimaryUpdate() {\n    \r\n    int serverPort = ((Integer) this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 120; \r\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(durableClientVM.getHost()), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId, durableClientTimeout),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(publisherClientVM.getHost()), serverPort,\n            false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Wait for paused\") {\n      public void run2() throws CacheException {\n        WaitCriterion wc = new WaitCriterion() {\n          public boolean done() {\n            CacheClientProxy proxy = getClientProxy();\n            return proxy != null && proxy.isPaused();\n          }\n\n          public String description() {\n            return \"Proxy was not paused: \" + getClientProxy();\n          }\n        };\n        \r\n        \r\n        Wait.waitForCriterion(wc, 60 * 1000, 1000, true);\n      }\n    });\n\n    \r\n    publishEntries(numberOfEntries);\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        WaitCriterion wc = new WaitCriterion() {\n          String excuse;\n\n          public boolean done() {\n            CacheClientProxy proxy = getClientProxy();\n            if (proxy == null) {\n              excuse = \"No CacheClientProxy\";\n              return false;\n            }\n            \r\n            int sz = proxy.getQueueSize();\n            if (numberOfEntries != sz) {\n              excuse = \"expected = \" + numberOfEntries + \", actual = \" + sz;\n              return false;\n            }\n            return true;\n          }\n\n          public String description() {\n            return excuse;\n          }\n        };\n        \r\n        \r\n        Wait.waitForCriterion(wc, 60 * 1000, 1000, true);\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {\n        getClientPool(NetworkUtils.getServerHostName(durableClientVM.getHost()), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE});\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n        assertEquals(durableClientId, proxy.getDurableId());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":549,"status":"M"},{"authorDate":"2018-07-20 04:46:49","commitOrder":2,"curCode":"  public void testStartStopStartDurableClientUpdate() {\n    \r\n    int serverPort = this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId, durableClientTimeout),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort,\n            false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    \r\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        final CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        Awaitility.waitAtMost(1, TimeUnit.SECONDS).pollInterval(200, TimeUnit.MILLISECONDS)\n            .until(proxy::isPaused);\n\n        assertTrue(proxy.isPaused());\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish more entries\") {\n      public void run2() throws CacheException {\n        \r\n        Region<String, String> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 0; i < numberOfEntries; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertEquals(numberOfEntries, proxy.getQueueSize());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {\n        getClientPool(NetworkUtils.getServerHostName(), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE});\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n        assertEquals(durableClientId, proxy.getDurableId());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-07-20 04:46:49","endLine":835,"groupId":"28569","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartStopStartDurableClientUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3f/de87cbe2e68648bca650b7cd09f691efea0908.src","preCode":"  public void testStartStopStartDurableClientUpdate() {\n    \r\n    int serverPort = ((Integer) this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(durableClientVM.getHost()), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId, durableClientTimeout),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(publisherClientVM.getHost()), serverPort,\n            false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    \r\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        final CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n        WaitCriterion ev = new WaitCriterion() {\n          public boolean done() {\n            return proxy.isPaused();\n          }\n\n          public String description() {\n            return null;\n          }\n        };\n        Wait.waitForCriterion(ev, 1000, 200, true);\n        assertTrue(proxy.isPaused());\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish more entries\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 0; i < numberOfEntries; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertEquals(numberOfEntries, proxy.getQueueSize());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {\n        getClientPool(NetworkUtils.getServerHostName(durableClientVM.getHost()), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE});\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n        assertEquals(durableClientId, proxy.getDurableId());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.closeCache());\n\n    \r\n    this.server1VM.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":698,"status":"M"}],"commitId":"053efe9a5d4c17f6b753c2962fd2b73167320487","commitMessage":"@@@GEODE-5428: Fix test and cleanup of warnings. (#2159)\n\n* GEODE-5428: Fix test and cleanup of warnings.\n\nCo-authored-by: Finn Southerland <fsoutherland@pivotal.io>\n\n* GEODE-5428: Intellij Analyze != spotless\n\n* GEODE-1703: fixed a few items that were commented on.\n","date":"2018-07-20 04:46:49","modifiedFileCount":"6","status":"M","submitter":"mhansonp"},{"authorTime":"2018-09-21 01:36:27","codes":[{"authorDate":"2018-09-21 01:36:27","commitOrder":3,"curCode":"  public void testDurableClientPrimaryUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n\n        Awaitility.waitAtMost(60 * HEAVY_TEST_LOAD_DELAY_SUPPORT_MULTIPLIER, SECONDS)\n            .pollInterval(1, SECONDS).until(() -> {\n              CacheClientProxy proxy = getClientProxy();\n              if (proxy == null) {\n                return false;\n              }\n              \r\n              int sz = proxy.getQueueSize();\n              return 1 == sz;\n            });\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-09-21 01:36:27","endLine":297,"groupId":"6263","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDurableClientPrimaryUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/90/d4f7a0115cfe9d6fec81bc13dd96550cd75742.src","preCode":"  public void testDurableClientPrimaryUpdate() {\n    \r\n    int serverPort = this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 120; \r\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId, durableClientTimeout),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort,\n            false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Wait for paused\") {\n      public void run2() throws CacheException {\n        \r\n        \r\n        Awaitility.waitAtMost(60, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n          CacheClientProxy proxy = getClientProxy();\n          return proxy != null && proxy.isPaused();\n        });\n      }\n    });\n\n    \r\n    publishEntries(numberOfEntries);\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        \r\n        Awaitility.waitAtMost(60, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n          CacheClientProxy proxy = getClientProxy();\n          if (proxy == null) {\n            return false;\n          }\n          \r\n          int sz = proxy.getQueueSize();\n          return numberOfEntries == sz;\n        });\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {\n        getClientPool(NetworkUtils.getServerHostName(), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE});\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n        assertEquals(durableClientId, proxy.getDurableId());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"},{"authorDate":"2018-09-21 01:36:27","commitOrder":3,"curCode":"  public void testStartStopStartDurableClientUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n    \r\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        CacheClientProxy proxy = getClientProxy();\n        assertThat(proxy).isNotNull();\n\n        \r\n        assertThat(1).isEqualTo(proxy.getQueueSize());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-09-21 01:36:27","endLine":363,"groupId":"28567","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartStopStartDurableClientUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/90/d4f7a0115cfe9d6fec81bc13dd96550cd75742.src","preCode":"  public void testStartStopStartDurableClientUpdate() {\n    \r\n    int serverPort = this.server1VM\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, Boolean.TRUE));\n\n    \r\n    \r\n    final String durableClientId = getName() + \"_client\";\n    final int durableClientTimeout = 60; \r\n    \r\n    this.durableClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId, durableClientTimeout),\n        Boolean.TRUE));\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Send clientReady\") {\n      public void run2() throws CacheException {\n        CacheServerTestUtil.getClientCache().readyForEvents();\n      }\n    });\n\n    \r\n    this.durableClientVM.invoke(new CacheSerializableRunnable(\"Register interest\") {\n      public void run2() throws CacheException {\n        \r\n        Region region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        region.registerInterestRegex(\".*\", InterestResultPolicy.NONE, true);\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), serverPort,\n            false),\n        regionName));\n\n    \r\n    final int numberOfEntries = 1;\n    publishEntries(numberOfEntries);\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries);\n\n    \r\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        final CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        Awaitility.waitAtMost(1, TimeUnit.SECONDS).pollInterval(200, TimeUnit.MILLISECONDS)\n            .until(proxy::isPaused);\n\n        assertTrue(proxy.isPaused());\n      }\n    });\n\n    \r\n    this.publisherClientVM.invoke(new CacheSerializableRunnable(\"Publish more entries\") {\n      public void run2() throws CacheException {\n        \r\n        Region<String, String> region = CacheServerTestUtil.getCache().getRegion(regionName);\n        assertNotNull(region);\n\n        \r\n        for (int i = 0; i < numberOfEntries; i++) {\n          String keyAndValue = String.valueOf(i);\n          region.put(keyAndValue, keyAndValue);\n        }\n      }\n    });\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      fail(\"interrupted\");\n    }\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertEquals(numberOfEntries, proxy.getQueueSize());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(numberOfEntries);\n\n    \r\n    this.restartDurableClient(new Object[] {\n        getClientPool(NetworkUtils.getServerHostName(), serverPort, true),\n        regionName, getClientDistributedSystemProperties(durableClientId), Boolean.TRUE});\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        checkNumberOfClientProxies(1);\n        CacheClientProxy proxy = getClientProxy();\n        assertNotNull(proxy);\n\n        \r\n        assertTrue(proxy.isDurable());\n        assertEquals(durableClientId, proxy.getDurableId());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdates(numberOfEntries, numberOfEntries);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"}],"commitId":"4da7c59049561588f87bd571213fed6ffede1de5","commitMessage":"@@@GEODE-5428: Refactored DurableClientTests due to massive duplication\n\nThe DurableClientSimpleDUnitTest class was huge and doing three different\ntypes of testing.  so the code was partitioned into classes representing\nthe types.\n\nFurther.  there were some bugs that needed to be addressed in the code.\n\nCo-Authored-By: Galen O'Sullivan <gosullivan@pivotal.io>","date":"2018-09-21 01:36:27","modifiedFileCount":"7","status":"M","submitter":"mhansonp"},{"authorTime":"2018-09-21 01:36:27","codes":[{"authorDate":"2018-10-12 23:40:24","commitOrder":4,"curCode":"  public void testDurableClientPrimaryUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 0);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 1);\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-10-12 23:40:24","endLine":287,"groupId":"28568","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDurableClientPrimaryUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/27/d154fd8481d84e96f2eadc22ab8ca9efae700b.src","preCode":"  public void testDurableClientPrimaryUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n\n        Awaitility.waitAtMost(60 * HEAVY_TEST_LOAD_DELAY_SUPPORT_MULTIPLIER, SECONDS)\n            .pollInterval(1, SECONDS).until(() -> {\n              CacheClientProxy proxy = getClientProxy();\n              if (proxy == null) {\n                return false;\n              }\n              \r\n              int sz = proxy.getQueueSize();\n              return 1 == sz;\n            });\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"},{"authorDate":"2018-09-21 01:36:27","commitOrder":4,"curCode":"  public void testStartStopStartDurableClientUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n    \r\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        CacheClientProxy proxy = getClientProxy();\n        assertThat(proxy).isNotNull();\n\n        \r\n        assertThat(1).isEqualTo(proxy.getQueueSize());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-09-21 01:36:27","endLine":363,"groupId":"28567","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartStopStartDurableClientUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/90/d4f7a0115cfe9d6fec81bc13dd96550cd75742.src","preCode":"  public void testStartStopStartDurableClientUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n    \r\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        CacheClientProxy proxy = getClientProxy();\n        assertThat(proxy).isNotNull();\n\n        \r\n        assertThat(1).isEqualTo(proxy.getQueueSize());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"N"}],"commitId":"f8750125a6fd5f65c5a400e20af1483f4734addb","commitMessage":"@@@GEODE-5858: fix failing DurableClientTestCase on Windows (#2602)\n\n   On windows it is observed that asserting the queue size to be 1\n   fails sometimes as it can be 2. So a wait is added to make sure\n   the queue sz becomes zero before a durable client is restarted.","date":"2018-10-12 23:40:24","modifiedFileCount":"1","status":"M","submitter":"Sai Boorlagadda"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2018-10-12 23:40:24","commitOrder":5,"curCode":"  public void testDurableClientPrimaryUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 0);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 1);\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-10-12 23:40:24","endLine":287,"groupId":"28568","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDurableClientPrimaryUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/27/d154fd8481d84e96f2eadc22ab8ca9efae700b.src","preCode":"  public void testDurableClientPrimaryUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 0);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 1);\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"N"},{"authorDate":"2019-01-12 07:53:54","commitOrder":5,"curCode":"  public void testStartStopStartDurableClientUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n    \r\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        CacheClientProxy proxy = getClientProxy();\n        assertThat(proxy).isNotNull();\n\n        \r\n        assertThat(1).isEqualTo(proxy.getQueueSize());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2019-01-12 07:53:54","endLine":354,"groupId":"28567","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartStopStartDurableClientUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/17/2c4807de920a3912a9977a89929d36b4e1c7b4.src","preCode":"  public void testStartStopStartDurableClientUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n    \r\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      public void run2() throws CacheException {\n        \r\n        CacheClientProxy proxy = getClientProxy();\n        assertThat(proxy).isNotNull();\n\n        \r\n        assertThat(1).isEqualTo(proxy.getQueueSize());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2020-03-03 05:09:07","codes":[{"authorDate":"2018-10-12 23:40:24","commitOrder":6,"curCode":"  public void testDurableClientPrimaryUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 0);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 1);\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-10-12 23:40:24","endLine":287,"groupId":"28568","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDurableClientPrimaryUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/27/d154fd8481d84e96f2eadc22ab8ca9efae700b.src","preCode":"  public void testDurableClientPrimaryUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 0);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 1);\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"N"},{"authorDate":"2020-03-03 05:09:07","commitOrder":6,"curCode":"  public void testStartStopStartDurableClientUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n    \r\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    server1VM.invoke(\"wait for client acknowledgement\", () -> {\n      CacheClientProxy proxy = getClientProxy();\n      await().untilAsserted(\n          () -> assertThat(proxy._messageDispatcher._messageQueue.stats.getEventsRemoved())\n              .isGreaterThan(0));\n    });\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheClientProxy proxy = getClientProxy();\n        assertThat(proxy).isNotNull();\n        \r\n        assertThat(proxy.getQueueSize()).isEqualTo(1);\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2020-03-03 05:09:07","endLine":362,"groupId":"6262","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartStopStartDurableClientUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b4/ce7c7c247ee878250e858a02e83d005797a6dc.src","preCode":"  public void testStartStopStartDurableClientUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n    \r\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        CacheClientProxy proxy = getClientProxy();\n        assertThat(proxy).isNotNull();\n\n        \r\n        assertThat(1).isEqualTo(proxy.getQueueSize());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"0af626462642c6352840cd6e81a5265c74045c7f","commitMessage":"@@@GEODE-7808: standardize on use of HostAndPort to form client-side connections (#4743)\n\n* Squashed merge of feature/GEODE-7808\n\nremoved HostAddress\nrenamed LocatorAddress to HostAndPort\nmodified TcpClient methods to take a HostAndPort argument instead of\nInetAddress\nmodified SocketCreator to take a HostAndPort argument instead of\nInetAddress\n\n* GEODE-7808 - standardize on use of HostAndPort for connection formation\n\nThis continues a previous PR that passed and was approved for merge.\nThis commit raises up several methods from SocketCreator into the\nTcpSocketCreator interface.  This is an intermediate commit.  A\nsubsequent commit will refactor TcpSocketCreator to separate the client\nand server methods for creating server-sockets and client connections to\nserver-sockets.\n\n* refactored socket-creators to separate concerns\n\nServerSocketCreator holds methods for non-client comms\nClientSocketCreator holds methods that clients should use for comms\nAdvancedSocketCreator holds methods for people who need to get around\nthe limitations of the other two interfaces\n\n* adding missing interface\n\n* move code out of inner-classes into first-class classes\n\n* renaming interfaces and methods to be less confusing\n","date":"2020-03-03 05:09:07","modifiedFileCount":"78","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-03-04 03:17:00","codes":[{"authorDate":"2018-10-12 23:40:24","commitOrder":7,"curCode":"  public void testDurableClientPrimaryUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 0);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 1);\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-10-12 23:40:24","endLine":287,"groupId":"28568","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDurableClientPrimaryUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/27/d154fd8481d84e96f2eadc22ab8ca9efae700b.src","preCode":"  public void testDurableClientPrimaryUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 0);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 1);\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"N"},{"authorDate":"2020-03-04 03:17:00","commitOrder":7,"curCode":"  public void testStartStopStartDurableClientUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n    \r\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        CacheClientProxy proxy = getClientProxy();\n        assertThat(proxy).isNotNull();\n\n        \r\n        assertThat(1).isEqualTo(proxy.getQueueSize());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2020-03-04 03:17:00","endLine":357,"groupId":"28567","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartStopStartDurableClientUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/24/073d6e809d5afb669549998847e8924a5163ba.src","preCode":"  public void testStartStopStartDurableClientUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n    \r\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    server1VM.invoke(\"wait for client acknowledgement\", () -> {\n      CacheClientProxy proxy = getClientProxy();\n      await().untilAsserted(\n          () -> assertThat(proxy._messageDispatcher._messageQueue.stats.getEventsRemoved())\n              .isGreaterThan(0));\n    });\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheClientProxy proxy = getClientProxy();\n        assertThat(proxy).isNotNull();\n        \r\n        assertThat(proxy.getQueueSize()).isEqualTo(1);\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"4b06a7ae04e3eb3e32d8a6a96c7eb5e5d3269df0","commitMessage":"@@@Revert \"GEODE-7808: standardize on use of HostAndPort to form client-side connections (#4743)\" (#4761)\n\nThis reverts commit 0af626462642c6352840cd6e81a5265c74045c7f.\nThat commit seems to have caused a severe performance drop in several\nBenchmark tests:\n\norg.apache.geode.benchmark.tests.PartitionedGetBenchmark\n              average ops/second  Baseline:    981794.46  Test:     41239.82  Difference:  -95.8%\norg.apache.geode.benchmark.tests.ReplicatedGetBenchmark\n              average ops/second  Baseline:    972769.18  Test:     41299.96  Difference:  -95.8%\norg.apache.geode.benchmark.tests.PartitionedNonIndexedQueryBenchmark\n              average ops/second  Baseline:        90.05  Test:        70.52  Difference:  -21.7%","date":"2020-03-04 03:17:00","modifiedFileCount":"78","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-03-05 05:06:54","codes":[{"authorDate":"2018-10-12 23:40:24","commitOrder":8,"curCode":"  public void testDurableClientPrimaryUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 0);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 1);\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2018-10-12 23:40:24","endLine":287,"groupId":"10319","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testDurableClientPrimaryUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/27/d154fd8481d84e96f2eadc22ab8ca9efae700b.src","preCode":"  public void testDurableClientPrimaryUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 0);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    waitUntilQueueContainsRequiredNumberOfEvents(this.server1VM, 1);\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"N"},{"authorDate":"2020-03-05 05:06:54","commitOrder":8,"curCode":"  public void testStartStopStartDurableClientUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n    \r\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    server1VM.invoke(\"wait for client acknowledgement\", () -> {\n      CacheClientProxy proxy = getClientProxy();\n      await().untilAsserted(\n          () -> assertThat(proxy._messageDispatcher._messageQueue.stats.getEventsRemoved())\n              .isGreaterThan(0));\n    });\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      @Override\n      public void run2() throws CacheException {\n        CacheClientProxy proxy = getClientProxy();\n        assertThat(proxy).isNotNull();\n        \r\n        assertThat(proxy.getQueueSize()).isEqualTo(1);\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","date":"2020-03-05 05:06:54","endLine":362,"groupId":"10319","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartStopStartDurableClientUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b4/ce7c7c247ee878250e858a02e83d005797a6dc.src","preCode":"  public void testStartStopStartDurableClientUpdate() {\n    startupDurableClientAndServer(VERY_LONG_DURABLE_TIMEOUT_SECONDS);\n    \r\n    registerInterest(this.durableClientVM, regionName, true, InterestResultPolicy.NONE);\n\n    \r\n    this.publisherClientVM.invoke(() -> CacheServerTestUtil.createCacheClient(\n        getClientPool(NetworkUtils.getServerHostName(), server1Port,\n            false),\n        regionName));\n\n    \r\n    publishEntries(0, 1);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.disconnectDurableClient(true);\n\n    \r\n    this.server1VM.invoke(DurableClientTestBase::waitForCacheClientProxyPaused);\n\n    \r\n    publishEntries(1, 1);\n\n    \r\n    this.server1VM.invoke(new CacheSerializableRunnable(\"Verify durable client\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        CacheClientProxy proxy = getClientProxy();\n        assertThat(proxy).isNotNull();\n\n        \r\n        assertThat(1).isEqualTo(proxy.getQueueSize());\n      }\n    });\n\n    \r\n    this.verifyListenerUpdatesDisconnected(1);\n\n    \r\n    this.restartDurableClient(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, Boolean.TRUE);\n\n    \r\n    verifyDurableClientPresent(DistributionConfig.DEFAULT_DURABLE_CLIENT_TIMEOUT, durableClientId,\n        server1VM);\n\n    \r\n    this.checkListenerEvents(1, 1, -1, this.durableClientVM);\n\n    \r\n    this.publisherClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.durableClientVM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n\n    \r\n    this.server1VM.invoke((SerializableRunnableIF) CacheServerTestUtil::closeCache);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientTestCase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"5c2b959e98a6330ecaeddb4d26e11ea29f7a2d7f","commitMessage":"@@@GEODE-7808: standardize on use of HostAndPort for creating connections (#4765)\n\n* Squashed merge of feature/GEODE-7808\n\nremoved HostAddress\nrenamed LocatorAddress to HostAndPort\nmodified TcpClient methods to take a HostAndPort argument instead of\nInetAddress\nmodified SocketCreator to take a HostAndPort argument instead of\nInetAddress\n\n* GEODE-7808 - standardize on use of HostAndPort for connection formation\n\nThis continues a previous PR that passed and was approved for merge.\nThis commit raises up several methods from SocketCreator into the\nTcpSocketCreator interface.  This is an intermediate commit.  A\nsubsequent commit will refactor TcpSocketCreator to separate the client\nand server methods for creating server-sockets and client connections to\nserver-sockets.\n\n* refactored socket-creators to separate concerns\n\nServerSocketCreator holds methods for non-client comms\nClientSocketCreator holds methods that clients should use for comms\nAdvancedSocketCreator holds methods for people who need to get around\nthe limitations of the other two interfaces\n\n* adding missing interface\n\n* move code out of inner-classes into first-class classes\n\n* renaming interfaces and methods to be less confusing\n\n* reinstate SocketCreator ip to hostname cache for performance\n\n* changes from review comments\n","date":"2020-03-05 05:06:54","modifiedFileCount":"80","status":"M","submitter":"Bruce Schuchardt"}]
