[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testTxAlgebra() throws CacheException {\n    TransactionId myTxId;\n    Region<String, String> reg1 = this.region;\n\n    this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    AttributesMutator<String, String> mutator = this.region.getAttributesMutator();\n    CountingCacheListener cntListener = new CountingCacheListener() {\n      volatile int aCreateCalls, aUpdateCalls, aInvalidateCalls, aDestroyCalls, aLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.aCreateCalls = this.aUpdateCalls =\n            this.aInvalidateCalls = this.aDestroyCalls = this.aLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void afterCreate(EntryEvent e) {\n        ++this.aCreateCalls;\n      }\n\n      @Override\n      public void afterUpdate(EntryEvent e) {\n        ++this.aUpdateCalls;\n      }\n\n      @Override\n      public void afterInvalidate(EntryEvent e) {\n        ++this.aInvalidateCalls;\n      }\n\n      @Override\n      public void afterDestroy(EntryEvent e) {\n        if (e.getOperation().isDistributed()) {\n          ++this.aDestroyCalls;\n        } else {\n          ++this.aLocalDestroyCalls;\n        }\n      }\n\n      @Override\n      public void afterRegionInvalidate(RegionEvent e) {\n        fail(\"Unexpected afterRegionInvalidate in testTxAlgebra\");\n      }\n\n      @Override\n      public void afterRegionDestroy(RegionEvent e) {\n        if (!e.getOperation().isClose()) {\n          fail(\"Unexpected afterRegionDestroy in testTxAlgebra\");\n        }\n      }\n\n      @Override\n      public void afterRegionClear(RegionEvent event) {}\n\n      @Override\n      public void afterRegionCreate(RegionEvent event) {}\n\n      @Override\n      public void afterRegionLive(RegionEvent event) {}\n\n      @Override\n      public int getAfterCreateCalls() {\n        return this.aCreateCalls;\n      }\n\n      @Override\n      public int getAfterUpdateCalls() {\n        return this.aUpdateCalls;\n      }\n\n      @Override\n      public int getAfterInvalidateCalls() {\n        return this.aInvalidateCalls;\n      }\n\n      @Override\n      public int getAfterDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.aLocalDestroyCalls : this.aDestroyCalls;\n      }\n    };\n    mutator.addCacheListener(cntListener);\n    CountingCacheWriter cntWriter = new CountingCacheWriter() {\n      int bCreateCalls, bUpdateCalls, bDestroyCalls, bLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.bCreateCalls = this.bUpdateCalls = this.bDestroyCalls = this.bLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void beforeCreate(EntryEvent e) {\n        ++this.bCreateCalls;\n      }\n\n      @Override\n      public void beforeUpdate(EntryEvent e) {\n        ++this.bUpdateCalls;\n      }\n\n      @Override\n      public void beforeDestroy(EntryEvent e) {\n        ++this.bDestroyCalls;\n      }\n\n      @Override\n      public void beforeRegionDestroy(RegionEvent e) {\n        fail(\"Unexpected beforeRegionDestroy in testTxAlgebra\");\n      }\n\n      @Override\n      public void beforeRegionClear(RegionEvent e) {\n        fail(\"Unexpected beforeRegionClear in testTxAlgebra\");\n      }\n\n      @Override\n      public int getBeforeCreateCalls() {\n        return this.bCreateCalls;\n      }\n\n      @Override\n      public int getBeforeUpdateCalls() {\n        return this.bUpdateCalls;\n      }\n\n      @Override\n      public int getBeforeDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.bLocalDestroyCalls : this.bDestroyCalls;\n      }\n    };\n    mutator.setCacheWriter(cntWriter);\n\n    CountingCallBackValidator callbackVal = new CountingCallBackValidator(cntListener, cntWriter);\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    \r\n    callbackVal.assertCreateListenerCnt(0, false);\n    callbackVal.assertUpdateListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    callbackVal.assertDestroyListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(null, reg1.getEntry(\"key1\").getValue());\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    this.txMgr.begin();\n    callbackVal.reset();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    reg1.localInvalidate(\"key1\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      LocalRegion.NonTXEntry nonTXe = (LocalRegion.NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      LocalRegion.NonTXEntry nonTXe = (LocalRegion.NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n  }\n","date":"2018-07-18 03:54:18","endLine":2692,"groupId":"23752","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTxAlgebra","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/19/17b01b01d3fc3425ec8c507a1c5433253f4f99.src","preCode":"  public void testTxAlgebra() throws CacheException {\n    TransactionId myTxId;\n    Region<String, String> reg1 = this.region;\n\n    this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    AttributesMutator<String, String> mutator = this.region.getAttributesMutator();\n    CountingCacheListener cntListener = new CountingCacheListener() {\n      volatile int aCreateCalls, aUpdateCalls, aInvalidateCalls, aDestroyCalls, aLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.aCreateCalls = this.aUpdateCalls =\n            this.aInvalidateCalls = this.aDestroyCalls = this.aLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void afterCreate(EntryEvent e) {\n        ++this.aCreateCalls;\n      }\n\n      @Override\n      public void afterUpdate(EntryEvent e) {\n        ++this.aUpdateCalls;\n      }\n\n      @Override\n      public void afterInvalidate(EntryEvent e) {\n        ++this.aInvalidateCalls;\n      }\n\n      @Override\n      public void afterDestroy(EntryEvent e) {\n        if (e.getOperation().isDistributed()) {\n          ++this.aDestroyCalls;\n        } else {\n          ++this.aLocalDestroyCalls;\n        }\n      }\n\n      @Override\n      public void afterRegionInvalidate(RegionEvent e) {\n        fail(\"Unexpected afterRegionInvalidate in testTxAlgebra\");\n      }\n\n      @Override\n      public void afterRegionDestroy(RegionEvent e) {\n        if (!e.getOperation().isClose()) {\n          fail(\"Unexpected afterRegionDestroy in testTxAlgebra\");\n        }\n      }\n\n      @Override\n      public void afterRegionClear(RegionEvent event) {}\n\n      @Override\n      public void afterRegionCreate(RegionEvent event) {}\n\n      @Override\n      public void afterRegionLive(RegionEvent event) {}\n\n      @Override\n      public int getAfterCreateCalls() {\n        return this.aCreateCalls;\n      }\n\n      @Override\n      public int getAfterUpdateCalls() {\n        return this.aUpdateCalls;\n      }\n\n      @Override\n      public int getAfterInvalidateCalls() {\n        return this.aInvalidateCalls;\n      }\n\n      @Override\n      public int getAfterDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.aLocalDestroyCalls : this.aDestroyCalls;\n      }\n    };\n    mutator.addCacheListener(cntListener);\n    CountingCacheWriter cntWriter = new CountingCacheWriter() {\n      int bCreateCalls, bUpdateCalls, bDestroyCalls, bLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.bCreateCalls = this.bUpdateCalls = this.bDestroyCalls = this.bLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void beforeCreate(EntryEvent e) {\n        ++this.bCreateCalls;\n      }\n\n      @Override\n      public void beforeUpdate(EntryEvent e) {\n        ++this.bUpdateCalls;\n      }\n\n      @Override\n      public void beforeDestroy(EntryEvent e) {\n        ++this.bDestroyCalls;\n      }\n\n      @Override\n      public void beforeRegionDestroy(RegionEvent e) {\n        fail(\"Unexpected beforeRegionDestroy in testTxAlgebra\");\n      }\n\n      @Override\n      public void beforeRegionClear(RegionEvent e) {\n        fail(\"Unexpected beforeRegionClear in testTxAlgebra\");\n      }\n\n      @Override\n      public int getBeforeCreateCalls() {\n        return this.bCreateCalls;\n      }\n\n      @Override\n      public int getBeforeUpdateCalls() {\n        return this.bUpdateCalls;\n      }\n\n      @Override\n      public int getBeforeDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.bLocalDestroyCalls : this.bDestroyCalls;\n      }\n    };\n    mutator.setCacheWriter(cntWriter);\n\n    CountingCallBackValidator callbackVal = new CountingCallBackValidator(cntListener, cntWriter);\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    \r\n    callbackVal.assertCreateListenerCnt(0, false);\n    callbackVal.assertUpdateListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    callbackVal.assertDestroyListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(null, reg1.getEntry(\"key1\").getValue());\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    this.txMgr.begin();\n    callbackVal.reset();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    reg1.localInvalidate(\"key1\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      LocalRegion.NonTXEntry nonTXe = (LocalRegion.NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      LocalRegion.NonTXEntry nonTXe = (LocalRegion.NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/TXJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":963,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testListener() {\n    assertTrue(this.txMgr.getListener() == null);\n    TransactionListener oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    assertTrue(oldListener == null);\n    this.txMgr.begin();\n    TransactionId myTxId = this.txMgr.getTransactionId();\n    assertEquals(0, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    try {\n      assertEquals(0, this.listenerAfterCommit);\n      this.txMgr.commit();\n    } catch (CommitConflictException unexpected) {\n      fail(\"did not expect \" + unexpected);\n    }\n    assertEquals(1, this.listenerAfterCommit);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    assertEquals(0, this.listenerClose);\n    oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 2;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 2;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 2;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 2;\n      }\n    });\n    assertEquals(1, this.listenerClose);\n\n    this.txMgr.begin();\n    assertEquals(1, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(2, this.listenerAfterRollback);\n    this.txMgr.begin();\n    this.txMgr.setListener(oldListener);\n    assertEquals(2, this.listenerClose);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n\n    closeCache();\n    assertEquals(1, this.listenerClose);\n  }\n","date":"2018-07-18 03:54:18","endLine":2928,"groupId":"8085","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/19/17b01b01d3fc3425ec8c507a1c5433253f4f99.src","preCode":"  public void testListener() {\n    assertTrue(this.txMgr.getListener() == null);\n    TransactionListener oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    assertTrue(oldListener == null);\n    this.txMgr.begin();\n    TransactionId myTxId = this.txMgr.getTransactionId();\n    assertEquals(0, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    try {\n      assertEquals(0, this.listenerAfterCommit);\n      this.txMgr.commit();\n    } catch (CommitConflictException unexpected) {\n      fail(\"did not expect \" + unexpected);\n    }\n    assertEquals(1, this.listenerAfterCommit);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    assertEquals(0, this.listenerClose);\n    oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 2;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 2;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 2;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 2;\n      }\n    });\n    assertEquals(1, this.listenerClose);\n\n    this.txMgr.begin();\n    assertEquals(1, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(2, this.listenerAfterRollback);\n    this.txMgr.begin();\n    this.txMgr.setListener(oldListener);\n    assertEquals(2, this.listenerClose);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n\n    closeCache();\n    assertEquals(1, this.listenerClose);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/TXJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2835,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-08-31 07:03:35","commitOrder":2,"curCode":"  public void testTxAlgebra() throws CacheException {\n    TransactionId myTxId;\n    Region<String, String> reg1 = this.region;\n\n    this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    AttributesMutator<String, String> mutator = this.region.getAttributesMutator();\n    CountingCacheListener cntListener = new CountingCacheListener() {\n      volatile int aCreateCalls, aUpdateCalls, aInvalidateCalls, aDestroyCalls, aLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.aCreateCalls = this.aUpdateCalls =\n            this.aInvalidateCalls = this.aDestroyCalls = this.aLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void afterCreate(EntryEvent e) {\n        ++this.aCreateCalls;\n      }\n\n      @Override\n      public void afterUpdate(EntryEvent e) {\n        ++this.aUpdateCalls;\n      }\n\n      @Override\n      public void afterInvalidate(EntryEvent e) {\n        ++this.aInvalidateCalls;\n      }\n\n      @Override\n      public void afterDestroy(EntryEvent e) {\n        if (e.getOperation().isDistributed()) {\n          ++this.aDestroyCalls;\n        } else {\n          ++this.aLocalDestroyCalls;\n        }\n      }\n\n      @Override\n      public void afterRegionInvalidate(RegionEvent e) {\n        fail(\"Unexpected afterRegionInvalidate in testTxAlgebra\");\n      }\n\n      @Override\n      public void afterRegionDestroy(RegionEvent e) {\n        if (!e.getOperation().isClose()) {\n          fail(\"Unexpected afterRegionDestroy in testTxAlgebra\");\n        }\n      }\n\n      @Override\n      public void afterRegionClear(RegionEvent event) {}\n\n      @Override\n      public void afterRegionCreate(RegionEvent event) {}\n\n      @Override\n      public void afterRegionLive(RegionEvent event) {}\n\n      @Override\n      public int getAfterCreateCalls() {\n        return this.aCreateCalls;\n      }\n\n      @Override\n      public int getAfterUpdateCalls() {\n        return this.aUpdateCalls;\n      }\n\n      @Override\n      public int getAfterInvalidateCalls() {\n        return this.aInvalidateCalls;\n      }\n\n      @Override\n      public int getAfterDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.aLocalDestroyCalls : this.aDestroyCalls;\n      }\n    };\n    mutator.addCacheListener(cntListener);\n    CountingCacheWriter cntWriter = new CountingCacheWriter() {\n      int bCreateCalls, bUpdateCalls, bDestroyCalls, bLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.bCreateCalls = this.bUpdateCalls = this.bDestroyCalls = this.bLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void beforeCreate(EntryEvent e) {\n        ++this.bCreateCalls;\n      }\n\n      @Override\n      public void beforeUpdate(EntryEvent e) {\n        ++this.bUpdateCalls;\n      }\n\n      @Override\n      public void beforeDestroy(EntryEvent e) {\n        ++this.bDestroyCalls;\n      }\n\n      @Override\n      public void beforeRegionDestroy(RegionEvent e) {\n        fail(\"Unexpected beforeRegionDestroy in testTxAlgebra\");\n      }\n\n      @Override\n      public void beforeRegionClear(RegionEvent e) {\n        fail(\"Unexpected beforeRegionClear in testTxAlgebra\");\n      }\n\n      @Override\n      public int getBeforeCreateCalls() {\n        return this.bCreateCalls;\n      }\n\n      @Override\n      public int getBeforeUpdateCalls() {\n        return this.bUpdateCalls;\n      }\n\n      @Override\n      public int getBeforeDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.bLocalDestroyCalls : this.bDestroyCalls;\n      }\n    };\n    mutator.setCacheWriter(cntWriter);\n\n    CountingCallBackValidator callbackVal = new CountingCallBackValidator(cntListener, cntWriter);\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    \r\n    callbackVal.assertCreateListenerCnt(0, false);\n    callbackVal.assertUpdateListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    callbackVal.assertDestroyListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(null, reg1.getEntry(\"key1\").getValue());\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    this.txMgr.begin();\n    callbackVal.reset();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    reg1.localInvalidate(\"key1\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      LocalRegion.NonTXEntry nonTXe = (LocalRegion.NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      LocalRegion.NonTXEntry nonTXe = (LocalRegion.NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n  }\n","date":"2018-08-31 07:03:35","endLine":2727,"groupId":"23752","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTxAlgebra","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a6/bda305b564cd76d9e5b1ba031419fa0d56f9fc.src","preCode":"  public void testTxAlgebra() throws CacheException {\n    TransactionId myTxId;\n    Region<String, String> reg1 = this.region;\n\n    this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    AttributesMutator<String, String> mutator = this.region.getAttributesMutator();\n    CountingCacheListener cntListener = new CountingCacheListener() {\n      volatile int aCreateCalls, aUpdateCalls, aInvalidateCalls, aDestroyCalls, aLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.aCreateCalls = this.aUpdateCalls =\n            this.aInvalidateCalls = this.aDestroyCalls = this.aLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void afterCreate(EntryEvent e) {\n        ++this.aCreateCalls;\n      }\n\n      @Override\n      public void afterUpdate(EntryEvent e) {\n        ++this.aUpdateCalls;\n      }\n\n      @Override\n      public void afterInvalidate(EntryEvent e) {\n        ++this.aInvalidateCalls;\n      }\n\n      @Override\n      public void afterDestroy(EntryEvent e) {\n        if (e.getOperation().isDistributed()) {\n          ++this.aDestroyCalls;\n        } else {\n          ++this.aLocalDestroyCalls;\n        }\n      }\n\n      @Override\n      public void afterRegionInvalidate(RegionEvent e) {\n        fail(\"Unexpected afterRegionInvalidate in testTxAlgebra\");\n      }\n\n      @Override\n      public void afterRegionDestroy(RegionEvent e) {\n        if (!e.getOperation().isClose()) {\n          fail(\"Unexpected afterRegionDestroy in testTxAlgebra\");\n        }\n      }\n\n      @Override\n      public void afterRegionClear(RegionEvent event) {}\n\n      @Override\n      public void afterRegionCreate(RegionEvent event) {}\n\n      @Override\n      public void afterRegionLive(RegionEvent event) {}\n\n      @Override\n      public int getAfterCreateCalls() {\n        return this.aCreateCalls;\n      }\n\n      @Override\n      public int getAfterUpdateCalls() {\n        return this.aUpdateCalls;\n      }\n\n      @Override\n      public int getAfterInvalidateCalls() {\n        return this.aInvalidateCalls;\n      }\n\n      @Override\n      public int getAfterDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.aLocalDestroyCalls : this.aDestroyCalls;\n      }\n    };\n    mutator.addCacheListener(cntListener);\n    CountingCacheWriter cntWriter = new CountingCacheWriter() {\n      int bCreateCalls, bUpdateCalls, bDestroyCalls, bLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.bCreateCalls = this.bUpdateCalls = this.bDestroyCalls = this.bLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void beforeCreate(EntryEvent e) {\n        ++this.bCreateCalls;\n      }\n\n      @Override\n      public void beforeUpdate(EntryEvent e) {\n        ++this.bUpdateCalls;\n      }\n\n      @Override\n      public void beforeDestroy(EntryEvent e) {\n        ++this.bDestroyCalls;\n      }\n\n      @Override\n      public void beforeRegionDestroy(RegionEvent e) {\n        fail(\"Unexpected beforeRegionDestroy in testTxAlgebra\");\n      }\n\n      @Override\n      public void beforeRegionClear(RegionEvent e) {\n        fail(\"Unexpected beforeRegionClear in testTxAlgebra\");\n      }\n\n      @Override\n      public int getBeforeCreateCalls() {\n        return this.bCreateCalls;\n      }\n\n      @Override\n      public int getBeforeUpdateCalls() {\n        return this.bUpdateCalls;\n      }\n\n      @Override\n      public int getBeforeDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.bLocalDestroyCalls : this.bDestroyCalls;\n      }\n    };\n    mutator.setCacheWriter(cntWriter);\n\n    CountingCallBackValidator callbackVal = new CountingCallBackValidator(cntListener, cntWriter);\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    \r\n    callbackVal.assertCreateListenerCnt(0, false);\n    callbackVal.assertUpdateListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    callbackVal.assertDestroyListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(null, reg1.getEntry(\"key1\").getValue());\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    this.txMgr.begin();\n    callbackVal.reset();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    reg1.localInvalidate(\"key1\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      LocalRegion.NonTXEntry nonTXe = (LocalRegion.NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      LocalRegion.NonTXEntry nonTXe = (LocalRegion.NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/TXJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":970,"status":"M"},{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public void testListener() {\n    assertTrue(this.txMgr.getListener() == null);\n    TransactionListener oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    assertTrue(oldListener == null);\n    this.txMgr.begin();\n    TransactionId myTxId = this.txMgr.getTransactionId();\n    assertEquals(0, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    try {\n      assertEquals(0, this.listenerAfterCommit);\n      this.txMgr.commit();\n    } catch (CommitConflictException unexpected) {\n      fail(\"did not expect \" + unexpected);\n    }\n    assertEquals(1, this.listenerAfterCommit);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    assertEquals(0, this.listenerClose);\n    oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 2;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 2;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 2;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 2;\n      }\n    });\n    assertEquals(1, this.listenerClose);\n\n    this.txMgr.begin();\n    assertEquals(1, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(2, this.listenerAfterRollback);\n    this.txMgr.begin();\n    this.txMgr.setListener(oldListener);\n    assertEquals(2, this.listenerClose);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n\n    closeCache();\n    assertEquals(1, this.listenerClose);\n  }\n","date":"2018-07-18 03:54:18","endLine":2928,"groupId":"8085","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/19/17b01b01d3fc3425ec8c507a1c5433253f4f99.src","preCode":"  public void testListener() {\n    assertTrue(this.txMgr.getListener() == null);\n    TransactionListener oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    assertTrue(oldListener == null);\n    this.txMgr.begin();\n    TransactionId myTxId = this.txMgr.getTransactionId();\n    assertEquals(0, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    try {\n      assertEquals(0, this.listenerAfterCommit);\n      this.txMgr.commit();\n    } catch (CommitConflictException unexpected) {\n      fail(\"did not expect \" + unexpected);\n    }\n    assertEquals(1, this.listenerAfterCommit);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    assertEquals(0, this.listenerClose);\n    oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 2;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 2;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 2;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 2;\n      }\n    });\n    assertEquals(1, this.listenerClose);\n\n    this.txMgr.begin();\n    assertEquals(1, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(2, this.listenerAfterRollback);\n    this.txMgr.begin();\n    this.txMgr.setListener(oldListener);\n    assertEquals(2, this.listenerClose);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n\n    closeCache();\n    assertEquals(1, this.listenerClose);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/TXJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2835,"status":"N"}],"commitId":"87229631af5d461d3d674682fb34965d0f337e13","commitMessage":"@@@GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase\n\n* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.\n* Cleaned up warnings\n\nCo-Authored-By: Dale Emery <demery@pivotal.io>\nCo-Authored-By: Mark Hanson <mhanson@pivotal.io>\n\n","date":"2018-08-31 07:03:35","modifiedFileCount":"19","status":"M","submitter":"mhansonp"},{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2019-02-01 04:04:01","commitOrder":3,"curCode":"  public void testTxAlgebra() throws CacheException {\n    TransactionId myTxId;\n    Region<String, String> reg1 = this.region;\n\n    this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    AttributesMutator<String, String> mutator = this.region.getAttributesMutator();\n    CountingCacheListener cntListener = new CountingCacheListener() {\n      volatile int aCreateCalls, aUpdateCalls, aInvalidateCalls, aDestroyCalls, aLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.aCreateCalls = this.aUpdateCalls =\n            this.aInvalidateCalls = this.aDestroyCalls = this.aLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void afterCreate(EntryEvent e) {\n        ++this.aCreateCalls;\n      }\n\n      @Override\n      public void afterUpdate(EntryEvent e) {\n        ++this.aUpdateCalls;\n      }\n\n      @Override\n      public void afterInvalidate(EntryEvent e) {\n        ++this.aInvalidateCalls;\n      }\n\n      @Override\n      public void afterDestroy(EntryEvent e) {\n        if (e.getOperation().isDistributed()) {\n          ++this.aDestroyCalls;\n        } else {\n          ++this.aLocalDestroyCalls;\n        }\n      }\n\n      @Override\n      public void afterRegionInvalidate(RegionEvent e) {\n        fail(\"Unexpected afterRegionInvalidate in testTxAlgebra\");\n      }\n\n      @Override\n      public void afterRegionDestroy(RegionEvent e) {\n        if (!e.getOperation().isClose()) {\n          fail(\"Unexpected afterRegionDestroy in testTxAlgebra\");\n        }\n      }\n\n      @Override\n      public void afterRegionClear(RegionEvent event) {}\n\n      @Override\n      public void afterRegionCreate(RegionEvent event) {}\n\n      @Override\n      public void afterRegionLive(RegionEvent event) {}\n\n      @Override\n      public int getAfterCreateCalls() {\n        return this.aCreateCalls;\n      }\n\n      @Override\n      public int getAfterUpdateCalls() {\n        return this.aUpdateCalls;\n      }\n\n      @Override\n      public int getAfterInvalidateCalls() {\n        return this.aInvalidateCalls;\n      }\n\n      @Override\n      public int getAfterDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.aLocalDestroyCalls : this.aDestroyCalls;\n      }\n    };\n    mutator.addCacheListener(cntListener);\n    CountingCacheWriter cntWriter = new CountingCacheWriter() {\n      int bCreateCalls, bUpdateCalls, bDestroyCalls, bLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.bCreateCalls = this.bUpdateCalls = this.bDestroyCalls = this.bLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void beforeCreate(EntryEvent e) {\n        ++this.bCreateCalls;\n      }\n\n      @Override\n      public void beforeUpdate(EntryEvent e) {\n        ++this.bUpdateCalls;\n      }\n\n      @Override\n      public void beforeDestroy(EntryEvent e) {\n        ++this.bDestroyCalls;\n      }\n\n      @Override\n      public void beforeRegionDestroy(RegionEvent e) {\n        fail(\"Unexpected beforeRegionDestroy in testTxAlgebra\");\n      }\n\n      @Override\n      public void beforeRegionClear(RegionEvent e) {\n        fail(\"Unexpected beforeRegionClear in testTxAlgebra\");\n      }\n\n      @Override\n      public int getBeforeCreateCalls() {\n        return this.bCreateCalls;\n      }\n\n      @Override\n      public int getBeforeUpdateCalls() {\n        return this.bUpdateCalls;\n      }\n\n      @Override\n      public int getBeforeDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.bLocalDestroyCalls : this.bDestroyCalls;\n      }\n    };\n    mutator.setCacheWriter(cntWriter);\n\n    CountingCallBackValidator callbackVal = new CountingCallBackValidator(cntListener, cntWriter);\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    \r\n    callbackVal.assertCreateListenerCnt(0, false);\n    callbackVal.assertUpdateListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    callbackVal.assertDestroyListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(null, reg1.getEntry(\"key1\").getValue());\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    this.txMgr.begin();\n    callbackVal.reset();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    reg1.localInvalidate(\"key1\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      LocalRegion.NonTXEntry nonTXe = (LocalRegion.NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      LocalRegion.NonTXEntry nonTXe = (LocalRegion.NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n  }\n","date":"2019-02-02 01:43:11","endLine":2739,"groupId":"23752","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTxAlgebra","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/58/5cb363c69c7779f0778fa961dee0cdf4860df9.src","preCode":"  public void testTxAlgebra() throws CacheException {\n    TransactionId myTxId;\n    Region<String, String> reg1 = this.region;\n\n    this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    AttributesMutator<String, String> mutator = this.region.getAttributesMutator();\n    CountingCacheListener cntListener = new CountingCacheListener() {\n      volatile int aCreateCalls, aUpdateCalls, aInvalidateCalls, aDestroyCalls, aLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.aCreateCalls = this.aUpdateCalls =\n            this.aInvalidateCalls = this.aDestroyCalls = this.aLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void afterCreate(EntryEvent e) {\n        ++this.aCreateCalls;\n      }\n\n      @Override\n      public void afterUpdate(EntryEvent e) {\n        ++this.aUpdateCalls;\n      }\n\n      @Override\n      public void afterInvalidate(EntryEvent e) {\n        ++this.aInvalidateCalls;\n      }\n\n      @Override\n      public void afterDestroy(EntryEvent e) {\n        if (e.getOperation().isDistributed()) {\n          ++this.aDestroyCalls;\n        } else {\n          ++this.aLocalDestroyCalls;\n        }\n      }\n\n      @Override\n      public void afterRegionInvalidate(RegionEvent e) {\n        fail(\"Unexpected afterRegionInvalidate in testTxAlgebra\");\n      }\n\n      @Override\n      public void afterRegionDestroy(RegionEvent e) {\n        if (!e.getOperation().isClose()) {\n          fail(\"Unexpected afterRegionDestroy in testTxAlgebra\");\n        }\n      }\n\n      @Override\n      public void afterRegionClear(RegionEvent event) {}\n\n      @Override\n      public void afterRegionCreate(RegionEvent event) {}\n\n      @Override\n      public void afterRegionLive(RegionEvent event) {}\n\n      @Override\n      public int getAfterCreateCalls() {\n        return this.aCreateCalls;\n      }\n\n      @Override\n      public int getAfterUpdateCalls() {\n        return this.aUpdateCalls;\n      }\n\n      @Override\n      public int getAfterInvalidateCalls() {\n        return this.aInvalidateCalls;\n      }\n\n      @Override\n      public int getAfterDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.aLocalDestroyCalls : this.aDestroyCalls;\n      }\n    };\n    mutator.addCacheListener(cntListener);\n    CountingCacheWriter cntWriter = new CountingCacheWriter() {\n      int bCreateCalls, bUpdateCalls, bDestroyCalls, bLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.bCreateCalls = this.bUpdateCalls = this.bDestroyCalls = this.bLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void beforeCreate(EntryEvent e) {\n        ++this.bCreateCalls;\n      }\n\n      @Override\n      public void beforeUpdate(EntryEvent e) {\n        ++this.bUpdateCalls;\n      }\n\n      @Override\n      public void beforeDestroy(EntryEvent e) {\n        ++this.bDestroyCalls;\n      }\n\n      @Override\n      public void beforeRegionDestroy(RegionEvent e) {\n        fail(\"Unexpected beforeRegionDestroy in testTxAlgebra\");\n      }\n\n      @Override\n      public void beforeRegionClear(RegionEvent e) {\n        fail(\"Unexpected beforeRegionClear in testTxAlgebra\");\n      }\n\n      @Override\n      public int getBeforeCreateCalls() {\n        return this.bCreateCalls;\n      }\n\n      @Override\n      public int getBeforeUpdateCalls() {\n        return this.bUpdateCalls;\n      }\n\n      @Override\n      public int getBeforeDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.bLocalDestroyCalls : this.bDestroyCalls;\n      }\n    };\n    mutator.setCacheWriter(cntWriter);\n\n    CountingCallBackValidator callbackVal = new CountingCallBackValidator(cntListener, cntWriter);\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    \r\n    callbackVal.assertCreateListenerCnt(0, false);\n    callbackVal.assertUpdateListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    callbackVal.assertDestroyListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(null, reg1.getEntry(\"key1\").getValue());\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    this.txMgr.begin();\n    callbackVal.reset();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    reg1.localInvalidate(\"key1\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      LocalRegion.NonTXEntry nonTXe = (LocalRegion.NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      LocalRegion.NonTXEntry nonTXe = (LocalRegion.NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<String, String>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/TXJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":982,"status":"M"},{"authorDate":"2018-07-18 03:54:18","commitOrder":3,"curCode":"  public void testListener() {\n    assertTrue(this.txMgr.getListener() == null);\n    TransactionListener oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    assertTrue(oldListener == null);\n    this.txMgr.begin();\n    TransactionId myTxId = this.txMgr.getTransactionId();\n    assertEquals(0, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    try {\n      assertEquals(0, this.listenerAfterCommit);\n      this.txMgr.commit();\n    } catch (CommitConflictException unexpected) {\n      fail(\"did not expect \" + unexpected);\n    }\n    assertEquals(1, this.listenerAfterCommit);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    assertEquals(0, this.listenerClose);\n    oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 2;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 2;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 2;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 2;\n      }\n    });\n    assertEquals(1, this.listenerClose);\n\n    this.txMgr.begin();\n    assertEquals(1, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(2, this.listenerAfterRollback);\n    this.txMgr.begin();\n    this.txMgr.setListener(oldListener);\n    assertEquals(2, this.listenerClose);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n\n    closeCache();\n    assertEquals(1, this.listenerClose);\n  }\n","date":"2018-07-18 03:54:18","endLine":2928,"groupId":"8085","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/19/17b01b01d3fc3425ec8c507a1c5433253f4f99.src","preCode":"  public void testListener() {\n    assertTrue(this.txMgr.getListener() == null);\n    TransactionListener oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    assertTrue(oldListener == null);\n    this.txMgr.begin();\n    TransactionId myTxId = this.txMgr.getTransactionId();\n    assertEquals(0, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    try {\n      assertEquals(0, this.listenerAfterCommit);\n      this.txMgr.commit();\n    } catch (CommitConflictException unexpected) {\n      fail(\"did not expect \" + unexpected);\n    }\n    assertEquals(1, this.listenerAfterCommit);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    assertEquals(0, this.listenerClose);\n    oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 2;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 2;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 2;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 2;\n      }\n    });\n    assertEquals(1, this.listenerClose);\n\n    this.txMgr.begin();\n    assertEquals(1, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(2, this.listenerAfterRollback);\n    this.txMgr.begin();\n    this.txMgr.setListener(oldListener);\n    assertEquals(2, this.listenerClose);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n\n    closeCache();\n    assertEquals(1, this.listenerClose);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/TXJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2835,"status":"N"}],"commitId":"657458c6078aa874bff0e969b8d59663f60744c4","commitMessage":"@@@GEODE-6339: Revert TransactionEvent Generification\n","date":"2019-02-02 01:43:11","modifiedFileCount":"7","status":"M","submitter":"Dale Emery"},{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2019-03-21 07:20:55","commitOrder":4,"curCode":"  public void testTxAlgebra() throws CacheException {\n    TransactionId myTxId;\n    Region<String, String> reg1 = this.region;\n\n    this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    AttributesMutator<String, String> mutator = this.region.getAttributesMutator();\n    CountingCacheListener cntListener = new CountingCacheListener() {\n      volatile int aCreateCalls, aUpdateCalls, aInvalidateCalls, aDestroyCalls, aLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.aCreateCalls = this.aUpdateCalls =\n            this.aInvalidateCalls = this.aDestroyCalls = this.aLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void afterCreate(EntryEvent e) {\n        ++this.aCreateCalls;\n      }\n\n      @Override\n      public void afterUpdate(EntryEvent e) {\n        ++this.aUpdateCalls;\n      }\n\n      @Override\n      public void afterInvalidate(EntryEvent e) {\n        ++this.aInvalidateCalls;\n      }\n\n      @Override\n      public void afterDestroy(EntryEvent e) {\n        if (e.getOperation().isDistributed()) {\n          ++this.aDestroyCalls;\n        } else {\n          ++this.aLocalDestroyCalls;\n        }\n      }\n\n      @Override\n      public void afterRegionInvalidate(RegionEvent e) {\n        fail(\"Unexpected afterRegionInvalidate in testTxAlgebra\");\n      }\n\n      @Override\n      public void afterRegionDestroy(RegionEvent e) {\n        if (!e.getOperation().isClose()) {\n          fail(\"Unexpected afterRegionDestroy in testTxAlgebra\");\n        }\n      }\n\n      @Override\n      public void afterRegionClear(RegionEvent event) {}\n\n      @Override\n      public void afterRegionCreate(RegionEvent event) {}\n\n      @Override\n      public void afterRegionLive(RegionEvent event) {}\n\n      @Override\n      public int getAfterCreateCalls() {\n        return this.aCreateCalls;\n      }\n\n      @Override\n      public int getAfterUpdateCalls() {\n        return this.aUpdateCalls;\n      }\n\n      @Override\n      public int getAfterInvalidateCalls() {\n        return this.aInvalidateCalls;\n      }\n\n      @Override\n      public int getAfterDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.aLocalDestroyCalls : this.aDestroyCalls;\n      }\n    };\n    mutator.addCacheListener(cntListener);\n    CountingCacheWriter cntWriter = new CountingCacheWriter() {\n      int bCreateCalls, bUpdateCalls, bDestroyCalls, bLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.bCreateCalls = this.bUpdateCalls = this.bDestroyCalls = this.bLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void beforeCreate(EntryEvent e) {\n        ++this.bCreateCalls;\n      }\n\n      @Override\n      public void beforeUpdate(EntryEvent e) {\n        ++this.bUpdateCalls;\n      }\n\n      @Override\n      public void beforeDestroy(EntryEvent e) {\n        ++this.bDestroyCalls;\n      }\n\n      @Override\n      public void beforeRegionDestroy(RegionEvent e) {\n        fail(\"Unexpected beforeRegionDestroy in testTxAlgebra\");\n      }\n\n      @Override\n      public void beforeRegionClear(RegionEvent e) {\n        fail(\"Unexpected beforeRegionClear in testTxAlgebra\");\n      }\n\n      @Override\n      public int getBeforeCreateCalls() {\n        return this.bCreateCalls;\n      }\n\n      @Override\n      public int getBeforeUpdateCalls() {\n        return this.bUpdateCalls;\n      }\n\n      @Override\n      public int getBeforeDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.bLocalDestroyCalls : this.bDestroyCalls;\n      }\n    };\n    mutator.setCacheWriter(cntWriter);\n\n    CountingCallBackValidator callbackVal = new CountingCallBackValidator(cntListener, cntWriter);\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    \r\n    callbackVal.assertCreateListenerCnt(0, false);\n    callbackVal.assertUpdateListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    callbackVal.assertDestroyListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(null, reg1.getEntry(\"key1\").getValue());\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    this.txMgr.begin();\n    callbackVal.reset();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    reg1.localInvalidate(\"key1\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      NonTXEntry nonTXe = (NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      NonTXEntry nonTXe = (NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n  }\n","date":"2019-03-21 07:20:55","endLine":2740,"groupId":"104387","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTxAlgebra","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/17/38f4f4cdf265c00adbfde604ff027acdaca28e.src","preCode":"  public void testTxAlgebra() throws CacheException {\n    TransactionId myTxId;\n    Region<String, String> reg1 = this.region;\n\n    this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    AttributesMutator<String, String> mutator = this.region.getAttributesMutator();\n    CountingCacheListener cntListener = new CountingCacheListener() {\n      volatile int aCreateCalls, aUpdateCalls, aInvalidateCalls, aDestroyCalls, aLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.aCreateCalls = this.aUpdateCalls =\n            this.aInvalidateCalls = this.aDestroyCalls = this.aLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void afterCreate(EntryEvent e) {\n        ++this.aCreateCalls;\n      }\n\n      @Override\n      public void afterUpdate(EntryEvent e) {\n        ++this.aUpdateCalls;\n      }\n\n      @Override\n      public void afterInvalidate(EntryEvent e) {\n        ++this.aInvalidateCalls;\n      }\n\n      @Override\n      public void afterDestroy(EntryEvent e) {\n        if (e.getOperation().isDistributed()) {\n          ++this.aDestroyCalls;\n        } else {\n          ++this.aLocalDestroyCalls;\n        }\n      }\n\n      @Override\n      public void afterRegionInvalidate(RegionEvent e) {\n        fail(\"Unexpected afterRegionInvalidate in testTxAlgebra\");\n      }\n\n      @Override\n      public void afterRegionDestroy(RegionEvent e) {\n        if (!e.getOperation().isClose()) {\n          fail(\"Unexpected afterRegionDestroy in testTxAlgebra\");\n        }\n      }\n\n      @Override\n      public void afterRegionClear(RegionEvent event) {}\n\n      @Override\n      public void afterRegionCreate(RegionEvent event) {}\n\n      @Override\n      public void afterRegionLive(RegionEvent event) {}\n\n      @Override\n      public int getAfterCreateCalls() {\n        return this.aCreateCalls;\n      }\n\n      @Override\n      public int getAfterUpdateCalls() {\n        return this.aUpdateCalls;\n      }\n\n      @Override\n      public int getAfterInvalidateCalls() {\n        return this.aInvalidateCalls;\n      }\n\n      @Override\n      public int getAfterDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.aLocalDestroyCalls : this.aDestroyCalls;\n      }\n    };\n    mutator.addCacheListener(cntListener);\n    CountingCacheWriter cntWriter = new CountingCacheWriter() {\n      int bCreateCalls, bUpdateCalls, bDestroyCalls, bLocalDestroyCalls;\n\n      @Override\n      public void close() {}\n\n      @Override\n      public void reset() {\n        this.bCreateCalls = this.bUpdateCalls = this.bDestroyCalls = this.bLocalDestroyCalls = 0;\n      }\n\n      @Override\n      public void beforeCreate(EntryEvent e) {\n        ++this.bCreateCalls;\n      }\n\n      @Override\n      public void beforeUpdate(EntryEvent e) {\n        ++this.bUpdateCalls;\n      }\n\n      @Override\n      public void beforeDestroy(EntryEvent e) {\n        ++this.bDestroyCalls;\n      }\n\n      @Override\n      public void beforeRegionDestroy(RegionEvent e) {\n        fail(\"Unexpected beforeRegionDestroy in testTxAlgebra\");\n      }\n\n      @Override\n      public void beforeRegionClear(RegionEvent e) {\n        fail(\"Unexpected beforeRegionClear in testTxAlgebra\");\n      }\n\n      @Override\n      public int getBeforeCreateCalls() {\n        return this.bCreateCalls;\n      }\n\n      @Override\n      public int getBeforeUpdateCalls() {\n        return this.bUpdateCalls;\n      }\n\n      @Override\n      public int getBeforeDestroyCalls(boolean fetchLocal) {\n        return fetchLocal ? this.bLocalDestroyCalls : this.bDestroyCalls;\n      }\n    };\n    mutator.setCacheWriter(cntWriter);\n\n    CountingCallBackValidator callbackVal = new CountingCallBackValidator(cntListener, cntWriter);\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    \r\n    callbackVal.assertCreateListenerCnt(0, false);\n    callbackVal.assertUpdateListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(1, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    callbackVal.assertDestroyListenerCnt(0);\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n\n    \r\n    \r\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.assertCreateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    try {\n      reg1.create(\"key1\", \"value2\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(null, reg1.getEntry(\"key1\").getValue());\n    assertTrue(!reg1.containsValueForKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"ex\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(2);\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(reg1.containsKey(\"key1\"));\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1,  false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.invalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    this.txMgr.begin();\n    callbackVal.reset();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    try {\n      reg1.create(\"key1\", \"value1\");\n      fail(\"expected EntryExistsException\");\n    } catch (EntryExistsException ok) {\n    }\n    callbackVal.assertCreateWriterCnt(0);\n    reg1.put(\"key1\", \"value2\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.reAssert();\n    assertEquals(\"value2\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events = TxEventTestUtil.getPutEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value2\", ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(1);\n    callbackVal.reAssert();\n    assertTrue(!reg1.containsKey(\"key1\"));\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getDestroyEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(null, ev.getNewValue());\n        assertEquals(\"value0\", ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    \r\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    assertTrue(!reg1.containsKey(\"key1\"));\n    try {\n      reg1.localDestroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertLocalDestroyWriterCnt(1,  false);\n    try {\n      reg1.destroy(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertDestroyWriterCnt(0);\n    try {\n      reg1.localInvalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    try {\n      reg1.invalidate(\"key1\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException ok) {\n    }\n    callbackVal.assertInvalidateCnt(0,  false);\n    reg1.create(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localInvalidate(\"key1\", \"value1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value3\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value3\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value3\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    reg1.localInvalidate(\"key1\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.invalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertUpdateListenerCnt(0);\n    callbackVal.assertInvalidateCnt(1);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      LocalRegion.NonTXEntry nonTXe = (LocalRegion.NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n\n    \r\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertUpdateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    reg1.localInvalidate(\"key1\");\n    callbackVal.assertInvalidateCnt(0, false);\n    this.txMgr.commit();\n    callbackVal.assertInvalidateCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.reAssert();\n    assertNull(reg1.getEntry(\"key1\").getValue());\n    {\n      \r\n      LocalRegion.NonTXEntry nonTXe = (LocalRegion.NonTXEntry) reg1.getEntry(\"key1\");\n      assertTrue(nonTXe.getRegionEntry().isInvalid());\n    }\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getInvalidateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertNull(ev.getNewValue());\n        assertNull(ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(!ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.destroy(\"key1\");\n    callbackVal.assertDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.create(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n\n    \r\n    reg1.create(\"key1\", \"value0\");\n    callbackVal.reset();\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    reg1.localDestroy(\"key1\");\n    callbackVal.assertLocalDestroyWriterCnt(1);\n    reg1.put(\"key1\", \"value1\");\n    callbackVal.assertCreateWriterCnt(1);\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    this.txMgr.commit();\n    callbackVal.assertLocalDestroyListenerCnt(0);\n    callbackVal.assertCreateListenerCnt(0);\n    callbackVal.assertUpdateListenerCnt(1);\n    callbackVal.reAssert();\n    assertEquals(\"value1\", reg1.getEntry(\"key1\").getValue());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(1, this.te.getEvents().size());\n    {\n      List<EntryEvent<?, ?>> events =\n          TxEventTestUtil.getCreateEvents(this.te.getEvents());\n      assertEquals(myTxId, this.te.getTransactionId());\n      assertEquals(1, events.size());\n\n      for (EntryEvent ev : events) {\n        assertEquals(myTxId, ev.getTransactionId());\n        assertTrue(ev.getRegion() == reg1);\n        assertEquals(\"key1\", ev.getKey());\n        assertEquals(\"value1\", ev.getNewValue());\n        assertEquals(null, ev.getOldValue());\n        verifyEventProps(ev);\n        assertEquals(null, ev.getCallbackArgument());\n        assertEquals(true, ev.isCallbackArgumentAvailable());\n        assertTrue(!ev.isOriginRemote());\n        assertTrue(!ev.getOperation().isExpiration());\n        assertTrue(ev.getOperation().isDistributed());\n      }\n    }\n    reg1.localDestroy(\"key1\");\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/TXJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":983,"status":"M"},{"authorDate":"2018-07-18 03:54:18","commitOrder":4,"curCode":"  public void testListener() {\n    assertTrue(this.txMgr.getListener() == null);\n    TransactionListener oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    assertTrue(oldListener == null);\n    this.txMgr.begin();\n    TransactionId myTxId = this.txMgr.getTransactionId();\n    assertEquals(0, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    try {\n      assertEquals(0, this.listenerAfterCommit);\n      this.txMgr.commit();\n    } catch (CommitConflictException unexpected) {\n      fail(\"did not expect \" + unexpected);\n    }\n    assertEquals(1, this.listenerAfterCommit);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    assertEquals(0, this.listenerClose);\n    oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 2;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 2;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 2;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 2;\n      }\n    });\n    assertEquals(1, this.listenerClose);\n\n    this.txMgr.begin();\n    assertEquals(1, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(2, this.listenerAfterRollback);\n    this.txMgr.begin();\n    this.txMgr.setListener(oldListener);\n    assertEquals(2, this.listenerClose);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n\n    closeCache();\n    assertEquals(1, this.listenerClose);\n  }\n","date":"2018-07-18 03:54:18","endLine":2928,"groupId":"104387","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/19/17b01b01d3fc3425ec8c507a1c5433253f4f99.src","preCode":"  public void testListener() {\n    assertTrue(this.txMgr.getListener() == null);\n    TransactionListener oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 1;\n        te = event;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 1;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 1;\n      }\n    });\n    assertTrue(oldListener == null);\n    this.txMgr.begin();\n    TransactionId myTxId = this.txMgr.getTransactionId();\n    assertEquals(0, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    this.txMgr.begin();\n    myTxId = this.txMgr.getTransactionId();\n    try {\n      assertEquals(0, this.listenerAfterCommit);\n      this.txMgr.commit();\n    } catch (CommitConflictException unexpected) {\n      fail(\"did not expect \" + unexpected);\n    }\n    assertEquals(1, this.listenerAfterCommit);\n    assertEquals(0, TxEventTestUtil.getCreateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getPutEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getInvalidateEvents(this.te.getEvents()).size());\n    assertEquals(0, TxEventTestUtil.getDestroyEvents(this.te.getEvents()).size());\n    assertEquals(0, this.te.getEvents().size());\n    assertEquals(myTxId, this.te.getTransactionId());\n\n    assertEquals(0, this.listenerClose);\n    oldListener = this.txMgr.setListener(new TransactionListener() {\n      @Override\n      public void afterCommit(TransactionEvent event) {\n        listenerAfterCommit = 2;\n        te = event;\n      }\n\n      @Override\n      public void afterFailedCommit(TransactionEvent event) {\n        listenerAfterFailedCommit = 2;\n      }\n\n      @Override\n      public void afterRollback(TransactionEvent event) {\n        listenerAfterRollback = 2;\n        te = event;\n      }\n\n      @Override\n      public void close() {\n        listenerClose = 2;\n      }\n    });\n    assertEquals(1, this.listenerClose);\n\n    this.txMgr.begin();\n    assertEquals(1, this.listenerAfterRollback);\n    this.txMgr.rollback();\n    assertEquals(2, this.listenerAfterRollback);\n    this.txMgr.begin();\n    this.txMgr.setListener(oldListener);\n    assertEquals(2, this.listenerClose);\n    this.txMgr.rollback();\n    assertEquals(1, this.listenerAfterRollback);\n\n    closeCache();\n    assertEquals(1, this.listenerClose);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/TXJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2835,"status":"N"}],"commitId":"77fe516d82678097a5aa222f4fce4f87664aa7df","commitMessage":"@@@GEODE-6534: Extract NonTXEntry from LocalRegion (#3319)\n\n","date":"2019-03-21 07:20:55","modifiedFileCount":"27","status":"M","submitter":"Kirk Lund"}]
