[{"authorTime":"2019-12-21 13:14:49","codes":[{"authorDate":"2019-12-21 13:14:49","commitOrder":1,"curCode":"  public void createAndDeleteIndex_success_for_specific_group() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    region.setGroup(\"group1\");\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/region2\", 1);\n\n    Index index = new Index();\n    index.setName(\"index\");\n    index.setExpression(\"key\");\n    index.setRegionPath(\"/region2\");\n    index.setGroup(\"group1\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getConfigResult();\n    List<IndexInfo> runtimeResult = indexResult.getRuntimeResult();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: region path\")\n          .isEqualTo(\"/region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).extracting(IndexInfo::getMemberName)\n          .as(\"index create: runtime server\")\n          .containsExactlyInAnyOrder(\"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    region.setGroup(null);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"delete index confirmation\")\n          .hasMessageContaining(\"Index 'index' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"delete region confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","date":"2019-12-21 13:14:49","endLine":287,"groupId":"19045","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createAndDeleteIndex_success_for_specific_group","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c6/af59523fead95349ea02f0ccc1c3903cf1f674.src","preCode":"  public void createAndDeleteIndex_success_for_specific_group() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    region.setGroup(\"group1\");\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/region2\", 1);\n\n    Index index = new Index();\n    index.setName(\"index\");\n    index.setExpression(\"key\");\n    index.setRegionPath(\"/region2\");\n    index.setGroup(\"group1\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getConfigResult();\n    List<IndexInfo> runtimeResult = indexResult.getRuntimeResult();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: region path\")\n          .isEqualTo(\"/region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).extracting(IndexInfo::getMemberName)\n          .as(\"index create: runtime server\")\n          .containsExactlyInAnyOrder(\"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    region.setGroup(null);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"delete index confirmation\")\n          .hasMessageContaining(\"Index 'index' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"delete region confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"B"},{"authorDate":"2019-12-21 13:14:49","commitOrder":1,"curCode":"  public void createAndDeleteIndex_success_for_cluster() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/region2\", 3);\n\n    Index index = new Index();\n    index.setName(\"index.1\");\n    index.setExpression(\"key\");\n    index.setRegionPath(\"/region2\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getConfigResult();\n    List<IndexInfo> runtimeResult = indexResult.getRuntimeResult();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index.1\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: index path\")\n          .isEqualTo(\"/region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: index expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).as(\"index create: runtime servers\")\n          .extracting(IndexInfo::getMemberName)\n          .containsExactlyInAnyOrder(\"server-1\", \"server-2\", \"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"index delete confirmation\")\n          .hasMessageContaining(\"Index 'index.1' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"region delete confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","date":"2019-12-21 13:14:49","endLine":331,"groupId":"19047","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createAndDeleteIndex_success_for_cluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c6/af59523fead95349ea02f0ccc1c3903cf1f674.src","preCode":"  public void createAndDeleteIndex_success_for_cluster() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/region2\", 3);\n\n    Index index = new Index();\n    index.setName(\"index.1\");\n    index.setExpression(\"key\");\n    index.setRegionPath(\"/region2\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getConfigResult();\n    List<IndexInfo> runtimeResult = indexResult.getRuntimeResult();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index.1\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: index path\")\n          .isEqualTo(\"/region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: index expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).as(\"index create: runtime servers\")\n          .extracting(IndexInfo::getMemberName)\n          .containsExactlyInAnyOrder(\"server-1\", \"server-2\", \"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"index delete confirmation\")\n          .hasMessageContaining(\"Index 'index.1' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"region delete confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"B"}],"commitId":"e50c5e3a46b5c5501a091a68d9312fbf0e599b1c","commitMessage":"@@@GEODE-7425 delete index (#4503)\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Jinmei Liao <jliao@pivotal.io>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>","date":"2019-12-21 13:14:49","modifiedFileCount":"12","status":"B","submitter":"Darrel Schneider"},{"authorTime":"2019-12-21 13:14:49","codes":[{"authorDate":"2020-01-08 07:58:15","commitOrder":2,"curCode":"  public void createAndDeleteIndex_success_for_specific_group() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    region.setGroup(\"group1\");\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/region2\", 1);\n\n    Index index = new Index();\n    index.setName(\"index\");\n    index.setExpression(\"key\");\n    index.setRegionPath(\"/region2\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getConfigResult();\n    List<IndexInfo> runtimeResult = indexResult.getRuntimeResult();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: region path\")\n          .isEqualTo(\"/region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).extracting(IndexInfo::getMemberName)\n          .as(\"index create: runtime server\")\n          .containsExactlyInAnyOrder(\"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    region.setGroup(null);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"delete index confirmation\")\n          .hasMessageContaining(\"Index 'index' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"delete region confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","date":"2020-01-08 07:58:15","endLine":286,"groupId":"19045","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createAndDeleteIndex_success_for_specific_group","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3c/151ae41abff3c36e1836bcab8092d465704359.src","preCode":"  public void createAndDeleteIndex_success_for_specific_group() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    region.setGroup(\"group1\");\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/region2\", 1);\n\n    Index index = new Index();\n    index.setName(\"index\");\n    index.setExpression(\"key\");\n    index.setRegionPath(\"/region2\");\n    index.setGroup(\"group1\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getConfigResult();\n    List<IndexInfo> runtimeResult = indexResult.getRuntimeResult();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: region path\")\n          .isEqualTo(\"/region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).extracting(IndexInfo::getMemberName)\n          .as(\"index create: runtime server\")\n          .containsExactlyInAnyOrder(\"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    region.setGroup(null);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"delete index confirmation\")\n          .hasMessageContaining(\"Index 'index' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"delete region confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2019-12-21 13:14:49","commitOrder":2,"curCode":"  public void createAndDeleteIndex_success_for_cluster() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/region2\", 3);\n\n    Index index = new Index();\n    index.setName(\"index.1\");\n    index.setExpression(\"key\");\n    index.setRegionPath(\"/region2\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getConfigResult();\n    List<IndexInfo> runtimeResult = indexResult.getRuntimeResult();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index.1\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: index path\")\n          .isEqualTo(\"/region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: index expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).as(\"index create: runtime servers\")\n          .extracting(IndexInfo::getMemberName)\n          .containsExactlyInAnyOrder(\"server-1\", \"server-2\", \"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"index delete confirmation\")\n          .hasMessageContaining(\"Index 'index.1' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"region delete confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","date":"2019-12-21 13:14:49","endLine":331,"groupId":"19047","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createAndDeleteIndex_success_for_cluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c6/af59523fead95349ea02f0ccc1c3903cf1f674.src","preCode":"  public void createAndDeleteIndex_success_for_cluster() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/region2\", 3);\n\n    Index index = new Index();\n    index.setName(\"index.1\");\n    index.setExpression(\"key\");\n    index.setRegionPath(\"/region2\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getConfigResult();\n    List<IndexInfo> runtimeResult = indexResult.getRuntimeResult();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index.1\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: index path\")\n          .isEqualTo(\"/region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: index expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).as(\"index create: runtime servers\")\n          .extracting(IndexInfo::getMemberName)\n          .containsExactlyInAnyOrder(\"server-1\", \"server-2\", \"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"index delete confirmation\")\n          .hasMessageContaining(\"Index 'index.1' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"region delete confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"N"}],"commitId":"f1e5d8f9a06eb5fb08a38d580e12fa3b89ee32ef","commitMessage":"@@@GEODE-7579: introduce RegionAware (#4546)\n\n* GEODE-7579: Make Index configuration RegionAware\n\n* Index configuration is ReqionAware.  but not groupable\n* index's group depends on what region it's defined with\n* display member status in the exception","date":"2020-01-08 07:58:15","modifiedFileCount":"14","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2020-01-17 06:16:28","codes":[{"authorDate":"2020-01-17 06:16:28","commitOrder":3,"curCode":"  public void createAndDeleteIndex_success_for_specific_group() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    region.setGroup(\"group1\");\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/region2\", 1);\n\n    Index index = new Index();\n    index.setName(\"index\");\n    index.setExpression(\"key\");\n    index.setRegionPath(\"/region2\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getResult().getConfigurations().get(0);\n    List<IndexInfo> runtimeResult = indexResult.getResult().getRuntimeInfos();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: region path\")\n          .isEqualTo(\"/region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).extracting(IndexInfo::getMemberName)\n          .as(\"index create: runtime server\")\n          .containsExactlyInAnyOrder(\"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    region.setGroup(null);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"delete index confirmation\")\n          .hasMessageContaining(\"Index 'index' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"delete region confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","date":"2020-01-17 06:16:28","endLine":286,"groupId":"19045","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createAndDeleteIndex_success_for_specific_group","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/90/336c8e37eb547983be85013ab04073bd2bee5e.src","preCode":"  public void createAndDeleteIndex_success_for_specific_group() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    region.setGroup(\"group1\");\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/region2\", 1);\n\n    Index index = new Index();\n    index.setName(\"index\");\n    index.setExpression(\"key\");\n    index.setRegionPath(\"/region2\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getConfigResult();\n    List<IndexInfo> runtimeResult = indexResult.getRuntimeResult();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: region path\")\n          .isEqualTo(\"/region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).extracting(IndexInfo::getMemberName)\n          .as(\"index create: runtime server\")\n          .containsExactlyInAnyOrder(\"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    region.setGroup(null);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"delete index confirmation\")\n          .hasMessageContaining(\"Index 'index' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"delete region confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2020-01-17 06:16:28","commitOrder":3,"curCode":"  public void createAndDeleteIndex_success_for_cluster() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/region2\", 3);\n\n    Index index = new Index();\n    index.setName(\"index.1\");\n    index.setExpression(\"key\");\n    index.setRegionPath(\"/region2\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getResult().getConfigurations().get(0);\n    List<IndexInfo> runtimeResult = indexResult.getResult().getRuntimeInfos();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index.1\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: index path\")\n          .isEqualTo(\"/region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: index expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).as(\"index create: runtime servers\")\n          .extracting(IndexInfo::getMemberName)\n          .containsExactlyInAnyOrder(\"server-1\", \"server-2\", \"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"index delete confirmation\")\n          .hasMessageContaining(\"Index 'index.1' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"region delete confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","date":"2020-01-17 06:16:28","endLine":330,"groupId":"46478","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createAndDeleteIndex_success_for_cluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/90/336c8e37eb547983be85013ab04073bd2bee5e.src","preCode":"  public void createAndDeleteIndex_success_for_cluster() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/region2\", 3);\n\n    Index index = new Index();\n    index.setName(\"index.1\");\n    index.setExpression(\"key\");\n    index.setRegionPath(\"/region2\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getConfigResult();\n    List<IndexInfo> runtimeResult = indexResult.getRuntimeResult();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index.1\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: index path\")\n          .isEqualTo(\"/region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: index expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).as(\"index create: runtime servers\")\n          .extracting(IndexInfo::getMemberName)\n          .containsExactlyInAnyOrder(\"server-1\", \"server-2\", \"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"index delete confirmation\")\n          .hasMessageContaining(\"Index 'index.1' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"region delete confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"f8620b91b72d8a83e65d8c2f7eb34dcbea39d096","commitMessage":"@@@GEODE-7699: use ConfigurationInfo to wrap the get result (#4596)\n\n* GEODE-7699: use ConfigurationInfo to wrap the get result\n\nCo-authored-by: Dale Emery <demery@pivotal.io>\n","date":"2020-01-17 06:16:28","modifiedFileCount":"24","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":4,"curCode":"  public void createAndDeleteIndex_success_for_specific_group() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    region.setGroup(\"group1\");\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + \"region2\", 1);\n\n    Index index = new Index();\n    index.setName(\"index\");\n    index.setExpression(\"key\");\n    index.setRegionPath(SEPARATOR + \"region2\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getResult().getConfigurations().get(0);\n    List<IndexInfo> runtimeResult = indexResult.getResult().getRuntimeInfos();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: region path\")\n          .isEqualTo(SEPARATOR + \"region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).extracting(IndexInfo::getMemberName)\n          .as(\"index create: runtime server\")\n          .containsExactlyInAnyOrder(\"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    region.setGroup(null);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"delete index confirmation\")\n          .hasMessageContaining(\"Index 'index' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"delete region confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","date":"2020-05-29 00:37:39","endLine":286,"groupId":"101530","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createAndDeleteIndex_success_for_specific_group","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/26/2c06a9d8d390bc51bb8d6cdd17bccb4096f370.src","preCode":"  public void createAndDeleteIndex_success_for_specific_group() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    region.setGroup(\"group1\");\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/region2\", 1);\n\n    Index index = new Index();\n    index.setName(\"index\");\n    index.setExpression(\"key\");\n    index.setRegionPath(\"/region2\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getResult().getConfigurations().get(0);\n    List<IndexInfo> runtimeResult = indexResult.getResult().getRuntimeInfos();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: region path\")\n          .isEqualTo(\"/region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).extracting(IndexInfo::getMemberName)\n          .as(\"index create: runtime server\")\n          .containsExactlyInAnyOrder(\"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    region.setGroup(null);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"delete index confirmation\")\n          .hasMessageContaining(\"Index 'index' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"delete region confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":4,"curCode":"  public void createAndDeleteIndex_success_for_cluster() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + \"region2\", 3);\n\n    Index index = new Index();\n    index.setName(\"index.1\");\n    index.setExpression(\"key\");\n    index.setRegionPath(SEPARATOR + \"region2\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getResult().getConfigurations().get(0);\n    List<IndexInfo> runtimeResult = indexResult.getResult().getRuntimeInfos();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index.1\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: index path\")\n          .isEqualTo(SEPARATOR + \"region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: index expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).as(\"index create: runtime servers\")\n          .extracting(IndexInfo::getMemberName)\n          .containsExactlyInAnyOrder(\"server-1\", \"server-2\", \"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"index delete confirmation\")\n          .hasMessageContaining(\"Index 'index.1' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"region delete confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","date":"2020-05-29 00:37:39","endLine":330,"groupId":"101530","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createAndDeleteIndex_success_for_cluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/26/2c06a9d8d390bc51bb8d6cdd17bccb4096f370.src","preCode":"  public void createAndDeleteIndex_success_for_cluster() {\n    Region region = new Region();\n    region.setName(\"region2\");\n    region.setType(RegionType.REPLICATE);\n    cms.create(region);\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/region2\", 3);\n\n    Index index = new Index();\n    index.setName(\"index.1\");\n    index.setExpression(\"key\");\n    index.setRegionPath(\"/region2\");\n    index.setIndexType(IndexType.KEY);\n    cms.create(index);\n\n    ClusterManagementGetResult<Index, IndexInfo> indexResult = cms.get(index);\n    Index fetchedIndexConfig = indexResult.getResult().getConfigurations().get(0);\n    List<IndexInfo> runtimeResult = indexResult.getResult().getRuntimeInfos();\n    assertSoftly(softly -> {\n      softly.assertThat(fetchedIndexConfig.getRegionName()).as(\"index create: region name\")\n          .isEqualTo(\"region2\");\n      softly.assertThat(fetchedIndexConfig.getName()).as(\"index create: index name\")\n          .isEqualTo(\"index.1\");\n      softly.assertThat(fetchedIndexConfig.getRegionPath()).as(\"index create: index path\")\n          .isEqualTo(\"/region2\");\n      softly.assertThat(fetchedIndexConfig.getExpression()).as(\"index create: index expression\")\n          .isEqualTo(\"key\");\n      softly.assertThat(runtimeResult).as(\"index create: runtime servers\")\n          .extracting(IndexInfo::getMemberName)\n          .containsExactlyInAnyOrder(\"server-1\", \"server-2\", \"server-3\");\n    });\n\n    ClusterManagementRealizationResult deleteIndexResult = cms.delete(index);\n    ClusterManagementRealizationResult deleteRegionResult = cms.delete(region);\n    assertSoftly(softly -> {\n      softly.assertThat(deleteIndexResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(index)).as(\"index delete confirmation\")\n          .hasMessageContaining(\"Index 'index.1' does not exist\");\n      softly.assertThat(deleteRegionResult.isSuccessful()).isTrue();\n      softly.assertThatThrownBy(() -> cms.get(region)).as(\"region delete confirmation\")\n          .hasMessageContaining(\"Region 'region2' does not exist\");\n    });\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
