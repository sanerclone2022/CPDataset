[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testQuery() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","date":"2018-07-18 03:54:18","endLine":2708,"groupId":"32824","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/72f987b8bfe0450ffa77a55fdf0efa1c66c36f.src","preCode":"  public void testQuery() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2673,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testGetCQsForARegionName() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n    \r\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    client.invoke(new CacheSerializableRunnable(\"Client disableCQs()\") {\n      public void run2() throws CacheException {\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n          CqQuery[] cq = cqService.getCqs(\"/root/\" + regions[0]);\n          assertNotNull(\n              \"CQservice should not return null for cqs on this region : /root/\" + regions[0], cq);\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[0] + \" : \" + cq.length);\n          \r\n\n          cq[0].close();\n          cq = cqService.getCqs(\"/root/\" + regions[0]);\n          assertNotNull(\n              \"CQservice should not return null for cqs on this region : /root/\" + regions[0], cq);\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[0]\n              + \" after closeing one of the cqs : \" + cq.length);\n\n          cq = cqService.getCqs(\"/root/\" + regions[1]);\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[1] + \" : \" + cq.length);\n          assertNotNull(\n              \"CQservice should not return null for cqs on this region : /root/\" + regions[1], cq);\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService\", cqe);\n        }\n      }\n    });\n\n    \r\n    closeClient(client);\n    closeServer(server);\n\n  }\n","date":"2018-07-18 03:54:18","endLine":3028,"groupId":"32824","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetCQsForARegionName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/72f987b8bfe0450ffa77a55fdf0efa1c66c36f.src","preCode":"  public void testGetCQsForARegionName() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n    \r\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    client.invoke(new CacheSerializableRunnable(\"Client disableCQs()\") {\n      public void run2() throws CacheException {\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n          CqQuery[] cq = cqService.getCqs(\"/root/\" + regions[0]);\n          assertNotNull(\n              \"CQservice should not return null for cqs on this region : /root/\" + regions[0], cq);\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[0] + \" : \" + cq.length);\n          \r\n\n          cq[0].close();\n          cq = cqService.getCqs(\"/root/\" + regions[0]);\n          assertNotNull(\n              \"CQservice should not return null for cqs on this region : /root/\" + regions[0], cq);\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[0]\n              + \" after closeing one of the cqs : \" + cq.length);\n\n          cq = cqService.getCqs(\"/root/\" + regions[1]);\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[1] + \" : \" + cq.length);\n          assertNotNull(\n              \"CQservice should not return null for cqs on this region : /root/\" + regions[1], cq);\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService\", cqe);\n        }\n      }\n    });\n\n    \r\n    closeClient(client);\n    closeServer(server);\n\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2963,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-08-31 08:10:50","codes":[{"authorDate":"2018-08-31 08:10:50","commitOrder":2,"curCode":"  public void testQuery() {\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","date":"2018-08-31 08:10:50","endLine":2237,"groupId":"32824","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void testQuery() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2203,"status":"M"},{"authorDate":"2018-08-31 08:10:50","commitOrder":2,"curCode":"  public void testGetCQsForARegionName() {\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n    \r\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    client.invoke(new CacheSerializableRunnable(\"Client disableCQs()\") {\n      public void run2() throws CacheException {\n        \r\n        QueryService cqService;\n        try {\n          cqService = getCache().getQueryService();\n          CqQuery[] cq = cqService.getCqs(\"/root/\" + regions[0]);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : /root/\" + regions[0])\n              .isNotNull();\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[0] + \" : \" + cq.length);\n          \r\n\n          cq[0].close();\n          cq = cqService.getCqs(\"/root/\" + regions[0]);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : /root/\" + regions[0])\n              .isNotNull();\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[0]\n              + \" after closing one of the cqs : \" + cq.length);\n\n          cq = cqService.getCqs(\"/root/\" + regions[1]);\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[1] + \" : \" + cq.length);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : /root/\" + regions[1])\n              .isNotNull();\n        } catch (Exception cqe) {\n          fail(\"Failed to getCQService\", cqe);\n        }\n      }\n    });\n\n    \r\n    closeClient(client);\n    closeServer(server);\n\n  }\n","date":"2018-08-31 08:10:50","endLine":2546,"groupId":"6565","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetCQsForARegionName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void testGetCQsForARegionName() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n    \r\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    client.invoke(new CacheSerializableRunnable(\"Client disableCQs()\") {\n      public void run2() throws CacheException {\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n          CqQuery[] cq = cqService.getCqs(\"/root/\" + regions[0]);\n          assertNotNull(\n              \"CQservice should not return null for cqs on this region : /root/\" + regions[0], cq);\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[0] + \" : \" + cq.length);\n          \r\n\n          cq[0].close();\n          cq = cqService.getCqs(\"/root/\" + regions[0]);\n          assertNotNull(\n              \"CQservice should not return null for cqs on this region : /root/\" + regions[0], cq);\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[0]\n              + \" after closeing one of the cqs : \" + cq.length);\n\n          cq = cqService.getCqs(\"/root/\" + regions[1]);\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[1] + \" : \" + cq.length);\n          assertNotNull(\n              \"CQservice should not return null for cqs on this region : /root/\" + regions[1], cq);\n        } catch (Exception cqe) {\n          Assert.fail(\"Failed to getCQService\", cqe);\n        }\n      }\n    });\n\n    \r\n    closeClient(client);\n    closeServer(server);\n\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2476,"status":"M"}],"commitId":"46b78978d894e8851daf86d929ae5efbd9093097","commitMessage":"@@@GEODE-5411: Adding awaitility fixing timing issue in CqPerfDUnitTest\n\n- Fixing timing issue by waiting for cq set to reach the right size\n- Code modernization and cleanup","date":"2018-08-31 08:10:50","modifiedFileCount":"3","status":"M","submitter":"mhansonp"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2018-08-31 08:10:50","commitOrder":3,"curCode":"  public void testQuery() {\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","date":"2018-08-31 08:10:50","endLine":2237,"groupId":"32824","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void testQuery() {\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2203,"status":"N"},{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public void testGetCQsForARegionName() {\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n    \r\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    client.invoke(new CacheSerializableRunnable(\"Client disableCQs()\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        QueryService cqService;\n        try {\n          cqService = getCache().getQueryService();\n          CqQuery[] cq = cqService.getCqs(\"/root/\" + regions[0]);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : /root/\" + regions[0])\n              .isNotNull();\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[0] + \" : \" + cq.length);\n          \r\n\n          cq[0].close();\n          cq = cqService.getCqs(\"/root/\" + regions[0]);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : /root/\" + regions[0])\n              .isNotNull();\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[0]\n              + \" after closing one of the cqs : \" + cq.length);\n\n          cq = cqService.getCqs(\"/root/\" + regions[1]);\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[1] + \" : \" + cq.length);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : /root/\" + regions[1])\n              .isNotNull();\n        } catch (Exception cqe) {\n          fail(\"Failed to getCQService\", cqe);\n        }\n      }\n    });\n\n    \r\n    closeClient(client);\n    closeServer(server);\n\n  }\n","date":"2019-01-12 07:53:54","endLine":2580,"groupId":"32824","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetCQsForARegionName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/12/01d65d4e254284a3b2774d91deec45ce8f0fa0.src","preCode":"  public void testGetCQsForARegionName() {\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n    \r\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    client.invoke(new CacheSerializableRunnable(\"Client disableCQs()\") {\n      public void run2() throws CacheException {\n        \r\n        QueryService cqService;\n        try {\n          cqService = getCache().getQueryService();\n          CqQuery[] cq = cqService.getCqs(\"/root/\" + regions[0]);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : /root/\" + regions[0])\n              .isNotNull();\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[0] + \" : \" + cq.length);\n          \r\n\n          cq[0].close();\n          cq = cqService.getCqs(\"/root/\" + regions[0]);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : /root/\" + regions[0])\n              .isNotNull();\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[0]\n              + \" after closing one of the cqs : \" + cq.length);\n\n          cq = cqService.getCqs(\"/root/\" + regions[1]);\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[1] + \" : \" + cq.length);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : /root/\" + regions[1])\n              .isNotNull();\n        } catch (Exception cqe) {\n          fail(\"Failed to getCQService\", cqe);\n        }\n      }\n    });\n\n    \r\n    closeClient(client);\n    closeServer(server);\n\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2509,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2018-08-31 08:10:50","commitOrder":4,"curCode":"  public void testQuery() {\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","date":"2018-08-31 08:10:50","endLine":2237,"groupId":"10532","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void testQuery() {\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2203,"status":"N"},{"authorDate":"2020-05-29 00:37:39","commitOrder":4,"curCode":"  public void testGetCQsForARegionName() {\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n    \r\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    client.invoke(new CacheSerializableRunnable(\"Client disableCQs()\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        QueryService cqService;\n        try {\n          cqService = getCache().getQueryService();\n          CqQuery[] cq = cqService.getCqs(SEPARATOR + \"root\" + SEPARATOR + regions[0]);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : \" + SEPARATOR + \"root\"\n                      + SEPARATOR + regions[0])\n              .isNotNull();\n          getCache().getLogger().info(\n              \"cqs for region: \" + SEPARATOR + \"root\" + SEPARATOR + regions[0] + \" : \" + cq.length);\n          \r\n\n          cq[0].close();\n          cq = cqService.getCqs(SEPARATOR + \"root\" + SEPARATOR + regions[0]);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : \" + SEPARATOR + \"root\"\n                      + SEPARATOR + regions[0])\n              .isNotNull();\n          getCache().getLogger()\n              .info(\"cqs for region: \" + SEPARATOR + \"root\" + SEPARATOR + regions[0]\n                  + \" after closing one of the cqs : \" + cq.length);\n\n          cq = cqService.getCqs(SEPARATOR + \"root\" + SEPARATOR + regions[1]);\n          getCache().getLogger().info(\n              \"cqs for region: \" + SEPARATOR + \"root\" + SEPARATOR + regions[1] + \" : \" + cq.length);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : \" + SEPARATOR + \"root\"\n                      + SEPARATOR + regions[1])\n              .isNotNull();\n        } catch (Exception cqe) {\n          fail(\"Failed to getCQService\", cqe);\n        }\n      }\n    });\n\n    \r\n    closeClient(client);\n    closeServer(server);\n\n  }\n","date":"2020-05-29 00:37:39","endLine":2604,"groupId":"10532","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetCQsForARegionName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/51/dd20a81a454712e07a45d3c80685a8a7d60b82.src","preCode":"  public void testGetCQsForARegionName() {\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testQuery_3\", cqs[3]);\n    executeCQ(client, \"testQuery_3\", true, null);\n\n    createCQ(client, \"testQuery_4\", cqs[4]);\n    executeCQ(client, \"testQuery_4\", true, null);\n\n    createCQ(client, \"testQuery_5\", cqs[5]);\n    executeCQ(client, \"testQuery_5\", true, null);\n\n    createCQ(client, \"testQuery_6\", cqs[6]);\n    executeCQ(client, \"testQuery_6\", true, null);\n    \r\n    createCQ(client, \"testQuery_7\", cqs[7]);\n    executeCQ(client, \"testQuery_7\", true, null);\n\n    createCQ(client, \"testQuery_8\", cqs[8]);\n    executeCQ(client, \"testQuery_8\", true, null);\n\n    client.invoke(new CacheSerializableRunnable(\"Client disableCQs()\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        QueryService cqService;\n        try {\n          cqService = getCache().getQueryService();\n          CqQuery[] cq = cqService.getCqs(\"/root/\" + regions[0]);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : /root/\" + regions[0])\n              .isNotNull();\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[0] + \" : \" + cq.length);\n          \r\n\n          cq[0].close();\n          cq = cqService.getCqs(\"/root/\" + regions[0]);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : /root/\" + regions[0])\n              .isNotNull();\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[0]\n              + \" after closing one of the cqs : \" + cq.length);\n\n          cq = cqService.getCqs(\"/root/\" + regions[1]);\n          getCache().getLogger().info(\"cqs for region: /root/\" + regions[1] + \" : \" + cq.length);\n          assertThat(cq)\n              .describedAs(\n                  \"CQService should not return null for cqs on this region : /root/\" + regions[1])\n              .isNotNull();\n        } catch (Exception cqe) {\n          fail(\"Failed to getCQService\", cqe);\n        }\n      }\n    });\n\n    \r\n    closeClient(client);\n    closeServer(server);\n\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2527,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
