[{"authorTime":"2018-08-09 00:51:50","codes":[{"authorDate":"2018-08-09 00:51:50","commitOrder":1,"curCode":"  public void testWithMissingCacheXml() throws IOException {\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String missingCacheXmlPath = \"/missing/cache.xml\";\n    final String memberName = \"testWithMissingCacheXml-server\";\n    final String expectedError =\n        CliStrings.format(CACHE_XML_NOT_FOUND_MESSAGE, missingCacheXmlPath);\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__CACHE_XML_FILE, missingCacheXmlPath)\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError);\n  }\n","date":"2018-08-09 00:51:50","endLine":123,"groupId":"19140","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithMissingCacheXml","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/dd/96e99874bf8a255e56d78ea5e269aae586f96c.src","preCode":"  public void testWithMissingCacheXml() throws IOException {\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String missingCacheXmlPath = \"/missing/cache.xml\";\n    final String memberName = \"testWithMissingCacheXml-server\";\n    final String expectedError =\n        CliStrings.format(CACHE_XML_NOT_FOUND_MESSAGE, missingCacheXmlPath);\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__CACHE_XML_FILE, missingCacheXmlPath)\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError);\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"},{"authorDate":"2018-08-09 00:51:50","commitOrder":1,"curCode":"  public void testWithMissingPassword() throws IOException {\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String memberName = \"testWithMissingPassword-server\";\n    final String expectedError = \"password must be specified.\";\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__USERNAME, \"usernameValue\")\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError);\n  }\n","date":"2018-08-09 00:51:50","endLine":165,"groupId":"45407","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithMissingPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/dd/96e99874bf8a255e56d78ea5e269aae586f96c.src","preCode":"  public void testWithMissingPassword() throws IOException {\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String memberName = \"testWithMissingPassword-server\";\n    final String expectedError = \"password must be specified.\";\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__USERNAME, \"usernameValue\")\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError);\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"B"}],"commitId":"57581af961203ed373456ce84a5c8e7bdb4e0ee6","commitMessage":"@@@Geode 3530 launcher lifecycle server commands (#2267)\n\n\n* GEODE-3530: Modernize LauncherLifecycleCommandsDUnit\n\n* Extract server start and locator start/stop/status commands into their own\nclasses\n* Remove the CliCommandTestBase\n* make locator names match test method names\n* add a method for writing classes to a jar file\n* add a function to use up all the server's memory for testing\n* add max heap property for out of memory test\n\nMake the behavior of the server out of memory test more reliable by\nadding a maxheap size (otherwise the size is decided by the JVM)\n\nSigned-off-by: Ken Howe<khowe@pivotal.io>\n","date":"2018-08-09 00:51:50","modifiedFileCount":"3","status":"B","submitter":"Helena Bales"},{"authorTime":"2018-08-09 00:51:50","codes":[{"authorDate":"2018-09-10 23:59:44","commitOrder":2,"curCode":"  public void testWithMissingCacheXml() throws IOException {\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String missingCacheXmlPath =\n        Paths.get(\"missing\", \"cache.xml\").toAbsolutePath().toString();\n    final String memberName = \"testWithMissingCacheXml-server\";\n    final String expectedError =\n        CliStrings.format(CACHE_XML_NOT_FOUND_MESSAGE, missingCacheXmlPath);\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__CACHE_XML_FILE, missingCacheXmlPath)\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError);\n  }\n","date":"2018-09-10 23:59:44","endLine":125,"groupId":"19140","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithMissingCacheXml","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/06/4d76b50f22bbebaece876cd6a1d10ae39c4d2d.src","preCode":"  public void testWithMissingCacheXml() throws IOException {\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String missingCacheXmlPath = \"/missing/cache.xml\";\n    final String memberName = \"testWithMissingCacheXml-server\";\n    final String expectedError =\n        CliStrings.format(CACHE_XML_NOT_FOUND_MESSAGE, missingCacheXmlPath);\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__CACHE_XML_FILE, missingCacheXmlPath)\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError);\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2018-08-09 00:51:50","commitOrder":2,"curCode":"  public void testWithMissingPassword() throws IOException {\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String memberName = \"testWithMissingPassword-server\";\n    final String expectedError = \"password must be specified.\";\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__USERNAME, \"usernameValue\")\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError);\n  }\n","date":"2018-08-09 00:51:50","endLine":165,"groupId":"45407","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithMissingPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/dd/96e99874bf8a255e56d78ea5e269aae586f96c.src","preCode":"  public void testWithMissingPassword() throws IOException {\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String memberName = \"testWithMissingPassword-server\";\n    final String expectedError = \"password must be specified.\";\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__USERNAME, \"usernameValue\")\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError);\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"N"}],"commitId":"e95a673fa53590cc0ef4e221b28c329cb3431d06","commitMessage":"@@@GEODE-5212: use Paths instead of hardcoded file separator (#2444)\n\n","date":"2018-09-10 23:59:44","modifiedFileCount":"2","status":"M","submitter":"Sai Boorlagadda"},{"authorTime":"2018-10-12 07:11:27","codes":[{"authorDate":"2018-10-12 07:11:27","commitOrder":3,"curCode":"  public void testWithMissingCacheXml() throws IOException {\n    String missingCacheXmlPath =\n        Paths.get(\"missing\", \"cache.xml\").toAbsolutePath().toString();\n    String expectedError =\n        CliStrings.format(CACHE_XML_NOT_FOUND_MESSAGE, missingCacheXmlPath);\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, String.valueOf(serverPort))\n        .addOption(START_SERVER__CACHE_XML_FILE, missingCacheXmlPath)\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError);\n  }\n","date":"2018-10-12 07:11:27","endLine":142,"groupId":"19140","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithMissingCacheXml","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6b/da01bb0427b0ee32daf496891600e3d59a9917.src","preCode":"  public void testWithMissingCacheXml() throws IOException {\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String missingCacheXmlPath =\n        Paths.get(\"missing\", \"cache.xml\").toAbsolutePath().toString();\n    final String memberName = \"testWithMissingCacheXml-server\";\n    final String expectedError =\n        CliStrings.format(CACHE_XML_NOT_FOUND_MESSAGE, missingCacheXmlPath);\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__CACHE_XML_FILE, missingCacheXmlPath)\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError);\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2018-10-12 07:11:27","commitOrder":3,"curCode":"  public void testWithMissingPassword() throws IOException {\n    String expectedError = \"password must be specified.\";\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, String.valueOf(serverPort))\n        .addOption(START_SERVER__USERNAME, \"usernameValue\")\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError);\n  }\n","date":"2018-10-12 07:11:27","endLine":181,"groupId":"45407","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithMissingPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6b/da01bb0427b0ee32daf496891600e3d59a9917.src","preCode":"  public void testWithMissingPassword() throws IOException {\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String memberName = \"testWithMissingPassword-server\";\n    final String expectedError = \"password must be specified.\";\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__USERNAME, \"usernameValue\")\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError);\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"a9023e06d835d660e9c9f5b2f6a1017866977088","commitMessage":"@@@GEODE-5212: fix failing StartLocator and Server command DUnit tests (#2580)\n\n   * Added unit tests to cover different working directory cases\n   * Removed acceptance tests related to working directory as they\n     seem to be fragile as paths are environment specific\n\nSigned-off-by: Kirk Lund <klund@apache.org>","date":"2018-10-12 07:11:27","modifiedFileCount":"7","status":"M","submitter":"Sai Boorlagadda"},{"authorTime":"2019-04-25 23:05:13","codes":[{"authorDate":"2019-04-25 23:05:13","commitOrder":4,"curCode":"  public void testWithMissingCacheXml() throws IOException {\n    String missingCacheXmlPath =\n        Paths.get(\"missing\", \"cache.xml\").toAbsolutePath().toString();\n    String expectedError =\n        CliStrings.format(CACHE_XML_NOT_FOUND_MESSAGE, missingCacheXmlPath);\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, String.valueOf(serverPort))\n        .addOption(START_SERVER__CACHE_XML_FILE, missingCacheXmlPath)\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    gfsh.executeAndAssertThat(command).statusIsError()\n        .containsOutput(expectedError);\n  }\n","date":"2019-04-25 23:05:13","endLine":138,"groupId":"101436","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithMissingCacheXml","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/50/2f303680357f69a2a331838273371a69c868d4.src","preCode":"  public void testWithMissingCacheXml() throws IOException {\n    String missingCacheXmlPath =\n        Paths.get(\"missing\", \"cache.xml\").toAbsolutePath().toString();\n    String expectedError =\n        CliStrings.format(CACHE_XML_NOT_FOUND_MESSAGE, missingCacheXmlPath);\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, String.valueOf(serverPort))\n        .addOption(START_SERVER__CACHE_XML_FILE, missingCacheXmlPath)\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError);\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2019-04-25 23:05:13","commitOrder":4,"curCode":"  public void testWithMissingPassword() throws IOException {\n    String expectedError = \"password must be specified.\";\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, String.valueOf(serverPort))\n        .addOption(START_SERVER__USERNAME, \"usernameValue\")\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    gfsh.executeAndAssertThat(command).statusIsError()\n        .containsOutput(expectedError);\n  }\n","date":"2019-04-25 23:05:13","endLine":173,"groupId":"101436","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithMissingPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/50/2f303680357f69a2a331838273371a69c868d4.src","preCode":"  public void testWithMissingPassword() throws IOException {\n    String expectedError = \"password must be specified.\";\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, String.valueOf(serverPort))\n        .addOption(START_SERVER__USERNAME, \"usernameValue\")\n        .addOption(START_SERVER__DIR, workingDir.getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError);\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"96466c95cc233111db2d57b5d97ea52864fee875","commitMessage":"@@@GEODE-5971: delete LegacyCommandResult and rename ModelResultModel to? (#3497)\n\n\n","date":"2019-04-25 23:05:13","modifiedFileCount":"91","status":"M","submitter":"jinmeiliao"}]
