[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testFALSE() throws Exception {\n    Query query =\n        CacheUtils.getQueryService().newQuery(\"SELECT DISTINCT * FROM /Portfolios where FALSE\");\n    Object result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n  }\n","date":"2018-07-18 03:54:18","endLine":71,"groupId":"6350","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFALSE","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/e67d3fa65635fab44e6dab3cf69e8875a661af.src","preCode":"  public void testFALSE() throws Exception {\n    Query query =\n        CacheUtils.getQueryService().newQuery(\"SELECT DISTINCT * FROM /Portfolios where FALSE\");\n    Object result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/ConstantsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testNULL() throws Exception {\n    Query query =\n        CacheUtils.getQueryService().newQuery(\"SELECT DISTINCT * FROM /Portfolios where NULL\");\n    Object result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n\n    query = CacheUtils.getQueryService().newQuery(\"SELECT DISTINCT * FROM NULL\");\n    result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n  }\n","date":"2018-07-18 03:54:18","endLine":99,"groupId":"6350","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNULL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/e67d3fa65635fab44e6dab3cf69e8875a661af.src","preCode":"  public void testNULL() throws Exception {\n    Query query =\n        CacheUtils.getQueryService().newQuery(\"SELECT DISTINCT * FROM /Portfolios where NULL\");\n    Object result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n\n    query = CacheUtils.getQueryService().newQuery(\"SELECT DISTINCT * FROM NULL\");\n    result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/ConstantsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testFALSE() throws Exception {\n    Query query =\n        CacheUtils.getQueryService()\n            .newQuery(\"SELECT DISTINCT * FROM \" + SEPARATOR + \"Portfolios where FALSE\");\n    Object result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n  }\n","date":"2020-05-29 00:37:39","endLine":74,"groupId":"6350","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFALSE","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e8/995a33c652898d4cd61b01754b0ac1a67129d7.src","preCode":"  public void testFALSE() throws Exception {\n    Query query =\n        CacheUtils.getQueryService().newQuery(\"SELECT DISTINCT * FROM /Portfolios where FALSE\");\n    Object result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/ConstantsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testNULL() throws Exception {\n    Query query =\n        CacheUtils.getQueryService()\n            .newQuery(\"SELECT DISTINCT * FROM \" + SEPARATOR + \"Portfolios where NULL\");\n    Object result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n\n    query = CacheUtils.getQueryService().newQuery(\"SELECT DISTINCT * FROM NULL\");\n    result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n  }\n","date":"2020-05-29 00:37:39","endLine":104,"groupId":"6350","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNULL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e8/995a33c652898d4cd61b01754b0ac1a67129d7.src","preCode":"  public void testNULL() throws Exception {\n    Query query =\n        CacheUtils.getQueryService().newQuery(\"SELECT DISTINCT * FROM /Portfolios where NULL\");\n    Object result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n\n    query = CacheUtils.getQueryService().newQuery(\"SELECT DISTINCT * FROM NULL\");\n    result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/ConstantsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"},{"authorTime":"2021-06-04 00:32:09","codes":[{"authorDate":"2021-06-04 00:32:09","commitOrder":3,"curCode":"  public void testFALSE() throws Exception {\n    Query query =\n        CacheUtils.getQueryService()\n            .newQuery(\"SELECT DISTINCT * FROM \" + SEPARATOR + \"Portfolios where FALSE\");\n    Object result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0) {\n      fail(query.getQueryString());\n    }\n  }\n","date":"2021-06-04 00:32:09","endLine":76,"groupId":"104882","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testFALSE","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2b/5ed48e8600db26a71f7486a701b3f8550acecc.src","preCode":"  public void testFALSE() throws Exception {\n    Query query =\n        CacheUtils.getQueryService()\n            .newQuery(\"SELECT DISTINCT * FROM \" + SEPARATOR + \"Portfolios where FALSE\");\n    Object result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/ConstantsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2021-06-04 00:32:09","commitOrder":3,"curCode":"  public void testNULL() throws Exception {\n    Query query =\n        CacheUtils.getQueryService()\n            .newQuery(\"SELECT DISTINCT * FROM \" + SEPARATOR + \"Portfolios where NULL\");\n    Object result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0) {\n      fail(query.getQueryString());\n    }\n\n    query = CacheUtils.getQueryService().newQuery(\"SELECT DISTINCT * FROM NULL\");\n    result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0) {\n      fail(query.getQueryString());\n    }\n  }\n","date":"2021-06-04 00:32:09","endLine":110,"groupId":"104882","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testNULL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2b/5ed48e8600db26a71f7486a701b3f8550acecc.src","preCode":"  public void testNULL() throws Exception {\n    Query query =\n        CacheUtils.getQueryService()\n            .newQuery(\"SELECT DISTINCT * FROM \" + SEPARATOR + \"Portfolios where NULL\");\n    Object result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n\n    query = CacheUtils.getQueryService().newQuery(\"SELECT DISTINCT * FROM NULL\");\n    result = query.execute();\n    if (!(result instanceof Collection) || ((Collection) result).size() != 0)\n      fail(query.getQueryString());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/ConstantsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"2879573ffb04e9e029e14ca37d8a064268cc8f44","commitMessage":"@@@GEODE-7864: Always use curly braces for control flow statements (#6523)\n\nAuthored-by: Donal Evans <doevans@vmware.com>","date":"2021-06-04 00:32:09","modifiedFileCount":"640","status":"M","submitter":"Donal Evans"}]
