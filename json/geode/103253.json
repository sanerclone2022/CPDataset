[{"authorTime":"2019-10-26 00:25:37","codes":[{"authorDate":"2019-10-26 00:25:37","commitOrder":1,"curCode":"  public void start_logsError_ifMetricsPublishingServiceStartThrows() {\n    MetricsPublishingService throwingService = mock(MetricsPublishingService.class);\n    RuntimeException thrownDuringStart =\n        new RuntimeException(\"thrown by service.start() during test\");\n    doThrow(thrownDuringStart).when(throwingService).start(any());\n    String serviceClassName = throwingService.getClass().getName();\n\n    @SuppressWarnings(\"unchecked\")\n    CollectingServiceLoader<MetricsPublishingService> serviceLoader =\n        mock(CollectingServiceLoader.class);\n\n    when(serviceLoader.loadServices(MetricsPublishingService.class))\n        .thenReturn(singleton(throwingService));\n\n    metricsService =\n        new InternalDistributedSystemMetricsService(metricsServiceBuilder, logger, serviceLoader,\n            metricsServiceMeterRegistry, emptyList(), meterBinder, system, false);\n\n    metricsService.start();\n\n    ArgumentCaptor<String> actualMessage = ArgumentCaptor.forClass(String.class);\n    verify(logger).error(actualMessage.capture(), same(thrownDuringStart));\n    assertThat(actualMessage.getValue())\n        .as(\"Error log message\")\n        .contains(serviceClassName);\n  }\n","date":"2019-10-26 00:25:37","endLine":313,"groupId":"37334","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"start_logsError_ifMetricsPublishingServiceStartThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/19/e25b07584c9589986dab568fddea9e6b00d3d7.src","preCode":"  public void start_logsError_ifMetricsPublishingServiceStartThrows() {\n    MetricsPublishingService throwingService = mock(MetricsPublishingService.class);\n    RuntimeException thrownDuringStart =\n        new RuntimeException(\"thrown by service.start() during test\");\n    doThrow(thrownDuringStart).when(throwingService).start(any());\n    String serviceClassName = throwingService.getClass().getName();\n\n    @SuppressWarnings(\"unchecked\")\n    CollectingServiceLoader<MetricsPublishingService> serviceLoader =\n        mock(CollectingServiceLoader.class);\n\n    when(serviceLoader.loadServices(MetricsPublishingService.class))\n        .thenReturn(singleton(throwingService));\n\n    metricsService =\n        new InternalDistributedSystemMetricsService(metricsServiceBuilder, logger, serviceLoader,\n            metricsServiceMeterRegistry, emptyList(), meterBinder, system, false);\n\n    metricsService.start();\n\n    ArgumentCaptor<String> actualMessage = ArgumentCaptor.forClass(String.class);\n    verify(logger).error(actualMessage.capture(), same(thrownDuringStart));\n    assertThat(actualMessage.getValue())\n        .as(\"Error log message\")\n        .contains(serviceClassName);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/metrics/internal/InternalDistributedSystemMetricsServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"B"},{"authorDate":"2019-10-26 00:25:37","commitOrder":1,"curCode":"  public void stop_logsError_ifMetricsPublishingServiceStopThrows() {\n    MetricsPublishingService throwingService = mock(MetricsPublishingService.class);\n\n    @SuppressWarnings(\"unchecked\")\n    CollectingServiceLoader<MetricsPublishingService> serviceLoader =\n        mock(CollectingServiceLoader.class);\n\n    when(serviceLoader.loadServices(MetricsPublishingService.class))\n        .thenReturn(singleton(throwingService));\n\n    metricsService =\n        new InternalDistributedSystemMetricsService(metricsServiceBuilder, logger, serviceLoader,\n            metricsServiceMeterRegistry, emptyList(), meterBinder, system, false);\n\n    metricsService.start();\n\n    RuntimeException thrownDuringStop =\n        new RuntimeException(\"thrown by service.stop() during test\");\n    doThrow(thrownDuringStop).when(throwingService).stop(metricsService);\n\n    metricsService.stop();\n\n    String serviceClassName = throwingService.getClass().getName();\n    ArgumentCaptor<String> actualMessage = ArgumentCaptor.forClass(String.class);\n    verify(logger).error(actualMessage.capture(), same(thrownDuringStop));\n    assertThat(actualMessage.getValue())\n        .as(\"Error log message\")\n        .contains(serviceClassName);\n  }\n","date":"2019-10-26 00:25:37","endLine":467,"groupId":"37338","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"stop_logsError_ifMetricsPublishingServiceStopThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/19/e25b07584c9589986dab568fddea9e6b00d3d7.src","preCode":"  public void stop_logsError_ifMetricsPublishingServiceStopThrows() {\n    MetricsPublishingService throwingService = mock(MetricsPublishingService.class);\n\n    @SuppressWarnings(\"unchecked\")\n    CollectingServiceLoader<MetricsPublishingService> serviceLoader =\n        mock(CollectingServiceLoader.class);\n\n    when(serviceLoader.loadServices(MetricsPublishingService.class))\n        .thenReturn(singleton(throwingService));\n\n    metricsService =\n        new InternalDistributedSystemMetricsService(metricsServiceBuilder, logger, serviceLoader,\n            metricsServiceMeterRegistry, emptyList(), meterBinder, system, false);\n\n    metricsService.start();\n\n    RuntimeException thrownDuringStop =\n        new RuntimeException(\"thrown by service.stop() during test\");\n    doThrow(thrownDuringStop).when(throwingService).stop(metricsService);\n\n    metricsService.stop();\n\n    String serviceClassName = throwingService.getClass().getName();\n    ArgumentCaptor<String> actualMessage = ArgumentCaptor.forClass(String.class);\n    verify(logger).error(actualMessage.capture(), same(thrownDuringStop));\n    assertThat(actualMessage.getValue())\n        .as(\"Error log message\")\n        .contains(serviceClassName);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/metrics/internal/InternalDistributedSystemMetricsServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":439,"status":"B"}],"commitId":"95745912c14762cedb397ae97fd7d8e0f63a385f","commitMessage":"@@@GEODE-7171: Encapsulate metrics session (#4203)\n\nMetrics session responsibilities are starting to appear in too many\nparts of Geode. This change encapsulates those responsibilities into a\nsingle class.\n\nChanges to core Geode classes:\n\n- GemFireCacheImpl no longer holds a meter registry or the set of \"user\"\n  registries added by the cache builder.\n\n- InternalCacheBuilder no longer constructs objects on behalf of the\n  metrics session.  Instead.  it gathers meter registries and other\n  details into a MetricsService.Builder.  which it passes to the\n  InternalDistributedSystem.Builder.\n\n- InternalDistributedSystem no longer knows about client meter\n  registries. Instead.  it holds a MetricsService.  which remembers its\n  builder.  During reconnect.  the InternalDistributedSystem retrieves\n  the builder from its metrics service.  and uses the builder to build\n  a similar metrics service in the reconnected system.\n\nNew classes and interfaces (org.apache.geode.metrics.internal):\n\n- StandardMeterBinder\n  - Binds standard meter binders to the meter registry.\n  - close() closes the closeable binders.  freeing their resources.\n\n- MetricsService interface\n  - Extends MetricsSession.\n  - Adds methods to start and stop the service.  and to access the\n    service's meter registry.\n  - Adds a method that returns the builder that built the metrics\n    service.  so that reconnect can use the same builder to build the\n    metrics service for the reconnected system.\n\n- InternalDistributedSystemMetricsService\n  - Implements MetricsService.\n  - Creates and retains a composite meter registry to manage meters.\n  - Configures the composite composite registry:\n    - Adds common tags that describe the system\n    - Adds client meter registries to the composite.\n    - Applies a StandardMeterBinder to add standard meters to the\n      registry.\n  - Discovers.  starts.  and stops metrics publishing services.\n  - Adds and removes sub-registries as instructed by publishing\n    services.\n  - When stopped.  stops each publishing service.  closes all closeable\n    meter binders.  removes all sub-registries.  and closes its composite\n    meter registry.\n\n- MetricsService.Builder interface\n\n- InternalDistriburtedSystemMetricsService.Builder\n  - Implements MetricsService.Builder\n  - Accumulates and retains constructor parameters for the eventual\n    InternalDistributedSystemMetricsService.\n  - In particular.  maintains a collection of meter registries added by\n    the cache builder. It calls these 'persistent' registries.  because\n    they will persist across reconnects.\n\nOther changes:\n\n- Added MetricsSession parameter to MetricsPublishingService.stop().\n\nAuthored-by: Dale Emery <demery@pivotal.io>","date":"2019-10-26 00:25:37","modifiedFileCount":"22","status":"B","submitter":"Dale Emery"},{"authorTime":"2019-10-26 01:52:24","codes":[{"authorDate":"2019-10-26 01:52:24","commitOrder":2,"curCode":"  public void start_logsError_ifMetricsPublishingServiceStartThrows() {\n    MetricsPublishingService throwingService = mock(MetricsPublishingService.class);\n    RuntimeException thrownDuringStart =\n        new RuntimeException(\"thrown by service.start() during test\");\n    doThrow(thrownDuringStart).when(throwingService).start(any());\n    String serviceClassName = throwingService.getClass().getName();\n\n    @SuppressWarnings(\"unchecked\")\n    CollectingServiceLoader<MetricsPublishingService> serviceLoader =\n        mock(CollectingServiceLoader.class);\n\n    when(serviceLoader.loadServices(MetricsPublishingService.class))\n        .thenReturn(singleton(throwingService));\n\n    metricsService =\n        new InternalDistributedSystemMetricsService(metricsServiceBuilder, logger, serviceLoader,\n            metricsServiceMeterRegistry, emptyList(), meterBinder, system, false, false, true);\n\n    metricsService.start();\n\n    ArgumentCaptor<String> actualMessage = ArgumentCaptor.forClass(String.class);\n    verify(logger).error(actualMessage.capture(), same(thrownDuringStart));\n    assertThat(actualMessage.getValue())\n        .as(\"Error log message\")\n        .contains(serviceClassName);\n  }\n","date":"2019-10-29 01:38:03","endLine":379,"groupId":"103253","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"start_logsError_ifMetricsPublishingServiceStartThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3e/35638e8d90b04e2618048ac3ab0f53abf1f531.src","preCode":"  public void start_logsError_ifMetricsPublishingServiceStartThrows() {\n    MetricsPublishingService throwingService = mock(MetricsPublishingService.class);\n    RuntimeException thrownDuringStart =\n        new RuntimeException(\"thrown by service.start() during test\");\n    doThrow(thrownDuringStart).when(throwingService).start(any());\n    String serviceClassName = throwingService.getClass().getName();\n\n    @SuppressWarnings(\"unchecked\")\n    CollectingServiceLoader<MetricsPublishingService> serviceLoader =\n        mock(CollectingServiceLoader.class);\n\n    when(serviceLoader.loadServices(MetricsPublishingService.class))\n        .thenReturn(singleton(throwingService));\n\n    metricsService =\n        new InternalDistributedSystemMetricsService(metricsServiceBuilder, logger, serviceLoader,\n            metricsServiceMeterRegistry, emptyList(), meterBinder, system, false);\n\n    metricsService.start();\n\n    ArgumentCaptor<String> actualMessage = ArgumentCaptor.forClass(String.class);\n    verify(logger).error(actualMessage.capture(), same(thrownDuringStart));\n    assertThat(actualMessage.getValue())\n        .as(\"Error log message\")\n        .contains(serviceClassName);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/metrics/internal/InternalDistributedSystemMetricsServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"},{"authorDate":"2019-10-26 01:52:24","commitOrder":2,"curCode":"  public void stop_logsError_ifMetricsPublishingServiceStopThrows() {\n    MetricsPublishingService throwingService = mock(MetricsPublishingService.class);\n\n    @SuppressWarnings(\"unchecked\")\n    CollectingServiceLoader<MetricsPublishingService> serviceLoader =\n        mock(CollectingServiceLoader.class);\n\n    when(serviceLoader.loadServices(MetricsPublishingService.class))\n        .thenReturn(singleton(throwingService));\n\n    metricsService =\n        new InternalDistributedSystemMetricsService(metricsServiceBuilder, logger, serviceLoader,\n            metricsServiceMeterRegistry, emptyList(), meterBinder, system, false, false, true);\n\n    metricsService.start();\n\n    RuntimeException thrownDuringStop =\n        new RuntimeException(\"thrown by service.stop() during test\");\n    doThrow(thrownDuringStop).when(throwingService).stop(metricsService);\n\n    metricsService.stop();\n\n    String serviceClassName = throwingService.getClass().getName();\n    ArgumentCaptor<String> actualMessage = ArgumentCaptor.forClass(String.class);\n    verify(logger).error(actualMessage.capture(), same(thrownDuringStop));\n    assertThat(actualMessage.getValue())\n        .as(\"Error log message\")\n        .contains(serviceClassName);\n  }\n","date":"2019-10-29 01:38:03","endLine":533,"groupId":"103253","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"stop_logsError_ifMetricsPublishingServiceStopThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3e/35638e8d90b04e2618048ac3ab0f53abf1f531.src","preCode":"  public void stop_logsError_ifMetricsPublishingServiceStopThrows() {\n    MetricsPublishingService throwingService = mock(MetricsPublishingService.class);\n\n    @SuppressWarnings(\"unchecked\")\n    CollectingServiceLoader<MetricsPublishingService> serviceLoader =\n        mock(CollectingServiceLoader.class);\n\n    when(serviceLoader.loadServices(MetricsPublishingService.class))\n        .thenReturn(singleton(throwingService));\n\n    metricsService =\n        new InternalDistributedSystemMetricsService(metricsServiceBuilder, logger, serviceLoader,\n            metricsServiceMeterRegistry, emptyList(), meterBinder, system, false);\n\n    metricsService.start();\n\n    RuntimeException thrownDuringStop =\n        new RuntimeException(\"thrown by service.stop() during test\");\n    doThrow(thrownDuringStop).when(throwingService).stop(metricsService);\n\n    metricsService.stop();\n\n    String serviceClassName = throwingService.getClass().getName();\n    ArgumentCaptor<String> actualMessage = ArgumentCaptor.forClass(String.class);\n    verify(logger).error(actualMessage.capture(), same(thrownDuringStop));\n    assertThat(actualMessage.getValue())\n        .as(\"Error log message\")\n        .contains(serviceClassName);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/metrics/internal/InternalDistributedSystemMetricsServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":505,"status":"M"}],"commitId":"fcfe0ad277f29f409e2e4eaecb2b14d36a64e887","commitMessage":"@@@GEODE-7363: Add member type common tag\n\nCo-authored-by: Dale Emery <demery@pivotal.io>\nCo-authored-by: Mark Hanson <mhanson@pivotal.io>\n","date":"2019-10-29 01:38:03","modifiedFileCount":"3","status":"M","submitter":"Dale Emery"}]
