[{"authorTime":"2018-12-13 06:49:35","codes":[{"authorDate":"2018-12-13 06:49:35","commitOrder":1,"curCode":"  public void getRandomAvailableTCPPortRange_returnsUniqueRanges(\n      final boolean useMembershipPortRange) {\n    Set<Integer> ports = new HashSet<>();\n\n    for (int i = 0; i < 1000; ++i) {\n      int[] testPorts = getRandomAvailableTCPPortRange(5, useMembershipPortRange);\n      for (int testPort : testPorts) {\n        assertThat(ports).doesNotContain(testPort);\n        ports.add(testPort);\n      }\n    }\n  }\n","date":"2018-12-13 06:49:35","endLine":251,"groupId":"20389","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getRandomAvailableTCPPortRange_returnsUniqueRanges","params":"(finalbooleanuseMembershipPortRange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b6/adc7059b71a8383f79547026183ef5c33cc2a1.src","preCode":"  public void getRandomAvailableTCPPortRange_returnsUniqueRanges(\n      final boolean useMembershipPortRange) {\n    Set<Integer> ports = new HashSet<>();\n\n    for (int i = 0; i < 1000; ++i) {\n      int[] testPorts = getRandomAvailableTCPPortRange(5, useMembershipPortRange);\n      for (int testPort : testPorts) {\n        assertThat(ports).doesNotContain(testPort);\n        ports.add(testPort);\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/AvailablePortHelperIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"B"},{"authorDate":"2018-12-13 06:49:35","commitOrder":1,"curCode":"  public void initializeUniquePortRange_willReturnUniquePortsForUniqueRanges(\n      final boolean useMembershipPortRange) {\n    Set<Integer> ports = new HashSet<>();\n\n    for (int i = 0; i < 1000; ++i) {\n      initializeUniquePortRange(i);\n      int[] testPorts = getRandomAvailableTCPPorts(5, useMembershipPortRange);\n      for (int testPort : testPorts) {\n        assertThat(ports).doesNotContain(testPort);\n        ports.add(testPort);\n      }\n    }\n  }\n","date":"2018-12-13 06:49:35","endLine":291,"groupId":"20392","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeUniquePortRange_willReturnUniquePortsForUniqueRanges","params":"(finalbooleanuseMembershipPortRange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b6/adc7059b71a8383f79547026183ef5c33cc2a1.src","preCode":"  public void initializeUniquePortRange_willReturnUniquePortsForUniqueRanges(\n      final boolean useMembershipPortRange) {\n    Set<Integer> ports = new HashSet<>();\n\n    for (int i = 0; i < 1000; ++i) {\n      initializeUniquePortRange(i);\n      int[] testPorts = getRandomAvailableTCPPorts(5, useMembershipPortRange);\n      for (int testPort : testPorts) {\n        assertThat(ports).doesNotContain(testPort);\n        ports.add(testPort);\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/AvailablePortHelperIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"B"}],"commitId":"f9322996d8f12b136f83162edc4a87699dbbad23","commitMessage":"@@@GEODE-5674: Stop using random values for test ports (#2958)\n\nIt seems our test framework will fairly frequently have test failing due to\nmultiple users trying to bind the same port number.  This happens when the\ndifferent users happen to randomly generate the same port.  To keep this from\nhappening.  this change will simply hand out the available ports consecutively\nas the test runs.  For dunit tests.  each child vm will be given a portion of\nthe overall range for their use.","date":"2018-12-13 06:49:35","modifiedFileCount":"4","status":"B","submitter":"Brian Rowe"},{"authorTime":"2019-01-19 07:20:23","codes":[{"authorDate":"2018-12-13 06:49:35","commitOrder":2,"curCode":"  public void getRandomAvailableTCPPortRange_returnsUniqueRanges(\n      final boolean useMembershipPortRange) {\n    Set<Integer> ports = new HashSet<>();\n\n    for (int i = 0; i < 1000; ++i) {\n      int[] testPorts = getRandomAvailableTCPPortRange(5, useMembershipPortRange);\n      for (int testPort : testPorts) {\n        assertThat(ports).doesNotContain(testPort);\n        ports.add(testPort);\n      }\n    }\n  }\n","date":"2018-12-13 06:49:35","endLine":251,"groupId":"20389","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getRandomAvailableTCPPortRange_returnsUniqueRanges","params":"(finalbooleanuseMembershipPortRange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b6/adc7059b71a8383f79547026183ef5c33cc2a1.src","preCode":"  public void getRandomAvailableTCPPortRange_returnsUniqueRanges(\n      final boolean useMembershipPortRange) {\n    Set<Integer> ports = new HashSet<>();\n\n    for (int i = 0; i < 1000; ++i) {\n      int[] testPorts = getRandomAvailableTCPPortRange(5, useMembershipPortRange);\n      for (int testPort : testPorts) {\n        assertThat(ports).doesNotContain(testPort);\n        ports.add(testPort);\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/AvailablePortHelperIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"N"},{"authorDate":"2019-01-19 07:20:23","commitOrder":2,"curCode":"  public void initializeUniquePortRange_willReturnUniquePortsForUniqueRanges(\n      final boolean useMembershipPortRange) {\n    Set<Integer> ports = new HashSet<>();\n\n    for (int i = 0; i < 100; ++i) {\n      initializeUniquePortRange(i);\n      int[] testPorts = getRandomAvailableTCPPorts(5, useMembershipPortRange);\n      for (int testPort : testPorts) {\n        assertThat(ports).doesNotContain(testPort);\n        ports.add(testPort);\n      }\n    }\n  }\n","date":"2019-01-19 07:20:23","endLine":291,"groupId":"20392","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeUniquePortRange_willReturnUniquePortsForUniqueRanges","params":"(finalbooleanuseMembershipPortRange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/0d/68ae67c014a6b35163831456df3b2aead6ab1c.src","preCode":"  public void initializeUniquePortRange_willReturnUniquePortsForUniqueRanges(\n      final boolean useMembershipPortRange) {\n    Set<Integer> ports = new HashSet<>();\n\n    for (int i = 0; i < 1000; ++i) {\n      initializeUniquePortRange(i);\n      int[] testPorts = getRandomAvailableTCPPorts(5, useMembershipPortRange);\n      for (int testPort : testPorts) {\n        assertThat(ports).doesNotContain(testPort);\n        ports.add(testPort);\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/AvailablePortHelperIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"bd45232c82e9651a85074fe939540ca115918f4b","commitMessage":"@@@GEODE-6268: Reduce the number of iterations for unique port ranges in AvailablePortHelperIntegrationTest (#3092)\n\n- This test was failing fairly consistently on Windows. An initial assumption\n  was that the given port range would be completely free. This is typically\n  true in a Linux/Docker environment but is not the case on Windows.\n- The logic of these modified tests is somewhat extreme as in actual use.  there\n  would never be a need for 1000 ranges.\n\nSigned-off-by: Aditya Anchuri <aanchuri@pivotal.io>","date":"2019-01-19 07:20:23","modifiedFileCount":"1","status":"M","submitter":"Jens Deppe"},{"authorTime":"2019-05-11 06:03:33","codes":[{"authorDate":"2018-12-13 06:49:35","commitOrder":3,"curCode":"  public void getRandomAvailableTCPPortRange_returnsUniqueRanges(\n      final boolean useMembershipPortRange) {\n    Set<Integer> ports = new HashSet<>();\n\n    for (int i = 0; i < 1000; ++i) {\n      int[] testPorts = getRandomAvailableTCPPortRange(5, useMembershipPortRange);\n      for (int testPort : testPorts) {\n        assertThat(ports).doesNotContain(testPort);\n        ports.add(testPort);\n      }\n    }\n  }\n","date":"2018-12-13 06:49:35","endLine":251,"groupId":"20389","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getRandomAvailableTCPPortRange_returnsUniqueRanges","params":"(finalbooleanuseMembershipPortRange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b6/adc7059b71a8383f79547026183ef5c33cc2a1.src","preCode":"  public void getRandomAvailableTCPPortRange_returnsUniqueRanges(\n      final boolean useMembershipPortRange) {\n    Set<Integer> ports = new HashSet<>();\n\n    for (int i = 0; i < 1000; ++i) {\n      int[] testPorts = getRandomAvailableTCPPortRange(5, useMembershipPortRange);\n      for (int testPort : testPorts) {\n        assertThat(ports).doesNotContain(testPort);\n        ports.add(testPort);\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/AvailablePortHelperIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"N"},{"authorDate":"2019-05-11 06:03:33","commitOrder":3,"curCode":"  public void initializeUniquePortRange_willReturnUniquePortsForUniqueRanges(\n      final boolean useMembershipPortRange) {\n    assumeFalse(\n        \"Windows has ports scattered throughout the range that makes this test difficult to pass consistently\",\n        SystemUtils.isWindows());\n\n    Set<Integer> ports = new HashSet<>();\n\n    for (int i = 0; i < 100; ++i) {\n      initializeUniquePortRange(i);\n      int[] testPorts = getRandomAvailableTCPPorts(5, useMembershipPortRange);\n      for (int testPort : testPorts) {\n        assertThat(ports).doesNotContain(testPort);\n        ports.add(testPort);\n      }\n    }\n  }\n","date":"2019-05-11 06:03:33","endLine":301,"groupId":"20392","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeUniquePortRange_willReturnUniquePortsForUniqueRanges","params":"(finalbooleanuseMembershipPortRange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b7/5c7e3927c0accde4080eb77ce0969ebf59dc88.src","preCode":"  public void initializeUniquePortRange_willReturnUniquePortsForUniqueRanges(\n      final boolean useMembershipPortRange) {\n    Set<Integer> ports = new HashSet<>();\n\n    for (int i = 0; i < 100; ++i) {\n      initializeUniquePortRange(i);\n      int[] testPorts = getRandomAvailableTCPPorts(5, useMembershipPortRange);\n      for (int testPort : testPorts) {\n        assertThat(ports).doesNotContain(testPort);\n        ports.add(testPort);\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/AvailablePortHelperIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"}],"commitId":"066631c5e70100d13a207dcd05d1accec7df83f5","commitMessage":"@@@GEODE-6764: Fix tests broken and flaky on Windows (#3577)\n\n\n- ExportConfigCommandTest was broken by refactorings around removing\n  LegacyCommandResult.\n- AvailablePortHelperIntegrationTest has always been flaky on Windows.\n  By default.  Windows uses a bunch more ports than Linux.  so some of\n  these tests just don't work reliably as larger port ranges are not\n  open and available on Windows.\n","date":"2019-05-11 06:03:33","modifiedFileCount":"2","status":"M","submitter":"Jens Deppe"},{"authorTime":"2019-10-04 02:23:24","codes":[{"authorDate":"2019-10-04 02:23:24","commitOrder":4,"curCode":"  public void getRandomAvailableTCPPortRange_returnsUniqueRanges(boolean useMembershipPortRange) {\n    Collection<Integer> previousPorts = new HashSet<>();\n    for (int i = 0; i < 3; ++i) {\n\n      int[] results = getRandomAvailableTCPPortRange(5, useMembershipPortRange);\n\n      Collection<Integer> ports = toSet(results);\n\n      assertThat(previousPorts)\n          .doesNotContainAnyElementsOf(ports);\n\n      previousPorts.addAll(ports);\n    }\n  }\n","date":"2019-10-05 06:19:36","endLine":286,"groupId":"27486","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getRandomAvailableTCPPortRange_returnsUniqueRanges","params":"(booleanuseMembershipPortRange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/1199a2612b782fb135e2a7e344face4df315b3.src","preCode":"  public void getRandomAvailableTCPPortRange_returnsUniqueRanges(\n      final boolean useMembershipPortRange) {\n    Set<Integer> ports = new HashSet<>();\n\n    for (int i = 0; i < 1000; ++i) {\n      int[] testPorts = getRandomAvailableTCPPortRange(5, useMembershipPortRange);\n      for (int testPort : testPorts) {\n        assertThat(ports).doesNotContain(testPort);\n        ports.add(testPort);\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/AvailablePortHelperIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"},{"authorDate":"2019-10-04 02:23:24","commitOrder":4,"curCode":"  public void initializeUniquePortRange_willReturnUniquePortsForUniqueRanges(\n      boolean useMembershipPortRange) {\n    assumeFalse(\n        \"Windows has ports scattered throughout the range that makes this test difficult to pass consistently\",\n        SystemUtils.isWindows());\n\n    Collection<Integer> previousPorts = new HashSet<>();\n    for (int i = 0; i < 3; ++i) {\n\n      initializeUniquePortRange(i);\n      int[] results = getRandomAvailableTCPPorts(5, useMembershipPortRange);\n\n      Collection<Integer> ports = toSet(results);\n\n      assertThat(previousPorts)\n          .doesNotContainAnyElementsOf(ports);\n\n      previousPorts.addAll(ports);\n    }\n  }\n","date":"2019-10-05 06:19:36","endLine":348,"groupId":"27486","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeUniquePortRange_willReturnUniquePortsForUniqueRanges","params":"(booleanuseMembershipPortRange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/1199a2612b782fb135e2a7e344face4df315b3.src","preCode":"  public void initializeUniquePortRange_willReturnUniquePortsForUniqueRanges(\n      final boolean useMembershipPortRange) {\n    assumeFalse(\n        \"Windows has ports scattered throughout the range that makes this test difficult to pass consistently\",\n        SystemUtils.isWindows());\n\n    Set<Integer> ports = new HashSet<>();\n\n    for (int i = 0; i < 100; ++i) {\n      initializeUniquePortRange(i);\n      int[] testPorts = getRandomAvailableTCPPorts(5, useMembershipPortRange);\n      for (int testPort : testPorts) {\n        assertThat(ports).doesNotContain(testPort);\n        ports.add(testPort);\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/AvailablePortHelperIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"}],"commitId":"7c85de04bff6d95ada278ff2c25bc567e7890038","commitMessage":"@@@GEODE-6860: Cleanup AvailablePortHelperIntegrationTest\n\n* Reduce excessive runtime loops\n* Rewrite tests using newer JDK utilities and AssertJ\n* Remove parameters from tests that don't need them\n","date":"2019-10-05 06:19:36","modifiedFileCount":"1","status":"M","submitter":"Kirk Lund"},{"authorTime":"2020-09-03 00:36:08","codes":[{"authorDate":"2019-10-04 02:23:24","commitOrder":5,"curCode":"  public void getRandomAvailableTCPPortRange_returnsUniqueRanges(boolean useMembershipPortRange) {\n    Collection<Integer> previousPorts = new HashSet<>();\n    for (int i = 0; i < 3; ++i) {\n\n      int[] results = getRandomAvailableTCPPortRange(5, useMembershipPortRange);\n\n      Collection<Integer> ports = toSet(results);\n\n      assertThat(previousPorts)\n          .doesNotContainAnyElementsOf(ports);\n\n      previousPorts.addAll(ports);\n    }\n  }\n","date":"2019-10-05 06:19:36","endLine":286,"groupId":"104254","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getRandomAvailableTCPPortRange_returnsUniqueRanges","params":"(booleanuseMembershipPortRange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/1199a2612b782fb135e2a7e344face4df315b3.src","preCode":"  public void getRandomAvailableTCPPortRange_returnsUniqueRanges(boolean useMembershipPortRange) {\n    Collection<Integer> previousPorts = new HashSet<>();\n    for (int i = 0; i < 3; ++i) {\n\n      int[] results = getRandomAvailableTCPPortRange(5, useMembershipPortRange);\n\n      Collection<Integer> ports = toSet(results);\n\n      assertThat(previousPorts)\n          .doesNotContainAnyElementsOf(ports);\n\n      previousPorts.addAll(ports);\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/AvailablePortHelperIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"N"},{"authorDate":"2020-09-03 00:36:08","commitOrder":5,"curCode":"  public void initializeUniquePortRange_willReturnUniquePortsForUniqueRanges() {\n    assumeFalse(\n        \"Windows has ports scattered throughout the range that makes this test difficult to pass \"\n            + \"consistently\",\n        SystemUtils.isWindows());\n\n    Collection<Integer> previousPorts = new HashSet<>();\n    for (int i = 0; i < 3; ++i) {\n\n      initializeUniquePortRange(i);\n      int[] results = getRandomAvailableTCPPorts(5);\n\n      Collection<Integer> ports = toSet(results);\n\n      assertThat(previousPorts)\n          .doesNotContainAnyElementsOf(ports);\n\n      previousPorts.addAll(ports);\n    }\n  }\n","date":"2020-09-03 00:36:08","endLine":227,"groupId":"104254","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeUniquePortRange_willReturnUniquePortsForUniqueRanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/90/edb0b3947858c4d53c244104cc95b150c5cd5d.src","preCode":"  public void initializeUniquePortRange_willReturnUniquePortsForUniqueRanges(\n      boolean useMembershipPortRange) {\n    assumeFalse(\n        \"Windows has ports scattered throughout the range that makes this test difficult to pass consistently\",\n        SystemUtils.isWindows());\n\n    Collection<Integer> previousPorts = new HashSet<>();\n    for (int i = 0; i < 3; ++i) {\n\n      initializeUniquePortRange(i);\n      int[] results = getRandomAvailableTCPPorts(5, useMembershipPortRange);\n\n      Collection<Integer> ports = toSet(results);\n\n      assertThat(previousPorts)\n          .doesNotContainAnyElementsOf(ports);\n\n      previousPorts.addAll(ports);\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/AvailablePortHelperIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"}],"commitId":"547542ec9f05893e9e484d5be46efe83cdfc33e0","commitMessage":"@@@GEODE-8404: Simplify AvailablePortHelper (#5493)\n\nRemoved the following unused methods:\n- getRandomAvailableTCPPortRange(int)\n- getRandomAvailableTCPPorts(int. bool)\n- getRandomAvailableTCPPortRangeKeepers(int)\n- getRandomAvailableTCPPortRangeKeepers(int. bool)\n\nRemoved two methods that used an ineffective.  incorrect calculation to\ntry to distribute ports evenly across VMs:\n\n- getRandomAvailablePortForDUnitSite()\n- getRandomAvailableTCPPortsForDUnitSite()\n\nThese methods attempted to distribute ports by using the VM id as a\nmodulus. The intention was something like this (assuming 5 VMs):\n\nVM 1 would get ports 20001.  20006.  20011.  20016.  ...\nVM 2 would get ports 20002.  20007.  20012.  20017.  ...\nVM 3 would get ports 20003.  20008.  20013.  20018.  ...\nVM 4 would get ports 20004.  20009.  20014.  20019.  ...\nVM 5 would get ports 20000.  20005.  20010.  20015.  ...\n\nBut the actual calculation distributed ports like this:\n\nVM 1: 20000.  20001.  20002.  20003.  20004.  ...\nVM 2: 20000.  20002.  20004.  20006.  20008.  ...\nVM 3: 20001.  20004.  20007.  20010.  20013.  ...\nVM 4: 20000.  20004.  20008.  20012.  20016.  ...\nVM 5: 20000.  20005.  20010.  20015.  20020.  ...\n\n... with lots of potential port collisions from one VM to another.\n\nThe few uses of these methods were replaced by calls to existing methods\ngetRandomAvailableTCPPort() and getRandomAvailableTCPPorts().  which\noffer a more reliable method of distributing ports.","date":"2020-09-03 00:36:08","modifiedFileCount":"23","status":"M","submitter":"Dale Emery"}]
