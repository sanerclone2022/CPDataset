[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testCQAllServersCrash() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    createServer(server1);\n\n    final int port1 = server1.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(1);\n    createClient(client, new int[] {port1, ports[0]}, host0, \"-1\");\n\n    int numCQs = 1;\n    \r\n    createCQ(client, \"testCQAllServersLeave_\" + 11, cqs[11], true);\n    executeCQ(client, \"testCQAllServersLeave_\" + 11, false, null);\n\n    Wait.pause(5 * 1000);\n    waitForCqsConnected(client, \"testCQAllServersLeave_11\", 1);\n\n    \r\n    createValues(server1, regions[0], 10);\n    waitForCreated(client, \"testCQAllServersLeave_11\", KEY + 10);\n\n    createServer(server2, ports[0]);\n    final int thePort2 = server2.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    Wait.pause(8 * 1000);\n\n    \r\n    crashServer(server1);\n\n    Wait.pause(3 * 1000);\n\n    crashServer(server2);\n\n    Wait.pause(3 * 1000);\n    waitForCqsDisconnected(client, \"testCQAllServersLeave_11\", 1);\n\n    \r\n    closeClient(client);\n    closeCrashServer(server1);\n    closeCrashServer(server2);\n  }\n","date":"2018-07-18 03:54:18","endLine":3395,"groupId":"29028","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCQAllServersCrash","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/72f987b8bfe0450ffa77a55fdf0efa1c66c36f.src","preCode":"  public void testCQAllServersCrash() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    createServer(server1);\n\n    final int port1 = server1.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(1);\n    createClient(client, new int[] {port1, ports[0]}, host0, \"-1\");\n\n    int numCQs = 1;\n    \r\n    createCQ(client, \"testCQAllServersLeave_\" + 11, cqs[11], true);\n    executeCQ(client, \"testCQAllServersLeave_\" + 11, false, null);\n\n    Wait.pause(5 * 1000);\n    waitForCqsConnected(client, \"testCQAllServersLeave_11\", 1);\n\n    \r\n    createValues(server1, regions[0], 10);\n    waitForCreated(client, \"testCQAllServersLeave_11\", KEY + 10);\n\n    createServer(server2, ports[0]);\n    final int thePort2 = server2.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    Wait.pause(8 * 1000);\n\n    \r\n    crashServer(server1);\n\n    Wait.pause(3 * 1000);\n\n    crashServer(server2);\n\n    Wait.pause(3 * 1000);\n    waitForCqsDisconnected(client, \"testCQAllServersLeave_11\", 1);\n\n    \r\n    closeClient(client);\n    closeCrashServer(server1);\n    closeCrashServer(server2);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":3351,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testCQPrimaryLeaves() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    createServer(server1);\n    final int port1 = server1.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(1);\n    createClient(client, new int[] {port1, ports[0]}, host0, \"-1\");\n\n    \r\n    createCQ(client, \"testCQAllServersLeave_\" + 11, cqs[11], true);\n    executeCQ(client, \"testCQAllServersLeave_\" + 11, false, null);\n\n    Wait.pause(5 * 1000);\n    waitForCqsConnected(client, \"testCQAllServersLeave_11\", 1);\n    \r\n    createValues(server1, regions[0], 10);\n    waitForCreated(client, \"testCQAllServersLeave_11\", KEY + 10);\n\n    createServer(server2, ports[0]);\n    final int thePort2 = server2.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    Wait.pause(8 * 1000);\n\n    \r\n    closeServer(server1);\n    Wait.pause(10 * 1000);\n    waitForCqsDisconnected(client, \"testCQAllServersLeave_11\", 0);\n\n    \r\n    closeServer(server2);\n    Wait.pause(10 * 1000);\n    waitForCqsDisconnected(client, \"testCQAllServersLeave_11\", 1);\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n  }\n","date":"2018-07-18 03:54:18","endLine":3546,"groupId":"16665","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCQPrimaryLeaves","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/72f987b8bfe0450ffa77a55fdf0efa1c66c36f.src","preCode":"  public void testCQPrimaryLeaves() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    createServer(server1);\n    final int port1 = server1.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(1);\n    createClient(client, new int[] {port1, ports[0]}, host0, \"-1\");\n\n    \r\n    createCQ(client, \"testCQAllServersLeave_\" + 11, cqs[11], true);\n    executeCQ(client, \"testCQAllServersLeave_\" + 11, false, null);\n\n    Wait.pause(5 * 1000);\n    waitForCqsConnected(client, \"testCQAllServersLeave_11\", 1);\n    \r\n    createValues(server1, regions[0], 10);\n    waitForCreated(client, \"testCQAllServersLeave_11\", KEY + 10);\n\n    createServer(server2, ports[0]);\n    final int thePort2 = server2.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    Wait.pause(8 * 1000);\n\n    \r\n    closeServer(server1);\n    Wait.pause(10 * 1000);\n    waitForCqsDisconnected(client, \"testCQAllServersLeave_11\", 0);\n\n    \r\n    closeServer(server2);\n    Wait.pause(10 * 1000);\n    waitForCqsDisconnected(client, \"testCQAllServersLeave_11\", 1);\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":3506,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-08-31 08:10:50","codes":[{"authorDate":"2018-08-31 08:10:50","commitOrder":2,"curCode":"  public void testCQAllServersCrash() {\n    VM server1 = VM.getVM(0);\n    VM server2 = VM.getVM(1);\n    VM client = VM.getVM(2);\n\n    createServer(server1);\n\n    final int port1 = server1.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    final int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(1);\n    createClient(client, new int[] {port1, ports[0]}, host0, \"-1\");\n\n    \r\n    createCQ(client, \"testCQAllServersLeave_\" + 11, cqs[11], true);\n    executeCQ(client, \"testCQAllServersLeave_\" + 11, false, null);\n\n    Wait.pause(5 * 1000);\n    waitForCqsConnected(client, \"testCQAllServersLeave_11\", 1);\n\n    \r\n    createValues(server1, regions[0], 10);\n    waitForCreated(client, \"testCQAllServersLeave_11\", KEY + 10);\n\n    createServer(server2, ports[0]);\n    server2.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    Wait.pause(8 * 1000);\n\n    \r\n    crashServer(server1);\n\n    Wait.pause(3 * 1000);\n\n    crashServer(server2);\n\n    Wait.pause(3 * 1000);\n    waitForCqsDisconnected(client, \"testCQAllServersLeave_11\", 1);\n\n    \r\n    closeClient(client);\n    closeCrashServer(server1);\n    closeCrashServer(server2);\n  }\n","date":"2018-08-31 08:10:50","endLine":2901,"groupId":"10555","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCQAllServersCrash","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void testCQAllServersCrash() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    createServer(server1);\n\n    final int port1 = server1.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(1);\n    createClient(client, new int[] {port1, ports[0]}, host0, \"-1\");\n\n    int numCQs = 1;\n    \r\n    createCQ(client, \"testCQAllServersLeave_\" + 11, cqs[11], true);\n    executeCQ(client, \"testCQAllServersLeave_\" + 11, false, null);\n\n    Wait.pause(5 * 1000);\n    waitForCqsConnected(client, \"testCQAllServersLeave_11\", 1);\n\n    \r\n    createValues(server1, regions[0], 10);\n    waitForCreated(client, \"testCQAllServersLeave_11\", KEY + 10);\n\n    createServer(server2, ports[0]);\n    final int thePort2 = server2.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    Wait.pause(8 * 1000);\n\n    \r\n    crashServer(server1);\n\n    Wait.pause(3 * 1000);\n\n    crashServer(server2);\n\n    Wait.pause(3 * 1000);\n    waitForCqsDisconnected(client, \"testCQAllServersLeave_11\", 1);\n\n    \r\n    closeClient(client);\n    closeCrashServer(server1);\n    closeCrashServer(server2);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2859,"status":"M"},{"authorDate":"2018-08-31 08:10:50","commitOrder":2,"curCode":"  public void testCQPrimaryLeaves() {\n    VM server1 = VM.getVM(0);\n    VM server2 = VM.getVM(1);\n    VM client = VM.getVM(2);\n\n    createServer(server1);\n    final int port1 = server1.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    final int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(1);\n    createClient(client, new int[] {port1, ports[0]}, host0, \"-1\");\n\n    \r\n    createCQ(client, \"testCQAllServersLeave_\" + 11, cqs[11], true);\n    executeCQ(client, \"testCQAllServersLeave_\" + 11, false, null);\n\n    Wait.pause(5 * 1000);\n    waitForCqsConnected(client, \"testCQAllServersLeave_11\", 1);\n    \r\n    createValues(server1, regions[0], 10);\n    waitForCreated(client, \"testCQAllServersLeave_11\", KEY + 10);\n\n    createServer(server2, ports[0]);\n    final int thePort2 = server2.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    Wait.pause(8 * 1000);\n\n    \r\n    closeServer(server1);\n    Wait.pause(10 * 1000);\n    waitForCqsDisconnected(client, \"testCQAllServersLeave_11\", 0);\n\n    \r\n    closeServer(server2);\n    Wait.pause(10 * 1000);\n    waitForCqsDisconnected(client, \"testCQAllServersLeave_11\", 1);\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n  }\n","date":"2018-08-31 08:10:50","endLine":3049,"groupId":"10555","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCQPrimaryLeaves","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void testCQPrimaryLeaves() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n\n    createServer(server1);\n    final int port1 = server1.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    final int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(1);\n    createClient(client, new int[] {port1, ports[0]}, host0, \"-1\");\n\n    \r\n    createCQ(client, \"testCQAllServersLeave_\" + 11, cqs[11], true);\n    executeCQ(client, \"testCQAllServersLeave_\" + 11, false, null);\n\n    Wait.pause(5 * 1000);\n    waitForCqsConnected(client, \"testCQAllServersLeave_11\", 1);\n    \r\n    createValues(server1, regions[0], 10);\n    waitForCreated(client, \"testCQAllServersLeave_11\", KEY + 10);\n\n    createServer(server2, ports[0]);\n    final int thePort2 = server2.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    Wait.pause(8 * 1000);\n\n    \r\n    closeServer(server1);\n    Wait.pause(10 * 1000);\n    waitForCqsDisconnected(client, \"testCQAllServersLeave_11\", 0);\n\n    \r\n    closeServer(server2);\n    Wait.pause(10 * 1000);\n    waitForCqsDisconnected(client, \"testCQAllServersLeave_11\", 1);\n\n    \r\n    closeClient(client);\n    closeServer(server1);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":3010,"status":"M"}],"commitId":"46b78978d894e8851daf86d929ae5efbd9093097","commitMessage":"@@@GEODE-5411: Adding awaitility fixing timing issue in CqPerfDUnitTest\n\n- Fixing timing issue by waiting for cq set to reach the right size\n- Code modernization and cleanup","date":"2018-08-31 08:10:50","modifiedFileCount":"3","status":"M","submitter":"mhansonp"}]
