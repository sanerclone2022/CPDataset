[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testLimitJunctionOnCompactRangeIndexedFieldWithAndClauseOnNonIndexedField()\n      throws Exception {\n    Query query;\n    SelectResults result;\n    Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    for (int i = 0; i <= 15; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"IBM\", new Position(\"IBM\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    for (int i = 16; i < 21; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"VMW\", new Position(\"VMW\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    MyQueryObserverAdapter observer = new MyQueryObserverAdapter();\n    QueryObserver old = QueryObserverHolder.setInstance(observer);\n\n    \r\n    Index idIndex = qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"P.ID\", \"/portfolios1 P\");\n\n    String queryString =\n        \"SELECT * FROM /portfolios1 P, P.positions.values POS WHERE P.ID > 9 AND P.ID < 21 AND POS.secId = 'VMW' LIMIT 5\";\n    query = qs.newQuery(queryString);\n\n    assertNotNull(idIndex);\n    SelectResults resultsWithIndex = (SelectResults) query.execute();\n    assertFalse(observer.limitAppliedAtIndex);\n    assertEquals(5, resultsWithIndex.size());\n  }\n","date":"2018-07-18 03:54:18","endLine":1329,"groupId":"25263","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLimitJunctionOnCompactRangeIndexedFieldWithAndClauseOnNonIndexedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a5/4e5ae173aaf0c335b09cb85d0fec1440765b99.src","preCode":"  public void testLimitJunctionOnCompactRangeIndexedFieldWithAndClauseOnNonIndexedField()\n      throws Exception {\n    Query query;\n    SelectResults result;\n    Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    for (int i = 0; i <= 15; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"IBM\", new Position(\"IBM\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    for (int i = 16; i < 21; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"VMW\", new Position(\"VMW\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    MyQueryObserverAdapter observer = new MyQueryObserverAdapter();\n    QueryObserver old = QueryObserverHolder.setInstance(observer);\n\n    \r\n    Index idIndex = qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"P.ID\", \"/portfolios1 P\");\n\n    String queryString =\n        \"SELECT * FROM /portfolios1 P, P.positions.values POS WHERE P.ID > 9 AND P.ID < 21 AND POS.secId = 'VMW' LIMIT 5\";\n    query = qs.newQuery(queryString);\n\n    assertNotNull(idIndex);\n    SelectResults resultsWithIndex = (SelectResults) query.execute();\n    assertFalse(observer.limitAppliedAtIndex);\n    assertEquals(5, resultsWithIndex.size());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1296,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testLimitJunctionOnRangeIndexedFieldWithAndClauseOnNonIndexedField()\n      throws Exception {\n    Query query;\n    SelectResults result;\n    Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    for (int i = 0; i <= 15; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"IBM\", new Position(\"IBM\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    for (int i = 16; i < 21; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"VMW\", new Position(\"VMW\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    MyQueryObserverAdapter observer = new MyQueryObserverAdapter();\n    QueryObserver old = QueryObserverHolder.setInstance(observer);\n\n    \r\n    Index idIndex = qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"P.ID\",\n        \"/portfolios1 P, P.positions.values POS\");\n\n    String queryString =\n        \"SELECT * FROM /portfolios1 P, P.positions.values POS WHERE P.ID > 9 AND P.ID < 21 AND POS.secId = 'VMW' LIMIT 5\";\n    query = qs.newQuery(queryString);\n\n    assertNotNull(idIndex);\n    SelectResults resultsWithIndex = (SelectResults) query.execute();\n    assertFalse(observer.limitAppliedAtIndex);\n    assertEquals(5, resultsWithIndex.size());\n  }\n","date":"2018-07-18 03:54:18","endLine":1366,"groupId":"25263","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLimitJunctionOnRangeIndexedFieldWithAndClauseOnNonIndexedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a5/4e5ae173aaf0c335b09cb85d0fec1440765b99.src","preCode":"  public void testLimitJunctionOnRangeIndexedFieldWithAndClauseOnNonIndexedField()\n      throws Exception {\n    Query query;\n    SelectResults result;\n    Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    for (int i = 0; i <= 15; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"IBM\", new Position(\"IBM\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    for (int i = 16; i < 21; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"VMW\", new Position(\"VMW\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    MyQueryObserverAdapter observer = new MyQueryObserverAdapter();\n    QueryObserver old = QueryObserverHolder.setInstance(observer);\n\n    \r\n    Index idIndex = qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"P.ID\",\n        \"/portfolios1 P, P.positions.values POS\");\n\n    String queryString =\n        \"SELECT * FROM /portfolios1 P, P.positions.values POS WHERE P.ID > 9 AND P.ID < 21 AND POS.secId = 'VMW' LIMIT 5\";\n    query = qs.newQuery(queryString);\n\n    assertNotNull(idIndex);\n    SelectResults resultsWithIndex = (SelectResults) query.execute();\n    assertFalse(observer.limitAppliedAtIndex);\n    assertEquals(5, resultsWithIndex.size());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1332,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testLimitJunctionOnCompactRangeIndexedFieldWithAndClauseOnNonIndexedField()\n      throws Exception {\n    Query query;\n    SelectResults result;\n    Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    for (int i = 0; i <= 15; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"IBM\", new Position(\"IBM\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    for (int i = 16; i < 21; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"VMW\", new Position(\"VMW\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    MyQueryObserverAdapter observer = new MyQueryObserverAdapter();\n    QueryObserver old = QueryObserverHolder.setInstance(observer);\n\n    \r\n    Index idIndex =\n        qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"P.ID\", SEPARATOR + \"portfolios1 P\");\n\n    String queryString =\n        \"SELECT * FROM \" + SEPARATOR\n            + \"portfolios1 P, P.positions.values POS WHERE P.ID > 9 AND P.ID < 21 AND POS.secId = 'VMW' LIMIT 5\";\n    query = qs.newQuery(queryString);\n\n    assertNotNull(idIndex);\n    SelectResults resultsWithIndex = (SelectResults) query.execute();\n    assertFalse(observer.limitAppliedAtIndex);\n    assertEquals(5, resultsWithIndex.size());\n  }\n","date":"2020-05-29 00:37:39","endLine":1348,"groupId":"104990","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLimitJunctionOnCompactRangeIndexedFieldWithAndClauseOnNonIndexedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5c/3d68687a85aa18106b6bd8e8c5f712f5086270.src","preCode":"  public void testLimitJunctionOnCompactRangeIndexedFieldWithAndClauseOnNonIndexedField()\n      throws Exception {\n    Query query;\n    SelectResults result;\n    Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    for (int i = 0; i <= 15; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"IBM\", new Position(\"IBM\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    for (int i = 16; i < 21; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"VMW\", new Position(\"VMW\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    MyQueryObserverAdapter observer = new MyQueryObserverAdapter();\n    QueryObserver old = QueryObserverHolder.setInstance(observer);\n\n    \r\n    Index idIndex = qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"P.ID\", \"/portfolios1 P\");\n\n    String queryString =\n        \"SELECT * FROM /portfolios1 P, P.positions.values POS WHERE P.ID > 9 AND P.ID < 21 AND POS.secId = 'VMW' LIMIT 5\";\n    query = qs.newQuery(queryString);\n\n    assertNotNull(idIndex);\n    SelectResults resultsWithIndex = (SelectResults) query.execute();\n    assertFalse(observer.limitAppliedAtIndex);\n    assertEquals(5, resultsWithIndex.size());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1313,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testLimitJunctionOnRangeIndexedFieldWithAndClauseOnNonIndexedField()\n      throws Exception {\n    Query query;\n    SelectResults result;\n    Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    for (int i = 0; i <= 15; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"IBM\", new Position(\"IBM\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    for (int i = 16; i < 21; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"VMW\", new Position(\"VMW\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    MyQueryObserverAdapter observer = new MyQueryObserverAdapter();\n    QueryObserver old = QueryObserverHolder.setInstance(observer);\n\n    \r\n    Index idIndex = qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"P.ID\",\n        SEPARATOR + \"portfolios1 P, P.positions.values POS\");\n\n    String queryString =\n        \"SELECT * FROM \" + SEPARATOR\n            + \"portfolios1 P, P.positions.values POS WHERE P.ID > 9 AND P.ID < 21 AND POS.secId = 'VMW' LIMIT 5\";\n    query = qs.newQuery(queryString);\n\n    assertNotNull(idIndex);\n    SelectResults resultsWithIndex = (SelectResults) query.execute();\n    assertFalse(observer.limitAppliedAtIndex);\n    assertEquals(5, resultsWithIndex.size());\n  }\n","date":"2020-05-29 00:37:39","endLine":1386,"groupId":"104990","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLimitJunctionOnRangeIndexedFieldWithAndClauseOnNonIndexedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5c/3d68687a85aa18106b6bd8e8c5f712f5086270.src","preCode":"  public void testLimitJunctionOnRangeIndexedFieldWithAndClauseOnNonIndexedField()\n      throws Exception {\n    Query query;\n    SelectResults result;\n    Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n    for (int i = 0; i <= 15; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"IBM\", new Position(\"IBM\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    for (int i = 16; i < 21; i++) {\n      Portfolio p = new Portfolio(i);\n      p.positions.clear();\n      p.positions.put(\"VMW\", new Position(\"VMW\", i));\n      region.put(\"KEY\" + i, p);\n    }\n\n    MyQueryObserverAdapter observer = new MyQueryObserverAdapter();\n    QueryObserver old = QueryObserverHolder.setInstance(observer);\n\n    \r\n    Index idIndex = qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"P.ID\",\n        \"/portfolios1 P, P.positions.values POS\");\n\n    String queryString =\n        \"SELECT * FROM /portfolios1 P, P.positions.values POS WHERE P.ID > 9 AND P.ID < 21 AND POS.secId = 'VMW' LIMIT 5\";\n    query = qs.newQuery(queryString);\n\n    assertNotNull(idIndex);\n    SelectResults resultsWithIndex = (SelectResults) query.execute();\n    assertFalse(observer.limitAppliedAtIndex);\n    assertEquals(5, resultsWithIndex.size());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1351,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
