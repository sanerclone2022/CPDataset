[{"authorTime":"2020-06-25 04:29:35","codes":[{"authorDate":"2020-06-25 04:29:35","commitOrder":1,"curCode":"  public void serverLauncherUsesDefaultLoggingConfig() {\n    String startLocatorCommand = String.join(\" \",\n        \"start server\",\n        \"--name=\" + serverName,\n        \"--dir=\" + workingDir,\n        \"--disable-default-server\",\n        \"--locators=\\\"\\\"\");\n\n    gfshRule.execute(startLocatorCommand);\n\n    await().untilAsserted(() -> {\n      assertThat(serverLogFile.toFile())\n          .as(serverLogFile.toFile().getAbsolutePath())\n          .exists()\n          .contains(\"Server \" + serverName + \" startup completed in \")\n          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n\n      assertThat(customLogFile.toFile())\n          .as(customLogFile.toFile().getAbsolutePath())\n          .doesNotExist();\n    });\n  }\n","date":"2020-06-25 04:29:35","endLine":107,"groupId":"19135","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"serverLauncherUsesDefaultLoggingConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c6/17167738257eb18badc0a2a6c9a760e71f9b9e.src","preCode":"  public void serverLauncherUsesDefaultLoggingConfig() {\n    String startLocatorCommand = String.join(\" \",\n        \"start server\",\n        \"--name=\" + serverName,\n        \"--dir=\" + workingDir,\n        \"--disable-default-server\",\n        \"--locators=\\\"\\\"\");\n\n    gfshRule.execute(startLocatorCommand);\n\n    await().untilAsserted(() -> {\n      assertThat(serverLogFile.toFile())\n          .as(serverLogFile.toFile().getAbsolutePath())\n          .exists()\n          .contains(\"Server \" + serverName + \" startup completed in \")\n          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n\n      assertThat(customLogFile.toFile())\n          .as(customLogFile.toFile().getAbsolutePath())\n          .doesNotExist();\n    });\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/ServerWithCustomLogConfigAcceptanceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"},{"authorDate":"2020-06-25 04:29:35","commitOrder":1,"curCode":"  public void serverLauncherUsesConfigFileInClasspathWithoutGeodePlugins() throws Exception {\n    copy(configWithoutGeodePluginsFile, workingDir.resolve(\"log4j2.xml\"));\n\n    String classpath = workingDir.toFile().getAbsolutePath();\n\n    String startLocatorCommand = String.join(\" \",\n        \"start server\",\n        \"--name=\" + serverName,\n        \"--dir=\" + workingDir,\n        \"--disable-default-server\",\n        \"--locators=\\\"\\\"\",\n        \"--classpath\", classpath);\n\n    gfshRule.execute(startLocatorCommand);\n\n    await().untilAsserted(() -> {\n      assertThat(serverLogFile.toFile())\n          .as(serverLogFile.toFile().getAbsolutePath())\n          .doesNotExist();\n\n      assertThat(customLogFile.toFile())\n          .as(customLogFile.toFile().getAbsolutePath())\n          .exists()\n          .contains(\"Server \" + serverName + \" startup completed in \")\n          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n    });\n  }\n","date":"2020-06-25 04:29:35","endLine":161,"groupId":"19135","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"serverLauncherUsesConfigFileInClasspathWithoutGeodePlugins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c6/17167738257eb18badc0a2a6c9a760e71f9b9e.src","preCode":"  public void serverLauncherUsesConfigFileInClasspathWithoutGeodePlugins() throws Exception {\n    copy(configWithoutGeodePluginsFile, workingDir.resolve(\"log4j2.xml\"));\n\n    String classpath = workingDir.toFile().getAbsolutePath();\n\n    String startLocatorCommand = String.join(\" \",\n        \"start server\",\n        \"--name=\" + serverName,\n        \"--dir=\" + workingDir,\n        \"--disable-default-server\",\n        \"--locators=\\\"\\\"\",\n        \"--classpath\", classpath);\n\n    gfshRule.execute(startLocatorCommand);\n\n    await().untilAsserted(() -> {\n      assertThat(serverLogFile.toFile())\n          .as(serverLogFile.toFile().getAbsolutePath())\n          .doesNotExist();\n\n      assertThat(customLogFile.toFile())\n          .as(customLogFile.toFile().getAbsolutePath())\n          .exists()\n          .contains(\"Server \" + serverName + \" startup completed in \")\n          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n    });\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/ServerWithCustomLogConfigAcceptanceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"}],"commitId":"ba6e44cf3aafcee211590fd06a65fc561f20578f","commitMessage":"@@@GEODE-8250: Create new custom log config acceptance tests (#5268)\n\nNew tests to discover and verify that use of custom log configs works\nwhen using GFSH to start Locator and Server.","date":"2020-06-25 04:29:35","modifiedFileCount":"2","status":"B","submitter":"Kirk Lund"},{"authorTime":"2020-07-03 01:29:54","codes":[{"authorDate":"2020-07-03 01:29:54","commitOrder":2,"curCode":"  public void serverLauncherUsesDefaultLoggingConfig() {\n    String startServerCommand = String.join(\" \",\n        \"start server\",\n        \"--name=\" + serverName,\n        \"--dir=\" + workingDir,\n        \"--disable-default-server\");\n\n    gfshRule.execute(startServerCommand);\n\n    await().untilAsserted(() -> {\n      assertThat(serverLogFile.toFile())\n          .as(serverLogFile.toFile().getAbsolutePath())\n          .exists()\n          .contains(\"Server \" + serverName + \" startup completed in \")\n          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n\n      assertThat(customLogFile.toFile())\n          .as(customLogFile.toFile().getAbsolutePath())\n          .doesNotExist();\n    });\n  }\n","date":"2020-07-03 01:29:54","endLine":103,"groupId":"101177","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"serverLauncherUsesDefaultLoggingConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/85/bc5e02fae95f8fcac474e86e7a382da564bb9c.src","preCode":"  public void serverLauncherUsesDefaultLoggingConfig() {\n    String startLocatorCommand = String.join(\" \",\n        \"start server\",\n        \"--name=\" + serverName,\n        \"--dir=\" + workingDir,\n        \"--disable-default-server\",\n        \"--locators=\\\"\\\"\");\n\n    gfshRule.execute(startLocatorCommand);\n\n    await().untilAsserted(() -> {\n      assertThat(serverLogFile.toFile())\n          .as(serverLogFile.toFile().getAbsolutePath())\n          .exists()\n          .contains(\"Server \" + serverName + \" startup completed in \")\n          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n\n      assertThat(customLogFile.toFile())\n          .as(customLogFile.toFile().getAbsolutePath())\n          .doesNotExist();\n    });\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/ServerWithCustomLogConfigAcceptanceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2020-07-03 01:29:54","commitOrder":2,"curCode":"  public void serverLauncherUsesConfigFileInClasspathWithoutGeodePlugins() throws Exception {\n    copy(configWithoutGeodePluginsFile, workingDir.resolve(\"log4j2.xml\"));\n\n    String classpath = workingDir.toFile().getAbsolutePath();\n\n    String startServerCommand = String.join(\" \",\n        \"start server\",\n        \"--name=\" + serverName,\n        \"--dir=\" + workingDir,\n        \"--disable-default-server\",\n        \"--classpath\", classpath);\n\n    gfshRule.execute(startServerCommand);\n\n    await().untilAsserted(() -> {\n      assertThat(serverLogFile.toFile())\n          .as(serverLogFile.toFile().getAbsolutePath())\n          .doesNotExist();\n\n      assertThat(customLogFile.toFile())\n          .as(customLogFile.toFile().getAbsolutePath())\n          .exists()\n          .contains(\"Server \" + serverName + \" startup completed in \")\n          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n    });\n  }\n","date":"2020-07-03 01:29:54","endLine":155,"groupId":"101177","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"serverLauncherUsesConfigFileInClasspathWithoutGeodePlugins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/85/bc5e02fae95f8fcac474e86e7a382da564bb9c.src","preCode":"  public void serverLauncherUsesConfigFileInClasspathWithoutGeodePlugins() throws Exception {\n    copy(configWithoutGeodePluginsFile, workingDir.resolve(\"log4j2.xml\"));\n\n    String classpath = workingDir.toFile().getAbsolutePath();\n\n    String startLocatorCommand = String.join(\" \",\n        \"start server\",\n        \"--name=\" + serverName,\n        \"--dir=\" + workingDir,\n        \"--disable-default-server\",\n        \"--locators=\\\"\\\"\",\n        \"--classpath\", classpath);\n\n    gfshRule.execute(startLocatorCommand);\n\n    await().untilAsserted(() -> {\n      assertThat(serverLogFile.toFile())\n          .as(serverLogFile.toFile().getAbsolutePath())\n          .doesNotExist();\n\n      assertThat(customLogFile.toFile())\n          .as(customLogFile.toFile().getAbsolutePath())\n          .exists()\n          .contains(\"Server \" + serverName + \" startup completed in \")\n          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n    });\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/ServerWithCustomLogConfigAcceptanceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"5e6c9e953ae6b43a9551ccda0b01c5857b137f50","commitMessage":"@@@GEODE-8250: Create new custom log config acceptance tests (#5309)\n\n* Adjust GfshRule use of TemporaryFolder and use it\n* Move GfshRuleIntegrationTest from test to integrationTest\n* Fixup GfshRuleIntegrationTest.  VersionManager.  and VersionManagerJUnitTest\n* Add geode-old-versions to integrationTests\n* Print JAVA_HOME directory tree if assertion about java binary fails","date":"2020-07-03 01:29:54","modifiedFileCount":"8","status":"M","submitter":"Kirk Lund"}]
