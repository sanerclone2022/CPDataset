[{"authorTime":"2016-12-01 02:44:01","codes":[{"authorDate":"2019-06-28 06:53:22","commitOrder":6,"curCode":"  private Pair<MembershipManager, DistributedMembershipListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final DistributedMembershipListener listener = mock(DistributedMembershipListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    System.out.println(\"creating 1st membership manager\");\n    final SecurityService securityService = SecurityServiceFactory.create();\n    final MembershipManager m1 =\n        MemberFactory.newMembershipManager(listener, transport, stats1,\n            new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()),\n            config);\n    m1.startEventProcessing();\n    return Pair.of(m1, listener);\n  }\n","date":"2019-06-28 06:53:22","endLine":260,"groupId":"25112","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/45/7db34c2c4ddf55de8930cf00aa5572c0c65db9.src","preCode":"  private Pair<MembershipManager, DistributedMembershipListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final DistributedMembershipListener listener = mock(DistributedMembershipListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    System.out.println(\"creating 1st membership manager\");\n    final SecurityService securityService = SecurityServiceFactory.create();\n    final MembershipManager m1 =\n        MemberFactory.newMembershipManager(listener, transport, stats1,\n            new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()),\n            config);\n    m1.startEventProcessing();\n    return Pair.of(m1, listener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"MB"},{"authorDate":"2016-12-01 02:44:01","commitOrder":6,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient();\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(InetAddressUtil.toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2016-12-01 02:44:41","endLine":95,"groupId":"21162","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/65/a29a8830d6fcbc76446764b9fc3bf6e120a298.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient();\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(InetAddressUtil.toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"NB"}],"commitId":"29d28b91f2bfd02481fd77acbf3f0ddde2e4e0ac","commitMessage":"@@@GEODE-6883: Introduce ArchUnit test for membership (#3748)\n\nUsing ArchUnit to write a test that membership classes must only\ndepend on other membership classes.\n\nCo-Authored-By: Bill Burcham <bburcham@pivotal.io>\nCo-Authored-By: Ernest Burghardt <eburghardt@pivotal.io>\nCo-Authored-By: Dan Smith <dsmith@pivotal.io>\n\n","date":"2019-06-28 06:53:22","modifiedFileCount":"6","status":"M","submitter":"Bill Burcham"},{"authorTime":"2016-12-01 02:44:01","codes":[{"authorDate":"2019-09-11 06:52:14","commitOrder":7,"curCode":"  private Pair<MembershipManager, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MembershipManager m1 =\n        MembershipBuilder.newMembershipBuilder(null)\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .create();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2019-09-11 06:52:14","endLine":266,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e0/85ce10c65284eff26d17a0a4eaf738c21c8004.src","preCode":"  private Pair<MembershipManager, DistributedMembershipListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final DistributedMembershipListener listener = mock(DistributedMembershipListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    System.out.println(\"creating 1st membership manager\");\n    final SecurityService securityService = SecurityServiceFactory.create();\n    final MembershipManager m1 =\n        MemberFactory.newMembershipManager(listener, transport, stats1,\n            new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()),\n            config);\n    m1.startEventProcessing();\n    return Pair.of(m1, listener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2016-12-01 02:44:01","commitOrder":7,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient();\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(InetAddressUtil.toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2016-12-01 02:44:41","endLine":95,"groupId":"21162","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/65/a29a8830d6fcbc76446764b9fc3bf6e120a298.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient();\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(InetAddressUtil.toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"}],"commitId":"4c6dcf955b36e9897dfd146a4433764eb5c983f0","commitMessage":"@@@GEODE_6883: Creating membership api classes (#3985)\n\nCreating a new membership API package. Starting that package out with\nthese classes:\n* MembershipBuilder - created by moving NetMember and NetLocator factory stuff\n  out of MembershipFactory and renaming MembershipFactory to MembershipBuilder\n* Membership - Extracted an interface from MembershipManager\n* Authenticator - Moved Authenticator to the API package\n* MembershipStatistics - Extracted interface from DMStats\n* MembershipListener and MessageListener - Creating these new membership\n  specific interfaces by splitting up DistributedMembershipListener into two\n  separate interfaces.\n* MembershipConfig - Extracted interface from ServiceConfig\n\n* Adding an archunit test for the membership API. Ensure that the API only\n  depends on other API classes.\n\n* Removing GMSMemberFactory and MemberServices\n  These classes were adding another layer to creating a MembershipManager. \n  but they didn't actually allow swapping in a different implementation.\n  Inlining these methods into the respective NetLocatorFactory. \n  NetMemberFactory.  and MembershipManagerFactory.\n\n* Removing getDM from DirectChannelListener - We want to get rid of this\n  interface in favor of other membership\n  specific interfaces that don't depend on core.\n","date":"2019-09-11 06:52:14","modifiedFileCount":"38","status":"M","submitter":"Dan Smith"},{"authorTime":"2019-09-19 07:13:45","codes":[{"authorDate":"2019-09-11 06:52:14","commitOrder":8,"curCode":"  private Pair<MembershipManager, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MembershipManager m1 =\n        MembershipBuilder.newMembershipBuilder(null)\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .create();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2019-09-11 06:52:14","endLine":266,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e0/85ce10c65284eff26d17a0a4eaf738c21c8004.src","preCode":"  private Pair<MembershipManager, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MembershipManager m1 =\n        MembershipBuilder.newMembershipBuilder(null)\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .create();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"N"},{"authorDate":"2019-09-19 07:13:45","commitOrder":8,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient();\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2019-09-19 07:13:45","endLine":96,"groupId":"40905","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8b/7e16a4290038d317a64e925b0627d2a48c4c37.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient();\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(InetAddressUtil.toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"165648b27c29c1b722e2a67b14468f990d26a8ac","commitMessage":"@@@GEODE-7170: Move InetAddressUtils to internal.net package (#4020)\n\n* Rename class from InetAddressUtil to InetAddressUtils\n* Move InetAddressUtils from admin.internal to internal.net\n* Add InetAddressUtilsWithLogging with logging of UnknownHostExceptions\n","date":"2019-09-19 07:13:45","modifiedFileCount":"12","status":"M","submitter":"Kirk Lund"},{"authorTime":"2019-09-19 07:13:45","codes":[{"authorDate":"2019-11-01 07:27:31","commitOrder":9,"curCode":"  private Pair<MembershipManager, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    final MembershipManager m1 =\n        MembershipBuilder.newMembershipBuilder(null)\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .create();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2019-11-01 07:27:31","endLine":276,"groupId":"44591","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/03/ae0572d1e79a8a9e4f7cfecd6325abe97e6cf5.src","preCode":"  private Pair<MembershipManager, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MembershipManager m1 =\n        MembershipBuilder.newMembershipBuilder(null)\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .create();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"},{"authorDate":"2019-09-19 07:13:45","commitOrder":9,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient();\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2019-09-19 07:13:45","endLine":96,"groupId":"40905","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8b/7e16a4290038d317a64e925b0627d2a48c4c37.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient();\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"}],"commitId":"77103d0db68c9dd5087b98d47697dd05f2dc90f5","commitMessage":"@@@GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier (#4230)\n\n* GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier\n\nInitial refactor: removal of NetMember.  MemberAttributes and other classes that subordinated GMS\nidentifiers.  Repurposing GMSMember as a data packet to hold information required in a membership\nidentifer.\n\n* fixing failing tests\n\n* fixing failing unit tests\n\n* picking up a change that IntelliJ didn't auto-save & fixing serializables test\n\n* fixing problems with durable client ids\n\nthese identifiers morph after the client's membership identifier has been formed\nso the member ID needs to be updated before serializing it\n\n* fixing merge error\n\n* updating sanctionedDataSerializables\n\n* fixing lgtm complaint\n\n* removing unnecessary serialization/deserialization methods in GMSUtil\n\n* remove methods no longer needed for serializing an object with a different DSFID\n\n* fixing serializables test\n","date":"2019-11-01 07:27:31","modifiedFileCount":"91","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2019-11-15 09:44:52","codes":[{"authorDate":"2019-11-15 09:44:52","commitOrder":10,"curCode":"  private Pair<MembershipManager, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    final MembershipManager m1 =\n        MembershipBuilder.newMembershipBuilder(null)\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR))))\n            .create();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2019-11-15 09:44:52","endLine":284,"groupId":"44591","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/03/b30bb25c19f100a4df088eb3617aed1cdb1bf2.src","preCode":"  private Pair<MembershipManager, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    final MembershipManager m1 =\n        MembershipBuilder.newMembershipBuilder(null)\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .create();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2019-11-15 09:44:52","commitOrder":10,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)));\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2019-11-15 09:44:52","endLine":102,"groupId":"40905","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ea/9c83e9df70154b70a2889c5b06c86986d497a9.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient();\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"22a8c26a06f8a835d51c3c67da364135e1317099","commitMessage":"@@@GEODE-7345: break dependency on SocketCreator (#4322)\n\n","date":"2019-11-15 09:44:52","modifiedFileCount":"44","status":"M","submitter":"Bill Burcham"},{"authorTime":"2019-11-19 02:55:04","codes":[{"authorDate":"2019-11-19 02:55:04","commitOrder":11,"curCode":"  private Pair<MembershipManager, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    final MembershipManager m1 =\n        MembershipBuilder.newMembershipBuilder(null)\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .create();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2019-11-19 02:55:04","endLine":286,"groupId":"44591","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b0/f54ac6b026f59b294fe135e4c5435facc71cc4.src","preCode":"  private Pair<MembershipManager, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    final MembershipManager m1 =\n        MembershipBuilder.newMembershipBuilder(null)\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR))))\n            .create();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2019-11-19 02:55:04","commitOrder":11,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2019-11-19 02:55:04","endLine":105,"groupId":"40905","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1c/f5f84cc99aab0ccd4d415f116b8f14d9b9afa6.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)));\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"4c87d2e5c4afde9faa63e4d60998e549d254d34b","commitMessage":"@@@GEODE-7344: break dependencies on DataSerializer (#4339)\n\n\n","date":"2019-11-19 02:55:04","modifiedFileCount":"29","status":"M","submitter":"Bill Burcham"},{"authorTime":"2019-11-19 02:55:04","codes":[{"authorDate":"2019-11-20 01:04:51","commitOrder":12,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    final Membership m1 =\n        MembershipBuilder.newMembershipBuilder(null)\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(mock(LifecycleListener.class))\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .create();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2019-11-20 01:04:51","endLine":290,"groupId":"0","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f3/406519663e6435d0242376ded895a3cddb0799.src","preCode":"  private Pair<MembershipManager, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    final MembershipManager m1 =\n        MembershipBuilder.newMembershipBuilder(null)\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .create();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"},{"authorDate":"2019-11-19 02:55:04","commitOrder":12,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2019-11-19 02:55:04","endLine":105,"groupId":"40905","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1c/f5f84cc99aab0ccd4d415f116b8f14d9b9afa6.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"4c1b21c29a31234e0795da8f2c1b471f0158790f","commitMessage":"@@@GEODE-7456: Moving GMSMembershipManager into gms package (#4313)\n\nAdding a Distribution class that ClusterDistributionManager and the\nrest of geode-core uses.  which wraps GMSMembershipManager. Moving\nGMSMembershipManager into the gms package and renaming to MembershipImpl.\n\nDistribution now owns the DirectChannel.  rather than MembershipImpl.\n\nRemoving the MembershipManager interface and replacing uses of it with the\nMembership interface.\n\n* Added an ArchUnitTest for geode-core to only use Distribution to access Membership.\n","date":"2019-11-20 01:04:51","modifiedFileCount":"48","status":"M","submitter":"Ernie Burghardt"},{"authorTime":"2019-11-19 02:55:04","codes":[{"authorDate":"2019-11-23 02:59:28","commitOrder":13,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener lifeCycleListener = mock(LifecycleListener.class);\n    final Membership m1 =\n        MembershipBuilder.newMembershipBuilder(null)\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(lifeCycleListener)\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1.getServices());\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2019-11-23 02:59:28","endLine":297,"groupId":"42394","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7f/2cda16cc97ec2f13958bf2a57334ac2c94111f.src","preCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    final Membership m1 =\n        MembershipBuilder.newMembershipBuilder(null)\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(mock(LifecycleListener.class))\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .create();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"},{"authorDate":"2019-11-19 02:55:04","commitOrder":13,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2019-11-19 02:55:04","endLine":105,"groupId":"40905","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1c/f5f84cc99aab0ccd4d415f116b8f14d9b9afa6.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"7e2f0c0bdf255863c957d730871d64e47451cfc6","commitMessage":"@@@GEODE-7456: Removed dependencies related to membership manager refactor (#4349)\n\n* Making QuorumChecker part of the membership API\n\nThe Membership interface was returning a QuorumChecker.  but that was not part\nof the API package. Moving that to API package. Extracting an interface for\nMembershipInformation.  which is opaque to consumers of the membership system -\nit should be returned from a QuorumChecker and passed back into the new\nmembership system.\n\n* Making MembershipTestHook part of the Membership API\n\n* Removing releaseQuorumChecker and dependency on InternalDistributedSystem from Membership\n\nThis releaseQuorumChecker method was using the system just to check some flags\non it and call close. Instead.  have InternalDistributedSystem directly call\nclose on the QuorumChecker.\n\n* Removed dependencies on LogMarker and Assert.\n\n* Removed dependencies on InternalLocator and GMSLocatorAdapter by moving to the LifecycleListener.\n\n* Removed dependency on deprecated SystemFailure.\n\n* Removed dependency on SystemTimer and SystemTimer.TimerTask.  using LoggingExecutor now.\n\n* Fixing tests to use Distribution instead of a mocked out Membership and static method to connect locator to Services.\n","date":"2019-11-23 02:59:28","modifiedFileCount":"23","status":"M","submitter":"Ernie Burghardt"},{"authorTime":"2019-11-19 02:55:04","codes":[{"authorDate":"2019-12-06 22:52:06","commitOrder":14,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener lifeCycleListener = mock(LifecycleListener.class);\n    final Membership m1 =\n        MembershipBuilder.newMembershipBuilder()\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(lifeCycleListener)\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1.getServices());\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2019-12-06 22:52:06","endLine":297,"groupId":"42394","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/56/2225233b014c35b0b78d28fdd69f787a4128be.src","preCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener lifeCycleListener = mock(LifecycleListener.class);\n    final Membership m1 =\n        MembershipBuilder.newMembershipBuilder(null)\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(lifeCycleListener)\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1.getServices());\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"},{"authorDate":"2019-11-19 02:55:04","commitOrder":14,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2019-11-19 02:55:04","endLine":105,"groupId":"40905","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1c/f5f84cc99aab0ccd4d415f116b8f14d9b9afa6.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"5acfb7f2d37eca5544cad21f7f9c4aef6410b23a","commitMessage":"@@@GEODE-7551: Remove membership API dependency on ClusterDistributionManager (#4431)\n\n* GEODE-7551: Remove membership API dependency on ClusterDistributionManager\n\nClusterDistributionManager was only being used to get canonical IDs and\nto check for shutdown conditions.  I've modified the CDM to set shutdown\nstatus in membership in its shutdown() method and have modified\nmembership to just use the current MembershipView (which contains any\nsurprise members) instead of asking CDM for a canonical ID.  which just\ngrabs said MembershipView and does the same thing.\n\n* removing ClusterDistributionManager from dependency exceptions in MembershipDependenciesJUnitTest as well\n\n* reverting unnecessary API change\n\n* Resurrecting the isCloseInProgress check\n\nwe have to keep views from being sent out when the DM initiates sending shutdown\nmessages.\n","date":"2019-12-06 22:52:06","modifiedFileCount":"15","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2019-11-19 02:55:04","codes":[{"authorDate":"2019-12-10 02:02:23","commitOrder":15,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener lifeCycleListener = mock(LifecycleListener.class);\n    final Membership m1 =\n        MembershipBuilder.newMembershipBuilder()\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(lifeCycleListener)\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1);\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2019-12-10 02:02:23","endLine":297,"groupId":"42394","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ac/b9553530bfb943b1617a4c46b436d17f9b08bf.src","preCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener lifeCycleListener = mock(LifecycleListener.class);\n    final Membership m1 =\n        MembershipBuilder.newMembershipBuilder()\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(lifeCycleListener)\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1.getServices());\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"},{"authorDate":"2019-11-19 02:55:04","commitOrder":15,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2019-11-19 02:55:04","endLine":105,"groupId":"40905","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1c/f5f84cc99aab0ccd4d415f116b8f14d9b9afa6.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"2142308df558364eb078a8a3a7382c4c63594945","commitMessage":"@@@GEODE-7552: Break dependency on Services (#4438)\n\nRewrote locator installation to use Membership rather than the \"hidden\"\nServices interface.\n\nI rewrote some tests to stop using the internal interfaces of membership\nas well.  and along the way saw that JGroupsMessenger was maintaining a\ncollection of old identifiers that was only being consumed by a test & I\nremoved it.","date":"2019-12-10 02:02:23","modifiedFileCount":"19","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2019-11-19 02:55:04","codes":[{"authorDate":"2019-12-10 08:50:10","commitOrder":16,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener lifeCycleListener = mock(LifecycleListener.class);\n    final Membership m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder()\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(lifeCycleListener)\n            .setMemberIDFactory(new MemberIdentifierFactoryImpl())\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1);\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2019-12-10 08:50:10","endLine":299,"groupId":"24835","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/50/27b51d6df803b5fb71d083f977cc0297d7bb70.src","preCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener lifeCycleListener = mock(LifecycleListener.class);\n    final Membership m1 =\n        MembershipBuilder.newMembershipBuilder()\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(lifeCycleListener)\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1);\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"M"},{"authorDate":"2019-11-19 02:55:04","commitOrder":16,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2019-11-19 02:55:04","endLine":105,"groupId":"40905","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1c/f5f84cc99aab0ccd4d415f116b8f14d9b9afa6.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"6f247efc6c0e483af94f361418146a5b9a691548","commitMessage":"@@@GEODE-7479: Change Membership interface to use MemberIdentifier interface (#4420)\n\nChanging all classes in Membership to be parameterized by an ID type. \nwhich extends MemberIdentifier. This allows core to create a membership\nsystem that manages InternalDistributedMember objects in a type safe\nway.\n\nRemoving all uses of InternalDistributedMember.  DistributedMember.  and\nfriends from within the membership code.\n","date":"2019-12-10 08:50:10","modifiedFileCount":"81","status":"M","submitter":"Ernie Burghardt"},{"authorTime":"2019-11-19 02:55:04","codes":[{"authorDate":"2019-12-20 04:44:28","commitOrder":17,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) throws MemberStartupException {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener lifeCycleListener = mock(LifecycleListener.class);\n    final Membership m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder()\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(lifeCycleListener)\n            .setMemberIDFactory(new MemberIdentifierFactoryImpl())\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1);\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2019-12-20 04:44:28","endLine":300,"groupId":"24835","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5c/87f6d1d206447cd2f6da6c6b8615db889c88de.src","preCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener lifeCycleListener = mock(LifecycleListener.class);\n    final Membership m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder()\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(lifeCycleListener)\n            .setMemberIDFactory(new MemberIdentifierFactoryImpl())\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1);\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"},{"authorDate":"2019-11-19 02:55:04","commitOrder":17,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2019-11-19 02:55:04","endLine":105,"groupId":"40905","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1c/f5f84cc99aab0ccd4d415f116b8f14d9b9afa6.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"a357e6d0d1e6eb6658e0e36900e3e1aaede77884","commitMessage":"@@@GEODE-7556: remove membership dependencies on geode-core exeptions (#4502)\n\n* GEODE-7556: remove membership dependencies on geode-core exeptions\n\nRemoved use of geode-core exceptions from membership. DistributionImpl now converts membership exceptions into geode-core exceptions where necessary.\n\nExcept for MembershipClosedException the new membership exceptions are all checked exceptions. This let me isolate where the exceptions are used and ensure that they're changed into appropriate geode-core exceptions.\n\nMemberShunnedException is now in the membership module instead of the TcpConduit module. It.  too.  is a checked exception.\n\nCancelCriterion is also removed from use in the membership module. The Stopper in Services.java doesn't need to be a CancelCriterion to function properly.\n\nSeveral tests had to be modified to handle our stress-test environement.\n\n* use checkCancelled method\n","date":"2019-12-20 04:44:28","modifiedFileCount":"45","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2019-11-19 02:55:04","codes":[{"authorDate":"2019-12-21 08:53:22","commitOrder":18,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) throws MemberStartupException {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener lifeCycleListener = mock(LifecycleListener.class);\n    final Membership m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder()\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(lifeCycleListener)\n            .setMemberIDFactory(new MemberIdentifierFactoryImpl())\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .setSocketCreator(asTcpSocketCreator(SocketCreatorFactory\n                .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER)))\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1);\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2019-12-21 08:53:22","endLine":302,"groupId":"24835","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/67/a16e843b30dffd2382d0ac2d7bd07fb3ffd32f.src","preCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) throws MemberStartupException {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener lifeCycleListener = mock(LifecycleListener.class);\n    final Membership m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder()\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(lifeCycleListener)\n            .setMemberIDFactory(new MemberIdentifierFactoryImpl())\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1);\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"},{"authorDate":"2019-11-19 02:55:04","commitOrder":18,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2019-11-19 02:55:04","endLine":105,"groupId":"40905","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1c/f5f84cc99aab0ccd4d415f116b8f14d9b9afa6.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"fa7463bdaf918afe70cf3fe0a824a4c4f9937a6c","commitMessage":"@@@GEODE-7541: Removing dependency on SocketCreator/Factory (#4479)\n\n- Pushed static call to SocketCreatorFactory up to DistributionImpl\n- SocketCreator is now a parameter to MembershipBuilder\n- extracted MembershipSocketCreator interface from SocketCreator\n- created adapter layer to handle passthru of SocketCreator calls\n- renamed with \"Tcp\" prefix previously refactored socket creator efforts\n- Consolidate socket creator interfaces to just TcpSocketCreator.\n- Added checked exception handling to Services and re-arranged the finally block to correctly handle start/started state.\n","date":"2019-12-21 08:53:22","modifiedFileCount":"45","status":"M","submitter":"Ernie Burghardt"},{"authorTime":"2019-11-19 02:55:04","codes":[{"authorDate":"2020-01-01 11:13:13","commitOrder":19,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) throws MemberStartupException {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener lifeCycleListener = mock(LifecycleListener.class);\n    final Membership m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder()\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(lifeCycleListener)\n            .setMemberIDFactory(new MemberIdentifierFactory() {\n              @Override\n              public InternalDistributedMember create(MemberData memberInfo) {\n                return new InternalDistributedMember(memberInfo);\n              }\n\n              @Override\n              public Comparator<InternalDistributedMember> getComparator() {\n                return Comparator.naturalOrder();\n              }\n            })\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .setSocketCreator(asTcpSocketCreator(SocketCreatorFactory\n                .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER)))\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1);\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2020-01-01 11:13:13","endLine":304,"groupId":"11533","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/99/990bc2e08a9b33f5de6b37c848eeeb8f6f986e.src","preCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) throws MemberStartupException {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(GMSMemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((GMSMemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener lifeCycleListener = mock(LifecycleListener.class);\n    final Membership m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder()\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(lifeCycleListener)\n            .setMemberIDFactory(new MemberIdentifierFactoryImpl())\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .setSocketCreator(asTcpSocketCreator(SocketCreatorFactory\n                .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER)))\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1);\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"},{"authorDate":"2019-11-19 02:55:04","commitOrder":19,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2019-11-19 02:55:04","endLine":105,"groupId":"40905","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1c/f5f84cc99aab0ccd4d415f116b8f14d9b9afa6.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"263b3e22fbd3f205c2a0348d7e068e6a48a4b32c","commitMessage":"@@@GEODE-7634: create an ArchUnitTest that asserts that geode-core only ? (#4549)\n\n* GEODE-7634: create an ArchUnitTest that asserts that geode-core only uses the membership API\n\ncreating a new test to enforce use of membership APIs.  There are a few\nexceptions in test code.  plus others that aren't in the \"integration\ntest\" source set.\n\n* removing test dependencies and fixing crashDistributedSystem method\n\n* moved membership API classes to membership.api package and fixed OOME\n\n* move address verification class to tcp-server module and subclass in membership\n\n* rebasing on Ernie's GeodeGlossary stuff\n","date":"2020-01-01 11:13:13","modifiedFileCount":"132","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2019-11-19 02:55:04","codes":[{"authorDate":"2020-01-11 06:38:53","commitOrder":20,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) throws MemberStartupException {\n    final MembershipListener<InternalDistributedMember> listener = mock(MembershipListener.class);\n    final MessageListener<InternalDistributedMember> messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener<InternalDistributedMember> lifeCycleListener = mock(LifecycleListener.class);\n\n    final MemberIdentifierFactory<InternalDistributedMember> memberIdentifierFactory =\n        new MemberIdentifierFactory<InternalDistributedMember>() {\n          @Override\n          public InternalDistributedMember create(MemberData memberInfo) {\n            return new InternalDistributedMember(memberInfo);\n          }\n\n          @Override\n          public Comparator<InternalDistributedMember> getComparator() {\n            return Comparator.naturalOrder();\n          }\n        };\n\n    final TcpClient locatorClient = new TcpClient(\n        asTcpSocketCreator(\n            SocketCreatorFactory\n                .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n    final TcpSocketCreator socketCreator = asTcpSocketCreator(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER));\n    final GMSAuthenticator authenticator =\n        new GMSAuthenticator(config.getSecurityProps(), securityService,\n            mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter());\n    final Membership<InternalDistributedMember> m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder(\n            socketCreator, locatorClient, serializer, memberIdentifierFactory)\n            .setAuthenticator(authenticator)\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1);\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2020-01-11 06:38:53","endLine":310,"groupId":"16323","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/49/7d2c5e8f5ea915c8fcdb80e2a5c5e78f48116f.src","preCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) throws MemberStartupException {\n    final MembershipListener listener = mock(MembershipListener.class);\n    final MessageListener messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener lifeCycleListener = mock(LifecycleListener.class);\n    final Membership m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder()\n            .setAuthenticator(new GMSAuthenticator(config.getSecurityProps(), securityService,\n                mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter()))\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setSerializer(serializer)\n            .setLifecycleListener(lifeCycleListener)\n            .setMemberIDFactory(new MemberIdentifierFactory() {\n              @Override\n              public InternalDistributedMember create(MemberData memberInfo) {\n                return new InternalDistributedMember(memberInfo);\n              }\n\n              @Override\n              public Comparator<InternalDistributedMember> getComparator() {\n                return Comparator.naturalOrder();\n              }\n            })\n            .setLocatorClient(new TcpClient(\n                asTcpSocketCreator(\n                    SocketCreatorFactory\n                        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n                InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n                InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))\n            .setSocketCreator(asTcpSocketCreator(SocketCreatorFactory\n                .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER)))\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1);\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"},{"authorDate":"2019-11-19 02:55:04","commitOrder":20,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2019-11-19 02:55:04","endLine":105,"groupId":"40905","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1c/f5f84cc99aab0ccd4d415f116b8f14d9b9afa6.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"495a6033d161c780c163fca61cfeb84260c13a7b","commitMessage":"@@@GEODE-7653: move required settings to MembershipBuilder constructor (#4578)\n\n\n","date":"2020-01-11 06:38:53","modifiedFileCount":"9","status":"M","submitter":"Bill Burcham"},{"authorTime":"2020-01-30 07:37:54","codes":[{"authorDate":"2020-01-30 07:37:54","commitOrder":21,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) throws MemberStartupException {\n    final MembershipListener<InternalDistributedMember> listener = mock(MembershipListener.class);\n    final MessageListener<InternalDistributedMember> messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener<InternalDistributedMember> lifeCycleListener = mock(LifecycleListener.class);\n\n    final MemberIdentifierFactory<InternalDistributedMember> memberIdentifierFactory =\n        new MemberIdentifierFactory<InternalDistributedMember>() {\n          @Override\n          public InternalDistributedMember create(MemberData memberInfo) {\n            return new InternalDistributedMember(memberInfo);\n          }\n\n          @Override\n          public Comparator<InternalDistributedMember> getComparator() {\n            return Comparator.naturalOrder();\n          }\n        };\n\n    final TcpClient locatorClient = new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n    final TcpSocketCreator socketCreator = SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER);\n    final GMSAuthenticator authenticator =\n        new GMSAuthenticator(config.getSecurityProps(), securityService,\n            mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter());\n    final Membership<InternalDistributedMember> m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder(\n            socketCreator, locatorClient, serializer, memberIdentifierFactory)\n            .setAuthenticator(authenticator)\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1);\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2020-01-30 07:37:54","endLine":307,"groupId":"16323","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d7/0e603c9ef3bb9de227b5722decb6a5654c2a62.src","preCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) throws MemberStartupException {\n    final MembershipListener<InternalDistributedMember> listener = mock(MembershipListener.class);\n    final MessageListener<InternalDistributedMember> messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener<InternalDistributedMember> lifeCycleListener = mock(LifecycleListener.class);\n\n    final MemberIdentifierFactory<InternalDistributedMember> memberIdentifierFactory =\n        new MemberIdentifierFactory<InternalDistributedMember>() {\n          @Override\n          public InternalDistributedMember create(MemberData memberInfo) {\n            return new InternalDistributedMember(memberInfo);\n          }\n\n          @Override\n          public Comparator<InternalDistributedMember> getComparator() {\n            return Comparator.naturalOrder();\n          }\n        };\n\n    final TcpClient locatorClient = new TcpClient(\n        asTcpSocketCreator(\n            SocketCreatorFactory\n                .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n    final TcpSocketCreator socketCreator = asTcpSocketCreator(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER));\n    final GMSAuthenticator authenticator =\n        new GMSAuthenticator(config.getSecurityProps(), securityService,\n            mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter());\n    final Membership<InternalDistributedMember> m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder(\n            socketCreator, locatorClient, serializer, memberIdentifierFactory)\n            .setAuthenticator(authenticator)\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1);\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"},{"authorDate":"2020-01-30 07:37:54","commitOrder":21,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(SocketCreatorFactory\n          .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2020-01-30 07:37:54","endLine":102,"groupId":"40905","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/60/dacb160a58e1199ade41638459229c6a2a0797.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(\n          asTcpSocketCreator(\n              SocketCreatorFactory\n                  .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"434b5b0923a54d5042acd074863d3254358f2617","commitMessage":"@@@GEODE-7597: Factor out code needed in Membership from SocketCreator (#4637)\n\n* GEODE-7597: Factor out code needed in Membership from SocketCreator\n\nImplemented a new TcpSocketCreatorImpl.  Due to GeodeHttpClientRule\ndependencies this and associated interfaces are in geode-common.  I'd\nrather have them in geode-tcp-server.\n\nSocketCreator now subclasses TcpSocketCreatorImpl and I've removed the\nadapter class.  which is no longer needed.\n\n* added missing files\n\n* fixing dunit failure and moving TcpSocketCreator back to the tcp-server project\n\n* fixing bind address and inheritance problems in socket creators\n\n* fixes for unit test failures\n\n* spotless\n\n* relax assertion in test that fails stress-testing\n","date":"2020-01-30 07:37:54","modifiedFileCount":"31","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-01-30 07:37:54","codes":[{"authorDate":"2020-01-30 14:08:07","commitOrder":22,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport,\n      final MembershipLocator<InternalDistributedMember> locator) throws MemberStartupException {\n    final MembershipListener<InternalDistributedMember> listener = mock(MembershipListener.class);\n    final MessageListener<InternalDistributedMember> messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener<InternalDistributedMember> lifeCycleListener = mock(LifecycleListener.class);\n\n    final MemberIdentifierFactory<InternalDistributedMember> memberIdentifierFactory =\n        new MemberIdentifierFactory<InternalDistributedMember>() {\n          @Override\n          public InternalDistributedMember create(MemberData memberInfo) {\n            return new InternalDistributedMember(memberInfo);\n          }\n\n          @Override\n          public Comparator<InternalDistributedMember> getComparator() {\n            return Comparator.naturalOrder();\n          }\n        };\n\n    final TcpClient locatorClient = new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n    final TcpSocketCreator socketCreator = SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER);\n    final GMSAuthenticator authenticator =\n        new GMSAuthenticator(config.getSecurityProps(), securityService,\n            mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter());\n    final Membership<InternalDistributedMember> m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder(\n            socketCreator, locatorClient, serializer, memberIdentifierFactory)\n            .setMembershipLocator(locator)\n            .setAuthenticator(authenticator)\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2020-01-30 14:08:07","endLine":307,"groupId":"16323","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport@finalMembershipLocator<InternalDistributedMember>locator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3d/21f693c20eb817d7275001fbf6febee00e9add.src","preCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport) throws MemberStartupException {\n    final MembershipListener<InternalDistributedMember> listener = mock(MembershipListener.class);\n    final MessageListener<InternalDistributedMember> messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener<InternalDistributedMember> lifeCycleListener = mock(LifecycleListener.class);\n\n    final MemberIdentifierFactory<InternalDistributedMember> memberIdentifierFactory =\n        new MemberIdentifierFactory<InternalDistributedMember>() {\n          @Override\n          public InternalDistributedMember create(MemberData memberInfo) {\n            return new InternalDistributedMember(memberInfo);\n          }\n\n          @Override\n          public Comparator<InternalDistributedMember> getComparator() {\n            return Comparator.naturalOrder();\n          }\n        };\n\n    final TcpClient locatorClient = new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n    final TcpSocketCreator socketCreator = SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER);\n    final GMSAuthenticator authenticator =\n        new GMSAuthenticator(config.getSecurityProps(), securityService,\n            mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter());\n    final Membership<InternalDistributedMember> m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder(\n            socketCreator, locatorClient, serializer, memberIdentifierFactory)\n            .setAuthenticator(authenticator)\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n    doAnswer(invocation -> {\n      DistributionImpl.connectLocatorToServices(m1);\n      return null;\n    }).when(lifeCycleListener).started();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2020-01-30 07:37:54","commitOrder":22,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(SocketCreatorFactory\n          .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2020-01-30 07:37:54","endLine":102,"groupId":"40905","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/60/dacb160a58e1199ade41638459229c6a2a0797.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(SocketCreatorFactory\n          .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"}],"commitId":"d2947640af8c6bf16a650348bf09a28d11d27997","commitMessage":"@@@GEODE-7652: MembershipBuilder lets you set the local locator (#4614)\n\n","date":"2020-01-30 14:08:07","modifiedFileCount":"18","status":"M","submitter":"Bill Burcham"},{"authorTime":"2020-03-03 05:09:07","codes":[{"authorDate":"2020-01-30 14:08:07","commitOrder":23,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport,\n      final MembershipLocator<InternalDistributedMember> locator) throws MemberStartupException {\n    final MembershipListener<InternalDistributedMember> listener = mock(MembershipListener.class);\n    final MessageListener<InternalDistributedMember> messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener<InternalDistributedMember> lifeCycleListener = mock(LifecycleListener.class);\n\n    final MemberIdentifierFactory<InternalDistributedMember> memberIdentifierFactory =\n        new MemberIdentifierFactory<InternalDistributedMember>() {\n          @Override\n          public InternalDistributedMember create(MemberData memberInfo) {\n            return new InternalDistributedMember(memberInfo);\n          }\n\n          @Override\n          public Comparator<InternalDistributedMember> getComparator() {\n            return Comparator.naturalOrder();\n          }\n        };\n\n    final TcpClient locatorClient = new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n    final TcpSocketCreator socketCreator = SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER);\n    final GMSAuthenticator authenticator =\n        new GMSAuthenticator(config.getSecurityProps(), securityService,\n            mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter());\n    final Membership<InternalDistributedMember> m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder(\n            socketCreator, locatorClient, serializer, memberIdentifierFactory)\n            .setMembershipLocator(locator)\n            .setAuthenticator(authenticator)\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2020-01-30 14:08:07","endLine":307,"groupId":"16323","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport@finalMembershipLocator<InternalDistributedMember>locator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3d/21f693c20eb817d7275001fbf6febee00e9add.src","preCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport,\n      final MembershipLocator<InternalDistributedMember> locator) throws MemberStartupException {\n    final MembershipListener<InternalDistributedMember> listener = mock(MembershipListener.class);\n    final MessageListener<InternalDistributedMember> messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener<InternalDistributedMember> lifeCycleListener = mock(LifecycleListener.class);\n\n    final MemberIdentifierFactory<InternalDistributedMember> memberIdentifierFactory =\n        new MemberIdentifierFactory<InternalDistributedMember>() {\n          @Override\n          public InternalDistributedMember create(MemberData memberInfo) {\n            return new InternalDistributedMember(memberInfo);\n          }\n\n          @Override\n          public Comparator<InternalDistributedMember> getComparator() {\n            return Comparator.naturalOrder();\n          }\n        };\n\n    final TcpClient locatorClient = new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n    final TcpSocketCreator socketCreator = SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER);\n    final GMSAuthenticator authenticator =\n        new GMSAuthenticator(config.getSecurityProps(), securityService,\n            mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter());\n    final Membership<InternalDistributedMember> m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder(\n            socketCreator, locatorClient, serializer, memberIdentifierFactory)\n            .setMembershipLocator(locator)\n            .setAuthenticator(authenticator)\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"},{"authorDate":"2020-03-03 05:09:07","commitOrder":23,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(SocketCreatorFactory\n          .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(new HostAndPort(bindAddress.getHostAddress(), port));\n      } else {\n        info = client.getInfo(new HostAndPort(host, port));\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2020-03-03 05:09:07","endLine":100,"groupId":"42507","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b7/35ca658d19f2355f269abbff71b845239ba92b.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(SocketCreatorFactory\n          .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"0af626462642c6352840cd6e81a5265c74045c7f","commitMessage":"@@@GEODE-7808: standardize on use of HostAndPort to form client-side connections (#4743)\n\n* Squashed merge of feature/GEODE-7808\n\nremoved HostAddress\nrenamed LocatorAddress to HostAndPort\nmodified TcpClient methods to take a HostAndPort argument instead of\nInetAddress\nmodified SocketCreator to take a HostAndPort argument instead of\nInetAddress\n\n* GEODE-7808 - standardize on use of HostAndPort for connection formation\n\nThis continues a previous PR that passed and was approved for merge.\nThis commit raises up several methods from SocketCreator into the\nTcpSocketCreator interface.  This is an intermediate commit.  A\nsubsequent commit will refactor TcpSocketCreator to separate the client\nand server methods for creating server-sockets and client connections to\nserver-sockets.\n\n* refactored socket-creators to separate concerns\n\nServerSocketCreator holds methods for non-client comms\nClientSocketCreator holds methods that clients should use for comms\nAdvancedSocketCreator holds methods for people who need to get around\nthe limitations of the other two interfaces\n\n* adding missing interface\n\n* move code out of inner-classes into first-class classes\n\n* renaming interfaces and methods to be less confusing\n","date":"2020-03-03 05:09:07","modifiedFileCount":"78","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-03-04 03:17:00","codes":[{"authorDate":"2020-01-30 14:08:07","commitOrder":24,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport,\n      final MembershipLocator<InternalDistributedMember> locator) throws MemberStartupException {\n    final MembershipListener<InternalDistributedMember> listener = mock(MembershipListener.class);\n    final MessageListener<InternalDistributedMember> messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener<InternalDistributedMember> lifeCycleListener = mock(LifecycleListener.class);\n\n    final MemberIdentifierFactory<InternalDistributedMember> memberIdentifierFactory =\n        new MemberIdentifierFactory<InternalDistributedMember>() {\n          @Override\n          public InternalDistributedMember create(MemberData memberInfo) {\n            return new InternalDistributedMember(memberInfo);\n          }\n\n          @Override\n          public Comparator<InternalDistributedMember> getComparator() {\n            return Comparator.naturalOrder();\n          }\n        };\n\n    final TcpClient locatorClient = new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n    final TcpSocketCreator socketCreator = SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER);\n    final GMSAuthenticator authenticator =\n        new GMSAuthenticator(config.getSecurityProps(), securityService,\n            mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter());\n    final Membership<InternalDistributedMember> m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder(\n            socketCreator, locatorClient, serializer, memberIdentifierFactory)\n            .setMembershipLocator(locator)\n            .setAuthenticator(authenticator)\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2020-01-30 14:08:07","endLine":307,"groupId":"16323","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport@finalMembershipLocator<InternalDistributedMember>locator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3d/21f693c20eb817d7275001fbf6febee00e9add.src","preCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport,\n      final MembershipLocator<InternalDistributedMember> locator) throws MemberStartupException {\n    final MembershipListener<InternalDistributedMember> listener = mock(MembershipListener.class);\n    final MessageListener<InternalDistributedMember> messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener<InternalDistributedMember> lifeCycleListener = mock(LifecycleListener.class);\n\n    final MemberIdentifierFactory<InternalDistributedMember> memberIdentifierFactory =\n        new MemberIdentifierFactory<InternalDistributedMember>() {\n          @Override\n          public InternalDistributedMember create(MemberData memberInfo) {\n            return new InternalDistributedMember(memberInfo);\n          }\n\n          @Override\n          public Comparator<InternalDistributedMember> getComparator() {\n            return Comparator.naturalOrder();\n          }\n        };\n\n    final TcpClient locatorClient = new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n    final TcpSocketCreator socketCreator = SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER);\n    final GMSAuthenticator authenticator =\n        new GMSAuthenticator(config.getSecurityProps(), securityService,\n            mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter());\n    final Membership<InternalDistributedMember> m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder(\n            socketCreator, locatorClient, serializer, memberIdentifierFactory)\n            .setMembershipLocator(locator)\n            .setAuthenticator(authenticator)\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"},{"authorDate":"2020-03-04 03:17:00","commitOrder":24,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(SocketCreatorFactory\n          .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2020-03-04 03:17:00","endLine":102,"groupId":"40905","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/60/dacb160a58e1199ade41638459229c6a2a0797.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(SocketCreatorFactory\n          .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(new HostAndPort(bindAddress.getHostAddress(), port));\n      } else {\n        info = client.getInfo(new HostAndPort(host, port));\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"4b06a7ae04e3eb3e32d8a6a96c7eb5e5d3269df0","commitMessage":"@@@Revert \"GEODE-7808: standardize on use of HostAndPort to form client-side connections (#4743)\" (#4761)\n\nThis reverts commit 0af626462642c6352840cd6e81a5265c74045c7f.\nThat commit seems to have caused a severe performance drop in several\nBenchmark tests:\n\norg.apache.geode.benchmark.tests.PartitionedGetBenchmark\n              average ops/second  Baseline:    981794.46  Test:     41239.82  Difference:  -95.8%\norg.apache.geode.benchmark.tests.ReplicatedGetBenchmark\n              average ops/second  Baseline:    972769.18  Test:     41299.96  Difference:  -95.8%\norg.apache.geode.benchmark.tests.PartitionedNonIndexedQueryBenchmark\n              average ops/second  Baseline:        90.05  Test:        70.52  Difference:  -21.7%","date":"2020-03-04 03:17:00","modifiedFileCount":"78","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-03-05 05:06:54","codes":[{"authorDate":"2020-01-30 14:08:07","commitOrder":25,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport,\n      final MembershipLocator<InternalDistributedMember> locator) throws MemberStartupException {\n    final MembershipListener<InternalDistributedMember> listener = mock(MembershipListener.class);\n    final MessageListener<InternalDistributedMember> messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener<InternalDistributedMember> lifeCycleListener = mock(LifecycleListener.class);\n\n    final MemberIdentifierFactory<InternalDistributedMember> memberIdentifierFactory =\n        new MemberIdentifierFactory<InternalDistributedMember>() {\n          @Override\n          public InternalDistributedMember create(MemberData memberInfo) {\n            return new InternalDistributedMember(memberInfo);\n          }\n\n          @Override\n          public Comparator<InternalDistributedMember> getComparator() {\n            return Comparator.naturalOrder();\n          }\n        };\n\n    final TcpClient locatorClient = new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n    final TcpSocketCreator socketCreator = SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER);\n    final GMSAuthenticator authenticator =\n        new GMSAuthenticator(config.getSecurityProps(), securityService,\n            mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter());\n    final Membership<InternalDistributedMember> m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder(\n            socketCreator, locatorClient, serializer, memberIdentifierFactory)\n            .setMembershipLocator(locator)\n            .setAuthenticator(authenticator)\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2020-01-30 14:08:07","endLine":307,"groupId":"16323","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport@finalMembershipLocator<InternalDistributedMember>locator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3d/21f693c20eb817d7275001fbf6febee00e9add.src","preCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport,\n      final MembershipLocator<InternalDistributedMember> locator) throws MemberStartupException {\n    final MembershipListener<InternalDistributedMember> listener = mock(MembershipListener.class);\n    final MessageListener<InternalDistributedMember> messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener<InternalDistributedMember> lifeCycleListener = mock(LifecycleListener.class);\n\n    final MemberIdentifierFactory<InternalDistributedMember> memberIdentifierFactory =\n        new MemberIdentifierFactory<InternalDistributedMember>() {\n          @Override\n          public InternalDistributedMember create(MemberData memberInfo) {\n            return new InternalDistributedMember(memberInfo);\n          }\n\n          @Override\n          public Comparator<InternalDistributedMember> getComparator() {\n            return Comparator.naturalOrder();\n          }\n        };\n\n    final TcpClient locatorClient = new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n    final TcpSocketCreator socketCreator = SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER);\n    final GMSAuthenticator authenticator =\n        new GMSAuthenticator(config.getSecurityProps(), securityService,\n            mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter());\n    final Membership<InternalDistributedMember> m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder(\n            socketCreator, locatorClient, serializer, memberIdentifierFactory)\n            .setMembershipLocator(locator)\n            .setAuthenticator(authenticator)\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"},{"authorDate":"2020-03-05 05:06:54","commitOrder":25,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(SocketCreatorFactory\n          .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(new HostAndPort(bindAddress.getHostAddress(), port));\n      } else {\n        info = client.getInfo(new HostAndPort(host, port));\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2020-03-05 05:06:54","endLine":100,"groupId":"42507","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b7/35ca658d19f2355f269abbff71b845239ba92b.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(SocketCreatorFactory\n          .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(bindAddress, port);\n      } else {\n        info = client.getInfo(toInetAddress(host), port);\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"5c2b959e98a6330ecaeddb4d26e11ea29f7a2d7f","commitMessage":"@@@GEODE-7808: standardize on use of HostAndPort for creating connections (#4765)\n\n* Squashed merge of feature/GEODE-7808\n\nremoved HostAddress\nrenamed LocatorAddress to HostAndPort\nmodified TcpClient methods to take a HostAndPort argument instead of\nInetAddress\nmodified SocketCreator to take a HostAndPort argument instead of\nInetAddress\n\n* GEODE-7808 - standardize on use of HostAndPort for connection formation\n\nThis continues a previous PR that passed and was approved for merge.\nThis commit raises up several methods from SocketCreator into the\nTcpSocketCreator interface.  This is an intermediate commit.  A\nsubsequent commit will refactor TcpSocketCreator to separate the client\nand server methods for creating server-sockets and client connections to\nserver-sockets.\n\n* refactored socket-creators to separate concerns\n\nServerSocketCreator holds methods for non-client comms\nClientSocketCreator holds methods that clients should use for comms\nAdvancedSocketCreator holds methods for people who need to get around\nthe limitations of the other two interfaces\n\n* adding missing interface\n\n* move code out of inner-classes into first-class classes\n\n* renaming interfaces and methods to be less confusing\n\n* reinstate SocketCreator ip to hostname cache for performance\n\n* changes from review comments\n","date":"2020-03-05 05:06:54","modifiedFileCount":"80","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-03-21 04:40:24","codes":[{"authorDate":"2020-03-21 04:40:24","commitOrder":26,"curCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport,\n      final MembershipLocator<InternalDistributedMember> locator) throws MemberStartupException {\n    final MembershipListener<InternalDistributedMember> listener = mock(MembershipListener.class);\n    final MessageListener<InternalDistributedMember> messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener<InternalDistributedMember> lifeCycleListener = mock(LifecycleListener.class);\n\n    final MemberIdentifierFactory<InternalDistributedMember> memberIdentifierFactory =\n        new MemberIdentifierFactory<InternalDistributedMember>() {\n          @Override\n          public InternalDistributedMember create(MemberData memberInfo) {\n            return new InternalDistributedMember(memberInfo);\n          }\n\n          @Override\n          public Comparator<InternalDistributedMember> getComparator() {\n            return Comparator.naturalOrder();\n          }\n        };\n\n    final TcpClient locatorClient = new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer(),\n        TcpSocketFactory.DEFAULT);\n    final TcpSocketCreator socketCreator = SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER);\n    final GMSAuthenticator authenticator =\n        new GMSAuthenticator(config.getSecurityProps(), securityService,\n            mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter());\n    final Membership<InternalDistributedMember> m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder(\n            socketCreator, locatorClient, serializer, memberIdentifierFactory)\n            .setMembershipLocator(locator)\n            .setAuthenticator(authenticator)\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","date":"2020-03-21 04:40:24","endLine":309,"groupId":"104326","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"createMembershipManager","params":"(finalDistributionConfigImplconfig@finalRemoteTransportConfigtransport@finalMembershipLocator<InternalDistributedMember>locator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/cb/3c19a370c2b30325b97a7b8bfcb2f57fce8595.src","preCode":"  private Pair<Membership, MessageListener> createMembershipManager(\n      final DistributionConfigImpl config,\n      final RemoteTransportConfig transport,\n      final MembershipLocator<InternalDistributedMember> locator) throws MemberStartupException {\n    final MembershipListener<InternalDistributedMember> listener = mock(MembershipListener.class);\n    final MessageListener<InternalDistributedMember> messageListener = mock(MessageListener.class);\n    final DMStats stats1 = mock(DMStats.class);\n    final InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n    final SecurityService securityService = SecurityServiceFactory.create();\n    DSFIDSerializer serializer = InternalDataSerializer.getDSFIDSerializer();\n    final MemberIdentifierFactory memberFactory = mock(MemberIdentifierFactory.class);\n    when(memberFactory.create(isA(MemberData.class))).thenAnswer(new Answer<MemberIdentifier>() {\n      @Override\n      public MemberIdentifier answer(InvocationOnMock invocation) throws Throwable {\n        return new InternalDistributedMember((MemberData) invocation.getArgument(0));\n      }\n    });\n    LifecycleListener<InternalDistributedMember> lifeCycleListener = mock(LifecycleListener.class);\n\n    final MemberIdentifierFactory<InternalDistributedMember> memberIdentifierFactory =\n        new MemberIdentifierFactory<InternalDistributedMember>() {\n          @Override\n          public InternalDistributedMember create(MemberData memberInfo) {\n            return new InternalDistributedMember(memberInfo);\n          }\n\n          @Override\n          public Comparator<InternalDistributedMember> getComparator() {\n            return Comparator.naturalOrder();\n          }\n        };\n\n    final TcpClient locatorClient = new TcpClient(SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n        InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n        InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n    final TcpSocketCreator socketCreator = SocketCreatorFactory\n        .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER);\n    final GMSAuthenticator authenticator =\n        new GMSAuthenticator(config.getSecurityProps(), securityService,\n            mockSystem.getSecurityLogWriter(), mockSystem.getInternalLogWriter());\n    final Membership<InternalDistributedMember> m1 =\n        MembershipBuilder.<InternalDistributedMember>newMembershipBuilder(\n            socketCreator, locatorClient, serializer, memberIdentifierFactory)\n            .setMembershipLocator(locator)\n            .setAuthenticator(authenticator)\n            .setStatistics(stats1)\n            .setMessageListener(messageListener)\n            .setMembershipListener(listener)\n            .setConfig(new ServiceConfig(transport, config))\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n    m1.start();\n    m1.startEventProcessing();\n    return Pair.of(m1, messageListener);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2020-03-21 04:40:24","commitOrder":26,"curCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(SocketCreatorFactory\n          .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer(),\n          TcpSocketFactory.DEFAULT);\n      if (bindAddress != null) {\n        info = client.getInfo(new HostAndPort(bindAddress.getHostAddress(), port));\n      } else {\n        info = client.getInfo(new HostAndPort(host, port));\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","date":"2020-03-21 04:40:24","endLine":102,"groupId":"104326","id":42,"instanceNumber":2,"isCurCommit":1,"methodName":"createConfigFor","params":"(Stringhost@intport@InetAddressbindAddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ce/8a24547d63608f5d5881ba17c74fea70d1f207.src","preCode":"  static DistributionLocatorConfig createConfigFor(String host, int port, InetAddress bindAddress) {\n    String[] info = new String[] {\"unknown\", \"unknown\"};\n\n    try {\n      TcpClient client = new TcpClient(SocketCreatorFactory\n          .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR),\n          InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n          InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n      if (bindAddress != null) {\n        info = client.getInfo(new HostAndPort(bindAddress.getHostAddress(), port));\n      } else {\n        info = client.getInfo(new HostAndPort(host, port));\n      }\n      if (info == null) {\n        return null;\n      }\n    } catch (GemFireConfigException e) {\n      \r\n    }\n\n    DistributionLocatorConfigImpl config = new DistributionLocatorConfigImpl();\n    config.setHost(host);\n    config.setPort(port);\n    if (bindAddress != null) {\n      config.setBindAddress(bindAddress.getHostAddress());\n    }\n    config.setWorkingDirectory(info[0]);\n    config.setProductDirectory(info[1]);\n\n    return config;\n  }\n","realPath":"geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorConfigImpl.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"53f1e1a81c3b58989a835d37f94466eb3dfc752f","commitMessage":"@@@GEODE-7852: Adding a SocketFactory configuration for client Pools (#4830)\n\nAdding the ability to provide a SocketFactory to a client pool for use in\ncreating sockets. Adding an implementation of this SocketFactory that\nconfigures the pool to use an SNI proxy.\n\nAdding an automated test of the SniSocketFactory that uses docker compose\nto use a real SNI proxy and geode servers that are not reachable without\ngoing through the proxy.\n\nCo-authored-by: Bill Burcham <bburcham@pivotal.io>","date":"2020-03-21 04:40:24","modifiedFileCount":"51","status":"M","submitter":"Dan Smith"}]
