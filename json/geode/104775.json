[{"authorTime":"2019-09-04 16:34:18","codes":[{"authorDate":"2019-09-04 16:34:18","commitOrder":1,"curCode":"  public void prepareStructures() {\n    Supplier<Stream<Portfolio>> supplierOne =\n        () -> regionOneLocalCopy.values().stream().map(Portfolio.class::cast);\n    Supplier<Stream<Portfolio>> supplierTwo =\n        () -> regionTwoLocalCopy.values().stream().map(Portfolio.class::cast);\n\n    for (int i = 1; i <= 100; i++) {\n      Portfolio portfolio = new Portfolio(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionOneLocalCopy.put(i, portfolio);\n    }\n\n    for (int i = 50; i <= 150; i++) {\n      Portfolio portfolio = new Portfolio(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionTwoLocalCopy.put(i, portfolio);\n    }\n\n    \r\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName,\n        supplierOne.get().mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0 LIMIT 50\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status='active'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.isActive())\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status LIKE 'ina%'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.status.startsWith(\"ina\"))\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\n        \"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE p.ID IN SET(1, 2, 3, 4, 5)\",\n        supplierOne.get().filter(p -> Arrays.asList(1, 2, 3, 4, 5).contains(p.getID()))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE NOT (p.ID > 5)\",\n        supplierOne.get().filter(p -> p.getID() <= 5).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.ID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM' LIMIT 5\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.status) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.status)).map(p -> p.status).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND p.status = 'active' AND pos.secId = 'IBM'\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 && p.isActive() && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 OR p.status IN SET ('active', 'inactive') OR pos.secId = 'IBM' LIMIT 50\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 || p.isActive() || !p.isActive()\n                || p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 20 AND e.ID > 40\",\n        supplierOne.get()\n            .filter(p -> supplierTwo.get().filter(e -> e.getID() > 40)\n                .collect(Collectors.toMap(Portfolio::getID, Function.identity()))\n                .containsKey(p.getID()))\n            .filter(p -> p.getID() > 20).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0 AND p.status = 'active'\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0 && p.isActive()).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n  }\n","date":"2019-09-04 16:34:18","endLine":132,"groupId":"46196","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareStructures","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f4/cb8c90fc48e6e63d2edc98517de048f05b29f6.src","preCode":"  public void prepareStructures() {\n    Supplier<Stream<Portfolio>> supplierOne =\n        () -> regionOneLocalCopy.values().stream().map(Portfolio.class::cast);\n    Supplier<Stream<Portfolio>> supplierTwo =\n        () -> regionTwoLocalCopy.values().stream().map(Portfolio.class::cast);\n\n    for (int i = 1; i <= 100; i++) {\n      Portfolio portfolio = new Portfolio(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionOneLocalCopy.put(i, portfolio);\n    }\n\n    for (int i = 50; i <= 150; i++) {\n      Portfolio portfolio = new Portfolio(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionTwoLocalCopy.put(i, portfolio);\n    }\n\n    \r\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName,\n        supplierOne.get().mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0 LIMIT 50\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status='active'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.isActive())\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status LIKE 'ina%'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.status.startsWith(\"ina\"))\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\n        \"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE p.ID IN SET(1, 2, 3, 4, 5)\",\n        supplierOne.get().filter(p -> Arrays.asList(1, 2, 3, 4, 5).contains(p.getID()))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE NOT (p.ID > 5)\",\n        supplierOne.get().filter(p -> p.getID() <= 5).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.ID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM' LIMIT 5\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.status) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.status)).map(p -> p.status).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND p.status = 'active' AND pos.secId = 'IBM'\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 && p.isActive() && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 OR p.status IN SET ('active', 'inactive') OR pos.secId = 'IBM' LIMIT 50\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 || p.isActive() || !p.isActive()\n                || p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 20 AND e.ID > 40\",\n        supplierOne.get()\n            .filter(p -> supplierTwo.get().filter(e -> e.getID() > 40)\n                .collect(Collectors.toMap(Portfolio::getID, Function.identity()))\n                .containsKey(p.getID()))\n            .filter(p -> p.getID() > 20).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0 AND p.status = 'active'\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0 && p.isActive()).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2019-09-04 16:34:18","commitOrder":1,"curCode":"  public void prepareStructuresWithPdx() {\n    Supplier<Stream<PortfolioPdx>> supplierOne =\n        () -> regionOneLocalCopy.values().stream().map(PortfolioPdx.class::cast);\n    Supplier<Stream<PortfolioPdx>> supplierTwo =\n        () -> regionTwoLocalCopy.values().stream().map(PortfolioPdx.class::cast);\n\n    for (int i = 1; i <= 100; i++) {\n      PortfolioPdx portfolio = new PortfolioPdx(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionOneLocalCopy.put(i, portfolio);\n    }\n\n    for (int i = 50; i <= 150; i++) {\n      PortfolioPdx portfolio = new PortfolioPdx(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionTwoLocalCopy.put(i, portfolio);\n    }\n\n    \r\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName,\n        supplierOne.get().mapToInt(PortfolioPdx::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(PortfolioPdx::getID).min()\n            .orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0 LIMIT 50\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(PortfolioPdx::getID).min()\n            .orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status='active'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.isActive())\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status LIKE 'ina%'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.status.startsWith(\"ina\"))\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\n        \"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE p.ID IN SET(1, 2, 3, 4, 5)\",\n        supplierOne.get().filter(p -> Arrays.asList(1, 2, 3, 4, 5).contains(p.getID()))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE NOT (p.ID > 5)\",\n        supplierOne.get().filter(p -> p.getID() <= 5).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.ID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .mapToInt(PortfolioPdx::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM' LIMIT 5\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\"SELECT MIN(p.status) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.status)).map(p -> p.status).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND p.status = 'active' AND pos.secId = 'IBM'\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 && p.isActive() && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 OR p.status IN SET ('active', 'inactive') OR pos.secId = 'IBM' LIMIT 50\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 || p.isActive() || !p.isActive()\n                || p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 20 AND e.ID > 40\",\n        supplierOne.get()\n            .filter(p -> supplierTwo.get().filter(e -> e.getID() > 40)\n                .collect(Collectors.toMap(PortfolioPdx::getID, Function.identity()))\n                .containsKey(p.getID()))\n            .filter(p -> p.getID() > 20).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0 AND p.status = 'active'\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0 && p.isActive()).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n  }\n","date":"2019-09-04 16:34:18","endLine":224,"groupId":"46195","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareStructuresWithPdx","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f4/cb8c90fc48e6e63d2edc98517de048f05b29f6.src","preCode":"  public void prepareStructuresWithPdx() {\n    Supplier<Stream<PortfolioPdx>> supplierOne =\n        () -> regionOneLocalCopy.values().stream().map(PortfolioPdx.class::cast);\n    Supplier<Stream<PortfolioPdx>> supplierTwo =\n        () -> regionTwoLocalCopy.values().stream().map(PortfolioPdx.class::cast);\n\n    for (int i = 1; i <= 100; i++) {\n      PortfolioPdx portfolio = new PortfolioPdx(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionOneLocalCopy.put(i, portfolio);\n    }\n\n    for (int i = 50; i <= 150; i++) {\n      PortfolioPdx portfolio = new PortfolioPdx(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionTwoLocalCopy.put(i, portfolio);\n    }\n\n    \r\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName,\n        supplierOne.get().mapToInt(PortfolioPdx::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(PortfolioPdx::getID).min()\n            .orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0 LIMIT 50\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(PortfolioPdx::getID).min()\n            .orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status='active'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.isActive())\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status LIKE 'ina%'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.status.startsWith(\"ina\"))\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\n        \"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE p.ID IN SET(1, 2, 3, 4, 5)\",\n        supplierOne.get().filter(p -> Arrays.asList(1, 2, 3, 4, 5).contains(p.getID()))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE NOT (p.ID > 5)\",\n        supplierOne.get().filter(p -> p.getID() <= 5).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.ID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .mapToInt(PortfolioPdx::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM' LIMIT 5\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\"SELECT MIN(p.status) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.status)).map(p -> p.status).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND p.status = 'active' AND pos.secId = 'IBM'\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 && p.isActive() && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 OR p.status IN SET ('active', 'inactive') OR pos.secId = 'IBM' LIMIT 50\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 || p.isActive() || !p.isActive()\n                || p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 20 AND e.ID > 40\",\n        supplierOne.get()\n            .filter(p -> supplierTwo.get().filter(e -> e.getID() > 40)\n                .collect(Collectors.toMap(PortfolioPdx::getID, Function.identity()))\n                .containsKey(p.getID()))\n            .filter(p -> p.getID() > 20).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0 AND p.status = 'active'\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0 && p.isActive()).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"}],"commitId":"245f285ffb23d61e0c64ada5e68f0f6fa4a57bcd","commitMessage":"@@@GEODE-6916: Add Aggregate Functions Tests (#3953)\n\n- Fixed minor warnings.\n- Added integration tests for the OQL aggregate functions.\n- Added distributed tests for the OQL aggregate functions.\n- Deleted several old test classes and refactored the logic in favor\n  of the new Geode rules.","date":"2019-09-04 16:34:18","modifiedFileCount":"1","status":"B","submitter":"Juan Jos? Ramos"},{"authorTime":"2019-10-15 16:55:22","codes":[{"authorDate":"2019-10-15 16:55:22","commitOrder":2,"curCode":"  public void prepareStructures() {\n    Supplier<Stream<Portfolio>> supplierOne =\n        () -> regionOneLocalCopy.values().stream().map(Portfolio.class::cast);\n    Supplier<Stream<Portfolio>> supplierTwo =\n        () -> regionTwoLocalCopy.values().stream().map(Portfolio.class::cast);\n\n    for (int i = 1; i <= 100; i++) {\n      Portfolio portfolio = new Portfolio(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionOneLocalCopy.put(i, portfolio);\n    }\n\n    for (int i = 50; i <= 150; i++) {\n      Portfolio portfolio = new Portfolio(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionTwoLocalCopy.put(i, portfolio);\n    }\n\n    \r\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName,\n        supplierOne.get().mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0 LIMIT 50\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status='active'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.isActive())\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status LIKE 'ina%'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.status.startsWith(\"ina\"))\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\n        \"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE p.ID IN SET(1, 2, 3, 4, 5)\",\n        supplierOne.get().filter(p -> Arrays.asList(1, 2, 3, 4, 5).contains(p.getID()))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE NOT (p.ID > 5)\",\n        supplierOne.get().filter(p -> p.getID() <= 5).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.ID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM' LIMIT 5\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.status) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.status)).map(p -> p.status).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND p.status = 'active' AND pos.secId = 'IBM'\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 && p.isActive() && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 OR p.status IN SET ('active', 'inactive') OR pos.secId = 'IBM' LIMIT 50\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 || p.isActive() || !p.isActive()\n                || p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p WHERE p.ID IN (SELECT MIN(o.ID) FROM /\" + firstRegionName + \" o)\",\n        supplierOne.get()\n            .filter(p -> p.getID() == supplierOne.get().mapToInt(Portfolio::getID).min().orElse(-1))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p WHERE p.ID = ELEMENT(SELECT MAX(o.ID) FROM /\" + firstRegionName + \" o)\",\n        supplierOne.get()\n            .filter(p -> p.getID() == supplierOne.get().mapToInt(Portfolio::getID).max().orElse(-1))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 20 AND e.ID > 40\",\n        supplierOne.get()\n            .filter(p -> supplierTwo.get().filter(e -> e.getID() > 40)\n                .collect(Collectors.toMap(Portfolio::getID, Function.identity()))\n                .containsKey(p.getID()))\n            .filter(p -> p.getID() > 20).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0 AND p.status = 'active'\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0 && p.isActive()).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n  }\n","date":"2019-10-15 16:55:22","endLine":144,"groupId":"46196","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareStructures","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8d/11cd673447932a8e98d1d9608118fac33665c4.src","preCode":"  public void prepareStructures() {\n    Supplier<Stream<Portfolio>> supplierOne =\n        () -> regionOneLocalCopy.values().stream().map(Portfolio.class::cast);\n    Supplier<Stream<Portfolio>> supplierTwo =\n        () -> regionTwoLocalCopy.values().stream().map(Portfolio.class::cast);\n\n    for (int i = 1; i <= 100; i++) {\n      Portfolio portfolio = new Portfolio(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionOneLocalCopy.put(i, portfolio);\n    }\n\n    for (int i = 50; i <= 150; i++) {\n      Portfolio portfolio = new Portfolio(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionTwoLocalCopy.put(i, portfolio);\n    }\n\n    \r\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName,\n        supplierOne.get().mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0 LIMIT 50\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status='active'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.isActive())\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status LIKE 'ina%'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.status.startsWith(\"ina\"))\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\n        \"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE p.ID IN SET(1, 2, 3, 4, 5)\",\n        supplierOne.get().filter(p -> Arrays.asList(1, 2, 3, 4, 5).contains(p.getID()))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE NOT (p.ID > 5)\",\n        supplierOne.get().filter(p -> p.getID() <= 5).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.ID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM' LIMIT 5\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.status) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.status)).map(p -> p.status).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND p.status = 'active' AND pos.secId = 'IBM'\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 && p.isActive() && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 OR p.status IN SET ('active', 'inactive') OR pos.secId = 'IBM' LIMIT 50\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 || p.isActive() || !p.isActive()\n                || p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 20 AND e.ID > 40\",\n        supplierOne.get()\n            .filter(p -> supplierTwo.get().filter(e -> e.getID() > 40)\n                .collect(Collectors.toMap(Portfolio::getID, Function.identity()))\n                .containsKey(p.getID()))\n            .filter(p -> p.getID() > 20).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0 AND p.status = 'active'\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0 && p.isActive()).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2019-10-15 16:55:22","commitOrder":2,"curCode":"  public void prepareStructuresWithPdx() {\n    Supplier<Stream<PortfolioPdx>> supplierOne =\n        () -> regionOneLocalCopy.values().stream().map(PortfolioPdx.class::cast);\n    Supplier<Stream<PortfolioPdx>> supplierTwo =\n        () -> regionTwoLocalCopy.values().stream().map(PortfolioPdx.class::cast);\n\n    for (int i = 1; i <= 100; i++) {\n      PortfolioPdx portfolio = new PortfolioPdx(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionOneLocalCopy.put(i, portfolio);\n    }\n\n    for (int i = 50; i <= 150; i++) {\n      PortfolioPdx portfolio = new PortfolioPdx(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionTwoLocalCopy.put(i, portfolio);\n    }\n\n    \r\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName,\n        supplierOne.get().mapToInt(PortfolioPdx::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(PortfolioPdx::getID).min()\n            .orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0 LIMIT 50\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(PortfolioPdx::getID).min()\n            .orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status='active'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.isActive())\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status LIKE 'ina%'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.status.startsWith(\"ina\"))\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\n        \"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE p.ID IN SET(1, 2, 3, 4, 5)\",\n        supplierOne.get().filter(p -> Arrays.asList(1, 2, 3, 4, 5).contains(p.getID()))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE NOT (p.ID > 5)\",\n        supplierOne.get().filter(p -> p.getID() <= 5).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.ID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .mapToInt(PortfolioPdx::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM' LIMIT 5\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\"SELECT MIN(p.status) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.status)).map(p -> p.status).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND p.status = 'active' AND pos.secId = 'IBM'\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 && p.isActive() && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 OR p.status IN SET ('active', 'inactive') OR pos.secId = 'IBM' LIMIT 50\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 || p.isActive() || !p.isActive()\n                || p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p WHERE p.ID IN (SELECT MIN(o.ID) FROM /\" + firstRegionName + \" o)\",\n        supplierOne.get()\n            .filter(\n                p -> p.getID() == supplierOne.get().mapToInt(PortfolioPdx::getID).min().orElse(-1))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p WHERE p.ID = ELEMENT(SELECT MAX(o.ID) FROM /\" + firstRegionName + \" o)\",\n        supplierOne.get()\n            .filter(\n                p -> p.getID() == supplierOne.get().mapToInt(PortfolioPdx::getID).max().orElse(-1))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n\n    \r\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 20 AND e.ID > 40\",\n        supplierOne.get()\n            .filter(p -> supplierTwo.get().filter(e -> e.getID() > 40)\n                .collect(Collectors.toMap(PortfolioPdx::getID, Function.identity()))\n                .containsKey(p.getID()))\n            .filter(p -> p.getID() > 20).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0 AND p.status = 'active'\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0 && p.isActive()).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n  }\n","date":"2019-10-15 16:55:22","endLine":251,"groupId":"46195","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareStructuresWithPdx","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8d/11cd673447932a8e98d1d9608118fac33665c4.src","preCode":"  public void prepareStructuresWithPdx() {\n    Supplier<Stream<PortfolioPdx>> supplierOne =\n        () -> regionOneLocalCopy.values().stream().map(PortfolioPdx.class::cast);\n    Supplier<Stream<PortfolioPdx>> supplierTwo =\n        () -> regionTwoLocalCopy.values().stream().map(PortfolioPdx.class::cast);\n\n    for (int i = 1; i <= 100; i++) {\n      PortfolioPdx portfolio = new PortfolioPdx(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionOneLocalCopy.put(i, portfolio);\n    }\n\n    for (int i = 50; i <= 150; i++) {\n      PortfolioPdx portfolio = new PortfolioPdx(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionTwoLocalCopy.put(i, portfolio);\n    }\n\n    \r\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName,\n        supplierOne.get().mapToInt(PortfolioPdx::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(PortfolioPdx::getID).min()\n            .orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0 LIMIT 50\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(PortfolioPdx::getID).min()\n            .orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status='active'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.isActive())\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status LIKE 'ina%'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.status.startsWith(\"ina\"))\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\n        \"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE p.ID IN SET(1, 2, 3, 4, 5)\",\n        supplierOne.get().filter(p -> Arrays.asList(1, 2, 3, 4, 5).contains(p.getID()))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE NOT (p.ID > 5)\",\n        supplierOne.get().filter(p -> p.getID() <= 5).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.ID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .mapToInt(PortfolioPdx::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM' LIMIT 5\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\"SELECT MIN(p.status) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.status)).map(p -> p.status).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND p.status = 'active' AND pos.secId = 'IBM'\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 && p.isActive() && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 OR p.status IN SET ('active', 'inactive') OR pos.secId = 'IBM' LIMIT 50\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 || p.isActive() || !p.isActive()\n                || p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 20 AND e.ID > 40\",\n        supplierOne.get()\n            .filter(p -> supplierTwo.get().filter(e -> e.getID() > 40)\n                .collect(Collectors.toMap(PortfolioPdx::getID, Function.identity()))\n                .containsKey(p.getID()))\n            .filter(p -> p.getID() > 20).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0 AND p.status = 'active'\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0 && p.isActive()).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"db9565d0fb603d6ae5e809cf860e2d2289745be8","commitMessage":"@@@GEODE-7240: Prevent Aggregates in query criteria (#4103)\n\nUnless they are used within a nested SELECT query.  aggregate functions\nshould not be allowed as part of the query criteria. The query parser\nnow throws an exception whenever the required conditions are not met.\n\n- Fixed minor warnings.\n- Replaced usages of 'junit.Assert' by 'assertj'.\n- Refactored old test classes to use Geode rules.","date":"2019-10-15 16:55:22","modifiedFileCount":"7","status":"M","submitter":"Juan Jos? Ramos"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":3,"curCode":"  public void prepareStructures() {\n    Supplier<Stream<Portfolio>> supplierOne =\n        () -> regionOneLocalCopy.values().stream().map(Portfolio.class::cast);\n    Supplier<Stream<Portfolio>> supplierTwo =\n        () -> regionTwoLocalCopy.values().stream().map(Portfolio.class::cast);\n\n    for (int i = 1; i <= 100; i++) {\n      Portfolio portfolio = new Portfolio(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionOneLocalCopy.put(i, portfolio);\n    }\n\n    for (int i = 50; i <= 150; i++) {\n      Portfolio portfolio = new Portfolio(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionTwoLocalCopy.put(i, portfolio);\n    }\n\n    \r\n    queries.put(\"SELECT MIN(ID) FROM \" + SEPARATOR + firstRegionName,\n        supplierOne.get().mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM \" + SEPARATOR + firstRegionName + \" WHERE ID > 0\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM \" + SEPARATOR + firstRegionName + \" WHERE ID > 0 LIMIT 50\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM \" + SEPARATOR + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status='active'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.isActive())\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.getType()) FROM \" + SEPARATOR + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status LIKE 'ina%'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.status.startsWith(\"ina\"))\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\n        \"SELECT MIN(p.shortID) FROM \" + SEPARATOR + firstRegionName\n            + \" p WHERE p.ID IN SET(1, 2, 3, 4, 5)\",\n        supplierOne.get().filter(p -> Arrays.asList(1, 2, 3, 4, 5).contains(p.getID()))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\n        \"SELECT MIN(p.shortID) FROM \" + SEPARATOR + firstRegionName + \" p WHERE NOT (p.ID > 5)\",\n        supplierOne.get().filter(p -> p.getID() <= 5).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.ID) FROM \" + SEPARATOR + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM \" + SEPARATOR + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM' LIMIT 5\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.status) FROM \" + SEPARATOR + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.status)).map(p -> p.status).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.shortID) FROM \" + SEPARATOR + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND p.status = 'active' AND pos.secId = 'IBM'\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 && p.isActive() && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM \" + SEPARATOR + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 OR p.status IN SET ('active', 'inactive') OR pos.secId = 'IBM' LIMIT 50\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 || p.isActive() || !p.isActive()\n                || p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.shortID) FROM \" + SEPARATOR + firstRegionName\n        + \" p WHERE p.ID IN (SELECT MIN(o.ID) FROM \" + SEPARATOR + firstRegionName + \" o)\",\n        supplierOne.get()\n            .filter(p -> p.getID() == supplierOne.get().mapToInt(Portfolio::getID).min().orElse(-1))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM \" + SEPARATOR + firstRegionName\n        + \" p WHERE p.ID = ELEMENT(SELECT MAX(o.ID) FROM \" + SEPARATOR + firstRegionName + \" o)\",\n        supplierOne.get()\n            .filter(p -> p.getID() == supplierOne.get().mapToInt(Portfolio::getID).max().orElse(-1))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    equiJoinQueries\n        .put(\"SELECT MIN(p.shortID) from \" + SEPARATOR + firstRegionName + \" p, \" + SEPARATOR\n            + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0\",\n            supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n                .filter(p -> p.getID() > 0).min(Comparator.comparing(p -> p.shortID))\n                .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries\n        .put(\"SELECT MIN(p.shortID) from \" + SEPARATOR + firstRegionName + \" p, \" + SEPARATOR\n            + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 20 AND e.ID > 40\",\n            supplierOne.get()\n                .filter(p -> supplierTwo.get().filter(e -> e.getID() > 40)\n                    .collect(Collectors.toMap(Portfolio::getID, Function.identity()))\n                    .containsKey(p.getID()))\n                .filter(p -> p.getID() > 20).min(Comparator.comparing(p -> p.shortID))\n                .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries\n        .put(\"SELECT MIN(p.shortID) from \" + SEPARATOR + firstRegionName + \" p, \" + SEPARATOR\n            + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0 AND p.status = 'active'\",\n            supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n                .filter(p -> p.getID() > 0 && p.isActive())\n                .min(Comparator.comparing(p -> p.shortID))\n                .map(p -> p.shortID).orElse((short) -1));\n  }\n","date":"2020-05-29 00:37:39","endLine":151,"groupId":"104775","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"prepareStructures","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/24/2dd942ff463dcf4d49c887179b66beddb914ac.src","preCode":"  public void prepareStructures() {\n    Supplier<Stream<Portfolio>> supplierOne =\n        () -> regionOneLocalCopy.values().stream().map(Portfolio.class::cast);\n    Supplier<Stream<Portfolio>> supplierTwo =\n        () -> regionTwoLocalCopy.values().stream().map(Portfolio.class::cast);\n\n    for (int i = 1; i <= 100; i++) {\n      Portfolio portfolio = new Portfolio(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionOneLocalCopy.put(i, portfolio);\n    }\n\n    for (int i = 50; i <= 150; i++) {\n      Portfolio portfolio = new Portfolio(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionTwoLocalCopy.put(i, portfolio);\n    }\n\n    \r\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName,\n        supplierOne.get().mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0 LIMIT 50\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status='active'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.isActive())\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status LIKE 'ina%'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.status.startsWith(\"ina\"))\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\n        \"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE p.ID IN SET(1, 2, 3, 4, 5)\",\n        supplierOne.get().filter(p -> Arrays.asList(1, 2, 3, 4, 5).contains(p.getID()))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE NOT (p.ID > 5)\",\n        supplierOne.get().filter(p -> p.getID() <= 5).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.ID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .mapToInt(Portfolio::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM' LIMIT 5\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(Portfolio::getType)).map(Portfolio::getType).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.status) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.status)).map(p -> p.status).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND p.status = 'active' AND pos.secId = 'IBM'\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 && p.isActive() && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 OR p.status IN SET ('active', 'inactive') OR pos.secId = 'IBM' LIMIT 50\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 || p.isActive() || !p.isActive()\n                || p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p WHERE p.ID IN (SELECT MIN(o.ID) FROM /\" + firstRegionName + \" o)\",\n        supplierOne.get()\n            .filter(p -> p.getID() == supplierOne.get().mapToInt(Portfolio::getID).min().orElse(-1))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p WHERE p.ID = ELEMENT(SELECT MAX(o.ID) FROM /\" + firstRegionName + \" o)\",\n        supplierOne.get()\n            .filter(p -> p.getID() == supplierOne.get().mapToInt(Portfolio::getID).max().orElse(-1))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 20 AND e.ID > 40\",\n        supplierOne.get()\n            .filter(p -> supplierTwo.get().filter(e -> e.getID() > 40)\n                .collect(Collectors.toMap(Portfolio::getID, Function.identity()))\n                .containsKey(p.getID()))\n            .filter(p -> p.getID() > 20).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0 AND p.status = 'active'\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0 && p.isActive()).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":3,"curCode":"  public void prepareStructuresWithPdx() {\n    Supplier<Stream<PortfolioPdx>> supplierOne =\n        () -> regionOneLocalCopy.values().stream().map(PortfolioPdx.class::cast);\n    Supplier<Stream<PortfolioPdx>> supplierTwo =\n        () -> regionTwoLocalCopy.values().stream().map(PortfolioPdx.class::cast);\n\n    for (int i = 1; i <= 100; i++) {\n      PortfolioPdx portfolio = new PortfolioPdx(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionOneLocalCopy.put(i, portfolio);\n    }\n\n    for (int i = 50; i <= 150; i++) {\n      PortfolioPdx portfolio = new PortfolioPdx(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionTwoLocalCopy.put(i, portfolio);\n    }\n\n    \r\n    queries.put(\"SELECT MIN(ID) FROM \" + SEPARATOR + firstRegionName,\n        supplierOne.get().mapToInt(PortfolioPdx::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM \" + SEPARATOR + firstRegionName + \" WHERE ID > 0\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(PortfolioPdx::getID).min()\n            .orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM \" + SEPARATOR + firstRegionName + \" WHERE ID > 0 LIMIT 50\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(PortfolioPdx::getID).min()\n            .orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM \" + SEPARATOR + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status='active'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.isActive())\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\"SELECT MIN(p.getType()) FROM \" + SEPARATOR + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status LIKE 'ina%'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.status.startsWith(\"ina\"))\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\n        \"SELECT MIN(p.shortID) FROM \" + SEPARATOR + firstRegionName\n            + \" p WHERE p.ID IN SET(1, 2, 3, 4, 5)\",\n        supplierOne.get().filter(p -> Arrays.asList(1, 2, 3, 4, 5).contains(p.getID()))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\n        \"SELECT MIN(p.shortID) FROM \" + SEPARATOR + firstRegionName + \" p WHERE NOT (p.ID > 5)\",\n        supplierOne.get().filter(p -> p.getID() <= 5).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.ID) FROM \" + SEPARATOR + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .mapToInt(PortfolioPdx::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM \" + SEPARATOR + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM' LIMIT 5\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\"SELECT MIN(p.status) FROM \" + SEPARATOR + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.status)).map(p -> p.status).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.shortID) FROM \" + SEPARATOR + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND p.status = 'active' AND pos.secId = 'IBM'\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 && p.isActive() && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM \" + SEPARATOR + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 OR p.status IN SET ('active', 'inactive') OR pos.secId = 'IBM' LIMIT 50\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 || p.isActive() || !p.isActive()\n                || p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.shortID) FROM \" + SEPARATOR + firstRegionName\n        + \" p WHERE p.ID IN (SELECT MIN(o.ID) FROM \" + SEPARATOR + firstRegionName + \" o)\",\n        supplierOne.get()\n            .filter(\n                p -> p.getID() == supplierOne.get().mapToInt(PortfolioPdx::getID).min().orElse(-1))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM \" + SEPARATOR + firstRegionName\n        + \" p WHERE p.ID = ELEMENT(SELECT MAX(o.ID) FROM \" + SEPARATOR + firstRegionName + \" o)\",\n        supplierOne.get()\n            .filter(\n                p -> p.getID() == supplierOne.get().mapToInt(PortfolioPdx::getID).max().orElse(-1))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n\n    \r\n    equiJoinQueries\n        .put(\"SELECT MIN(p.shortID) from \" + SEPARATOR + firstRegionName + \" p, \" + SEPARATOR\n            + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0\",\n            supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n                .filter(p -> p.getID() > 0).min(Comparator.comparing(p -> p.shortID))\n                .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries\n        .put(\"SELECT MIN(p.shortID) from \" + SEPARATOR + firstRegionName + \" p, \" + SEPARATOR\n            + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 20 AND e.ID > 40\",\n            supplierOne.get()\n                .filter(p -> supplierTwo.get().filter(e -> e.getID() > 40)\n                    .collect(Collectors.toMap(PortfolioPdx::getID, Function.identity()))\n                    .containsKey(p.getID()))\n                .filter(p -> p.getID() > 20).min(Comparator.comparing(p -> p.shortID))\n                .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries\n        .put(\"SELECT MIN(p.shortID) from \" + SEPARATOR + firstRegionName + \" p, \" + SEPARATOR\n            + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0 AND p.status = 'active'\",\n            supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n                .filter(p -> p.getID() > 0 && p.isActive())\n                .min(Comparator.comparing(p -> p.shortID))\n                .map(p -> p.shortID).orElse((short) -1));\n  }\n","date":"2020-05-29 00:37:39","endLine":264,"groupId":"104775","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"prepareStructuresWithPdx","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/24/2dd942ff463dcf4d49c887179b66beddb914ac.src","preCode":"  public void prepareStructuresWithPdx() {\n    Supplier<Stream<PortfolioPdx>> supplierOne =\n        () -> regionOneLocalCopy.values().stream().map(PortfolioPdx.class::cast);\n    Supplier<Stream<PortfolioPdx>> supplierTwo =\n        () -> regionTwoLocalCopy.values().stream().map(PortfolioPdx.class::cast);\n\n    for (int i = 1; i <= 100; i++) {\n      PortfolioPdx portfolio = new PortfolioPdx(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionOneLocalCopy.put(i, portfolio);\n    }\n\n    for (int i = 50; i <= 150; i++) {\n      PortfolioPdx portfolio = new PortfolioPdx(i);\n      portfolio.shortID = (short) ((short) i / 5);\n      regionTwoLocalCopy.put(i, portfolio);\n    }\n\n    \r\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName,\n        supplierOne.get().mapToInt(PortfolioPdx::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(PortfolioPdx::getID).min()\n            .orElse(-1));\n    queries.put(\"SELECT MIN(ID) FROM /\" + firstRegionName + \" WHERE ID > 0 LIMIT 50\",\n        supplierOne.get().filter(p -> p.getID() > 0).mapToInt(PortfolioPdx::getID).min()\n            .orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status='active'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.isActive())\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p WHERE p.ID > 0 OR p.status LIKE 'ina%'\",\n        supplierOne.get().filter(p -> p.getID() > 0 || p.status.startsWith(\"ina\"))\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\n        \"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE p.ID IN SET(1, 2, 3, 4, 5)\",\n        supplierOne.get().filter(p -> Arrays.asList(1, 2, 3, 4, 5).contains(p.getID()))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName + \" p WHERE NOT (p.ID > 5)\",\n        supplierOne.get().filter(p -> p.getID() <= 5).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.ID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .mapToInt(PortfolioPdx::getID).min().orElse(-1));\n    queries.put(\"SELECT MIN(p.getType()) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM' LIMIT 5\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(PortfolioPdx::getType)).map(PortfolioPdx::getType)\n            .orElse(\"\"));\n    queries.put(\"SELECT MIN(p.status) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND pos.secId = 'IBM'\",\n        supplierOne.get().filter(p -> p.getID() > 0 && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.status)).map(p -> p.status).orElse(\"\"));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 AND p.status = 'active' AND pos.secId = 'IBM'\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 && p.isActive() && p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p, p.positions.values pos WHERE p.ID > 0 OR p.status IN SET ('active', 'inactive') OR pos.secId = 'IBM' LIMIT 50\",\n        supplierOne.get()\n            .filter(p -> p.getID() > 0 || p.isActive() || !p.isActive()\n                || p.getPositions().containsKey(\"IBM\"))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n    \r\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p WHERE p.ID IN (SELECT MIN(o.ID) FROM /\" + firstRegionName + \" o)\",\n        supplierOne.get()\n            .filter(\n                p -> p.getID() == supplierOne.get().mapToInt(PortfolioPdx::getID).min().orElse(-1))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n    queries.put(\"SELECT MIN(p.shortID) FROM /\" + firstRegionName\n        + \" p WHERE p.ID = ELEMENT(SELECT MAX(o.ID) FROM /\" + firstRegionName + \" o)\",\n        supplierOne.get()\n            .filter(\n                p -> p.getID() == supplierOne.get().mapToInt(PortfolioPdx::getID).max().orElse(-1))\n            .min(Comparator.comparing(p -> p.shortID)).map(p -> p.shortID).orElse((short) -1));\n\n\n    \r\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 20 AND e.ID > 40\",\n        supplierOne.get()\n            .filter(p -> supplierTwo.get().filter(e -> e.getID() > 40)\n                .collect(Collectors.toMap(PortfolioPdx::getID, Function.identity()))\n                .containsKey(p.getID()))\n            .filter(p -> p.getID() > 20).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n    equiJoinQueries.put(\"SELECT MIN(p.shortID) from /\" + firstRegionName + \" p, /\"\n        + secondRegionName + \" e WHERE p.ID = e.ID AND p.ID > 0 AND p.status = 'active'\",\n        supplierOne.get().filter(p -> regionTwoLocalCopy.containsKey(p.getID()))\n            .filter(p -> p.getID() > 0 && p.isActive()).min(Comparator.comparing(p -> p.shortID))\n            .map(p -> p.shortID).orElse((short) -1));\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/aggregate/MinIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
