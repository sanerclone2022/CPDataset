[{"authorTime":"2019-06-11 07:32:57","codes":[{"authorDate":"2019-04-13 06:47:18","commitOrder":2,"curCode":"  public void constructorWithoutGatewayReceiverCreatesAcceptorImplForCacheServer()\n      throws Exception {\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, serverConnectionFactory, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, false, Collections.emptyList());\n\n    assertThat(acceptor.isGatewayReceiver()).isFalse();\n  }\n","date":"2019-05-02 00:23:16","endLine":102,"groupId":"6778","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"constructorWithoutGatewayReceiverCreatesAcceptorImplForCacheServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f0/82e2dd150ff6f46b22c54641ee5da66541a980.src","preCode":"  public void constructorWithoutGatewayReceiverCreatesAcceptorImplForCacheServer()\n      throws Exception {\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, serverConnectionFactory, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, false, Collections.emptyList());\n\n    assertThat(acceptor.isGatewayReceiver()).isFalse();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/AcceptorImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"NB"},{"authorDate":"2019-06-11 07:32:57","commitOrder":2,"curCode":"  public void constructorWithGatewayReceiverCreatesAcceptorImplForGatewayReceiver()\n      throws Exception {\n    when(system.getStatisticsManager()).thenReturn(statisticsManager);\n    when(statisticsManager.createType(any(), any(), any())).thenReturn(mock(StatisticsType.class));\n    when(statisticsManager.createAtomicStatistics(any(), any())).thenReturn(mock(Statistics.class));\n    when(cache.getMeterRegistry()).thenReturn(new SimpleMeterRegistry());\n\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, serverConnectionFactory, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, true, Collections.emptyList());\n\n    assertThat(acceptor.isGatewayReceiver()).isTrue();\n  }\n","date":"2019-06-11 07:32:57","endLine":121,"groupId":"6778","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"constructorWithGatewayReceiverCreatesAcceptorImplForGatewayReceiver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a6/7b2d6ed1e6e2d9a2b9465596adf524de3b2abd.src","preCode":"  public void constructorWithGatewayReceiverCreatesAcceptorImplForGatewayReceiver()\n      throws Exception {\n    when(system.getStatisticsManager()).thenReturn(statisticsManager);\n    when(statisticsManager.createType(any(), any(), any())).thenReturn(mock(StatisticsType.class));\n    when(statisticsManager.createAtomicStatistics(any(), any())).thenReturn(mock(Statistics.class));\n    when(cache.getMeterRegistry()).thenReturn(new SimpleMeterRegistry());\n\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, serverConnectionFactory, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, true, Collections.emptyList());\n\n    assertThat(acceptor.isGatewayReceiver()).isTrue();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/AcceptorImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"MB"}],"commitId":"3d7113fe85c56f2892270d29a48195219dd0170a","commitMessage":"@@@GEODE-6763: Send GatewayReceiver events received to Micrometer (#3573)\n\nUpdated GatewayReceiverStats to add a\ncache.gatewayreceiver.events.received meter to the registry.\n\nThe meter is a FunctionCounter that retrieves its value from the\n\"eventsReceived\" stat.\n\nCo-Authored-By: Aaron Lindsey <alindsey@pivotal.io>\nCo-Authored-By: Michael Oleske <moleske@pivotal.io>\nCo-authored-by: Dale Emery <demery@pivotal.io>\nCo-authored-by: Kirk Lund <klund@apache.org>","date":"2019-06-11 07:32:57","modifiedFileCount":"4","status":"M","submitter":"Dale Emery"},{"authorTime":"2019-08-09 00:33:26","codes":[{"authorDate":"2019-08-09 00:33:26","commitOrder":3,"curCode":"  public void constructorWithoutGatewayReceiverCreatesAcceptorImplForCacheServer()\n      throws Exception {\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, serverConnectionFactory, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g, h) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, false, emptyList(), disabledClock());\n\n    assertThat(acceptor.isGatewayReceiver()).isFalse();\n  }\n","date":"2019-08-09 00:33:26","endLine":104,"groupId":"6778","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"constructorWithoutGatewayReceiverCreatesAcceptorImplForCacheServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/d8eef2210cec08227889efb5469f917cdd9db1.src","preCode":"  public void constructorWithoutGatewayReceiverCreatesAcceptorImplForCacheServer()\n      throws Exception {\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, serverConnectionFactory, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, false, Collections.emptyList());\n\n    assertThat(acceptor.isGatewayReceiver()).isFalse();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/AcceptorImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2019-08-09 00:33:26","commitOrder":3,"curCode":"  public void constructorWithGatewayReceiverCreatesAcceptorImplForGatewayReceiver()\n      throws Exception {\n    when(system.getStatisticsManager()).thenReturn(statisticsManager);\n    when(statisticsManager.createType(any(), any(), any())).thenReturn(mock(StatisticsType.class));\n    when(statisticsManager.createAtomicStatistics(any(), any())).thenReturn(mock(Statistics.class));\n    when(cache.getMeterRegistry()).thenReturn(new SimpleMeterRegistry());\n\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, serverConnectionFactory, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g, h) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, true, emptyList(), disabledClock());\n\n    assertThat(acceptor.isGatewayReceiver()).isTrue();\n  }\n","date":"2019-08-09 00:33:26","endLine":122,"groupId":"6778","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"constructorWithGatewayReceiverCreatesAcceptorImplForGatewayReceiver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/d8eef2210cec08227889efb5469f917cdd9db1.src","preCode":"  public void constructorWithGatewayReceiverCreatesAcceptorImplForGatewayReceiver()\n      throws Exception {\n    when(system.getStatisticsManager()).thenReturn(statisticsManager);\n    when(statisticsManager.createType(any(), any(), any())).thenReturn(mock(StatisticsType.class));\n    when(statisticsManager.createAtomicStatistics(any(), any())).thenReturn(mock(Statistics.class));\n    when(cache.getMeterRegistry()).thenReturn(new SimpleMeterRegistry());\n\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, serverConnectionFactory, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, true, Collections.emptyList());\n\n    assertThat(acceptor.isGatewayReceiver()).isTrue();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/AcceptorImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"b49279477a4c79b90220fb34239d12c2d9e50782","commitMessage":"@@@GEODE-7010: Replace static globals in CachePerfStats with StatisticsClock (#3859)\n\n* Replace CachePerfStats.getStatTime with Cache owned StatisticsClock\n* Inject StatisticsClock dependency via constructor\n","date":"2019-08-09 00:33:26","modifiedFileCount":"134","status":"M","submitter":"Kirk Lund"},{"authorTime":"2019-08-21 06:52:35","codes":[{"authorDate":"2019-08-21 06:52:35","commitOrder":4,"curCode":"  public void constructorWithoutGatewayReceiverCreatesAcceptorImplForCacheServer()\n      throws Exception {\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, serverConnectionFactory, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g, h, i) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, false, emptyList(), disabledClock());\n\n    assertThat(acceptor.isGatewayReceiver()).isFalse();\n  }\n","date":"2019-08-21 06:52:35","endLine":104,"groupId":"6778","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"constructorWithoutGatewayReceiverCreatesAcceptorImplForCacheServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/eb/60c0b6f0626935e75104d08c202cc1547d70fe.src","preCode":"  public void constructorWithoutGatewayReceiverCreatesAcceptorImplForCacheServer()\n      throws Exception {\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, serverConnectionFactory, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g, h) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, false, emptyList(), disabledClock());\n\n    assertThat(acceptor.isGatewayReceiver()).isFalse();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/AcceptorImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2019-08-21 06:52:35","commitOrder":4,"curCode":"  public void constructorWithGatewayReceiverCreatesAcceptorImplForGatewayReceiver()\n      throws Exception {\n    when(system.getStatisticsManager()).thenReturn(statisticsManager);\n    when(statisticsManager.createType(any(), any(), any())).thenReturn(mock(StatisticsType.class));\n    when(statisticsManager.createAtomicStatistics(any(), any())).thenReturn(mock(Statistics.class));\n    when(cache.getMeterRegistry()).thenReturn(new SimpleMeterRegistry());\n\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, serverConnectionFactory, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g, h, i) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, true, emptyList(), disabledClock());\n\n    assertThat(acceptor.isGatewayReceiver()).isTrue();\n  }\n","date":"2019-08-21 06:52:35","endLine":122,"groupId":"6778","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"constructorWithGatewayReceiverCreatesAcceptorImplForGatewayReceiver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/eb/60c0b6f0626935e75104d08c202cc1547d70fe.src","preCode":"  public void constructorWithGatewayReceiverCreatesAcceptorImplForGatewayReceiver()\n      throws Exception {\n    when(system.getStatisticsManager()).thenReturn(statisticsManager);\n    when(statisticsManager.createType(any(), any(), any())).thenReturn(mock(StatisticsType.class));\n    when(statisticsManager.createAtomicStatistics(any(), any())).thenReturn(mock(Statistics.class));\n    when(cache.getMeterRegistry()).thenReturn(new SimpleMeterRegistry());\n\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, serverConnectionFactory, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g, h) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, true, emptyList(), disabledClock());\n\n    assertThat(acceptor.isGatewayReceiver()).isTrue();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/AcceptorImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"5d0153ad4adb1612a1083673f98b1982819a6589","commitMessage":"@@@GEODE-7089: Each client registration thread uses its own queue\n\nCo-authored-by: Ryan McMahon <rmcmahon@pivotal.io>\nCo-authored-by: Donal Evans <doevans@pivotal.io>","date":"2019-08-21 06:52:35","modifiedFileCount":"11","status":"M","submitter":"Ryan McMahon"},{"authorTime":"2021-04-02 23:35:14","codes":[{"authorDate":"2021-04-02 23:35:14","commitOrder":5,"curCode":"  public void constructorWithoutGatewayReceiverCreatesAcceptorImplForCacheServer()\n      throws Exception {\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g, h, i) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, false, emptyList(), disabledClock());\n\n    assertThat(acceptor.isGatewayReceiver()).isFalse();\n  }\n","date":"2021-04-02 23:35:14","endLine":102,"groupId":"101000","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"constructorWithoutGatewayReceiverCreatesAcceptorImplForCacheServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/01/9ba006d7fc62f5509739b0ada1b657994212bb.src","preCode":"  public void constructorWithoutGatewayReceiverCreatesAcceptorImplForCacheServer()\n      throws Exception {\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, serverConnectionFactory, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g, h, i) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, false, emptyList(), disabledClock());\n\n    assertThat(acceptor.isGatewayReceiver()).isFalse();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/AcceptorImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2021-04-02 23:35:14","commitOrder":5,"curCode":"  public void constructorWithGatewayReceiverCreatesAcceptorImplForGatewayReceiver()\n      throws Exception {\n    when(system.getStatisticsManager()).thenReturn(statisticsManager);\n    when(statisticsManager.createType(any(), any(), any())).thenReturn(mock(StatisticsType.class));\n    when(statisticsManager.createAtomicStatistics(any(), any())).thenReturn(mock(Statistics.class));\n    when(cache.getMeterRegistry()).thenReturn(new SimpleMeterRegistry());\n\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g, h, i) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, true, emptyList(), disabledClock());\n\n    assertThat(acceptor.isGatewayReceiver()).isTrue();\n  }\n","date":"2021-04-02 23:35:14","endLine":120,"groupId":"101000","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"constructorWithGatewayReceiverCreatesAcceptorImplForGatewayReceiver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/01/9ba006d7fc62f5509739b0ada1b657994212bb.src","preCode":"  public void constructorWithGatewayReceiverCreatesAcceptorImplForGatewayReceiver()\n      throws Exception {\n    when(system.getStatisticsManager()).thenReturn(statisticsManager);\n    when(statisticsManager.createType(any(), any(), any())).thenReturn(mock(StatisticsType.class));\n    when(statisticsManager.createAtomicStatistics(any(), any())).thenReturn(mock(Statistics.class));\n    when(cache.getMeterRegistry()).thenReturn(new SimpleMeterRegistry());\n\n    Acceptor acceptor = new AcceptorImpl(0, null, false, DEFAULT_SOCKET_BUFFER_SIZE,\n        DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS, cache, MINIMUM_MAX_CONNECTIONS, 0,\n        CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT, CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE, null,\n        null, DEFAULT_TCP_NO_DELAY, serverConnectionFactory, 1000, securityService,\n        () -> socketCreator, (a, b, c, d, e, f, g, h, i) -> cacheClientNotifier,\n        (a, b, c) -> clientHealthMonitor, true, emptyList(), disabledClock());\n\n    assertThat(acceptor.isGatewayReceiver()).isTrue();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/AcceptorImplTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"ae6b3ac1550bdaed75159fbbe360b6733e7e84ee","commitMessage":"@@@GEODE-8997: remove protobuf client server code (#6168)\n\n* GEODE-8997: remove protobuf client server code\n\nThis removes the experimental Protobuf-based client/server subproject\nand associated files.  Protobuf is no longer included as a Geode dependency.\n\n* updated expected files list in geode-assembly\n\n* removed protobuf-related exceptions from excludedClasses.txt\n\n* exclude service loading exception from serializables test","date":"2021-04-02 23:35:14","modifiedFileCount":"18","status":"M","submitter":"Bruce Schuchardt"}]
