[{"authorTime":"2020-03-05 05:06:54","codes":[{"authorDate":"2020-03-21 04:40:24","commitOrder":7,"curCode":"  public void securedSocketTransmissionShouldWork() throws Exception {\n    this.serverSocket = this.socketCreator.forCluster().createServerSocket(0, 0, this.localHost);\n    this.serverThread = startServer(this.serverSocket, 15000);\n\n    int serverPort = this.serverSocket.getLocalPort();\n    this.clientSocket = this.socketCreator.forCluster()\n        .connect(new HostAndPort(this.localHost.getHostAddress(), serverPort), 0, null,\n            Socket::new);\n\n    \r\n    ObjectOutputStream output = new ObjectOutputStream(this.clientSocket.getOutputStream());\n    output.writeObject(MESSAGE);\n    output.flush();\n\n    \r\n    await().until(() -> {\n      return !serverThread.isAlive();\n    });\n    assertNull(serverException);\n    assertThat(this.messageFromClient.get()).isEqualTo(MESSAGE);\n  }\n","date":"2020-03-21 04:40:24","endLine":199,"groupId":"10596","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"securedSocketTransmissionShouldWork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/33/26ed63b051b6d56f1e82f33b462c734eb6bade.src","preCode":"  public void securedSocketTransmissionShouldWork() throws Exception {\n    this.serverSocket = this.socketCreator.forCluster().createServerSocket(0, 0, this.localHost);\n    this.serverThread = startServer(this.serverSocket, 15000);\n\n    int serverPort = this.serverSocket.getLocalPort();\n    this.clientSocket = this.socketCreator.forCluster()\n        .connect(new HostAndPort(this.localHost.getHostAddress(), serverPort), 0, null,\n            Socket::new);\n\n    \r\n    ObjectOutputStream output = new ObjectOutputStream(this.clientSocket.getOutputStream());\n    output.writeObject(MESSAGE);\n    output.flush();\n\n    \r\n    await().until(() -> {\n      return !serverThread.isAlive();\n    });\n    assertNull(serverException);\n    assertThat(this.messageFromClient.get()).isEqualTo(MESSAGE);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"MB"},{"authorDate":"2020-03-05 05:06:54","commitOrder":7,"curCode":"  public void securedSocketCheckExtensions() throws Exception {\n    this.serverSocket = this.socketCreator.forCluster().createServerSocket(0, 0, this.localHost);\n    this.serverThread = startServer(this.serverSocket, 15000);\n\n    int serverPort = this.serverSocket.getLocalPort();\n    this.clientSocket = this.socketCreator.forCluster()\n        .connect(new HostAndPort(this.localHost.getHostAddress(), serverPort));\n\n    SSLSocket sslSocket = (SSLSocket) this.clientSocket;\n\n    List<SNIServerName> serverNames = new ArrayList<>(1);\n    SNIHostName serverName = new SNIHostName(\"11\");\n    serverNames.add(serverName);\n\n    assertThat(sslSocket.getSSLParameters().getServerNames()).isEqualTo(serverNames);\n\n    \r\n    ObjectOutputStream output = new ObjectOutputStream(this.clientSocket.getOutputStream());\n    output.writeObject(MESSAGE);\n    output.flush();\n\n    \r\n    await().until(() -> {\n      return !serverThread.isAlive();\n    });\n    assertNull(serverException);\n    assertThat(this.messageFromClient.get()).isEqualTo(MESSAGE);\n  }\n","date":"2020-03-05 05:06:54","endLine":171,"groupId":"20011","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"securedSocketCheckExtensions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6f/84f51120f37f7a6f8656904ddbb00d38245d6c.src","preCode":"  public void securedSocketCheckExtensions() throws Exception {\n    this.serverSocket = this.socketCreator.forCluster().createServerSocket(0, 0, this.localHost);\n    this.serverThread = startServer(this.serverSocket, 15000);\n\n    int serverPort = this.serverSocket.getLocalPort();\n    this.clientSocket = this.socketCreator.forCluster()\n        .connect(new HostAndPort(this.localHost.getHostAddress(), serverPort));\n\n    SSLSocket sslSocket = (SSLSocket) this.clientSocket;\n\n    List<SNIServerName> serverNames = new ArrayList<>(1);\n    SNIHostName serverName = new SNIHostName(\"11\");\n    serverNames.add(serverName);\n\n    assertThat(sslSocket.getSSLParameters().getServerNames()).isEqualTo(serverNames);\n\n    \r\n    ObjectOutputStream output = new ObjectOutputStream(this.clientSocket.getOutputStream());\n    output.writeObject(MESSAGE);\n    output.flush();\n\n    \r\n    await().until(() -> {\n      return !serverThread.isAlive();\n    });\n    assertNull(serverException);\n    assertThat(this.messageFromClient.get()).isEqualTo(MESSAGE);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/net/SSLSocketParameterExtensionIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"NB"}],"commitId":"53f1e1a81c3b58989a835d37f94466eb3dfc752f","commitMessage":"@@@GEODE-7852: Adding a SocketFactory configuration for client Pools (#4830)\n\nAdding the ability to provide a SocketFactory to a client pool for use in\ncreating sockets. Adding an implementation of this SocketFactory that\nconfigures the pool to use an SNI proxy.\n\nAdding an automated test of the SniSocketFactory that uses docker compose\nto use a real SNI proxy and geode servers that are not reachable without\ngoing through the proxy.\n\nCo-authored-by: Bill Burcham <bburcham@pivotal.io>","date":"2020-03-21 04:40:24","modifiedFileCount":"51","status":"M","submitter":"Dan Smith"},{"authorTime":"2020-03-05 05:06:54","codes":[{"authorDate":"2020-06-17 01:27:59","commitOrder":8,"curCode":"  public void securedSocketTransmissionShouldWork() throws Throwable {\n    this.serverSocket = this.socketCreator.forCluster().createServerSocket(0, 0, this.localHost);\n    this.serverThread = startServer(this.serverSocket, 15000);\n\n    int serverPort = this.serverSocket.getLocalPort();\n    this.clientSocket = this.socketCreator.forCluster()\n        .connect(new HostAndPort(this.localHost.getHostAddress(), serverPort), 0, null,\n            Socket::new);\n\n    \r\n    ObjectOutputStream output = new ObjectOutputStream(this.clientSocket.getOutputStream());\n    output.writeObject(MESSAGE);\n    output.flush();\n\n    \r\n    await().until(() -> {\n      return !serverThread.isAlive();\n    });\n    if (serverException != null) {\n      throw serverException;\n    }\n    assertThat(this.messageFromClient.get()).isEqualTo(MESSAGE);\n  }\n","date":"2020-06-17 01:27:59","endLine":206,"groupId":"104257","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"securedSocketTransmissionShouldWork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/48/00940dba05a515a1d504c32680358a43404b21.src","preCode":"  public void securedSocketTransmissionShouldWork() throws Exception {\n    this.serverSocket = this.socketCreator.forCluster().createServerSocket(0, 0, this.localHost);\n    this.serverThread = startServer(this.serverSocket, 15000);\n\n    int serverPort = this.serverSocket.getLocalPort();\n    this.clientSocket = this.socketCreator.forCluster()\n        .connect(new HostAndPort(this.localHost.getHostAddress(), serverPort), 0, null,\n            Socket::new);\n\n    \r\n    ObjectOutputStream output = new ObjectOutputStream(this.clientSocket.getOutputStream());\n    output.writeObject(MESSAGE);\n    output.flush();\n\n    \r\n    await().until(() -> {\n      return !serverThread.isAlive();\n    });\n    assertNull(serverException);\n    assertThat(this.messageFromClient.get()).isEqualTo(MESSAGE);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2020-03-05 05:06:54","commitOrder":8,"curCode":"  public void securedSocketCheckExtensions() throws Exception {\n    this.serverSocket = this.socketCreator.forCluster().createServerSocket(0, 0, this.localHost);\n    this.serverThread = startServer(this.serverSocket, 15000);\n\n    int serverPort = this.serverSocket.getLocalPort();\n    this.clientSocket = this.socketCreator.forCluster()\n        .connect(new HostAndPort(this.localHost.getHostAddress(), serverPort));\n\n    SSLSocket sslSocket = (SSLSocket) this.clientSocket;\n\n    List<SNIServerName> serverNames = new ArrayList<>(1);\n    SNIHostName serverName = new SNIHostName(\"11\");\n    serverNames.add(serverName);\n\n    assertThat(sslSocket.getSSLParameters().getServerNames()).isEqualTo(serverNames);\n\n    \r\n    ObjectOutputStream output = new ObjectOutputStream(this.clientSocket.getOutputStream());\n    output.writeObject(MESSAGE);\n    output.flush();\n\n    \r\n    await().until(() -> {\n      return !serverThread.isAlive();\n    });\n    assertNull(serverException);\n    assertThat(this.messageFromClient.get()).isEqualTo(MESSAGE);\n  }\n","date":"2020-03-05 05:06:54","endLine":171,"groupId":"104257","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"securedSocketCheckExtensions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6f/84f51120f37f7a6f8656904ddbb00d38245d6c.src","preCode":"  public void securedSocketCheckExtensions() throws Exception {\n    this.serverSocket = this.socketCreator.forCluster().createServerSocket(0, 0, this.localHost);\n    this.serverThread = startServer(this.serverSocket, 15000);\n\n    int serverPort = this.serverSocket.getLocalPort();\n    this.clientSocket = this.socketCreator.forCluster()\n        .connect(new HostAndPort(this.localHost.getHostAddress(), serverPort));\n\n    SSLSocket sslSocket = (SSLSocket) this.clientSocket;\n\n    List<SNIServerName> serverNames = new ArrayList<>(1);\n    SNIHostName serverName = new SNIHostName(\"11\");\n    serverNames.add(serverName);\n\n    assertThat(sslSocket.getSSLParameters().getServerNames()).isEqualTo(serverNames);\n\n    \r\n    ObjectOutputStream output = new ObjectOutputStream(this.clientSocket.getOutputStream());\n    output.writeObject(MESSAGE);\n    output.flush();\n\n    \r\n    await().until(() -> {\n      return !serverThread.isAlive();\n    });\n    assertNull(serverException);\n    assertThat(this.messageFromClient.get()).isEqualTo(MESSAGE);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/net/SSLSocketParameterExtensionIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"N"}],"commitId":"b1107d2e403404337c22830a4964eefc2490ef50","commitMessage":"@@@GEODE-8144: setting SNI server name is not needed if endpoint verification is disabled (#5250)\n\n* GEODE-8144: endpoint identification in servers is not working\n\nmodified the fix for this issue to not set the SNI server name parameter\nif endpoint verification is disabled.  We're doing this because setting\nthis parameter appears to decrease performance in large performance\ntests.\n\n* changed test to throw exceptions instead of asserting they don't exist\n\n* replaced check for SNI server name in SSL parameters with a more in-depth check\n\n* SSLParameters.getServerNames() may return a null value","date":"2020-06-17 01:27:59","modifiedFileCount":"2","status":"M","submitter":"Bruce Schuchardt"}]
