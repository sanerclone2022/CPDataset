[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testPRCqWithMultipleRegionsOnServer() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n    VM client2 = host.getVM(3);\n\n    \r\n    \r\n    createServer(server1, false, 1);\n\n    \r\n    createServer(server2, false, 1);\n\n    \r\n    Wait.pause(2000);\n\n    final int port = server1.invoke(() -> PrCqUsingPoolDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    String poolName1 = \"testPRCqWithMultipleRegionsOnServer1\";\n    createPool(client, poolName1, host0, port);\n\n    String poolName2 = \"testPRCqWithMultipleRegionsOnServer2\";\n    createPool(client2, poolName2, host0, port);\n\n    \r\n    createClient(client2, port, host0);\n\n    \r\n    createCQ(client, poolName1, \"testCQEvents_0\", cqs[0]);\n    createCQ(client, poolName1, \"testCQEvents_1\", cqs[10]);\n    cqHelper.executeCQ(client, \"testCQEvents_0\", false, null);\n    cqHelper.executeCQ(client, \"testCQEvents_1\", false, null);\n\n    \r\n    final int size = 400;\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    \r\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForCreated(client, \"testCQEvents_0\", KEY + i);\n      cqHelper.waitForCreated(client, \"testCQEvents_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testCQEvents_0\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n    cqHelper.validateCQ(client, \"testCQEvents_1\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n\n\n    \r\n\n    \r\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForUpdated(client, \"testCQEvents_0\", KEY + i);\n      cqHelper.waitForUpdated(client, \"testCQEvents_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testCQEvents_0\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  0,  size,  size,\n         0,  (size + size));\n\n    cqHelper.validateCQ(client, \"testCQEvents_1\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  0,  size,  size,\n         0,  (size + size));\n\n    \r\n    int numInvalidates = size;\n    \r\n    cqHelper.deleteValues(client2, regions[0], numInvalidates);\n    cqHelper.deleteValues(client2, regions[1], numInvalidates);\n\n    for (int i = 1; i <= numInvalidates; i++) {\n      cqHelper.waitForDestroyed(client, \"testCQEvents_0\", KEY + i);\n      cqHelper.waitForDestroyed(client, \"testCQEvents_1\", KEY + i);\n    }\n\n\n    \r\n\n    cqHelper.validateCQ(client, \"testCQEvents_0\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  numInvalidates,  size,\n         size,  numInvalidates,\n         (size + size + numInvalidates));\n\n\n    cqHelper.validateCQ(client, \"testCQEvents_1\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  numInvalidates,  size,\n         size,  numInvalidates,\n         (size + size + numInvalidates));\n\n    cqHelper.closeClient(client);\n    cqHelper.closeClient(client2);\n    cqHelper.closeServer(server2);\n    cqHelper.closeServer(server1);\n  }\n","date":"2018-07-18 03:54:18","endLine":895,"groupId":"34857","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPRCqWithMultipleRegionsOnServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/fc/7d640c734bf636b80f7ad66a98bc6d9813004c.src","preCode":"  public void testPRCqWithMultipleRegionsOnServer() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n    VM client2 = host.getVM(3);\n\n    \r\n    \r\n    createServer(server1, false, 1);\n\n    \r\n    createServer(server2, false, 1);\n\n    \r\n    Wait.pause(2000);\n\n    final int port = server1.invoke(() -> PrCqUsingPoolDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    String poolName1 = \"testPRCqWithMultipleRegionsOnServer1\";\n    createPool(client, poolName1, host0, port);\n\n    String poolName2 = \"testPRCqWithMultipleRegionsOnServer2\";\n    createPool(client2, poolName2, host0, port);\n\n    \r\n    createClient(client2, port, host0);\n\n    \r\n    createCQ(client, poolName1, \"testCQEvents_0\", cqs[0]);\n    createCQ(client, poolName1, \"testCQEvents_1\", cqs[10]);\n    cqHelper.executeCQ(client, \"testCQEvents_0\", false, null);\n    cqHelper.executeCQ(client, \"testCQEvents_1\", false, null);\n\n    \r\n    final int size = 400;\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    \r\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForCreated(client, \"testCQEvents_0\", KEY + i);\n      cqHelper.waitForCreated(client, \"testCQEvents_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testCQEvents_0\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n    cqHelper.validateCQ(client, \"testCQEvents_1\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n\n\n    \r\n\n    \r\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForUpdated(client, \"testCQEvents_0\", KEY + i);\n      cqHelper.waitForUpdated(client, \"testCQEvents_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testCQEvents_0\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  0,  size,  size,\n         0,  (size + size));\n\n    cqHelper.validateCQ(client, \"testCQEvents_1\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  0,  size,  size,\n         0,  (size + size));\n\n    \r\n    int numInvalidates = size;\n    \r\n    cqHelper.deleteValues(client2, regions[0], numInvalidates);\n    cqHelper.deleteValues(client2, regions[1], numInvalidates);\n\n    for (int i = 1; i <= numInvalidates; i++) {\n      cqHelper.waitForDestroyed(client, \"testCQEvents_0\", KEY + i);\n      cqHelper.waitForDestroyed(client, \"testCQEvents_1\", KEY + i);\n    }\n\n\n    \r\n\n    cqHelper.validateCQ(client, \"testCQEvents_0\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  numInvalidates,  size,\n         size,  numInvalidates,\n         (size + size + numInvalidates));\n\n\n    cqHelper.validateCQ(client, \"testCQEvents_1\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  numInvalidates,  size,\n         size,  numInvalidates,\n         (size + size + numInvalidates));\n\n    cqHelper.closeClient(client);\n    cqHelper.closeClient(client2);\n    cqHelper.closeServer(server2);\n    cqHelper.closeServer(server1);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PrCqUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":784,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testPRWithCQsAndProfileUpdates() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n    VM client2 = host.getVM(3);\n\n    \r\n    \r\n    createServer(server1, false, 1);\n\n    \r\n    createServer(server2, false, 1);\n\n\n    final int port = server1.invoke(() -> PartitionedRegionCqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    createClient(client, port, host0);\n    createClient(client2, port, host0);\n\n    \r\n    createCQ(client, \"testPRWithCQsAndProfileUpdates_0\", cqs[0]); \r\n    createCQ(client, \"testPRWithCQsAndProfileUpdates_1\", cqs[0]);\n    cqHelper.executeCQ(client, \"testPRWithCQsAndProfileUpdates_0\", false, null);\n    cqHelper.executeCQ(client, \"testPRWithCQsAndProfileUpdates_1\", false, null);\n\n    \r\n    final int size = 400;\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    \r\n\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForCreated(client, \"testPRWithCQsAndProfileUpdates_0\", KEY + i);\n      cqHelper.waitForCreated(client, \"testPRWithCQsAndProfileUpdates_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_0\",\n         CqQueryDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_1\",\n         CqQueryDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n\n    \r\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForUpdated(client, \"testPRWithCQsAndProfileUpdates_0\", KEY + i);\n      cqHelper.waitForUpdated(client, \"testPRWithCQsAndProfileUpdates_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_0\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         0,  size,  size,  0,\n         (size + size));\n\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_1\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         0,  size,  size,  0,\n         (size + size));\n\n    \r\n    int numInvalidates = size;\n    \r\n    cqHelper.deleteValues(client2, regions[0], numInvalidates);\n    cqHelper.deleteValues(client2, regions[1], numInvalidates);\n\n    for (int i = 1; i <= numInvalidates; i++) {\n      cqHelper.waitForDestroyed(client, \"testPRWithCQsAndProfileUpdates_0\", KEY + i);\n      cqHelper.waitForDestroyed(client, \"testPRWithCQsAndProfileUpdates_1\", KEY + i);\n    }\n\n    \r\n\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_0\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         numInvalidates,  size,  size,\n         numInvalidates,  (size + size + numInvalidates));\n\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_1\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         numInvalidates,  size,  size,\n         numInvalidates,  (size + size + numInvalidates));\n\n    cqHelper.closeCQ(client, \"testPRWithCQsAndProfileUpdates_0\");\n    cqHelper.closeCQ(client, \"testPRWithCQsAndProfileUpdates_1\");\n\n    cqHelper.closeClient(client);\n    cqHelper.closeClient(client2);\n    cqHelper.closeServer(server2);\n    cqHelper.closeServer(server1);\n  }\n","date":"2018-07-18 03:54:18","endLine":886,"groupId":"34857","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPRWithCQsAndProfileUpdates","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/04/66786223cca24061f40a4e6b85c73e313c4ec1.src","preCode":"  public void testPRWithCQsAndProfileUpdates() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n    VM client2 = host.getVM(3);\n\n    \r\n    \r\n    createServer(server1, false, 1);\n\n    \r\n    createServer(server2, false, 1);\n\n\n    final int port = server1.invoke(() -> PartitionedRegionCqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    createClient(client, port, host0);\n    createClient(client2, port, host0);\n\n    \r\n    createCQ(client, \"testPRWithCQsAndProfileUpdates_0\", cqs[0]); \r\n    createCQ(client, \"testPRWithCQsAndProfileUpdates_1\", cqs[0]);\n    cqHelper.executeCQ(client, \"testPRWithCQsAndProfileUpdates_0\", false, null);\n    cqHelper.executeCQ(client, \"testPRWithCQsAndProfileUpdates_1\", false, null);\n\n    \r\n    final int size = 400;\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    \r\n\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForCreated(client, \"testPRWithCQsAndProfileUpdates_0\", KEY + i);\n      cqHelper.waitForCreated(client, \"testPRWithCQsAndProfileUpdates_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_0\",\n         CqQueryDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_1\",\n         CqQueryDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n\n    \r\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForUpdated(client, \"testPRWithCQsAndProfileUpdates_0\", KEY + i);\n      cqHelper.waitForUpdated(client, \"testPRWithCQsAndProfileUpdates_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_0\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         0,  size,  size,  0,\n         (size + size));\n\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_1\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         0,  size,  size,  0,\n         (size + size));\n\n    \r\n    int numInvalidates = size;\n    \r\n    cqHelper.deleteValues(client2, regions[0], numInvalidates);\n    cqHelper.deleteValues(client2, regions[1], numInvalidates);\n\n    for (int i = 1; i <= numInvalidates; i++) {\n      cqHelper.waitForDestroyed(client, \"testPRWithCQsAndProfileUpdates_0\", KEY + i);\n      cqHelper.waitForDestroyed(client, \"testPRWithCQsAndProfileUpdates_1\", KEY + i);\n    }\n\n    \r\n\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_0\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         numInvalidates,  size,  size,\n         numInvalidates,  (size + size + numInvalidates));\n\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_1\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         numInvalidates,  size,  size,\n         numInvalidates,  (size + size + numInvalidates));\n\n    cqHelper.closeCQ(client, \"testPRWithCQsAndProfileUpdates_0\");\n    cqHelper.closeCQ(client, \"testPRWithCQsAndProfileUpdates_1\");\n\n    cqHelper.closeClient(client);\n    cqHelper.closeClient(client2);\n    cqHelper.closeServer(server2);\n    cqHelper.closeServer(server1);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PartitionedRegionCqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":787,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-11-15 01:46:20","commitOrder":2,"curCode":"  public void testPRCqWithMultipleRegionsOnServer() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n    VM client2 = host.getVM(3);\n\n    \r\n    \r\n    createServer(server1, false, 1);\n\n    \r\n    createServer(server2, false, 1);\n\n    \r\n    Wait.pause(2000);\n\n    final int port = server1.invoke(() -> PrCqUsingPoolDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    String poolName1 = \"testPRCqWithMultipleRegionsOnServer1\";\n    createPool(client, poolName1, host0, port);\n\n    String poolName2 = \"testPRCqWithMultipleRegionsOnServer2\";\n    createPool(client2, poolName2, host0, port);\n\n    \r\n    createClient(client2, port, host0);\n\n    \r\n    createCQ(client, poolName1, \"testCQEvents_0\", cqs[0]);\n    createCQ(client, poolName1, \"testCQEvents_1\", cqs[10]);\n    cqHelper.executeCQ(client, \"testCQEvents_0\", false, null);\n    cqHelper.executeCQ(client, \"testCQEvents_1\", false, null);\n\n    \r\n    final int size = 200;\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    \r\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForCreated(client, \"testCQEvents_0\", KEY + i);\n      cqHelper.waitForCreated(client, \"testCQEvents_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testCQEvents_0\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n    cqHelper.validateCQ(client, \"testCQEvents_1\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n\n\n    \r\n\n    \r\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForUpdated(client, \"testCQEvents_0\", KEY + i);\n      cqHelper.waitForUpdated(client, \"testCQEvents_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testCQEvents_0\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  0,  size,  size,\n         0,  (size + size));\n\n    cqHelper.validateCQ(client, \"testCQEvents_1\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  0,  size,  size,\n         0,  (size + size));\n\n    \r\n    int numInvalidates = size;\n    \r\n    cqHelper.deleteValues(client2, regions[0], numInvalidates);\n    cqHelper.deleteValues(client2, regions[1], numInvalidates);\n\n    for (int i = 1; i <= numInvalidates; i++) {\n      cqHelper.waitForDestroyed(client, \"testCQEvents_0\", KEY + i);\n      cqHelper.waitForDestroyed(client, \"testCQEvents_1\", KEY + i);\n    }\n\n\n    \r\n\n    cqHelper.validateCQ(client, \"testCQEvents_0\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  numInvalidates,  size,\n         size,  numInvalidates,\n         (size + size + numInvalidates));\n\n\n    cqHelper.validateCQ(client, \"testCQEvents_1\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  numInvalidates,  size,\n         size,  numInvalidates,\n         (size + size + numInvalidates));\n\n    cqHelper.closeClient(client);\n    cqHelper.closeClient(client2);\n    cqHelper.closeServer(server2);\n    cqHelper.closeServer(server1);\n  }\n","date":"2018-11-15 01:47:15","endLine":895,"groupId":"10839","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPRCqWithMultipleRegionsOnServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2d/3fd6390314338ceecfe960c4c9c8368e4af344.src","preCode":"  public void testPRCqWithMultipleRegionsOnServer() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n    VM client2 = host.getVM(3);\n\n    \r\n    \r\n    createServer(server1, false, 1);\n\n    \r\n    createServer(server2, false, 1);\n\n    \r\n    Wait.pause(2000);\n\n    final int port = server1.invoke(() -> PrCqUsingPoolDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    String poolName1 = \"testPRCqWithMultipleRegionsOnServer1\";\n    createPool(client, poolName1, host0, port);\n\n    String poolName2 = \"testPRCqWithMultipleRegionsOnServer2\";\n    createPool(client2, poolName2, host0, port);\n\n    \r\n    createClient(client2, port, host0);\n\n    \r\n    createCQ(client, poolName1, \"testCQEvents_0\", cqs[0]);\n    createCQ(client, poolName1, \"testCQEvents_1\", cqs[10]);\n    cqHelper.executeCQ(client, \"testCQEvents_0\", false, null);\n    cqHelper.executeCQ(client, \"testCQEvents_1\", false, null);\n\n    \r\n    final int size = 400;\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    \r\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForCreated(client, \"testCQEvents_0\", KEY + i);\n      cqHelper.waitForCreated(client, \"testCQEvents_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testCQEvents_0\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n    cqHelper.validateCQ(client, \"testCQEvents_1\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n\n\n    \r\n\n    \r\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForUpdated(client, \"testCQEvents_0\", KEY + i);\n      cqHelper.waitForUpdated(client, \"testCQEvents_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testCQEvents_0\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  0,  size,  size,\n         0,  (size + size));\n\n    cqHelper.validateCQ(client, \"testCQEvents_1\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  0,  size,  size,\n         0,  (size + size));\n\n    \r\n    int numInvalidates = size;\n    \r\n    cqHelper.deleteValues(client2, regions[0], numInvalidates);\n    cqHelper.deleteValues(client2, regions[1], numInvalidates);\n\n    for (int i = 1; i <= numInvalidates; i++) {\n      cqHelper.waitForDestroyed(client, \"testCQEvents_0\", KEY + i);\n      cqHelper.waitForDestroyed(client, \"testCQEvents_1\", KEY + i);\n    }\n\n\n    \r\n\n    cqHelper.validateCQ(client, \"testCQEvents_0\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  numInvalidates,  size,\n         size,  numInvalidates,\n         (size + size + numInvalidates));\n\n\n    cqHelper.validateCQ(client, \"testCQEvents_1\",\n         CqQueryUsingPoolDUnitTest.noTest,  size,\n         size,  numInvalidates,  size,\n         size,  numInvalidates,\n         (size + size + numInvalidates));\n\n    cqHelper.closeClient(client);\n    cqHelper.closeClient(client2);\n    cqHelper.closeServer(server2);\n    cqHelper.closeServer(server1);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PrCqUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":784,"status":"M"},{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public void testPRWithCQsAndProfileUpdates() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n    VM client2 = host.getVM(3);\n\n    \r\n    \r\n    createServer(server1, false, 1);\n\n    \r\n    createServer(server2, false, 1);\n\n\n    final int port = server1.invoke(() -> PartitionedRegionCqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    createClient(client, port, host0);\n    createClient(client2, port, host0);\n\n    \r\n    createCQ(client, \"testPRWithCQsAndProfileUpdates_0\", cqs[0]); \r\n    createCQ(client, \"testPRWithCQsAndProfileUpdates_1\", cqs[0]);\n    cqHelper.executeCQ(client, \"testPRWithCQsAndProfileUpdates_0\", false, null);\n    cqHelper.executeCQ(client, \"testPRWithCQsAndProfileUpdates_1\", false, null);\n\n    \r\n    final int size = 400;\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    \r\n\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForCreated(client, \"testPRWithCQsAndProfileUpdates_0\", KEY + i);\n      cqHelper.waitForCreated(client, \"testPRWithCQsAndProfileUpdates_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_0\",\n         CqQueryDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_1\",\n         CqQueryDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n\n    \r\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForUpdated(client, \"testPRWithCQsAndProfileUpdates_0\", KEY + i);\n      cqHelper.waitForUpdated(client, \"testPRWithCQsAndProfileUpdates_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_0\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         0,  size,  size,  0,\n         (size + size));\n\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_1\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         0,  size,  size,  0,\n         (size + size));\n\n    \r\n    int numInvalidates = size;\n    \r\n    cqHelper.deleteValues(client2, regions[0], numInvalidates);\n    cqHelper.deleteValues(client2, regions[1], numInvalidates);\n\n    for (int i = 1; i <= numInvalidates; i++) {\n      cqHelper.waitForDestroyed(client, \"testPRWithCQsAndProfileUpdates_0\", KEY + i);\n      cqHelper.waitForDestroyed(client, \"testPRWithCQsAndProfileUpdates_1\", KEY + i);\n    }\n\n    \r\n\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_0\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         numInvalidates,  size,  size,\n         numInvalidates,  (size + size + numInvalidates));\n\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_1\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         numInvalidates,  size,  size,\n         numInvalidates,  (size + size + numInvalidates));\n\n    cqHelper.closeCQ(client, \"testPRWithCQsAndProfileUpdates_0\");\n    cqHelper.closeCQ(client, \"testPRWithCQsAndProfileUpdates_1\");\n\n    cqHelper.closeClient(client);\n    cqHelper.closeClient(client2);\n    cqHelper.closeServer(server2);\n    cqHelper.closeServer(server1);\n  }\n","date":"2018-07-18 03:54:18","endLine":886,"groupId":"10839","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPRWithCQsAndProfileUpdates","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/04/66786223cca24061f40a4e6b85c73e313c4ec1.src","preCode":"  public void testPRWithCQsAndProfileUpdates() throws Exception {\n    final Host host = Host.getHost(0);\n    VM server1 = host.getVM(0);\n    VM server2 = host.getVM(1);\n    VM client = host.getVM(2);\n    VM client2 = host.getVM(3);\n\n    \r\n    \r\n    createServer(server1, false, 1);\n\n    \r\n    createServer(server2, false, 1);\n\n\n    final int port = server1.invoke(() -> PartitionedRegionCqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server1.getHost());\n\n    createClient(client, port, host0);\n    createClient(client2, port, host0);\n\n    \r\n    createCQ(client, \"testPRWithCQsAndProfileUpdates_0\", cqs[0]); \r\n    createCQ(client, \"testPRWithCQsAndProfileUpdates_1\", cqs[0]);\n    cqHelper.executeCQ(client, \"testPRWithCQsAndProfileUpdates_0\", false, null);\n    cqHelper.executeCQ(client, \"testPRWithCQsAndProfileUpdates_1\", false, null);\n\n    \r\n    final int size = 400;\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    \r\n\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForCreated(client, \"testPRWithCQsAndProfileUpdates_0\", KEY + i);\n      cqHelper.waitForCreated(client, \"testPRWithCQsAndProfileUpdates_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_0\",\n         CqQueryDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_1\",\n         CqQueryDUnitTest.noTest,  size,  0,\n         0,  size,  0,  0,\n         size);\n\n    \r\n    createValues(client2, regions[0], size);\n    createValues(client2, regions[1], size);\n\n    for (int i = 1; i <= size; i++) {\n      cqHelper.waitForUpdated(client, \"testPRWithCQsAndProfileUpdates_0\", KEY + i);\n      cqHelper.waitForUpdated(client, \"testPRWithCQsAndProfileUpdates_1\", KEY + i);\n    }\n\n    \r\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_0\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         0,  size,  size,  0,\n         (size + size));\n\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_1\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         0,  size,  size,  0,\n         (size + size));\n\n    \r\n    int numInvalidates = size;\n    \r\n    cqHelper.deleteValues(client2, regions[0], numInvalidates);\n    cqHelper.deleteValues(client2, regions[1], numInvalidates);\n\n    for (int i = 1; i <= numInvalidates; i++) {\n      cqHelper.waitForDestroyed(client, \"testPRWithCQsAndProfileUpdates_0\", KEY + i);\n      cqHelper.waitForDestroyed(client, \"testPRWithCQsAndProfileUpdates_1\", KEY + i);\n    }\n\n    \r\n\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_0\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         numInvalidates,  size,  size,\n         numInvalidates,  (size + size + numInvalidates));\n\n    cqHelper.validateCQ(client, \"testPRWithCQsAndProfileUpdates_1\",\n         CqQueryDUnitTest.noTest,  size,  size,\n         numInvalidates,  size,  size,\n         numInvalidates,  (size + size + numInvalidates));\n\n    cqHelper.closeCQ(client, \"testPRWithCQsAndProfileUpdates_0\");\n    cqHelper.closeCQ(client, \"testPRWithCQsAndProfileUpdates_1\");\n\n    cqHelper.closeClient(client);\n    cqHelper.closeClient(client2);\n    cqHelper.closeServer(server2);\n    cqHelper.closeServer(server1);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PartitionedRegionCqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":787,"status":"N"}],"commitId":"702eb206886203c55722335c7d66fbc6604fbe22","commitMessage":"@@@GEODE-5072 Java clients should not access or modify internal regions\n\nI relaxed restrictions to allow clients to modify the Dynamic Regions\nand Client Health cache regions.  These regions are also modified to\nhave constraints on the type of values that can be put into them.  though\nthe servers don't check these constraints - only the client cache does\nso.\n\nI modified the cache helper and GatewayReceiverCommand to give this\noperation full access to the cache.  This is required for PDX type\npropagation.\n\nOne of the tests I had to deal with was taking over 20 minutes to run so\nI trimmed it down.  It now runs in about half that time.\n\nThis closes #2835\n\ncommit 98927d1f49221b3cd617337299c799de5470e072\nAuthor: Bruce Schuchardt <bschuchardt@pivotal.io>\nDate:   Fri Nov 9 16:07:53 2018 -0800\n\n    GEODE-5072 Java clients should not access or modify internal regions\n\n    Modified the kind of cache available to client/server command processing\n    in order to restrict access to internal regions.\n","date":"2018-11-15 01:47:15","modifiedFileCount":"13","status":"M","submitter":"Bruce Schuchardt"}]
