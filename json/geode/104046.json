[{"authorTime":"2018-07-04 07:26:40","codes":[{"authorDate":"2018-07-04 07:26:40","commitOrder":1,"curCode":"  public void queueRemovalAndDispatchingConcurrently() throws Exception {\n    \r\n    HAContainerWrapper haContainerWrapper = new HAContainerMap(new ConcurrentHashMap());\n    when(ccn.getHaContainer()).thenReturn(haContainerWrapper);\n\n    List<HARegionQueue> regionQueues = new ArrayList<>();\n\n    for (int i = 0; i < 2; ++i) {\n      HARegion haRegion = Mockito.mock(HARegion.class);\n      when(haRegion.getGemFireCache()).thenReturn((InternalCache) cache);\n\n      ConcurrentHashMap<Object, Object> mockRegion = new ConcurrentHashMap<>();\n\n      when(haRegion.put(Mockito.any(Object.class), Mockito.any(Object.class))).then(answer -> {\n        Object existingValue = mockRegion.put(answer.getArgument(0), answer.getArgument(1));\n        return existingValue;\n      });\n\n      when(haRegion.get(Mockito.any(Object.class))).then(answer -> {\n        return mockRegion.get(answer.getArgument(0));\n      });\n\n      doAnswer(answer -> {\n        mockRegion.remove(answer.getArgument(0));\n        return null;\n      }).when(haRegion).localDestroy(Mockito.any(Object.class));\n\n      regionQueues.add(createHARegionQueue(haContainerWrapper, i, haRegion, false));\n    }\n\n    ExecutorService service = Executors.newFixedThreadPool(2);\n\n    List<Callable<Object>> callables = new ArrayList<>();\n\n    for (int i = 0; i < 10000; ++i) {\n      callables.clear();\n\n      EventID eventID = new EventID(new byte[] {1}, 1, i);\n\n      ClientUpdateMessage message = new ClientUpdateMessageImpl(EnumListenerEvent.AFTER_UPDATE,\n          (LocalRegion) dataRegion, \"key\", \"value\".getBytes(), (byte) 0x01, null,\n          new ClientProxyMembershipID(), eventID);\n\n      HAEventWrapper wrapper = new HAEventWrapper(message);\n      wrapper.setHAContainer(haContainerWrapper);\n      wrapper.incrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        queue.put(wrapper);\n      }\n\n      wrapper.decrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.peek();\n            queue.remove();\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.removeDispatchedEvents(eventID);\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n      }\n\n      \r\n      List<Future<Object>> futures = service.invokeAll(callables, 10, TimeUnit.SECONDS);\n\n      for (Future<Object> future : futures) {\n        try {\n          future.get();\n        } catch (Exception ex) {\n          throw new TestException(\n              \"Exception thrown while executing regionQueue methods concurrently on iteration: \"\n                  + i,\n              ex);\n        }\n      }\n    }\n  }\n","date":"2018-08-02 02:25:34","endLine":468,"groupId":"5446","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"queueRemovalAndDispatchingConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a1/b71a1b2ccc06a5f7a63bee92c465221bcc9bba.src","preCode":"  public void queueRemovalAndDispatchingConcurrently() throws Exception {\n    \r\n    HAContainerWrapper haContainerWrapper = new HAContainerMap(new ConcurrentHashMap());\n    when(ccn.getHaContainer()).thenReturn(haContainerWrapper);\n\n    List<HARegionQueue> regionQueues = new ArrayList<>();\n\n    for (int i = 0; i < 2; ++i) {\n      HARegion haRegion = Mockito.mock(HARegion.class);\n      when(haRegion.getGemFireCache()).thenReturn((InternalCache) cache);\n\n      ConcurrentHashMap<Object, Object> mockRegion = new ConcurrentHashMap<>();\n\n      when(haRegion.put(Mockito.any(Object.class), Mockito.any(Object.class))).then(answer -> {\n        Object existingValue = mockRegion.put(answer.getArgument(0), answer.getArgument(1));\n        return existingValue;\n      });\n\n      when(haRegion.get(Mockito.any(Object.class))).then(answer -> {\n        return mockRegion.get(answer.getArgument(0));\n      });\n\n      doAnswer(answer -> {\n        mockRegion.remove(answer.getArgument(0));\n        return null;\n      }).when(haRegion).localDestroy(Mockito.any(Object.class));\n\n      regionQueues.add(createHARegionQueue(haContainerWrapper, i, haRegion, false));\n    }\n\n    ExecutorService service = Executors.newFixedThreadPool(2);\n\n    List<Callable<Object>> callables = new ArrayList<>();\n\n    for (int i = 0; i < 10000; ++i) {\n      callables.clear();\n\n      EventID eventID = new EventID(new byte[] {1}, 1, i);\n\n      ClientUpdateMessage message = new ClientUpdateMessageImpl(EnumListenerEvent.AFTER_UPDATE,\n          (LocalRegion) dataRegion, \"key\", \"value\".getBytes(), (byte) 0x01, null,\n          new ClientProxyMembershipID(), eventID);\n\n      HAEventWrapper wrapper = new HAEventWrapper(message);\n      wrapper.setHAContainer(haContainerWrapper);\n      wrapper.incrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        queue.put(wrapper);\n      }\n\n      wrapper.decrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.peek();\n            queue.remove();\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.removeDispatchedEvents(eventID);\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n      }\n\n      \r\n      List<Future<Object>> futures = service.invokeAll(callables, 10, TimeUnit.SECONDS);\n\n      for (Future<Object> future : futures) {\n        try {\n          future.get();\n        } catch (Exception ex) {\n          throw new TestException(\n              \"Exception thrown while executing regionQueue methods concurrently on iteration: \"\n                  + i,\n              ex);\n        }\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"B"},{"authorDate":"2018-07-04 07:26:40","commitOrder":1,"curCode":"  private void createAndPutHARegionQueuesSequentially(HAContainerWrapper haContainerWrapper,\n      HAEventWrapper haEventWrapper, int numQueues) throws Exception {\n    ArrayList<HARegionQueue> queues = new ArrayList<>();\n\n    \r\n    for (int i = 0; i < numQueues; i++) {\n      queues.add(createHARegionQueue(haContainerWrapper, i));\n    }\n\n    haEventWrapper.incrementPutInProgressCounter();\n\n    for (HARegionQueue queue : queues) {\n      queue.put(haEventWrapper);\n    }\n\n    haEventWrapper.decrementPutInProgressCounter();\n  }\n","date":"2018-08-02 02:25:34","endLine":685,"groupId":"5446","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createAndPutHARegionQueuesSequentially","params":"(HAContainerWrapperhaContainerWrapper@HAEventWrapperhaEventWrapper@intnumQueues)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a1/b71a1b2ccc06a5f7a63bee92c465221bcc9bba.src","preCode":"  private void createAndPutHARegionQueuesSequentially(HAContainerWrapper haContainerWrapper,\n      HAEventWrapper haEventWrapper, int numQueues) throws Exception {\n    ArrayList<HARegionQueue> queues = new ArrayList<>();\n\n    \r\n    for (int i = 0; i < numQueues; i++) {\n      queues.add(createHARegionQueue(haContainerWrapper, i));\n    }\n\n    haEventWrapper.incrementPutInProgressCounter();\n\n    for (HARegionQueue queue : queues) {\n      queue.put(haEventWrapper);\n    }\n\n    haEventWrapper.decrementPutInProgressCounter();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"B"}],"commitId":"103b467ab6205f6c9d180d5ad28705ce47c7b5bb","commitMessage":"@@@GEODE-5420: Protect events in HAContainer from premature modification\n\n- Updated putInProgress boolean in HAWrapper to a counter to prevent prematurely setting ClientUpdateMessage to null when events are temporarily queued during a GII or message dispatcher initialization\n- decAndRemoveFromHAContainer only removes when putInProgress counter and ref count are 0\n- Refactored putEventInHARegion/putConditionallyInHAContainer to prevent overwriting an existing entry in the HAContainer.  Also reduces simplifies the code and reduces duplicated logic.\n- Wrote missing basic HARegionQueue unit/integration tests.  and an integration test to capture setting the ClientUpdateMessage property on HAEventWrapper to null prematurely\n- Added new event tracing messages at debug logging level to help track similar issues in the future\n\nCo-authored-by: Ryan McMahon <rmcmahon@pivotal.io>\nCo-authored-by: Lynn Hughes-Godfrey <lhughesgodfrey@pivotal.io>\n","date":"2018-08-02 02:25:34","modifiedFileCount":"8","status":"B","submitter":"Ryan McMahon"},{"authorTime":"2018-07-04 07:26:40","codes":[{"authorDate":"2018-08-02 02:33:38","commitOrder":2,"curCode":"  public void queueRemovalAndDispatchingConcurrently() throws Exception {\n    \r\n    HAContainerWrapper haContainerWrapper = new HAContainerMap(new ConcurrentHashMap());\n    when(ccn.getHaContainer()).thenReturn(haContainerWrapper);\n\n    List<HARegionQueue> regionQueues = new ArrayList<>();\n\n    for (int i = 0; i < 2; ++i) {\n      HARegion haRegion = createMockHARegion();\n\n      regionQueues.add(createHARegionQueue(haContainerWrapper, i, haRegion, false));\n    }\n\n    ExecutorService service = Executors.newFixedThreadPool(2);\n\n    List<Callable<Object>> callables = new ArrayList<>();\n\n    for (int i = 0; i < 10000; ++i) {\n      callables.clear();\n\n      EventID eventID = new EventID(new byte[] {1}, 1, i);\n\n      ClientUpdateMessage message = new ClientUpdateMessageImpl(EnumListenerEvent.AFTER_UPDATE,\n          (LocalRegion) dataRegion, \"key\", \"value\".getBytes(), (byte) 0x01, null,\n          new ClientProxyMembershipID(), eventID);\n\n      HAEventWrapper wrapper = new HAEventWrapper(message);\n      wrapper.setHAContainer(haContainerWrapper);\n      wrapper.incrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        queue.put(wrapper);\n      }\n\n      wrapper.decrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.peek();\n            queue.remove();\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.removeDispatchedEvents(eventID);\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n      }\n\n      \r\n      List<Future<Object>> futures = service.invokeAll(callables, 10, TimeUnit.SECONDS);\n\n      for (Future<Object> future : futures) {\n        try {\n          future.get();\n        } catch (Exception ex) {\n          throw new TestException(\n              \"Exception thrown while executing regionQueue methods concurrently on iteration: \"\n                  + i,\n              ex);\n        }\n      }\n    }\n  }\n","date":"2018-08-04 00:36:41","endLine":453,"groupId":"5446","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"queueRemovalAndDispatchingConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/02/701774c0084fd94a88f113934d6a2e2cc9224f.src","preCode":"  public void queueRemovalAndDispatchingConcurrently() throws Exception {\n    \r\n    HAContainerWrapper haContainerWrapper = new HAContainerMap(new ConcurrentHashMap());\n    when(ccn.getHaContainer()).thenReturn(haContainerWrapper);\n\n    List<HARegionQueue> regionQueues = new ArrayList<>();\n\n    for (int i = 0; i < 2; ++i) {\n      HARegion haRegion = Mockito.mock(HARegion.class);\n      when(haRegion.getGemFireCache()).thenReturn((InternalCache) cache);\n\n      ConcurrentHashMap<Object, Object> mockRegion = new ConcurrentHashMap<>();\n\n      when(haRegion.put(Mockito.any(Object.class), Mockito.any(Object.class))).then(answer -> {\n        Object existingValue = mockRegion.put(answer.getArgument(0), answer.getArgument(1));\n        return existingValue;\n      });\n\n      when(haRegion.get(Mockito.any(Object.class))).then(answer -> {\n        return mockRegion.get(answer.getArgument(0));\n      });\n\n      doAnswer(answer -> {\n        mockRegion.remove(answer.getArgument(0));\n        return null;\n      }).when(haRegion).localDestroy(Mockito.any(Object.class));\n\n      regionQueues.add(createHARegionQueue(haContainerWrapper, i, haRegion, false));\n    }\n\n    ExecutorService service = Executors.newFixedThreadPool(2);\n\n    List<Callable<Object>> callables = new ArrayList<>();\n\n    for (int i = 0; i < 10000; ++i) {\n      callables.clear();\n\n      EventID eventID = new EventID(new byte[] {1}, 1, i);\n\n      ClientUpdateMessage message = new ClientUpdateMessageImpl(EnumListenerEvent.AFTER_UPDATE,\n          (LocalRegion) dataRegion, \"key\", \"value\".getBytes(), (byte) 0x01, null,\n          new ClientProxyMembershipID(), eventID);\n\n      HAEventWrapper wrapper = new HAEventWrapper(message);\n      wrapper.setHAContainer(haContainerWrapper);\n      wrapper.incrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        queue.put(wrapper);\n      }\n\n      wrapper.decrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.peek();\n            queue.remove();\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.removeDispatchedEvents(eventID);\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n      }\n\n      \r\n      List<Future<Object>> futures = service.invokeAll(callables, 10, TimeUnit.SECONDS);\n\n      for (Future<Object> future : futures) {\n        try {\n          future.get();\n        } catch (Exception ex) {\n          throw new TestException(\n              \"Exception thrown while executing regionQueue methods concurrently on iteration: \"\n                  + i,\n              ex);\n        }\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"},{"authorDate":"2018-07-04 07:26:40","commitOrder":2,"curCode":"  private void createAndPutHARegionQueuesSequentially(HAContainerWrapper haContainerWrapper,\n      HAEventWrapper haEventWrapper, int numQueues) throws Exception {\n    ArrayList<HARegionQueue> queues = new ArrayList<>();\n\n    \r\n    for (int i = 0; i < numQueues; i++) {\n      queues.add(createHARegionQueue(haContainerWrapper, i));\n    }\n\n    haEventWrapper.incrementPutInProgressCounter();\n\n    for (HARegionQueue queue : queues) {\n      queue.put(haEventWrapper);\n    }\n\n    haEventWrapper.decrementPutInProgressCounter();\n  }\n","date":"2018-08-02 02:25:34","endLine":685,"groupId":"5446","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createAndPutHARegionQueuesSequentially","params":"(HAContainerWrapperhaContainerWrapper@HAEventWrapperhaEventWrapper@intnumQueues)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a1/b71a1b2ccc06a5f7a63bee92c465221bcc9bba.src","preCode":"  private void createAndPutHARegionQueuesSequentially(HAContainerWrapper haContainerWrapper,\n      HAEventWrapper haEventWrapper, int numQueues) throws Exception {\n    ArrayList<HARegionQueue> queues = new ArrayList<>();\n\n    \r\n    for (int i = 0; i < numQueues; i++) {\n      queues.add(createHARegionQueue(haContainerWrapper, i));\n    }\n\n    haEventWrapper.incrementPutInProgressCounter();\n\n    for (HARegionQueue queue : queues) {\n      queue.put(haEventWrapper);\n    }\n\n    haEventWrapper.decrementPutInProgressCounter();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"N"}],"commitId":"acb50f94157c25ada4163771758115a1cb108516","commitMessage":"@@@GEODE-5495: Destroy available ID before decrement in updateHAContainer()\n\nCo-authored-by: Ryan McMahon <rmcmahon@pivotal.io>\nCo-authored-by: Lynn Hughes-Godfrey <lhughesgodfrey@pivotal.io>\n","date":"2018-08-04 00:36:41","modifiedFileCount":"5","status":"M","submitter":"Ryan McMahon"},{"authorTime":"2018-07-04 07:26:40","codes":[{"authorDate":"2018-12-21 02:06:56","commitOrder":3,"curCode":"  public void queueRemovalAndDispatchingConcurrently() throws Exception {\n    HAContainerWrapper haContainerWrapper = (HAContainerWrapper) ccn.getHaContainer();\n\n    List<HARegionQueue> regionQueues = new ArrayList<>();\n\n    for (int i = 0; i < 2; ++i) {\n      HARegion haRegion = createMockHARegion();\n\n      regionQueues.add(createHARegionQueue(haContainerWrapper, i, haRegion, false));\n    }\n\n    ExecutorService service = Executors.newFixedThreadPool(2);\n\n    List<Callable<Object>> callables = new ArrayList<>();\n\n    for (int i = 0; i < 10000; ++i) {\n      callables.clear();\n\n      EventID eventID = new EventID(new byte[] {1}, 1, i);\n\n      ClientUpdateMessage message = new ClientUpdateMessageImpl(EnumListenerEvent.AFTER_UPDATE,\n          (LocalRegion) dataRegion, \"key\", \"value\".getBytes(), (byte) 0x01, null,\n          new ClientProxyMembershipID(), eventID);\n\n      HAEventWrapper wrapper = new HAEventWrapper(message);\n      wrapper.setHAContainer(haContainerWrapper);\n      wrapper.incrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        queue.put(wrapper);\n      }\n\n      wrapper.decrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.peek();\n            queue.remove();\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.removeDispatchedEvents(eventID);\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n      }\n\n      \r\n      List<Future<Object>> futures = service.invokeAll(callables, 10, TimeUnit.SECONDS);\n\n      for (Future<Object> future : futures) {\n        try {\n          future.get();\n        } catch (Exception ex) {\n          throw new TestException(\n              \"Exception thrown while executing regionQueue methods concurrently on iteration: \"\n                  + i,\n              ex);\n        }\n      }\n    }\n  }\n","date":"2018-12-21 02:06:56","endLine":423,"groupId":"5446","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"queueRemovalAndDispatchingConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f5/4962b4ec42598227bd9c1f8dde157ccdcfcbb9.src","preCode":"  public void queueRemovalAndDispatchingConcurrently() throws Exception {\n    \r\n    HAContainerWrapper haContainerWrapper = new HAContainerMap(new ConcurrentHashMap());\n    when(ccn.getHaContainer()).thenReturn(haContainerWrapper);\n\n    List<HARegionQueue> regionQueues = new ArrayList<>();\n\n    for (int i = 0; i < 2; ++i) {\n      HARegion haRegion = createMockHARegion();\n\n      regionQueues.add(createHARegionQueue(haContainerWrapper, i, haRegion, false));\n    }\n\n    ExecutorService service = Executors.newFixedThreadPool(2);\n\n    List<Callable<Object>> callables = new ArrayList<>();\n\n    for (int i = 0; i < 10000; ++i) {\n      callables.clear();\n\n      EventID eventID = new EventID(new byte[] {1}, 1, i);\n\n      ClientUpdateMessage message = new ClientUpdateMessageImpl(EnumListenerEvent.AFTER_UPDATE,\n          (LocalRegion) dataRegion, \"key\", \"value\".getBytes(), (byte) 0x01, null,\n          new ClientProxyMembershipID(), eventID);\n\n      HAEventWrapper wrapper = new HAEventWrapper(message);\n      wrapper.setHAContainer(haContainerWrapper);\n      wrapper.incrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        queue.put(wrapper);\n      }\n\n      wrapper.decrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.peek();\n            queue.remove();\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.removeDispatchedEvents(eventID);\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n      }\n\n      \r\n      List<Future<Object>> futures = service.invokeAll(callables, 10, TimeUnit.SECONDS);\n\n      for (Future<Object> future : futures) {\n        try {\n          future.get();\n        } catch (Exception ex) {\n          throw new TestException(\n              \"Exception thrown while executing regionQueue methods concurrently on iteration: \"\n                  + i,\n              ex);\n        }\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"M"},{"authorDate":"2018-07-04 07:26:40","commitOrder":3,"curCode":"  private void createAndPutHARegionQueuesSequentially(HAContainerWrapper haContainerWrapper,\n      HAEventWrapper haEventWrapper, int numQueues) throws Exception {\n    ArrayList<HARegionQueue> queues = new ArrayList<>();\n\n    \r\n    for (int i = 0; i < numQueues; i++) {\n      queues.add(createHARegionQueue(haContainerWrapper, i));\n    }\n\n    haEventWrapper.incrementPutInProgressCounter();\n\n    for (HARegionQueue queue : queues) {\n      queue.put(haEventWrapper);\n    }\n\n    haEventWrapper.decrementPutInProgressCounter();\n  }\n","date":"2018-08-02 02:25:34","endLine":685,"groupId":"5446","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createAndPutHARegionQueuesSequentially","params":"(HAContainerWrapperhaContainerWrapper@HAEventWrapperhaEventWrapper@intnumQueues)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a1/b71a1b2ccc06a5f7a63bee92c465221bcc9bba.src","preCode":"  private void createAndPutHARegionQueuesSequentially(HAContainerWrapper haContainerWrapper,\n      HAEventWrapper haEventWrapper, int numQueues) throws Exception {\n    ArrayList<HARegionQueue> queues = new ArrayList<>();\n\n    \r\n    for (int i = 0; i < numQueues; i++) {\n      queues.add(createHARegionQueue(haContainerWrapper, i));\n    }\n\n    haEventWrapper.incrementPutInProgressCounter();\n\n    for (HARegionQueue queue : queues) {\n      queue.put(haEventWrapper);\n    }\n\n    haEventWrapper.decrementPutInProgressCounter();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"N"}],"commitId":"c588614471c3c874bd205793fe104c3d2f607a02","commitMessage":"@@@Merge pull request #3013 from apache/feature/GEODE-6143-9\n\nGEODE-6143: remove PowerMock from HARegionQueueIntegrationTest","date":"2018-12-21 02:06:56","modifiedFileCount":"3","status":"M","submitter":"Xiaojian Zhou"},{"authorTime":"2019-06-08 01:44:11","codes":[{"authorDate":"2019-06-08 01:44:11","commitOrder":4,"curCode":"  public void queueRemovalAndDispatchingConcurrently() throws Exception {\n    HAContainerWrapper haContainerWrapper = (HAContainerWrapper) ccn.getHaContainer();\n\n    List<HARegionQueue> regionQueues = new ArrayList<>();\n\n    for (int i = 0; i < 2; ++i) {\n      HARegion haRegion = createMockHARegion();\n\n      regionQueues.add(createHARegionQueue(haContainerWrapper, i, haRegion, false));\n    }\n\n    ExecutorService service = Executors.newFixedThreadPool(2);\n\n    List<Callable<Object>> callables = new ArrayList<>();\n\n    for (int i = 0; i < 10000; ++i) {\n      callables.clear();\n\n      EventID eventID = new EventID(new byte[] {1}, 1, i);\n\n      ClientUpdateMessage message = new ClientUpdateMessageImpl(EnumListenerEvent.AFTER_UPDATE,\n          (LocalRegion) dataRegion, \"key\", \"value\".getBytes(), (byte) 0x01, null,\n          new ClientProxyMembershipID(), eventID);\n\n      HAEventWrapper wrapper = new HAEventWrapper(message);\n      wrapper.setHAContainer(haContainerWrapper);\n      wrapper.incrementPutInProgressCounter(\"test\");\n\n      for (HARegionQueue queue : regionQueues) {\n        queue.put(wrapper);\n      }\n\n      wrapper.decrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.peek();\n            queue.remove();\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.removeDispatchedEvents(eventID);\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n      }\n\n      \r\n      List<Future<Object>> futures = service.invokeAll(callables, 10, TimeUnit.SECONDS);\n\n      for (Future<Object> future : futures) {\n        try {\n          future.get();\n        } catch (Exception ex) {\n          throw new TestException(\n              \"Exception thrown while executing regionQueue methods concurrently on iteration: \"\n                  + i,\n              ex);\n        }\n      }\n    }\n  }\n","date":"2019-06-08 01:44:11","endLine":423,"groupId":"5446","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"queueRemovalAndDispatchingConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/65/92dce3696532298ef3a54c73ddffa1d198ea65.src","preCode":"  public void queueRemovalAndDispatchingConcurrently() throws Exception {\n    HAContainerWrapper haContainerWrapper = (HAContainerWrapper) ccn.getHaContainer();\n\n    List<HARegionQueue> regionQueues = new ArrayList<>();\n\n    for (int i = 0; i < 2; ++i) {\n      HARegion haRegion = createMockHARegion();\n\n      regionQueues.add(createHARegionQueue(haContainerWrapper, i, haRegion, false));\n    }\n\n    ExecutorService service = Executors.newFixedThreadPool(2);\n\n    List<Callable<Object>> callables = new ArrayList<>();\n\n    for (int i = 0; i < 10000; ++i) {\n      callables.clear();\n\n      EventID eventID = new EventID(new byte[] {1}, 1, i);\n\n      ClientUpdateMessage message = new ClientUpdateMessageImpl(EnumListenerEvent.AFTER_UPDATE,\n          (LocalRegion) dataRegion, \"key\", \"value\".getBytes(), (byte) 0x01, null,\n          new ClientProxyMembershipID(), eventID);\n\n      HAEventWrapper wrapper = new HAEventWrapper(message);\n      wrapper.setHAContainer(haContainerWrapper);\n      wrapper.incrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        queue.put(wrapper);\n      }\n\n      wrapper.decrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.peek();\n            queue.remove();\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.removeDispatchedEvents(eventID);\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n      }\n\n      \r\n      List<Future<Object>> futures = service.invokeAll(callables, 10, TimeUnit.SECONDS);\n\n      for (Future<Object> future : futures) {\n        try {\n          future.get();\n        } catch (Exception ex) {\n          throw new TestException(\n              \"Exception thrown while executing regionQueue methods concurrently on iteration: \"\n                  + i,\n              ex);\n        }\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"M"},{"authorDate":"2019-06-08 01:44:11","commitOrder":4,"curCode":"  private void createAndPutHARegionQueuesSequentially(HAContainerWrapper haContainerWrapper,\n      HAEventWrapper haEventWrapper, int numQueues) throws Exception {\n    ArrayList<HARegionQueue> queues = new ArrayList<>();\n\n    \r\n    for (int i = 0; i < numQueues; i++) {\n      queues.add(createHARegionQueue(haContainerWrapper, i));\n    }\n\n    haEventWrapper.incrementPutInProgressCounter(\"test\");\n\n    for (HARegionQueue queue : queues) {\n      queue.put(haEventWrapper);\n    }\n\n    haEventWrapper.decrementPutInProgressCounter();\n  }\n","date":"2019-06-08 01:44:11","endLine":792,"groupId":"29423","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createAndPutHARegionQueuesSequentially","params":"(HAContainerWrapperhaContainerWrapper@HAEventWrapperhaEventWrapper@intnumQueues)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/65/92dce3696532298ef3a54c73ddffa1d198ea65.src","preCode":"  private void createAndPutHARegionQueuesSequentially(HAContainerWrapper haContainerWrapper,\n      HAEventWrapper haEventWrapper, int numQueues) throws Exception {\n    ArrayList<HARegionQueue> queues = new ArrayList<>();\n\n    \r\n    for (int i = 0; i < numQueues; i++) {\n      queues.add(createHARegionQueue(haContainerWrapper, i));\n    }\n\n    haEventWrapper.incrementPutInProgressCounter();\n\n    for (HARegionQueue queue : queues) {\n      queue.put(haEventWrapper);\n    }\n\n    haEventWrapper.decrementPutInProgressCounter();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":776,"status":"M"}],"commitId":"13b235efe5ddb52040dab4b77a8d97eac8015795","commitMessage":"@@@GEODE-6845: Consistent logging when incrementing putInProgress (#3686)\n\n","date":"2019-06-08 01:44:11","modifiedFileCount":"6","status":"M","submitter":"Ryan McMahon"},{"authorTime":"2020-04-25 00:20:21","codes":[{"authorDate":"2020-04-25 00:20:21","commitOrder":5,"curCode":"  public void queueRemovalAndDispatchingConcurrently() throws Exception {\n    HAContainerWrapper haContainerWrapper = (HAContainerWrapper) ccn.getHaContainer();\n\n    List<HARegionQueue> regionQueues = new ArrayList<>();\n    for (int i = 0; i < 2; ++i) {\n      HARegion haRegion = createMockHARegion();\n\n      regionQueues.add(createHARegionQueue(haContainerWrapper, i, haRegion, false));\n    }\n\n    for (int i = 0; i < 10000; ++i) {\n      EventID eventID = new EventID(new byte[] {1}, 1, i);\n\n      ClientUpdateMessage message = new ClientUpdateMessageImpl(EnumListenerEvent.AFTER_UPDATE,\n          (LocalRegion) dataRegion, \"key\", \"value\".getBytes(), (byte) 0x01, null,\n          new ClientProxyMembershipID(), eventID);\n\n      HAEventWrapper wrapper = new HAEventWrapper(message);\n      wrapper.setHAContainer(haContainerWrapper);\n      wrapper.incrementPutInProgressCounter(\"test\");\n\n      for (HARegionQueue queue : regionQueues) {\n        queue.put(wrapper);\n      }\n\n      wrapper.decrementPutInProgressCounter();\n\n      List<Future<Void>> futures = new ArrayList<>();\n      for (HARegionQueue queue : regionQueues) {\n        futures.add(executorServiceRule.submit(() -> {\n          queue.peek();\n          queue.remove();\n        }));\n\n        futures.add(executorServiceRule.submit(() -> {\n          queue.removeDispatchedEvents(eventID);\n        }));\n      }\n\n      for (Future<Void> future : futures) {\n        future.get(getTimeout().toMillis(), MILLISECONDS);\n      }\n    }\n  }\n","date":"2020-04-25 00:20:21","endLine":343,"groupId":"104046","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"queueRemovalAndDispatchingConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/47/78608c6fdfe14806a0b76e91c62a288b71148e.src","preCode":"  public void queueRemovalAndDispatchingConcurrently() throws Exception {\n    HAContainerWrapper haContainerWrapper = (HAContainerWrapper) ccn.getHaContainer();\n\n    List<HARegionQueue> regionQueues = new ArrayList<>();\n\n    for (int i = 0; i < 2; ++i) {\n      HARegion haRegion = createMockHARegion();\n\n      regionQueues.add(createHARegionQueue(haContainerWrapper, i, haRegion, false));\n    }\n\n    ExecutorService service = Executors.newFixedThreadPool(2);\n\n    List<Callable<Object>> callables = new ArrayList<>();\n\n    for (int i = 0; i < 10000; ++i) {\n      callables.clear();\n\n      EventID eventID = new EventID(new byte[] {1}, 1, i);\n\n      ClientUpdateMessage message = new ClientUpdateMessageImpl(EnumListenerEvent.AFTER_UPDATE,\n          (LocalRegion) dataRegion, \"key\", \"value\".getBytes(), (byte) 0x01, null,\n          new ClientProxyMembershipID(), eventID);\n\n      HAEventWrapper wrapper = new HAEventWrapper(message);\n      wrapper.setHAContainer(haContainerWrapper);\n      wrapper.incrementPutInProgressCounter(\"test\");\n\n      for (HARegionQueue queue : regionQueues) {\n        queue.put(wrapper);\n      }\n\n      wrapper.decrementPutInProgressCounter();\n\n      for (HARegionQueue queue : regionQueues) {\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.peek();\n            queue.remove();\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n\n        callables.add(Executors.callable(() -> {\n          try {\n            queue.removeDispatchedEvents(eventID);\n          } catch (Exception ex) {\n            throw new RuntimeException(ex);\n          }\n        }));\n      }\n\n      \r\n      List<Future<Object>> futures = service.invokeAll(callables, 10, TimeUnit.SECONDS);\n\n      for (Future<Object> future : futures) {\n        try {\n          future.get();\n        } catch (Exception ex) {\n          throw new TestException(\n              \"Exception thrown while executing regionQueue methods concurrently on iteration: \"\n                  + i,\n              ex);\n        }\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"},{"authorDate":"2020-04-25 00:20:21","commitOrder":5,"curCode":"  private void createAndPutHARegionQueuesSequentially(HAContainerWrapper haContainerWrapper,\n      HAEventWrapper haEventWrapper, int numQueues)\n      throws InterruptedException, IOException, ClassNotFoundException {\n    Collection<HARegionQueue> queues = new ArrayList<>();\n\n    \r\n    for (int i = 0; i < numQueues; i++) {\n      queues.add(createHARegionQueue(haContainerWrapper, i));\n    }\n\n    haEventWrapper.incrementPutInProgressCounter(\"test\");\n\n    for (HARegionQueue queue : queues) {\n      queue.put(haEventWrapper);\n    }\n\n    haEventWrapper.decrementPutInProgressCounter();\n  }\n","date":"2020-04-25 00:20:21","endLine":712,"groupId":"104046","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createAndPutHARegionQueuesSequentially","params":"(HAContainerWrapperhaContainerWrapper@HAEventWrapperhaEventWrapper@intnumQueues)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/47/78608c6fdfe14806a0b76e91c62a288b71148e.src","preCode":"  private void createAndPutHARegionQueuesSequentially(HAContainerWrapper haContainerWrapper,\n      HAEventWrapper haEventWrapper, int numQueues) throws Exception {\n    ArrayList<HARegionQueue> queues = new ArrayList<>();\n\n    \r\n    for (int i = 0; i < numQueues; i++) {\n      queues.add(createHARegionQueue(haContainerWrapper, i));\n    }\n\n    haEventWrapper.incrementPutInProgressCounter(\"test\");\n\n    for (HARegionQueue queue : queues) {\n      queue.put(haEventWrapper);\n    }\n\n    haEventWrapper.decrementPutInProgressCounter();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":695,"status":"M"}],"commitId":"0a1701e92dc09bcd6b79edd3b52f20ee9e9a867c","commitMessage":"@@@GEODE-7964: Upgrade Mockito to 3.3.3 (#4924)\n\n","date":"2020-04-25 00:20:21","modifiedFileCount":"34","status":"M","submitter":"Kirk Lund"}]
