[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void startServerWorksWithNoOptions() throws Exception {\n    commandRule.executeCommandWithInstance(spy, \"start server\");\n\n    ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass(Properties.class);\n    verify(spy).createStartServerCommandLine(any(), any(), any(), gemfirePropertiesCaptor.capture(),\n        any(), any(), any(), any(), any(), any());\n\n    Properties gemfireProperties = gemfirePropertiesCaptor.getValue();\n    assertThat(gemfireProperties).containsKey(USE_CLUSTER_CONFIGURATION);\n    assertThat(gemfireProperties.get(USE_CLUSTER_CONFIGURATION)).isEqualTo(\"true\");\n  }\n","date":"2018-07-18 03:54:18","endLine":63,"groupId":"49198","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startServerWorksWithNoOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/82/a7f80b691d4b83ac9ec6692b9ad7eb0d4431fe.src","preCode":"  public void startServerWorksWithNoOptions() throws Exception {\n    commandRule.executeCommandWithInstance(spy, \"start server\");\n\n    ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass(Properties.class);\n    verify(spy).createStartServerCommandLine(any(), any(), any(), gemfirePropertiesCaptor.capture(),\n        any(), any(), any(), any(), any(), any());\n\n    Properties gemfireProperties = gemfirePropertiesCaptor.getValue();\n    assertThat(gemfireProperties).containsKey(USE_CLUSTER_CONFIGURATION);\n    assertThat(gemfireProperties.get(USE_CLUSTER_CONFIGURATION)).isEqualTo(\"true\");\n  }\n","realPath":"geode-assembly/src/integrationTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void startLocatorRespectsJmxManagerHostnameForClients() throws Exception {\n    String startLocatorCommand = new CommandStringBuilder(\"start locator\")\n        .addOption(JMX_MANAGER_HOSTNAME_FOR_CLIENTS, FAKE_HOSTNAME).toString();\n\n    commandRule.executeCommandWithInstance(spy, startLocatorCommand);\n\n    ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass(Properties.class);\n    verify(spy).createStartLocatorCommandLine(any(), any(), any(),\n        gemfirePropertiesCaptor.capture(), any(), any(), any(), any(), any());\n\n    Properties gemfireProperties = gemfirePropertiesCaptor.getValue();\n    assertThat(gemfireProperties).containsKey(JMX_MANAGER_HOSTNAME_FOR_CLIENTS);\n    assertThat(gemfireProperties.get(JMX_MANAGER_HOSTNAME_FOR_CLIENTS)).isEqualTo(FAKE_HOSTNAME);\n  }\n","date":"2018-07-18 03:54:18","endLine":79,"groupId":"49198","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"startLocatorRespectsJmxManagerHostnameForClients","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/64/88da133940d387fbe580f5ab63f7d5c443c6d8.src","preCode":"  public void startLocatorRespectsJmxManagerHostnameForClients() throws Exception {\n    String startLocatorCommand = new CommandStringBuilder(\"start locator\")\n        .addOption(JMX_MANAGER_HOSTNAME_FOR_CLIENTS, FAKE_HOSTNAME).toString();\n\n    commandRule.executeCommandWithInstance(spy, startLocatorCommand);\n\n    ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass(Properties.class);\n    verify(spy).createStartLocatorCommandLine(any(), any(), any(),\n        gemfirePropertiesCaptor.capture(), any(), any(), any(), any(), any());\n\n    Properties gemfireProperties = gemfirePropertiesCaptor.getValue();\n    assertThat(gemfireProperties).containsKey(JMX_MANAGER_HOSTNAME_FOR_CLIENTS);\n    assertThat(gemfireProperties.get(JMX_MANAGER_HOSTNAME_FOR_CLIENTS)).isEqualTo(FAKE_HOSTNAME);\n  }\n","realPath":"geode-assembly/src/integrationTest/java/org/apache/geode/management/internal/cli/commands/StartLocatorCommandIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2019-05-02 08:29:53","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public void startServerWorksWithNoOptions() throws Exception {\n    commandRule.executeCommandWithInstance(spy, \"start server\");\n\n    ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass(Properties.class);\n    verify(spy).createStartServerCommandLine(any(), any(), any(), gemfirePropertiesCaptor.capture(),\n        any(), any(), any(), any(), any(), any());\n\n    Properties gemfireProperties = gemfirePropertiesCaptor.getValue();\n    assertThat(gemfireProperties).containsKey(USE_CLUSTER_CONFIGURATION);\n    assertThat(gemfireProperties.get(USE_CLUSTER_CONFIGURATION)).isEqualTo(\"true\");\n  }\n","date":"2018-07-18 03:54:18","endLine":63,"groupId":"49198","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startServerWorksWithNoOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/82/a7f80b691d4b83ac9ec6692b9ad7eb0d4431fe.src","preCode":"  public void startServerWorksWithNoOptions() throws Exception {\n    commandRule.executeCommandWithInstance(spy, \"start server\");\n\n    ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass(Properties.class);\n    verify(spy).createStartServerCommandLine(any(), any(), any(), gemfirePropertiesCaptor.capture(),\n        any(), any(), any(), any(), any(), any());\n\n    Properties gemfireProperties = gemfirePropertiesCaptor.getValue();\n    assertThat(gemfireProperties).containsKey(USE_CLUSTER_CONFIGURATION);\n    assertThat(gemfireProperties.get(USE_CLUSTER_CONFIGURATION)).isEqualTo(\"true\");\n  }\n","realPath":"geode-assembly/src/integrationTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2019-05-02 08:29:53","commitOrder":2,"curCode":"  public void startLocatorRespectsJmxManagerHostnameForClients() throws Exception {\n    String startLocatorCommand = new CommandStringBuilder(\"start locator\")\n        .addOption(JMX_MANAGER_HOSTNAME_FOR_CLIENTS, FAKE_HOSTNAME).toString();\n\n    commandRule.executeAndAssertThat(spy, startLocatorCommand);\n\n    ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass(Properties.class);\n    verify(spy).createStartLocatorCommandLine(any(), any(), any(),\n        gemfirePropertiesCaptor.capture(), any(), any(), any(), any(), any());\n\n    Properties gemfireProperties = gemfirePropertiesCaptor.getValue();\n    assertThat(gemfireProperties).containsKey(JMX_MANAGER_HOSTNAME_FOR_CLIENTS);\n    assertThat(gemfireProperties.get(JMX_MANAGER_HOSTNAME_FOR_CLIENTS)).isEqualTo(FAKE_HOSTNAME);\n  }\n","date":"2019-05-02 08:29:53","endLine":79,"groupId":"49198","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"startLocatorRespectsJmxManagerHostnameForClients","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/78/18c0e7540a3a0ddde131c97477f1835bcf6349.src","preCode":"  public void startLocatorRespectsJmxManagerHostnameForClients() throws Exception {\n    String startLocatorCommand = new CommandStringBuilder(\"start locator\")\n        .addOption(JMX_MANAGER_HOSTNAME_FOR_CLIENTS, FAKE_HOSTNAME).toString();\n\n    commandRule.executeCommandWithInstance(spy, startLocatorCommand);\n\n    ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass(Properties.class);\n    verify(spy).createStartLocatorCommandLine(any(), any(), any(),\n        gemfirePropertiesCaptor.capture(), any(), any(), any(), any(), any());\n\n    Properties gemfireProperties = gemfirePropertiesCaptor.getValue();\n    assertThat(gemfireProperties).containsKey(JMX_MANAGER_HOSTNAME_FOR_CLIENTS);\n    assertThat(gemfireProperties.get(JMX_MANAGER_HOSTNAME_FOR_CLIENTS)).isEqualTo(FAKE_HOSTNAME);\n  }\n","realPath":"geode-assembly/src/integrationTest/java/org/apache/geode/management/internal/cli/commands/StartLocatorCommandIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"7c71c22fd2bcdf877867e712931ee49cbcea119e","commitMessage":"@@@GEODE-6721: use ip for bind-address instead of the canonical name of ? (#3521)\n\n* GEODE-6721: use ip for bind-address instead of the canonical name of the host\n\nCo-authored-by: Owen Nichols <onichols@pivotal.io>","date":"2019-05-02 08:29:53","modifiedFileCount":"2","status":"M","submitter":"jinmeiliao"},{"authorTime":"2019-05-02 08:29:53","codes":[{"authorDate":"2019-05-22 23:57:46","commitOrder":3,"curCode":"  public void startServerWorksWithNoOptions() throws Exception {\n    commandRule.executeAndAssertThat(spy, \"start server\");\n\n    ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass(Properties.class);\n    verify(spy).createStartServerCommandLine(any(), any(), any(), gemfirePropertiesCaptor.capture(),\n        any(), any(), any(), any(), any(), any());\n\n    Properties gemfireProperties = gemfirePropertiesCaptor.getValue();\n    assertThat(gemfireProperties).containsKey(USE_CLUSTER_CONFIGURATION);\n    assertThat(gemfireProperties.get(USE_CLUSTER_CONFIGURATION)).isEqualTo(\"true\");\n  }\n","date":"2019-05-22 23:57:46","endLine":62,"groupId":"101010","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"startServerWorksWithNoOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7f/6271e6fbb885c4ce5fe3c89a6fd27fdda25b22.src","preCode":"  public void startServerWorksWithNoOptions() throws Exception {\n    commandRule.executeCommandWithInstance(spy, \"start server\");\n\n    ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass(Properties.class);\n    verify(spy).createStartServerCommandLine(any(), any(), any(), gemfirePropertiesCaptor.capture(),\n        any(), any(), any(), any(), any(), any());\n\n    Properties gemfireProperties = gemfirePropertiesCaptor.getValue();\n    assertThat(gemfireProperties).containsKey(USE_CLUSTER_CONFIGURATION);\n    assertThat(gemfireProperties.get(USE_CLUSTER_CONFIGURATION)).isEqualTo(\"true\");\n  }\n","realPath":"geode-assembly/src/integrationTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2019-05-02 08:29:53","commitOrder":3,"curCode":"  public void startLocatorRespectsJmxManagerHostnameForClients() throws Exception {\n    String startLocatorCommand = new CommandStringBuilder(\"start locator\")\n        .addOption(JMX_MANAGER_HOSTNAME_FOR_CLIENTS, FAKE_HOSTNAME).toString();\n\n    commandRule.executeAndAssertThat(spy, startLocatorCommand);\n\n    ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass(Properties.class);\n    verify(spy).createStartLocatorCommandLine(any(), any(), any(),\n        gemfirePropertiesCaptor.capture(), any(), any(), any(), any(), any());\n\n    Properties gemfireProperties = gemfirePropertiesCaptor.getValue();\n    assertThat(gemfireProperties).containsKey(JMX_MANAGER_HOSTNAME_FOR_CLIENTS);\n    assertThat(gemfireProperties.get(JMX_MANAGER_HOSTNAME_FOR_CLIENTS)).isEqualTo(FAKE_HOSTNAME);\n  }\n","date":"2019-05-02 08:29:53","endLine":79,"groupId":"101010","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"startLocatorRespectsJmxManagerHostnameForClients","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/78/18c0e7540a3a0ddde131c97477f1835bcf6349.src","preCode":"  public void startLocatorRespectsJmxManagerHostnameForClients() throws Exception {\n    String startLocatorCommand = new CommandStringBuilder(\"start locator\")\n        .addOption(JMX_MANAGER_HOSTNAME_FOR_CLIENTS, FAKE_HOSTNAME).toString();\n\n    commandRule.executeAndAssertThat(spy, startLocatorCommand);\n\n    ArgumentCaptor<Properties> gemfirePropertiesCaptor = ArgumentCaptor.forClass(Properties.class);\n    verify(spy).createStartLocatorCommandLine(any(), any(), any(),\n        gemfirePropertiesCaptor.capture(), any(), any(), any(), any(), any());\n\n    Properties gemfireProperties = gemfirePropertiesCaptor.getValue();\n    assertThat(gemfireProperties).containsKey(JMX_MANAGER_HOSTNAME_FOR_CLIENTS);\n    assertThat(gemfireProperties.get(JMX_MANAGER_HOSTNAME_FOR_CLIENTS)).isEqualTo(FAKE_HOSTNAME);\n  }\n","realPath":"geode-assembly/src/integrationTest/java/org/apache/geode/management/internal/cli/commands/StartLocatorCommandIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"0430a538f133ea9f450234256f980fcba9356e1c","commitMessage":"@@@GEODE-5731: Add tests for hostname-for-clients\n\n- Fixed minor warnings.\n- Added some tests to check that the `hostname-for-clients` flag is\n  propagated across the stack while starting locators and servers.\n- Replaced usage of class `org.apache.geode.internal.lang.StringUtils`\n  (deprecated) by `org.apache.commons.lang3.StringUtils`.","date":"2019-05-22 23:57:46","modifiedFileCount":"6","status":"M","submitter":"Juan Jos? Ramos"}]
