[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testAsyncIndexUpdaterThreadShutdownForRR() {\n    Cache cache = new CacheFactory().set(MCAST_PORT, \"0\").create();\n\n    RegionFactory rf = cache.createRegionFactory(RegionShortcut.REPLICATE);\n    rf.setIndexMaintenanceSynchronous(false);\n    Region localRegion = rf.create(name);\n\n    assertNotNull(\"Region ref null\", localRegion);\n\n    try {\n      cache.getQueryService().createIndex(\"idIndex\", \"ID\", \"/\" + name);\n    } catch (Exception e) {\n      cache.close();\n      e.printStackTrace();\n      fail(\"Index creation failed\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      localRegion.put(i, new Portfolio(i));\n    }\n\n    GemFireCacheImpl internalCache = (GemFireCacheImpl) cache;\n    \r\n    internalCache.close(\"Normal disconnect\", null, false, false);\n\n    \r\n    ThreadGroup indexUpdaterThreadGroup =\n        LoggingThreadGroup.getThreadGroup(\"QueryMonitor Thread Group\");\n\n    assertEquals(0, indexUpdaterThreadGroup.activeCount());\n\n    internalCache.getSystem().disconnect();\n\n  }\n","date":"2018-07-18 03:54:18","endLine":83,"groupId":"8488","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAsyncIndexUpdaterThreadShutdownForRR","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/39/4633bd61c428491b953599c5f1a6d4c6641f0a.src","preCode":"  public void testAsyncIndexUpdaterThreadShutdownForRR() {\n    Cache cache = new CacheFactory().set(MCAST_PORT, \"0\").create();\n\n    RegionFactory rf = cache.createRegionFactory(RegionShortcut.REPLICATE);\n    rf.setIndexMaintenanceSynchronous(false);\n    Region localRegion = rf.create(name);\n\n    assertNotNull(\"Region ref null\", localRegion);\n\n    try {\n      cache.getQueryService().createIndex(\"idIndex\", \"ID\", \"/\" + name);\n    } catch (Exception e) {\n      cache.close();\n      e.printStackTrace();\n      fail(\"Index creation failed\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      localRegion.put(i, new Portfolio(i));\n    }\n\n    GemFireCacheImpl internalCache = (GemFireCacheImpl) cache;\n    \r\n    internalCache.close(\"Normal disconnect\", null, false, false);\n\n    \r\n    ThreadGroup indexUpdaterThreadGroup =\n        LoggingThreadGroup.getThreadGroup(\"QueryMonitor Thread Group\");\n\n    assertEquals(0, indexUpdaterThreadGroup.activeCount());\n\n    internalCache.getSystem().disconnect();\n\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsyncIndexUpdaterThreadShutdownJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testAsyncIndexUpdaterThreadShutdownForPR() {\n    Cache cache = new CacheFactory().set(MCAST_PORT, \"0\").create();\n\n    RegionFactory rf = cache.createRegionFactory(RegionShortcut.PARTITION);\n    rf.setIndexMaintenanceSynchronous(false);\n    Region localRegion = rf.create(name);\n\n    assertNotNull(\"Region ref null\", localRegion);\n\n    try {\n      cache.getQueryService().createIndex(\"idIndex\", \"ID\", \"/\" + name);\n    } catch (Exception e) {\n      cache.close();\n      e.printStackTrace();\n      fail(\"Index creation failed\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      localRegion.put(i, new Portfolio(i));\n    }\n\n    GemFireCacheImpl internalCache = (GemFireCacheImpl) cache;\n    \r\n    internalCache.close(\"Normal disconnect\", null, false, false);\n\n    \r\n    ThreadGroup indexUpdaterThreadGroup =\n        LoggingThreadGroup.getThreadGroup(\"QueryMonitor Thread Group\");\n\n    assertEquals(0, indexUpdaterThreadGroup.activeCount());\n\n    internalCache.getSystem().disconnect();\n  }\n","date":"2018-07-18 03:54:18","endLine":118,"groupId":"8488","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsyncIndexUpdaterThreadShutdownForPR","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/39/4633bd61c428491b953599c5f1a6d4c6641f0a.src","preCode":"  public void testAsyncIndexUpdaterThreadShutdownForPR() {\n    Cache cache = new CacheFactory().set(MCAST_PORT, \"0\").create();\n\n    RegionFactory rf = cache.createRegionFactory(RegionShortcut.PARTITION);\n    rf.setIndexMaintenanceSynchronous(false);\n    Region localRegion = rf.create(name);\n\n    assertNotNull(\"Region ref null\", localRegion);\n\n    try {\n      cache.getQueryService().createIndex(\"idIndex\", \"ID\", \"/\" + name);\n    } catch (Exception e) {\n      cache.close();\n      e.printStackTrace();\n      fail(\"Index creation failed\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      localRegion.put(i, new Portfolio(i));\n    }\n\n    GemFireCacheImpl internalCache = (GemFireCacheImpl) cache;\n    \r\n    internalCache.close(\"Normal disconnect\", null, false, false);\n\n    \r\n    ThreadGroup indexUpdaterThreadGroup =\n        LoggingThreadGroup.getThreadGroup(\"QueryMonitor Thread Group\");\n\n    assertEquals(0, indexUpdaterThreadGroup.activeCount());\n\n    internalCache.getSystem().disconnect();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsyncIndexUpdaterThreadShutdownJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-10-06 03:22:52","codes":[{"authorDate":"2018-10-06 03:22:52","commitOrder":2,"curCode":"  public void testAsyncIndexUpdaterThreadShutdownForRR() {\n    Cache cache = new CacheFactory().set(MCAST_PORT, \"0\").create();\n\n    RegionFactory rf = cache.createRegionFactory(RegionShortcut.REPLICATE);\n    rf.setIndexMaintenanceSynchronous(false);\n    Region localRegion = rf.create(name);\n\n    assertNotNull(\"Region ref null\", localRegion);\n\n    try {\n      cache.getQueryService().createIndex(\"idIndex\", \"ID\", \"/\" + name);\n    } catch (Exception e) {\n      cache.close();\n      e.printStackTrace();\n      fail(\"Index creation failed\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      localRegion.put(i, new Portfolio(i));\n    }\n\n    InternalRegion internalRegion = (InternalRegion) localRegion;\n    assertTrue(internalRegion.getIndexManager().getUpdaterThread().isAlive());\n\n    localRegion.close();\n\n    assertFalse(internalRegion.getIndexManager().getUpdaterThread().isAlive());\n\n    cache.close();\n  }\n","date":"2018-10-06 03:22:52","endLine":83,"groupId":"8488","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAsyncIndexUpdaterThreadShutdownForRR","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/860e91b97f91c8e546c56d50bdbaade26f53e7.src","preCode":"  public void testAsyncIndexUpdaterThreadShutdownForRR() {\n    Cache cache = new CacheFactory().set(MCAST_PORT, \"0\").create();\n\n    RegionFactory rf = cache.createRegionFactory(RegionShortcut.REPLICATE);\n    rf.setIndexMaintenanceSynchronous(false);\n    Region localRegion = rf.create(name);\n\n    assertNotNull(\"Region ref null\", localRegion);\n\n    try {\n      cache.getQueryService().createIndex(\"idIndex\", \"ID\", \"/\" + name);\n    } catch (Exception e) {\n      cache.close();\n      e.printStackTrace();\n      fail(\"Index creation failed\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      localRegion.put(i, new Portfolio(i));\n    }\n\n    GemFireCacheImpl internalCache = (GemFireCacheImpl) cache;\n    \r\n    internalCache.close(\"Normal disconnect\", null, false, false);\n\n    \r\n    ThreadGroup indexUpdaterThreadGroup =\n        LoggingThreadGroup.getThreadGroup(\"QueryMonitor Thread Group\");\n\n    assertEquals(0, indexUpdaterThreadGroup.activeCount());\n\n    internalCache.getSystem().disconnect();\n\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsyncIndexUpdaterThreadShutdownJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2018-10-06 03:22:52","commitOrder":2,"curCode":"  public void testAsyncIndexUpdaterThreadShutdownForPR() {\n    Cache cache = new CacheFactory().set(MCAST_PORT, \"0\").create();\n\n    RegionFactory rf = cache.createRegionFactory(RegionShortcut.PARTITION);\n    rf.setIndexMaintenanceSynchronous(false);\n    Region localRegion = rf.create(name);\n\n    assertNotNull(\"Region ref null\", localRegion);\n\n    try {\n      cache.getQueryService().createIndex(\"idIndex\", \"ID\", \"/\" + name);\n    } catch (Exception e) {\n      cache.close();\n      e.printStackTrace();\n      fail(\"Index creation failed\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      localRegion.put(i, new Portfolio(i));\n    }\n\n    InternalRegion internalRegion = (InternalRegion) localRegion;\n    assertTrue(internalRegion.getIndexManager().getUpdaterThread().isAlive());\n\n    PartitionedRegion pr = (PartitionedRegion) localRegion;\n    HashSet<BucketRegion> buckets = new HashSet<>(pr.getDataStore().getAllLocalBucketRegions());\n    for (BucketRegion br : buckets) {\n      assertTrue(br.getIndexManager().getUpdaterThread().isAlive());\n    }\n\n    localRegion.close();\n\n    assertFalse(internalRegion.getIndexManager().getUpdaterThread().isAlive());\n    for (BucketRegion br : buckets) {\n      assertFalse(br.getIndexManager().getUpdaterThread().isAlive());\n    }\n\n    cache.close();\n  }\n","date":"2018-10-06 03:22:52","endLine":124,"groupId":"8488","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsyncIndexUpdaterThreadShutdownForPR","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/860e91b97f91c8e546c56d50bdbaade26f53e7.src","preCode":"  public void testAsyncIndexUpdaterThreadShutdownForPR() {\n    Cache cache = new CacheFactory().set(MCAST_PORT, \"0\").create();\n\n    RegionFactory rf = cache.createRegionFactory(RegionShortcut.PARTITION);\n    rf.setIndexMaintenanceSynchronous(false);\n    Region localRegion = rf.create(name);\n\n    assertNotNull(\"Region ref null\", localRegion);\n\n    try {\n      cache.getQueryService().createIndex(\"idIndex\", \"ID\", \"/\" + name);\n    } catch (Exception e) {\n      cache.close();\n      e.printStackTrace();\n      fail(\"Index creation failed\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      localRegion.put(i, new Portfolio(i));\n    }\n\n    GemFireCacheImpl internalCache = (GemFireCacheImpl) cache;\n    \r\n    internalCache.close(\"Normal disconnect\", null, false, false);\n\n    \r\n    ThreadGroup indexUpdaterThreadGroup =\n        LoggingThreadGroup.getThreadGroup(\"QueryMonitor Thread Group\");\n\n    assertEquals(0, indexUpdaterThreadGroup.activeCount());\n\n    internalCache.getSystem().disconnect();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsyncIndexUpdaterThreadShutdownJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"528960760624672fcbbf36c7e73b93cb224597f9","commitMessage":"@@@GEODE-5780: remove LoggingThreadGroup\n\nGEODE-5783: have a single source for ThreadFactory\n\nLoggingThreadGroup is no longer used and has been removed.\n\nLoggingUnhandledExceptionHandler creates a single handler that logs\nto a static logger. All geode threads should use this singleton.\n\nLoggingThread should be used when creating a Thread.\nIt will automatically set a LoggingUnhandledExceptionHandler on the thread.\n\nLoggingThreadFactory makes it easy to create a ThreadFactory instance that\nuses LoggingThread and gives each thread a unique name.\n\nLoggingExecutors should be used in place of Executors.\nEach executor it creates will have a LoggingThreadFactory.\n\nAll the places geode used Thread.  ThreadGroup.  ThreadFactory.  and Executors have\nbeen changed to use these classes. The only exception is some of the add on modules\n(like redis.  and memcached) were not changed so that they would not use new internal\ngeode APIs.\nThis checkin uses these new classes in every place the previously used\nLoggingThreadGroup. The code should also be reviewed for other places\nwe create Thread or ThreadFactory instances without using the LoggingThreadGroup.\n","date":"2018-10-06 03:22:52","modifiedFileCount":"97","status":"M","submitter":"Darrel Schneider"},{"authorTime":"2020-05-09 09:44:08","codes":[{"authorDate":"2020-05-09 09:44:08","commitOrder":3,"curCode":"  public void testAsyncIndexUpdaterThreadShutdownForRR() {\n    Cache cache = new CacheFactory().set(MCAST_PORT, \"0\").create();\n\n    RegionFactory rf = cache.createRegionFactory(RegionShortcut.REPLICATE);\n    rf.setIndexMaintenanceSynchronous(false);\n    Region localRegion = rf.create(name);\n\n    assertNotNull(\"Region ref null\", localRegion);\n\n    try {\n      cache.getQueryService().createIndex(\"idIndex\", \"ID\", SEPARATOR + name);\n    } catch (Exception e) {\n      cache.close();\n      e.printStackTrace();\n      fail(\"Index creation failed\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      localRegion.put(i, new Portfolio(i));\n    }\n\n    InternalRegion internalRegion = (InternalRegion) localRegion;\n    assertTrue(internalRegion.getIndexManager().getUpdaterThread().isAlive());\n\n    localRegion.close();\n\n    assertFalse(internalRegion.getIndexManager().getUpdaterThread().isAlive());\n\n    cache.close();\n  }\n","date":"2020-05-09 09:44:08","endLine":84,"groupId":"104655","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testAsyncIndexUpdaterThreadShutdownForRR","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/57/3a05e555dbc9e9ac959130add3d7e366dc3efa.src","preCode":"  public void testAsyncIndexUpdaterThreadShutdownForRR() {\n    Cache cache = new CacheFactory().set(MCAST_PORT, \"0\").create();\n\n    RegionFactory rf = cache.createRegionFactory(RegionShortcut.REPLICATE);\n    rf.setIndexMaintenanceSynchronous(false);\n    Region localRegion = rf.create(name);\n\n    assertNotNull(\"Region ref null\", localRegion);\n\n    try {\n      cache.getQueryService().createIndex(\"idIndex\", \"ID\", \"/\" + name);\n    } catch (Exception e) {\n      cache.close();\n      e.printStackTrace();\n      fail(\"Index creation failed\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      localRegion.put(i, new Portfolio(i));\n    }\n\n    InternalRegion internalRegion = (InternalRegion) localRegion;\n    assertTrue(internalRegion.getIndexManager().getUpdaterThread().isAlive());\n\n    localRegion.close();\n\n    assertFalse(internalRegion.getIndexManager().getUpdaterThread().isAlive());\n\n    cache.close();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsyncIndexUpdaterThreadShutdownJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2020-05-09 09:44:08","commitOrder":3,"curCode":"  public void testAsyncIndexUpdaterThreadShutdownForPR() {\n    Cache cache = new CacheFactory().set(MCAST_PORT, \"0\").create();\n\n    RegionFactory rf = cache.createRegionFactory(RegionShortcut.PARTITION);\n    rf.setIndexMaintenanceSynchronous(false);\n    Region localRegion = rf.create(name);\n\n    assertNotNull(\"Region ref null\", localRegion);\n\n    try {\n      cache.getQueryService().createIndex(\"idIndex\", \"ID\", SEPARATOR + name);\n    } catch (Exception e) {\n      cache.close();\n      e.printStackTrace();\n      fail(\"Index creation failed\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      localRegion.put(i, new Portfolio(i));\n    }\n\n    InternalRegion internalRegion = (InternalRegion) localRegion;\n    assertTrue(internalRegion.getIndexManager().getUpdaterThread().isAlive());\n\n    PartitionedRegion pr = (PartitionedRegion) localRegion;\n    HashSet<BucketRegion> buckets = new HashSet<>(pr.getDataStore().getAllLocalBucketRegions());\n    for (BucketRegion br : buckets) {\n      assertTrue(br.getIndexManager().getUpdaterThread().isAlive());\n    }\n\n    localRegion.close();\n\n    assertFalse(internalRegion.getIndexManager().getUpdaterThread().isAlive());\n    for (BucketRegion br : buckets) {\n      assertFalse(br.getIndexManager().getUpdaterThread().isAlive());\n    }\n\n    cache.close();\n  }\n","date":"2020-05-09 09:44:08","endLine":125,"groupId":"104655","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testAsyncIndexUpdaterThreadShutdownForPR","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/57/3a05e555dbc9e9ac959130add3d7e366dc3efa.src","preCode":"  public void testAsyncIndexUpdaterThreadShutdownForPR() {\n    Cache cache = new CacheFactory().set(MCAST_PORT, \"0\").create();\n\n    RegionFactory rf = cache.createRegionFactory(RegionShortcut.PARTITION);\n    rf.setIndexMaintenanceSynchronous(false);\n    Region localRegion = rf.create(name);\n\n    assertNotNull(\"Region ref null\", localRegion);\n\n    try {\n      cache.getQueryService().createIndex(\"idIndex\", \"ID\", \"/\" + name);\n    } catch (Exception e) {\n      cache.close();\n      e.printStackTrace();\n      fail(\"Index creation failed\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      localRegion.put(i, new Portfolio(i));\n    }\n\n    InternalRegion internalRegion = (InternalRegion) localRegion;\n    assertTrue(internalRegion.getIndexManager().getUpdaterThread().isAlive());\n\n    PartitionedRegion pr = (PartitionedRegion) localRegion;\n    HashSet<BucketRegion> buckets = new HashSet<>(pr.getDataStore().getAllLocalBucketRegions());\n    for (BucketRegion br : buckets) {\n      assertTrue(br.getIndexManager().getUpdaterThread().isAlive());\n    }\n\n    localRegion.close();\n\n    assertFalse(internalRegion.getIndexManager().getUpdaterThread().isAlive());\n    for (BucketRegion br : buckets) {\n      assertFalse(br.getIndexManager().getUpdaterThread().isAlive());\n    }\n\n    cache.close();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsyncIndexUpdaterThreadShutdownJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"8f0650e83e22d4c22d9bf9b15beffff0fcb451d2","commitMessage":"@@@GEODE-7864: Replace uses of hardcoded \"/\" with Region.SEPARATOR (#5049)\n\n* GEODE-7864: Replace uses of hardcoded \"/\" with Region.SEPARATOR\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-09 09:44:08","modifiedFileCount":"149","status":"M","submitter":"Donal Evans"}]
