[{"authorTime":"2018-07-31 05:13:36","codes":[{"authorDate":"2018-07-31 05:13:36","commitOrder":1,"curCode":"  private void doTestSubscriptionWithMixedServersAndPeerFeed(String version,\n      boolean usePeerForFeed) {\n    server1 = Host.getHost(0).getVM(testVersion, 2);\n    server2 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 3);\n    VM server3 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 4);\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(version, 1);\n\n    \r\n    int server1Port = initServerCache(true);\n\n    int server2Port = initServerCache2();\n\n    int server3Port = server3.invoke(() -> createServerCache(true, getMaxThreads(), false));\n\n    System.out.println(\"old server is vm 2 and new server is vm 3\");\n    System.out\n        .println(\"old server port is \" + server1Port + \" and new server port is \" + server2Port);\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port, server3Port);\n      populateCache();\n      registerInterest();\n    });\n\n    if (!usePeerForFeed) {\n      feeder.invoke(\"create client cache for feed\", () -> {\n        Pool ignore = createClientCache(hostname, server1Port);\n      });\n    }\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).until(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 2\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(3, seqMap.size()); \r\n      verifier.reset();\n    });\n\n    server2.invoke(\"shutdown new server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server3.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).until(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 3\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(4, seqMap.size()); \r\n    });\n  }\n","date":"2018-07-31 05:13:36","endLine":223,"groupId":"27560","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestSubscriptionWithMixedServersAndPeerFeed","params":"(Stringversion@booleanusePeerForFeed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/7e758205aaec63d4bd151530190feb5ed2e94b.src","preCode":"  private void doTestSubscriptionWithMixedServersAndPeerFeed(String version,\n      boolean usePeerForFeed) {\n    server1 = Host.getHost(0).getVM(testVersion, 2);\n    server2 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 3);\n    VM server3 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 4);\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(version, 1);\n\n    \r\n    int server1Port = initServerCache(true);\n\n    int server2Port = initServerCache2();\n\n    int server3Port = server3.invoke(() -> createServerCache(true, getMaxThreads(), false));\n\n    System.out.println(\"old server is vm 2 and new server is vm 3\");\n    System.out\n        .println(\"old server port is \" + server1Port + \" and new server port is \" + server2Port);\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port, server3Port);\n      populateCache();\n      registerInterest();\n    });\n\n    if (!usePeerForFeed) {\n      feeder.invoke(\"create client cache for feed\", () -> {\n        Pool ignore = createClientCache(hostname, server1Port);\n      });\n    }\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).until(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 2\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(3, seqMap.size()); \r\n      verifier.reset();\n    });\n\n    server2.invoke(\"shutdown new server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server3.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).until(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 3\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(4, seqMap.size()); \r\n    });\n  }\n","realPath":"geode-cq/src/upgradeTest/java/org/apache/geode/internal/cache/tier/sockets/ClientServerMiscBCDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"},{"authorDate":"2018-07-31 05:13:36","commitOrder":1,"curCode":"  public void giiEventQueueShouldSucceedWithMixedVersions(String server1Version,\n      String server2Version) {\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 1);\n    server1 = Host.getHost(0).getVM(server1Version, 2);\n    server2 = Host.getHost(0).getVM(server2Version, 3);\n\n    \r\n    int server1Port = initServerCache(true, server1, true);\n    int server2Port = initServerCache(true, server2, true);\n    server2.invoke(() -> {\n      getCache().getCacheServers().stream().forEach(CacheServer::stop);\n    });\n\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port);\n      registerInterest();\n      registerCQ();\n    });\n\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    server2.invoke(() -> {\n      for (CacheServer server : getCache().getCacheServers()) {\n        server.start();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).until(() -> {\n        final Collection<CacheClientProxy> clientProxies =\n            CacheClientNotifier.getInstance().getClientProxies();\n        assertFalse(clientProxies.isEmpty());\n        CacheClientProxy proxy = clientProxies.iterator().next();\n        assertFalse(proxy.getHARegionQueue().isEmpty());\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n  }\n","date":"2018-07-31 05:13:36","endLine":297,"groupId":"27235","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"giiEventQueueShouldSucceedWithMixedVersions","params":"(Stringserver1Version@Stringserver2Version)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/7e758205aaec63d4bd151530190feb5ed2e94b.src","preCode":"  public void giiEventQueueShouldSucceedWithMixedVersions(String server1Version,\n      String server2Version) {\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 1);\n    server1 = Host.getHost(0).getVM(server1Version, 2);\n    server2 = Host.getHost(0).getVM(server2Version, 3);\n\n    \r\n    int server1Port = initServerCache(true, server1, true);\n    int server2Port = initServerCache(true, server2, true);\n    server2.invoke(() -> {\n      getCache().getCacheServers().stream().forEach(CacheServer::stop);\n    });\n\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port);\n      registerInterest();\n      registerCQ();\n    });\n\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    server2.invoke(() -> {\n      for (CacheServer server : getCache().getCacheServers()) {\n        server.start();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).until(() -> {\n        final Collection<CacheClientProxy> clientProxies =\n            CacheClientNotifier.getInstance().getClientProxies();\n        assertFalse(clientProxies.isEmpty());\n        CacheClientProxy proxy = clientProxies.iterator().next();\n        assertFalse(proxy.getHARegionQueue().isEmpty());\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n  }\n","realPath":"geode-cq/src/upgradeTest/java/org/apache/geode/internal/cache/tier/sockets/ClientServerMiscBCDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"}],"commitId":"ee29dc62d15f6cdba452026dc41a3b71e02e2b97","commitMessage":"@@@GEODE-5490: Moves backwards compatibility tests in to upgradeTest. (#2221)\n\n* Split up TomcatSessionBackwardsCompatibilityTest\n* Split up TxCommitMessageBackwardsCompatibilityDUnitTest\n","date":"2018-07-31 05:13:36","modifiedFileCount":"0","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-08-17 08:13:57","codes":[{"authorDate":"2018-08-17 08:13:57","commitOrder":2,"curCode":"  private void doTestSubscriptionWithMixedServersAndPeerFeed(String version,\n      boolean usePeerForFeed) {\n    server1 = Host.getHost(0).getVM(testVersion, 2);\n    server2 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 3);\n    VM server3 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 4);\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(version, 1);\n\n    \r\n    int server1Port = initServerCache(true);\n\n    int server2Port = initServerCache2();\n\n    int server3Port = server3.invoke(() -> createServerCache(true, getMaxThreads(), false));\n\n    System.out.println(\"old server is vm 2 and new server is vm 3\");\n    System.out\n        .println(\"old server port is \" + server1Port + \" and new server port is \" + server2Port);\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port, server3Port);\n      populateCache();\n      registerInterest();\n    });\n\n    if (!usePeerForFeed) {\n      feeder.invoke(\"create client cache for feed\", () -> {\n        Pool ignore = createClientCache(hostname, server1Port);\n      });\n    }\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).untilAsserted(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 2\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(3, seqMap.size()); \r\n      verifier.reset();\n    });\n\n    server2.invoke(\"shutdown new server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server3.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).untilAsserted(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 3\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(4, seqMap.size()); \r\n    });\n  }\n","date":"2018-08-18 01:08:42","endLine":223,"groupId":"27560","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestSubscriptionWithMixedServersAndPeerFeed","params":"(Stringversion@booleanusePeerForFeed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/9b/f906ae413b415bce4cad8a6181eaf6221cc138.src","preCode":"  private void doTestSubscriptionWithMixedServersAndPeerFeed(String version,\n      boolean usePeerForFeed) {\n    server1 = Host.getHost(0).getVM(testVersion, 2);\n    server2 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 3);\n    VM server3 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 4);\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(version, 1);\n\n    \r\n    int server1Port = initServerCache(true);\n\n    int server2Port = initServerCache2();\n\n    int server3Port = server3.invoke(() -> createServerCache(true, getMaxThreads(), false));\n\n    System.out.println(\"old server is vm 2 and new server is vm 3\");\n    System.out\n        .println(\"old server port is \" + server1Port + \" and new server port is \" + server2Port);\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port, server3Port);\n      populateCache();\n      registerInterest();\n    });\n\n    if (!usePeerForFeed) {\n      feeder.invoke(\"create client cache for feed\", () -> {\n        Pool ignore = createClientCache(hostname, server1Port);\n      });\n    }\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).until(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 2\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(3, seqMap.size()); \r\n      verifier.reset();\n    });\n\n    server2.invoke(\"shutdown new server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server3.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).until(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 3\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(4, seqMap.size()); \r\n    });\n  }\n","realPath":"geode-cq/src/upgradeTest/java/org/apache/geode/internal/cache/tier/sockets/ClientServerMiscBCDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2018-08-17 08:13:57","commitOrder":2,"curCode":"  public void giiEventQueueShouldSucceedWithMixedVersions(String server1Version,\n      String server2Version) {\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 1);\n    server1 = Host.getHost(0).getVM(server1Version, 2);\n    server2 = Host.getHost(0).getVM(server2Version, 3);\n\n    \r\n    int server1Port = initServerCache(true, server1, true);\n    int server2Port = initServerCache(true, server2, true);\n    server2.invoke(() -> {\n      getCache().getCacheServers().stream().forEach(CacheServer::stop);\n    });\n\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port);\n      registerInterest();\n      registerCQ();\n    });\n\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    server2.invoke(() -> {\n      for (CacheServer server : getCache().getCacheServers()) {\n        server.start();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).untilAsserted(() -> {\n        final Collection<CacheClientProxy> clientProxies =\n            CacheClientNotifier.getInstance().getClientProxies();\n        assertFalse(clientProxies.isEmpty());\n        CacheClientProxy proxy = clientProxies.iterator().next();\n        assertFalse(proxy.getHARegionQueue().isEmpty());\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).untilAsserted(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n  }\n","date":"2018-08-18 01:08:42","endLine":297,"groupId":"37797","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"giiEventQueueShouldSucceedWithMixedVersions","params":"(Stringserver1Version@Stringserver2Version)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/9b/f906ae413b415bce4cad8a6181eaf6221cc138.src","preCode":"  public void giiEventQueueShouldSucceedWithMixedVersions(String server1Version,\n      String server2Version) {\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 1);\n    server1 = Host.getHost(0).getVM(server1Version, 2);\n    server2 = Host.getHost(0).getVM(server2Version, 3);\n\n    \r\n    int server1Port = initServerCache(true, server1, true);\n    int server2Port = initServerCache(true, server2, true);\n    server2.invoke(() -> {\n      getCache().getCacheServers().stream().forEach(CacheServer::stop);\n    });\n\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port);\n      registerInterest();\n      registerCQ();\n    });\n\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    server2.invoke(() -> {\n      for (CacheServer server : getCache().getCacheServers()) {\n        server.start();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).until(() -> {\n        final Collection<CacheClientProxy> clientProxies =\n            CacheClientNotifier.getInstance().getClientProxies();\n        assertFalse(clientProxies.isEmpty());\n        CacheClientProxy proxy = clientProxies.iterator().next();\n        assertFalse(proxy.getHARegionQueue().isEmpty());\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n  }\n","realPath":"geode-cq/src/upgradeTest/java/org/apache/geode/internal/cache/tier/sockets/ClientServerMiscBCDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"}],"commitId":"f3f255a234eac78b63dc4932e1d725c20fe75706","commitMessage":"@@@GEODE-5593 Update test dependencies\n\nUpdated the following dependencies:\n\nassertj \t3.8.0 => 3.10.0\nawaitility \t2.0.0 => 3.1.1\nbcel\t\t6.0 => 6.2\ncglib\t\t3.2.4 => 3.2.7\nderby\t\t10.13.1.1 => 10.14.2.0\nhttpclient\t4.5.3 => 4.5.6\nbcel\t\t6.0 => 6.2\ncglib\t\t3.2.4 => 3.2.7\nderby\t\t10.13.1.1 => 10.14.2.0\nhttpclient\t4.5.3 => 4.5.6\nhttpcore\t4.4.6 => 4.4.10\njavax.mail\t1.4.6 => 1.6.1\njavax.persistence 2.1.1 => 2.2.0\njmock\t\t2.8.2 => 2.8.4\njson-path\t2.2.0 => 2.4.0\njunit-quickcheck 0.7 => 0.8.1\nmockito\t\t2.8.9 => 2.19.1\npowermock\t1.7.1 => 2.0.0-beta.5\nselenimum\t3.9.1 => 3.13.0\nsystem-rules\t1.17.1 => 1.18.0\nxerces\t\t2.11.0 => 2.12.0\n\nUpdated some tests due to API changes. Typically this meant\nconverting from until() to untilAsserted().  In other cases\nyou aren't allowed to throw undeclared check exceptions.\n\nUpdated and corrected powermock usage in a few places.\n\nDid not update junit-params since too many places in our\ntests use the test method name for region name (and the\ntest method name would not have been a legal region\nname).  This is an opportunity for future refactoring.\n","date":"2018-08-18 01:08:42","modifiedFileCount":"182","status":"M","submitter":"Anthony Baker"},{"authorTime":"2018-08-25 06:40:56","codes":[{"authorDate":"2018-08-25 06:40:56","commitOrder":3,"curCode":"  private void doTestSubscriptionWithMixedServersAndPeerFeed(String version,\n      boolean usePeerForFeed) {\n    server1 = Host.getHost(0).getVM(testVersion, 2);\n    server2 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 3);\n    VM server3 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 4);\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(version, 1);\n\n    \r\n    int server1Port = initServerCache(true);\n\n    int server2Port = initServerCache2();\n\n    int server3Port = server3.invoke(() -> createServerCache(true, getMaxThreads(), false));\n\n    System.out.println(\"old server is vm 2 and new server is vm 3\");\n    System.out\n        .println(\"old server port is \" + server1Port + \" and new server port is \" + server2Port);\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port, server3Port);\n      populateCache();\n      registerInterest();\n    });\n\n    if (!usePeerForFeed) {\n      feeder.invoke(\"create client cache for feed\", () -> {\n        Pool ignore = createClientCache(hostname, server1Port);\n      });\n    }\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(30, TimeUnit.SECONDS)\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n\n    \r\n    interestClient.invoke(\"verification 2\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(3, seqMap.size()); \r\n      verifier.reset();\n    });\n\n    server2.invoke(\"shutdown new server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server3.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(30, TimeUnit.SECONDS)\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n\n    \r\n    interestClient.invoke(\"verification 3\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(4, seqMap.size()); \r\n    });\n  }\n","date":"2018-08-28 00:48:08","endLine":221,"groupId":"27560","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestSubscriptionWithMixedServersAndPeerFeed","params":"(Stringversion@booleanusePeerForFeed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d8/c43e100afd9366faf78449fe21494a5922c529.src","preCode":"  private void doTestSubscriptionWithMixedServersAndPeerFeed(String version,\n      boolean usePeerForFeed) {\n    server1 = Host.getHost(0).getVM(testVersion, 2);\n    server2 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 3);\n    VM server3 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 4);\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(version, 1);\n\n    \r\n    int server1Port = initServerCache(true);\n\n    int server2Port = initServerCache2();\n\n    int server3Port = server3.invoke(() -> createServerCache(true, getMaxThreads(), false));\n\n    System.out.println(\"old server is vm 2 and new server is vm 3\");\n    System.out\n        .println(\"old server port is \" + server1Port + \" and new server port is \" + server2Port);\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port, server3Port);\n      populateCache();\n      registerInterest();\n    });\n\n    if (!usePeerForFeed) {\n      feeder.invoke(\"create client cache for feed\", () -> {\n        Pool ignore = createClientCache(hostname, server1Port);\n      });\n    }\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).untilAsserted(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 2\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(3, seqMap.size()); \r\n      verifier.reset();\n    });\n\n    server2.invoke(\"shutdown new server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server3.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).untilAsserted(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 3\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(4, seqMap.size()); \r\n    });\n  }\n","realPath":"geode-cq/src/upgradeTest/java/org/apache/geode/internal/cache/tier/sockets/ClientServerMiscBCDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2018-08-25 06:40:56","commitOrder":3,"curCode":"  public void giiEventQueueShouldSucceedWithMixedVersions(String server1Version,\n      String server2Version) {\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 1);\n    server1 = Host.getHost(0).getVM(server1Version, 2);\n    server2 = Host.getHost(0).getVM(server2Version, 3);\n\n    \r\n    int server1Port = initServerCache(true, server1, true);\n    int server2Port = initServerCache(true, server2, true);\n    server2.invoke(() -> {\n      getCache().getCacheServers().stream().forEach(CacheServer::stop);\n    });\n\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port);\n      registerInterest();\n      registerCQ();\n    });\n\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    server2.invoke(() -> {\n      for (CacheServer server : getCache().getCacheServers()) {\n        server.start();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).untilAsserted(() -> {\n        final Collection<CacheClientProxy> clientProxies =\n            CacheClientNotifier.getInstance().getClientProxies();\n        assertFalse(clientProxies.isEmpty());\n        CacheClientProxy proxy = clientProxies.iterator().next();\n        assertFalse(proxy.getHARegionQueue().isEmpty());\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS)\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n  }\n","date":"2018-08-28 00:48:08","endLine":294,"groupId":"37797","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"giiEventQueueShouldSucceedWithMixedVersions","params":"(Stringserver1Version@Stringserver2Version)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d8/c43e100afd9366faf78449fe21494a5922c529.src","preCode":"  public void giiEventQueueShouldSucceedWithMixedVersions(String server1Version,\n      String server2Version) {\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 1);\n    server1 = Host.getHost(0).getVM(server1Version, 2);\n    server2 = Host.getHost(0).getVM(server2Version, 3);\n\n    \r\n    int server1Port = initServerCache(true, server1, true);\n    int server2Port = initServerCache(true, server2, true);\n    server2.invoke(() -> {\n      getCache().getCacheServers().stream().forEach(CacheServer::stop);\n    });\n\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port);\n      registerInterest();\n      registerCQ();\n    });\n\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    server2.invoke(() -> {\n      for (CacheServer server : getCache().getCacheServers()) {\n        server.start();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).untilAsserted(() -> {\n        final Collection<CacheClientProxy> clientProxies =\n            CacheClientNotifier.getInstance().getClientProxies();\n        assertFalse(clientProxies.isEmpty());\n        CacheClientProxy proxy = clientProxies.iterator().next();\n        assertFalse(proxy.getHARegionQueue().isEmpty());\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).untilAsserted(() -> {\n        proxy.getHARegionQueue().isEmpty();\n      });\n    });\n  }\n","realPath":"geode-cq/src/upgradeTest/java/org/apache/geode/internal/cache/tier/sockets/ClientServerMiscBCDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"}],"commitId":"45138b4861ff882006000c953a823b4ecc4a5fdd","commitMessage":"@@@GEODE-5630: fixup usage of Awaitility\n","date":"2018-08-28 00:48:08","modifiedFileCount":"16","status":"M","submitter":"Kirk Lund"},{"authorTime":"2018-10-05 06:38:58","codes":[{"authorDate":"2018-10-05 06:38:58","commitOrder":4,"curCode":"  private void doTestSubscriptionWithMixedServersAndPeerFeed(String version,\n      boolean usePeerForFeed) {\n    server1 = Host.getHost(0).getVM(testVersion, 2);\n    server2 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 3);\n    VM server3 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 4);\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(version, 1);\n\n    \r\n    int server1Port = initServerCache(true);\n\n    int server2Port = initServerCache2();\n\n    int server3Port = server3.invoke(() -> createServerCache(true, getMaxThreads(), false));\n\n    System.out.println(\"old server is vm 2 and new server is vm 3\");\n    System.out\n        .println(\"old server port is \" + server1Port + \" and new server port is \" + server2Port);\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port, server3Port);\n      populateCache();\n      registerInterest();\n    });\n\n    if (!usePeerForFeed) {\n      feeder.invoke(\"create client cache for feed\", () -> {\n        Pool ignore = createClientCache(hostname, server1Port);\n      });\n    }\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      await().until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      await()\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n\n    \r\n    interestClient.invoke(\"verification 2\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(3, seqMap.size()); \r\n      verifier.reset();\n    });\n\n    server2.invoke(\"shutdown new server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server3.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      await()\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n\n    \r\n    interestClient.invoke(\"verification 3\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(4, seqMap.size()); \r\n    });\n  }\n","date":"2018-10-19 08:01:02","endLine":220,"groupId":"27560","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestSubscriptionWithMixedServersAndPeerFeed","params":"(Stringversion@booleanusePeerForFeed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f6/c3ca07b3c6789cd5137a54fd27084b927fa27c.src","preCode":"  private void doTestSubscriptionWithMixedServersAndPeerFeed(String version,\n      boolean usePeerForFeed) {\n    server1 = Host.getHost(0).getVM(testVersion, 2);\n    server2 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 3);\n    VM server3 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 4);\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(version, 1);\n\n    \r\n    int server1Port = initServerCache(true);\n\n    int server2Port = initServerCache2();\n\n    int server3Port = server3.invoke(() -> createServerCache(true, getMaxThreads(), false));\n\n    System.out.println(\"old server is vm 2 and new server is vm 3\");\n    System.out\n        .println(\"old server port is \" + server1Port + \" and new server port is \" + server2Port);\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port, server3Port);\n      populateCache();\n      registerInterest();\n    });\n\n    if (!usePeerForFeed) {\n      feeder.invoke(\"create client cache for feed\", () -> {\n        Pool ignore = createClientCache(hostname, server1Port);\n      });\n    }\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(30, TimeUnit.SECONDS)\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n\n    \r\n    interestClient.invoke(\"verification 2\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(3, seqMap.size()); \r\n      verifier.reset();\n    });\n\n    server2.invoke(\"shutdown new server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server3.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(30, TimeUnit.SECONDS)\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n\n    \r\n    interestClient.invoke(\"verification 3\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(4, seqMap.size()); \r\n    });\n  }\n","realPath":"geode-cq/src/upgradeTest/java/org/apache/geode/internal/cache/tier/sockets/ClientServerMiscBCDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2018-10-05 06:38:58","commitOrder":4,"curCode":"  public void giiEventQueueShouldSucceedWithMixedVersions(String server1Version,\n      String server2Version) {\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 1);\n    server1 = Host.getHost(0).getVM(server1Version, 2);\n    server2 = Host.getHost(0).getVM(server2Version, 3);\n\n    \r\n    int server1Port = initServerCache(true, server1, true);\n    int server2Port = initServerCache(true, server2, true);\n    server2.invoke(() -> {\n      getCache().getCacheServers().stream().forEach(CacheServer::stop);\n    });\n\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port);\n      registerInterest();\n      registerCQ();\n    });\n\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    server2.invoke(() -> {\n      for (CacheServer server : getCache().getCacheServers()) {\n        server.start();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      await().untilAsserted(() -> {\n        final Collection<CacheClientProxy> clientProxies =\n            CacheClientNotifier.getInstance().getClientProxies();\n        assertFalse(clientProxies.isEmpty());\n        CacheClientProxy proxy = clientProxies.iterator().next();\n        assertFalse(proxy.getHARegionQueue().isEmpty());\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      await().until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      await()\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n  }\n","date":"2018-10-19 08:01:02","endLine":293,"groupId":"37797","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"giiEventQueueShouldSucceedWithMixedVersions","params":"(Stringserver1Version@Stringserver2Version)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f6/c3ca07b3c6789cd5137a54fd27084b927fa27c.src","preCode":"  public void giiEventQueueShouldSucceedWithMixedVersions(String server1Version,\n      String server2Version) {\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 1);\n    server1 = Host.getHost(0).getVM(server1Version, 2);\n    server2 = Host.getHost(0).getVM(server2Version, 3);\n\n    \r\n    int server1Port = initServerCache(true, server1, true);\n    int server2Port = initServerCache(true, server2, true);\n    server2.invoke(() -> {\n      getCache().getCacheServers().stream().forEach(CacheServer::stop);\n    });\n\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port);\n      registerInterest();\n      registerCQ();\n    });\n\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    server2.invoke(() -> {\n      for (CacheServer server : getCache().getCacheServers()) {\n        server.start();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Awaitility.await().atMost(30, TimeUnit.SECONDS).untilAsserted(() -> {\n        final Collection<CacheClientProxy> clientProxies =\n            CacheClientNotifier.getInstance().getClientProxies();\n        assertFalse(clientProxies.isEmpty());\n        CacheClientProxy proxy = clientProxies.iterator().next();\n        assertFalse(proxy.getHARegionQueue().isEmpty());\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS).until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      Awaitility.await().atMost(60, TimeUnit.SECONDS)\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n  }\n","realPath":"geode-cq/src/upgradeTest/java/org/apache/geode/internal/cache/tier/sockets/ClientServerMiscBCDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"}],"commitId":"239c532f8338c9d8e9bb8062fab9fadd3376ec73","commitMessage":"@@@GEODE-5424: Changing all awaitility calls to use consistent timings\n\nWe have a lot of Awaitility calls in our tests. Each test was picking\nits own timeout. That lead to some tests picking too small of a timeout\nand failing spuriously.\n\nWith this change.  all tests will use a new factory. \nGeodeAwaility.await().  rather than Awaitility.await(). This new factory\nsets a default timeout of 5 minutes. It also sets a sensible pollDelay\nand pollInterval.\n\nThe custom timeouts used in all tests have been removed.  in favor of\nthis new factory.  except for a couple of tests that had waits greater\nthan 5 minutes.\n","date":"2018-10-19 08:01:02","modifiedFileCount":"334","status":"M","submitter":"Dan Smith"},{"authorTime":"2018-10-05 06:38:58","codes":[{"authorDate":"2021-05-28 00:21:10","commitOrder":5,"curCode":"  private void doTestSubscriptionWithMixedServersAndPeerFeed(String version,\n      boolean usePeerForFeed) {\n    server1 = Host.getHost(0).getVM(testVersion, 2);\n    server2 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 3);\n    VM server3 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 4);\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(version, 1);\n\n    \r\n    int server1Port = initServerCache(true);\n\n    int server2Port = initServerCache2();\n\n    int server3Port = getRandomAvailableTCPPort();\n    server3.invoke(() -> createServerCache(true, getMaxThreads(), false, server3Port));\n\n    System.out.println(\"old server is vm 2 and new server is vm 3\");\n    System.out\n        .println(\"old server port is \" + server1Port + \" and new server port is \" + server2Port);\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port, server3Port);\n      populateCache();\n      registerInterest();\n    });\n\n    if (!usePeerForFeed) {\n      feeder.invoke(\"create client cache for feed\", () -> {\n        Pool ignore = createClientCache(hostname, server1Port);\n      });\n    }\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      await().until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      await()\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n\n    \r\n    interestClient.invoke(\"verification 2\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(3, seqMap.size()); \r\n      verifier.reset();\n    });\n\n    server2.invoke(\"shutdown new server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server3.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      await()\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n\n    \r\n    interestClient.invoke(\"verification 3\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(4, seqMap.size()); \r\n    });\n  }\n","date":"2021-05-28 00:21:10","endLine":269,"groupId":"10144","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"doTestSubscriptionWithMixedServersAndPeerFeed","params":"(Stringversion@booleanusePeerForFeed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/37/a7d13108b75dd792614dfe0a6d8a24f4dcbcc3.src","preCode":"  private void doTestSubscriptionWithMixedServersAndPeerFeed(String version,\n      boolean usePeerForFeed) {\n    server1 = Host.getHost(0).getVM(testVersion, 2);\n    server2 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 3);\n    VM server3 = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 4);\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(version, 1);\n\n    \r\n    int server1Port = initServerCache(true);\n\n    int server2Port = initServerCache2();\n\n    int server3Port = server3.invoke(() -> createServerCache(true, getMaxThreads(), false));\n\n    System.out.println(\"old server is vm 2 and new server is vm 3\");\n    System.out\n        .println(\"old server port is \" + server1Port + \" and new server port is \" + server2Port);\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port, server3Port);\n      populateCache();\n      registerInterest();\n    });\n\n    if (!usePeerForFeed) {\n      feeder.invoke(\"create client cache for feed\", () -> {\n        Pool ignore = createClientCache(hostname, server1Port);\n      });\n    }\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      await().until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      await()\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n\n    \r\n    interestClient.invoke(\"verification 2\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(3, seqMap.size()); \r\n      verifier.reset();\n    });\n\n    server2.invoke(\"shutdown new server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server3.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      await()\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n\n    \r\n    interestClient.invoke(\"verification 3\", () -> {\n      Cache cache = getCache();\n      Region r2 = cache.getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      assertFalse(verifier.eventReceived); \r\n      PoolImpl pool = (PoolImpl) PoolManager.find(\"ClientServerMiscDUnitTestPool\");\n\n      Map seqMap = pool.getThreadIdToSequenceIdMap();\n      assertEquals(4, seqMap.size()); \r\n    });\n  }\n","realPath":"geode-cq/src/upgradeTest/java/org/apache/geode/internal/cache/tier/sockets/ClientServerMiscBCDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2018-10-05 06:38:58","commitOrder":5,"curCode":"  public void giiEventQueueShouldSucceedWithMixedVersions(String server1Version,\n      String server2Version) {\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 1);\n    server1 = Host.getHost(0).getVM(server1Version, 2);\n    server2 = Host.getHost(0).getVM(server2Version, 3);\n\n    \r\n    int server1Port = initServerCache(true, server1, true);\n    int server2Port = initServerCache(true, server2, true);\n    server2.invoke(() -> {\n      getCache().getCacheServers().stream().forEach(CacheServer::stop);\n    });\n\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port);\n      registerInterest();\n      registerCQ();\n    });\n\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    server2.invoke(() -> {\n      for (CacheServer server : getCache().getCacheServers()) {\n        server.start();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      await().untilAsserted(() -> {\n        final Collection<CacheClientProxy> clientProxies =\n            CacheClientNotifier.getInstance().getClientProxies();\n        assertFalse(clientProxies.isEmpty());\n        CacheClientProxy proxy = clientProxies.iterator().next();\n        assertFalse(proxy.getHARegionQueue().isEmpty());\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      await().until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      await()\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n  }\n","date":"2018-10-19 08:01:02","endLine":293,"groupId":"10144","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"giiEventQueueShouldSucceedWithMixedVersions","params":"(Stringserver1Version@Stringserver2Version)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f6/c3ca07b3c6789cd5137a54fd27084b927fa27c.src","preCode":"  public void giiEventQueueShouldSucceedWithMixedVersions(String server1Version,\n      String server2Version) {\n    VM interestClient = Host.getHost(0).getVM(testVersion, 0);\n    VM feeder = Host.getHost(0).getVM(VersionManager.CURRENT_VERSION, 1);\n    server1 = Host.getHost(0).getVM(server1Version, 2);\n    server2 = Host.getHost(0).getVM(server2Version, 3);\n\n    \r\n    int server1Port = initServerCache(true, server1, true);\n    int server2Port = initServerCache(true, server2, true);\n    server2.invoke(() -> {\n      getCache().getCacheServers().stream().forEach(CacheServer::stop);\n    });\n\n\n    String hostname = NetworkUtils.getServerHostName(Host.getHost(0));\n    interestClient.invoke(\"create interestClient cache\", () -> {\n      createClientCache(hostname, 300000, false, server1Port, server2Port);\n      registerInterest();\n      registerCQ();\n    });\n\n    feeder.invoke(\"putting data in feeder\", () -> putForClient());\n\n    \r\n    server2.invoke(() -> {\n      for (CacheServer server : getCache().getCacheServers()) {\n        server.start();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      await().untilAsserted(() -> {\n        final Collection<CacheClientProxy> clientProxies =\n            CacheClientNotifier.getInstance().getClientProxies();\n        assertFalse(clientProxies.isEmpty());\n        CacheClientProxy proxy = clientProxies.iterator().next();\n        assertFalse(proxy.getHARegionQueue().isEmpty());\n      });\n    });\n\n    \r\n    interestClient.invoke(\"verification 1\", () -> {\n      Region r2 = getCache().getRegion(REGION_NAME2);\n      MemberIDVerifier verifier = (MemberIDVerifier) ((LocalRegion) r2).getCacheListener();\n      await().until(() -> verifier.eventReceived);\n      verifier.reset();\n    });\n\n    server1.invoke(\"shutdown old server\", () -> {\n      getCache().getDistributedSystem().disconnect();\n    });\n\n    server2.invoke(\"wait for failover queue to drain\", () -> {\n      CacheClientProxy proxy =\n          CacheClientNotifier.getInstance().getClientProxies().iterator().next();\n      await()\n          .until(() -> proxy.getHARegionQueue().isEmpty());\n    });\n  }\n","realPath":"geode-cq/src/upgradeTest/java/org/apache/geode/internal/cache/tier/sockets/ClientServerMiscBCDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"N"}],"commitId":"093f1864cb941b23ba2c4e7a3303e7e47eac85ca","commitMessage":"@@@GEODE-8772: ClientServer test port assignment (#6513)\n\nChange `ClientServerMiscDUnitTestBase`.  `ClientServerMiscDUnitTest`.  and\n`ClientServerMiscBCDUnitTest` to assign ports only in the test JVM.\n\nBACKGROUND\n\nAs part of my project to allow Geode tests to run in parallel outside of\nDocker.  I am changing our build system to allocate a distinct range of\nports to each test JVM.  and changing `AvailablePort` and\n`AvailablePortHelper` to honor these allocated port ranges.\n\nThis commit prepares for those changes.\n\nPROBLEM\n\nTo test compatibility.  `ClientServerMiscDUnitTestBase` executes\n`createServerCache()` in a child VMs running old versions of Geode. The\n`createServerCache()` method assigns a server port via\n`AvailablePortHelper`.  The old implementation of `AvailablePortHelper`\nin the child VM does not honor the range of ports allocated to the child\nVM.\n\nIf such tests run in parallel outside of Docker.  the\n`createServerCache()` method in each test may assign the same port. If\nthe servers in multiple tests attempt to bind to that port at the same\ntime.  all but one server will fail.\n\nGENERAL SOLUTION\n\nMake tests assign ports only in the test JVM. The test JVM always\nincludes the latest implementations of `AvailablePort` and\n`AvailablePortHelper`.  and so the tests  will honor any port allocation\nscheme defined in the latest implementation.\n\nTHIS COMMIT\n\n- Add a `port` parameter to `createServerCache()`.\n- Change `ClientServerMiscDUnitTestBase`.  `ClientServerMiscDUnitTest`. \n  and `ClientServerMiscBCDUnitTest` to assign ports only methods called\n  in the test JVM.","date":"2021-05-28 00:21:10","modifiedFileCount":"3","status":"M","submitter":"Dale Emery"}]
