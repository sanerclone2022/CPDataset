[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testRegionMethods() throws Exception {\n    Object cbArg = new Object();\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n    assertEquals(0, getStats().getRegions());\n    Region r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    assertEquals(\"r\", r.getName());\n    assertEquals(\"/r\", r.getFullPath());\n    assertEquals(null, r.getParentRegion());\n    assertEquals(DataPolicy.EMPTY, r.getAttributes().getDataPolicy());\n    r.getAttributesMutator();\n    try {\n      r.getStatistics();\n      fail(\"expected StatisticsDisabledException\");\n    } catch (StatisticsDisabledException expected) {\n      \r\n    }\n    r.invalidateRegion();\n    expre.op = Operation.REGION_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.invalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion();\n    expre.op = Operation.REGION_LOCAL_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion();\n    assertEquals(true, r.isDestroyed());\n    assertEquals(0, getStats().getRegions());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = null;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = cbArg;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.close();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_CLOSE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n\n    r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    try {\n      r.saveSnapshot(System.out);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    try {\n      r.loadSnapshot(System.in);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    {\n      Region sr = r.createSubregion(\"sr\", af.create());\n      assertEquals(2, getStats().getRegions());\n      expre.r = sr;\n      expre.op = Operation.REGION_CREATE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCL(expre);\n      assertEquals(\"sr\", sr.getName());\n      assertEquals(\"/r/sr\", sr.getFullPath());\n      assertEquals(r, sr.getParentRegion());\n      assertEquals(sr, r.getSubregion(\"sr\"));\n      assertEquals(Collections.singleton(sr), r.subregions(false));\n      sr.close();\n      assertEquals(1, getStats().getRegions());\n      expre.op = Operation.REGION_CLOSE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCWClosed();\n      checkCLClosed();\n      checkCL(expre);\n      assertEquals(true, sr.isDestroyed());\n      assertEquals(null, r.getSubregion(\"sr\"));\n      assertEquals(Collections.EMPTY_SET, r.subregions(false));\n    }\n\n\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    int creates = getStats().getCreates();\n    \r\n    \r\n    int destroys = getStats().getDestroys();\n    int invalidates = getStats().getInvalidates();\n    int gets = getStats().getGets();\n    int misses = getStats().getMisses();\n\n    r.put(\"key\", \"value\", cbArg);\n    expee.op = Operation.CREATE;\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    \r\n    r.create(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(null, r.getEntry(\"key\"));\n    assertEquals(null, r.get(\"key\", cbArg));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    r.invalidate(\"key\");\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    r.invalidate(\"key\", cbArg);\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    try {\n      r.localInvalidate(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localInvalidate(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(invalidates, getStats().getInvalidates());\n    checkNoCW();\n    checkNoCL();\n\n    r.destroy(\"key\");\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.destroy(\"key\", cbArg);\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    try {\n      r.localDestroy(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localDestroy(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(destroys, getStats().getDestroys());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(Collections.EMPTY_SET, r.entrySet(true));\n    assertEquals(this.c, r.getCache());\n    r.setUserAttribute(cbArg);\n    assertEquals(cbArg, r.getUserAttribute());\n    checkNoCW();\n    checkNoCL();\n\n    r.put(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(false, r.containsValueForKey(\"key\"));\n    assertEquals(false, r.existsValue(\"this = 'value'\"));\n    {\n      SelectResults sr = r.query(\"this = 'value'\");\n      assertEquals(Collections.EMPTY_SET, sr.asSet());\n    }\n    assertEquals(null, r.selectValue(\"this = 'value'\"));\n    try {\n      r.getRegionDistributedLock();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.getDistributedLock(\"key\");\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.becomeLockGrantor();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.writeToDisk();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    checkNoCW();\n    checkNoCL();\n\n    \r\n    {\n      CacheLoader cl = new CacheLoader() {\n        public Object load(LoaderHelper helper) throws CacheLoaderException {\n          return \"loadedValue\";\n        }\n\n        public void close() {}\n      };\n      r.getAttributesMutator().setCacheLoader(cl);\n      r.get(\"key\", cbArg);\n      gets++;\n      assertEquals(gets, getStats().getGets());\n      misses++;\n      assertEquals(misses, getStats().getMisses());\n      expee.op = Operation.LOCAL_LOAD_CREATE;\n      expee.newValue = \"loadedValue\";\n      checkCW(expee);\n      checkCL(expee);\n      r.getAttributesMutator().setCacheLoader(null);\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":785,"groupId":"25107","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegionMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2a/0e4cc5f8bde5cd2e82cc8b1a44fdddb0bc1ba1.src","preCode":"  public void testRegionMethods() throws Exception {\n    Object cbArg = new Object();\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n    assertEquals(0, getStats().getRegions());\n    Region r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    assertEquals(\"r\", r.getName());\n    assertEquals(\"/r\", r.getFullPath());\n    assertEquals(null, r.getParentRegion());\n    assertEquals(DataPolicy.EMPTY, r.getAttributes().getDataPolicy());\n    r.getAttributesMutator();\n    try {\n      r.getStatistics();\n      fail(\"expected StatisticsDisabledException\");\n    } catch (StatisticsDisabledException expected) {\n      \r\n    }\n    r.invalidateRegion();\n    expre.op = Operation.REGION_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.invalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion();\n    expre.op = Operation.REGION_LOCAL_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion();\n    assertEquals(true, r.isDestroyed());\n    assertEquals(0, getStats().getRegions());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = null;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = cbArg;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.close();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_CLOSE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n\n    r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    try {\n      r.saveSnapshot(System.out);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    try {\n      r.loadSnapshot(System.in);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    {\n      Region sr = r.createSubregion(\"sr\", af.create());\n      assertEquals(2, getStats().getRegions());\n      expre.r = sr;\n      expre.op = Operation.REGION_CREATE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCL(expre);\n      assertEquals(\"sr\", sr.getName());\n      assertEquals(\"/r/sr\", sr.getFullPath());\n      assertEquals(r, sr.getParentRegion());\n      assertEquals(sr, r.getSubregion(\"sr\"));\n      assertEquals(Collections.singleton(sr), r.subregions(false));\n      sr.close();\n      assertEquals(1, getStats().getRegions());\n      expre.op = Operation.REGION_CLOSE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCWClosed();\n      checkCLClosed();\n      checkCL(expre);\n      assertEquals(true, sr.isDestroyed());\n      assertEquals(null, r.getSubregion(\"sr\"));\n      assertEquals(Collections.EMPTY_SET, r.subregions(false));\n    }\n\n\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    int creates = getStats().getCreates();\n    \r\n    \r\n    int destroys = getStats().getDestroys();\n    int invalidates = getStats().getInvalidates();\n    int gets = getStats().getGets();\n    int misses = getStats().getMisses();\n\n    r.put(\"key\", \"value\", cbArg);\n    expee.op = Operation.CREATE;\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    \r\n    r.create(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(null, r.getEntry(\"key\"));\n    assertEquals(null, r.get(\"key\", cbArg));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    r.invalidate(\"key\");\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    r.invalidate(\"key\", cbArg);\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    try {\n      r.localInvalidate(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localInvalidate(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(invalidates, getStats().getInvalidates());\n    checkNoCW();\n    checkNoCL();\n\n    r.destroy(\"key\");\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.destroy(\"key\", cbArg);\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    try {\n      r.localDestroy(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localDestroy(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(destroys, getStats().getDestroys());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(Collections.EMPTY_SET, r.entrySet(true));\n    assertEquals(this.c, r.getCache());\n    r.setUserAttribute(cbArg);\n    assertEquals(cbArg, r.getUserAttribute());\n    checkNoCW();\n    checkNoCL();\n\n    r.put(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(false, r.containsValueForKey(\"key\"));\n    assertEquals(false, r.existsValue(\"this = 'value'\"));\n    {\n      SelectResults sr = r.query(\"this = 'value'\");\n      assertEquals(Collections.EMPTY_SET, sr.asSet());\n    }\n    assertEquals(null, r.selectValue(\"this = 'value'\"));\n    try {\n      r.getRegionDistributedLock();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.getDistributedLock(\"key\");\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.becomeLockGrantor();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.writeToDisk();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    checkNoCW();\n    checkNoCL();\n\n    \r\n    {\n      CacheLoader cl = new CacheLoader() {\n        public Object load(LoaderHelper helper) throws CacheLoaderException {\n          return \"loadedValue\";\n        }\n\n        public void close() {}\n      };\n      r.getAttributesMutator().setCacheLoader(cl);\n      r.get(\"key\", cbArg);\n      gets++;\n      assertEquals(gets, getStats().getGets());\n      misses++;\n      assertEquals(misses, getStats().getMisses());\n      expee.op = Operation.LOCAL_LOAD_CREATE;\n      expee.newValue = \"loadedValue\";\n      checkCW(expee);\n      checkCL(expee);\n      r.getAttributesMutator().setCacheLoader(null);\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/ProxyJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testMapMethods() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n\n    Region r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.cbArg = null;\n    expre.op = Operation.REGION_CREATE;\n    checkNoCW();\n    checkCL(expre);\n\n    int creates = getStats().getCreates();\n    \r\n    \r\n    int destroys = getStats().getDestroys();\n    \r\n    int gets = getStats().getGets();\n    int misses = getStats().getMisses();\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    expee.cbArg = null;\n\n    assertEquals(null, r.put(\"key\", \"value\"));\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    {\n      HashMap m = new HashMap();\n      m.put(\"k1\", \"v1\");\n      m.put(\"k2\", \"v2\");\n      r.putAll(m);\n      assertEquals(0, r.size());\n      \r\n      assertEquals(2, this.cwInvokeCount);\n      assertEquals(2, this.clInvokeCount);\n      clearCallbackState();\n      creates += 2;\n      assertEquals(creates, getStats().getCreates());\n    }\n    assertEquals(false, r.containsKey(\"key\"));\n    assertEquals(false, r.containsValue(\"value\"));\n    assertEquals(Collections.EMPTY_SET, r.entrySet());\n    assertEquals(true, r.isEmpty());\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(0, r.size());\n    assertEquals(Collections.EMPTY_LIST, new ArrayList(r.values()));\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.get(\"key\"));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.remove(\"key\"));\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.key = \"key\";\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.localClear();\n    expre.op = Operation.REGION_LOCAL_CLEAR;\n    checkNoCW();\n    checkCL(expre);\n\n    r.clear();\n    expre.op = Operation.REGION_CLEAR;\n    checkCW(expre);\n    checkCL(expre);\n  }\n","date":"2018-07-18 03:54:18","endLine":874,"groupId":"31731","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2a/0e4cc5f8bde5cd2e82cc8b1a44fdddb0bc1ba1.src","preCode":"  public void testMapMethods() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n\n    Region r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.cbArg = null;\n    expre.op = Operation.REGION_CREATE;\n    checkNoCW();\n    checkCL(expre);\n\n    int creates = getStats().getCreates();\n    \r\n    \r\n    int destroys = getStats().getDestroys();\n    \r\n    int gets = getStats().getGets();\n    int misses = getStats().getMisses();\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    expee.cbArg = null;\n\n    assertEquals(null, r.put(\"key\", \"value\"));\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    {\n      HashMap m = new HashMap();\n      m.put(\"k1\", \"v1\");\n      m.put(\"k2\", \"v2\");\n      r.putAll(m);\n      assertEquals(0, r.size());\n      \r\n      assertEquals(2, this.cwInvokeCount);\n      assertEquals(2, this.clInvokeCount);\n      clearCallbackState();\n      creates += 2;\n      assertEquals(creates, getStats().getCreates());\n    }\n    assertEquals(false, r.containsKey(\"key\"));\n    assertEquals(false, r.containsValue(\"value\"));\n    assertEquals(Collections.EMPTY_SET, r.entrySet());\n    assertEquals(true, r.isEmpty());\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(0, r.size());\n    assertEquals(Collections.EMPTY_LIST, new ArrayList(r.values()));\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.get(\"key\"));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.remove(\"key\"));\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.key = \"key\";\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.localClear();\n    expre.op = Operation.REGION_LOCAL_CLEAR;\n    checkNoCW();\n    checkCL(expre);\n\n    r.clear();\n    expre.op = Operation.REGION_CLEAR;\n    checkCW(expre);\n    checkCL(expre);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/ProxyJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":791,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":2,"curCode":"  public void testRegionMethods() throws Exception {\n    Object cbArg = new Object();\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n    assertEquals(0, getStats().getRegions());\n    Region r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    assertEquals(\"r\", r.getName());\n    assertEquals(\"/r\", r.getFullPath());\n    assertEquals(null, r.getParentRegion());\n    assertEquals(DataPolicy.EMPTY, r.getAttributes().getDataPolicy());\n    r.getAttributesMutator();\n    try {\n      r.getStatistics();\n      fail(\"expected StatisticsDisabledException\");\n    } catch (StatisticsDisabledException expected) {\n      \r\n    }\n    r.invalidateRegion();\n    expre.op = Operation.REGION_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.invalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion();\n    expre.op = Operation.REGION_LOCAL_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion();\n    assertEquals(true, r.isDestroyed());\n    assertEquals(0, getStats().getRegions());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = null;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = cbArg;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.close();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_CLOSE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n\n    r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    try {\n      r.saveSnapshot(System.out);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    try {\n      r.loadSnapshot(System.in);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    {\n      Region sr = r.createSubregion(\"sr\", af.create());\n      assertEquals(2, getStats().getRegions());\n      expre.r = sr;\n      expre.op = Operation.REGION_CREATE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCL(expre);\n      assertEquals(\"sr\", sr.getName());\n      assertEquals(\"/r/sr\", sr.getFullPath());\n      assertEquals(r, sr.getParentRegion());\n      assertEquals(sr, r.getSubregion(\"sr\"));\n      assertEquals(Collections.singleton(sr), r.subregions(false));\n      sr.close();\n      assertEquals(1, getStats().getRegions());\n      expre.op = Operation.REGION_CLOSE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCWClosed();\n      checkCLClosed();\n      checkCL(expre);\n      assertEquals(true, sr.isDestroyed());\n      assertEquals(null, r.getSubregion(\"sr\"));\n      assertEquals(Collections.EMPTY_SET, r.subregions(false));\n    }\n\n\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    int creates = getStats().getCreates();\n    \r\n    \r\n    int destroys = getStats().getDestroys();\n    int invalidates = getStats().getInvalidates();\n    int gets = getStats().getGets();\n    int misses = getStats().getMisses();\n\n    r.put(\"key\", \"value\", cbArg);\n    expee.op = Operation.CREATE;\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    \r\n    r.create(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(null, r.getEntry(\"key\"));\n    assertEquals(null, r.get(\"key\", cbArg));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    r.invalidate(\"key\");\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    r.invalidate(\"key\", cbArg);\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    try {\n      r.localInvalidate(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localInvalidate(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(invalidates, getStats().getInvalidates());\n    checkNoCW();\n    checkNoCL();\n\n    r.destroy(\"key\");\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.destroy(\"key\", cbArg);\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    try {\n      r.localDestroy(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localDestroy(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(destroys, getStats().getDestroys());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(Collections.EMPTY_SET, r.entrySet(true));\n    assertEquals(this.c, r.getCache());\n    r.setUserAttribute(cbArg);\n    assertEquals(cbArg, r.getUserAttribute());\n    checkNoCW();\n    checkNoCL();\n\n    r.put(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(false, r.containsValueForKey(\"key\"));\n    assertEquals(false, r.existsValue(\"this = 'value'\"));\n    {\n      SelectResults sr = r.query(\"this = 'value'\");\n      assertEquals(Collections.EMPTY_SET, sr.asSet());\n    }\n    assertEquals(null, r.selectValue(\"this = 'value'\"));\n    try {\n      r.getRegionDistributedLock();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.getDistributedLock(\"key\");\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.becomeLockGrantor();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.writeToDisk();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    checkNoCW();\n    checkNoCL();\n\n    \r\n    {\n      CacheLoader cl = new CacheLoader() {\n        @Override\n        public Object load(LoaderHelper helper) throws CacheLoaderException {\n          return \"loadedValue\";\n        }\n\n        @Override\n        public void close() {}\n      };\n      r.getAttributesMutator().setCacheLoader(cl);\n      r.get(\"key\", cbArg);\n      gets++;\n      assertEquals(gets, getStats().getGets());\n      misses++;\n      assertEquals(misses, getStats().getMisses());\n      expee.op = Operation.LOCAL_LOAD_CREATE;\n      expee.newValue = \"loadedValue\";\n      checkCW(expee);\n      checkCL(expee);\n      r.getAttributesMutator().setCacheLoader(null);\n    }\n  }\n","date":"2019-01-12 07:53:54","endLine":819,"groupId":"25107","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegionMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d8/32a321d98f713222ec4713cb8e1a5bcdd918e2.src","preCode":"  public void testRegionMethods() throws Exception {\n    Object cbArg = new Object();\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n    assertEquals(0, getStats().getRegions());\n    Region r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    assertEquals(\"r\", r.getName());\n    assertEquals(\"/r\", r.getFullPath());\n    assertEquals(null, r.getParentRegion());\n    assertEquals(DataPolicy.EMPTY, r.getAttributes().getDataPolicy());\n    r.getAttributesMutator();\n    try {\n      r.getStatistics();\n      fail(\"expected StatisticsDisabledException\");\n    } catch (StatisticsDisabledException expected) {\n      \r\n    }\n    r.invalidateRegion();\n    expre.op = Operation.REGION_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.invalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion();\n    expre.op = Operation.REGION_LOCAL_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion();\n    assertEquals(true, r.isDestroyed());\n    assertEquals(0, getStats().getRegions());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = null;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = cbArg;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.close();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_CLOSE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n\n    r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    try {\n      r.saveSnapshot(System.out);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    try {\n      r.loadSnapshot(System.in);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    {\n      Region sr = r.createSubregion(\"sr\", af.create());\n      assertEquals(2, getStats().getRegions());\n      expre.r = sr;\n      expre.op = Operation.REGION_CREATE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCL(expre);\n      assertEquals(\"sr\", sr.getName());\n      assertEquals(\"/r/sr\", sr.getFullPath());\n      assertEquals(r, sr.getParentRegion());\n      assertEquals(sr, r.getSubregion(\"sr\"));\n      assertEquals(Collections.singleton(sr), r.subregions(false));\n      sr.close();\n      assertEquals(1, getStats().getRegions());\n      expre.op = Operation.REGION_CLOSE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCWClosed();\n      checkCLClosed();\n      checkCL(expre);\n      assertEquals(true, sr.isDestroyed());\n      assertEquals(null, r.getSubregion(\"sr\"));\n      assertEquals(Collections.EMPTY_SET, r.subregions(false));\n    }\n\n\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    int creates = getStats().getCreates();\n    \r\n    \r\n    int destroys = getStats().getDestroys();\n    int invalidates = getStats().getInvalidates();\n    int gets = getStats().getGets();\n    int misses = getStats().getMisses();\n\n    r.put(\"key\", \"value\", cbArg);\n    expee.op = Operation.CREATE;\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    \r\n    r.create(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(null, r.getEntry(\"key\"));\n    assertEquals(null, r.get(\"key\", cbArg));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    r.invalidate(\"key\");\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    r.invalidate(\"key\", cbArg);\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    try {\n      r.localInvalidate(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localInvalidate(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(invalidates, getStats().getInvalidates());\n    checkNoCW();\n    checkNoCL();\n\n    r.destroy(\"key\");\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.destroy(\"key\", cbArg);\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    try {\n      r.localDestroy(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localDestroy(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(destroys, getStats().getDestroys());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(Collections.EMPTY_SET, r.entrySet(true));\n    assertEquals(this.c, r.getCache());\n    r.setUserAttribute(cbArg);\n    assertEquals(cbArg, r.getUserAttribute());\n    checkNoCW();\n    checkNoCL();\n\n    r.put(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(false, r.containsValueForKey(\"key\"));\n    assertEquals(false, r.existsValue(\"this = 'value'\"));\n    {\n      SelectResults sr = r.query(\"this = 'value'\");\n      assertEquals(Collections.EMPTY_SET, sr.asSet());\n    }\n    assertEquals(null, r.selectValue(\"this = 'value'\"));\n    try {\n      r.getRegionDistributedLock();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.getDistributedLock(\"key\");\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.becomeLockGrantor();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.writeToDisk();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    checkNoCW();\n    checkNoCL();\n\n    \r\n    {\n      CacheLoader cl = new CacheLoader() {\n        public Object load(LoaderHelper helper) throws CacheLoaderException {\n          return \"loadedValue\";\n        }\n\n        public void close() {}\n      };\n      r.getAttributesMutator().setCacheLoader(cl);\n      r.get(\"key\", cbArg);\n      gets++;\n      assertEquals(gets, getStats().getGets());\n      misses++;\n      assertEquals(misses, getStats().getMisses());\n      expee.op = Operation.LOCAL_LOAD_CREATE;\n      expee.newValue = \"loadedValue\";\n      checkCW(expee);\n      checkCL(expee);\n      r.getAttributesMutator().setCacheLoader(null);\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/ProxyJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"M"},{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public void testMapMethods() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n\n    Region r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.cbArg = null;\n    expre.op = Operation.REGION_CREATE;\n    checkNoCW();\n    checkCL(expre);\n\n    int creates = getStats().getCreates();\n    \r\n    \r\n    int destroys = getStats().getDestroys();\n    \r\n    int gets = getStats().getGets();\n    int misses = getStats().getMisses();\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    expee.cbArg = null;\n\n    assertEquals(null, r.put(\"key\", \"value\"));\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    {\n      HashMap m = new HashMap();\n      m.put(\"k1\", \"v1\");\n      m.put(\"k2\", \"v2\");\n      r.putAll(m);\n      assertEquals(0, r.size());\n      \r\n      assertEquals(2, this.cwInvokeCount);\n      assertEquals(2, this.clInvokeCount);\n      clearCallbackState();\n      creates += 2;\n      assertEquals(creates, getStats().getCreates());\n    }\n    assertEquals(false, r.containsKey(\"key\"));\n    assertEquals(false, r.containsValue(\"value\"));\n    assertEquals(Collections.EMPTY_SET, r.entrySet());\n    assertEquals(true, r.isEmpty());\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(0, r.size());\n    assertEquals(Collections.EMPTY_LIST, new ArrayList(r.values()));\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.get(\"key\"));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.remove(\"key\"));\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.key = \"key\";\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.localClear();\n    expre.op = Operation.REGION_LOCAL_CLEAR;\n    checkNoCW();\n    checkCL(expre);\n\n    r.clear();\n    expre.op = Operation.REGION_CLEAR;\n    checkCW(expre);\n    checkCL(expre);\n  }\n","date":"2018-07-18 03:54:18","endLine":874,"groupId":"31731","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2a/0e4cc5f8bde5cd2e82cc8b1a44fdddb0bc1ba1.src","preCode":"  public void testMapMethods() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n\n    Region r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.cbArg = null;\n    expre.op = Operation.REGION_CREATE;\n    checkNoCW();\n    checkCL(expre);\n\n    int creates = getStats().getCreates();\n    \r\n    \r\n    int destroys = getStats().getDestroys();\n    \r\n    int gets = getStats().getGets();\n    int misses = getStats().getMisses();\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    expee.cbArg = null;\n\n    assertEquals(null, r.put(\"key\", \"value\"));\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    {\n      HashMap m = new HashMap();\n      m.put(\"k1\", \"v1\");\n      m.put(\"k2\", \"v2\");\n      r.putAll(m);\n      assertEquals(0, r.size());\n      \r\n      assertEquals(2, this.cwInvokeCount);\n      assertEquals(2, this.clInvokeCount);\n      clearCallbackState();\n      creates += 2;\n      assertEquals(creates, getStats().getCreates());\n    }\n    assertEquals(false, r.containsKey(\"key\"));\n    assertEquals(false, r.containsValue(\"value\"));\n    assertEquals(Collections.EMPTY_SET, r.entrySet());\n    assertEquals(true, r.isEmpty());\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(0, r.size());\n    assertEquals(Collections.EMPTY_LIST, new ArrayList(r.values()));\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.get(\"key\"));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.remove(\"key\"));\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.key = \"key\";\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.localClear();\n    expre.op = Operation.REGION_LOCAL_CLEAR;\n    checkNoCW();\n    checkCL(expre);\n\n    r.clear();\n    expre.op = Operation.REGION_CLEAR;\n    checkCW(expre);\n    checkCL(expre);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/ProxyJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":791,"status":"N"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2019-02-12 02:18:49","codes":[{"authorDate":"2019-02-12 02:18:49","commitOrder":3,"curCode":"  public void testRegionMethods() throws Exception {\n    Object cbArg = new Object();\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n    assertEquals(0, getStats().getRegions());\n    Region r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    assertEquals(\"r\", r.getName());\n    assertEquals(\"/r\", r.getFullPath());\n    assertEquals(null, r.getParentRegion());\n    assertEquals(DataPolicy.EMPTY, r.getAttributes().getDataPolicy());\n    r.getAttributesMutator();\n    try {\n      r.getStatistics();\n      fail(\"expected StatisticsDisabledException\");\n    } catch (StatisticsDisabledException expected) {\n      \r\n    }\n    r.invalidateRegion();\n    expre.op = Operation.REGION_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.invalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion();\n    expre.op = Operation.REGION_LOCAL_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion();\n    assertEquals(true, r.isDestroyed());\n    assertEquals(0, getStats().getRegions());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = null;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = cbArg;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.close();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_CLOSE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n\n    r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    try {\n      r.saveSnapshot(System.out);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    try {\n      r.loadSnapshot(System.in);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    {\n      Region sr = r.createSubregion(\"sr\", af.create());\n      assertEquals(2, getStats().getRegions());\n      expre.r = sr;\n      expre.op = Operation.REGION_CREATE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCL(expre);\n      assertEquals(\"sr\", sr.getName());\n      assertEquals(\"/r/sr\", sr.getFullPath());\n      assertEquals(r, sr.getParentRegion());\n      assertEquals(sr, r.getSubregion(\"sr\"));\n      assertEquals(Collections.singleton(sr), r.subregions(false));\n      sr.close();\n      assertEquals(1, getStats().getRegions());\n      expre.op = Operation.REGION_CLOSE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCWClosed();\n      checkCLClosed();\n      checkCL(expre);\n      assertEquals(true, sr.isDestroyed());\n      assertEquals(null, r.getSubregion(\"sr\"));\n      assertEquals(Collections.EMPTY_SET, r.subregions(false));\n    }\n\n\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    long creates = getStats().getCreates();\n    long destroys = getStats().getDestroys();\n    long invalidates = getStats().getInvalidates();\n    long gets = getStats().getGets();\n    long misses = getStats().getMisses();\n\n    r.put(\"key\", \"value\", cbArg);\n    expee.op = Operation.CREATE;\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    \r\n    r.create(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(null, r.getEntry(\"key\"));\n    assertEquals(null, r.get(\"key\", cbArg));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    r.invalidate(\"key\");\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    r.invalidate(\"key\", cbArg);\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    try {\n      r.localInvalidate(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localInvalidate(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(invalidates, getStats().getInvalidates());\n    checkNoCW();\n    checkNoCL();\n\n    r.destroy(\"key\");\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.destroy(\"key\", cbArg);\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    try {\n      r.localDestroy(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localDestroy(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(destroys, getStats().getDestroys());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(Collections.EMPTY_SET, r.entrySet(true));\n    assertEquals(this.c, r.getCache());\n    r.setUserAttribute(cbArg);\n    assertEquals(cbArg, r.getUserAttribute());\n    checkNoCW();\n    checkNoCL();\n\n    r.put(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(false, r.containsValueForKey(\"key\"));\n    assertEquals(false, r.existsValue(\"this = 'value'\"));\n    {\n      SelectResults sr = r.query(\"this = 'value'\");\n      assertEquals(Collections.EMPTY_SET, sr.asSet());\n    }\n    assertEquals(null, r.selectValue(\"this = 'value'\"));\n    try {\n      r.getRegionDistributedLock();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.getDistributedLock(\"key\");\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.becomeLockGrantor();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.writeToDisk();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    checkNoCW();\n    checkNoCL();\n\n    \r\n    {\n      CacheLoader cl = new CacheLoader() {\n        @Override\n        public Object load(LoaderHelper helper) throws CacheLoaderException {\n          return \"loadedValue\";\n        }\n\n        @Override\n        public void close() {}\n      };\n      r.getAttributesMutator().setCacheLoader(cl);\n      r.get(\"key\", cbArg);\n      gets++;\n      assertEquals(gets, getStats().getGets());\n      misses++;\n      assertEquals(misses, getStats().getMisses());\n      expee.op = Operation.LOCAL_LOAD_CREATE;\n      expee.newValue = \"loadedValue\";\n      checkCW(expee);\n      checkCL(expee);\n      r.getAttributesMutator().setCacheLoader(null);\n    }\n  }\n","date":"2019-02-12 02:18:49","endLine":817,"groupId":"17540","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegionMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1d/8ea5745c1c8d918e77c15edccfb45688f7b908.src","preCode":"  public void testRegionMethods() throws Exception {\n    Object cbArg = new Object();\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n    assertEquals(0, getStats().getRegions());\n    Region r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    assertEquals(\"r\", r.getName());\n    assertEquals(\"/r\", r.getFullPath());\n    assertEquals(null, r.getParentRegion());\n    assertEquals(DataPolicy.EMPTY, r.getAttributes().getDataPolicy());\n    r.getAttributesMutator();\n    try {\n      r.getStatistics();\n      fail(\"expected StatisticsDisabledException\");\n    } catch (StatisticsDisabledException expected) {\n      \r\n    }\n    r.invalidateRegion();\n    expre.op = Operation.REGION_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.invalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion();\n    expre.op = Operation.REGION_LOCAL_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion();\n    assertEquals(true, r.isDestroyed());\n    assertEquals(0, getStats().getRegions());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = null;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = cbArg;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.close();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_CLOSE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n\n    r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    try {\n      r.saveSnapshot(System.out);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    try {\n      r.loadSnapshot(System.in);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    {\n      Region sr = r.createSubregion(\"sr\", af.create());\n      assertEquals(2, getStats().getRegions());\n      expre.r = sr;\n      expre.op = Operation.REGION_CREATE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCL(expre);\n      assertEquals(\"sr\", sr.getName());\n      assertEquals(\"/r/sr\", sr.getFullPath());\n      assertEquals(r, sr.getParentRegion());\n      assertEquals(sr, r.getSubregion(\"sr\"));\n      assertEquals(Collections.singleton(sr), r.subregions(false));\n      sr.close();\n      assertEquals(1, getStats().getRegions());\n      expre.op = Operation.REGION_CLOSE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCWClosed();\n      checkCLClosed();\n      checkCL(expre);\n      assertEquals(true, sr.isDestroyed());\n      assertEquals(null, r.getSubregion(\"sr\"));\n      assertEquals(Collections.EMPTY_SET, r.subregions(false));\n    }\n\n\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    int creates = getStats().getCreates();\n    \r\n    \r\n    int destroys = getStats().getDestroys();\n    int invalidates = getStats().getInvalidates();\n    int gets = getStats().getGets();\n    int misses = getStats().getMisses();\n\n    r.put(\"key\", \"value\", cbArg);\n    expee.op = Operation.CREATE;\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    \r\n    r.create(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(null, r.getEntry(\"key\"));\n    assertEquals(null, r.get(\"key\", cbArg));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    r.invalidate(\"key\");\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    r.invalidate(\"key\", cbArg);\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    try {\n      r.localInvalidate(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localInvalidate(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(invalidates, getStats().getInvalidates());\n    checkNoCW();\n    checkNoCL();\n\n    r.destroy(\"key\");\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.destroy(\"key\", cbArg);\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    try {\n      r.localDestroy(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localDestroy(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(destroys, getStats().getDestroys());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(Collections.EMPTY_SET, r.entrySet(true));\n    assertEquals(this.c, r.getCache());\n    r.setUserAttribute(cbArg);\n    assertEquals(cbArg, r.getUserAttribute());\n    checkNoCW();\n    checkNoCL();\n\n    r.put(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(false, r.containsValueForKey(\"key\"));\n    assertEquals(false, r.existsValue(\"this = 'value'\"));\n    {\n      SelectResults sr = r.query(\"this = 'value'\");\n      assertEquals(Collections.EMPTY_SET, sr.asSet());\n    }\n    assertEquals(null, r.selectValue(\"this = 'value'\"));\n    try {\n      r.getRegionDistributedLock();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.getDistributedLock(\"key\");\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.becomeLockGrantor();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.writeToDisk();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    checkNoCW();\n    checkNoCL();\n\n    \r\n    {\n      CacheLoader cl = new CacheLoader() {\n        @Override\n        public Object load(LoaderHelper helper) throws CacheLoaderException {\n          return \"loadedValue\";\n        }\n\n        @Override\n        public void close() {}\n      };\n      r.getAttributesMutator().setCacheLoader(cl);\n      r.get(\"key\", cbArg);\n      gets++;\n      assertEquals(gets, getStats().getGets());\n      misses++;\n      assertEquals(misses, getStats().getMisses());\n      expee.op = Operation.LOCAL_LOAD_CREATE;\n      expee.newValue = \"loadedValue\";\n      checkCW(expee);\n      checkCL(expee);\n      r.getAttributesMutator().setCacheLoader(null);\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/ProxyJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"M"},{"authorDate":"2019-02-12 02:18:49","commitOrder":3,"curCode":"  public void testMapMethods() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n\n    Region r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.cbArg = null;\n    expre.op = Operation.REGION_CREATE;\n    checkNoCW();\n    checkCL(expre);\n\n    long creates = getStats().getCreates();\n    long destroys = getStats().getDestroys();\n    long gets = getStats().getGets();\n    long misses = getStats().getMisses();\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    expee.cbArg = null;\n\n    assertEquals(null, r.put(\"key\", \"value\"));\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    {\n      HashMap m = new HashMap();\n      m.put(\"k1\", \"v1\");\n      m.put(\"k2\", \"v2\");\n      r.putAll(m);\n      assertEquals(0, r.size());\n      \r\n      assertEquals(2, this.cwInvokeCount);\n      assertEquals(2, this.clInvokeCount);\n      clearCallbackState();\n      creates += 2;\n      assertEquals(creates, getStats().getCreates());\n    }\n    assertEquals(false, r.containsKey(\"key\"));\n    assertEquals(false, r.containsValue(\"value\"));\n    assertEquals(Collections.EMPTY_SET, r.entrySet());\n    assertEquals(true, r.isEmpty());\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(0, r.size());\n    assertEquals(Collections.EMPTY_LIST, new ArrayList(r.values()));\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.get(\"key\"));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.remove(\"key\"));\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.key = \"key\";\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.localClear();\n    expre.op = Operation.REGION_LOCAL_CLEAR;\n    checkNoCW();\n    checkCL(expre);\n\n    r.clear();\n    expre.op = Operation.REGION_CLEAR;\n    checkCW(expre);\n    checkCL(expre);\n  }\n","date":"2019-02-12 02:18:49","endLine":903,"groupId":"31731","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1d/8ea5745c1c8d918e77c15edccfb45688f7b908.src","preCode":"  public void testMapMethods() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n\n    Region r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.cbArg = null;\n    expre.op = Operation.REGION_CREATE;\n    checkNoCW();\n    checkCL(expre);\n\n    int creates = getStats().getCreates();\n    \r\n    \r\n    int destroys = getStats().getDestroys();\n    \r\n    int gets = getStats().getGets();\n    int misses = getStats().getMisses();\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    expee.cbArg = null;\n\n    assertEquals(null, r.put(\"key\", \"value\"));\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    {\n      HashMap m = new HashMap();\n      m.put(\"k1\", \"v1\");\n      m.put(\"k2\", \"v2\");\n      r.putAll(m);\n      assertEquals(0, r.size());\n      \r\n      assertEquals(2, this.cwInvokeCount);\n      assertEquals(2, this.clInvokeCount);\n      clearCallbackState();\n      creates += 2;\n      assertEquals(creates, getStats().getCreates());\n    }\n    assertEquals(false, r.containsKey(\"key\"));\n    assertEquals(false, r.containsValue(\"value\"));\n    assertEquals(Collections.EMPTY_SET, r.entrySet());\n    assertEquals(true, r.isEmpty());\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(0, r.size());\n    assertEquals(Collections.EMPTY_LIST, new ArrayList(r.values()));\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.get(\"key\"));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.remove(\"key\"));\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.key = \"key\";\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.localClear();\n    expre.op = Operation.REGION_LOCAL_CLEAR;\n    checkNoCW();\n    checkCL(expre);\n\n    r.clear();\n    expre.op = Operation.REGION_CLEAR;\n    checkCW(expre);\n    checkCL(expre);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/ProxyJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":823,"status":"M"}],"commitId":"2be43b2f35f1ae65bebf6b4dfbe2b329d6dccb2f","commitMessage":"@@@GEODE-6334: Change cache operation stats to longs (#3142)\n\n* Change cache operation stats to longs\n* Use long instead of int for CqQueryOptimized Tests\n* Clean up easy parts of CqQueryOptimized Tests\n* Fix usages of CachePerfStats from ints to longs\n* Add CacheStatistics integration test\n* Remove cachePerfStats.getPuts() testing in backwards compatibility\nDUnit test because it was trying to test old versions when this is all internal\n* Update sanctioned data serializables\n\nCo-authored-by: Michael Oleske <moleske@pivotal.io>\nCo-authored-by: Galen O'Sullivan <gosullivan@pivotal.io>\nCo-authored-by: Kirk Lund <klund@pivotal.io>\n","date":"2019-02-12 02:18:49","modifiedFileCount":"20","status":"M","submitter":"M. Oleske"},{"authorTime":"2019-02-15 02:42:24","codes":[{"authorDate":"2019-02-15 02:42:24","commitOrder":4,"curCode":"  public void testRegionMethods() throws Exception {\n    Object cbArg = new Object();\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n    assertEquals(0, getStats().getRegions());\n    Region r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    assertEquals(\"r\", r.getName());\n    assertEquals(\"/r\", r.getFullPath());\n    assertEquals(null, r.getParentRegion());\n    assertEquals(DataPolicy.EMPTY, r.getAttributes().getDataPolicy());\n    r.getAttributesMutator();\n    try {\n      r.getStatistics();\n      fail(\"expected StatisticsDisabledException\");\n    } catch (StatisticsDisabledException expected) {\n      \r\n    }\n    r.invalidateRegion();\n    expre.op = Operation.REGION_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.invalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion();\n    expre.op = Operation.REGION_LOCAL_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion();\n    assertEquals(true, r.isDestroyed());\n    assertEquals(0, getStats().getRegions());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = null;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = cbArg;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.close();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_CLOSE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n\n    r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    try {\n      r.saveSnapshot(System.out);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    try {\n      r.loadSnapshot(System.in);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    {\n      Region sr = r.createSubregion(\"sr\", af.create());\n      assertEquals(2, getStats().getRegions());\n      expre.r = sr;\n      expre.op = Operation.REGION_CREATE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCL(expre);\n      assertEquals(\"sr\", sr.getName());\n      assertEquals(\"/r/sr\", sr.getFullPath());\n      assertEquals(r, sr.getParentRegion());\n      assertEquals(sr, r.getSubregion(\"sr\"));\n      assertEquals(Collections.singleton(sr), r.subregions(false));\n      sr.close();\n      assertEquals(1, getStats().getRegions());\n      expre.op = Operation.REGION_CLOSE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCWClosed();\n      checkCLClosed();\n      checkCL(expre);\n      assertEquals(true, sr.isDestroyed());\n      assertEquals(null, r.getSubregion(\"sr\"));\n      assertEquals(Collections.EMPTY_SET, r.subregions(false));\n    }\n\n\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    int creates = getStats().getCreates();\n    \r\n    \r\n    int destroys = getStats().getDestroys();\n    int invalidates = getStats().getInvalidates();\n    int gets = getStats().getGets();\n    int misses = getStats().getMisses();\n\n    r.put(\"key\", \"value\", cbArg);\n    expee.op = Operation.CREATE;\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    \r\n    r.create(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(null, r.getEntry(\"key\"));\n    assertEquals(null, r.get(\"key\", cbArg));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    r.invalidate(\"key\");\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    r.invalidate(\"key\", cbArg);\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    try {\n      r.localInvalidate(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localInvalidate(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(invalidates, getStats().getInvalidates());\n    checkNoCW();\n    checkNoCL();\n\n    r.destroy(\"key\");\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.destroy(\"key\", cbArg);\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    try {\n      r.localDestroy(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localDestroy(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(destroys, getStats().getDestroys());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(Collections.EMPTY_SET, r.entrySet(true));\n    assertEquals(this.c, r.getCache());\n    r.setUserAttribute(cbArg);\n    assertEquals(cbArg, r.getUserAttribute());\n    checkNoCW();\n    checkNoCL();\n\n    r.put(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(false, r.containsValueForKey(\"key\"));\n    assertEquals(false, r.existsValue(\"this = 'value'\"));\n    {\n      SelectResults sr = r.query(\"this = 'value'\");\n      assertEquals(Collections.EMPTY_SET, sr.asSet());\n    }\n    assertEquals(null, r.selectValue(\"this = 'value'\"));\n    try {\n      r.getRegionDistributedLock();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.getDistributedLock(\"key\");\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.becomeLockGrantor();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.writeToDisk();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    checkNoCW();\n    checkNoCL();\n\n    \r\n    {\n      CacheLoader cl = new CacheLoader() {\n        @Override\n        public Object load(LoaderHelper helper) throws CacheLoaderException {\n          return \"loadedValue\";\n        }\n\n        @Override\n        public void close() {}\n      };\n      r.getAttributesMutator().setCacheLoader(cl);\n      r.get(\"key\", cbArg);\n      gets++;\n      assertEquals(gets, getStats().getGets());\n      misses++;\n      assertEquals(misses, getStats().getMisses());\n      expee.op = Operation.LOCAL_LOAD_CREATE;\n      expee.newValue = \"loadedValue\";\n      checkCW(expee);\n      checkCL(expee);\n      r.getAttributesMutator().setCacheLoader(null);\n    }\n  }\n","date":"2019-02-16 00:51:13","endLine":819,"groupId":"25107","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegionMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d8/32a321d98f713222ec4713cb8e1a5bcdd918e2.src","preCode":"  public void testRegionMethods() throws Exception {\n    Object cbArg = new Object();\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n    assertEquals(0, getStats().getRegions());\n    Region r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    assertEquals(\"r\", r.getName());\n    assertEquals(\"/r\", r.getFullPath());\n    assertEquals(null, r.getParentRegion());\n    assertEquals(DataPolicy.EMPTY, r.getAttributes().getDataPolicy());\n    r.getAttributesMutator();\n    try {\n      r.getStatistics();\n      fail(\"expected StatisticsDisabledException\");\n    } catch (StatisticsDisabledException expected) {\n      \r\n    }\n    r.invalidateRegion();\n    expre.op = Operation.REGION_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.invalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion();\n    expre.op = Operation.REGION_LOCAL_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion();\n    assertEquals(true, r.isDestroyed());\n    assertEquals(0, getStats().getRegions());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = null;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = cbArg;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.close();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_CLOSE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n\n    r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    try {\n      r.saveSnapshot(System.out);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    try {\n      r.loadSnapshot(System.in);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    {\n      Region sr = r.createSubregion(\"sr\", af.create());\n      assertEquals(2, getStats().getRegions());\n      expre.r = sr;\n      expre.op = Operation.REGION_CREATE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCL(expre);\n      assertEquals(\"sr\", sr.getName());\n      assertEquals(\"/r/sr\", sr.getFullPath());\n      assertEquals(r, sr.getParentRegion());\n      assertEquals(sr, r.getSubregion(\"sr\"));\n      assertEquals(Collections.singleton(sr), r.subregions(false));\n      sr.close();\n      assertEquals(1, getStats().getRegions());\n      expre.op = Operation.REGION_CLOSE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCWClosed();\n      checkCLClosed();\n      checkCL(expre);\n      assertEquals(true, sr.isDestroyed());\n      assertEquals(null, r.getSubregion(\"sr\"));\n      assertEquals(Collections.EMPTY_SET, r.subregions(false));\n    }\n\n\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    long creates = getStats().getCreates();\n    long destroys = getStats().getDestroys();\n    long invalidates = getStats().getInvalidates();\n    long gets = getStats().getGets();\n    long misses = getStats().getMisses();\n\n    r.put(\"key\", \"value\", cbArg);\n    expee.op = Operation.CREATE;\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    \r\n    r.create(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(null, r.getEntry(\"key\"));\n    assertEquals(null, r.get(\"key\", cbArg));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    r.invalidate(\"key\");\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    r.invalidate(\"key\", cbArg);\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    try {\n      r.localInvalidate(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localInvalidate(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(invalidates, getStats().getInvalidates());\n    checkNoCW();\n    checkNoCL();\n\n    r.destroy(\"key\");\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.destroy(\"key\", cbArg);\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    try {\n      r.localDestroy(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localDestroy(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(destroys, getStats().getDestroys());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(Collections.EMPTY_SET, r.entrySet(true));\n    assertEquals(this.c, r.getCache());\n    r.setUserAttribute(cbArg);\n    assertEquals(cbArg, r.getUserAttribute());\n    checkNoCW();\n    checkNoCL();\n\n    r.put(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(false, r.containsValueForKey(\"key\"));\n    assertEquals(false, r.existsValue(\"this = 'value'\"));\n    {\n      SelectResults sr = r.query(\"this = 'value'\");\n      assertEquals(Collections.EMPTY_SET, sr.asSet());\n    }\n    assertEquals(null, r.selectValue(\"this = 'value'\"));\n    try {\n      r.getRegionDistributedLock();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.getDistributedLock(\"key\");\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.becomeLockGrantor();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.writeToDisk();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    checkNoCW();\n    checkNoCL();\n\n    \r\n    {\n      CacheLoader cl = new CacheLoader() {\n        @Override\n        public Object load(LoaderHelper helper) throws CacheLoaderException {\n          return \"loadedValue\";\n        }\n\n        @Override\n        public void close() {}\n      };\n      r.getAttributesMutator().setCacheLoader(cl);\n      r.get(\"key\", cbArg);\n      gets++;\n      assertEquals(gets, getStats().getGets());\n      misses++;\n      assertEquals(misses, getStats().getMisses());\n      expee.op = Operation.LOCAL_LOAD_CREATE;\n      expee.newValue = \"loadedValue\";\n      checkCW(expee);\n      checkCL(expee);\n      r.getAttributesMutator().setCacheLoader(null);\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/ProxyJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"M"},{"authorDate":"2019-02-15 02:42:24","commitOrder":4,"curCode":"  public void testMapMethods() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n\n    Region r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.cbArg = null;\n    expre.op = Operation.REGION_CREATE;\n    checkNoCW();\n    checkCL(expre);\n\n    int creates = getStats().getCreates();\n    \r\n    \r\n    int destroys = getStats().getDestroys();\n    \r\n    int gets = getStats().getGets();\n    int misses = getStats().getMisses();\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    expee.cbArg = null;\n\n    assertEquals(null, r.put(\"key\", \"value\"));\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    {\n      HashMap m = new HashMap();\n      m.put(\"k1\", \"v1\");\n      m.put(\"k2\", \"v2\");\n      r.putAll(m);\n      assertEquals(0, r.size());\n      \r\n      assertEquals(2, this.cwInvokeCount);\n      assertEquals(2, this.clInvokeCount);\n      clearCallbackState();\n      creates += 2;\n      assertEquals(creates, getStats().getCreates());\n    }\n    assertEquals(false, r.containsKey(\"key\"));\n    assertEquals(false, r.containsValue(\"value\"));\n    assertEquals(Collections.EMPTY_SET, r.entrySet());\n    assertEquals(true, r.isEmpty());\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(0, r.size());\n    assertEquals(Collections.EMPTY_LIST, new ArrayList(r.values()));\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.get(\"key\"));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.remove(\"key\"));\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.key = \"key\";\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.localClear();\n    expre.op = Operation.REGION_LOCAL_CLEAR;\n    checkNoCW();\n    checkCL(expre);\n\n    r.clear();\n    expre.op = Operation.REGION_CLEAR;\n    checkCW(expre);\n    checkCL(expre);\n  }\n","date":"2019-02-16 00:51:13","endLine":908,"groupId":"31731","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d8/32a321d98f713222ec4713cb8e1a5bcdd918e2.src","preCode":"  public void testMapMethods() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n\n    Region r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.cbArg = null;\n    expre.op = Operation.REGION_CREATE;\n    checkNoCW();\n    checkCL(expre);\n\n    long creates = getStats().getCreates();\n    long destroys = getStats().getDestroys();\n    long gets = getStats().getGets();\n    long misses = getStats().getMisses();\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    expee.cbArg = null;\n\n    assertEquals(null, r.put(\"key\", \"value\"));\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    {\n      HashMap m = new HashMap();\n      m.put(\"k1\", \"v1\");\n      m.put(\"k2\", \"v2\");\n      r.putAll(m);\n      assertEquals(0, r.size());\n      \r\n      assertEquals(2, this.cwInvokeCount);\n      assertEquals(2, this.clInvokeCount);\n      clearCallbackState();\n      creates += 2;\n      assertEquals(creates, getStats().getCreates());\n    }\n    assertEquals(false, r.containsKey(\"key\"));\n    assertEquals(false, r.containsValue(\"value\"));\n    assertEquals(Collections.EMPTY_SET, r.entrySet());\n    assertEquals(true, r.isEmpty());\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(0, r.size());\n    assertEquals(Collections.EMPTY_LIST, new ArrayList(r.values()));\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.get(\"key\"));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.remove(\"key\"));\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.key = \"key\";\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.localClear();\n    expre.op = Operation.REGION_LOCAL_CLEAR;\n    checkNoCW();\n    checkCL(expre);\n\n    r.clear();\n    expre.op = Operation.REGION_CLEAR;\n    checkCW(expre);\n    checkCL(expre);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/ProxyJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":825,"status":"M"}],"commitId":"8d0bd6420c435c437d37f5ab60dfedfb4d46d2cd","commitMessage":"@@@Revert \"GEODE-6334: Change cache operation stats to longs (#3142)\"\n\nThis reverts commit 2be43b2f35f1ae65bebf6b4dfbe2b329d6dccb2f.\n","date":"2019-02-16 00:51:13","modifiedFileCount":"20","status":"M","submitter":"Michael Oleske"},{"authorTime":"2019-02-24 02:57:23","codes":[{"authorDate":"2019-02-24 02:57:23","commitOrder":5,"curCode":"  public void testRegionMethods() throws Exception {\n    Object cbArg = new Object();\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n    assertEquals(0, getStats().getRegions());\n    Region r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    assertEquals(\"r\", r.getName());\n    assertEquals(\"/r\", r.getFullPath());\n    assertEquals(null, r.getParentRegion());\n    assertEquals(DataPolicy.EMPTY, r.getAttributes().getDataPolicy());\n    r.getAttributesMutator();\n    try {\n      r.getStatistics();\n      fail(\"expected StatisticsDisabledException\");\n    } catch (StatisticsDisabledException expected) {\n      \r\n    }\n    r.invalidateRegion();\n    expre.op = Operation.REGION_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.invalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion();\n    expre.op = Operation.REGION_LOCAL_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion();\n    assertEquals(true, r.isDestroyed());\n    assertEquals(0, getStats().getRegions());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = null;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = cbArg;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.close();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_CLOSE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n\n    r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    try {\n      r.saveSnapshot(System.out);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    try {\n      r.loadSnapshot(System.in);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    {\n      Region sr = r.createSubregion(\"sr\", af.create());\n      assertEquals(2, getStats().getRegions());\n      expre.r = sr;\n      expre.op = Operation.REGION_CREATE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCL(expre);\n      assertEquals(\"sr\", sr.getName());\n      assertEquals(\"/r/sr\", sr.getFullPath());\n      assertEquals(r, sr.getParentRegion());\n      assertEquals(sr, r.getSubregion(\"sr\"));\n      assertEquals(Collections.singleton(sr), r.subregions(false));\n      sr.close();\n      assertEquals(1, getStats().getRegions());\n      expre.op = Operation.REGION_CLOSE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCWClosed();\n      checkCLClosed();\n      checkCL(expre);\n      assertEquals(true, sr.isDestroyed());\n      assertEquals(null, r.getSubregion(\"sr\"));\n      assertEquals(Collections.EMPTY_SET, r.subregions(false));\n    }\n\n\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    long creates = getStats().getCreates();\n    long destroys = getStats().getDestroys();\n    long invalidates = getStats().getInvalidates();\n    long gets = getStats().getGets();\n    long misses = getStats().getMisses();\n\n    r.put(\"key\", \"value\", cbArg);\n    expee.op = Operation.CREATE;\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    \r\n    r.create(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(null, r.getEntry(\"key\"));\n    assertEquals(null, r.get(\"key\", cbArg));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    r.invalidate(\"key\");\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    r.invalidate(\"key\", cbArg);\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    try {\n      r.localInvalidate(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localInvalidate(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(invalidates, getStats().getInvalidates());\n    checkNoCW();\n    checkNoCL();\n\n    r.destroy(\"key\");\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.destroy(\"key\", cbArg);\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    try {\n      r.localDestroy(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localDestroy(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(destroys, getStats().getDestroys());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(Collections.EMPTY_SET, r.entrySet(true));\n    assertEquals(this.c, r.getCache());\n    r.setUserAttribute(cbArg);\n    assertEquals(cbArg, r.getUserAttribute());\n    checkNoCW();\n    checkNoCL();\n\n    r.put(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(false, r.containsValueForKey(\"key\"));\n    assertEquals(false, r.existsValue(\"this = 'value'\"));\n    {\n      SelectResults sr = r.query(\"this = 'value'\");\n      assertEquals(Collections.EMPTY_SET, sr.asSet());\n    }\n    assertEquals(null, r.selectValue(\"this = 'value'\"));\n    try {\n      r.getRegionDistributedLock();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.getDistributedLock(\"key\");\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.becomeLockGrantor();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.writeToDisk();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    checkNoCW();\n    checkNoCL();\n\n    \r\n    {\n      CacheLoader cl = new CacheLoader() {\n        @Override\n        public Object load(LoaderHelper helper) throws CacheLoaderException {\n          return \"loadedValue\";\n        }\n\n        @Override\n        public void close() {}\n      };\n      r.getAttributesMutator().setCacheLoader(cl);\n      r.get(\"key\", cbArg);\n      gets++;\n      assertEquals(gets, getStats().getGets());\n      misses++;\n      assertEquals(misses, getStats().getMisses());\n      expee.op = Operation.LOCAL_LOAD_CREATE;\n      expee.newValue = \"loadedValue\";\n      checkCW(expee);\n      checkCL(expee);\n      r.getAttributesMutator().setCacheLoader(null);\n    }\n  }\n","date":"2019-02-24 02:57:23","endLine":817,"groupId":"17540","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegionMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1d/8ea5745c1c8d918e77c15edccfb45688f7b908.src","preCode":"  public void testRegionMethods() throws Exception {\n    Object cbArg = new Object();\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n    assertEquals(0, getStats().getRegions());\n    Region r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    assertEquals(\"r\", r.getName());\n    assertEquals(\"/r\", r.getFullPath());\n    assertEquals(null, r.getParentRegion());\n    assertEquals(DataPolicy.EMPTY, r.getAttributes().getDataPolicy());\n    r.getAttributesMutator();\n    try {\n      r.getStatistics();\n      fail(\"expected StatisticsDisabledException\");\n    } catch (StatisticsDisabledException expected) {\n      \r\n    }\n    r.invalidateRegion();\n    expre.op = Operation.REGION_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.invalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion();\n    expre.op = Operation.REGION_LOCAL_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion();\n    assertEquals(true, r.isDestroyed());\n    assertEquals(0, getStats().getRegions());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = null;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = cbArg;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.close();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_CLOSE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n\n    r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    try {\n      r.saveSnapshot(System.out);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    try {\n      r.loadSnapshot(System.in);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    {\n      Region sr = r.createSubregion(\"sr\", af.create());\n      assertEquals(2, getStats().getRegions());\n      expre.r = sr;\n      expre.op = Operation.REGION_CREATE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCL(expre);\n      assertEquals(\"sr\", sr.getName());\n      assertEquals(\"/r/sr\", sr.getFullPath());\n      assertEquals(r, sr.getParentRegion());\n      assertEquals(sr, r.getSubregion(\"sr\"));\n      assertEquals(Collections.singleton(sr), r.subregions(false));\n      sr.close();\n      assertEquals(1, getStats().getRegions());\n      expre.op = Operation.REGION_CLOSE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCWClosed();\n      checkCLClosed();\n      checkCL(expre);\n      assertEquals(true, sr.isDestroyed());\n      assertEquals(null, r.getSubregion(\"sr\"));\n      assertEquals(Collections.EMPTY_SET, r.subregions(false));\n    }\n\n\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    int creates = getStats().getCreates();\n    \r\n    \r\n    int destroys = getStats().getDestroys();\n    int invalidates = getStats().getInvalidates();\n    int gets = getStats().getGets();\n    int misses = getStats().getMisses();\n\n    r.put(\"key\", \"value\", cbArg);\n    expee.op = Operation.CREATE;\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    \r\n    r.create(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(null, r.getEntry(\"key\"));\n    assertEquals(null, r.get(\"key\", cbArg));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    r.invalidate(\"key\");\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    r.invalidate(\"key\", cbArg);\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    try {\n      r.localInvalidate(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localInvalidate(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(invalidates, getStats().getInvalidates());\n    checkNoCW();\n    checkNoCL();\n\n    r.destroy(\"key\");\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.destroy(\"key\", cbArg);\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    try {\n      r.localDestroy(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localDestroy(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(destroys, getStats().getDestroys());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(Collections.EMPTY_SET, r.entrySet(true));\n    assertEquals(this.c, r.getCache());\n    r.setUserAttribute(cbArg);\n    assertEquals(cbArg, r.getUserAttribute());\n    checkNoCW();\n    checkNoCL();\n\n    r.put(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(false, r.containsValueForKey(\"key\"));\n    assertEquals(false, r.existsValue(\"this = 'value'\"));\n    {\n      SelectResults sr = r.query(\"this = 'value'\");\n      assertEquals(Collections.EMPTY_SET, sr.asSet());\n    }\n    assertEquals(null, r.selectValue(\"this = 'value'\"));\n    try {\n      r.getRegionDistributedLock();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.getDistributedLock(\"key\");\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.becomeLockGrantor();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.writeToDisk();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    checkNoCW();\n    checkNoCL();\n\n    \r\n    {\n      CacheLoader cl = new CacheLoader() {\n        @Override\n        public Object load(LoaderHelper helper) throws CacheLoaderException {\n          return \"loadedValue\";\n        }\n\n        @Override\n        public void close() {}\n      };\n      r.getAttributesMutator().setCacheLoader(cl);\n      r.get(\"key\", cbArg);\n      gets++;\n      assertEquals(gets, getStats().getGets());\n      misses++;\n      assertEquals(misses, getStats().getMisses());\n      expee.op = Operation.LOCAL_LOAD_CREATE;\n      expee.newValue = \"loadedValue\";\n      checkCW(expee);\n      checkCL(expee);\n      r.getAttributesMutator().setCacheLoader(null);\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/ProxyJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"M"},{"authorDate":"2019-02-24 02:57:23","commitOrder":5,"curCode":"  public void testMapMethods() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n\n    Region r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.cbArg = null;\n    expre.op = Operation.REGION_CREATE;\n    checkNoCW();\n    checkCL(expre);\n\n    long creates = getStats().getCreates();\n    long destroys = getStats().getDestroys();\n    long gets = getStats().getGets();\n    long misses = getStats().getMisses();\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    expee.cbArg = null;\n\n    assertEquals(null, r.put(\"key\", \"value\"));\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    {\n      HashMap m = new HashMap();\n      m.put(\"k1\", \"v1\");\n      m.put(\"k2\", \"v2\");\n      r.putAll(m);\n      assertEquals(0, r.size());\n      \r\n      assertEquals(2, this.cwInvokeCount);\n      assertEquals(2, this.clInvokeCount);\n      clearCallbackState();\n      creates += 2;\n      assertEquals(creates, getStats().getCreates());\n    }\n    assertEquals(false, r.containsKey(\"key\"));\n    assertEquals(false, r.containsValue(\"value\"));\n    assertEquals(Collections.EMPTY_SET, r.entrySet());\n    assertEquals(true, r.isEmpty());\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(0, r.size());\n    assertEquals(Collections.EMPTY_LIST, new ArrayList(r.values()));\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.get(\"key\"));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.remove(\"key\"));\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.key = \"key\";\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.localClear();\n    expre.op = Operation.REGION_LOCAL_CLEAR;\n    checkNoCW();\n    checkCL(expre);\n\n    r.clear();\n    expre.op = Operation.REGION_CLEAR;\n    checkCW(expre);\n    checkCL(expre);\n  }\n","date":"2019-02-24 02:57:23","endLine":903,"groupId":"31731","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1d/8ea5745c1c8d918e77c15edccfb45688f7b908.src","preCode":"  public void testMapMethods() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n\n    Region r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.cbArg = null;\n    expre.op = Operation.REGION_CREATE;\n    checkNoCW();\n    checkCL(expre);\n\n    int creates = getStats().getCreates();\n    \r\n    \r\n    int destroys = getStats().getDestroys();\n    \r\n    int gets = getStats().getGets();\n    int misses = getStats().getMisses();\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    expee.cbArg = null;\n\n    assertEquals(null, r.put(\"key\", \"value\"));\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    {\n      HashMap m = new HashMap();\n      m.put(\"k1\", \"v1\");\n      m.put(\"k2\", \"v2\");\n      r.putAll(m);\n      assertEquals(0, r.size());\n      \r\n      assertEquals(2, this.cwInvokeCount);\n      assertEquals(2, this.clInvokeCount);\n      clearCallbackState();\n      creates += 2;\n      assertEquals(creates, getStats().getCreates());\n    }\n    assertEquals(false, r.containsKey(\"key\"));\n    assertEquals(false, r.containsValue(\"value\"));\n    assertEquals(Collections.EMPTY_SET, r.entrySet());\n    assertEquals(true, r.isEmpty());\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(0, r.size());\n    assertEquals(Collections.EMPTY_LIST, new ArrayList(r.values()));\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.get(\"key\"));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.remove(\"key\"));\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.key = \"key\";\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.localClear();\n    expre.op = Operation.REGION_LOCAL_CLEAR;\n    checkNoCW();\n    checkCL(expre);\n\n    r.clear();\n    expre.op = Operation.REGION_CLEAR;\n    checkCW(expre);\n    checkCL(expre);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/ProxyJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":823,"status":"M"}],"commitId":"c00e1c79ae8fdf4d46e78958275bdde840d81538","commitMessage":"@@@GEODE-6425: Fixes rollover in some cache stats (#3214)\n\nChanges the following CachePerfStats to long:\n - gets\n - misses\n - put\n - update\n - create\n - destroys\n - invalidates \n - clear\n\nHandles the error caused by attempting to retrieve a long type stat as an\nint. Returns the long value as an int with overflow. This is consistent\nwith previous behavior of the stats\n\nCo-authored-by: Helena Bales <hbales@pivotal.io>\nCo-authored-by: Jacob Barrett <jbarrett@pivotal.io>\n","date":"2019-02-24 02:57:23","modifiedFileCount":"18","status":"M","submitter":"Helena Bales"},{"authorTime":"2019-02-24 02:57:23","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":6,"curCode":"  public void testRegionMethods() throws Exception {\n    Object cbArg = new Object();\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n    assertEquals(0, getStats().getRegions());\n    Region r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    assertEquals(\"r\", r.getName());\n    assertEquals(SEPARATOR + \"r\", r.getFullPath());\n    assertEquals(null, r.getParentRegion());\n    assertEquals(DataPolicy.EMPTY, r.getAttributes().getDataPolicy());\n    r.getAttributesMutator();\n    try {\n      r.getStatistics();\n      fail(\"expected StatisticsDisabledException\");\n    } catch (StatisticsDisabledException expected) {\n      \r\n    }\n    r.invalidateRegion();\n    expre.op = Operation.REGION_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.invalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion();\n    expre.op = Operation.REGION_LOCAL_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion();\n    assertEquals(true, r.isDestroyed());\n    assertEquals(0, getStats().getRegions());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = null;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = cbArg;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.close();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_CLOSE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n\n    r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    try {\n      r.saveSnapshot(System.out);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    try {\n      r.loadSnapshot(System.in);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    {\n      Region sr = r.createSubregion(\"sr\", af.create());\n      assertEquals(2, getStats().getRegions());\n      expre.r = sr;\n      expre.op = Operation.REGION_CREATE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCL(expre);\n      assertEquals(\"sr\", sr.getName());\n      assertEquals(SEPARATOR + \"r\" + SEPARATOR + \"sr\", sr.getFullPath());\n      assertEquals(r, sr.getParentRegion());\n      assertEquals(sr, r.getSubregion(\"sr\"));\n      assertEquals(Collections.singleton(sr), r.subregions(false));\n      sr.close();\n      assertEquals(1, getStats().getRegions());\n      expre.op = Operation.REGION_CLOSE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCWClosed();\n      checkCLClosed();\n      checkCL(expre);\n      assertEquals(true, sr.isDestroyed());\n      assertEquals(null, r.getSubregion(\"sr\"));\n      assertEquals(Collections.EMPTY_SET, r.subregions(false));\n    }\n\n\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    long creates = getStats().getCreates();\n    long destroys = getStats().getDestroys();\n    long invalidates = getStats().getInvalidates();\n    long gets = getStats().getGets();\n    long misses = getStats().getMisses();\n\n    r.put(\"key\", \"value\", cbArg);\n    expee.op = Operation.CREATE;\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    \r\n    r.create(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(null, r.getEntry(\"key\"));\n    assertEquals(null, r.get(\"key\", cbArg));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    r.invalidate(\"key\");\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    r.invalidate(\"key\", cbArg);\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    try {\n      r.localInvalidate(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localInvalidate(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(invalidates, getStats().getInvalidates());\n    checkNoCW();\n    checkNoCL();\n\n    r.destroy(\"key\");\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.destroy(\"key\", cbArg);\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    try {\n      r.localDestroy(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localDestroy(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(destroys, getStats().getDestroys());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(Collections.EMPTY_SET, r.entrySet(true));\n    assertEquals(this.c, r.getCache());\n    r.setUserAttribute(cbArg);\n    assertEquals(cbArg, r.getUserAttribute());\n    checkNoCW();\n    checkNoCL();\n\n    r.put(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(false, r.containsValueForKey(\"key\"));\n    assertEquals(false, r.existsValue(\"this = 'value'\"));\n    {\n      SelectResults sr = r.query(\"this = 'value'\");\n      assertEquals(Collections.EMPTY_SET, sr.asSet());\n    }\n    assertEquals(null, r.selectValue(\"this = 'value'\"));\n    try {\n      r.getRegionDistributedLock();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.getDistributedLock(\"key\");\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.becomeLockGrantor();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.writeToDisk();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    checkNoCW();\n    checkNoCL();\n\n    \r\n    {\n      CacheLoader cl = new CacheLoader() {\n        @Override\n        public Object load(LoaderHelper helper) throws CacheLoaderException {\n          return \"loadedValue\";\n        }\n\n        @Override\n        public void close() {}\n      };\n      r.getAttributesMutator().setCacheLoader(cl);\n      r.get(\"key\", cbArg);\n      gets++;\n      assertEquals(gets, getStats().getGets());\n      misses++;\n      assertEquals(misses, getStats().getMisses());\n      expee.op = Operation.LOCAL_LOAD_CREATE;\n      expee.newValue = \"loadedValue\";\n      checkCW(expee);\n      checkCL(expee);\n      r.getAttributesMutator().setCacheLoader(null);\n    }\n  }\n","date":"2020-05-29 00:37:39","endLine":818,"groupId":"104469","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegionMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/22/9dd09774da244af08a17e95d0f612a276bcb30.src","preCode":"  public void testRegionMethods() throws Exception {\n    Object cbArg = new Object();\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n    assertEquals(0, getStats().getRegions());\n    Region r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    assertEquals(\"r\", r.getName());\n    assertEquals(\"/r\", r.getFullPath());\n    assertEquals(null, r.getParentRegion());\n    assertEquals(DataPolicy.EMPTY, r.getAttributes().getDataPolicy());\n    r.getAttributesMutator();\n    try {\n      r.getStatistics();\n      fail(\"expected StatisticsDisabledException\");\n    } catch (StatisticsDisabledException expected) {\n      \r\n    }\n    r.invalidateRegion();\n    expre.op = Operation.REGION_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.invalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion();\n    expre.op = Operation.REGION_LOCAL_INVALIDATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localInvalidateRegion(cbArg);\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion();\n    assertEquals(true, r.isDestroyed());\n    assertEquals(0, getStats().getRegions());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = null;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.destroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_DESTROY;\n    expre.cbArg = cbArg;\n    checkCW(expre);\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.localDestroyRegion(cbArg);\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_LOCAL_DESTROY;\n    expre.cbArg = cbArg;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n    r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    r.close();\n    assertEquals(0, getStats().getRegions());\n    assertEquals(true, r.isDestroyed());\n    expre.op = Operation.REGION_CLOSE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCWClosed();\n    checkCLClosed();\n    checkCL(expre);\n\n\n    r = this.c.createRegion(\"r\", af.create());\n    assertEquals(1, getStats().getRegions());\n    expre.r = r;\n    expre.op = Operation.REGION_CREATE;\n    expre.cbArg = null;\n    checkNoCW();\n    checkCL(expre);\n\n    try {\n      r.saveSnapshot(System.out);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    try {\n      r.loadSnapshot(System.in);\n      fail(\"expected UnsupportedOperationException\");\n    } catch (UnsupportedOperationException expected) {\n    }\n    {\n      Region sr = r.createSubregion(\"sr\", af.create());\n      assertEquals(2, getStats().getRegions());\n      expre.r = sr;\n      expre.op = Operation.REGION_CREATE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCL(expre);\n      assertEquals(\"sr\", sr.getName());\n      assertEquals(\"/r/sr\", sr.getFullPath());\n      assertEquals(r, sr.getParentRegion());\n      assertEquals(sr, r.getSubregion(\"sr\"));\n      assertEquals(Collections.singleton(sr), r.subregions(false));\n      sr.close();\n      assertEquals(1, getStats().getRegions());\n      expre.op = Operation.REGION_CLOSE;\n      expre.cbArg = null;\n      checkNoCW();\n      checkCWClosed();\n      checkCLClosed();\n      checkCL(expre);\n      assertEquals(true, sr.isDestroyed());\n      assertEquals(null, r.getSubregion(\"sr\"));\n      assertEquals(Collections.EMPTY_SET, r.subregions(false));\n    }\n\n\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    long creates = getStats().getCreates();\n    long destroys = getStats().getDestroys();\n    long invalidates = getStats().getInvalidates();\n    long gets = getStats().getGets();\n    long misses = getStats().getMisses();\n\n    r.put(\"key\", \"value\", cbArg);\n    expee.op = Operation.CREATE;\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    \r\n    r.create(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(null, r.getEntry(\"key\"));\n    assertEquals(null, r.get(\"key\", cbArg));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    r.invalidate(\"key\");\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    r.invalidate(\"key\", cbArg);\n    invalidates++;\n    assertEquals(invalidates, getStats().getInvalidates());\n    expee.op = Operation.INVALIDATE;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkNoCW();\n    checkCL(expee);\n\n    try {\n      r.localInvalidate(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localInvalidate(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(invalidates, getStats().getInvalidates());\n    checkNoCW();\n    checkNoCL();\n\n    r.destroy(\"key\");\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = null;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.destroy(\"key\", cbArg);\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.cbArg = cbArg;\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    try {\n      r.localDestroy(\"key\");\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    try {\n      r.localDestroy(\"key\", cbArg);\n      fail(\"expected EntryNotFoundException\");\n    } catch (EntryNotFoundException expected) {\n    }\n    assertEquals(destroys, getStats().getDestroys());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(Collections.EMPTY_SET, r.entrySet(true));\n    assertEquals(this.c, r.getCache());\n    r.setUserAttribute(cbArg);\n    assertEquals(cbArg, r.getUserAttribute());\n    checkNoCW();\n    checkNoCL();\n\n    r.put(\"key\", \"value\", cbArg);\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.cbArg = cbArg;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    assertEquals(false, r.containsValueForKey(\"key\"));\n    assertEquals(false, r.existsValue(\"this = 'value'\"));\n    {\n      SelectResults sr = r.query(\"this = 'value'\");\n      assertEquals(Collections.EMPTY_SET, sr.asSet());\n    }\n    assertEquals(null, r.selectValue(\"this = 'value'\"));\n    try {\n      r.getRegionDistributedLock();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.getDistributedLock(\"key\");\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.becomeLockGrantor();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    try {\n      r.writeToDisk();\n      fail(\"expected IllegalStateException\");\n    } catch (IllegalStateException expected) {\n      \r\n    }\n    checkNoCW();\n    checkNoCL();\n\n    \r\n    {\n      CacheLoader cl = new CacheLoader() {\n        @Override\n        public Object load(LoaderHelper helper) throws CacheLoaderException {\n          return \"loadedValue\";\n        }\n\n        @Override\n        public void close() {}\n      };\n      r.getAttributesMutator().setCacheLoader(cl);\n      r.get(\"key\", cbArg);\n      gets++;\n      assertEquals(gets, getStats().getGets());\n      misses++;\n      assertEquals(misses, getStats().getMisses());\n      expee.op = Operation.LOCAL_LOAD_CREATE;\n      expee.newValue = \"loadedValue\";\n      checkCW(expee);\n      checkCL(expee);\n      r.getAttributesMutator().setCacheLoader(null);\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/ProxyJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"M"},{"authorDate":"2019-02-24 02:57:23","commitOrder":6,"curCode":"  public void testMapMethods() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n\n    Region r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.cbArg = null;\n    expre.op = Operation.REGION_CREATE;\n    checkNoCW();\n    checkCL(expre);\n\n    long creates = getStats().getCreates();\n    long destroys = getStats().getDestroys();\n    long gets = getStats().getGets();\n    long misses = getStats().getMisses();\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    expee.cbArg = null;\n\n    assertEquals(null, r.put(\"key\", \"value\"));\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    {\n      HashMap m = new HashMap();\n      m.put(\"k1\", \"v1\");\n      m.put(\"k2\", \"v2\");\n      r.putAll(m);\n      assertEquals(0, r.size());\n      \r\n      assertEquals(2, this.cwInvokeCount);\n      assertEquals(2, this.clInvokeCount);\n      clearCallbackState();\n      creates += 2;\n      assertEquals(creates, getStats().getCreates());\n    }\n    assertEquals(false, r.containsKey(\"key\"));\n    assertEquals(false, r.containsValue(\"value\"));\n    assertEquals(Collections.EMPTY_SET, r.entrySet());\n    assertEquals(true, r.isEmpty());\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(0, r.size());\n    assertEquals(Collections.EMPTY_LIST, new ArrayList(r.values()));\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.get(\"key\"));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.remove(\"key\"));\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.key = \"key\";\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.localClear();\n    expre.op = Operation.REGION_LOCAL_CLEAR;\n    checkNoCW();\n    checkCL(expre);\n\n    r.clear();\n    expre.op = Operation.REGION_CLEAR;\n    checkCW(expre);\n    checkCL(expre);\n  }\n","date":"2019-02-24 02:57:23","endLine":903,"groupId":"104469","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapMethods","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1d/8ea5745c1c8d918e77c15edccfb45688f7b908.src","preCode":"  public void testMapMethods() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setDataPolicy(DataPolicy.EMPTY);\n    setCallbacks(af);\n    clearCallbackState();\n    ExpectedRegionEvent expre = new ExpectedRegionEvent();\n\n    Region r = this.c.createRegion(\"r\", af.create());\n    expre.r = r;\n    expre.cbArg = null;\n    expre.op = Operation.REGION_CREATE;\n    checkNoCW();\n    checkCL(expre);\n\n    long creates = getStats().getCreates();\n    long destroys = getStats().getDestroys();\n    long gets = getStats().getGets();\n    long misses = getStats().getMisses();\n    ExpectedEntryEvent expee = new ExpectedEntryEvent();\n    expee.r = r;\n    expee.key = \"key\";\n    expee.cbArg = null;\n\n    assertEquals(null, r.put(\"key\", \"value\"));\n    creates++;\n    assertEquals(creates, getStats().getCreates());\n    expee.op = Operation.CREATE;\n    expee.newValue = \"value\";\n    checkCW(expee);\n    checkCL(expee);\n\n    {\n      HashMap m = new HashMap();\n      m.put(\"k1\", \"v1\");\n      m.put(\"k2\", \"v2\");\n      r.putAll(m);\n      assertEquals(0, r.size());\n      \r\n      assertEquals(2, this.cwInvokeCount);\n      assertEquals(2, this.clInvokeCount);\n      clearCallbackState();\n      creates += 2;\n      assertEquals(creates, getStats().getCreates());\n    }\n    assertEquals(false, r.containsKey(\"key\"));\n    assertEquals(false, r.containsValue(\"value\"));\n    assertEquals(Collections.EMPTY_SET, r.entrySet());\n    assertEquals(true, r.isEmpty());\n    assertEquals(Collections.EMPTY_SET, r.keySet());\n    assertEquals(0, r.size());\n    assertEquals(Collections.EMPTY_LIST, new ArrayList(r.values()));\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.get(\"key\"));\n    gets++;\n    assertEquals(gets, getStats().getGets());\n    misses++;\n    assertEquals(misses, getStats().getMisses());\n    checkNoCW();\n    checkNoCL();\n\n    assertEquals(null, r.remove(\"key\"));\n    destroys++;\n    assertEquals(destroys, getStats().getDestroys());\n    expee.op = Operation.DESTROY;\n    expee.key = \"key\";\n    expee.newValue = null;\n    checkCW(expee);\n    checkCL(expee);\n\n    r.localClear();\n    expre.op = Operation.REGION_LOCAL_CLEAR;\n    checkNoCW();\n    checkCL(expre);\n\n    r.clear();\n    expre.op = Operation.REGION_CLEAR;\n    checkCW(expre);\n    checkCL(expre);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/ProxyJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":823,"status":"N"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
