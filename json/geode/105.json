[{"authorTime":"2019-12-06 22:05:35","codes":[{"authorDate":"2019-12-06 22:05:35","commitOrder":1,"curCode":"  private ResultModel getMemberMetrics(DistributedMember distributedMember,\n      String export_to_report_to, String[] categoriesArr, int cacheServerPort,\n      StringBuilder csvBuilder) {\n    final SystemManagementService managementService =\n        (SystemManagementService) getManagementService();\n\n    ObjectName memberMBeanName = managementService.getMemberMBeanName(distributedMember);\n    MemberMXBean memberMxBean =\n        managementService.getMBeanInstance(memberMBeanName, MemberMXBean.class);\n    ObjectName csMxBeanName;\n    CacheServerMXBean csMxBean = null;\n\n    if (memberMxBean == null) {\n      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR, \"Member MBean for \"\n          + MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember) + \" not found\");\n      return ResultModel.createError(errorMessage);\n    }\n\n    if (cacheServerPort != -1) {\n      csMxBeanName = managementService.getCacheServerMBeanName(cacheServerPort, distributedMember);\n      csMxBean = managementService.getMBeanInstance(csMxBeanName, CacheServerMXBean.class);\n\n      if (csMxBean == null) {\n        return ResultModel.createError(\n            CliStrings.format(CliStrings.SHOW_METRICS__CACHE__SERVER__NOT__FOUND,\n                cacheServerPort, MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember)));\n      }\n    }\n\n    JVMMetrics jvmMetrics = memberMxBean.showJVMMetrics();\n\n    ResultModel result = new ResultModel();\n    TabularResultModel metricsTable = result.addTable(\"member-metrics\");\n    metricsTable.setHeader(\"Member Metrics\");\n\n    List<Category> fullCategories =\n        csMxBean != null ? MEMBER_WITH_PORT_METRIC_CATEGORIES : MEMBER_METRIC_CATEGORIES;\n    Set<Category> categoriesToDisplay = ArrayUtils.isNotEmpty(categoriesArr)\n        ? getCategorySet(categoriesArr) : new HashSet<>(fullCategories);\n\n    writeMemberMetricValues(memberMxBean, jvmMetrics, metricsTable, csvBuilder,\n        categoriesToDisplay);\n    if (csMxBean != null) {\n      writeCacheServerMetricValues(csMxBean, metricsTable, csvBuilder, categoriesToDisplay);\n    }\n\n    if (StringUtils.isNotEmpty(export_to_report_to)) {\n      result.addFile(export_to_report_to, csvBuilder != null ? csvBuilder.toString() : null);\n    }\n\n    return result;\n  }\n","date":"2019-12-06 22:05:35","endLine":237,"groupId":"1669","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getMemberMetrics","params":"(DistributedMemberdistributedMember@Stringexport_to_report_to@String[]categoriesArr@intcacheServerPort@StringBuildercsvBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ec/7ef0729d30e2fc2847e00bcf212f3ab603a870.src","preCode":"  private ResultModel getMemberMetrics(DistributedMember distributedMember,\n      String export_to_report_to, String[] categoriesArr, int cacheServerPort,\n      StringBuilder csvBuilder) {\n    final SystemManagementService managementService =\n        (SystemManagementService) getManagementService();\n\n    ObjectName memberMBeanName = managementService.getMemberMBeanName(distributedMember);\n    MemberMXBean memberMxBean =\n        managementService.getMBeanInstance(memberMBeanName, MemberMXBean.class);\n    ObjectName csMxBeanName;\n    CacheServerMXBean csMxBean = null;\n\n    if (memberMxBean == null) {\n      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR, \"Member MBean for \"\n          + MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember) + \" not found\");\n      return ResultModel.createError(errorMessage);\n    }\n\n    if (cacheServerPort != -1) {\n      csMxBeanName = managementService.getCacheServerMBeanName(cacheServerPort, distributedMember);\n      csMxBean = managementService.getMBeanInstance(csMxBeanName, CacheServerMXBean.class);\n\n      if (csMxBean == null) {\n        return ResultModel.createError(\n            CliStrings.format(CliStrings.SHOW_METRICS__CACHE__SERVER__NOT__FOUND,\n                cacheServerPort, MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember)));\n      }\n    }\n\n    JVMMetrics jvmMetrics = memberMxBean.showJVMMetrics();\n\n    ResultModel result = new ResultModel();\n    TabularResultModel metricsTable = result.addTable(\"member-metrics\");\n    metricsTable.setHeader(\"Member Metrics\");\n\n    List<Category> fullCategories =\n        csMxBean != null ? MEMBER_WITH_PORT_METRIC_CATEGORIES : MEMBER_METRIC_CATEGORIES;\n    Set<Category> categoriesToDisplay = ArrayUtils.isNotEmpty(categoriesArr)\n        ? getCategorySet(categoriesArr) : new HashSet<>(fullCategories);\n\n    writeMemberMetricValues(memberMxBean, jvmMetrics, metricsTable, csvBuilder,\n        categoriesToDisplay);\n    if (csMxBean != null) {\n      writeCacheServerMetricValues(csMxBean, metricsTable, csvBuilder, categoriesToDisplay);\n    }\n\n    if (StringUtils.isNotEmpty(export_to_report_to)) {\n      result.addFile(export_to_report_to, csvBuilder != null ? csvBuilder.toString() : null);\n    }\n\n    return result;\n  }\n","realPath":"geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ShowMetricsCommand.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"B"},{"authorDate":"2019-12-06 22:05:35","commitOrder":1,"curCode":"  private ResultModel getRegionMetricsFromMember(String regionName,\n      DistributedMember distributedMember, String export_to_report_to, String[] categoriesArr,\n      StringBuilder csvBuilder) {\n\n    final SystemManagementService managementService = getManagementService();\n\n    ObjectName regionMBeanName =\n        managementService.getRegionMBeanName(distributedMember, regionName);\n    RegionMXBean regionMxBean =\n        managementService.getMBeanInstance(regionMBeanName, RegionMXBean.class);\n\n    if (regionMxBean == null) {\n      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR,\n          \"Region MBean for \" + regionName + \" on member \"\n              + MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember) + \" not found\");\n      return ResultModel.createError(errorMessage);\n    }\n\n    ResultModel result = new ResultModel();\n    TabularResultModel metricsTable = result.addTable(\"metrics\");\n    metricsTable.setHeader(\"Metrics for region:\" + regionName + \" On Member \"\n        + MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember));\n\n    Set<Category> categoriesToDisplay = ArrayUtils.isNotEmpty(categoriesArr)\n        ? getCategorySet(categoriesArr) : new HashSet<>(REGION_METRIC_CATEGORIES);\n\n    writeRegionMetricValues(regionMxBean, metricsTable, csvBuilder, categoriesToDisplay);\n    if (StringUtils.isNotEmpty(export_to_report_to)) {\n      result.addFile(export_to_report_to, csvBuilder != null ? csvBuilder.toString() : null);\n    }\n\n    return result;\n  }\n","date":"2019-12-06 22:05:35","endLine":311,"groupId":"1671","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getRegionMetricsFromMember","params":"(StringregionName@DistributedMemberdistributedMember@Stringexport_to_report_to@String[]categoriesArr@StringBuildercsvBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ec/7ef0729d30e2fc2847e00bcf212f3ab603a870.src","preCode":"  private ResultModel getRegionMetricsFromMember(String regionName,\n      DistributedMember distributedMember, String export_to_report_to, String[] categoriesArr,\n      StringBuilder csvBuilder) {\n\n    final SystemManagementService managementService = getManagementService();\n\n    ObjectName regionMBeanName =\n        managementService.getRegionMBeanName(distributedMember, regionName);\n    RegionMXBean regionMxBean =\n        managementService.getMBeanInstance(regionMBeanName, RegionMXBean.class);\n\n    if (regionMxBean == null) {\n      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR,\n          \"Region MBean for \" + regionName + \" on member \"\n              + MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember) + \" not found\");\n      return ResultModel.createError(errorMessage);\n    }\n\n    ResultModel result = new ResultModel();\n    TabularResultModel metricsTable = result.addTable(\"metrics\");\n    metricsTable.setHeader(\"Metrics for region:\" + regionName + \" On Member \"\n        + MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember));\n\n    Set<Category> categoriesToDisplay = ArrayUtils.isNotEmpty(categoriesArr)\n        ? getCategorySet(categoriesArr) : new HashSet<>(REGION_METRIC_CATEGORIES);\n\n    writeRegionMetricValues(regionMxBean, metricsTable, csvBuilder, categoriesToDisplay);\n    if (StringUtils.isNotEmpty(export_to_report_to)) {\n      result.addFile(export_to_report_to, csvBuilder != null ? csvBuilder.toString() : null);\n    }\n\n    return result;\n  }\n","realPath":"geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ShowMetricsCommand.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"B"}],"commitId":"d5a191ec02bcff8ebfd090484b50a63ec9352f8e","commitMessage":"@@@GEODE-7536 - Break Gfsh out into separate module (#4422)\n\n\n- ManagementUtils is split from CliUtil with non-CLI methods.\n- Introduce new CommandProcessor interface which is a CacheService. This\n  is implemented by OnlineCommandProcessor and is used in\n  MemberMBeanBridge.\n- Remove try/catch from ClusterConfigurationStatusRetriever since any\n  exception will be handled at a higher level.\n","date":"2019-12-06 22:05:35","modifiedFileCount":"125","status":"B","submitter":"Patrick Johnson"},{"authorTime":"2019-12-06 22:05:35","codes":[{"authorDate":"2020-03-06 14:50:58","commitOrder":2,"curCode":"  private ResultModel getMemberMetrics(DistributedMember distributedMember,\n      String export_to_report_to, String[] categoriesArr, int cacheServerPort,\n      StringBuilder csvBuilder) {\n    final SystemManagementService managementService = getManagementService();\n\n    ObjectName memberMBeanName = managementService.getMemberMBeanName(distributedMember);\n    MemberMXBean memberMxBean =\n        managementService.getMBeanInstance(memberMBeanName, MemberMXBean.class);\n    ObjectName csMxBeanName;\n    CacheServerMXBean csMxBean = null;\n\n    if (memberMxBean == null) {\n      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR, \"Member MBean for \"\n          + MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember) + \" not found\");\n      return ResultModel.createError(errorMessage);\n    }\n\n    if (cacheServerPort != -1) {\n      csMxBeanName = managementService.getCacheServerMBeanName(cacheServerPort, distributedMember);\n      csMxBean = managementService.getMBeanInstance(csMxBeanName, CacheServerMXBean.class);\n\n      if (csMxBean == null) {\n        return ResultModel.createError(\n            CliStrings.format(CliStrings.SHOW_METRICS__CACHE__SERVER__NOT__FOUND,\n                cacheServerPort, MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember)));\n      }\n    }\n\n    JVMMetrics jvmMetrics = memberMxBean.showJVMMetrics();\n\n    ResultModel result = new ResultModel();\n    TabularResultModel metricsTable = result.addTable(\"member-metrics\");\n    metricsTable.setHeader(\"Member Metrics\");\n\n    List<Category> fullCategories =\n        csMxBean != null ? MEMBER_WITH_PORT_METRIC_CATEGORIES : MEMBER_METRIC_CATEGORIES;\n    Set<Category> categoriesToDisplay = ArrayUtils.isNotEmpty(categoriesArr)\n        ? getCategorySet(categoriesArr) : new HashSet<>(fullCategories);\n\n    writeMemberMetricValues(memberMxBean, jvmMetrics, metricsTable, csvBuilder,\n        categoriesToDisplay);\n    if (csMxBean != null) {\n      writeCacheServerMetricValues(csMxBean, metricsTable, csvBuilder, categoriesToDisplay);\n    }\n\n    if (StringUtils.isNotEmpty(export_to_report_to)) {\n      result.addFile(export_to_report_to, csvBuilder != null ? csvBuilder.toString() : null);\n    }\n\n    return result;\n  }\n","date":"2020-03-14 08:40:00","endLine":236,"groupId":"105","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getMemberMetrics","params":"(DistributedMemberdistributedMember@Stringexport_to_report_to@String[]categoriesArr@intcacheServerPort@StringBuildercsvBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8a/d698dabf1b6031adb3d8d1a27b2436bf38dd63.src","preCode":"  private ResultModel getMemberMetrics(DistributedMember distributedMember,\n      String export_to_report_to, String[] categoriesArr, int cacheServerPort,\n      StringBuilder csvBuilder) {\n    final SystemManagementService managementService =\n        (SystemManagementService) getManagementService();\n\n    ObjectName memberMBeanName = managementService.getMemberMBeanName(distributedMember);\n    MemberMXBean memberMxBean =\n        managementService.getMBeanInstance(memberMBeanName, MemberMXBean.class);\n    ObjectName csMxBeanName;\n    CacheServerMXBean csMxBean = null;\n\n    if (memberMxBean == null) {\n      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR, \"Member MBean for \"\n          + MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember) + \" not found\");\n      return ResultModel.createError(errorMessage);\n    }\n\n    if (cacheServerPort != -1) {\n      csMxBeanName = managementService.getCacheServerMBeanName(cacheServerPort, distributedMember);\n      csMxBean = managementService.getMBeanInstance(csMxBeanName, CacheServerMXBean.class);\n\n      if (csMxBean == null) {\n        return ResultModel.createError(\n            CliStrings.format(CliStrings.SHOW_METRICS__CACHE__SERVER__NOT__FOUND,\n                cacheServerPort, MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember)));\n      }\n    }\n\n    JVMMetrics jvmMetrics = memberMxBean.showJVMMetrics();\n\n    ResultModel result = new ResultModel();\n    TabularResultModel metricsTable = result.addTable(\"member-metrics\");\n    metricsTable.setHeader(\"Member Metrics\");\n\n    List<Category> fullCategories =\n        csMxBean != null ? MEMBER_WITH_PORT_METRIC_CATEGORIES : MEMBER_METRIC_CATEGORIES;\n    Set<Category> categoriesToDisplay = ArrayUtils.isNotEmpty(categoriesArr)\n        ? getCategorySet(categoriesArr) : new HashSet<>(fullCategories);\n\n    writeMemberMetricValues(memberMxBean, jvmMetrics, metricsTable, csvBuilder,\n        categoriesToDisplay);\n    if (csMxBean != null) {\n      writeCacheServerMetricValues(csMxBean, metricsTable, csvBuilder, categoriesToDisplay);\n    }\n\n    if (StringUtils.isNotEmpty(export_to_report_to)) {\n      result.addFile(export_to_report_to, csvBuilder != null ? csvBuilder.toString() : null);\n    }\n\n    return result;\n  }\n","realPath":"geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ShowMetricsCommand.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2019-12-06 22:05:35","commitOrder":2,"curCode":"  private ResultModel getRegionMetricsFromMember(String regionName,\n      DistributedMember distributedMember, String export_to_report_to, String[] categoriesArr,\n      StringBuilder csvBuilder) {\n\n    final SystemManagementService managementService = getManagementService();\n\n    ObjectName regionMBeanName =\n        managementService.getRegionMBeanName(distributedMember, regionName);\n    RegionMXBean regionMxBean =\n        managementService.getMBeanInstance(regionMBeanName, RegionMXBean.class);\n\n    if (regionMxBean == null) {\n      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR,\n          \"Region MBean for \" + regionName + \" on member \"\n              + MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember) + \" not found\");\n      return ResultModel.createError(errorMessage);\n    }\n\n    ResultModel result = new ResultModel();\n    TabularResultModel metricsTable = result.addTable(\"metrics\");\n    metricsTable.setHeader(\"Metrics for region:\" + regionName + \" On Member \"\n        + MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember));\n\n    Set<Category> categoriesToDisplay = ArrayUtils.isNotEmpty(categoriesArr)\n        ? getCategorySet(categoriesArr) : new HashSet<>(REGION_METRIC_CATEGORIES);\n\n    writeRegionMetricValues(regionMxBean, metricsTable, csvBuilder, categoriesToDisplay);\n    if (StringUtils.isNotEmpty(export_to_report_to)) {\n      result.addFile(export_to_report_to, csvBuilder != null ? csvBuilder.toString() : null);\n    }\n\n    return result;\n  }\n","date":"2019-12-06 22:05:35","endLine":311,"groupId":"105","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getRegionMetricsFromMember","params":"(StringregionName@DistributedMemberdistributedMember@Stringexport_to_report_to@String[]categoriesArr@StringBuildercsvBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ec/7ef0729d30e2fc2847e00bcf212f3ab603a870.src","preCode":"  private ResultModel getRegionMetricsFromMember(String regionName,\n      DistributedMember distributedMember, String export_to_report_to, String[] categoriesArr,\n      StringBuilder csvBuilder) {\n\n    final SystemManagementService managementService = getManagementService();\n\n    ObjectName regionMBeanName =\n        managementService.getRegionMBeanName(distributedMember, regionName);\n    RegionMXBean regionMxBean =\n        managementService.getMBeanInstance(regionMBeanName, RegionMXBean.class);\n\n    if (regionMxBean == null) {\n      String errorMessage = CliStrings.format(CliStrings.SHOW_METRICS__ERROR,\n          \"Region MBean for \" + regionName + \" on member \"\n              + MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember) + \" not found\");\n      return ResultModel.createError(errorMessage);\n    }\n\n    ResultModel result = new ResultModel();\n    TabularResultModel metricsTable = result.addTable(\"metrics\");\n    metricsTable.setHeader(\"Metrics for region:\" + regionName + \" On Member \"\n        + MBeanJMXAdapter.getMemberNameOrUniqueId(distributedMember));\n\n    Set<Category> categoriesToDisplay = ArrayUtils.isNotEmpty(categoriesArr)\n        ? getCategorySet(categoriesArr) : new HashSet<>(REGION_METRIC_CATEGORIES);\n\n    writeRegionMetricValues(regionMxBean, metricsTable, csvBuilder, categoriesToDisplay);\n    if (StringUtils.isNotEmpty(export_to_report_to)) {\n      result.addFile(export_to_report_to, csvBuilder != null ? csvBuilder.toString() : null);\n    }\n\n    return result;\n  }\n","realPath":"geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ShowMetricsCommand.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"N"}],"commitId":"0138ab56be6215d1d256f110b672a37659222150","commitMessage":"@@@GEODE-7869: Cleanup warnings in geode-gfsh\n","date":"2020-03-14 08:40:00","modifiedFileCount":"197","status":"M","submitter":"Jacob Barrett"}]
