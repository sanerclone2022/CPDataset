[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void createPool(VM vm, final String poolName, final String[] servers, final int[] ports,\n      final String redundancyLevel) {\n    vm.invoke(new CacheSerializableRunnable(\"createPool :\" + poolName) {\n      public void run2() throws CacheException {\n        \r\n        getCache();\n\n        PoolFactory cpf = PoolManager.createFactory();\n        cpf.setSubscriptionEnabled(true);\n\n        if (redundancyLevel != null) {\n          int redundancy = Integer.parseInt(redundancyLevel);\n          cpf.setSubscriptionRedundancy(redundancy);\n        }\n\n        for (int i = 0; i < servers.length; i++) {\n          LogWriterUtils.getLogWriter()\n              .info(\"### Adding to Pool. ### Server : \" + servers[i] + \" Port : \" + ports[i]);\n          cpf.addServer(servers[i], ports[i]);\n        }\n\n        cpf.create(poolName);\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":1724,"groupId":"31737","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createPool","params":"(VMvm@finalStringpoolName@finalString[]servers@finalint[]ports@finalStringredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/fc/7d640c734bf636b80f7ad66a98bc6d9813004c.src","preCode":"  public void createPool(VM vm, final String poolName, final String[] servers, final int[] ports,\n      final String redundancyLevel) {\n    vm.invoke(new CacheSerializableRunnable(\"createPool :\" + poolName) {\n      public void run2() throws CacheException {\n        \r\n        getCache();\n\n        PoolFactory cpf = PoolManager.createFactory();\n        cpf.setSubscriptionEnabled(true);\n\n        if (redundancyLevel != null) {\n          int redundancy = Integer.parseInt(redundancyLevel);\n          cpf.setSubscriptionRedundancy(redundancy);\n        }\n\n        for (int i = 0; i < servers.length; i++) {\n          LogWriterUtils.getLogWriter()\n              .info(\"### Adding to Pool. ### Server : \" + servers[i] + \" Port : \" + ports[i]);\n          cpf.addServer(servers[i], ports[i]);\n        }\n\n        cpf.create(poolName);\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PrCqUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1700,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void createPool(VM vm, final String poolName, final String[] servers, final int[] ports,\n      final String redundancyLevel) {\n    vm.invoke(new CacheSerializableRunnable(\"createPool :\" + poolName) {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        getCache();\n        IgnoredException.addIgnoredException(\"java.net.ConnectException\");\n\n        PoolFactory cpf = PoolManager.createFactory();\n        cpf.setSubscriptionEnabled(true);\n\n        if (redundancyLevel != null) {\n          int redundancy = Integer.parseInt(redundancyLevel);\n          cpf.setSubscriptionRedundancy(redundancy);\n        }\n\n        for (int i = 0; i < servers.length; i++) {\n          LogWriterUtils.getLogWriter()\n              .info(\"### Adding to Pool. ### Server : \" + servers[i] + \" Port : \" + ports[i]);\n          cpf.addServer(servers[i], ports[i]);\n        }\n\n        cpf.create(poolName);\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":478,"groupId":"31737","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createPool","params":"(VMvm@finalStringpoolName@finalString[]servers@finalint[]ports@finalStringredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/5172d12d02b90c1af7e602c4eef42915b15293.src","preCode":"  public void createPool(VM vm, final String poolName, final String[] servers, final int[] ports,\n      final String redundancyLevel) {\n    vm.invoke(new CacheSerializableRunnable(\"createPool :\" + poolName) {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        getCache();\n        IgnoredException.addIgnoredException(\"java.net.ConnectException\");\n\n        PoolFactory cpf = PoolManager.createFactory();\n        cpf.setSubscriptionEnabled(true);\n\n        if (redundancyLevel != null) {\n          int redundancy = Integer.parseInt(redundancyLevel);\n          cpf.setSubscriptionRedundancy(redundancy);\n        }\n\n        for (int i = 0; i < servers.length; i++) {\n          LogWriterUtils.getLogWriter()\n              .info(\"### Adding to Pool. ### Server : \" + servers[i] + \" Port : \" + ports[i]);\n          cpf.addServer(servers[i], ports[i]);\n        }\n\n        cpf.create(poolName);\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":452,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":2,"curCode":"  public void createPool(VM vm, final String poolName, final String[] servers, final int[] ports,\n      final String redundancyLevel) {\n    vm.invoke(new CacheSerializableRunnable(\"createPool :\" + poolName) {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        getCache();\n\n        PoolFactory cpf = PoolManager.createFactory();\n        cpf.setSubscriptionEnabled(true);\n\n        if (redundancyLevel != null) {\n          int redundancy = Integer.parseInt(redundancyLevel);\n          cpf.setSubscriptionRedundancy(redundancy);\n        }\n\n        for (int i = 0; i < servers.length; i++) {\n          LogWriterUtils.getLogWriter()\n              .info(\"### Adding to Pool. ### Server : \" + servers[i] + \" Port : \" + ports[i]);\n          cpf.addServer(servers[i], ports[i]);\n        }\n\n        cpf.create(poolName);\n      }\n    });\n  }\n","date":"2019-01-12 07:53:54","endLine":1737,"groupId":"10586","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createPool","params":"(VMvm@finalStringpoolName@finalString[]servers@finalint[]ports@finalStringredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/fa/e5b8c36a608cd3e96150429dfbecbabbd9d764.src","preCode":"  public void createPool(VM vm, final String poolName, final String[] servers, final int[] ports,\n      final String redundancyLevel) {\n    vm.invoke(new CacheSerializableRunnable(\"createPool :\" + poolName) {\n      public void run2() throws CacheException {\n        \r\n        getCache();\n\n        PoolFactory cpf = PoolManager.createFactory();\n        cpf.setSubscriptionEnabled(true);\n\n        if (redundancyLevel != null) {\n          int redundancy = Integer.parseInt(redundancyLevel);\n          cpf.setSubscriptionRedundancy(redundancy);\n        }\n\n        for (int i = 0; i < servers.length; i++) {\n          LogWriterUtils.getLogWriter()\n              .info(\"### Adding to Pool. ### Server : \" + servers[i] + \" Port : \" + ports[i]);\n          cpf.addServer(servers[i], ports[i]);\n        }\n\n        cpf.create(poolName);\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PrCqUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1712,"status":"M"},{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public void createPool(VM vm, final String poolName, final String[] servers, final int[] ports,\n      final String redundancyLevel) {\n    vm.invoke(new CacheSerializableRunnable(\"createPool :\" + poolName) {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        getCache();\n        IgnoredException.addIgnoredException(\"java.net.ConnectException\");\n\n        PoolFactory cpf = PoolManager.createFactory();\n        cpf.setSubscriptionEnabled(true);\n\n        if (redundancyLevel != null) {\n          int redundancy = Integer.parseInt(redundancyLevel);\n          cpf.setSubscriptionRedundancy(redundancy);\n        }\n\n        for (int i = 0; i < servers.length; i++) {\n          LogWriterUtils.getLogWriter()\n              .info(\"### Adding to Pool. ### Server : \" + servers[i] + \" Port : \" + ports[i]);\n          cpf.addServer(servers[i], ports[i]);\n        }\n\n        cpf.create(poolName);\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":478,"groupId":"10586","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createPool","params":"(VMvm@finalStringpoolName@finalString[]servers@finalint[]ports@finalStringredundancyLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/5172d12d02b90c1af7e602c4eef42915b15293.src","preCode":"  public void createPool(VM vm, final String poolName, final String[] servers, final int[] ports,\n      final String redundancyLevel) {\n    vm.invoke(new CacheSerializableRunnable(\"createPool :\" + poolName) {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        getCache();\n        IgnoredException.addIgnoredException(\"java.net.ConnectException\");\n\n        PoolFactory cpf = PoolManager.createFactory();\n        cpf.setSubscriptionEnabled(true);\n\n        if (redundancyLevel != null) {\n          int redundancy = Integer.parseInt(redundancyLevel);\n          cpf.setSubscriptionRedundancy(redundancy);\n        }\n\n        for (int i = 0; i < servers.length; i++) {\n          LogWriterUtils.getLogWriter()\n              .info(\"### Adding to Pool. ### Server : \" + servers[i] + \" Port : \" + ports[i]);\n          cpf.addServer(servers[i], ports[i]);\n        }\n\n        cpf.create(poolName);\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":452,"status":"N"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"}]
