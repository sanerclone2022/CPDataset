[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testPeekAndRemoveWithoutConflation() throws Exception {\n    testFailed = false;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final int batchSize = 20;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekAndRemoveWithoutConflation\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    List pickObjects = regionqueue.peek(batchSize);\n    assertEquals(batchSize, pickObjects.size());\n    regionqueue.remove();\n\n    for (int i = 0; i < numOfThreads; i++) {\n      assertEquals(3,\n          regionqueue.getLastDispatchedSequenceId(new EventID(new byte[] {(byte) i}, i, 1)));\n      assertEquals(0,\n          regionqueue.getCurrentCounterSet(new EventID(new byte[] {(byte) i}, i, 1)).size());\n    }\n\n    assertEquals(0, regionqueue.getAvalaibleIds().size());\n\n    this.logWriter.info(\"testPeekAndRemoveWithoutConflation() completed successfully\");\n  }\n","date":"2018-07-18 03:54:18","endLine":611,"groupId":"45607","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPeekAndRemoveWithoutConflation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/cf/fd3e7b2d9144bba65570df906ec7d2cb861158.src","preCode":"  public void testPeekAndRemoveWithoutConflation() throws Exception {\n    testFailed = false;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final int batchSize = 20;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekAndRemoveWithoutConflation\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    List pickObjects = regionqueue.peek(batchSize);\n    assertEquals(batchSize, pickObjects.size());\n    regionqueue.remove();\n\n    for (int i = 0; i < numOfThreads; i++) {\n      assertEquals(3,\n          regionqueue.getLastDispatchedSequenceId(new EventID(new byte[] {(byte) i}, i, 1)));\n      assertEquals(0,\n          regionqueue.getCurrentCounterSet(new EventID(new byte[] {(byte) i}, i, 1)).size());\n    }\n\n    assertEquals(0, regionqueue.getAvalaibleIds().size());\n\n    this.logWriter.info(\"testPeekAndRemoveWithoutConflation() completed successfully\");\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARQAddOperationJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":560,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testPeekForDiffBatchSizeAndRemoveSome() throws Exception {\n    testFailed = false;\n    barrierCount = 0;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekForDiffBatchSizeAndRemoveSome\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    testFailed = false;\n    message = null;\n    Thread[] threads_peek_remove = new Thread[numOfPuts - 1];\n    for (int i = 1; i < numOfPuts; i++) {\n      final int peakBatchSize = i * 5;\n      threads_peek_remove[i - 1] = new Thread() {\n\n        public void run() {\n          try {\n            List peakObjects = regionqueue.peek(peakBatchSize);\n            assertEquals(peakBatchSize, peakObjects.size());\n            synchronized (HARQAddOperationJUnitTest.this) {\n              ++barrierCount;\n              if (barrierCount == 3) {\n                HARQAddOperationJUnitTest.this.notifyAll();\n              } else {\n                HARQAddOperationJUnitTest.this.wait();\n              }\n            }\n            regionqueue.remove();\n\n          } catch (Exception ex) {\n            testFailed = true;\n            ex.printStackTrace();\n            message.append(\"Exception while performing peak operation \" + ex.getStackTrace());\n\n          }\n\n        }\n\n      };\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      threads_peek_remove[k].start();\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      ThreadUtils.join(threads_peek_remove[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    assertEquals(5, regionqueue.getAvalaibleIds().size());\n\n    this.logWriter.info(\"testPeekForDiffBatchSizeAndRemoveSome() completed successfully\");\n  }\n","date":"2018-07-18 03:54:18","endLine":869,"groupId":"46058","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPeekForDiffBatchSizeAndRemoveSome","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/cf/fd3e7b2d9144bba65570df906ec7d2cb861158.src","preCode":"  public void testPeekForDiffBatchSizeAndRemoveSome() throws Exception {\n    testFailed = false;\n    barrierCount = 0;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekForDiffBatchSizeAndRemoveSome\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    testFailed = false;\n    message = null;\n    Thread[] threads_peek_remove = new Thread[numOfPuts - 1];\n    for (int i = 1; i < numOfPuts; i++) {\n      final int peakBatchSize = i * 5;\n      threads_peek_remove[i - 1] = new Thread() {\n\n        public void run() {\n          try {\n            List peakObjects = regionqueue.peek(peakBatchSize);\n            assertEquals(peakBatchSize, peakObjects.size());\n            synchronized (HARQAddOperationJUnitTest.this) {\n              ++barrierCount;\n              if (barrierCount == 3) {\n                HARQAddOperationJUnitTest.this.notifyAll();\n              } else {\n                HARQAddOperationJUnitTest.this.wait();\n              }\n            }\n            regionqueue.remove();\n\n          } catch (Exception ex) {\n            testFailed = true;\n            ex.printStackTrace();\n            message.append(\"Exception while performing peak operation \" + ex.getStackTrace());\n\n          }\n\n        }\n\n      };\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      threads_peek_remove[k].start();\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      ThreadUtils.join(threads_peek_remove[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    assertEquals(5, regionqueue.getAvalaibleIds().size());\n\n    this.logWriter.info(\"testPeekForDiffBatchSizeAndRemoveSome() completed successfully\");\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARQAddOperationJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":785,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-08-02 02:33:38","codes":[{"authorDate":"2018-08-02 02:33:38","commitOrder":2,"curCode":"  public void testPeekAndRemoveWithoutConflation() throws Exception {\n    testFailed = false;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final int batchSize = 20;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekAndRemoveWithoutConflation\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    List pickObjects = regionqueue.peek(batchSize);\n    assertEquals(batchSize, pickObjects.size());\n    regionqueue.remove();\n\n    for (int i = 0; i < numOfThreads; i++) {\n      assertEquals(3,\n          regionqueue.getLastDispatchedSequenceId(new EventID(new byte[] {(byte) i}, i, 1)));\n      assertEquals(0,\n          regionqueue.getCurrentCounterSet(new EventID(new byte[] {(byte) i}, i, 1)).size());\n    }\n\n    assertEquals(0, regionqueue.getAvailableIds().size());\n\n    this.logWriter.info(\"testPeekAndRemoveWithoutConflation() completed successfully\");\n  }\n","date":"2018-08-04 00:36:41","endLine":611,"groupId":"45607","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPeekAndRemoveWithoutConflation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/1fa09287853ad7b4dfd8f5df3e6c6c188fe76a.src","preCode":"  public void testPeekAndRemoveWithoutConflation() throws Exception {\n    testFailed = false;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final int batchSize = 20;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekAndRemoveWithoutConflation\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    List pickObjects = regionqueue.peek(batchSize);\n    assertEquals(batchSize, pickObjects.size());\n    regionqueue.remove();\n\n    for (int i = 0; i < numOfThreads; i++) {\n      assertEquals(3,\n          regionqueue.getLastDispatchedSequenceId(new EventID(new byte[] {(byte) i}, i, 1)));\n      assertEquals(0,\n          regionqueue.getCurrentCounterSet(new EventID(new byte[] {(byte) i}, i, 1)).size());\n    }\n\n    assertEquals(0, regionqueue.getAvalaibleIds().size());\n\n    this.logWriter.info(\"testPeekAndRemoveWithoutConflation() completed successfully\");\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARQAddOperationJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":560,"status":"M"},{"authorDate":"2018-08-02 02:33:38","commitOrder":2,"curCode":"  public void testPeekForDiffBatchSizeAndRemoveSome() throws Exception {\n    testFailed = false;\n    barrierCount = 0;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekForDiffBatchSizeAndRemoveSome\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    testFailed = false;\n    message = null;\n    Thread[] threads_peek_remove = new Thread[numOfPuts - 1];\n    for (int i = 1; i < numOfPuts; i++) {\n      final int peakBatchSize = i * 5;\n      threads_peek_remove[i - 1] = new Thread() {\n\n        public void run() {\n          try {\n            List peakObjects = regionqueue.peek(peakBatchSize);\n            assertEquals(peakBatchSize, peakObjects.size());\n            synchronized (HARQAddOperationJUnitTest.this) {\n              ++barrierCount;\n              if (barrierCount == 3) {\n                HARQAddOperationJUnitTest.this.notifyAll();\n              } else {\n                HARQAddOperationJUnitTest.this.wait();\n              }\n            }\n            regionqueue.remove();\n\n          } catch (Exception ex) {\n            testFailed = true;\n            ex.printStackTrace();\n            message.append(\"Exception while performing peak operation \" + ex.getStackTrace());\n\n          }\n\n        }\n\n      };\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      threads_peek_remove[k].start();\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      ThreadUtils.join(threads_peek_remove[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    assertEquals(5, regionqueue.getAvailableIds().size());\n\n    this.logWriter.info(\"testPeekForDiffBatchSizeAndRemoveSome() completed successfully\");\n  }\n","date":"2018-08-04 00:36:41","endLine":869,"groupId":"46058","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPeekForDiffBatchSizeAndRemoveSome","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/1fa09287853ad7b4dfd8f5df3e6c6c188fe76a.src","preCode":"  public void testPeekForDiffBatchSizeAndRemoveSome() throws Exception {\n    testFailed = false;\n    barrierCount = 0;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekForDiffBatchSizeAndRemoveSome\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    testFailed = false;\n    message = null;\n    Thread[] threads_peek_remove = new Thread[numOfPuts - 1];\n    for (int i = 1; i < numOfPuts; i++) {\n      final int peakBatchSize = i * 5;\n      threads_peek_remove[i - 1] = new Thread() {\n\n        public void run() {\n          try {\n            List peakObjects = regionqueue.peek(peakBatchSize);\n            assertEquals(peakBatchSize, peakObjects.size());\n            synchronized (HARQAddOperationJUnitTest.this) {\n              ++barrierCount;\n              if (barrierCount == 3) {\n                HARQAddOperationJUnitTest.this.notifyAll();\n              } else {\n                HARQAddOperationJUnitTest.this.wait();\n              }\n            }\n            regionqueue.remove();\n\n          } catch (Exception ex) {\n            testFailed = true;\n            ex.printStackTrace();\n            message.append(\"Exception while performing peak operation \" + ex.getStackTrace());\n\n          }\n\n        }\n\n      };\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      threads_peek_remove[k].start();\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      ThreadUtils.join(threads_peek_remove[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    assertEquals(5, regionqueue.getAvalaibleIds().size());\n\n    this.logWriter.info(\"testPeekForDiffBatchSizeAndRemoveSome() completed successfully\");\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARQAddOperationJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":785,"status":"M"}],"commitId":"acb50f94157c25ada4163771758115a1cb108516","commitMessage":"@@@GEODE-5495: Destroy available ID before decrement in updateHAContainer()\n\nCo-authored-by: Ryan McMahon <rmcmahon@pivotal.io>\nCo-authored-by: Lynn Hughes-Godfrey <lhughesgodfrey@pivotal.io>\n","date":"2018-08-04 00:36:41","modifiedFileCount":"5","status":"M","submitter":"Ryan McMahon"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public void testPeekAndRemoveWithoutConflation() throws Exception {\n    testFailed = false;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final int batchSize = 20;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekAndRemoveWithoutConflation\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    List pickObjects = regionqueue.peek(batchSize);\n    assertEquals(batchSize, pickObjects.size());\n    regionqueue.remove();\n\n    for (int i = 0; i < numOfThreads; i++) {\n      assertEquals(3,\n          regionqueue.getLastDispatchedSequenceId(new EventID(new byte[] {(byte) i}, i, 1)));\n      assertEquals(0,\n          regionqueue.getCurrentCounterSet(new EventID(new byte[] {(byte) i}, i, 1)).size());\n    }\n\n    assertEquals(0, regionqueue.getAvailableIds().size());\n\n    this.logWriter.info(\"testPeekAndRemoveWithoutConflation() completed successfully\");\n  }\n","date":"2019-01-12 07:53:54","endLine":616,"groupId":"45607","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPeekAndRemoveWithoutConflation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/63/42614f30fda1aea07e36611339c859e4bcbb97.src","preCode":"  public void testPeekAndRemoveWithoutConflation() throws Exception {\n    testFailed = false;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final int batchSize = 20;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekAndRemoveWithoutConflation\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    List pickObjects = regionqueue.peek(batchSize);\n    assertEquals(batchSize, pickObjects.size());\n    regionqueue.remove();\n\n    for (int i = 0; i < numOfThreads; i++) {\n      assertEquals(3,\n          regionqueue.getLastDispatchedSequenceId(new EventID(new byte[] {(byte) i}, i, 1)));\n      assertEquals(0,\n          regionqueue.getCurrentCounterSet(new EventID(new byte[] {(byte) i}, i, 1)).size());\n    }\n\n    assertEquals(0, regionqueue.getAvailableIds().size());\n\n    this.logWriter.info(\"testPeekAndRemoveWithoutConflation() completed successfully\");\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARQAddOperationJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":564,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public void testPeekForDiffBatchSizeAndRemoveSome() throws Exception {\n    testFailed = false;\n    barrierCount = 0;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekForDiffBatchSizeAndRemoveSome\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    testFailed = false;\n    message = null;\n    Thread[] threads_peek_remove = new Thread[numOfPuts - 1];\n    for (int i = 1; i < numOfPuts; i++) {\n      final int peakBatchSize = i * 5;\n      threads_peek_remove[i - 1] = new Thread() {\n\n        @Override\n        public void run() {\n          try {\n            List peakObjects = regionqueue.peek(peakBatchSize);\n            assertEquals(peakBatchSize, peakObjects.size());\n            synchronized (HARQAddOperationJUnitTest.this) {\n              ++barrierCount;\n              if (barrierCount == 3) {\n                HARQAddOperationJUnitTest.this.notifyAll();\n              } else {\n                HARQAddOperationJUnitTest.this.wait();\n              }\n            }\n            regionqueue.remove();\n\n          } catch (Exception ex) {\n            testFailed = true;\n            ex.printStackTrace();\n            message.append(\"Exception while performing peak operation \" + ex.getStackTrace());\n\n          }\n\n        }\n\n      };\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      threads_peek_remove[k].start();\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      ThreadUtils.join(threads_peek_remove[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    assertEquals(5, regionqueue.getAvailableIds().size());\n\n    this.logWriter.info(\"testPeekForDiffBatchSizeAndRemoveSome() completed successfully\");\n  }\n","date":"2019-01-12 07:53:54","endLine":879,"groupId":"46058","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPeekForDiffBatchSizeAndRemoveSome","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/63/42614f30fda1aea07e36611339c859e4bcbb97.src","preCode":"  public void testPeekForDiffBatchSizeAndRemoveSome() throws Exception {\n    testFailed = false;\n    barrierCount = 0;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekForDiffBatchSizeAndRemoveSome\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    testFailed = false;\n    message = null;\n    Thread[] threads_peek_remove = new Thread[numOfPuts - 1];\n    for (int i = 1; i < numOfPuts; i++) {\n      final int peakBatchSize = i * 5;\n      threads_peek_remove[i - 1] = new Thread() {\n\n        public void run() {\n          try {\n            List peakObjects = regionqueue.peek(peakBatchSize);\n            assertEquals(peakBatchSize, peakObjects.size());\n            synchronized (HARQAddOperationJUnitTest.this) {\n              ++barrierCount;\n              if (barrierCount == 3) {\n                HARQAddOperationJUnitTest.this.notifyAll();\n              } else {\n                HARQAddOperationJUnitTest.this.wait();\n              }\n            }\n            regionqueue.remove();\n\n          } catch (Exception ex) {\n            testFailed = true;\n            ex.printStackTrace();\n            message.append(\"Exception while performing peak operation \" + ex.getStackTrace());\n\n          }\n\n        }\n\n      };\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      threads_peek_remove[k].start();\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      ThreadUtils.join(threads_peek_remove[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    assertEquals(5, regionqueue.getAvailableIds().size());\n\n    this.logWriter.info(\"testPeekForDiffBatchSizeAndRemoveSome() completed successfully\");\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARQAddOperationJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":793,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2021-06-04 00:32:09","codes":[{"authorDate":"2021-06-04 00:32:09","commitOrder":4,"curCode":"  public void testPeekAndRemoveWithoutConflation() throws Exception {\n    testFailed = false;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final int batchSize = 20;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekAndRemoveWithoutConflation\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed) {\n      fail(\"Test failed due to \" + message);\n    }\n\n    List pickObjects = regionqueue.peek(batchSize);\n    assertEquals(batchSize, pickObjects.size());\n    regionqueue.remove();\n\n    for (int i = 0; i < numOfThreads; i++) {\n      assertEquals(3,\n          regionqueue.getLastDispatchedSequenceId(new EventID(new byte[] {(byte) i}, i, 1)));\n      assertEquals(0,\n          regionqueue.getCurrentCounterSet(new EventID(new byte[] {(byte) i}, i, 1)).size());\n    }\n\n    assertEquals(0, regionqueue.getAvailableIds().size());\n\n    this.logWriter.info(\"testPeekAndRemoveWithoutConflation() completed successfully\");\n  }\n","date":"2021-06-04 00:32:09","endLine":621,"groupId":"104053","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testPeekAndRemoveWithoutConflation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7f/6f744bd32ea95fd438859428a21f63b47dbc5c.src","preCode":"  public void testPeekAndRemoveWithoutConflation() throws Exception {\n    testFailed = false;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final int batchSize = 20;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekAndRemoveWithoutConflation\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    List pickObjects = regionqueue.peek(batchSize);\n    assertEquals(batchSize, pickObjects.size());\n    regionqueue.remove();\n\n    for (int i = 0; i < numOfThreads; i++) {\n      assertEquals(3,\n          regionqueue.getLastDispatchedSequenceId(new EventID(new byte[] {(byte) i}, i, 1)));\n      assertEquals(0,\n          regionqueue.getCurrentCounterSet(new EventID(new byte[] {(byte) i}, i, 1)).size());\n    }\n\n    assertEquals(0, regionqueue.getAvailableIds().size());\n\n    this.logWriter.info(\"testPeekAndRemoveWithoutConflation() completed successfully\");\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARQAddOperationJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"M"},{"authorDate":"2021-06-04 00:32:09","commitOrder":4,"curCode":"  public void testPeekForDiffBatchSizeAndRemoveSome() throws Exception {\n    testFailed = false;\n    barrierCount = 0;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekForDiffBatchSizeAndRemoveSome\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed) {\n      fail(\"Test failed due to \" + message);\n    }\n\n    testFailed = false;\n    message = null;\n    Thread[] threads_peek_remove = new Thread[numOfPuts - 1];\n    for (int i = 1; i < numOfPuts; i++) {\n      final int peakBatchSize = i * 5;\n      threads_peek_remove[i - 1] = new Thread() {\n\n        @Override\n        public void run() {\n          try {\n            List peakObjects = regionqueue.peek(peakBatchSize);\n            assertEquals(peakBatchSize, peakObjects.size());\n            synchronized (HARQAddOperationJUnitTest.this) {\n              ++barrierCount;\n              if (barrierCount == 3) {\n                HARQAddOperationJUnitTest.this.notifyAll();\n              } else {\n                HARQAddOperationJUnitTest.this.wait();\n              }\n            }\n            regionqueue.remove();\n\n          } catch (Exception ex) {\n            testFailed = true;\n            ex.printStackTrace();\n            message.append(\"Exception while performing peak operation \" + ex.getStackTrace());\n\n          }\n\n        }\n\n      };\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      threads_peek_remove[k].start();\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      ThreadUtils.join(threads_peek_remove[k], 180 * 1000);\n    }\n\n    if (testFailed) {\n      fail(\"Test failed due to \" + message);\n    }\n\n    assertEquals(5, regionqueue.getAvailableIds().size());\n\n    this.logWriter.info(\"testPeekForDiffBatchSizeAndRemoveSome() completed successfully\");\n  }\n","date":"2021-06-04 00:32:09","endLine":889,"groupId":"104053","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testPeekForDiffBatchSizeAndRemoveSome","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7f/6f744bd32ea95fd438859428a21f63b47dbc5c.src","preCode":"  public void testPeekForDiffBatchSizeAndRemoveSome() throws Exception {\n    testFailed = false;\n    barrierCount = 0;\n    message = null;\n    final int numOfThreads = 5;\n    final int numOfPuts = 4;\n    final HARegionQueue regionqueue = createHARegionQueue(\"testPeekForDiffBatchSizeAndRemoveSome\");\n    Thread[] threads = new Thread[numOfThreads];\n    for (int i = 0; i < numOfThreads; i++) {\n      final long ids = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          for (int j = 0; j < numOfPuts; j++) {\n            EventID id = new EventID(new byte[] {(byte) ids}, ids, j);\n            try {\n              regionqueue.put(new ConflatableObject(KEY1 + id.getThreadID() + j,\n                  id.getThreadID() + \"VALUE\" + j, id, false, \"region1\"));\n            } catch (Exception ex) {\n              testFailed = true;\n              message.append(\"put failed for the threadId \" + id.getThreadID());\n            }\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      threads[k].start();\n    }\n\n    for (int k = 0; k < numOfThreads; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    testFailed = false;\n    message = null;\n    Thread[] threads_peek_remove = new Thread[numOfPuts - 1];\n    for (int i = 1; i < numOfPuts; i++) {\n      final int peakBatchSize = i * 5;\n      threads_peek_remove[i - 1] = new Thread() {\n\n        @Override\n        public void run() {\n          try {\n            List peakObjects = regionqueue.peek(peakBatchSize);\n            assertEquals(peakBatchSize, peakObjects.size());\n            synchronized (HARQAddOperationJUnitTest.this) {\n              ++barrierCount;\n              if (barrierCount == 3) {\n                HARQAddOperationJUnitTest.this.notifyAll();\n              } else {\n                HARQAddOperationJUnitTest.this.wait();\n              }\n            }\n            regionqueue.remove();\n\n          } catch (Exception ex) {\n            testFailed = true;\n            ex.printStackTrace();\n            message.append(\"Exception while performing peak operation \" + ex.getStackTrace());\n\n          }\n\n        }\n\n      };\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      threads_peek_remove[k].start();\n    }\n\n    for (int k = 0; k < numOfPuts - 1; k++) {\n      ThreadUtils.join(threads_peek_remove[k], 180 * 1000);\n    }\n\n    if (testFailed)\n      fail(\"Test failed due to \" + message);\n\n    assertEquals(5, regionqueue.getAvailableIds().size());\n\n    this.logWriter.info(\"testPeekForDiffBatchSizeAndRemoveSome() completed successfully\");\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARQAddOperationJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":801,"status":"M"}],"commitId":"2879573ffb04e9e029e14ca37d8a064268cc8f44","commitMessage":"@@@GEODE-7864: Always use curly braces for control flow statements (#6523)\n\nAuthored-by: Donal Evans <doevans@vmware.com>","date":"2021-06-04 00:32:09","modifiedFileCount":"640","status":"M","submitter":"Donal Evans"}]
