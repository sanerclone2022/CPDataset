[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testComparisonBetnWithAndWithoutIndexCreation() throws Exception {\n\n    Region region = CacheUtils.createRegion(\"pos\", Portfolio.class);\n    for (int i = 0; i < 4; i++) {\n      region.put(\"\" + i, new Portfolio(i));\n    }\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT * FROM /pos pf,  positions.values pos where pf.status='active' and pos.secId= 'IBM' and ID = 0\"};\n    SelectResults sr[][] = new SelectResults[queries.length][2];\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        sr[i][0] = (SelectResults) q.execute();\n        if (!observer.isIndexesUsed) {\n          CacheUtils.log(\"NO INDEX USED\");\n        } else {\n          fail(\"How could index be present when not created!?\");\n        }\n        \r\n        resType1 = (StructType) ((SelectResults) sr[i][0]).getCollectionType().getElementType();\n        resSize1 = (((SelectResults) sr[i][0]).size());\n        CacheUtils.log(resType1);\n        strg1 = resType1.getFieldNames();\n\n        set1 = (((SelectResults) sr[i][0]).asSet());\n        Iterator iter = set1.iterator();\n        while (iter.hasNext()) {\n          Struct stc1 = (Struct) iter.next();\n          valPf1 = stc1.get(strg1[0]);\n          valPos1 = stc1.get(strg1[1]);\n          isActive1 = ((Portfolio) stc1.get(strg1[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    \r\n\n    qs = CacheUtils.getQueryService();\n    Index index1 = qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"pf.status\", \"/pos pf\");\n    \r\n    \r\n    Index index3 = qs.createIndex(\"IDIndex\", IndexType.FUNCTIONAL, \"pf.ID\", \"/pos pf\");\n\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer2 = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer2);\n        sr[i][1] = (SelectResults) q.execute();\n        if (!observer2.isIndexesUsed) {\n          fail(\"FAILED: Index NOT Used\");\n        }\n        resType2 = (StructType) ((SelectResults) sr[i][1]).getCollectionType().getElementType();\n        resSize2 = (((SelectResults) sr[i][1]).size());\n        strg2 = resType2.getFieldNames();\n\n        set2 = (((SelectResults) sr[i][1]).asSet());\n        Iterator iter = set2.iterator();\n        while (iter.hasNext()) {\n          Struct stc2 = (Struct) iter.next();\n          valPf2 = stc2.get(strg2[0]);\n          valPos2 = stc2.get(strg2[1]);\n          isActive2 = ((Portfolio) stc2.get(strg2[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    if ((resType1).equals(resType2)) {\n      CacheUtils.log(\"Both Search Results are of the same Type i.e.--> \" + resType1);\n    } else {\n      fail(\"FAILED:Search result Type is different in both the cases\");\n    }\n    if (resSize1 == resSize2 || resSize1 != 0) {\n      CacheUtils\n          .log(\"Search Results size is Non Zero and equal in both cases i.e.  Size= \" + resSize1);\n    } else {\n      fail(\"FAILED:Search result size is different in both the cases\");\n    }\n    itert2 = set2.iterator();\n    itert1 = set1.iterator();\n    while (itert1.hasNext()) {\n      Struct stc2 = (Struct) itert2.next();\n      Struct stc1 = (Struct) itert1.next();\n      if (stc2.get(strg2[0]) != stc1.get(strg1[0]))\n        fail(\n            \"FAILED: In both the Cases the first member of StructSet i.e. Portfolio are different. \");\n      if (stc2.get(strg2[1]) != stc1.get(strg1[1]))\n        fail(\"FAILED: In both the cases Positions are different\");\n      if (!StringUtils.equals(((Position) stc2.get(strg2[1])).secId,\n          ((Position) stc1.get(strg1[1])).secId))\n        fail(\"FAILED: In both the cases Positions secIds are different\");\n      if (((Portfolio) stc2.get(strg2[0])).isActive() != ((Portfolio) stc1.get(strg1[0]))\n          .isActive())\n        fail(\"FAILED: Status of the Portfolios found are different\");\n      if (((Portfolio) stc2.get(strg2[0])).getID() != ((Portfolio) stc1.get(strg1[0])).getID())\n        fail(\"FAILED: IDs of the Portfolios found are different\");\n    }\n    CacheUtils.compareResultsOfWithAndWithoutIndex(sr, this);\n  }\n","date":"2018-07-18 03:54:18","endLine":207,"groupId":"15666","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testComparisonBetnWithAndWithoutIndexCreation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/37/26f9ce869655e8d20311010b598b1f0c26c7d2.src","preCode":"  public void testComparisonBetnWithAndWithoutIndexCreation() throws Exception {\n\n    Region region = CacheUtils.createRegion(\"pos\", Portfolio.class);\n    for (int i = 0; i < 4; i++) {\n      region.put(\"\" + i, new Portfolio(i));\n    }\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT * FROM /pos pf,  positions.values pos where pf.status='active' and pos.secId= 'IBM' and ID = 0\"};\n    SelectResults sr[][] = new SelectResults[queries.length][2];\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        sr[i][0] = (SelectResults) q.execute();\n        if (!observer.isIndexesUsed) {\n          CacheUtils.log(\"NO INDEX USED\");\n        } else {\n          fail(\"How could index be present when not created!?\");\n        }\n        \r\n        resType1 = (StructType) ((SelectResults) sr[i][0]).getCollectionType().getElementType();\n        resSize1 = (((SelectResults) sr[i][0]).size());\n        CacheUtils.log(resType1);\n        strg1 = resType1.getFieldNames();\n\n        set1 = (((SelectResults) sr[i][0]).asSet());\n        Iterator iter = set1.iterator();\n        while (iter.hasNext()) {\n          Struct stc1 = (Struct) iter.next();\n          valPf1 = stc1.get(strg1[0]);\n          valPos1 = stc1.get(strg1[1]);\n          isActive1 = ((Portfolio) stc1.get(strg1[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    \r\n\n    qs = CacheUtils.getQueryService();\n    Index index1 = qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"pf.status\", \"/pos pf\");\n    \r\n    \r\n    Index index3 = qs.createIndex(\"IDIndex\", IndexType.FUNCTIONAL, \"pf.ID\", \"/pos pf\");\n\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer2 = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer2);\n        sr[i][1] = (SelectResults) q.execute();\n        if (!observer2.isIndexesUsed) {\n          fail(\"FAILED: Index NOT Used\");\n        }\n        resType2 = (StructType) ((SelectResults) sr[i][1]).getCollectionType().getElementType();\n        resSize2 = (((SelectResults) sr[i][1]).size());\n        strg2 = resType2.getFieldNames();\n\n        set2 = (((SelectResults) sr[i][1]).asSet());\n        Iterator iter = set2.iterator();\n        while (iter.hasNext()) {\n          Struct stc2 = (Struct) iter.next();\n          valPf2 = stc2.get(strg2[0]);\n          valPos2 = stc2.get(strg2[1]);\n          isActive2 = ((Portfolio) stc2.get(strg2[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    if ((resType1).equals(resType2)) {\n      CacheUtils.log(\"Both Search Results are of the same Type i.e.--> \" + resType1);\n    } else {\n      fail(\"FAILED:Search result Type is different in both the cases\");\n    }\n    if (resSize1 == resSize2 || resSize1 != 0) {\n      CacheUtils\n          .log(\"Search Results size is Non Zero and equal in both cases i.e.  Size= \" + resSize1);\n    } else {\n      fail(\"FAILED:Search result size is different in both the cases\");\n    }\n    itert2 = set2.iterator();\n    itert1 = set1.iterator();\n    while (itert1.hasNext()) {\n      Struct stc2 = (Struct) itert2.next();\n      Struct stc1 = (Struct) itert1.next();\n      if (stc2.get(strg2[0]) != stc1.get(strg1[0]))\n        fail(\n            \"FAILED: In both the Cases the first member of StructSet i.e. Portfolio are different. \");\n      if (stc2.get(strg2[1]) != stc1.get(strg1[1]))\n        fail(\"FAILED: In both the cases Positions are different\");\n      if (!StringUtils.equals(((Position) stc2.get(strg2[1])).secId,\n          ((Position) stc1.get(strg1[1])).secId))\n        fail(\"FAILED: In both the cases Positions secIds are different\");\n      if (((Portfolio) stc2.get(strg2[0])).isActive() != ((Portfolio) stc1.get(strg1[0]))\n          .isActive())\n        fail(\"FAILED: Status of the Portfolios found are different\");\n      if (((Portfolio) stc2.get(strg2[0])).getID() != ((Portfolio) stc1.get(strg1[0])).getID())\n        fail(\"FAILED: IDs of the Portfolios found are different\");\n    }\n    CacheUtils.compareResultsOfWithAndWithoutIndex(sr, this);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testNoIndexSkipping() throws Exception {\n\n    Region region = CacheUtils.createRegion(\"pos\", Portfolio.class);\n    for (int i = 0; i < 400; i++) {\n      region.put(\"\" + i, new Portfolio(i));\n    }\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT * FROM /pos pf,  positions.values pos where pf.ID > 0 and pf.ID < 250  and pf.status='active' and  pos.secId != null \"};\n    SelectResults sr[][] = new SelectResults[queries.length][2];\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        sr[i][0] = (SelectResults) q.execute();\n        if (!observer.isIndexesUsed) {\n          CacheUtils.log(\"NO INDEX USED\");\n        } else {\n          fail(\"How could index be present when not created!?\");\n        }\n        \r\n        resType1 = (StructType) ((SelectResults) sr[i][0]).getCollectionType().getElementType();\n        resSize1 = (((SelectResults) sr[i][0]).size());\n        CacheUtils.log(resType1);\n        strg1 = resType1.getFieldNames();\n\n        set1 = (((SelectResults) sr[i][0]).asSet());\n        Iterator iter = set1.iterator();\n        while (iter.hasNext()) {\n          Struct stc1 = (Struct) iter.next();\n          valPf1 = stc1.get(strg1[0]);\n          valPos1 = stc1.get(strg1[1]);\n          isActive1 = ((Portfolio) stc1.get(strg1[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    \r\n\n    qs = CacheUtils.getQueryService();\n    Index index1 = qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"pf.status\", \"/pos pf\");\n    Index index2 = (Index) qs.createIndex(\"secIdIndex\", IndexType.FUNCTIONAL, \"pos.secId\",\n        \"/pos pf, pf.positions.values pos\");\n    Index index3 = qs.createIndex(\"IDIndex\", IndexType.FUNCTIONAL, \"pf.ID\", \"/pos pf\");\n\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer2 = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer2);\n        sr[i][1] = (SelectResults) q.execute();\n        if (!observer2.isIndexesUsed) {\n          fail(\"FAILED: Index NOT Used\");\n        }\n        assertEquals(observer2.indexesUsed.size(), 1);\n\n        resType2 = (StructType) ((SelectResults) sr[i][1]).getCollectionType().getElementType();\n        resSize2 = (((SelectResults) sr[i][1]).size());\n        CacheUtils.log(resType2);\n        strg2 = resType2.getFieldNames();\n\n        set2 = (((SelectResults) sr[i][1]).asSet());\n        Iterator iter = set2.iterator();\n        while (iter.hasNext()) {\n          Struct stc2 = (Struct) iter.next();\n          valPf2 = stc2.get(strg2[0]);\n          valPos2 = stc2.get(strg2[1]);\n          isActive2 = ((Portfolio) stc2.get(strg2[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    if ((resType1).equals(resType2)) {\n      CacheUtils.log(\"Both Search Results are of the same Type i.e.--> \" + resType1);\n    } else {\n      fail(\"FAILED:Search result Type is different in both the cases\");\n    }\n    if (resSize1 == resSize2 || resSize1 != 0) {\n      CacheUtils\n          .log(\"Search Results size is Non Zero and equal in both cases i.e.  Size= \" + resSize1);\n    } else {\n      fail(\"FAILED:Search result size is different in both the cases\");\n    }\n    CacheUtils.compareResultsOfWithAndWithoutIndex(sr, this);\n  }\n","date":"2018-07-18 03:54:18","endLine":422,"groupId":"28084","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoIndexSkipping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/37/26f9ce869655e8d20311010b598b1f0c26c7d2.src","preCode":"  public void testNoIndexSkipping() throws Exception {\n\n    Region region = CacheUtils.createRegion(\"pos\", Portfolio.class);\n    for (int i = 0; i < 400; i++) {\n      region.put(\"\" + i, new Portfolio(i));\n    }\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT * FROM /pos pf,  positions.values pos where pf.ID > 0 and pf.ID < 250  and pf.status='active' and  pos.secId != null \"};\n    SelectResults sr[][] = new SelectResults[queries.length][2];\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        sr[i][0] = (SelectResults) q.execute();\n        if (!observer.isIndexesUsed) {\n          CacheUtils.log(\"NO INDEX USED\");\n        } else {\n          fail(\"How could index be present when not created!?\");\n        }\n        \r\n        resType1 = (StructType) ((SelectResults) sr[i][0]).getCollectionType().getElementType();\n        resSize1 = (((SelectResults) sr[i][0]).size());\n        CacheUtils.log(resType1);\n        strg1 = resType1.getFieldNames();\n\n        set1 = (((SelectResults) sr[i][0]).asSet());\n        Iterator iter = set1.iterator();\n        while (iter.hasNext()) {\n          Struct stc1 = (Struct) iter.next();\n          valPf1 = stc1.get(strg1[0]);\n          valPos1 = stc1.get(strg1[1]);\n          isActive1 = ((Portfolio) stc1.get(strg1[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    \r\n\n    qs = CacheUtils.getQueryService();\n    Index index1 = qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"pf.status\", \"/pos pf\");\n    Index index2 = (Index) qs.createIndex(\"secIdIndex\", IndexType.FUNCTIONAL, \"pos.secId\",\n        \"/pos pf, pf.positions.values pos\");\n    Index index3 = qs.createIndex(\"IDIndex\", IndexType.FUNCTIONAL, \"pf.ID\", \"/pos pf\");\n\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer2 = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer2);\n        sr[i][1] = (SelectResults) q.execute();\n        if (!observer2.isIndexesUsed) {\n          fail(\"FAILED: Index NOT Used\");\n        }\n        assertEquals(observer2.indexesUsed.size(), 1);\n\n        resType2 = (StructType) ((SelectResults) sr[i][1]).getCollectionType().getElementType();\n        resSize2 = (((SelectResults) sr[i][1]).size());\n        CacheUtils.log(resType2);\n        strg2 = resType2.getFieldNames();\n\n        set2 = (((SelectResults) sr[i][1]).asSet());\n        Iterator iter = set2.iterator();\n        while (iter.hasNext()) {\n          Struct stc2 = (Struct) iter.next();\n          valPf2 = stc2.get(strg2[0]);\n          valPos2 = stc2.get(strg2[1]);\n          isActive2 = ((Portfolio) stc2.get(strg2[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    if ((resType1).equals(resType2)) {\n      CacheUtils.log(\"Both Search Results are of the same Type i.e.--> \" + resType1);\n    } else {\n      fail(\"FAILED:Search result Type is different in both the cases\");\n    }\n    if (resSize1 == resSize2 || resSize1 != 0) {\n      CacheUtils\n          .log(\"Search Results size is Non Zero and equal in both cases i.e.  Size= \" + resSize1);\n    } else {\n      fail(\"FAILED:Search result size is different in both the cases\");\n    }\n    CacheUtils.compareResultsOfWithAndWithoutIndex(sr, this);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testComparisonBetnWithAndWithoutIndexCreation() throws Exception {\n\n    Region region = CacheUtils.createRegion(\"pos\", Portfolio.class);\n    for (int i = 0; i < 4; i++) {\n      region.put(\"\" + i, new Portfolio(i));\n    }\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT * FROM \" + SEPARATOR\n            + \"pos pf,  positions.values pos where pf.status='active' and pos.secId= 'IBM' and ID = 0\"};\n    SelectResults sr[][] = new SelectResults[queries.length][2];\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        sr[i][0] = (SelectResults) q.execute();\n        if (!observer.isIndexesUsed) {\n          CacheUtils.log(\"NO INDEX USED\");\n        } else {\n          fail(\"How could index be present when not created!?\");\n        }\n        \r\n        resType1 = (StructType) ((SelectResults) sr[i][0]).getCollectionType().getElementType();\n        resSize1 = (((SelectResults) sr[i][0]).size());\n        CacheUtils.log(resType1);\n        strg1 = resType1.getFieldNames();\n\n        set1 = (((SelectResults) sr[i][0]).asSet());\n        Iterator iter = set1.iterator();\n        while (iter.hasNext()) {\n          Struct stc1 = (Struct) iter.next();\n          valPf1 = stc1.get(strg1[0]);\n          valPos1 = stc1.get(strg1[1]);\n          isActive1 = ((Portfolio) stc1.get(strg1[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    \r\n\n    qs = CacheUtils.getQueryService();\n    Index index1 =\n        qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"pf.status\", SEPARATOR + \"pos pf\");\n    \r\n    \r\n    Index index3 = qs.createIndex(\"IDIndex\", IndexType.FUNCTIONAL, \"pf.ID\", SEPARATOR + \"pos pf\");\n\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer2 = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer2);\n        sr[i][1] = (SelectResults) q.execute();\n        if (!observer2.isIndexesUsed) {\n          fail(\"FAILED: Index NOT Used\");\n        }\n        resType2 = (StructType) ((SelectResults) sr[i][1]).getCollectionType().getElementType();\n        resSize2 = (((SelectResults) sr[i][1]).size());\n        strg2 = resType2.getFieldNames();\n\n        set2 = (((SelectResults) sr[i][1]).asSet());\n        Iterator iter = set2.iterator();\n        while (iter.hasNext()) {\n          Struct stc2 = (Struct) iter.next();\n          valPf2 = stc2.get(strg2[0]);\n          valPos2 = stc2.get(strg2[1]);\n          isActive2 = ((Portfolio) stc2.get(strg2[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    if ((resType1).equals(resType2)) {\n      CacheUtils.log(\"Both Search Results are of the same Type i.e.--> \" + resType1);\n    } else {\n      fail(\"FAILED:Search result Type is different in both the cases\");\n    }\n    if (resSize1 == resSize2 || resSize1 != 0) {\n      CacheUtils\n          .log(\"Search Results size is Non Zero and equal in both cases i.e.  Size= \" + resSize1);\n    } else {\n      fail(\"FAILED:Search result size is different in both the cases\");\n    }\n    itert2 = set2.iterator();\n    itert1 = set1.iterator();\n    while (itert1.hasNext()) {\n      Struct stc2 = (Struct) itert2.next();\n      Struct stc1 = (Struct) itert1.next();\n      if (stc2.get(strg2[0]) != stc1.get(strg1[0]))\n        fail(\n            \"FAILED: In both the Cases the first member of StructSet i.e. Portfolio are different. \");\n      if (stc2.get(strg2[1]) != stc1.get(strg1[1]))\n        fail(\"FAILED: In both the cases Positions are different\");\n      if (!StringUtils.equals(((Position) stc2.get(strg2[1])).secId,\n          ((Position) stc1.get(strg1[1])).secId))\n        fail(\"FAILED: In both the cases Positions secIds are different\");\n      if (((Portfolio) stc2.get(strg2[0])).isActive() != ((Portfolio) stc1.get(strg1[0]))\n          .isActive())\n        fail(\"FAILED: Status of the Portfolios found are different\");\n      if (((Portfolio) stc2.get(strg2[0])).getID() != ((Portfolio) stc1.get(strg1[0])).getID())\n        fail(\"FAILED: IDs of the Portfolios found are different\");\n    }\n    CacheUtils.compareResultsOfWithAndWithoutIndex(sr, this);\n  }\n","date":"2020-05-29 00:37:39","endLine":210,"groupId":"38784","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testComparisonBetnWithAndWithoutIndexCreation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5b/375f432aeff16b84c3d0097b5c7e5253b14833.src","preCode":"  public void testComparisonBetnWithAndWithoutIndexCreation() throws Exception {\n\n    Region region = CacheUtils.createRegion(\"pos\", Portfolio.class);\n    for (int i = 0; i < 4; i++) {\n      region.put(\"\" + i, new Portfolio(i));\n    }\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT * FROM /pos pf,  positions.values pos where pf.status='active' and pos.secId= 'IBM' and ID = 0\"};\n    SelectResults sr[][] = new SelectResults[queries.length][2];\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        sr[i][0] = (SelectResults) q.execute();\n        if (!observer.isIndexesUsed) {\n          CacheUtils.log(\"NO INDEX USED\");\n        } else {\n          fail(\"How could index be present when not created!?\");\n        }\n        \r\n        resType1 = (StructType) ((SelectResults) sr[i][0]).getCollectionType().getElementType();\n        resSize1 = (((SelectResults) sr[i][0]).size());\n        CacheUtils.log(resType1);\n        strg1 = resType1.getFieldNames();\n\n        set1 = (((SelectResults) sr[i][0]).asSet());\n        Iterator iter = set1.iterator();\n        while (iter.hasNext()) {\n          Struct stc1 = (Struct) iter.next();\n          valPf1 = stc1.get(strg1[0]);\n          valPos1 = stc1.get(strg1[1]);\n          isActive1 = ((Portfolio) stc1.get(strg1[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    \r\n\n    qs = CacheUtils.getQueryService();\n    Index index1 = qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"pf.status\", \"/pos pf\");\n    \r\n    \r\n    Index index3 = qs.createIndex(\"IDIndex\", IndexType.FUNCTIONAL, \"pf.ID\", \"/pos pf\");\n\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer2 = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer2);\n        sr[i][1] = (SelectResults) q.execute();\n        if (!observer2.isIndexesUsed) {\n          fail(\"FAILED: Index NOT Used\");\n        }\n        resType2 = (StructType) ((SelectResults) sr[i][1]).getCollectionType().getElementType();\n        resSize2 = (((SelectResults) sr[i][1]).size());\n        strg2 = resType2.getFieldNames();\n\n        set2 = (((SelectResults) sr[i][1]).asSet());\n        Iterator iter = set2.iterator();\n        while (iter.hasNext()) {\n          Struct stc2 = (Struct) iter.next();\n          valPf2 = stc2.get(strg2[0]);\n          valPos2 = stc2.get(strg2[1]);\n          isActive2 = ((Portfolio) stc2.get(strg2[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    if ((resType1).equals(resType2)) {\n      CacheUtils.log(\"Both Search Results are of the same Type i.e.--> \" + resType1);\n    } else {\n      fail(\"FAILED:Search result Type is different in both the cases\");\n    }\n    if (resSize1 == resSize2 || resSize1 != 0) {\n      CacheUtils\n          .log(\"Search Results size is Non Zero and equal in both cases i.e.  Size= \" + resSize1);\n    } else {\n      fail(\"FAILED:Search result size is different in both the cases\");\n    }\n    itert2 = set2.iterator();\n    itert1 = set1.iterator();\n    while (itert1.hasNext()) {\n      Struct stc2 = (Struct) itert2.next();\n      Struct stc1 = (Struct) itert1.next();\n      if (stc2.get(strg2[0]) != stc1.get(strg1[0]))\n        fail(\n            \"FAILED: In both the Cases the first member of StructSet i.e. Portfolio are different. \");\n      if (stc2.get(strg2[1]) != stc1.get(strg1[1]))\n        fail(\"FAILED: In both the cases Positions are different\");\n      if (!StringUtils.equals(((Position) stc2.get(strg2[1])).secId,\n          ((Position) stc1.get(strg1[1])).secId))\n        fail(\"FAILED: In both the cases Positions secIds are different\");\n      if (((Portfolio) stc2.get(strg2[0])).isActive() != ((Portfolio) stc1.get(strg1[0]))\n          .isActive())\n        fail(\"FAILED: Status of the Portfolios found are different\");\n      if (((Portfolio) stc2.get(strg2[0])).getID() != ((Portfolio) stc1.get(strg1[0])).getID())\n        fail(\"FAILED: IDs of the Portfolios found are different\");\n    }\n    CacheUtils.compareResultsOfWithAndWithoutIndex(sr, this);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testNoIndexSkipping() throws Exception {\n\n    Region region = CacheUtils.createRegion(\"pos\", Portfolio.class);\n    for (int i = 0; i < 400; i++) {\n      region.put(\"\" + i, new Portfolio(i));\n    }\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT * FROM \" + SEPARATOR\n            + \"pos pf,  positions.values pos where pf.ID > 0 and pf.ID < 250  and pf.status='active' and  pos.secId != null \"};\n    SelectResults sr[][] = new SelectResults[queries.length][2];\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        sr[i][0] = (SelectResults) q.execute();\n        if (!observer.isIndexesUsed) {\n          CacheUtils.log(\"NO INDEX USED\");\n        } else {\n          fail(\"How could index be present when not created!?\");\n        }\n        \r\n        resType1 = (StructType) ((SelectResults) sr[i][0]).getCollectionType().getElementType();\n        resSize1 = (((SelectResults) sr[i][0]).size());\n        CacheUtils.log(resType1);\n        strg1 = resType1.getFieldNames();\n\n        set1 = (((SelectResults) sr[i][0]).asSet());\n        Iterator iter = set1.iterator();\n        while (iter.hasNext()) {\n          Struct stc1 = (Struct) iter.next();\n          valPf1 = stc1.get(strg1[0]);\n          valPos1 = stc1.get(strg1[1]);\n          isActive1 = ((Portfolio) stc1.get(strg1[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    \r\n\n    qs = CacheUtils.getQueryService();\n    Index index1 =\n        qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"pf.status\", SEPARATOR + \"pos pf\");\n    Index index2 = (Index) qs.createIndex(\"secIdIndex\", IndexType.FUNCTIONAL, \"pos.secId\",\n        SEPARATOR + \"pos pf, pf.positions.values pos\");\n    Index index3 = qs.createIndex(\"IDIndex\", IndexType.FUNCTIONAL, \"pf.ID\", SEPARATOR + \"pos pf\");\n\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer2 = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer2);\n        sr[i][1] = (SelectResults) q.execute();\n        if (!observer2.isIndexesUsed) {\n          fail(\"FAILED: Index NOT Used\");\n        }\n        assertEquals(observer2.indexesUsed.size(), 1);\n\n        resType2 = (StructType) ((SelectResults) sr[i][1]).getCollectionType().getElementType();\n        resSize2 = (((SelectResults) sr[i][1]).size());\n        CacheUtils.log(resType2);\n        strg2 = resType2.getFieldNames();\n\n        set2 = (((SelectResults) sr[i][1]).asSet());\n        Iterator iter = set2.iterator();\n        while (iter.hasNext()) {\n          Struct stc2 = (Struct) iter.next();\n          valPf2 = stc2.get(strg2[0]);\n          valPos2 = stc2.get(strg2[1]);\n          isActive2 = ((Portfolio) stc2.get(strg2[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    if ((resType1).equals(resType2)) {\n      CacheUtils.log(\"Both Search Results are of the same Type i.e.--> \" + resType1);\n    } else {\n      fail(\"FAILED:Search result Type is different in both the cases\");\n    }\n    if (resSize1 == resSize2 || resSize1 != 0) {\n      CacheUtils\n          .log(\"Search Results size is Non Zero and equal in both cases i.e.  Size= \" + resSize1);\n    } else {\n      fail(\"FAILED:Search result size is different in both the cases\");\n    }\n    CacheUtils.compareResultsOfWithAndWithoutIndex(sr, this);\n  }\n","date":"2020-05-29 00:37:39","endLine":429,"groupId":"38783","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoIndexSkipping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5b/375f432aeff16b84c3d0097b5c7e5253b14833.src","preCode":"  public void testNoIndexSkipping() throws Exception {\n\n    Region region = CacheUtils.createRegion(\"pos\", Portfolio.class);\n    for (int i = 0; i < 400; i++) {\n      region.put(\"\" + i, new Portfolio(i));\n    }\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT * FROM /pos pf,  positions.values pos where pf.ID > 0 and pf.ID < 250  and pf.status='active' and  pos.secId != null \"};\n    SelectResults sr[][] = new SelectResults[queries.length][2];\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        sr[i][0] = (SelectResults) q.execute();\n        if (!observer.isIndexesUsed) {\n          CacheUtils.log(\"NO INDEX USED\");\n        } else {\n          fail(\"How could index be present when not created!?\");\n        }\n        \r\n        resType1 = (StructType) ((SelectResults) sr[i][0]).getCollectionType().getElementType();\n        resSize1 = (((SelectResults) sr[i][0]).size());\n        CacheUtils.log(resType1);\n        strg1 = resType1.getFieldNames();\n\n        set1 = (((SelectResults) sr[i][0]).asSet());\n        Iterator iter = set1.iterator();\n        while (iter.hasNext()) {\n          Struct stc1 = (Struct) iter.next();\n          valPf1 = stc1.get(strg1[0]);\n          valPos1 = stc1.get(strg1[1]);\n          isActive1 = ((Portfolio) stc1.get(strg1[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    \r\n\n    qs = CacheUtils.getQueryService();\n    Index index1 = qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"pf.status\", \"/pos pf\");\n    Index index2 = (Index) qs.createIndex(\"secIdIndex\", IndexType.FUNCTIONAL, \"pos.secId\",\n        \"/pos pf, pf.positions.values pos\");\n    Index index3 = qs.createIndex(\"IDIndex\", IndexType.FUNCTIONAL, \"pf.ID\", \"/pos pf\");\n\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer2 = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer2);\n        sr[i][1] = (SelectResults) q.execute();\n        if (!observer2.isIndexesUsed) {\n          fail(\"FAILED: Index NOT Used\");\n        }\n        assertEquals(observer2.indexesUsed.size(), 1);\n\n        resType2 = (StructType) ((SelectResults) sr[i][1]).getCollectionType().getElementType();\n        resSize2 = (((SelectResults) sr[i][1]).size());\n        CacheUtils.log(resType2);\n        strg2 = resType2.getFieldNames();\n\n        set2 = (((SelectResults) sr[i][1]).asSet());\n        Iterator iter = set2.iterator();\n        while (iter.hasNext()) {\n          Struct stc2 = (Struct) iter.next();\n          valPf2 = stc2.get(strg2[0]);\n          valPos2 = stc2.get(strg2[1]);\n          isActive2 = ((Portfolio) stc2.get(strg2[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    if ((resType1).equals(resType2)) {\n      CacheUtils.log(\"Both Search Results are of the same Type i.e.--> \" + resType1);\n    } else {\n      fail(\"FAILED:Search result Type is different in both the cases\");\n    }\n    if (resSize1 == resSize2 || resSize1 != 0) {\n      CacheUtils\n          .log(\"Search Results size is Non Zero and equal in both cases i.e.  Size= \" + resSize1);\n    } else {\n      fail(\"FAILED:Search result size is different in both the cases\");\n    }\n    CacheUtils.compareResultsOfWithAndWithoutIndex(sr, this);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2021-06-04 00:32:09","commitOrder":3,"curCode":"  public void testComparisonBetnWithAndWithoutIndexCreation() throws Exception {\n\n    Region region = CacheUtils.createRegion(\"pos\", Portfolio.class);\n    for (int i = 0; i < 4; i++) {\n      region.put(\"\" + i, new Portfolio(i));\n    }\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT * FROM \" + SEPARATOR\n            + \"pos pf,  positions.values pos where pf.status='active' and pos.secId= 'IBM' and ID = 0\"};\n    SelectResults sr[][] = new SelectResults[queries.length][2];\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        sr[i][0] = (SelectResults) q.execute();\n        if (!observer.isIndexesUsed) {\n          CacheUtils.log(\"NO INDEX USED\");\n        } else {\n          fail(\"How could index be present when not created!?\");\n        }\n        \r\n        resType1 = (StructType) ((SelectResults) sr[i][0]).getCollectionType().getElementType();\n        resSize1 = (((SelectResults) sr[i][0]).size());\n        CacheUtils.log(resType1);\n        strg1 = resType1.getFieldNames();\n\n        set1 = (((SelectResults) sr[i][0]).asSet());\n        Iterator iter = set1.iterator();\n        while (iter.hasNext()) {\n          Struct stc1 = (Struct) iter.next();\n          valPf1 = stc1.get(strg1[0]);\n          valPos1 = stc1.get(strg1[1]);\n          isActive1 = ((Portfolio) stc1.get(strg1[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    \r\n\n    qs = CacheUtils.getQueryService();\n    Index index1 =\n        qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"pf.status\", SEPARATOR + \"pos pf\");\n    \r\n    \r\n    Index index3 = qs.createIndex(\"IDIndex\", IndexType.FUNCTIONAL, \"pf.ID\", SEPARATOR + \"pos pf\");\n\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer2 = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer2);\n        sr[i][1] = (SelectResults) q.execute();\n        if (!observer2.isIndexesUsed) {\n          fail(\"FAILED: Index NOT Used\");\n        }\n        resType2 = (StructType) ((SelectResults) sr[i][1]).getCollectionType().getElementType();\n        resSize2 = (((SelectResults) sr[i][1]).size());\n        strg2 = resType2.getFieldNames();\n\n        set2 = (((SelectResults) sr[i][1]).asSet());\n        Iterator iter = set2.iterator();\n        while (iter.hasNext()) {\n          Struct stc2 = (Struct) iter.next();\n          valPf2 = stc2.get(strg2[0]);\n          valPos2 = stc2.get(strg2[1]);\n          isActive2 = ((Portfolio) stc2.get(strg2[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    if ((resType1).equals(resType2)) {\n      CacheUtils.log(\"Both Search Results are of the same Type i.e.--> \" + resType1);\n    } else {\n      fail(\"FAILED:Search result Type is different in both the cases\");\n    }\n    if (resSize1 == resSize2 || resSize1 != 0) {\n      CacheUtils\n          .log(\"Search Results size is Non Zero and equal in both cases i.e.  Size= \" + resSize1);\n    } else {\n      fail(\"FAILED:Search result size is different in both the cases\");\n    }\n    itert2 = set2.iterator();\n    itert1 = set1.iterator();\n    while (itert1.hasNext()) {\n      Struct stc2 = (Struct) itert2.next();\n      Struct stc1 = (Struct) itert1.next();\n      if (stc2.get(strg2[0]) != stc1.get(strg1[0])) {\n        fail(\n            \"FAILED: In both the Cases the first member of StructSet i.e. Portfolio are different. \");\n      }\n      if (stc2.get(strg2[1]) != stc1.get(strg1[1])) {\n        fail(\"FAILED: In both the cases Positions are different\");\n      }\n      if (!StringUtils.equals(((Position) stc2.get(strg2[1])).secId,\n          ((Position) stc1.get(strg1[1])).secId)) {\n        fail(\"FAILED: In both the cases Positions secIds are different\");\n      }\n      if (((Portfolio) stc2.get(strg2[0])).isActive() != ((Portfolio) stc1.get(strg1[0]))\n          .isActive()) {\n        fail(\"FAILED: Status of the Portfolios found are different\");\n      }\n      if (((Portfolio) stc2.get(strg2[0])).getID() != ((Portfolio) stc1.get(strg1[0])).getID()) {\n        fail(\"FAILED: IDs of the Portfolios found are different\");\n      }\n    }\n    CacheUtils.compareResultsOfWithAndWithoutIndex(sr, this);\n  }\n","date":"2021-06-04 00:32:09","endLine":215,"groupId":"104903","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testComparisonBetnWithAndWithoutIndexCreation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/eb/f3c008902ae0d23a67216f0d0502225ebc96e0.src","preCode":"  public void testComparisonBetnWithAndWithoutIndexCreation() throws Exception {\n\n    Region region = CacheUtils.createRegion(\"pos\", Portfolio.class);\n    for (int i = 0; i < 4; i++) {\n      region.put(\"\" + i, new Portfolio(i));\n    }\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT * FROM \" + SEPARATOR\n            + \"pos pf,  positions.values pos where pf.status='active' and pos.secId= 'IBM' and ID = 0\"};\n    SelectResults sr[][] = new SelectResults[queries.length][2];\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        sr[i][0] = (SelectResults) q.execute();\n        if (!observer.isIndexesUsed) {\n          CacheUtils.log(\"NO INDEX USED\");\n        } else {\n          fail(\"How could index be present when not created!?\");\n        }\n        \r\n        resType1 = (StructType) ((SelectResults) sr[i][0]).getCollectionType().getElementType();\n        resSize1 = (((SelectResults) sr[i][0]).size());\n        CacheUtils.log(resType1);\n        strg1 = resType1.getFieldNames();\n\n        set1 = (((SelectResults) sr[i][0]).asSet());\n        Iterator iter = set1.iterator();\n        while (iter.hasNext()) {\n          Struct stc1 = (Struct) iter.next();\n          valPf1 = stc1.get(strg1[0]);\n          valPos1 = stc1.get(strg1[1]);\n          isActive1 = ((Portfolio) stc1.get(strg1[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    \r\n\n    qs = CacheUtils.getQueryService();\n    Index index1 =\n        qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"pf.status\", SEPARATOR + \"pos pf\");\n    \r\n    \r\n    Index index3 = qs.createIndex(\"IDIndex\", IndexType.FUNCTIONAL, \"pf.ID\", SEPARATOR + \"pos pf\");\n\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer2 = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer2);\n        sr[i][1] = (SelectResults) q.execute();\n        if (!observer2.isIndexesUsed) {\n          fail(\"FAILED: Index NOT Used\");\n        }\n        resType2 = (StructType) ((SelectResults) sr[i][1]).getCollectionType().getElementType();\n        resSize2 = (((SelectResults) sr[i][1]).size());\n        strg2 = resType2.getFieldNames();\n\n        set2 = (((SelectResults) sr[i][1]).asSet());\n        Iterator iter = set2.iterator();\n        while (iter.hasNext()) {\n          Struct stc2 = (Struct) iter.next();\n          valPf2 = stc2.get(strg2[0]);\n          valPos2 = stc2.get(strg2[1]);\n          isActive2 = ((Portfolio) stc2.get(strg2[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    if ((resType1).equals(resType2)) {\n      CacheUtils.log(\"Both Search Results are of the same Type i.e.--> \" + resType1);\n    } else {\n      fail(\"FAILED:Search result Type is different in both the cases\");\n    }\n    if (resSize1 == resSize2 || resSize1 != 0) {\n      CacheUtils\n          .log(\"Search Results size is Non Zero and equal in both cases i.e.  Size= \" + resSize1);\n    } else {\n      fail(\"FAILED:Search result size is different in both the cases\");\n    }\n    itert2 = set2.iterator();\n    itert1 = set1.iterator();\n    while (itert1.hasNext()) {\n      Struct stc2 = (Struct) itert2.next();\n      Struct stc1 = (Struct) itert1.next();\n      if (stc2.get(strg2[0]) != stc1.get(strg1[0]))\n        fail(\n            \"FAILED: In both the Cases the first member of StructSet i.e. Portfolio are different. \");\n      if (stc2.get(strg2[1]) != stc1.get(strg1[1]))\n        fail(\"FAILED: In both the cases Positions are different\");\n      if (!StringUtils.equals(((Position) stc2.get(strg2[1])).secId,\n          ((Position) stc1.get(strg1[1])).secId))\n        fail(\"FAILED: In both the cases Positions secIds are different\");\n      if (((Portfolio) stc2.get(strg2[0])).isActive() != ((Portfolio) stc1.get(strg1[0]))\n          .isActive())\n        fail(\"FAILED: Status of the Portfolios found are different\");\n      if (((Portfolio) stc2.get(strg2[0])).getID() != ((Portfolio) stc1.get(strg1[0])).getID())\n        fail(\"FAILED: IDs of the Portfolios found are different\");\n    }\n    CacheUtils.compareResultsOfWithAndWithoutIndex(sr, this);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":3,"curCode":"  public void testNoIndexSkipping() throws Exception {\n\n    Region region = CacheUtils.createRegion(\"pos\", Portfolio.class);\n    for (int i = 0; i < 400; i++) {\n      region.put(\"\" + i, new Portfolio(i));\n    }\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT * FROM \" + SEPARATOR\n            + \"pos pf,  positions.values pos where pf.ID > 0 and pf.ID < 250  and pf.status='active' and  pos.secId != null \"};\n    SelectResults sr[][] = new SelectResults[queries.length][2];\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        sr[i][0] = (SelectResults) q.execute();\n        if (!observer.isIndexesUsed) {\n          CacheUtils.log(\"NO INDEX USED\");\n        } else {\n          fail(\"How could index be present when not created!?\");\n        }\n        \r\n        resType1 = (StructType) ((SelectResults) sr[i][0]).getCollectionType().getElementType();\n        resSize1 = (((SelectResults) sr[i][0]).size());\n        CacheUtils.log(resType1);\n        strg1 = resType1.getFieldNames();\n\n        set1 = (((SelectResults) sr[i][0]).asSet());\n        Iterator iter = set1.iterator();\n        while (iter.hasNext()) {\n          Struct stc1 = (Struct) iter.next();\n          valPf1 = stc1.get(strg1[0]);\n          valPos1 = stc1.get(strg1[1]);\n          isActive1 = ((Portfolio) stc1.get(strg1[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    \r\n\n    qs = CacheUtils.getQueryService();\n    Index index1 =\n        qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"pf.status\", SEPARATOR + \"pos pf\");\n    Index index2 = (Index) qs.createIndex(\"secIdIndex\", IndexType.FUNCTIONAL, \"pos.secId\",\n        SEPARATOR + \"pos pf, pf.positions.values pos\");\n    Index index3 = qs.createIndex(\"IDIndex\", IndexType.FUNCTIONAL, \"pf.ID\", SEPARATOR + \"pos pf\");\n\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer2 = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer2);\n        sr[i][1] = (SelectResults) q.execute();\n        if (!observer2.isIndexesUsed) {\n          fail(\"FAILED: Index NOT Used\");\n        }\n        assertEquals(observer2.indexesUsed.size(), 1);\n\n        resType2 = (StructType) ((SelectResults) sr[i][1]).getCollectionType().getElementType();\n        resSize2 = (((SelectResults) sr[i][1]).size());\n        CacheUtils.log(resType2);\n        strg2 = resType2.getFieldNames();\n\n        set2 = (((SelectResults) sr[i][1]).asSet());\n        Iterator iter = set2.iterator();\n        while (iter.hasNext()) {\n          Struct stc2 = (Struct) iter.next();\n          valPf2 = stc2.get(strg2[0]);\n          valPos2 = stc2.get(strg2[1]);\n          isActive2 = ((Portfolio) stc2.get(strg2[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    if ((resType1).equals(resType2)) {\n      CacheUtils.log(\"Both Search Results are of the same Type i.e.--> \" + resType1);\n    } else {\n      fail(\"FAILED:Search result Type is different in both the cases\");\n    }\n    if (resSize1 == resSize2 || resSize1 != 0) {\n      CacheUtils\n          .log(\"Search Results size is Non Zero and equal in both cases i.e.  Size= \" + resSize1);\n    } else {\n      fail(\"FAILED:Search result size is different in both the cases\");\n    }\n    CacheUtils.compareResultsOfWithAndWithoutIndex(sr, this);\n  }\n","date":"2020-05-29 00:37:39","endLine":429,"groupId":"104903","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoIndexSkipping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5b/375f432aeff16b84c3d0097b5c7e5253b14833.src","preCode":"  public void testNoIndexSkipping() throws Exception {\n\n    Region region = CacheUtils.createRegion(\"pos\", Portfolio.class);\n    for (int i = 0; i < 400; i++) {\n      region.put(\"\" + i, new Portfolio(i));\n    }\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    String queries[] = {\n        \"SELECT DISTINCT * FROM \" + SEPARATOR\n            + \"pos pf,  positions.values pos where pf.ID > 0 and pf.ID < 250  and pf.status='active' and  pos.secId != null \"};\n    SelectResults sr[][] = new SelectResults[queries.length][2];\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        sr[i][0] = (SelectResults) q.execute();\n        if (!observer.isIndexesUsed) {\n          CacheUtils.log(\"NO INDEX USED\");\n        } else {\n          fail(\"How could index be present when not created!?\");\n        }\n        \r\n        resType1 = (StructType) ((SelectResults) sr[i][0]).getCollectionType().getElementType();\n        resSize1 = (((SelectResults) sr[i][0]).size());\n        CacheUtils.log(resType1);\n        strg1 = resType1.getFieldNames();\n\n        set1 = (((SelectResults) sr[i][0]).asSet());\n        Iterator iter = set1.iterator();\n        while (iter.hasNext()) {\n          Struct stc1 = (Struct) iter.next();\n          valPf1 = stc1.get(strg1[0]);\n          valPos1 = stc1.get(strg1[1]);\n          isActive1 = ((Portfolio) stc1.get(strg1[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    \r\n\n    qs = CacheUtils.getQueryService();\n    Index index1 =\n        qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"pf.status\", SEPARATOR + \"pos pf\");\n    Index index2 = (Index) qs.createIndex(\"secIdIndex\", IndexType.FUNCTIONAL, \"pos.secId\",\n        SEPARATOR + \"pos pf, pf.positions.values pos\");\n    Index index3 = qs.createIndex(\"IDIndex\", IndexType.FUNCTIONAL, \"pf.ID\", SEPARATOR + \"pos pf\");\n\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        QueryObserverImpl observer2 = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer2);\n        sr[i][1] = (SelectResults) q.execute();\n        if (!observer2.isIndexesUsed) {\n          fail(\"FAILED: Index NOT Used\");\n        }\n        assertEquals(observer2.indexesUsed.size(), 1);\n\n        resType2 = (StructType) ((SelectResults) sr[i][1]).getCollectionType().getElementType();\n        resSize2 = (((SelectResults) sr[i][1]).size());\n        CacheUtils.log(resType2);\n        strg2 = resType2.getFieldNames();\n\n        set2 = (((SelectResults) sr[i][1]).asSet());\n        Iterator iter = set2.iterator();\n        while (iter.hasNext()) {\n          Struct stc2 = (Struct) iter.next();\n          valPf2 = stc2.get(strg2[0]);\n          valPos2 = stc2.get(strg2[1]);\n          isActive2 = ((Portfolio) stc2.get(strg2[0])).isActive();\n\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n\n    if ((resType1).equals(resType2)) {\n      CacheUtils.log(\"Both Search Results are of the same Type i.e.--> \" + resType1);\n    } else {\n      fail(\"FAILED:Search result Type is different in both the cases\");\n    }\n    if (resSize1 == resSize2 || resSize1 != 0) {\n      CacheUtils\n          .log(\"Search Results size is Non Zero and equal in both cases i.e.  Size= \" + resSize1);\n    } else {\n      fail(\"FAILED:Search result size is different in both the cases\");\n    }\n    CacheUtils.compareResultsOfWithAndWithoutIndex(sr, this);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexWithSngleFrmAndMultCondQryJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"N"}],"commitId":"2879573ffb04e9e029e14ca37d8a064268cc8f44","commitMessage":"@@@GEODE-7864: Always use curly braces for control flow statements (#6523)\n\nAuthored-by: Donal Evans <doevans@vmware.com>","date":"2021-06-04 00:32:09","modifiedFileCount":"640","status":"M","submitter":"Donal Evans"}]
