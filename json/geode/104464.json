[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testFilterOnImport() throws Exception {\n    SnapshotFilter<Integer, MyObject> odd =\n        (SnapshotFilter<Integer, MyObject>) entry -> entry.getKey() % 2 == 1;\n\n    for (final RegionType rt : RegionType.values()) {\n      for (final SerializationType st : SerializationType.values()) {\n        String name = \"test-\" + rt.name() + \"-\" + st.name();\n        Region<Integer, MyObject> region =\n            regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n        final Map<Integer, MyObject> expected = createExpected(st);\n\n        region.putAll(expected);\n        RegionSnapshotService<Integer, MyObject> rss = region.getSnapshotService();\n        rss.save(snapshotFile, SnapshotFormat.GEMFIRE, rss.createOptions());\n\n        region.destroyRegion();\n        region = regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n\n        rss = region.getSnapshotService();\n        SnapshotOptions<Integer, MyObject> options = rss.createOptions().setFilter(odd);\n        rss.load(snapshotFile, SnapshotFormat.GEMFIRE, options);\n\n        region.entrySet().forEach(entry -> assertTrue(odd.accept(entry)));\n        assertTrue(\"Comparison failure for \" + rt.name() + \"/\" + st.name(), region.size() > 0);\n      }\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":172,"groupId":"7081","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterOnImport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e9/dd9bbf18013b25bdeadc4954bba4caa961109b.src","preCode":"  public void testFilterOnImport() throws Exception {\n    SnapshotFilter<Integer, MyObject> odd =\n        (SnapshotFilter<Integer, MyObject>) entry -> entry.getKey() % 2 == 1;\n\n    for (final RegionType rt : RegionType.values()) {\n      for (final SerializationType st : SerializationType.values()) {\n        String name = \"test-\" + rt.name() + \"-\" + st.name();\n        Region<Integer, MyObject> region =\n            regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n        final Map<Integer, MyObject> expected = createExpected(st);\n\n        region.putAll(expected);\n        RegionSnapshotService<Integer, MyObject> rss = region.getSnapshotService();\n        rss.save(snapshotFile, SnapshotFormat.GEMFIRE, rss.createOptions());\n\n        region.destroyRegion();\n        region = regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n\n        rss = region.getSnapshotService();\n        SnapshotOptions<Integer, MyObject> options = rss.createOptions().setFilter(odd);\n        rss.load(snapshotFile, SnapshotFormat.GEMFIRE, options);\n\n        region.entrySet().forEach(entry -> assertTrue(odd.accept(entry)));\n        assertTrue(\"Comparison failure for \" + rt.name() + \"/\" + st.name(), region.size() > 0);\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/snapshot/RegionSnapshotJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testFilterExportException() throws Exception {\n    SnapshotFilter<Integer, MyObject> oops = (SnapshotFilter<Integer, MyObject>) entry -> {\n      throw new RuntimeException();\n    };\n\n    for (final RegionType rt : RegionType.values()) {\n      for (final SerializationType st : SerializationType.values()) {\n        String name = \"test-\" + rt.name() + \"-\" + st.name();\n        Region<Integer, MyObject> region =\n            regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n        final Map<Integer, MyObject> expected = createExpected(st);\n\n        region.putAll(expected);\n        RegionSnapshotService<Integer, MyObject> rss = region.getSnapshotService();\n        SnapshotOptions<Integer, MyObject> options = rss.createOptions().setFilter(oops);\n\n        boolean caughtException = false;\n        try {\n          rss.save(snapshotFile, SnapshotFormat.GEMFIRE, options);\n        } catch (RuntimeException e) {\n          caughtException = true;\n        }\n        assertTrue(caughtException);\n\n        region.destroyRegion();\n        region = regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n\n        rss = region.getSnapshotService();\n        rss.load(snapshotFile, SnapshotFormat.GEMFIRE, options);\n\n        assertEquals(\"Comparison failure for \" + rt.name() + \"/\" + st.name(), 0, region.size());\n      }\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":240,"groupId":"4163","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterExportException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e9/dd9bbf18013b25bdeadc4954bba4caa961109b.src","preCode":"  public void testFilterExportException() throws Exception {\n    SnapshotFilter<Integer, MyObject> oops = (SnapshotFilter<Integer, MyObject>) entry -> {\n      throw new RuntimeException();\n    };\n\n    for (final RegionType rt : RegionType.values()) {\n      for (final SerializationType st : SerializationType.values()) {\n        String name = \"test-\" + rt.name() + \"-\" + st.name();\n        Region<Integer, MyObject> region =\n            regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n        final Map<Integer, MyObject> expected = createExpected(st);\n\n        region.putAll(expected);\n        RegionSnapshotService<Integer, MyObject> rss = region.getSnapshotService();\n        SnapshotOptions<Integer, MyObject> options = rss.createOptions().setFilter(oops);\n\n        boolean caughtException = false;\n        try {\n          rss.save(snapshotFile, SnapshotFormat.GEMFIRE, options);\n        } catch (RuntimeException e) {\n          caughtException = true;\n        }\n        assertTrue(caughtException);\n\n        region.destroyRegion();\n        region = regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n\n        rss = region.getSnapshotService();\n        rss.load(snapshotFile, SnapshotFormat.GEMFIRE, options);\n\n        assertEquals(\"Comparison failure for \" + rt.name() + \"/\" + st.name(), 0, region.size());\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/snapshot/RegionSnapshotJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2021-03-03 02:57:36","codes":[{"authorDate":"2021-03-03 02:57:36","commitOrder":2,"curCode":"  public void testFilterOnImport() throws Exception {\n    SnapshotFilter<Integer, MyObject> odd =\n        (SnapshotFilter<Integer, MyObject>) entry -> entry.getKey() % 2 == 1;\n\n    for (final RegionType rt : RegionType.values()) {\n      for (final SerializationType st : SerializationType.values()) {\n        String name = \"test-\" + rt.name() + \"-\" + st.name();\n        Region<Integer, MyObject> region =\n            regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n        final Map<Integer, MyObject> expected = createExpected(st);\n\n        region.putAll(expected);\n        RegionSnapshotService<Integer, MyObject> rss = region.getSnapshotService();\n        rss.save(snapshotFile, SnapshotFormat.GEODE, rss.createOptions());\n\n        region.destroyRegion();\n        region = regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n\n        rss = region.getSnapshotService();\n        SnapshotOptions<Integer, MyObject> options = rss.createOptions().setFilter(odd);\n        rss.load(snapshotFile, SnapshotFormat.GEODE, options);\n\n        region.entrySet().forEach(entry -> assertTrue(odd.accept(entry)));\n        assertTrue(\"Comparison failure for \" + rt.name() + \"/\" + st.name(), region.size() > 0);\n      }\n    }\n  }\n","date":"2021-03-03 02:57:36","endLine":172,"groupId":"104464","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testFilterOnImport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8e/8f98a02dd4ced6c1264053cb22e54e1d6d5df6.src","preCode":"  public void testFilterOnImport() throws Exception {\n    SnapshotFilter<Integer, MyObject> odd =\n        (SnapshotFilter<Integer, MyObject>) entry -> entry.getKey() % 2 == 1;\n\n    for (final RegionType rt : RegionType.values()) {\n      for (final SerializationType st : SerializationType.values()) {\n        String name = \"test-\" + rt.name() + \"-\" + st.name();\n        Region<Integer, MyObject> region =\n            regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n        final Map<Integer, MyObject> expected = createExpected(st);\n\n        region.putAll(expected);\n        RegionSnapshotService<Integer, MyObject> rss = region.getSnapshotService();\n        rss.save(snapshotFile, SnapshotFormat.GEMFIRE, rss.createOptions());\n\n        region.destroyRegion();\n        region = regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n\n        rss = region.getSnapshotService();\n        SnapshotOptions<Integer, MyObject> options = rss.createOptions().setFilter(odd);\n        rss.load(snapshotFile, SnapshotFormat.GEMFIRE, options);\n\n        region.entrySet().forEach(entry -> assertTrue(odd.accept(entry)));\n        assertTrue(\"Comparison failure for \" + rt.name() + \"/\" + st.name(), region.size() > 0);\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/snapshot/RegionSnapshotJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2021-03-03 02:57:36","commitOrder":2,"curCode":"  public void testFilterExportException() throws Exception {\n    SnapshotFilter<Integer, MyObject> oops = (SnapshotFilter<Integer, MyObject>) entry -> {\n      throw new RuntimeException();\n    };\n\n    for (final RegionType rt : RegionType.values()) {\n      for (final SerializationType st : SerializationType.values()) {\n        String name = \"test-\" + rt.name() + \"-\" + st.name();\n        Region<Integer, MyObject> region =\n            regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n        final Map<Integer, MyObject> expected = createExpected(st);\n\n        region.putAll(expected);\n        RegionSnapshotService<Integer, MyObject> rss = region.getSnapshotService();\n        SnapshotOptions<Integer, MyObject> options = rss.createOptions().setFilter(oops);\n\n        boolean caughtException = false;\n        try {\n          rss.save(snapshotFile, SnapshotFormat.GEODE, options);\n        } catch (RuntimeException e) {\n          caughtException = true;\n        }\n        assertTrue(caughtException);\n\n        region.destroyRegion();\n        region = regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n\n        rss = region.getSnapshotService();\n        rss.load(snapshotFile, SnapshotFormat.GEODE, options);\n\n        assertEquals(\"Comparison failure for \" + rt.name() + \"/\" + st.name(), 0, region.size());\n      }\n    }\n  }\n","date":"2021-03-03 02:57:36","endLine":240,"groupId":"104464","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testFilterExportException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8e/8f98a02dd4ced6c1264053cb22e54e1d6d5df6.src","preCode":"  public void testFilterExportException() throws Exception {\n    SnapshotFilter<Integer, MyObject> oops = (SnapshotFilter<Integer, MyObject>) entry -> {\n      throw new RuntimeException();\n    };\n\n    for (final RegionType rt : RegionType.values()) {\n      for (final SerializationType st : SerializationType.values()) {\n        String name = \"test-\" + rt.name() + \"-\" + st.name();\n        Region<Integer, MyObject> region =\n            regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n        final Map<Integer, MyObject> expected = createExpected(st);\n\n        region.putAll(expected);\n        RegionSnapshotService<Integer, MyObject> rss = region.getSnapshotService();\n        SnapshotOptions<Integer, MyObject> options = rss.createOptions().setFilter(oops);\n\n        boolean caughtException = false;\n        try {\n          rss.save(snapshotFile, SnapshotFormat.GEMFIRE, options);\n        } catch (RuntimeException e) {\n          caughtException = true;\n        }\n        assertTrue(caughtException);\n\n        region.destroyRegion();\n        region = regionGenerator.createRegion(cache, diskStore.getName(), rt, name);\n\n        rss = region.getSnapshotService();\n        rss.load(snapshotFile, SnapshotFormat.GEMFIRE, options);\n\n        assertEquals(\"Comparison failure for \" + rt.name() + \"/\" + st.name(), 0, region.size());\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/snapshot/RegionSnapshotJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"a9b25a14f71edcd4cf4072f5e2148c21abd64a02","commitMessage":"@@@GEODE-8975: Deprecate old format. (#6058)\n\nDeprecates old format name.\nCreates new format name.","date":"2021-03-03 02:57:36","modifiedFileCount":"13","status":"M","submitter":"Jacob Barrett"}]
