[{"authorTime":"2019-11-26 01:29:53","codes":[{"authorDate":"2019-11-26 01:29:53","commitOrder":1,"curCode":"  public void test2Server() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> createServer(regionName, 0, false, 0, null));\n    int serverPort2 = server2.invoke(() -> createServer(regionName, 0, false, 0, null));\n\n    client1.invoke(() -> createClient(regionName, hostName, new int[] {serverPort1}, -1, -1,\n        true, true, true, true));\n    client2.invoke(() -> createClient(regionName, hostName, new int[] {serverPort2}, -1, -1,\n        true, true, true, true));\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().addCacheListener(new CountingCacheListener<>());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().addCacheListener(new CountingCacheListener<>());\n\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    client2.invoke(() -> {\n      doPutAll(getCache().getRegion(regionName), \"key-\", 10);\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await(\"entry with null value exists for \" + key).until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","date":"2019-11-26 01:29:53","endLine":800,"groupId":"47378","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"test2Server","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/db/1a918af748ffd822bc92b189411267d25b1494.src","preCode":"  public void test2Server() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> createServer(regionName, 0, false, 0, null));\n    int serverPort2 = server2.invoke(() -> createServer(regionName, 0, false, 0, null));\n\n    client1.invoke(() -> createClient(regionName, hostName, new int[] {serverPort1}, -1, -1,\n        true, true, true, true));\n    client2.invoke(() -> createClient(regionName, hostName, new int[] {serverPort2}, -1, -1,\n        true, true, true, true));\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().addCacheListener(new CountingCacheListener<>());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().addCacheListener(new CountingCacheListener<>());\n\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    client2.invoke(() -> {\n      doPutAll(getCache().getRegion(regionName), \"key-\", 10);\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await(\"entry with null value exists for \" + key).until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"B"},{"authorDate":"2019-11-26 01:29:53","commitOrder":1,"curCode":"  public void testPRServer() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> createServer(regionName, 0, true, 1, null));\n    int serverPort2 = server2.invoke(() -> createServer(regionName, 0, true, 1, null));\n\n    client1.invoke(() -> createClient(regionName, hostName, new int[] {serverPort1}, -1, 59000,\n        true, true, false, true));\n    client2.invoke(() -> createClient(regionName, hostName, new int[] {serverPort2}, -1, 59000,\n        true, true, false, true));\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().addCacheListener(new CountingCacheListener<>());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().addCacheListener(new CountingCacheListener<>());\n\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    client2.invoke(() -> {\n      doPutAll(getCache().getRegion(regionName), \"key-\", 10);\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await().until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","date":"2019-11-26 01:29:53","endLine":1561,"groupId":"47378","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPRServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/db/1a918af748ffd822bc92b189411267d25b1494.src","preCode":"  public void testPRServer() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> createServer(regionName, 0, true, 1, null));\n    int serverPort2 = server2.invoke(() -> createServer(regionName, 0, true, 1, null));\n\n    client1.invoke(() -> createClient(regionName, hostName, new int[] {serverPort1}, -1, 59000,\n        true, true, false, true));\n    client2.invoke(() -> createClient(regionName, hostName, new int[] {serverPort2}, -1, 59000,\n        true, true, false, true));\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().addCacheListener(new CountingCacheListener<>());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().addCacheListener(new CountingCacheListener<>());\n\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    client2.invoke(() -> {\n      doPutAll(getCache().getRegion(regionName), \"key-\", 10);\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await().until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1237,"status":"B"}],"commitId":"030f8815aeedcc9f00d2698f2c655fee6adf3f22","commitMessage":"@@@GEODE-6818: Fix PutAllClientServerDistributedTest (#4363)\n\nOverhaul test and fix sources of flakiness (wait/notify and sleeps).\n\n* Rename PutAllCSDUnitTest\n* Replace object wait/notify with CountDownLatch(es)\n* Replace sleeps with Awaitility\n* Inline super-class and lots of methods\n* Remove unused or unnecessary code\n* Update deprecated API usage\n* Update to AssertJ and Awaitility\n* Improve tearDown to prevent NullPointerException\n* Add javadocs to testBug51725\n* Add await for client2 in testBug51725","date":"2019-11-26 01:29:53","modifiedFileCount":"5","status":"B","submitter":"Kirk Lund"},{"authorTime":"2020-01-30 04:41:57","codes":[{"authorDate":"2020-01-30 04:41:57","commitOrder":2,"curCode":"  public void test2Server() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> createServer(regionName, false, 0));\n    int serverPort2 = server2.invoke(() -> createServer(regionName, false, 0));\n\n    client1.invoke(() -> createClient(serverPort1, -1, -1, true, true, true, true));\n    client2.invoke(() -> createClient(serverPort2, -1, -1, true, true, true, true));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client2.invoke(() -> doPutAll(getCache().getRegion(regionName), \"key-\", 10));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await(\"entry with null value exists for \" + key).until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","date":"2020-01-30 04:41:57","endLine":762,"groupId":"47378","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"test2Server","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/00/ac64349886b9e41717c965e5315c60aa9269e4.src","preCode":"  public void test2Server() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> createServer(regionName, 0, false, 0, null));\n    int serverPort2 = server2.invoke(() -> createServer(regionName, 0, false, 0, null));\n\n    client1.invoke(() -> createClient(regionName, hostName, new int[] {serverPort1}, -1, -1,\n        true, true, true, true));\n    client2.invoke(() -> createClient(regionName, hostName, new int[] {serverPort2}, -1, -1,\n        true, true, true, true));\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().addCacheListener(new CountingCacheListener<>());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().addCacheListener(new CountingCacheListener<>());\n\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    client2.invoke(() -> {\n      doPutAll(getCache().getRegion(regionName), \"key-\", 10);\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await(\"entry with null value exists for \" + key).until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"},{"authorDate":"2020-01-30 04:41:57","commitOrder":2,"curCode":"  public void testPRServer() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> createServer(regionName, true, 1));\n    int serverPort2 = server2.invoke(() -> createServer(regionName, true, 1));\n\n    client1.invoke(() -> createClient(serverPort1, -1, 59000, true, true, false, true));\n    client2.invoke(() -> createClient(serverPort2, -1, 59000, true, true, false, true));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client2.invoke(() -> {\n      doPutAll(getCache().getRegion(regionName), \"key-\", 10);\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await().until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","date":"2020-01-30 04:41:57","endLine":1468,"groupId":"47378","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPRServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/00/ac64349886b9e41717c965e5315c60aa9269e4.src","preCode":"  public void testPRServer() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> createServer(regionName, 0, true, 1, null));\n    int serverPort2 = server2.invoke(() -> createServer(regionName, 0, true, 1, null));\n\n    client1.invoke(() -> createClient(regionName, hostName, new int[] {serverPort1}, -1, 59000,\n        true, true, false, true));\n    client2.invoke(() -> createClient(regionName, hostName, new int[] {serverPort2}, -1, 59000,\n        true, true, false, true));\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().addCacheListener(new CountingCacheListener<>());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().addCacheListener(new CountingCacheListener<>());\n\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n      });\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> {\n        assertThat(region.size()).isZero();\n      });\n    });\n\n    \r\n    client2.invoke(() -> {\n      doPutAll(getCache().getRegion(regionName), \"key-\", 10);\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await().until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1170,"status":"M"}],"commitId":"fe1d4d1c4220a08f5b9cb49bb3bb3f10ea178197","commitMessage":"@@@GEODE-7650: Cleanup PutAllClientServerDistributedTest (#4644)\n\n","date":"2020-01-30 04:41:57","modifiedFileCount":"1","status":"M","submitter":"Kirk Lund"},{"authorTime":"2020-02-11 01:59:50","codes":[{"authorDate":"2020-02-11 01:59:50","commitOrder":3,"curCode":"  public void test2Server() throws Exception {\n    int serverPort1 = server1.invoke(() -> new ServerBuilder()\n        .regionShortcut(REPLICATE)\n        .create());\n    int serverPort2 = server2.invoke(() -> new ServerBuilder()\n        .regionShortcut(REPLICATE)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled(true)\n        .prSingleHopEnabled(true)\n        .registerInterest(true)\n        .serverPorts(serverPort1)\n        .subscriptionAckInterval(1)\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy(-1)\n        .create());\n    client2.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled(true)\n        .prSingleHopEnabled(true)\n        .registerInterest(true)\n        .serverPorts(serverPort2)\n        .subscriptionAckInterval(1)\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy(-1)\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client2.invoke(() -> doPutAll(getClientCache().getRegion(regionName), \"key-\", 10));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await(\"entry with null value exists for \" + key).until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","date":"2020-02-11 01:59:50","endLine":832,"groupId":"13660","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"test2Server","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/34/b1671d0359b58970c37f3f8d41c125dc812c58.src","preCode":"  public void test2Server() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> createServer(regionName, false, 0));\n    int serverPort2 = server2.invoke(() -> createServer(regionName, false, 0));\n\n    client1.invoke(() -> createClient(serverPort1, -1, -1, true, true, true, true));\n    client2.invoke(() -> createClient(serverPort2, -1, -1, true, true, true, true));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client2.invoke(() -> doPutAll(getCache().getRegion(regionName), \"key-\", 10));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await(\"entry with null value exists for \" + key).until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"M"},{"authorDate":"2020-02-11 01:59:50","commitOrder":3,"curCode":"  public void testPRServer() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort2 = server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled(true)\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort1)\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy(-1)\n        .create());\n    client2.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled(true)\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort2)\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy(-1)\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client2.invoke(() -> doPutAll(getClientCache().getRegion(regionName), \"key-\", 10));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await().until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","date":"2020-02-11 01:59:50","endLine":1605,"groupId":"13663","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPRServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/34/b1671d0359b58970c37f3f8d41c125dc812c58.src","preCode":"  public void testPRServer() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> createServer(regionName, true, 1));\n    int serverPort2 = server2.invoke(() -> createServer(regionName, true, 1));\n\n    client1.invoke(() -> createClient(serverPort1, -1, 59000, true, true, false, true));\n    client2.invoke(() -> createClient(serverPort2, -1, 59000, true, true, false, true));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry).isNotNull();\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client2.invoke(() -> {\n      doPutAll(getCache().getRegion(regionName), \"key-\", 10);\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await().until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1294,"status":"M"}],"commitId":"01d78cad59bb1526c15ca45c555210a311e123f6","commitMessage":"@@@GEODE-7650: Cleanup PutAllClientServerDistributedTest (#4680)\n\n","date":"2020-02-11 01:59:50","modifiedFileCount":"1","status":"M","submitter":"Kirk Lund"},{"authorTime":"2020-05-09 03:55:15","codes":[{"authorDate":"2020-05-09 03:55:15","commitOrder":4,"curCode":"  public void test2Server() throws Exception {\n    int serverPort1 = server1.invoke(() -> new ServerBuilder()\n        .regionShortcut(REPLICATE)\n        .create());\n    int serverPort2 = server2.invoke(() -> new ServerBuilder()\n        .regionShortcut(REPLICATE)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled()\n        .prSingleHopEnabled(true)\n        .registerInterest(true)\n        .serverPorts(serverPort1)\n        .subscriptionAckInterval()\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy()\n        .create());\n    client2.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled()\n        .prSingleHopEnabled(true)\n        .registerInterest(true)\n        .serverPorts(serverPort2)\n        .subscriptionAckInterval()\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy()\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter<String, TickerData> countingCacheWriter =\n          (CountingCacheWriter<String, TickerData>) region.getAttributes().getCacheWriter();\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter<String, TickerData> countingCacheWriter =\n          (CountingCacheWriter<String, TickerData>) region.getAttributes().getCacheWriter();\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(\n        () -> doPutAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED));\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(\n        () -> doPutAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED));\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client2.invoke(() -> doPutAll(getClientCache().getRegion(regionName), \"key-\", 10));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await(\"entry with null value exists for \" + key).until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","date":"2020-05-09 03:55:15","endLine":834,"groupId":"21394","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"test2Server","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/56/96fe93341bda1ea4aee3d8d2a56d46c733c7ad.src","preCode":"  public void test2Server() throws Exception {\n    int serverPort1 = server1.invoke(() -> new ServerBuilder()\n        .regionShortcut(REPLICATE)\n        .create());\n    int serverPort2 = server2.invoke(() -> new ServerBuilder()\n        .regionShortcut(REPLICATE)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled(true)\n        .prSingleHopEnabled(true)\n        .registerInterest(true)\n        .serverPorts(serverPort1)\n        .subscriptionAckInterval(1)\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy(-1)\n        .create());\n    client2.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled(true)\n        .prSingleHopEnabled(true)\n        .registerInterest(true)\n        .serverPorts(serverPort2)\n        .subscriptionAckInterval(1)\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy(-1)\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client2.invoke(() -> doPutAll(getClientCache().getRegion(regionName), \"key-\", 10));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await(\"entry with null value exists for \" + key).until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":511,"status":"M"},{"authorDate":"2020-05-09 03:55:15","commitOrder":4,"curCode":"  public void testPRServer() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort2 = server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled()\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort1)\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy()\n        .create());\n    client2.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled()\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort2)\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy()\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter<String, TickerData> countingCacheWriter =\n          (CountingCacheWriter<String, TickerData>) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter<String, TickerData> countingCacheWriter =\n          (CountingCacheWriter<String, TickerData>) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(\n        () -> doPutAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED));\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(\n        () -> doPutAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED));\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client2.invoke(() -> doPutAll(getClientCache().getRegion(regionName), \"key-\", 10));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await().until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","date":"2020-05-09 03:55:15","endLine":1603,"groupId":"21394","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPRServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/56/96fe93341bda1ea4aee3d8d2a56d46c733c7ad.src","preCode":"  public void testPRServer() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort2 = server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled(true)\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort1)\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy(-1)\n        .create());\n    client2.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled(true)\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort2)\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy(-1)\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter countingCacheWriter =\n          (CountingCacheWriter) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(() -> {\n      doPutAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client2.invoke(() -> doPutAll(getClientCache().getRegion(regionName), \"key-\", 10));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await().until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1294,"status":"M"}],"commitId":"a1d0c74d72c1daf87e7b854f7635fc6eb92ccd77","commitMessage":"@@@Geode 7812: Changes to PutAllClientServerDistributionTest (#5076)\n\nFixed issues causing testEventIdOutOfOrderInPartitionRegionSingleHop to fail\n\nCo-authored-by: Mark Hanson <agingade@vmware.com>","date":"2020-05-09 03:55:15","modifiedFileCount":"2","status":"M","submitter":"mhansonp"},{"authorTime":"2021-06-12 00:37:39","codes":[{"authorDate":"2021-06-12 00:37:39","commitOrder":5,"curCode":"  public void test2Server() throws Exception {\n    int serverPort1 = server1.invoke(() -> new ServerBuilder()\n        .regionShortcut(REPLICATE)\n        .create());\n    int serverPort2 = server2.invoke(() -> new ServerBuilder()\n        .regionShortcut(REPLICATE)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .registerInterest(true)\n        .serverPorts(serverPort1)\n        .subscriptionAckInterval()\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy()\n        .create());\n    client2.invoke(() -> new ClientBuilder()\n        .registerInterest(true)\n        .serverPorts(serverPort2)\n        .subscriptionAckInterval()\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy()\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter<String, TickerData> countingCacheWriter =\n          (CountingCacheWriter<String, TickerData>) region.getAttributes().getCacheWriter();\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter<String, TickerData> countingCacheWriter =\n          (CountingCacheWriter<String, TickerData>) region.getAttributes().getCacheWriter();\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(\n        () -> doPutAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED));\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(\n        () -> doPutAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED));\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client2.invoke(() -> doPutAll(getClientCache().getRegion(regionName), \"key-\", 10));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await(\"entry with null value exists for \" + key).until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","date":"2021-06-12 00:37:39","endLine":835,"groupId":"10378","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"test2Server","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/67/423c8e1a111bbc232743747f5bc1987b447992.src","preCode":"  public void test2Server() throws Exception {\n    int serverPort1 = server1.invoke(() -> new ServerBuilder()\n        .regionShortcut(REPLICATE)\n        .create());\n    int serverPort2 = server2.invoke(() -> new ServerBuilder()\n        .regionShortcut(REPLICATE)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled()\n        .prSingleHopEnabled(true)\n        .registerInterest(true)\n        .serverPorts(serverPort1)\n        .subscriptionAckInterval()\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy()\n        .create());\n    client2.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled()\n        .prSingleHopEnabled(true)\n        .registerInterest(true)\n        .serverPorts(serverPort2)\n        .subscriptionAckInterval()\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy()\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter<String, TickerData> countingCacheWriter =\n          (CountingCacheWriter<String, TickerData>) region.getAttributes().getCacheWriter();\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter<String, TickerData> countingCacheWriter =\n          (CountingCacheWriter<String, TickerData>) region.getAttributes().getCacheWriter();\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(\n        () -> doPutAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED));\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(\n        () -> doPutAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED));\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client2.invoke(() -> doPutAll(getClientCache().getRegion(regionName), \"key-\", 10));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await(\"entry with null value exists for \" + key).until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"M"},{"authorDate":"2021-06-12 00:37:39","commitOrder":5,"curCode":"  public void testPRServer() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort2 = server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .registerInterest(true)\n        .serverPorts(serverPort1)\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy()\n        .create());\n    client2.invoke(() -> new ClientBuilder()\n        .registerInterest(true)\n        .serverPorts(serverPort2)\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy()\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter<String, TickerData> countingCacheWriter =\n          (CountingCacheWriter<String, TickerData>) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter<String, TickerData> countingCacheWriter =\n          (CountingCacheWriter<String, TickerData>) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(\n        () -> doPutAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED));\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(\n        () -> doPutAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED));\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client2.invoke(() -> doPutAll(getClientCache().getRegion(regionName), \"key-\", 10));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await().until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","date":"2021-06-12 00:37:39","endLine":1581,"groupId":"10378","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testPRServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/67/423c8e1a111bbc232743747f5bc1987b447992.src","preCode":"  public void testPRServer() throws Exception {\n    \r\n    int serverPort1 = server1.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n    int serverPort2 = server2.invoke(() -> new ServerBuilder()\n        .redundantCopies(1)\n        .regionShortcut(PARTITION)\n        .create());\n\n    client1.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled()\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort1)\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy()\n        .create());\n    client2.invoke(() -> new ClientBuilder()\n        .concurrencyChecksEnabled()\n        .readTimeout(59000)\n        .registerInterest(true)\n        .serverPorts(serverPort2)\n        .subscriptionEnabled(true)\n        .subscriptionRedundancy()\n        .create());\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doPutAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      region.getAttributesMutator().setCacheWriter(new CountingCacheWriter<>());\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED);\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter<String, TickerData> countingCacheWriter =\n          (CountingCacheWriter<String, TickerData>) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      assertThat(region.size()).isZero();\n\n      CountingCacheWriter<String, TickerData> countingCacheWriter =\n          (CountingCacheWriter<String, TickerData>) region.getAttributes().getCacheWriter();\n      \r\n      \r\n      assertThat(countingCacheWriter.getDestroys()).isEqualTo(ONE_HUNDRED / 2);\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n\n    \r\n    AsyncInvocation<Void> putAll1InClient1 = client1.invokeAsync(\n        () -> doPutAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED));\n\n    \r\n    AsyncInvocation<Void> putAll2InClient1 = client1.invokeAsync(\n        () -> doPutAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED));\n\n    putAll1InClient1.await();\n    putAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp1 = 0;\n      long timeStamp2 = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"async1key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp1);\n        timeStamp1 = tickerData.getTimeStamp();\n\n        tickerData = region.getEntry(\"async2key-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp2);\n        timeStamp2 = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED * 2));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async1key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"async2key-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll1InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async1key-\", ONE_HUNDRED);\n    });\n\n    \r\n    AsyncInvocation<Void> removeAll2InClient1 = client1.invokeAsync(() -> {\n      doRemoveAll(getClientCache().getRegion(regionName), \"async2key-\", ONE_HUNDRED);\n    });\n\n    removeAll1InClient1.await();\n    removeAll2InClient1.await();\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      doRemoveAll(region, \"key-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server1.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doPutAll(region, \"p2pkey-\", ONE_HUNDRED);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    server2.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n\n      long timeStamp = 0;\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        TickerData tickerData = region.getEntry(\"p2pkey-\" + i).getValue();\n        assertThat(tickerData.getPrice()).isEqualTo(i);\n        assertThat(tickerData.getTimeStamp()).isGreaterThanOrEqualTo(timeStamp);\n        timeStamp = tickerData.getTimeStamp();\n      }\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isEqualTo(ONE_HUNDRED));\n\n      for (int i = 0; i < ONE_HUNDRED; i++) {\n        Entry<String, TickerData> regionEntry = region.getEntry(\"p2pkey-\" + i);\n        assertThat(regionEntry.getValue()).isNull();\n      }\n    });\n\n    \r\n    server1.invoke(() -> {\n      Region<String, TickerData> region = getCache().getRegion(regionName);\n      doRemoveAll(region, \"p2pkey-\", ONE_HUNDRED);\n      assertThat(region.size()).isZero();\n    });\n\n    \r\n    server2.invoke(() -> {\n      assertThat(getCache().getRegion(regionName).size()).isZero();\n    });\n\n    \r\n    client2.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n      await().untilAsserted(() -> assertThat(region.size()).isZero());\n    });\n\n    \r\n    client2.invoke(() -> doPutAll(getClientCache().getRegion(regionName), \"key-\", 10));\n\n    \r\n    client1.invoke(() -> {\n      Region<String, TickerData> region = getClientCache().getRegion(regionName);\n\n      for (int i = 0; i < 10; i++) {\n        String key = \"key-\" + i;\n\n        await().until(() -> {\n          Entry<String, TickerData> regionEntry = region.getEntry(key);\n          return regionEntry != null && regionEntry.getValue() == null;\n        });\n\n        \r\n        TickerData tickerData = region.getEntry(\"key-\" + i).getValue();\n        assertThat(tickerData).isNull();\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1276,"status":"M"}],"commitId":"5df584bf4e9504e667ac70dd551a310c4921b53d","commitMessage":"@@@GEODE-9103: Fix failures in PutAllClientServerDistributedTest (#6542)\n\nPrevent ServerConnectivityExceptions when test encounters long GCs or\nslow CPUs.\n\nAdd test-only system property to AbstractCacheServer for\nmaximumTimeBetweenPings.\n\nUse system property to set maximumTimeBetweenPings to GeodeAwaitility\ntimeout.\n\nUse GeodeAwaitility timeout for client pool readTimeout.\n\nRemove unnecessary client pool settings within each test.\n\nInline getCause within Throwable assertions.\n\nFixes GEODE-8528.  GEODE-9103.  GEODE-9242.  GEODE-9296.","date":"2021-06-12 00:37:39","modifiedFileCount":"2","status":"M","submitter":"Kirk Lund"}]
