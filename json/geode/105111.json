[{"authorTime":"2018-08-11 06:49:22","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public void testOrderedResultsReplicatedRegion() throws Exception {\n    String queries[] = {\n        \r\n\n        \"select distinct status as st from /portfolio1 where ID > 0 order by status\",\n\n        \"select distinct p.status as st from /portfolio1 p where ID > 0 and status = 'inactive' order by p.status\",\n\n        \"select distinct p.position1.secId as st from /portfolio1 p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId\",\n        \"select distinct  key.status as st from /portfolio1 key where key.ID > 5 order by key.status\",\n        \"select distinct  key.status as st from /portfolio1 key where key.status = 'inactive' order by key.status desc, key.ID\"\n\n    };\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    Position.resetCounter();\n    \r\n\n    Region r1 = createRegion(\"portfolio1\", Portfolio.class);\n\n    for (int i = 0; i < 50; i++) {\n      r1.put(i + \"\", new Portfolio(i));\n    }\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        r[i][0] = q.execute();\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    \r\n    this.createIndex(\"i1\", IndexType.FUNCTIONAL, \"p.status\", \"/portfolio1 p\");\n    this.createIndex(\"i2\", IndexType.FUNCTIONAL, \"p.ID\", \"/portfolio1 p\");\n    this.createIndex(\"i3\", IndexType.FUNCTIONAL, \"p.position1.secId\", \"/portfolio1 p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n    ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, queries);\n    ssOrrs.compareExternallySortedQueriesWithOrderBy(queries, r);\n  }\n","date":"2018-07-18 03:54:18","endLine":697,"groupId":"21959","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrderedResultsReplicatedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/55/a0eafcfac553c559f2421e36dd7a69cb807ac6.src","preCode":"  public void testOrderedResultsReplicatedRegion() throws Exception {\n    String queries[] = {\n        \r\n\n        \"select distinct status as st from /portfolio1 where ID > 0 order by status\",\n\n        \"select distinct p.status as st from /portfolio1 p where ID > 0 and status = 'inactive' order by p.status\",\n\n        \"select distinct p.position1.secId as st from /portfolio1 p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId\",\n        \"select distinct  key.status as st from /portfolio1 key where key.ID > 5 order by key.status\",\n        \"select distinct  key.status as st from /portfolio1 key where key.status = 'inactive' order by key.status desc, key.ID\"\n\n    };\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    Position.resetCounter();\n    \r\n\n    Region r1 = createRegion(\"portfolio1\", Portfolio.class);\n\n    for (int i = 0; i < 50; i++) {\n      r1.put(i + \"\", new Portfolio(i));\n    }\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        r[i][0] = q.execute();\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    \r\n    this.createIndex(\"i1\", IndexType.FUNCTIONAL, \"p.status\", \"/portfolio1 p\");\n    this.createIndex(\"i2\", IndexType.FUNCTIONAL, \"p.ID\", \"/portfolio1 p\");\n    this.createIndex(\"i3\", IndexType.FUNCTIONAL, \"p.position1.secId\", \"/portfolio1 p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n    ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, queries);\n    ssOrrs.compareExternallySortedQueriesWithOrderBy(queries, r);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":637,"status":"NB"},{"authorDate":"2018-08-11 06:49:22","commitOrder":2,"curCode":"  public void testOrderedResultsPartitionedRegion_Bug43514_2() throws Exception {\n    String queries[] = {\n        \r\n        \"select distinct status as st from /portfolio1 where ID > 0 order by status\",\n        \"select distinct p.status as st from /portfolio1 p where ID > 0 and status = 'inactive' order by p.status\",\n        \"select distinct p.position1.secId as st from /portfolio1 p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId\",\n        \"select distinct  key.status as st from /portfolio1 key where key.ID > 5 order by key.status\",\n        \"select distinct key.ID,key.status as st from /portfolio1 key where key.status = 'inactive' order by key.status desc, key.ID\",\n        \"select distinct  status, ID from /portfolio1 order by status\",\n        \"select distinct  p.status, p.ID from /portfolio1 p order by p.status\",\n        \"select distinct p.position1.secId, p.ID from /portfolio1 p order by p.position1.secId\",\n        \"select distinct p.status, p.ID from /portfolio1 p order by p.status asc, p.ID\",\n\n        \"select distinct p.ID from /portfolio1 p, p.positions.values order by p.ID\",\n\n        \"select distinct * from /portfolio1 p, p.positions.values order by p.ID\",\n        \"select distinct p.iD, p.status from /portfolio1 p order by p.iD\",\n        \"select distinct iD, status from /portfolio1 order by iD\",\n        \"select distinct * from /portfolio1 p order by p.getID()\",\n        \"select distinct * from /portfolio1 p order by p.getP1().secId\",\n        \"select distinct  p.position1.secId  as st from /portfolio1 p order by p.position1.secId\",\n\n        \"select distinct p, pos from /portfolio1 p, p.positions.values pos order by p.ID\",\n        \"select distinct p, pos from /portfolio1 p, p.positions.values pos order by pos.secId\",\n        \"select distinct status from /portfolio1 where ID > 0 order by status\",\n        \"select distinct p.status as st from /portfolio1 p where ID > 0 and status = 'inactive' order by p.status\",\n        \"select distinct p.position1.secId as st from /portfolio1 p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId\"\n\n    };\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    Position.resetCounter();\n    \r\n    PartitionAttributesFactory paf = new PartitionAttributesFactory();\n    AttributesFactory af = new AttributesFactory();\n    af.setPartitionAttributes(paf.create());\n    Region r1 = CacheUtils.createRegion(\"portfolio1\", af.create(), false);\n\n    for (int i = 0; i < 50; i++) {\n\n      r1.put(i + \"\", new Portfolio(i));\n    }\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        r[i][0] = q.execute();\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    \r\n    this.createIndex(\"i1\", IndexType.FUNCTIONAL, \"p.status\", \"/portfolio1 p\");\n    this.createIndex(\"i2\", IndexType.FUNCTIONAL, \"p.ID\", \"/portfolio1 p\");\n    this.createIndex(\"i3\", IndexType.FUNCTIONAL, \"p.position1.secId\", \"/portfolio1 p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n    ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, queries);\n  }\n","date":"2018-08-11 06:49:22","endLine":288,"groupId":"21959","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrderedResultsPartitionedRegion_Bug43514_2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f9/cfa69e508fed220a334eed043290123c2f457b.src","preCode":"  public void testOrderedResultsPartitionedRegion_Bug43514_2() throws Exception {\n    String queries[] = {\n        \r\n        \"select distinct status as st from /portfolio1 where ID > 0 order by status\",\n        \"select distinct p.status as st from /portfolio1 p where ID > 0 and status = 'inactive' order by p.status\",\n        \"select distinct p.position1.secId as st from /portfolio1 p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId\",\n        \"select distinct  key.status as st from /portfolio1 key where key.ID > 5 order by key.status\",\n        \"select distinct key.ID,key.status as st from /portfolio1 key where key.status = 'inactive' order by key.status desc, key.ID\",\n        \"select distinct  status, ID from /portfolio1 order by status\",\n        \"select distinct  p.status, p.ID from /portfolio1 p order by p.status\",\n        \"select distinct p.position1.secId, p.ID from /portfolio1 p order by p.position1.secId\",\n        \"select distinct p.status, p.ID from /portfolio1 p order by p.status asc, p.ID\",\n\n        \"select distinct p.ID from /portfolio1 p, p.positions.values order by p.ID\",\n\n        \"select distinct * from /portfolio1 p, p.positions.values order by p.ID\",\n        \"select distinct p.iD, p.status from /portfolio1 p order by p.iD\",\n        \"select distinct iD, status from /portfolio1 order by iD\",\n        \"select distinct * from /portfolio1 p order by p.getID()\",\n        \"select distinct * from /portfolio1 p order by p.getP1().secId\",\n        \"select distinct  p.position1.secId  as st from /portfolio1 p order by p.position1.secId\",\n\n        \"select distinct p, pos from /portfolio1 p, p.positions.values pos order by p.ID\",\n        \"select distinct p, pos from /portfolio1 p, p.positions.values pos order by pos.secId\",\n        \"select distinct status from /portfolio1 where ID > 0 order by status\",\n        \"select distinct p.status as st from /portfolio1 p where ID > 0 and status = 'inactive' order by p.status\",\n        \"select distinct p.position1.secId as st from /portfolio1 p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId\"\n\n    };\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    Position.resetCounter();\n    \r\n    PartitionAttributesFactory paf = new PartitionAttributesFactory();\n    AttributesFactory af = new AttributesFactory();\n    af.setPartitionAttributes(paf.create());\n    Region r1 = CacheUtils.createRegion(\"portfolio1\", af.create(), false);\n\n    for (int i = 0; i < 50; i++) {\n\n      r1.put(i + \"\", new Portfolio(i));\n    }\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        r[i][0] = q.execute();\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    \r\n    this.createIndex(\"i1\", IndexType.FUNCTIONAL, \"p.status\", \"/portfolio1 p\");\n    this.createIndex(\"i2\", IndexType.FUNCTIONAL, \"p.ID\", \"/portfolio1 p\");\n    this.createIndex(\"i3\", IndexType.FUNCTIONAL, \"p.position1.secId\", \"/portfolio1 p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n    ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, queries);\n  }\n","realPath":"geode-dunit/src/main/java/org/apache/geode/cache/query/functional/OrderByPartitionedJUnitTestBase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"B"}],"commitId":"65c79841b65d7bd9ffa3c50fa73d4d3857dced58","commitMessage":"@@@ GEODE-5530: Removes test dependency from other test source sets (#2294)\n\nMoves common sources to geode-dunit or geode-junit.\n\nCo-authored-by: Finn Sutherland <fsoutherland@pivotal.io>","date":"2018-08-11 06:49:22","modifiedFileCount":"10","status":"M","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":3,"curCode":"  public void testOrderedResultsReplicatedRegion() throws Exception {\n    String queries[] = {\n        \r\n\n        \"select distinct status as st from \" + SEPARATOR\n            + \"portfolio1 where ID > 0 order by status\",\n\n        \"select distinct p.status as st from \" + SEPARATOR\n            + \"portfolio1 p where ID > 0 and status = 'inactive' order by p.status\",\n\n        \"select distinct p.position1.secId as st from \" + SEPARATOR\n            + \"portfolio1 p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId\",\n        \"select distinct  key.status as st from \" + SEPARATOR\n            + \"portfolio1 key where key.ID > 5 order by key.status\",\n        \"select distinct  key.status as st from \" + SEPARATOR\n            + \"portfolio1 key where key.status = 'inactive' order by key.status desc, key.ID\"\n\n    };\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    Position.resetCounter();\n    \r\n\n    Region r1 = createRegion(\"portfolio1\", Portfolio.class);\n\n    for (int i = 0; i < 50; i++) {\n      r1.put(i + \"\", new Portfolio(i));\n    }\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        r[i][0] = q.execute();\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    \r\n    this.createIndex(\"i1\", IndexType.FUNCTIONAL, \"p.status\", SEPARATOR + \"portfolio1 p\");\n    this.createIndex(\"i2\", IndexType.FUNCTIONAL, \"p.ID\", SEPARATOR + \"portfolio1 p\");\n    this.createIndex(\"i3\", IndexType.FUNCTIONAL, \"p.position1.secId\", SEPARATOR + \"portfolio1 p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n    ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, queries);\n    ssOrrs.compareExternallySortedQueriesWithOrderBy(queries, r);\n  }\n","date":"2020-05-29 00:37:39","endLine":713,"groupId":"105111","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testOrderedResultsReplicatedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/9241d083a7c619f49ae17454fa0cf6dab4f4d8.src","preCode":"  public void testOrderedResultsReplicatedRegion() throws Exception {\n    String queries[] = {\n        \r\n\n        \"select distinct status as st from /portfolio1 where ID > 0 order by status\",\n\n        \"select distinct p.status as st from /portfolio1 p where ID > 0 and status = 'inactive' order by p.status\",\n\n        \"select distinct p.position1.secId as st from /portfolio1 p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId\",\n        \"select distinct  key.status as st from /portfolio1 key where key.ID > 5 order by key.status\",\n        \"select distinct  key.status as st from /portfolio1 key where key.status = 'inactive' order by key.status desc, key.ID\"\n\n    };\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    Position.resetCounter();\n    \r\n\n    Region r1 = createRegion(\"portfolio1\", Portfolio.class);\n\n    for (int i = 0; i < 50; i++) {\n      r1.put(i + \"\", new Portfolio(i));\n    }\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        r[i][0] = q.execute();\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    \r\n    this.createIndex(\"i1\", IndexType.FUNCTIONAL, \"p.status\", \"/portfolio1 p\");\n    this.createIndex(\"i2\", IndexType.FUNCTIONAL, \"p.ID\", \"/portfolio1 p\");\n    this.createIndex(\"i3\", IndexType.FUNCTIONAL, \"p.position1.secId\", \"/portfolio1 p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n    ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, queries);\n    ssOrrs.compareExternallySortedQueriesWithOrderBy(queries, r);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/OrderByReplicatedJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":648,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":3,"curCode":"  public void testOrderedResultsPartitionedRegion_Bug43514_2() throws Exception {\n    String queries[] = {\n        \r\n        \"select distinct status as st from \" + SEPARATOR\n            + \"portfolio1 where ID > 0 order by status\",\n        \"select distinct p.status as st from \" + SEPARATOR\n            + \"portfolio1 p where ID > 0 and status = 'inactive' order by p.status\",\n        \"select distinct p.position1.secId as st from \" + SEPARATOR\n            + \"portfolio1 p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId\",\n        \"select distinct  key.status as st from \" + SEPARATOR\n            + \"portfolio1 key where key.ID > 5 order by key.status\",\n        \"select distinct key.ID,key.status as st from \" + SEPARATOR\n            + \"portfolio1 key where key.status = 'inactive' order by key.status desc, key.ID\",\n        \"select distinct  status, ID from \" + SEPARATOR + \"portfolio1 order by status\",\n        \"select distinct  p.status, p.ID from \" + SEPARATOR + \"portfolio1 p order by p.status\",\n        \"select distinct p.position1.secId, p.ID from \" + SEPARATOR\n            + \"portfolio1 p order by p.position1.secId\",\n        \"select distinct p.status, p.ID from \" + SEPARATOR\n            + \"portfolio1 p order by p.status asc, p.ID\",\n\n        \"select distinct p.ID from \" + SEPARATOR + \"portfolio1 p, p.positions.values order by p.ID\",\n\n        \"select distinct * from \" + SEPARATOR + \"portfolio1 p, p.positions.values order by p.ID\",\n        \"select distinct p.iD, p.status from \" + SEPARATOR + \"portfolio1 p order by p.iD\",\n        \"select distinct iD, status from \" + SEPARATOR + \"portfolio1 order by iD\",\n        \"select distinct * from \" + SEPARATOR + \"portfolio1 p order by p.getID()\",\n        \"select distinct * from \" + SEPARATOR + \"portfolio1 p order by p.getP1().secId\",\n        \"select distinct  p.position1.secId  as st from \" + SEPARATOR\n            + \"portfolio1 p order by p.position1.secId\",\n\n        \"select distinct p, pos from \" + SEPARATOR\n            + \"portfolio1 p, p.positions.values pos order by p.ID\",\n        \"select distinct p, pos from \" + SEPARATOR\n            + \"portfolio1 p, p.positions.values pos order by pos.secId\",\n        \"select distinct status from \" + SEPARATOR + \"portfolio1 where ID > 0 order by status\",\n        \"select distinct p.status as st from \" + SEPARATOR\n            + \"portfolio1 p where ID > 0 and status = 'inactive' order by p.status\",\n        \"select distinct p.position1.secId as st from \" + SEPARATOR\n            + \"portfolio1 p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId\"\n\n    };\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    Position.resetCounter();\n    \r\n    PartitionAttributesFactory paf = new PartitionAttributesFactory();\n    AttributesFactory af = new AttributesFactory();\n    af.setPartitionAttributes(paf.create());\n    Region r1 = CacheUtils.createRegion(\"portfolio1\", af.create(), false);\n\n    for (int i = 0; i < 50; i++) {\n\n      r1.put(i + \"\", new Portfolio(i));\n    }\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        r[i][0] = q.execute();\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    \r\n    this.createIndex(\"i1\", IndexType.FUNCTIONAL, \"p.status\", SEPARATOR + \"portfolio1 p\");\n    this.createIndex(\"i2\", IndexType.FUNCTIONAL, \"p.ID\", SEPARATOR + \"portfolio1 p\");\n    this.createIndex(\"i3\", IndexType.FUNCTIONAL, \"p.position1.secId\", SEPARATOR + \"portfolio1 p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n    ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, queries);\n  }\n","date":"2020-05-29 00:37:39","endLine":319,"groupId":"105111","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testOrderedResultsPartitionedRegion_Bug43514_2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/0b/998fc982b646ba73914e516c5b6b6700557d92.src","preCode":"  public void testOrderedResultsPartitionedRegion_Bug43514_2() throws Exception {\n    String queries[] = {\n        \r\n        \"select distinct status as st from /portfolio1 where ID > 0 order by status\",\n        \"select distinct p.status as st from /portfolio1 p where ID > 0 and status = 'inactive' order by p.status\",\n        \"select distinct p.position1.secId as st from /portfolio1 p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId\",\n        \"select distinct  key.status as st from /portfolio1 key where key.ID > 5 order by key.status\",\n        \"select distinct key.ID,key.status as st from /portfolio1 key where key.status = 'inactive' order by key.status desc, key.ID\",\n        \"select distinct  status, ID from /portfolio1 order by status\",\n        \"select distinct  p.status, p.ID from /portfolio1 p order by p.status\",\n        \"select distinct p.position1.secId, p.ID from /portfolio1 p order by p.position1.secId\",\n        \"select distinct p.status, p.ID from /portfolio1 p order by p.status asc, p.ID\",\n\n        \"select distinct p.ID from /portfolio1 p, p.positions.values order by p.ID\",\n\n        \"select distinct * from /portfolio1 p, p.positions.values order by p.ID\",\n        \"select distinct p.iD, p.status from /portfolio1 p order by p.iD\",\n        \"select distinct iD, status from /portfolio1 order by iD\",\n        \"select distinct * from /portfolio1 p order by p.getID()\",\n        \"select distinct * from /portfolio1 p order by p.getP1().secId\",\n        \"select distinct  p.position1.secId  as st from /portfolio1 p order by p.position1.secId\",\n\n        \"select distinct p, pos from /portfolio1 p, p.positions.values pos order by p.ID\",\n        \"select distinct p, pos from /portfolio1 p, p.positions.values pos order by pos.secId\",\n        \"select distinct status from /portfolio1 where ID > 0 order by status\",\n        \"select distinct p.status as st from /portfolio1 p where ID > 0 and status = 'inactive' order by p.status\",\n        \"select distinct p.position1.secId as st from /portfolio1 p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId\"\n\n    };\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    Position.resetCounter();\n    \r\n    PartitionAttributesFactory paf = new PartitionAttributesFactory();\n    AttributesFactory af = new AttributesFactory();\n    af.setPartitionAttributes(paf.create());\n    Region r1 = CacheUtils.createRegion(\"portfolio1\", af.create(), false);\n\n    for (int i = 0; i < 50; i++) {\n\n      r1.put(i + \"\", new Portfolio(i));\n    }\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        r[i][0] = q.execute();\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    \r\n    this.createIndex(\"i1\", IndexType.FUNCTIONAL, \"p.status\", \"/portfolio1 p\");\n    this.createIndex(\"i2\", IndexType.FUNCTIONAL, \"p.ID\", \"/portfolio1 p\");\n    this.createIndex(\"i3\", IndexType.FUNCTIONAL, \"p.position1.secId\", \"/portfolio1 p\");\n\n    \r\n    for (int i = 0; i < queries.length; i++) {\n      Query q = null;\n      try {\n        q = CacheUtils.getQueryService().newQuery(queries[i]);\n        CacheUtils.getLogger().info(\"Executing query: \" + queries[i]);\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        r[i][1] = q.execute();\n\n      } catch (Exception e) {\n        e.printStackTrace();\n        fail(q.getQueryString());\n      }\n    }\n    StructSetOrResultsSet ssOrrs = new StructSetOrResultsSet();\n    ssOrrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, queries);\n  }\n","realPath":"geode-dunit/src/main/java/org/apache/geode/cache/query/functional/OrderByPartitionedJUnitTestBase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
