[{"authorTime":"2019-12-20 23:37:16","codes":[{"authorDate":"2019-12-20 23:37:16","commitOrder":1,"curCode":"  public void listWithNullJarNameReturnsAllDeployedJarsForGroup() {\n\n    Set<Deployment> configuredDeployments = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        new Deployment(\"jar2.jar\", \"deployedBy2\", \"deployedTime2\"),\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredDeployments);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setJarFileName(null);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result)\n        .containsExactlyInAnyOrderElementsOf(configuredDeployments);\n  }\n","date":"2019-12-20 23:37:16","endLine":60,"groupId":"42962","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listWithNullJarNameReturnsAllDeployedJarsForGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/91/eea4ead694a5bcd1e04bc41c59a2b519da88b9.src","preCode":"  public void listWithNullJarNameReturnsAllDeployedJarsForGroup() {\n\n    Set<Deployment> configuredDeployments = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        new Deployment(\"jar2.jar\", \"deployedBy2\", \"deployedTime2\"),\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredDeployments);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setJarFileName(null);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result)\n        .containsExactlyInAnyOrderElementsOf(configuredDeployments);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/DeploymentManagerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"},{"authorDate":"2019-12-20 23:37:16","commitOrder":1,"curCode":"  public void listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar() {\n    String requestedJarFile = \"jar2.jar\";\n    Deployment expectedDeployment =\n        new Deployment(requestedJarFile, \"deployedBy2\", \"deployedTime2\");\n\n    Set<Deployment> configuredJarNames = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        expectedDeployment,\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredJarNames);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setJarFileName(requestedJarFile);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result).containsExactly(expectedDeployment);\n  }\n","date":"2019-12-20 23:37:16","endLine":88,"groupId":"42960","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/91/eea4ead694a5bcd1e04bc41c59a2b519da88b9.src","preCode":"  public void listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar() {\n    String requestedJarFile = \"jar2.jar\";\n    Deployment expectedDeployment =\n        new Deployment(requestedJarFile, \"deployedBy2\", \"deployedTime2\");\n\n    Set<Deployment> configuredJarNames = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        expectedDeployment,\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredJarNames);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setJarFileName(requestedJarFile);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result).containsExactly(expectedDeployment);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/DeploymentManagerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"}],"commitId":"1e7bba0a07906ec889fdf5227826e3351219ea23","commitMessage":"@@@GEODE-7398 :show deployer and deploy time (#4509)\n\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>\nCo-authored-by: Dale Emery <demery@pivotal.io>\nCo-authored-by: Jinmei Liao <jiliao@pivotal.io>\n","date":"2019-12-20 23:37:16","modifiedFileCount":"13","status":"B","submitter":"Jinmei Liao"},{"authorTime":"2020-02-27 13:09:01","codes":[{"authorDate":"2020-02-27 13:09:01","commitOrder":2,"curCode":"  public void listWithNullJarNameReturnsAllDeployedJarsForGroup() {\n\n    Set<Deployment> configuredDeployments = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        new Deployment(\"jar2.jar\", \"deployedBy2\", \"deployedTime2\"),\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredDeployments);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setFileName(null);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result)\n        .containsExactlyInAnyOrderElementsOf(configuredDeployments);\n  }\n","date":"2020-02-27 13:09:01","endLine":60,"groupId":"42962","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"listWithNullJarNameReturnsAllDeployedJarsForGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/66/659800a1774b4e16912be6e0cdf968c35c392d.src","preCode":"  public void listWithNullJarNameReturnsAllDeployedJarsForGroup() {\n\n    Set<Deployment> configuredDeployments = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        new Deployment(\"jar2.jar\", \"deployedBy2\", \"deployedTime2\"),\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredDeployments);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setJarFileName(null);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result)\n        .containsExactlyInAnyOrderElementsOf(configuredDeployments);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/DeploymentManagerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2020-02-27 13:09:01","commitOrder":2,"curCode":"  public void listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar() {\n    String requestedJarFile = \"jar2.jar\";\n    Deployment expectedDeployment =\n        new Deployment(requestedJarFile, \"deployedBy2\", \"deployedTime2\");\n\n    Set<Deployment> configuredJarNames = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        expectedDeployment,\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredJarNames);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setFileName(requestedJarFile);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result).containsExactly(expectedDeployment);\n  }\n","date":"2020-02-27 13:09:01","endLine":88,"groupId":"42960","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/66/659800a1774b4e16912be6e0cdf968c35c392d.src","preCode":"  public void listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar() {\n    String requestedJarFile = \"jar2.jar\";\n    Deployment expectedDeployment =\n        new Deployment(requestedJarFile, \"deployedBy2\", \"deployedTime2\");\n\n    Set<Deployment> configuredJarNames = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        expectedDeployment,\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredJarNames);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setJarFileName(requestedJarFile);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result).containsExactly(expectedDeployment);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/DeploymentManagerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"ddfee1c502b26945829fdb13b43829aa85be4002","commitMessage":"@@@GEODE-7421:  deploy jar by REST API/JAVA API for Management\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>","date":"2020-02-27 13:09:01","modifiedFileCount":"32","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2020-02-27 13:09:01","codes":[{"authorDate":"2021-02-27 07:10:35","commitOrder":3,"curCode":"  public void listWithNullJarNameReturnsAllDeployedJarsForGroup() {\n\n    Set<Deployment> configuredDeployments = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        new Deployment(\"jar2.jar\", \"deployedBy2\", \"deployedTime2\"),\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredDeployments);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setDeploymentName(null);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result)\n        .containsExactlyInAnyOrderElementsOf(configuredDeployments);\n  }\n","date":"2021-02-27 07:10:35","endLine":60,"groupId":"42962","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"listWithNullJarNameReturnsAllDeployedJarsForGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ab/f5c5db729d8a2fc38a8ea3a7894341a32518ef.src","preCode":"  public void listWithNullJarNameReturnsAllDeployedJarsForGroup() {\n\n    Set<Deployment> configuredDeployments = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        new Deployment(\"jar2.jar\", \"deployedBy2\", \"deployedTime2\"),\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredDeployments);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setFileName(null);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result)\n        .containsExactlyInAnyOrderElementsOf(configuredDeployments);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/DeploymentManagerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2020-02-27 13:09:01","commitOrder":3,"curCode":"  public void listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar() {\n    String requestedJarFile = \"jar2.jar\";\n    Deployment expectedDeployment =\n        new Deployment(requestedJarFile, \"deployedBy2\", \"deployedTime2\");\n\n    Set<Deployment> configuredJarNames = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        expectedDeployment,\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredJarNames);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setFileName(requestedJarFile);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result).containsExactly(expectedDeployment);\n  }\n","date":"2020-02-27 13:09:01","endLine":88,"groupId":"42960","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/66/659800a1774b4e16912be6e0cdf968c35c392d.src","preCode":"  public void listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar() {\n    String requestedJarFile = \"jar2.jar\";\n    Deployment expectedDeployment =\n        new Deployment(requestedJarFile, \"deployedBy2\", \"deployedTime2\");\n\n    Set<Deployment> configuredJarNames = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        expectedDeployment,\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredJarNames);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setFileName(requestedJarFile);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result).containsExactly(expectedDeployment);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/DeploymentManagerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"e32c3076307d05b928ac8f238b0ec72cf73b1227","commitMessage":"@@@GEODE-8905: Introduce JarDeploymentService (#5989)\n\n* GEODE-8905: Introduce JarDeploymentService.\n   Unified deploy functionality between REST and GFSH\n   Pulled deploy jar functionality into its own module\n   Renamed internal *Util classes to *Utils\n\nCo-authored-by: Udo Kohlmeyer <ukohlmeyer@pivotal.io>","date":"2021-02-27 07:10:35","modifiedFileCount":"153","status":"M","submitter":"Patrick Johnson"},{"authorTime":"2020-02-27 13:09:01","codes":[{"authorDate":"2021-03-03 08:55:08","commitOrder":4,"curCode":"  public void listWithNullJarNameReturnsAllDeployedJarsForGroup() {\n\n    Set<Deployment> configuredDeployments = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        new Deployment(\"jar2.jar\", \"deployedBy2\", \"deployedTime2\"),\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredDeployments);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setFileName(null);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result)\n        .containsExactlyInAnyOrderElementsOf(configuredDeployments);\n  }\n","date":"2021-03-03 08:55:08","endLine":60,"groupId":"42962","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"listWithNullJarNameReturnsAllDeployedJarsForGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/66/659800a1774b4e16912be6e0cdf968c35c392d.src","preCode":"  public void listWithNullJarNameReturnsAllDeployedJarsForGroup() {\n\n    Set<Deployment> configuredDeployments = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        new Deployment(\"jar2.jar\", \"deployedBy2\", \"deployedTime2\"),\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredDeployments);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setDeploymentName(null);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result)\n        .containsExactlyInAnyOrderElementsOf(configuredDeployments);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/DeploymentManagerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2020-02-27 13:09:01","commitOrder":4,"curCode":"  public void listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar() {\n    String requestedJarFile = \"jar2.jar\";\n    Deployment expectedDeployment =\n        new Deployment(requestedJarFile, \"deployedBy2\", \"deployedTime2\");\n\n    Set<Deployment> configuredJarNames = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        expectedDeployment,\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredJarNames);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setFileName(requestedJarFile);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result).containsExactly(expectedDeployment);\n  }\n","date":"2020-02-27 13:09:01","endLine":88,"groupId":"42960","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/66/659800a1774b4e16912be6e0cdf968c35c392d.src","preCode":"  public void listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar() {\n    String requestedJarFile = \"jar2.jar\";\n    Deployment expectedDeployment =\n        new Deployment(requestedJarFile, \"deployedBy2\", \"deployedTime2\");\n\n    Set<Deployment> configuredJarNames = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        expectedDeployment,\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredJarNames);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setFileName(requestedJarFile);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result).containsExactly(expectedDeployment);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/DeploymentManagerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"f2636e0fbfd898f8c213751381040500922ebdf8","commitMessage":"@@@Revert \"GEODE-8905: Introduce JarDeploymentService (#5989)\" (#6078)\n\nThis reverts commit e32c3076","date":"2021-03-03 08:55:08","modifiedFileCount":"153","status":"M","submitter":"Udo Kohlmeyer"},{"authorTime":"2021-03-30 03:16:27","codes":[{"authorDate":"2021-03-30 03:16:27","commitOrder":5,"curCode":"  public void listWithNullJarNameReturnsAllDeployedJarsForGroup() {\n\n    Set<Deployment> configuredDeployments = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        new Deployment(\"jar2.jar\", \"deployedBy2\", \"deployedTime2\"),\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredDeployments);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = function.apply(null);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result)\n        .containsExactlyInAnyOrderElementsOf(configuredDeployments);\n  }\n","date":"2021-03-30 03:16:27","endLine":74,"groupId":"10400","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"listWithNullJarNameReturnsAllDeployedJarsForGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/21/76e5304cfc69bb8ce61557180d2af934fbb335.src","preCode":"  public void listWithNullJarNameReturnsAllDeployedJarsForGroup() {\n\n    Set<Deployment> configuredDeployments = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        new Deployment(\"jar2.jar\", \"deployedBy2\", \"deployedTime2\"),\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredDeployments);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setFileName(null);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result)\n        .containsExactlyInAnyOrderElementsOf(configuredDeployments);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/DeploymentManagerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2021-03-30 03:16:27","commitOrder":5,"curCode":"  public void listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar() {\n    String requestedJarFile = \"jar2.jar\";\n    Deployment expectedDeployment =\n        new Deployment(requestedJarFile, \"deployedBy2\", \"deployedTime2\");\n\n    Set<Deployment> configuredJarNames = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        expectedDeployment,\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredJarNames);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = function.apply(requestedJarFile);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result).containsExactly(expectedDeployment);\n  }\n","date":"2021-03-30 03:16:27","endLine":101,"groupId":"10400","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/21/76e5304cfc69bb8ce61557180d2af934fbb335.src","preCode":"  public void listWithJarNameReturnsSingletonListConfiguredDeploymentForThatJar() {\n    String requestedJarFile = \"jar2.jar\";\n    Deployment expectedDeployment =\n        new Deployment(requestedJarFile, \"deployedBy2\", \"deployedTime2\");\n\n    Set<Deployment> configuredJarNames = new HashSet<>(asList(\n        new Deployment(\"jar1.jar\", \"deployedBy1\", \"deployedTime1\"),\n        expectedDeployment,\n        new Deployment(\"jar3.jar\", \"deployedBy3\", \"deployedTime3\")));\n\n    Configuration configuration = mock(Configuration.class);\n    when(configuration.getDeployments()).thenReturn(configuredJarNames);\n\n    InternalConfigurationPersistenceService persistenceService =\n        mock(InternalConfigurationPersistenceService.class);\n    when(persistenceService.getConfiguration(any())).thenReturn(configuration);\n\n    DeploymentManager manager = new DeploymentManager(persistenceService);\n\n    Deployment filter = new Deployment();\n    filter.setFileName(requestedJarFile);\n\n    List<Deployment> result = manager.list(filter, \"some-group\");\n\n    assertThat(result).containsExactly(expectedDeployment);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/DeploymentManagerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"6f764a7046d4dc6a511240dc592454a55d7efce0","commitMessage":"@@@GEODE-8905: Introduce JarDeploymentService (#6144)\n\n* GEODE-8905: Introduce JarDeploymentService (#5989)\n\n* GEODE-8905: Introduce JarDeploymentService.\n   Unified deploy functionality between REST and GFSH\n   Pulled deploy jar functionality into its own module\n   Renamed internal *Util classes to *Utils\n\nCo-authored-by: Patrick Johnson <pjohnson@pivotal.io>\nCo-authored-by: Udo Kohlmeyer <ukohlmeyer@pivotal.io>","date":"2021-03-30 03:16:27","modifiedFileCount":"154","status":"M","submitter":"Udo Kohlmeyer"}]
