[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void closeCQ(VM vm, final String cqName) throws Exception {\n    vm.invoke(new CacheSerializableRunnable(\"Close CQ :\" + cqName) {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Close CQ. ###\" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCqService.\");\n        }\n\n        \r\n        CqQuery cq1 = null;\n        try {\n          cq1 = cqService.getCq(cqName);\n          cq1.close();\n        } catch (Exception ex) {\n          ex.printStackTrace();\n          fail(\"Failed to close CQ \" + cqName + \" . \" + ex.getMessage());\n        }\n        assertTrue(\"Close CQ state mismatch\", cq1.getState().isClosed());\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":969,"groupId":"27790","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"closeCQ","params":"(VMvm@finalStringcqName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/72f987b8bfe0450ffa77a55fdf0efa1c66c36f.src","preCode":"  public void closeCQ(VM vm, final String cqName) throws Exception {\n    vm.invoke(new CacheSerializableRunnable(\"Close CQ :\" + cqName) {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Close CQ. ###\" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCqService.\");\n        }\n\n        \r\n        CqQuery cq1 = null;\n        try {\n          cq1 = cqService.getCq(cqName);\n          cq1.close();\n        } catch (Exception ex) {\n          ex.printStackTrace();\n          fail(\"Failed to close CQ \" + cqName + \" . \" + ex.getMessage());\n        }\n        assertTrue(\"Close CQ state mismatch\", cq1.getState().isClosed());\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":944,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void executeAndCloseAndExecuteIRMultipleTimes(VM vm, final String cqName,\n      final String queryStr) {\n    vm.invoke(new CacheSerializableRunnable(\"Create CQ :\" + cqName) {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCQService.\");\n        }\n        \r\n        CqAttributesFactory cqf = new CqAttributesFactory();\n        CqListener[] cqListeners = {new CqQueryTestListener(LogWriterUtils.getLogWriter())};\n\n        cqf.initCqListeners(cqListeners);\n        CqAttributes cqa = cqf.create();\n\n        CqQuery cq1;\n        \r\n        try {\n          cq1 = cqService.newCq(cqName, queryStr, cqa);\n          assertTrue(\"newCq() state mismatch\", cq1.getState().isStopped());\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to create CQ \" + cqName + \" . \");\n          err.initCause(ex);\n          LogWriterUtils.getLogWriter().info(\"CqService is :\" + cqService, err);\n          throw err;\n        }\n\n        try {\n          cq1.executeWithInitialResults();\n          try {\n            cq1.executeWithInitialResults();\n          } catch (IllegalStateException e) {\n            \r\n          }\n          cq1.close();\n\n          try {\n            cq1.executeWithInitialResults();\n          } catch (CqClosedException e) {\n            \r\n            return;\n          }\n          fail(\"should have received cqClosedException\");\n        } catch (Exception e) {\n          fail(\"exception not expected here \" + e);\n        }\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":1058,"groupId":"27788","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"executeAndCloseAndExecuteIRMultipleTimes","params":"(VMvm@finalStringcqName@finalStringqueryStr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/72f987b8bfe0450ffa77a55fdf0efa1c66c36f.src","preCode":"  public void executeAndCloseAndExecuteIRMultipleTimes(VM vm, final String cqName,\n      final String queryStr) {\n    vm.invoke(new CacheSerializableRunnable(\"Create CQ :\" + cqName) {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCQService.\");\n        }\n        \r\n        CqAttributesFactory cqf = new CqAttributesFactory();\n        CqListener[] cqListeners = {new CqQueryTestListener(LogWriterUtils.getLogWriter())};\n\n        cqf.initCqListeners(cqListeners);\n        CqAttributes cqa = cqf.create();\n\n        CqQuery cq1;\n        \r\n        try {\n          cq1 = cqService.newCq(cqName, queryStr, cqa);\n          assertTrue(\"newCq() state mismatch\", cq1.getState().isStopped());\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to create CQ \" + cqName + \" . \");\n          err.initCause(ex);\n          LogWriterUtils.getLogWriter().info(\"CqService is :\" + cqService, err);\n          throw err;\n        }\n\n        try {\n          cq1.executeWithInitialResults();\n          try {\n            cq1.executeWithInitialResults();\n          } catch (IllegalStateException e) {\n            \r\n          }\n          cq1.close();\n\n          try {\n            cq1.executeWithInitialResults();\n          } catch (CqClosedException e) {\n            \r\n            return;\n          }\n          fail(\"should have received cqClosedException\");\n        } catch (Exception e) {\n          fail(\"exception not expected here \" + e);\n        }\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1005,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-08-31 08:10:50","codes":[{"authorDate":"2018-08-31 08:10:50","commitOrder":2,"curCode":"  public void closeCQ(VM vm, final String cqName) {\n    vm.invoke(() -> {\n      \r\n      QueryService cqService = getCache().getQueryService();\n\n      \r\n      CqQuery cq1 = cqService.getCq(cqName);\n      cq1.close();\n\n      assertThat(cq1.getState().isClosed()).describedAs(\"Close CQ state mismatch\").isTrue();\n    });\n  }\n","date":"2018-08-31 08:10:50","endLine":769,"groupId":"10482","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"closeCQ","params":"(VMvm@finalStringcqName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void closeCQ(VM vm, final String cqName) throws Exception {\n    vm.invoke(new CacheSerializableRunnable(\"Close CQ :\" + cqName) {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Close CQ. ###\" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCqService.\");\n        }\n\n        \r\n        CqQuery cq1 = null;\n        try {\n          cq1 = cqService.getCq(cqName);\n          cq1.close();\n        } catch (Exception ex) {\n          ex.printStackTrace();\n          fail(\"Failed to close CQ \" + cqName + \" . \" + ex.getMessage());\n        }\n        assertTrue(\"Close CQ state mismatch\", cq1.getState().isClosed());\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":758,"status":"M"},{"authorDate":"2018-08-31 08:10:50","commitOrder":2,"curCode":"  private void executeAndCloseAndExecuteIRMultipleTimes(VM vm,\n      final String queryStr) {\n    vm.invoke(() -> {\n      QueryService cqService = getCache().getQueryService();\n      CqAttributesFactory cqf = new CqAttributesFactory();\n      CqListener[] cqListeners = {new CqQueryTestListener(LogWriterUtils.getLogWriter())};\n\n      cqf.initCqListeners(cqListeners);\n      CqAttributes cqa = cqf.create();\n\n      CqQuery cq1 = cqService.newCq(\"testCQResultSet_0\", queryStr, cqa);\n      assertThat(cq1.getState().isStopped()).describedAs(\"newCq() state mismatch\").isTrue();\n\n      cq1.executeWithInitialResults();\n      try {\n        cq1.executeWithInitialResults();\n      } catch (IllegalStateException e) {\n        \r\n      }\n      cq1.close();\n\n      try {\n        cq1.executeWithInitialResults();\n      } catch (CqClosedException e) {\n        \r\n        return;\n      }\n      fail(\"should have received cqClosedException\");\n    });\n  }\n","date":"2018-08-31 08:10:50","endLine":816,"groupId":"10482","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"executeAndCloseAndExecuteIRMultipleTimes","params":"(VMvm@finalStringqueryStr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void executeAndCloseAndExecuteIRMultipleTimes(VM vm, final String cqName,\n      final String queryStr) {\n    vm.invoke(new CacheSerializableRunnable(\"Create CQ :\" + cqName) {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCQService.\");\n        }\n        \r\n        CqAttributesFactory cqf = new CqAttributesFactory();\n        CqListener[] cqListeners = {new CqQueryTestListener(LogWriterUtils.getLogWriter())};\n\n        cqf.initCqListeners(cqListeners);\n        CqAttributes cqa = cqf.create();\n\n        CqQuery cq1;\n        \r\n        try {\n          cq1 = cqService.newCq(cqName, queryStr, cqa);\n          assertTrue(\"newCq() state mismatch\", cq1.getState().isStopped());\n        } catch (Exception ex) {\n          AssertionError err = new AssertionError(\"Failed to create CQ \" + cqName + \" . \");\n          err.initCause(ex);\n          LogWriterUtils.getLogWriter().info(\"CqService is :\" + cqService, err);\n          throw err;\n        }\n\n        try {\n          cq1.executeWithInitialResults();\n          try {\n            cq1.executeWithInitialResults();\n          } catch (IllegalStateException e) {\n            \r\n          }\n          cq1.close();\n\n          try {\n            cq1.executeWithInitialResults();\n          } catch (CqClosedException e) {\n            \r\n            return;\n          }\n          fail(\"should have received cqClosedException\");\n        } catch (Exception e) {\n          fail(\"exception not expected here \" + e);\n        }\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":787,"status":"M"}],"commitId":"46b78978d894e8851daf86d929ae5efbd9093097","commitMessage":"@@@GEODE-5411: Adding awaitility fixing timing issue in CqPerfDUnitTest\n\n- Fixing timing issue by waiting for cq set to reach the right size\n- Code modernization and cleanup","date":"2018-08-31 08:10:50","modifiedFileCount":"3","status":"M","submitter":"mhansonp"}]
