[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testSystemClientEventsInServer() throws Exception {\n    boolean[] firedSystem = new boolean[3];\n    DistributedMember[] memberSystem = new DistributedMember[3];\n    String[] memberIdSystem = new String[3];\n    boolean[] isClientSystem = new boolean[3];\n\n    boolean[] firedAdapter = new boolean[3];\n    DistributedMember[] memberAdapter = new DistributedMember[3];\n    String[] memberIdAdapter = new String[3];\n    boolean[] isClientAdapter = new boolean[3];\n\n    boolean[] firedBridge = new boolean[3];\n    DistributedMember[] memberBridge = new DistributedMember[3];\n    String[] memberIdBridge = new String[3];\n    boolean[] isClientBridge = new boolean[3];\n\n    boolean[] firedSystemDuplicate = new boolean[3];\n    boolean[] firedAdapterDuplicate = new boolean[3];\n    boolean[] firedBridgeDuplicate = new boolean[3];\n\n    MembershipListener systemListener = new MembershipListener() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedSystemDuplicate[JOINED] = firedSystem[JOINED];\n        firedSystem[JOINED] = true;\n        memberSystem[JOINED] = event.getDistributedMember();\n        memberIdSystem[JOINED] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedSystemDuplicate[LEFT] = firedSystem[LEFT];\n        firedSystem[LEFT] = true;\n        memberSystem[LEFT] = event.getDistributedMember();\n        memberIdSystem[LEFT] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedSystemDuplicate[CRASHED] = firedSystem[CRASHED];\n        firedSystem[CRASHED] = true;\n        memberSystem[CRASHED] = event.getDistributedMember();\n        memberIdSystem[CRASHED] = event.getMemberId();\n        notifyAll();\n      }\n    };\n\n    UniversalMembershipListenerAdapter adapter = new UniversalMembershipListenerAdapter() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedAdapterDuplicate[JOINED] = firedAdapter[JOINED];\n        firedAdapter[JOINED] = true;\n        memberAdapter[JOINED] = event.getDistributedMember();\n        memberIdAdapter[JOINED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[JOINED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedAdapterDuplicate[LEFT] = firedAdapter[LEFT];\n        firedAdapter[LEFT] = true;\n        memberAdapter[LEFT] = event.getDistributedMember();\n        memberIdAdapter[LEFT] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[LEFT] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedAdapterDuplicate[CRASHED] = firedAdapter[CRASHED];\n        firedAdapter[CRASHED] = true;\n        memberAdapter[CRASHED] = event.getDistributedMember();\n        memberIdAdapter[CRASHED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[CRASHED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n    };\n\n    ClientMembershipListener bridgeListener = new ClientMembershipListener() {\n      @Override\n      public synchronized void memberJoined(ClientMembershipEvent event) {\n        firedBridgeDuplicate[JOINED] = firedBridge[JOINED];\n        firedBridge[JOINED] = true;\n        memberBridge[JOINED] = event.getMember();\n        memberIdBridge[JOINED] = event.getMemberId();\n        isClientBridge[JOINED] = event.isClient();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(ClientMembershipEvent event) {\n        firedBridgeDuplicate[LEFT] = firedBridge[LEFT];\n        firedBridge[LEFT] = true;\n        memberBridge[LEFT] = event.getMember();\n        memberIdBridge[LEFT] = event.getMemberId();\n        isClientBridge[LEFT] = event.isClient();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(ClientMembershipEvent event) {\n        firedBridgeDuplicate[CRASHED] = firedBridge[CRASHED];\n        firedBridge[CRASHED] = true;\n        memberBridge[CRASHED] = event.getMember();\n        memberIdBridge[CRASHED] = event.getMemberId();\n        isClientBridge[CRASHED] = event.isClient();\n        notifyAll();\n      }\n    };\n\n    Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    String name = this.getUniqueName();\n    int[] ports = new int[1];\n\n    \r\n    getSystem();\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    Region region = createRegion(name, factory.create());\n    assertThat(region).isNotNull();\n    assertThat(getRootRegion().getSubregion(name)).isNotNull();\n\n    ports[0] = startBridgeServer(0);\n    assertThat(ports[0] != 0).isTrue();\n    DistributedMember serverMember = getMemberId();\n    String serverMemberId = serverMember.getId();\n    Properties serverProperties = getSystem().getProperties();\n\n    \r\n    serverProperties.remove(CLUSTER_SSL_ENABLED);\n    serverProperties.remove(CLUSTER_SSL_CIPHERS);\n    serverProperties.remove(CLUSTER_SSL_PROTOCOLS);\n    serverProperties.remove(CLUSTER_SSL_REQUIRE_AUTHENTICATION);\n\n    \r\n    ClientMembership.registerClientMembershipListener(bridgeListener);\n\n    InternalCache cache = getInternalCache();\n    ManagementService service = ManagementService.getExistingManagementService(cache);\n    \r\n    service.addMembershipListener(systemListener);\n\n    \r\n    adapter.registerMembershipListener(service);\n\n    SerializableCallable createBridgeClient = new SerializableCallable(\"Create bridge client\") {\n      @Override\n      public Object call() {\n        System.setProperty(RESTRICT_MEMBERSHIP_PORT_RANGE, \"false\");\n        assertThat(getSystem(serverProperties).isConnected()).isTrue();\n        assertThat(getCache().isClosed()).isFalse();\n        AttributesFactory factory = new AttributesFactory();\n        factory.setScope(Scope.LOCAL);\n        ClientServerTestCase.configureConnectionPool(factory, getServerHostName(host), ports, false,\n            -1, -1, null);\n        createRegion(name, factory.create());\n        assertThat(getRootRegion().getSubregion(name)).isNotNull();\n        return getMemberId();\n      }\n    };\n\n    \r\n    DistributedMember clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    String clientMemberId = clientMember.getId();\n\n    \r\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      if (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String pl = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pi = (PoolImpl) PoolManager.find(pl);\n        waitForClientToFullyConnect(pi);\n      }\n    });\n\n    \r\n    vm0.invoke(new SerializableRunnable(\"Close bridge client region\") {\n      @Override\n      public void run() {\n        getRootRegion().getSubregion(name).close();\n        PoolManager.close();\n      }\n    });\n\n    synchronized (adapter) {\n      if (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[LEFT]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isTrue();\n    assertThat(memberBridge[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[LEFT]).isTrue();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientAdapter[LEFT]).isTrue();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    \r\n    clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    clientMemberId = clientMember.getId();\n\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String poolName = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pool = (PoolImpl) PoolManager.find(poolName);\n        waitForClientToFullyConnect(pool);\n      }\n    });\n\n    \r\n    vm0.invoke(new SerializableRunnable(\"Disconnect bridge client\") {\n      @Override\n      public void run() {\n        closeCache();\n        disconnectFromDS();\n      }\n    });\n\n    synchronized (adapter) {\n      if (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      if (!firedSystem[LEFT]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[LEFT]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isTrue();\n    assertThat(memberBridge[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[LEFT]).isTrue();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isTrue();\n    assertThat(memberSystem[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    \r\n    clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    clientMemberId = clientMember.getId();\n\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      if (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String poolName = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pool = (PoolImpl) PoolManager.find(poolName);\n        waitForClientToFullyConnect(pool);\n      }\n    });\n\n    \r\n    ServerConnection.setForceClientCrashEvent(true);\n\n    vm0.invoke(new SerializableRunnable(\"Close bridge client region\") {\n      @Override\n      public void run() {\n        getRootRegion().getSubregion(name).close();\n        PoolManager.close();\n      }\n    });\n\n    synchronized (adapter) {\n      if (!firedAdapter[CRASHED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[CRASHED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isTrue();\n    assertThat(memberBridge[CRASHED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[CRASHED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[CRASHED]).isTrue();\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isTrue();\n    assertThat(memberAdapter[CRASHED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[CRASHED]).isEqualTo(clientMemberId);\n    assertThat(isClientAdapter[CRASHED]).isTrue();\n  }\n","date":"2018-07-18 03:54:18","endLine":1017,"groupId":"34929","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSystemClientEventsInServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/43/ba84933ab2f0f3523ff119ab90428a8ff762c9.src","preCode":"  public void testSystemClientEventsInServer() throws Exception {\n    boolean[] firedSystem = new boolean[3];\n    DistributedMember[] memberSystem = new DistributedMember[3];\n    String[] memberIdSystem = new String[3];\n    boolean[] isClientSystem = new boolean[3];\n\n    boolean[] firedAdapter = new boolean[3];\n    DistributedMember[] memberAdapter = new DistributedMember[3];\n    String[] memberIdAdapter = new String[3];\n    boolean[] isClientAdapter = new boolean[3];\n\n    boolean[] firedBridge = new boolean[3];\n    DistributedMember[] memberBridge = new DistributedMember[3];\n    String[] memberIdBridge = new String[3];\n    boolean[] isClientBridge = new boolean[3];\n\n    boolean[] firedSystemDuplicate = new boolean[3];\n    boolean[] firedAdapterDuplicate = new boolean[3];\n    boolean[] firedBridgeDuplicate = new boolean[3];\n\n    MembershipListener systemListener = new MembershipListener() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedSystemDuplicate[JOINED] = firedSystem[JOINED];\n        firedSystem[JOINED] = true;\n        memberSystem[JOINED] = event.getDistributedMember();\n        memberIdSystem[JOINED] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedSystemDuplicate[LEFT] = firedSystem[LEFT];\n        firedSystem[LEFT] = true;\n        memberSystem[LEFT] = event.getDistributedMember();\n        memberIdSystem[LEFT] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedSystemDuplicate[CRASHED] = firedSystem[CRASHED];\n        firedSystem[CRASHED] = true;\n        memberSystem[CRASHED] = event.getDistributedMember();\n        memberIdSystem[CRASHED] = event.getMemberId();\n        notifyAll();\n      }\n    };\n\n    UniversalMembershipListenerAdapter adapter = new UniversalMembershipListenerAdapter() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedAdapterDuplicate[JOINED] = firedAdapter[JOINED];\n        firedAdapter[JOINED] = true;\n        memberAdapter[JOINED] = event.getDistributedMember();\n        memberIdAdapter[JOINED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[JOINED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedAdapterDuplicate[LEFT] = firedAdapter[LEFT];\n        firedAdapter[LEFT] = true;\n        memberAdapter[LEFT] = event.getDistributedMember();\n        memberIdAdapter[LEFT] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[LEFT] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedAdapterDuplicate[CRASHED] = firedAdapter[CRASHED];\n        firedAdapter[CRASHED] = true;\n        memberAdapter[CRASHED] = event.getDistributedMember();\n        memberIdAdapter[CRASHED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[CRASHED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n    };\n\n    ClientMembershipListener bridgeListener = new ClientMembershipListener() {\n      @Override\n      public synchronized void memberJoined(ClientMembershipEvent event) {\n        firedBridgeDuplicate[JOINED] = firedBridge[JOINED];\n        firedBridge[JOINED] = true;\n        memberBridge[JOINED] = event.getMember();\n        memberIdBridge[JOINED] = event.getMemberId();\n        isClientBridge[JOINED] = event.isClient();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(ClientMembershipEvent event) {\n        firedBridgeDuplicate[LEFT] = firedBridge[LEFT];\n        firedBridge[LEFT] = true;\n        memberBridge[LEFT] = event.getMember();\n        memberIdBridge[LEFT] = event.getMemberId();\n        isClientBridge[LEFT] = event.isClient();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(ClientMembershipEvent event) {\n        firedBridgeDuplicate[CRASHED] = firedBridge[CRASHED];\n        firedBridge[CRASHED] = true;\n        memberBridge[CRASHED] = event.getMember();\n        memberIdBridge[CRASHED] = event.getMemberId();\n        isClientBridge[CRASHED] = event.isClient();\n        notifyAll();\n      }\n    };\n\n    Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    String name = this.getUniqueName();\n    int[] ports = new int[1];\n\n    \r\n    getSystem();\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    Region region = createRegion(name, factory.create());\n    assertThat(region).isNotNull();\n    assertThat(getRootRegion().getSubregion(name)).isNotNull();\n\n    ports[0] = startBridgeServer(0);\n    assertThat(ports[0] != 0).isTrue();\n    DistributedMember serverMember = getMemberId();\n    String serverMemberId = serverMember.getId();\n    Properties serverProperties = getSystem().getProperties();\n\n    \r\n    serverProperties.remove(CLUSTER_SSL_ENABLED);\n    serverProperties.remove(CLUSTER_SSL_CIPHERS);\n    serverProperties.remove(CLUSTER_SSL_PROTOCOLS);\n    serverProperties.remove(CLUSTER_SSL_REQUIRE_AUTHENTICATION);\n\n    \r\n    ClientMembership.registerClientMembershipListener(bridgeListener);\n\n    InternalCache cache = getInternalCache();\n    ManagementService service = ManagementService.getExistingManagementService(cache);\n    \r\n    service.addMembershipListener(systemListener);\n\n    \r\n    adapter.registerMembershipListener(service);\n\n    SerializableCallable createBridgeClient = new SerializableCallable(\"Create bridge client\") {\n      @Override\n      public Object call() {\n        System.setProperty(RESTRICT_MEMBERSHIP_PORT_RANGE, \"false\");\n        assertThat(getSystem(serverProperties).isConnected()).isTrue();\n        assertThat(getCache().isClosed()).isFalse();\n        AttributesFactory factory = new AttributesFactory();\n        factory.setScope(Scope.LOCAL);\n        ClientServerTestCase.configureConnectionPool(factory, getServerHostName(host), ports, false,\n            -1, -1, null);\n        createRegion(name, factory.create());\n        assertThat(getRootRegion().getSubregion(name)).isNotNull();\n        return getMemberId();\n      }\n    };\n\n    \r\n    DistributedMember clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    String clientMemberId = clientMember.getId();\n\n    \r\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      if (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String pl = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pi = (PoolImpl) PoolManager.find(pl);\n        waitForClientToFullyConnect(pi);\n      }\n    });\n\n    \r\n    vm0.invoke(new SerializableRunnable(\"Close bridge client region\") {\n      @Override\n      public void run() {\n        getRootRegion().getSubregion(name).close();\n        PoolManager.close();\n      }\n    });\n\n    synchronized (adapter) {\n      if (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[LEFT]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isTrue();\n    assertThat(memberBridge[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[LEFT]).isTrue();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientAdapter[LEFT]).isTrue();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    \r\n    clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    clientMemberId = clientMember.getId();\n\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String poolName = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pool = (PoolImpl) PoolManager.find(poolName);\n        waitForClientToFullyConnect(pool);\n      }\n    });\n\n    \r\n    vm0.invoke(new SerializableRunnable(\"Disconnect bridge client\") {\n      @Override\n      public void run() {\n        closeCache();\n        disconnectFromDS();\n      }\n    });\n\n    synchronized (adapter) {\n      if (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      if (!firedSystem[LEFT]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[LEFT]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isTrue();\n    assertThat(memberBridge[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[LEFT]).isTrue();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isTrue();\n    assertThat(memberSystem[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    \r\n    clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    clientMemberId = clientMember.getId();\n\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      if (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String poolName = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pool = (PoolImpl) PoolManager.find(poolName);\n        waitForClientToFullyConnect(pool);\n      }\n    });\n\n    \r\n    ServerConnection.setForceClientCrashEvent(true);\n\n    vm0.invoke(new SerializableRunnable(\"Close bridge client region\") {\n      @Override\n      public void run() {\n        getRootRegion().getSubregion(name).close();\n        PoolManager.close();\n      }\n    });\n\n    synchronized (adapter) {\n      if (!firedAdapter[CRASHED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[CRASHED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isTrue();\n    assertThat(memberBridge[CRASHED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[CRASHED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[CRASHED]).isTrue();\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isTrue();\n    assertThat(memberAdapter[CRASHED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[CRASHED]).isEqualTo(clientMemberId);\n    assertThat(isClientAdapter[CRASHED]).isTrue();\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/UniversalMembershipListenerAdapterDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":424,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testServerEventsInPeerSystem() throws Exception {\n    boolean[] firedSystem = new boolean[3];\n    DistributedMember[] memberSystem = new DistributedMember[3];\n    String[] memberIdSystem = new String[3];\n    boolean[] isClientSystem = new boolean[3];\n\n    boolean[] firedAdapter = new boolean[3];\n    DistributedMember[] memberAdapter = new DistributedMember[3];\n    String[] memberIdAdapter = new String[3];\n    boolean[] isClientAdapter = new boolean[3];\n\n    boolean[] firedBridge = new boolean[3];\n    DistributedMember[] memberBridge = new DistributedMember[3];\n    String[] memberIdBridge = new String[3];\n    boolean[] isClientBridge = new boolean[3];\n\n    boolean[] firedSystemDuplicate = new boolean[3];\n    boolean[] firedAdapterDuplicate = new boolean[3];\n    boolean[] firedBridgeDuplicate = new boolean[3];\n\n    MembershipListener systemListener = new MembershipListener() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedSystemDuplicate[JOINED] = firedSystem[JOINED];\n        firedSystem[JOINED] = true;\n        memberSystem[JOINED] = event.getDistributedMember();\n        memberIdSystem[JOINED] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedSystemDuplicate[LEFT] = firedSystem[LEFT];\n        firedSystem[LEFT] = true;\n        memberSystem[LEFT] = event.getDistributedMember();\n        memberIdSystem[LEFT] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedSystemDuplicate[CRASHED] = firedSystem[CRASHED];\n        firedSystem[CRASHED] = true;\n        memberSystem[CRASHED] = event.getDistributedMember();\n        memberIdSystem[CRASHED] = event.getMemberId();\n        notifyAll();\n      }\n    };\n\n    UniversalMembershipListenerAdapter adapter = new UniversalMembershipListenerAdapter() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedAdapterDuplicate[JOINED] = firedAdapter[JOINED];\n        firedAdapter[JOINED] = true;\n        memberAdapter[JOINED] = event.getDistributedMember();\n        memberIdAdapter[JOINED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[JOINED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedAdapterDuplicate[LEFT] = firedAdapter[LEFT];\n        firedAdapter[LEFT] = true;\n        memberAdapter[LEFT] = event.getDistributedMember();\n        memberIdAdapter[LEFT] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[LEFT] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedAdapterDuplicate[CRASHED] = firedAdapter[CRASHED];\n        firedAdapter[CRASHED] = true;\n        memberAdapter[CRASHED] = event.getDistributedMember();\n        memberIdAdapter[CRASHED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[CRASHED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n    };\n\n    Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    String name = this.getUniqueName();\n    int[] ports = new int[] {getRandomAvailablePort(SOCKET)};\n    assertThat(ports[0] != 0).isTrue();\n\n    \r\n    getSystem();\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    Region region = createRegion(name, factory.create());\n    assertThat(region).isNotNull();\n    assertThat(getRootRegion().getSubregion(name)).isNotNull();\n\n    ports[0] = startBridgeServer(0);\n    assertThat(ports[0] != 0).isTrue();\n\n    DistributedMember serverMember = getMemberId();\n    String serverMemberId = serverMember.getId();\n    Properties serverProperties = getSystem().getProperties();\n\n    serverProperties.remove(CLUSTER_SSL_ENABLED);\n    serverProperties.remove(CLUSTER_SSL_CIPHERS);\n    serverProperties.remove(CLUSTER_SSL_PROTOCOLS);\n    serverProperties.remove(CLUSTER_SSL_REQUIRE_AUTHENTICATION);\n\n    InternalCache cache = getInternalCache();\n    ManagementService service = ManagementService.getExistingManagementService(cache);\n    \r\n    service.addMembershipListener(systemListener);\n\n    \r\n    adapter.registerMembershipListener(service);\n\n    \r\n    SerializableCallable createPeerCache = new SerializableCallable(\"Create Peer Cache\") {\n      @Override\n      public Object call() {\n        getSystem(serverProperties);\n        AttributesFactory factory = new AttributesFactory();\n        factory.setScope(Scope.LOCAL);\n        Region region = createRegion(name, factory.create());\n        assertThat(region).isNotNull();\n        assertThat(getRootRegion().getSubregion(name)).isNotNull();\n        return basicGetSystem().getDistributedMember();\n      }\n    };\n\n    DistributedMember peerMember = (DistributedMember) vm0.invoke(createPeerCache);\n    String peerMemberId = peerMember.getId();\n\n    synchronized (systemListener) {\n      if (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(peerMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(peerMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isNotNull();\n    assertThat(memberIdAdapter[JOINED]).isNotNull();\n    assertThat(memberAdapter[JOINED]).isEqualTo(peerMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(peerMemberId);\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    addIgnoredException(ServerConnectivityException.class.getName());\n    addIgnoredException(IOException.class.getName());\n\n    vm0.invoke(new SerializableRunnable(\"Disconnect Peer server\") {\n      @Override\n      public void run() {\n        disconnectFromDS();\n      }\n    });\n\n    synchronized (systemListener) {\n      if (!firedSystem[LEFT]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (adapter) {\n      if (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    \r\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isTrue();\n    assertThat(memberSystem[LEFT]).isEqualTo(peerMember);\n    assertThat(memberIdSystem[LEFT]).isEqualTo(peerMemberId);\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    \r\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(peerMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(peerMemberId);\n    assertThat(isClientAdapter[LEFT]).isFalse();\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n  }\n","date":"2018-07-18 03:54:18","endLine":1324,"groupId":"34929","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testServerEventsInPeerSystem","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/43/ba84933ab2f0f3523ff119ab90428a8ff762c9.src","preCode":"  public void testServerEventsInPeerSystem() throws Exception {\n    boolean[] firedSystem = new boolean[3];\n    DistributedMember[] memberSystem = new DistributedMember[3];\n    String[] memberIdSystem = new String[3];\n    boolean[] isClientSystem = new boolean[3];\n\n    boolean[] firedAdapter = new boolean[3];\n    DistributedMember[] memberAdapter = new DistributedMember[3];\n    String[] memberIdAdapter = new String[3];\n    boolean[] isClientAdapter = new boolean[3];\n\n    boolean[] firedBridge = new boolean[3];\n    DistributedMember[] memberBridge = new DistributedMember[3];\n    String[] memberIdBridge = new String[3];\n    boolean[] isClientBridge = new boolean[3];\n\n    boolean[] firedSystemDuplicate = new boolean[3];\n    boolean[] firedAdapterDuplicate = new boolean[3];\n    boolean[] firedBridgeDuplicate = new boolean[3];\n\n    MembershipListener systemListener = new MembershipListener() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedSystemDuplicate[JOINED] = firedSystem[JOINED];\n        firedSystem[JOINED] = true;\n        memberSystem[JOINED] = event.getDistributedMember();\n        memberIdSystem[JOINED] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedSystemDuplicate[LEFT] = firedSystem[LEFT];\n        firedSystem[LEFT] = true;\n        memberSystem[LEFT] = event.getDistributedMember();\n        memberIdSystem[LEFT] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedSystemDuplicate[CRASHED] = firedSystem[CRASHED];\n        firedSystem[CRASHED] = true;\n        memberSystem[CRASHED] = event.getDistributedMember();\n        memberIdSystem[CRASHED] = event.getMemberId();\n        notifyAll();\n      }\n    };\n\n    UniversalMembershipListenerAdapter adapter = new UniversalMembershipListenerAdapter() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedAdapterDuplicate[JOINED] = firedAdapter[JOINED];\n        firedAdapter[JOINED] = true;\n        memberAdapter[JOINED] = event.getDistributedMember();\n        memberIdAdapter[JOINED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[JOINED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedAdapterDuplicate[LEFT] = firedAdapter[LEFT];\n        firedAdapter[LEFT] = true;\n        memberAdapter[LEFT] = event.getDistributedMember();\n        memberIdAdapter[LEFT] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[LEFT] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedAdapterDuplicate[CRASHED] = firedAdapter[CRASHED];\n        firedAdapter[CRASHED] = true;\n        memberAdapter[CRASHED] = event.getDistributedMember();\n        memberIdAdapter[CRASHED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[CRASHED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n    };\n\n    Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    String name = this.getUniqueName();\n    int[] ports = new int[] {getRandomAvailablePort(SOCKET)};\n    assertThat(ports[0] != 0).isTrue();\n\n    \r\n    getSystem();\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    Region region = createRegion(name, factory.create());\n    assertThat(region).isNotNull();\n    assertThat(getRootRegion().getSubregion(name)).isNotNull();\n\n    ports[0] = startBridgeServer(0);\n    assertThat(ports[0] != 0).isTrue();\n\n    DistributedMember serverMember = getMemberId();\n    String serverMemberId = serverMember.getId();\n    Properties serverProperties = getSystem().getProperties();\n\n    serverProperties.remove(CLUSTER_SSL_ENABLED);\n    serverProperties.remove(CLUSTER_SSL_CIPHERS);\n    serverProperties.remove(CLUSTER_SSL_PROTOCOLS);\n    serverProperties.remove(CLUSTER_SSL_REQUIRE_AUTHENTICATION);\n\n    InternalCache cache = getInternalCache();\n    ManagementService service = ManagementService.getExistingManagementService(cache);\n    \r\n    service.addMembershipListener(systemListener);\n\n    \r\n    adapter.registerMembershipListener(service);\n\n    \r\n    SerializableCallable createPeerCache = new SerializableCallable(\"Create Peer Cache\") {\n      @Override\n      public Object call() {\n        getSystem(serverProperties);\n        AttributesFactory factory = new AttributesFactory();\n        factory.setScope(Scope.LOCAL);\n        Region region = createRegion(name, factory.create());\n        assertThat(region).isNotNull();\n        assertThat(getRootRegion().getSubregion(name)).isNotNull();\n        return basicGetSystem().getDistributedMember();\n      }\n    };\n\n    DistributedMember peerMember = (DistributedMember) vm0.invoke(createPeerCache);\n    String peerMemberId = peerMember.getId();\n\n    synchronized (systemListener) {\n      if (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(peerMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(peerMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isNotNull();\n    assertThat(memberIdAdapter[JOINED]).isNotNull();\n    assertThat(memberAdapter[JOINED]).isEqualTo(peerMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(peerMemberId);\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    addIgnoredException(ServerConnectivityException.class.getName());\n    addIgnoredException(IOException.class.getName());\n\n    vm0.invoke(new SerializableRunnable(\"Disconnect Peer server\") {\n      @Override\n      public void run() {\n        disconnectFromDS();\n      }\n    });\n\n    synchronized (systemListener) {\n      if (!firedSystem[LEFT]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (adapter) {\n      if (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    \r\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isTrue();\n    assertThat(memberSystem[LEFT]).isEqualTo(peerMember);\n    assertThat(memberIdSystem[LEFT]).isEqualTo(peerMemberId);\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    \r\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(peerMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(peerMemberId);\n    assertThat(isClientAdapter[LEFT]).isFalse();\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/UniversalMembershipListenerAdapterDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1078,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-08-11 03:24:25","commitOrder":2,"curCode":"  public void testSystemClientEventsInServer() throws Exception {\n    boolean[] firedSystem = new boolean[3];\n    DistributedMember[] memberSystem = new DistributedMember[3];\n    String[] memberIdSystem = new String[3];\n    boolean[] isClientSystem = new boolean[3];\n\n    boolean[] firedAdapter = new boolean[3];\n    DistributedMember[] memberAdapter = new DistributedMember[3];\n    String[] memberIdAdapter = new String[3];\n    boolean[] isClientAdapter = new boolean[3];\n\n    boolean[] firedBridge = new boolean[3];\n    DistributedMember[] memberBridge = new DistributedMember[3];\n    String[] memberIdBridge = new String[3];\n    boolean[] isClientBridge = new boolean[3];\n\n    boolean[] firedSystemDuplicate = new boolean[3];\n    boolean[] firedAdapterDuplicate = new boolean[3];\n    boolean[] firedBridgeDuplicate = new boolean[3];\n\n    MembershipListener systemListener = new MembershipListener() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedSystemDuplicate[JOINED] = firedSystem[JOINED];\n        firedSystem[JOINED] = true;\n        memberSystem[JOINED] = event.getDistributedMember();\n        memberIdSystem[JOINED] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedSystemDuplicate[LEFT] = firedSystem[LEFT];\n        firedSystem[LEFT] = true;\n        memberSystem[LEFT] = event.getDistributedMember();\n        memberIdSystem[LEFT] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedSystemDuplicate[CRASHED] = firedSystem[CRASHED];\n        firedSystem[CRASHED] = true;\n        memberSystem[CRASHED] = event.getDistributedMember();\n        memberIdSystem[CRASHED] = event.getMemberId();\n        notifyAll();\n      }\n    };\n\n    UniversalMembershipListenerAdapter adapter = new UniversalMembershipListenerAdapter() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedAdapterDuplicate[JOINED] = firedAdapter[JOINED];\n        firedAdapter[JOINED] = true;\n        memberAdapter[JOINED] = event.getDistributedMember();\n        memberIdAdapter[JOINED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[JOINED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedAdapterDuplicate[LEFT] = firedAdapter[LEFT];\n        firedAdapter[LEFT] = true;\n        memberAdapter[LEFT] = event.getDistributedMember();\n        memberIdAdapter[LEFT] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[LEFT] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedAdapterDuplicate[CRASHED] = firedAdapter[CRASHED];\n        firedAdapter[CRASHED] = true;\n        memberAdapter[CRASHED] = event.getDistributedMember();\n        memberIdAdapter[CRASHED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[CRASHED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n    };\n\n    ClientMembershipListener bridgeListener = new ClientMembershipListener() {\n      @Override\n      public synchronized void memberJoined(ClientMembershipEvent event) {\n        firedBridgeDuplicate[JOINED] = firedBridge[JOINED];\n        firedBridge[JOINED] = true;\n        memberBridge[JOINED] = event.getMember();\n        memberIdBridge[JOINED] = event.getMemberId();\n        isClientBridge[JOINED] = event.isClient();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(ClientMembershipEvent event) {\n        firedBridgeDuplicate[LEFT] = firedBridge[LEFT];\n        firedBridge[LEFT] = true;\n        memberBridge[LEFT] = event.getMember();\n        memberIdBridge[LEFT] = event.getMemberId();\n        isClientBridge[LEFT] = event.isClient();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(ClientMembershipEvent event) {\n        firedBridgeDuplicate[CRASHED] = firedBridge[CRASHED];\n        firedBridge[CRASHED] = true;\n        memberBridge[CRASHED] = event.getMember();\n        memberIdBridge[CRASHED] = event.getMemberId();\n        isClientBridge[CRASHED] = event.isClient();\n        notifyAll();\n      }\n    };\n\n    Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    String name = this.getUniqueName();\n    int[] ports = new int[1];\n\n    \r\n    getSystem();\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    Region region = createRegion(name, factory.create());\n    assertThat(region).isNotNull();\n    assertThat(getRootRegion().getSubregion(name)).isNotNull();\n\n    ports[0] = startBridgeServer(0);\n    assertThat(ports[0] != 0).isTrue();\n    DistributedMember serverMember = getMemberId();\n    String serverMemberId = serverMember.getId();\n    Properties serverProperties = getSystem().getProperties();\n\n    \r\n    serverProperties.remove(CLUSTER_SSL_ENABLED);\n    serverProperties.remove(CLUSTER_SSL_CIPHERS);\n    serverProperties.remove(CLUSTER_SSL_PROTOCOLS);\n    serverProperties.remove(CLUSTER_SSL_REQUIRE_AUTHENTICATION);\n\n    \r\n    ClientMembership.registerClientMembershipListener(bridgeListener);\n\n    InternalCache cache = getInternalCache();\n    ManagementService service = ManagementService.getExistingManagementService(cache);\n    \r\n    service.addMembershipListener(systemListener);\n\n    \r\n    adapter.registerMembershipListener(service);\n\n    SerializableCallable createBridgeClient = new SerializableCallable(\"Create bridge client\") {\n      @Override\n      public Object call() {\n        System.setProperty(RESTRICT_MEMBERSHIP_PORT_RANGE, \"false\");\n        assertThat(getSystem(serverProperties).isConnected()).isTrue();\n        assertThat(getCache().isClosed()).isFalse();\n        AttributesFactory factory = new AttributesFactory();\n        factory.setScope(Scope.LOCAL);\n        ClientServerTestCase.configureConnectionPool(factory, getServerHostName(host), ports, false,\n            -1, -1, null);\n        createRegion(name, factory.create());\n        assertThat(getRootRegion().getSubregion(name)).isNotNull();\n        return getMemberId();\n      }\n    };\n\n    \r\n    DistributedMember clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    String clientMemberId = clientMember.getId();\n\n    \r\n    synchronized (adapter) {\n      while (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      while (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String pl = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pi = (PoolImpl) PoolManager.find(pl);\n        waitForClientToFullyConnect(pi);\n      }\n    });\n\n    \r\n    vm0.invoke(new SerializableRunnable(\"Close bridge client region\") {\n      @Override\n      public void run() {\n        getRootRegion().getSubregion(name).close();\n        PoolManager.close();\n      }\n    });\n\n    synchronized (adapter) {\n      while (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[LEFT]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isTrue();\n    assertThat(memberBridge[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[LEFT]).isTrue();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientAdapter[LEFT]).isTrue();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    \r\n    clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    clientMemberId = clientMember.getId();\n\n    synchronized (adapter) {\n      while (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String poolName = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pool = (PoolImpl) PoolManager.find(poolName);\n        waitForClientToFullyConnect(pool);\n      }\n    });\n\n    \r\n    vm0.invoke(new SerializableRunnable(\"Disconnect bridge client\") {\n      @Override\n      public void run() {\n        closeCache();\n        disconnectFromDS();\n      }\n    });\n\n    synchronized (adapter) {\n      while (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      while (!firedSystem[LEFT]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[LEFT]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isTrue();\n    assertThat(memberBridge[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[LEFT]).isTrue();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isTrue();\n    assertThat(memberSystem[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    \r\n    clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    clientMemberId = clientMember.getId();\n\n    synchronized (adapter) {\n      while (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      while (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String poolName = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pool = (PoolImpl) PoolManager.find(poolName);\n        waitForClientToFullyConnect(pool);\n      }\n    });\n\n    \r\n    ServerConnection.setForceClientCrashEvent(true);\n\n    vm0.invoke(new SerializableRunnable(\"Close bridge client region\") {\n      @Override\n      public void run() {\n        getRootRegion().getSubregion(name).close();\n        PoolManager.close();\n      }\n    });\n\n    synchronized (adapter) {\n      while (!firedAdapter[CRASHED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[CRASHED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isTrue();\n    assertThat(memberBridge[CRASHED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[CRASHED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[CRASHED]).isTrue();\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isTrue();\n    assertThat(memberAdapter[CRASHED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[CRASHED]).isEqualTo(clientMemberId);\n    assertThat(isClientAdapter[CRASHED]).isTrue();\n  }\n","date":"2018-08-11 05:19:21","endLine":1004,"groupId":"34929","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSystemClientEventsInServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/3d2e07f31fce367500bd4552d71f6927aa12b3.src","preCode":"  public void testSystemClientEventsInServer() throws Exception {\n    boolean[] firedSystem = new boolean[3];\n    DistributedMember[] memberSystem = new DistributedMember[3];\n    String[] memberIdSystem = new String[3];\n    boolean[] isClientSystem = new boolean[3];\n\n    boolean[] firedAdapter = new boolean[3];\n    DistributedMember[] memberAdapter = new DistributedMember[3];\n    String[] memberIdAdapter = new String[3];\n    boolean[] isClientAdapter = new boolean[3];\n\n    boolean[] firedBridge = new boolean[3];\n    DistributedMember[] memberBridge = new DistributedMember[3];\n    String[] memberIdBridge = new String[3];\n    boolean[] isClientBridge = new boolean[3];\n\n    boolean[] firedSystemDuplicate = new boolean[3];\n    boolean[] firedAdapterDuplicate = new boolean[3];\n    boolean[] firedBridgeDuplicate = new boolean[3];\n\n    MembershipListener systemListener = new MembershipListener() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedSystemDuplicate[JOINED] = firedSystem[JOINED];\n        firedSystem[JOINED] = true;\n        memberSystem[JOINED] = event.getDistributedMember();\n        memberIdSystem[JOINED] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedSystemDuplicate[LEFT] = firedSystem[LEFT];\n        firedSystem[LEFT] = true;\n        memberSystem[LEFT] = event.getDistributedMember();\n        memberIdSystem[LEFT] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedSystemDuplicate[CRASHED] = firedSystem[CRASHED];\n        firedSystem[CRASHED] = true;\n        memberSystem[CRASHED] = event.getDistributedMember();\n        memberIdSystem[CRASHED] = event.getMemberId();\n        notifyAll();\n      }\n    };\n\n    UniversalMembershipListenerAdapter adapter = new UniversalMembershipListenerAdapter() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedAdapterDuplicate[JOINED] = firedAdapter[JOINED];\n        firedAdapter[JOINED] = true;\n        memberAdapter[JOINED] = event.getDistributedMember();\n        memberIdAdapter[JOINED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[JOINED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedAdapterDuplicate[LEFT] = firedAdapter[LEFT];\n        firedAdapter[LEFT] = true;\n        memberAdapter[LEFT] = event.getDistributedMember();\n        memberIdAdapter[LEFT] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[LEFT] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedAdapterDuplicate[CRASHED] = firedAdapter[CRASHED];\n        firedAdapter[CRASHED] = true;\n        memberAdapter[CRASHED] = event.getDistributedMember();\n        memberIdAdapter[CRASHED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[CRASHED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n    };\n\n    ClientMembershipListener bridgeListener = new ClientMembershipListener() {\n      @Override\n      public synchronized void memberJoined(ClientMembershipEvent event) {\n        firedBridgeDuplicate[JOINED] = firedBridge[JOINED];\n        firedBridge[JOINED] = true;\n        memberBridge[JOINED] = event.getMember();\n        memberIdBridge[JOINED] = event.getMemberId();\n        isClientBridge[JOINED] = event.isClient();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(ClientMembershipEvent event) {\n        firedBridgeDuplicate[LEFT] = firedBridge[LEFT];\n        firedBridge[LEFT] = true;\n        memberBridge[LEFT] = event.getMember();\n        memberIdBridge[LEFT] = event.getMemberId();\n        isClientBridge[LEFT] = event.isClient();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(ClientMembershipEvent event) {\n        firedBridgeDuplicate[CRASHED] = firedBridge[CRASHED];\n        firedBridge[CRASHED] = true;\n        memberBridge[CRASHED] = event.getMember();\n        memberIdBridge[CRASHED] = event.getMemberId();\n        isClientBridge[CRASHED] = event.isClient();\n        notifyAll();\n      }\n    };\n\n    Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    String name = this.getUniqueName();\n    int[] ports = new int[1];\n\n    \r\n    getSystem();\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    Region region = createRegion(name, factory.create());\n    assertThat(region).isNotNull();\n    assertThat(getRootRegion().getSubregion(name)).isNotNull();\n\n    ports[0] = startBridgeServer(0);\n    assertThat(ports[0] != 0).isTrue();\n    DistributedMember serverMember = getMemberId();\n    String serverMemberId = serverMember.getId();\n    Properties serverProperties = getSystem().getProperties();\n\n    \r\n    serverProperties.remove(CLUSTER_SSL_ENABLED);\n    serverProperties.remove(CLUSTER_SSL_CIPHERS);\n    serverProperties.remove(CLUSTER_SSL_PROTOCOLS);\n    serverProperties.remove(CLUSTER_SSL_REQUIRE_AUTHENTICATION);\n\n    \r\n    ClientMembership.registerClientMembershipListener(bridgeListener);\n\n    InternalCache cache = getInternalCache();\n    ManagementService service = ManagementService.getExistingManagementService(cache);\n    \r\n    service.addMembershipListener(systemListener);\n\n    \r\n    adapter.registerMembershipListener(service);\n\n    SerializableCallable createBridgeClient = new SerializableCallable(\"Create bridge client\") {\n      @Override\n      public Object call() {\n        System.setProperty(RESTRICT_MEMBERSHIP_PORT_RANGE, \"false\");\n        assertThat(getSystem(serverProperties).isConnected()).isTrue();\n        assertThat(getCache().isClosed()).isFalse();\n        AttributesFactory factory = new AttributesFactory();\n        factory.setScope(Scope.LOCAL);\n        ClientServerTestCase.configureConnectionPool(factory, getServerHostName(host), ports, false,\n            -1, -1, null);\n        createRegion(name, factory.create());\n        assertThat(getRootRegion().getSubregion(name)).isNotNull();\n        return getMemberId();\n      }\n    };\n\n    \r\n    DistributedMember clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    String clientMemberId = clientMember.getId();\n\n    \r\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      if (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String pl = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pi = (PoolImpl) PoolManager.find(pl);\n        waitForClientToFullyConnect(pi);\n      }\n    });\n\n    \r\n    vm0.invoke(new SerializableRunnable(\"Close bridge client region\") {\n      @Override\n      public void run() {\n        getRootRegion().getSubregion(name).close();\n        PoolManager.close();\n      }\n    });\n\n    synchronized (adapter) {\n      if (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[LEFT]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isTrue();\n    assertThat(memberBridge[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[LEFT]).isTrue();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientAdapter[LEFT]).isTrue();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    \r\n    clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    clientMemberId = clientMember.getId();\n\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String poolName = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pool = (PoolImpl) PoolManager.find(poolName);\n        waitForClientToFullyConnect(pool);\n      }\n    });\n\n    \r\n    vm0.invoke(new SerializableRunnable(\"Disconnect bridge client\") {\n      @Override\n      public void run() {\n        closeCache();\n        disconnectFromDS();\n      }\n    });\n\n    synchronized (adapter) {\n      if (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      if (!firedSystem[LEFT]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[LEFT]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isTrue();\n    assertThat(memberBridge[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[LEFT]).isTrue();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isTrue();\n    assertThat(memberSystem[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    \r\n    clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    clientMemberId = clientMember.getId();\n\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      if (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String poolName = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pool = (PoolImpl) PoolManager.find(poolName);\n        waitForClientToFullyConnect(pool);\n      }\n    });\n\n    \r\n    ServerConnection.setForceClientCrashEvent(true);\n\n    vm0.invoke(new SerializableRunnable(\"Close bridge client region\") {\n      @Override\n      public void run() {\n        getRootRegion().getSubregion(name).close();\n        PoolManager.close();\n      }\n    });\n\n    synchronized (adapter) {\n      if (!firedAdapter[CRASHED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      if (!firedBridge[CRASHED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isTrue();\n    assertThat(memberBridge[CRASHED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[CRASHED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[CRASHED]).isTrue();\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isTrue();\n    assertThat(memberAdapter[CRASHED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[CRASHED]).isEqualTo(clientMemberId);\n    assertThat(isClientAdapter[CRASHED]).isTrue();\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/UniversalMembershipListenerAdapterDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"},{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public void testServerEventsInPeerSystem() throws Exception {\n    boolean[] firedSystem = new boolean[3];\n    DistributedMember[] memberSystem = new DistributedMember[3];\n    String[] memberIdSystem = new String[3];\n    boolean[] isClientSystem = new boolean[3];\n\n    boolean[] firedAdapter = new boolean[3];\n    DistributedMember[] memberAdapter = new DistributedMember[3];\n    String[] memberIdAdapter = new String[3];\n    boolean[] isClientAdapter = new boolean[3];\n\n    boolean[] firedBridge = new boolean[3];\n    DistributedMember[] memberBridge = new DistributedMember[3];\n    String[] memberIdBridge = new String[3];\n    boolean[] isClientBridge = new boolean[3];\n\n    boolean[] firedSystemDuplicate = new boolean[3];\n    boolean[] firedAdapterDuplicate = new boolean[3];\n    boolean[] firedBridgeDuplicate = new boolean[3];\n\n    MembershipListener systemListener = new MembershipListener() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedSystemDuplicate[JOINED] = firedSystem[JOINED];\n        firedSystem[JOINED] = true;\n        memberSystem[JOINED] = event.getDistributedMember();\n        memberIdSystem[JOINED] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedSystemDuplicate[LEFT] = firedSystem[LEFT];\n        firedSystem[LEFT] = true;\n        memberSystem[LEFT] = event.getDistributedMember();\n        memberIdSystem[LEFT] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedSystemDuplicate[CRASHED] = firedSystem[CRASHED];\n        firedSystem[CRASHED] = true;\n        memberSystem[CRASHED] = event.getDistributedMember();\n        memberIdSystem[CRASHED] = event.getMemberId();\n        notifyAll();\n      }\n    };\n\n    UniversalMembershipListenerAdapter adapter = new UniversalMembershipListenerAdapter() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedAdapterDuplicate[JOINED] = firedAdapter[JOINED];\n        firedAdapter[JOINED] = true;\n        memberAdapter[JOINED] = event.getDistributedMember();\n        memberIdAdapter[JOINED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[JOINED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedAdapterDuplicate[LEFT] = firedAdapter[LEFT];\n        firedAdapter[LEFT] = true;\n        memberAdapter[LEFT] = event.getDistributedMember();\n        memberIdAdapter[LEFT] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[LEFT] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedAdapterDuplicate[CRASHED] = firedAdapter[CRASHED];\n        firedAdapter[CRASHED] = true;\n        memberAdapter[CRASHED] = event.getDistributedMember();\n        memberIdAdapter[CRASHED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[CRASHED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n    };\n\n    Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    String name = this.getUniqueName();\n    int[] ports = new int[] {getRandomAvailablePort(SOCKET)};\n    assertThat(ports[0] != 0).isTrue();\n\n    \r\n    getSystem();\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    Region region = createRegion(name, factory.create());\n    assertThat(region).isNotNull();\n    assertThat(getRootRegion().getSubregion(name)).isNotNull();\n\n    ports[0] = startBridgeServer(0);\n    assertThat(ports[0] != 0).isTrue();\n\n    DistributedMember serverMember = getMemberId();\n    String serverMemberId = serverMember.getId();\n    Properties serverProperties = getSystem().getProperties();\n\n    serverProperties.remove(CLUSTER_SSL_ENABLED);\n    serverProperties.remove(CLUSTER_SSL_CIPHERS);\n    serverProperties.remove(CLUSTER_SSL_PROTOCOLS);\n    serverProperties.remove(CLUSTER_SSL_REQUIRE_AUTHENTICATION);\n\n    InternalCache cache = getInternalCache();\n    ManagementService service = ManagementService.getExistingManagementService(cache);\n    \r\n    service.addMembershipListener(systemListener);\n\n    \r\n    adapter.registerMembershipListener(service);\n\n    \r\n    SerializableCallable createPeerCache = new SerializableCallable(\"Create Peer Cache\") {\n      @Override\n      public Object call() {\n        getSystem(serverProperties);\n        AttributesFactory factory = new AttributesFactory();\n        factory.setScope(Scope.LOCAL);\n        Region region = createRegion(name, factory.create());\n        assertThat(region).isNotNull();\n        assertThat(getRootRegion().getSubregion(name)).isNotNull();\n        return basicGetSystem().getDistributedMember();\n      }\n    };\n\n    DistributedMember peerMember = (DistributedMember) vm0.invoke(createPeerCache);\n    String peerMemberId = peerMember.getId();\n\n    synchronized (systemListener) {\n      if (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(peerMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(peerMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isNotNull();\n    assertThat(memberIdAdapter[JOINED]).isNotNull();\n    assertThat(memberAdapter[JOINED]).isEqualTo(peerMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(peerMemberId);\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    addIgnoredException(ServerConnectivityException.class.getName());\n    addIgnoredException(IOException.class.getName());\n\n    vm0.invoke(new SerializableRunnable(\"Disconnect Peer server\") {\n      @Override\n      public void run() {\n        disconnectFromDS();\n      }\n    });\n\n    synchronized (systemListener) {\n      if (!firedSystem[LEFT]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (adapter) {\n      if (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    \r\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isTrue();\n    assertThat(memberSystem[LEFT]).isEqualTo(peerMember);\n    assertThat(memberIdSystem[LEFT]).isEqualTo(peerMemberId);\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    \r\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(peerMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(peerMemberId);\n    assertThat(isClientAdapter[LEFT]).isFalse();\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n  }\n","date":"2018-07-18 03:54:18","endLine":1324,"groupId":"34929","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testServerEventsInPeerSystem","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/43/ba84933ab2f0f3523ff119ab90428a8ff762c9.src","preCode":"  public void testServerEventsInPeerSystem() throws Exception {\n    boolean[] firedSystem = new boolean[3];\n    DistributedMember[] memberSystem = new DistributedMember[3];\n    String[] memberIdSystem = new String[3];\n    boolean[] isClientSystem = new boolean[3];\n\n    boolean[] firedAdapter = new boolean[3];\n    DistributedMember[] memberAdapter = new DistributedMember[3];\n    String[] memberIdAdapter = new String[3];\n    boolean[] isClientAdapter = new boolean[3];\n\n    boolean[] firedBridge = new boolean[3];\n    DistributedMember[] memberBridge = new DistributedMember[3];\n    String[] memberIdBridge = new String[3];\n    boolean[] isClientBridge = new boolean[3];\n\n    boolean[] firedSystemDuplicate = new boolean[3];\n    boolean[] firedAdapterDuplicate = new boolean[3];\n    boolean[] firedBridgeDuplicate = new boolean[3];\n\n    MembershipListener systemListener = new MembershipListener() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedSystemDuplicate[JOINED] = firedSystem[JOINED];\n        firedSystem[JOINED] = true;\n        memberSystem[JOINED] = event.getDistributedMember();\n        memberIdSystem[JOINED] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedSystemDuplicate[LEFT] = firedSystem[LEFT];\n        firedSystem[LEFT] = true;\n        memberSystem[LEFT] = event.getDistributedMember();\n        memberIdSystem[LEFT] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedSystemDuplicate[CRASHED] = firedSystem[CRASHED];\n        firedSystem[CRASHED] = true;\n        memberSystem[CRASHED] = event.getDistributedMember();\n        memberIdSystem[CRASHED] = event.getMemberId();\n        notifyAll();\n      }\n    };\n\n    UniversalMembershipListenerAdapter adapter = new UniversalMembershipListenerAdapter() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedAdapterDuplicate[JOINED] = firedAdapter[JOINED];\n        firedAdapter[JOINED] = true;\n        memberAdapter[JOINED] = event.getDistributedMember();\n        memberIdAdapter[JOINED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[JOINED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedAdapterDuplicate[LEFT] = firedAdapter[LEFT];\n        firedAdapter[LEFT] = true;\n        memberAdapter[LEFT] = event.getDistributedMember();\n        memberIdAdapter[LEFT] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[LEFT] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedAdapterDuplicate[CRASHED] = firedAdapter[CRASHED];\n        firedAdapter[CRASHED] = true;\n        memberAdapter[CRASHED] = event.getDistributedMember();\n        memberIdAdapter[CRASHED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[CRASHED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n    };\n\n    Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    String name = this.getUniqueName();\n    int[] ports = new int[] {getRandomAvailablePort(SOCKET)};\n    assertThat(ports[0] != 0).isTrue();\n\n    \r\n    getSystem();\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    Region region = createRegion(name, factory.create());\n    assertThat(region).isNotNull();\n    assertThat(getRootRegion().getSubregion(name)).isNotNull();\n\n    ports[0] = startBridgeServer(0);\n    assertThat(ports[0] != 0).isTrue();\n\n    DistributedMember serverMember = getMemberId();\n    String serverMemberId = serverMember.getId();\n    Properties serverProperties = getSystem().getProperties();\n\n    serverProperties.remove(CLUSTER_SSL_ENABLED);\n    serverProperties.remove(CLUSTER_SSL_CIPHERS);\n    serverProperties.remove(CLUSTER_SSL_PROTOCOLS);\n    serverProperties.remove(CLUSTER_SSL_REQUIRE_AUTHENTICATION);\n\n    InternalCache cache = getInternalCache();\n    ManagementService service = ManagementService.getExistingManagementService(cache);\n    \r\n    service.addMembershipListener(systemListener);\n\n    \r\n    adapter.registerMembershipListener(service);\n\n    \r\n    SerializableCallable createPeerCache = new SerializableCallable(\"Create Peer Cache\") {\n      @Override\n      public Object call() {\n        getSystem(serverProperties);\n        AttributesFactory factory = new AttributesFactory();\n        factory.setScope(Scope.LOCAL);\n        Region region = createRegion(name, factory.create());\n        assertThat(region).isNotNull();\n        assertThat(getRootRegion().getSubregion(name)).isNotNull();\n        return basicGetSystem().getDistributedMember();\n      }\n    };\n\n    DistributedMember peerMember = (DistributedMember) vm0.invoke(createPeerCache);\n    String peerMemberId = peerMember.getId();\n\n    synchronized (systemListener) {\n      if (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(peerMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(peerMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isNotNull();\n    assertThat(memberIdAdapter[JOINED]).isNotNull();\n    assertThat(memberAdapter[JOINED]).isEqualTo(peerMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(peerMemberId);\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    addIgnoredException(ServerConnectivityException.class.getName());\n    addIgnoredException(IOException.class.getName());\n\n    vm0.invoke(new SerializableRunnable(\"Disconnect Peer server\") {\n      @Override\n      public void run() {\n        disconnectFromDS();\n      }\n    });\n\n    synchronized (systemListener) {\n      if (!firedSystem[LEFT]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (adapter) {\n      if (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    \r\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isTrue();\n    assertThat(memberSystem[LEFT]).isEqualTo(peerMember);\n    assertThat(memberIdSystem[LEFT]).isEqualTo(peerMemberId);\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    \r\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(peerMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(peerMemberId);\n    assertThat(isClientAdapter[LEFT]).isFalse();\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/UniversalMembershipListenerAdapterDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1078,"status":"N"}],"commitId":"0a9da64bc2cca0cc4e7cd6b889df85ace99dc8a7","commitMessage":"@@@GEODE-5480: Changing wait blocks to use a while loop\n\nThis test has many wait blocks that just used an if. So if the thread\nwas notified by some other event.  it would leave the wait without the\nexpected event being delivered.\n","date":"2018-08-11 05:19:21","modifiedFileCount":"1","status":"M","submitter":"Kirk Lund"},{"authorTime":"2020-12-18 03:10:55","codes":[{"authorDate":"2018-08-11 03:24:25","commitOrder":3,"curCode":"  public void testSystemClientEventsInServer() throws Exception {\n    boolean[] firedSystem = new boolean[3];\n    DistributedMember[] memberSystem = new DistributedMember[3];\n    String[] memberIdSystem = new String[3];\n    boolean[] isClientSystem = new boolean[3];\n\n    boolean[] firedAdapter = new boolean[3];\n    DistributedMember[] memberAdapter = new DistributedMember[3];\n    String[] memberIdAdapter = new String[3];\n    boolean[] isClientAdapter = new boolean[3];\n\n    boolean[] firedBridge = new boolean[3];\n    DistributedMember[] memberBridge = new DistributedMember[3];\n    String[] memberIdBridge = new String[3];\n    boolean[] isClientBridge = new boolean[3];\n\n    boolean[] firedSystemDuplicate = new boolean[3];\n    boolean[] firedAdapterDuplicate = new boolean[3];\n    boolean[] firedBridgeDuplicate = new boolean[3];\n\n    MembershipListener systemListener = new MembershipListener() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedSystemDuplicate[JOINED] = firedSystem[JOINED];\n        firedSystem[JOINED] = true;\n        memberSystem[JOINED] = event.getDistributedMember();\n        memberIdSystem[JOINED] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedSystemDuplicate[LEFT] = firedSystem[LEFT];\n        firedSystem[LEFT] = true;\n        memberSystem[LEFT] = event.getDistributedMember();\n        memberIdSystem[LEFT] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedSystemDuplicate[CRASHED] = firedSystem[CRASHED];\n        firedSystem[CRASHED] = true;\n        memberSystem[CRASHED] = event.getDistributedMember();\n        memberIdSystem[CRASHED] = event.getMemberId();\n        notifyAll();\n      }\n    };\n\n    UniversalMembershipListenerAdapter adapter = new UniversalMembershipListenerAdapter() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedAdapterDuplicate[JOINED] = firedAdapter[JOINED];\n        firedAdapter[JOINED] = true;\n        memberAdapter[JOINED] = event.getDistributedMember();\n        memberIdAdapter[JOINED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[JOINED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedAdapterDuplicate[LEFT] = firedAdapter[LEFT];\n        firedAdapter[LEFT] = true;\n        memberAdapter[LEFT] = event.getDistributedMember();\n        memberIdAdapter[LEFT] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[LEFT] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedAdapterDuplicate[CRASHED] = firedAdapter[CRASHED];\n        firedAdapter[CRASHED] = true;\n        memberAdapter[CRASHED] = event.getDistributedMember();\n        memberIdAdapter[CRASHED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[CRASHED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n    };\n\n    ClientMembershipListener bridgeListener = new ClientMembershipListener() {\n      @Override\n      public synchronized void memberJoined(ClientMembershipEvent event) {\n        firedBridgeDuplicate[JOINED] = firedBridge[JOINED];\n        firedBridge[JOINED] = true;\n        memberBridge[JOINED] = event.getMember();\n        memberIdBridge[JOINED] = event.getMemberId();\n        isClientBridge[JOINED] = event.isClient();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(ClientMembershipEvent event) {\n        firedBridgeDuplicate[LEFT] = firedBridge[LEFT];\n        firedBridge[LEFT] = true;\n        memberBridge[LEFT] = event.getMember();\n        memberIdBridge[LEFT] = event.getMemberId();\n        isClientBridge[LEFT] = event.isClient();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(ClientMembershipEvent event) {\n        firedBridgeDuplicate[CRASHED] = firedBridge[CRASHED];\n        firedBridge[CRASHED] = true;\n        memberBridge[CRASHED] = event.getMember();\n        memberIdBridge[CRASHED] = event.getMemberId();\n        isClientBridge[CRASHED] = event.isClient();\n        notifyAll();\n      }\n    };\n\n    Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    String name = this.getUniqueName();\n    int[] ports = new int[1];\n\n    \r\n    getSystem();\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    Region region = createRegion(name, factory.create());\n    assertThat(region).isNotNull();\n    assertThat(getRootRegion().getSubregion(name)).isNotNull();\n\n    ports[0] = startBridgeServer(0);\n    assertThat(ports[0] != 0).isTrue();\n    DistributedMember serverMember = getMemberId();\n    String serverMemberId = serverMember.getId();\n    Properties serverProperties = getSystem().getProperties();\n\n    \r\n    serverProperties.remove(CLUSTER_SSL_ENABLED);\n    serverProperties.remove(CLUSTER_SSL_CIPHERS);\n    serverProperties.remove(CLUSTER_SSL_PROTOCOLS);\n    serverProperties.remove(CLUSTER_SSL_REQUIRE_AUTHENTICATION);\n\n    \r\n    ClientMembership.registerClientMembershipListener(bridgeListener);\n\n    InternalCache cache = getInternalCache();\n    ManagementService service = ManagementService.getExistingManagementService(cache);\n    \r\n    service.addMembershipListener(systemListener);\n\n    \r\n    adapter.registerMembershipListener(service);\n\n    SerializableCallable createBridgeClient = new SerializableCallable(\"Create bridge client\") {\n      @Override\n      public Object call() {\n        System.setProperty(RESTRICT_MEMBERSHIP_PORT_RANGE, \"false\");\n        assertThat(getSystem(serverProperties).isConnected()).isTrue();\n        assertThat(getCache().isClosed()).isFalse();\n        AttributesFactory factory = new AttributesFactory();\n        factory.setScope(Scope.LOCAL);\n        ClientServerTestCase.configureConnectionPool(factory, getServerHostName(host), ports, false,\n            -1, -1, null);\n        createRegion(name, factory.create());\n        assertThat(getRootRegion().getSubregion(name)).isNotNull();\n        return getMemberId();\n      }\n    };\n\n    \r\n    DistributedMember clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    String clientMemberId = clientMember.getId();\n\n    \r\n    synchronized (adapter) {\n      while (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      while (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String pl = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pi = (PoolImpl) PoolManager.find(pl);\n        waitForClientToFullyConnect(pi);\n      }\n    });\n\n    \r\n    vm0.invoke(new SerializableRunnable(\"Close bridge client region\") {\n      @Override\n      public void run() {\n        getRootRegion().getSubregion(name).close();\n        PoolManager.close();\n      }\n    });\n\n    synchronized (adapter) {\n      while (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[LEFT]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isTrue();\n    assertThat(memberBridge[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[LEFT]).isTrue();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientAdapter[LEFT]).isTrue();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    \r\n    clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    clientMemberId = clientMember.getId();\n\n    synchronized (adapter) {\n      while (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String poolName = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pool = (PoolImpl) PoolManager.find(poolName);\n        waitForClientToFullyConnect(pool);\n      }\n    });\n\n    \r\n    vm0.invoke(new SerializableRunnable(\"Disconnect bridge client\") {\n      @Override\n      public void run() {\n        closeCache();\n        disconnectFromDS();\n      }\n    });\n\n    synchronized (adapter) {\n      while (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      while (!firedSystem[LEFT]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[LEFT]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isTrue();\n    assertThat(memberBridge[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[LEFT]).isTrue();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isTrue();\n    assertThat(memberSystem[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    \r\n    clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    clientMemberId = clientMember.getId();\n\n    synchronized (adapter) {\n      while (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      while (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String poolName = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pool = (PoolImpl) PoolManager.find(poolName);\n        waitForClientToFullyConnect(pool);\n      }\n    });\n\n    \r\n    ServerConnection.setForceClientCrashEvent(true);\n\n    vm0.invoke(new SerializableRunnable(\"Close bridge client region\") {\n      @Override\n      public void run() {\n        getRootRegion().getSubregion(name).close();\n        PoolManager.close();\n      }\n    });\n\n    synchronized (adapter) {\n      while (!firedAdapter[CRASHED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[CRASHED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isTrue();\n    assertThat(memberBridge[CRASHED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[CRASHED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[CRASHED]).isTrue();\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isTrue();\n    assertThat(memberAdapter[CRASHED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[CRASHED]).isEqualTo(clientMemberId);\n    assertThat(isClientAdapter[CRASHED]).isTrue();\n  }\n","date":"2018-08-11 05:19:21","endLine":1004,"groupId":"105374","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSystemClientEventsInServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/3d2e07f31fce367500bd4552d71f6927aa12b3.src","preCode":"  public void testSystemClientEventsInServer() throws Exception {\n    boolean[] firedSystem = new boolean[3];\n    DistributedMember[] memberSystem = new DistributedMember[3];\n    String[] memberIdSystem = new String[3];\n    boolean[] isClientSystem = new boolean[3];\n\n    boolean[] firedAdapter = new boolean[3];\n    DistributedMember[] memberAdapter = new DistributedMember[3];\n    String[] memberIdAdapter = new String[3];\n    boolean[] isClientAdapter = new boolean[3];\n\n    boolean[] firedBridge = new boolean[3];\n    DistributedMember[] memberBridge = new DistributedMember[3];\n    String[] memberIdBridge = new String[3];\n    boolean[] isClientBridge = new boolean[3];\n\n    boolean[] firedSystemDuplicate = new boolean[3];\n    boolean[] firedAdapterDuplicate = new boolean[3];\n    boolean[] firedBridgeDuplicate = new boolean[3];\n\n    MembershipListener systemListener = new MembershipListener() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedSystemDuplicate[JOINED] = firedSystem[JOINED];\n        firedSystem[JOINED] = true;\n        memberSystem[JOINED] = event.getDistributedMember();\n        memberIdSystem[JOINED] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedSystemDuplicate[LEFT] = firedSystem[LEFT];\n        firedSystem[LEFT] = true;\n        memberSystem[LEFT] = event.getDistributedMember();\n        memberIdSystem[LEFT] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedSystemDuplicate[CRASHED] = firedSystem[CRASHED];\n        firedSystem[CRASHED] = true;\n        memberSystem[CRASHED] = event.getDistributedMember();\n        memberIdSystem[CRASHED] = event.getMemberId();\n        notifyAll();\n      }\n    };\n\n    UniversalMembershipListenerAdapter adapter = new UniversalMembershipListenerAdapter() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedAdapterDuplicate[JOINED] = firedAdapter[JOINED];\n        firedAdapter[JOINED] = true;\n        memberAdapter[JOINED] = event.getDistributedMember();\n        memberIdAdapter[JOINED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[JOINED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedAdapterDuplicate[LEFT] = firedAdapter[LEFT];\n        firedAdapter[LEFT] = true;\n        memberAdapter[LEFT] = event.getDistributedMember();\n        memberIdAdapter[LEFT] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[LEFT] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedAdapterDuplicate[CRASHED] = firedAdapter[CRASHED];\n        firedAdapter[CRASHED] = true;\n        memberAdapter[CRASHED] = event.getDistributedMember();\n        memberIdAdapter[CRASHED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[CRASHED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n    };\n\n    ClientMembershipListener bridgeListener = new ClientMembershipListener() {\n      @Override\n      public synchronized void memberJoined(ClientMembershipEvent event) {\n        firedBridgeDuplicate[JOINED] = firedBridge[JOINED];\n        firedBridge[JOINED] = true;\n        memberBridge[JOINED] = event.getMember();\n        memberIdBridge[JOINED] = event.getMemberId();\n        isClientBridge[JOINED] = event.isClient();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(ClientMembershipEvent event) {\n        firedBridgeDuplicate[LEFT] = firedBridge[LEFT];\n        firedBridge[LEFT] = true;\n        memberBridge[LEFT] = event.getMember();\n        memberIdBridge[LEFT] = event.getMemberId();\n        isClientBridge[LEFT] = event.isClient();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(ClientMembershipEvent event) {\n        firedBridgeDuplicate[CRASHED] = firedBridge[CRASHED];\n        firedBridge[CRASHED] = true;\n        memberBridge[CRASHED] = event.getMember();\n        memberIdBridge[CRASHED] = event.getMemberId();\n        isClientBridge[CRASHED] = event.isClient();\n        notifyAll();\n      }\n    };\n\n    Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    String name = this.getUniqueName();\n    int[] ports = new int[1];\n\n    \r\n    getSystem();\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    Region region = createRegion(name, factory.create());\n    assertThat(region).isNotNull();\n    assertThat(getRootRegion().getSubregion(name)).isNotNull();\n\n    ports[0] = startBridgeServer(0);\n    assertThat(ports[0] != 0).isTrue();\n    DistributedMember serverMember = getMemberId();\n    String serverMemberId = serverMember.getId();\n    Properties serverProperties = getSystem().getProperties();\n\n    \r\n    serverProperties.remove(CLUSTER_SSL_ENABLED);\n    serverProperties.remove(CLUSTER_SSL_CIPHERS);\n    serverProperties.remove(CLUSTER_SSL_PROTOCOLS);\n    serverProperties.remove(CLUSTER_SSL_REQUIRE_AUTHENTICATION);\n\n    \r\n    ClientMembership.registerClientMembershipListener(bridgeListener);\n\n    InternalCache cache = getInternalCache();\n    ManagementService service = ManagementService.getExistingManagementService(cache);\n    \r\n    service.addMembershipListener(systemListener);\n\n    \r\n    adapter.registerMembershipListener(service);\n\n    SerializableCallable createBridgeClient = new SerializableCallable(\"Create bridge client\") {\n      @Override\n      public Object call() {\n        System.setProperty(RESTRICT_MEMBERSHIP_PORT_RANGE, \"false\");\n        assertThat(getSystem(serverProperties).isConnected()).isTrue();\n        assertThat(getCache().isClosed()).isFalse();\n        AttributesFactory factory = new AttributesFactory();\n        factory.setScope(Scope.LOCAL);\n        ClientServerTestCase.configureConnectionPool(factory, getServerHostName(host), ports, false,\n            -1, -1, null);\n        createRegion(name, factory.create());\n        assertThat(getRootRegion().getSubregion(name)).isNotNull();\n        return getMemberId();\n      }\n    };\n\n    \r\n    DistributedMember clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    String clientMemberId = clientMember.getId();\n\n    \r\n    synchronized (adapter) {\n      while (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      while (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String pl = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pi = (PoolImpl) PoolManager.find(pl);\n        waitForClientToFullyConnect(pi);\n      }\n    });\n\n    \r\n    vm0.invoke(new SerializableRunnable(\"Close bridge client region\") {\n      @Override\n      public void run() {\n        getRootRegion().getSubregion(name).close();\n        PoolManager.close();\n      }\n    });\n\n    synchronized (adapter) {\n      while (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[LEFT]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isTrue();\n    assertThat(memberBridge[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[LEFT]).isTrue();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientAdapter[LEFT]).isTrue();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    \r\n    clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    clientMemberId = clientMember.getId();\n\n    synchronized (adapter) {\n      while (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String poolName = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pool = (PoolImpl) PoolManager.find(poolName);\n        waitForClientToFullyConnect(pool);\n      }\n    });\n\n    \r\n    vm0.invoke(new SerializableRunnable(\"Disconnect bridge client\") {\n      @Override\n      public void run() {\n        closeCache();\n        disconnectFromDS();\n      }\n    });\n\n    synchronized (adapter) {\n      while (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      while (!firedSystem[LEFT]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[LEFT]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isTrue();\n    assertThat(memberBridge[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[LEFT]).isTrue();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isTrue();\n    assertThat(memberSystem[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[LEFT]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    \r\n    clientMember = (DistributedMember) vm0.invoke(createBridgeClient);\n    clientMemberId = clientMember.getId();\n\n    synchronized (adapter) {\n      while (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (systemListener) {\n      while (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[JOINED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isTrue();\n    assertThat(memberBridge[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[JOINED]).isTrue();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isFalse();\n    assertThat(memberBridge[CRASHED]).isNull();\n    assertThat(memberIdBridge[CRASHED]).isNull();\n    assertThat(isClientBridge[CRASHED]).isFalse();\n    resetArraysForTesting(firedBridge, memberBridge, memberIdBridge, isClientBridge);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(clientMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(clientMemberId);\n    \r\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    vm0.invoke(new SerializableRunnable(\"Wait for client to fully connect\") {\n      @Override\n      public void run() {\n        String poolName = getRootRegion().getSubregion(name).getAttributes().getPoolName();\n        PoolImpl pool = (PoolImpl) PoolManager.find(poolName);\n        waitForClientToFullyConnect(pool);\n      }\n    });\n\n    \r\n    ServerConnection.setForceClientCrashEvent(true);\n\n    vm0.invoke(new SerializableRunnable(\"Close bridge client region\") {\n      @Override\n      public void run() {\n        getRootRegion().getSubregion(name).close();\n        PoolManager.close();\n      }\n    });\n\n    synchronized (adapter) {\n      while (!firedAdapter[CRASHED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (bridgeListener) {\n      while (!firedBridge[CRASHED]) {\n        bridgeListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n    assertArrayFalse(firedBridgeDuplicate);\n\n    assertThat(firedBridge[JOINED]).isFalse();\n    assertThat(memberBridge[JOINED]).isNull();\n    assertThat(memberIdBridge[JOINED]).isNull();\n    assertThat(isClientBridge[JOINED]).isFalse();\n    assertThat(firedBridge[LEFT]).isFalse();\n    assertThat(memberBridge[LEFT]).isNull();\n    assertThat(memberIdBridge[LEFT]).isNull();\n    assertThat(isClientBridge[LEFT]).isFalse();\n    assertThat(firedBridge[CRASHED]).isTrue();\n    assertThat(memberBridge[CRASHED]).isEqualTo(clientMember);\n    assertThat(memberIdBridge[CRASHED]).isEqualTo(clientMemberId);\n    assertThat(isClientBridge[CRASHED]).isTrue();\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberAdapter[JOINED]).isNull();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isTrue();\n    assertThat(memberAdapter[CRASHED]).isEqualTo(clientMember);\n    assertThat(memberIdAdapter[CRASHED]).isEqualTo(clientMemberId);\n    assertThat(isClientAdapter[CRASHED]).isTrue();\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/UniversalMembershipListenerAdapterDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"N"},{"authorDate":"2020-12-18 03:10:55","commitOrder":3,"curCode":"  public void testServerEventsInPeerSystem() throws Exception {\n    boolean[] firedSystem = new boolean[3];\n    DistributedMember[] memberSystem = new DistributedMember[3];\n    String[] memberIdSystem = new String[3];\n    boolean[] isClientSystem = new boolean[3];\n\n    boolean[] firedAdapter = new boolean[3];\n    DistributedMember[] memberAdapter = new DistributedMember[3];\n    String[] memberIdAdapter = new String[3];\n    boolean[] isClientAdapter = new boolean[3];\n\n    boolean[] firedBridge = new boolean[3];\n    DistributedMember[] memberBridge = new DistributedMember[3];\n    String[] memberIdBridge = new String[3];\n    boolean[] isClientBridge = new boolean[3];\n\n    boolean[] firedSystemDuplicate = new boolean[3];\n    boolean[] firedAdapterDuplicate = new boolean[3];\n    boolean[] firedBridgeDuplicate = new boolean[3];\n\n    MembershipListener systemListener = new MembershipListener() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedSystemDuplicate[JOINED] = firedSystem[JOINED];\n        firedSystem[JOINED] = true;\n        memberSystem[JOINED] = event.getDistributedMember();\n        memberIdSystem[JOINED] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedSystemDuplicate[LEFT] = firedSystem[LEFT];\n        firedSystem[LEFT] = true;\n        memberSystem[LEFT] = event.getDistributedMember();\n        memberIdSystem[LEFT] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedSystemDuplicate[CRASHED] = firedSystem[CRASHED];\n        firedSystem[CRASHED] = true;\n        memberSystem[CRASHED] = event.getDistributedMember();\n        memberIdSystem[CRASHED] = event.getMemberId();\n        notifyAll();\n      }\n    };\n\n    UniversalMembershipListenerAdapter adapter = new UniversalMembershipListenerAdapter() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedAdapterDuplicate[JOINED] = firedAdapter[JOINED];\n        firedAdapter[JOINED] = true;\n        memberAdapter[JOINED] = event.getDistributedMember();\n        memberIdAdapter[JOINED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[JOINED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedAdapterDuplicate[LEFT] = firedAdapter[LEFT];\n        firedAdapter[LEFT] = true;\n        memberAdapter[LEFT] = event.getDistributedMember();\n        memberIdAdapter[LEFT] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[LEFT] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedAdapterDuplicate[CRASHED] = firedAdapter[CRASHED];\n        firedAdapter[CRASHED] = true;\n        memberAdapter[CRASHED] = event.getDistributedMember();\n        memberIdAdapter[CRASHED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[CRASHED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n    };\n\n    Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    String name = this.getUniqueName();\n    int[] ports = getRandomAvailableTCPPorts(1);\n    assertThat(ports[0] != 0).isTrue();\n\n    \r\n    getSystem();\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    Region region = createRegion(name, factory.create());\n    assertThat(region).isNotNull();\n    assertThat(getRootRegion().getSubregion(name)).isNotNull();\n\n    ports[0] = startBridgeServer(0);\n    assertThat(ports[0] != 0).isTrue();\n\n    DistributedMember serverMember = getMemberId();\n    String serverMemberId = serverMember.getId();\n    Properties serverProperties = getSystem().getProperties();\n\n    serverProperties.remove(CLUSTER_SSL_ENABLED);\n    serverProperties.remove(CLUSTER_SSL_CIPHERS);\n    serverProperties.remove(CLUSTER_SSL_PROTOCOLS);\n    serverProperties.remove(CLUSTER_SSL_REQUIRE_AUTHENTICATION);\n\n    InternalCache cache = getInternalCache();\n    ManagementService service = ManagementService.getExistingManagementService(cache);\n    \r\n    service.addMembershipListener(systemListener);\n\n    \r\n    adapter.registerMembershipListener(service);\n\n    \r\n    SerializableCallable createPeerCache = new SerializableCallable(\"Create Peer Cache\") {\n      @Override\n      public Object call() {\n        getSystem(serverProperties);\n        AttributesFactory factory = new AttributesFactory();\n        factory.setScope(Scope.LOCAL);\n        Region region = createRegion(name, factory.create());\n        assertThat(region).isNotNull();\n        assertThat(getRootRegion().getSubregion(name)).isNotNull();\n        return basicGetSystem().getDistributedMember();\n      }\n    };\n\n    DistributedMember peerMember = (DistributedMember) vm0.invoke(createPeerCache);\n    String peerMemberId = peerMember.getId();\n\n    synchronized (systemListener) {\n      if (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(peerMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(peerMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isNotNull();\n    assertThat(memberIdAdapter[JOINED]).isNotNull();\n    assertThat(memberAdapter[JOINED]).isEqualTo(peerMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(peerMemberId);\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    addIgnoredException(ServerConnectivityException.class.getName());\n    addIgnoredException(IOException.class.getName());\n\n    vm0.invoke(new SerializableRunnable(\"Disconnect Peer server\") {\n      @Override\n      public void run() {\n        disconnectFromDS();\n      }\n    });\n\n    synchronized (systemListener) {\n      if (!firedSystem[LEFT]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (adapter) {\n      if (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    \r\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isTrue();\n    assertThat(memberSystem[LEFT]).isEqualTo(peerMember);\n    assertThat(memberIdSystem[LEFT]).isEqualTo(peerMemberId);\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    \r\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(peerMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(peerMemberId);\n    assertThat(isClientAdapter[LEFT]).isFalse();\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n  }\n","date":"2020-12-18 03:10:55","endLine":1309,"groupId":"105374","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testServerEventsInPeerSystem","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/9e/2de28bfd87cad2f1a1b0b71423a6f3a8c4d0ea.src","preCode":"  public void testServerEventsInPeerSystem() throws Exception {\n    boolean[] firedSystem = new boolean[3];\n    DistributedMember[] memberSystem = new DistributedMember[3];\n    String[] memberIdSystem = new String[3];\n    boolean[] isClientSystem = new boolean[3];\n\n    boolean[] firedAdapter = new boolean[3];\n    DistributedMember[] memberAdapter = new DistributedMember[3];\n    String[] memberIdAdapter = new String[3];\n    boolean[] isClientAdapter = new boolean[3];\n\n    boolean[] firedBridge = new boolean[3];\n    DistributedMember[] memberBridge = new DistributedMember[3];\n    String[] memberIdBridge = new String[3];\n    boolean[] isClientBridge = new boolean[3];\n\n    boolean[] firedSystemDuplicate = new boolean[3];\n    boolean[] firedAdapterDuplicate = new boolean[3];\n    boolean[] firedBridgeDuplicate = new boolean[3];\n\n    MembershipListener systemListener = new MembershipListener() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedSystemDuplicate[JOINED] = firedSystem[JOINED];\n        firedSystem[JOINED] = true;\n        memberSystem[JOINED] = event.getDistributedMember();\n        memberIdSystem[JOINED] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedSystemDuplicate[LEFT] = firedSystem[LEFT];\n        firedSystem[LEFT] = true;\n        memberSystem[LEFT] = event.getDistributedMember();\n        memberIdSystem[LEFT] = event.getMemberId();\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedSystemDuplicate[CRASHED] = firedSystem[CRASHED];\n        firedSystem[CRASHED] = true;\n        memberSystem[CRASHED] = event.getDistributedMember();\n        memberIdSystem[CRASHED] = event.getMemberId();\n        notifyAll();\n      }\n    };\n\n    UniversalMembershipListenerAdapter adapter = new UniversalMembershipListenerAdapter() {\n      @Override\n      public synchronized void memberJoined(MembershipEvent event) {\n        firedAdapterDuplicate[JOINED] = firedAdapter[JOINED];\n        firedAdapter[JOINED] = true;\n        memberAdapter[JOINED] = event.getDistributedMember();\n        memberIdAdapter[JOINED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[JOINED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberLeft(MembershipEvent event) {\n        firedAdapterDuplicate[LEFT] = firedAdapter[LEFT];\n        firedAdapter[LEFT] = true;\n        memberAdapter[LEFT] = event.getDistributedMember();\n        memberIdAdapter[LEFT] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[LEFT] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n\n      @Override\n      public synchronized void memberCrashed(MembershipEvent event) {\n        firedAdapterDuplicate[CRASHED] = firedAdapter[CRASHED];\n        firedAdapter[CRASHED] = true;\n        memberAdapter[CRASHED] = event.getDistributedMember();\n        memberIdAdapter[CRASHED] = event.getMemberId();\n        if (event instanceof AdaptedMembershipEvent) {\n          isClientAdapter[CRASHED] = ((AdaptedMembershipEvent) event).isClient();\n        }\n        notifyAll();\n      }\n    };\n\n    Host host = Host.getHost(0);\n    VM vm0 = host.getVM(0);\n    String name = this.getUniqueName();\n    int[] ports = new int[] {getRandomAvailablePort(SOCKET)};\n    assertThat(ports[0] != 0).isTrue();\n\n    \r\n    getSystem();\n    AttributesFactory factory = new AttributesFactory();\n    factory.setScope(Scope.LOCAL);\n    Region region = createRegion(name, factory.create());\n    assertThat(region).isNotNull();\n    assertThat(getRootRegion().getSubregion(name)).isNotNull();\n\n    ports[0] = startBridgeServer(0);\n    assertThat(ports[0] != 0).isTrue();\n\n    DistributedMember serverMember = getMemberId();\n    String serverMemberId = serverMember.getId();\n    Properties serverProperties = getSystem().getProperties();\n\n    serverProperties.remove(CLUSTER_SSL_ENABLED);\n    serverProperties.remove(CLUSTER_SSL_CIPHERS);\n    serverProperties.remove(CLUSTER_SSL_PROTOCOLS);\n    serverProperties.remove(CLUSTER_SSL_REQUIRE_AUTHENTICATION);\n\n    InternalCache cache = getInternalCache();\n    ManagementService service = ManagementService.getExistingManagementService(cache);\n    \r\n    service.addMembershipListener(systemListener);\n\n    \r\n    adapter.registerMembershipListener(service);\n\n    \r\n    SerializableCallable createPeerCache = new SerializableCallable(\"Create Peer Cache\") {\n      @Override\n      public Object call() {\n        getSystem(serverProperties);\n        AttributesFactory factory = new AttributesFactory();\n        factory.setScope(Scope.LOCAL);\n        Region region = createRegion(name, factory.create());\n        assertThat(region).isNotNull();\n        assertThat(getRootRegion().getSubregion(name)).isNotNull();\n        return basicGetSystem().getDistributedMember();\n      }\n    };\n\n    DistributedMember peerMember = (DistributedMember) vm0.invoke(createPeerCache);\n    String peerMemberId = peerMember.getId();\n\n    synchronized (systemListener) {\n      if (!firedSystem[JOINED]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (adapter) {\n      if (!firedAdapter[JOINED]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    assertArrayFalse(firedSystemDuplicate);\n\n    assertThat(firedSystem[JOINED]).isTrue();\n    assertThat(memberSystem[JOINED]).isEqualTo(peerMember);\n    assertThat(memberIdSystem[JOINED]).isEqualTo(peerMemberId);\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isFalse();\n    assertThat(memberSystem[LEFT]).isNull();\n    assertThat(memberIdSystem[LEFT]).isNull();\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isTrue();\n    assertThat(memberAdapter[JOINED]).isNotNull();\n    assertThat(memberIdAdapter[JOINED]).isNotNull();\n    assertThat(memberAdapter[JOINED]).isEqualTo(peerMember);\n    assertThat(memberIdAdapter[JOINED]).isEqualTo(peerMemberId);\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    assertThat(firedAdapter[LEFT]).isFalse();\n    assertThat(memberAdapter[LEFT]).isNull();\n    assertThat(memberIdAdapter[LEFT]).isNull();\n    assertThat(isClientAdapter[LEFT]).isFalse();\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n\n    addIgnoredException(ServerConnectivityException.class.getName());\n    addIgnoredException(IOException.class.getName());\n\n    vm0.invoke(new SerializableRunnable(\"Disconnect Peer server\") {\n      @Override\n      public void run() {\n        disconnectFromDS();\n      }\n    });\n\n    synchronized (systemListener) {\n      if (!firedSystem[LEFT]) {\n        systemListener.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n    synchronized (adapter) {\n      if (!firedAdapter[LEFT]) {\n        adapter.wait(ASYNC_EVENT_WAIT_MILLIS);\n      }\n    }\n\n    \r\n\n    assertArrayFalse(firedSystemDuplicate);\n    assertArrayFalse(firedAdapterDuplicate);\n\n    assertThat(firedSystem[JOINED]).isFalse();\n    assertThat(memberSystem[JOINED]).isNull();\n    assertThat(memberIdSystem[JOINED]).isNull();\n    assertThat(isClientSystem[JOINED]).isFalse();\n    assertThat(firedSystem[LEFT]).isTrue();\n    assertThat(memberSystem[LEFT]).isEqualTo(peerMember);\n    assertThat(memberIdSystem[LEFT]).isEqualTo(peerMemberId);\n    assertThat(isClientSystem[LEFT]).isFalse();\n    assertThat(firedSystem[CRASHED]).isFalse();\n    assertThat(memberSystem[CRASHED]).isNull();\n    assertThat(memberIdSystem[CRASHED]).isNull();\n    assertThat(isClientSystem[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedSystem, memberSystem, memberIdSystem, isClientSystem);\n\n    assertThat(firedAdapter[JOINED]).isFalse();\n    assertThat(memberIdAdapter[JOINED]).isNull();\n    assertThat(isClientAdapter[JOINED]).isFalse();\n    \r\n    assertThat(firedAdapter[LEFT]).isTrue();\n    assertThat(memberAdapter[LEFT]).isEqualTo(peerMember);\n    assertThat(memberIdAdapter[LEFT]).isEqualTo(peerMemberId);\n    assertThat(isClientAdapter[LEFT]).isFalse();\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    assertThat(firedAdapter[CRASHED]).isFalse();\n    assertThat(memberAdapter[CRASHED]).isNull();\n    assertThat(memberIdAdapter[CRASHED]).isNull();\n    assertThat(isClientAdapter[CRASHED]).isFalse();\n\n    resetArraysForTesting(firedAdapter, memberAdapter, memberIdAdapter, isClientAdapter);\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/management/UniversalMembershipListenerAdapterDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1063,"status":"M"}],"commitId":"b3867a8a466db8d7812c62bbafc4c668b14ea9fe","commitMessage":"@@@Make tests use AvailablePortHelper.  not AvailablePort (#5861)\n\nMake nearly all tests use AvailablePortHelper instead of AvailablePort\nto obtain ports. See the rationale below.\n\nAlso: Remove unused methods from AvailablePort.\n\nRationale:\n\nAvailablePort is inherently risky as a source of ports for tests.\nEach \"get available port\" method obtains candidate port numbers from the\ndesired range by randomly sampling with replacement. This means that\nmultiple calls can return the same port number if the port is not put\ninto use between calls.\n\nSome tests failed intermittently because they made multiple calls to\nAvailablePort.  received the same port on multiple calls.  and unknowingly\nattempted bind multiple sockets to the same port number.  resulting in a\nBindException. See GEODE-6622 for examples.\n\nAvailablePortHelper does not have this problem. It obtains candidate\nport numbers round robin. After returning an available port. \nAvailablePortHelper will not return that port again in that JVM until it\nhas tested every other port in the range for availability.\n\nTo reduce the chance of different JVMs selecting each other's ports. \nAvailablePortHelper selects a random starting point for its round robin\nsearch in each JVM.\n\nFor distributed tests.  DUnit further arranges for the\nAvailablePortHelper in each JVM to start its round robin search in a\ndistinct place.  maximally distant from the starting points of all other\nJVMs. Because AvailablePort selects randomly from the full port range. \nit cannot benefit from this techique.\n\nThe problems caused by AvailablePort are rare.  but inevitable.  with a\nfrequency determined by the total size of the port range. An upcoming\nchange will make the available port range much smaller (~400 ports\ninstead of the current ~10000 ports).  which will greatly increase the\nfrequency of this problem. But the problem exists now.  and results in\nintermittent BindExceptions.","date":"2020-12-18 03:10:55","modifiedFileCount":"98","status":"M","submitter":"Dale Emery"}]
