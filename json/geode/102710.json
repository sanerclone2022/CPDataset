[{"authorTime":"2017-03-02 05:28:57","codes":[{"authorDate":"2016-09-15 02:08:18","commitOrder":2,"curCode":"  public void testHashMapObject() throws Exception {\n    Random random = getRandom();\n    HashMap map = new HashMap();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Object key = new Long(random.nextLong());\n      Object value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeObject(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    HashMap map2 =\n      (HashMap) DataSerializer.readObject(in);\n    assertEquals(map, map2);\n  }\n","date":"2016-09-15 02:08:18","endLine":1449,"groupId":"38008","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHashMapObject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8f/75461e4dc621b2a51d03b8d0734e38d304cc3e.src","preCode":"  public void testHashMapObject() throws Exception {\n    Random random = getRandom();\n    HashMap map = new HashMap();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Object key = new Long(random.nextLong());\n      Object value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeObject(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    HashMap map2 =\n      (HashMap) DataSerializer.readObject(in);\n    assertEquals(map, map2);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/DataSerializableJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1431,"status":"NB"},{"authorDate":"2017-03-02 05:28:57","commitOrder":2,"curCode":"  public void testLinkedHashMapObject() throws Exception {\n    Random random = getRandom();\n    LinkedHashMap map = new LinkedHashMap();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Object key = new Long(random.nextLong());\n      Object value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeObject(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    LinkedHashMap map2 = (LinkedHashMap) DataSerializer.readObject(in);\n    assertEquals(map, map2);\n  }\n","date":"2017-03-02 05:28:57","endLine":1611,"groupId":"38008","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLinkedHashMapObject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/0c/5d561f42f7eb88154a3f36bc30c3e9d795115c.src","preCode":"  public void testLinkedHashMapObject() throws Exception {\n    Random random = getRandom();\n    LinkedHashMap map = new LinkedHashMap();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Object key = new Long(random.nextLong());\n      Object value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeObject(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    LinkedHashMap map2 = (LinkedHashMap) DataSerializer.readObject(in);\n    assertEquals(map, map2);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/DataSerializableJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1594,"status":"B"}],"commitId":"635d3118177f6cae6b0497097e64bdb7a9aee800","commitMessage":"@@@Merge branch 'develop' of https://git-wip-us.apache.org/repos/asf/geode into develop\n\n* 'develop' of https://git-wip-us.apache.org/repos/asf/geode: (57 commits)\n  GEODE-2551 Fix code issues found by AppChecker\n  Revert \"GEODE-1887: Now Size api goes through ServerProxy when cache is of type client and DataPolicy is Empty.\"\n  GEODE-2538: Don't deserialize values on the server when getting results\n  GEODE-2461: remove json4s-ast_2.10 as explicit dependency\n  GEODE-2547: Interest registration no longer causes a CacheLoader to be invoked\n  GEODE-2526: Enhance log statement to include ResourceTypeName\n  GEODE-880 Remove unused classes\n  GEODE-2460: update dependency versions\n  GEODE-1995: Removed ReliableMessageQueue.  ReliableMessageQueueFactory.  ReliableMessageQueueFactoryImpl and it's usage in the code from GemfireCacheImpl and DistributedRegion.\n  GEODE-2550 Improve README and BUILDING\n  GEODE-2538: Don't invoke a cache loader when fetching values for a lucene query\n  GEODE-2404: Added support for destroying lucene indexes\n  GEODE-2545: NPE during lucene query execution when cache is closing or region is destroyed\n  GEODE-2515: Disabling BaseLineAndCompareQueryPerfJUnitTest\n  GEODE-2142: Removing JSON licence stuff from NOTICE files\n  GEODE-2142: removing tests so run precheckin\n  GEODE-2142: final compiling build\n  GEODE-2142: cyclical dependency in gradle build\n  GEODE-2142: spotless\n  GEODE-2142: Refactoring of tests to work with new JSONObject class. Changing file export to use Base64 encoding.\n  ...\n","date":"2017-03-02 05:28:57","modifiedFileCount":"144","status":"M","submitter":"Dave Barnes"},{"authorTime":"2021-05-19 13:32:42","codes":[{"authorDate":"2021-05-19 13:32:42","commitOrder":3,"curCode":"  public void testHashMapObject() throws Exception {\n    Random random = getRandom();\n    HashMap<Long, String> map = new HashMap<>();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Long key = random.nextLong();\n      String value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeObject(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    HashMap<Long, String> map2 = DataSerializer.readObject(in);\n    assertEquals(map, map2);\n  }\n","date":"2021-06-30 01:58:48","endLine":1405,"groupId":"102710","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testHashMapObject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e9/722f7b9d627c7bfd09d36a5a25ec55cb733e67.src","preCode":"  public void testHashMapObject() throws Exception {\n    Random random = getRandom();\n    HashMap map = new HashMap();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Object key = new Long(random.nextLong());\n      Object value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeObject(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    HashMap map2 = (HashMap) DataSerializer.readObject(in);\n    assertEquals(map, map2);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/DataSerializableJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1388,"status":"M"},{"authorDate":"2021-05-19 13:32:42","commitOrder":3,"curCode":"  public void testLinkedHashMapObject() throws Exception {\n    Random random = getRandom();\n    LinkedHashMap<Long, String> map = new LinkedHashMap<>();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Long key = random.nextLong();\n      String value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeObject(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    LinkedHashMap<Long, String> map2 = DataSerializer.readObject(in);\n    assertEquals(map, map2);\n  }\n","date":"2021-06-30 01:58:48","endLine":1638,"groupId":"102710","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testLinkedHashMapObject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e9/722f7b9d627c7bfd09d36a5a25ec55cb733e67.src","preCode":"  public void testLinkedHashMapObject() throws Exception {\n    Random random = getRandom();\n    LinkedHashMap map = new LinkedHashMap();\n    int size = random.nextInt(50);\n    for (int i = 0; i < size; i++) {\n      Object key = new Long(random.nextLong());\n      Object value = String.valueOf(random.nextLong());\n      map.put(key, value);\n    }\n\n    DataOutputStream out = getDataOutput();\n    DataSerializer.writeObject(map, out);\n    out.flush();\n\n    DataInput in = getDataInput();\n    LinkedHashMap map2 = (LinkedHashMap) DataSerializer.readObject(in);\n    assertEquals(map, map2);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/DataSerializableJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1621,"status":"M"}],"commitId":"cc6f2c307d66eb37b44bc33ac2f8a7f1f517ce13","commitMessage":"@@@GEODE-6588: Cleanup DataSerializableJUnitTest\n","date":"2021-06-30 01:58:48","modifiedFileCount":"1","status":"M","submitter":"Jacob Barrett"}]
