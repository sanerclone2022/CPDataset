[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void validateCQ(VM vm, final String cqName, final int resultSize, final int creates,\n      final int updates, final int deletes, final int queryInserts, final int queryUpdates,\n      final int queryDeletes, final int totalEvents) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCQService.\");\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n        listener.printInfo(false);\n\n        \r\n        if (totalEvents != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Total Event Count mismatch\", totalEvents, listener.getTotalEventCount());\n        }\n\n        if (resultSize != noTest) {\n          \r\n          \r\n          \r\n          \r\n          \r\n          fail(\"test for event counts instead of results size\");\n          \r\n          \r\n        }\n\n        \r\n        if (creates != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Create Event mismatch\", creates, listener.getCreateEventCount());\n        }\n\n        \r\n        if (updates != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Update Event mismatch\", updates, listener.getUpdateEventCount());\n        }\n\n        \r\n        if (deletes != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Delete Event mismatch\", deletes, listener.getDeleteEventCount());\n        }\n\n        \r\n        if (queryInserts != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Query Insert Event mismatch\", queryInserts,\n              listener.getQueryInsertEventCount());\n        }\n\n        \r\n        if (queryUpdates != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Query Update Event mismatch\", queryUpdates,\n              listener.getQueryUpdateEventCount());\n        }\n\n        \r\n        if (queryDeletes != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Query Delete Event mismatch\", queryDeletes,\n              listener.getQueryDeleteEventCount());\n        }\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":1240,"groupId":"28449","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validateCQ","params":"(VMvm@finalStringcqName@finalintresultSize@finalintcreates@finalintupdates@finalintdeletes@finalintqueryInserts@finalintqueryUpdates@finalintqueryDeletes@finalinttotalEvents)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/72f987b8bfe0450ffa77a55fdf0efa1c66c36f.src","preCode":"  public void validateCQ(VM vm, final String cqName, final int resultSize, final int creates,\n      final int updates, final int deletes, final int queryInserts, final int queryUpdates,\n      final int queryDeletes, final int totalEvents) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCQService.\");\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n        listener.printInfo(false);\n\n        \r\n        if (totalEvents != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Total Event Count mismatch\", totalEvents, listener.getTotalEventCount());\n        }\n\n        if (resultSize != noTest) {\n          \r\n          \r\n          \r\n          \r\n          \r\n          fail(\"test for event counts instead of results size\");\n          \r\n          \r\n        }\n\n        \r\n        if (creates != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Create Event mismatch\", creates, listener.getCreateEventCount());\n        }\n\n        \r\n        if (updates != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Update Event mismatch\", updates, listener.getUpdateEventCount());\n        }\n\n        \r\n        if (deletes != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Delete Event mismatch\", deletes, listener.getDeleteEventCount());\n        }\n\n        \r\n        if (queryInserts != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Query Insert Event mismatch\", queryInserts,\n              listener.getQueryInsertEventCount());\n        }\n\n        \r\n        if (queryUpdates != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Query Update Event mismatch\", queryUpdates,\n              listener.getQueryUpdateEventCount());\n        }\n\n        \r\n        if (queryDeletes != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Query Delete Event mismatch\", queryDeletes,\n              listener.getQueryDeleteEventCount());\n        }\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1151,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void clearCQListenerEvents(VM vm, final String cqName) {\n    vm.invoke(new CacheSerializableRunnable(\"validate cq count\") {\n      public void run2() throws CacheException {\n        \r\n\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCQService.\");\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListener = cqAttr.getCqListener();\n        CqQueryTestListener listener = (CqQueryTestListener) cqListener;\n        listener.getEventHistory();\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":1459,"groupId":"25617","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"clearCQListenerEvents","params":"(VMvm@finalStringcqName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/72f987b8bfe0450ffa77a55fdf0efa1c66c36f.src","preCode":"  public void clearCQListenerEvents(VM vm, final String cqName) {\n    vm.invoke(new CacheSerializableRunnable(\"validate cq count\") {\n      public void run2() throws CacheException {\n        \r\n\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCQService.\");\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListener = cqAttr.getCqListener();\n        CqQueryTestListener listener = (CqQueryTestListener) cqListener;\n        listener.getEventHistory();\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1435,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-08-31 08:10:50","codes":[{"authorDate":"2018-08-31 08:10:50","commitOrder":2,"curCode":"  public void validateCQ(VM vm, final String cqName, final int resultSize, final int creates,\n      final int updates, final int deletes, final int queryInserts, final int queryUpdates,\n      final int queryDeletes, final int totalEvents) {\n    vm.invoke(() -> {\n      QueryService cqService = getCache().getQueryService();\n      CqQuery cQuery = cqService.getCq(cqName);\n      assertThat(cQuery).describedAs(\"Failed to get CqQuery for CQ : \" + cqName).isNotNull();\n\n      CqAttributes cqAttr = cQuery.getCqAttributes();\n      CqListener cqListeners[] = cqAttr.getCqListeners();\n      CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n      listener.printInfo(false);\n\n      \r\n      if (totalEvents != noTest) {\n        \r\n        listener.printInfo(true);\n        assertThat(listener.getTotalEventCount()).describedAs(\"Total Event Count mismatch\")\n            .isEqualTo(totalEvents);\n      }\n\n      assertThat(resultSize).describedAs(\"test for event counts instead of results size\")\n          .isEqualTo(noTest);\n\n      \r\n      if (creates != noTest) {\n        \r\n        listener.printInfo(true);\n        assertThat(listener.getCreateEventCount()).describedAs(\"Create Event mismatch\")\n            .isEqualTo(creates);\n      }\n\n      \r\n      if (updates != noTest) {\n        \r\n        listener.printInfo(true);\n        assertThat(listener.getUpdateEventCount()).describedAs(\"Update Event mismatch\")\n            .isEqualTo(updates);\n      }\n\n      \r\n      if (deletes != noTest) {\n        \r\n        listener.printInfo(true);\n        assertThat(listener.getDeleteEventCount()).describedAs(\"Delete Event mismatch\")\n            .isEqualTo(deletes);\n      }\n\n      \r\n      if (queryInserts != noTest) {\n        \r\n        listener.printInfo(true);\n        assertThat(listener.getQueryInsertEventCount()).describedAs(\"Query Insert Event mismatch\")\n            .isEqualTo(queryInserts);\n      }\n\n      \r\n      if (queryUpdates != noTest) {\n        \r\n        listener.printInfo(true);\n        assertThat(listener.getQueryUpdateEventCount()).describedAs(\"Query Update Event mismatch\")\n            .isEqualTo(queryUpdates);\n      }\n\n      \r\n      if (queryDeletes != noTest) {\n        \r\n        listener.printInfo(true);\n        assertThat(listener.getQueryDeleteEventCount()).describedAs(\"Query Delete Event mismatch\")\n            .isEqualTo(queryDeletes);\n      }\n    });\n  }\n","date":"2018-08-31 08:10:50","endLine":942,"groupId":"10487","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validateCQ","params":"(VMvm@finalStringcqName@finalintresultSize@finalintcreates@finalintupdates@finalintdeletes@finalintqueryInserts@finalintqueryUpdates@finalintqueryDeletes@finalinttotalEvents)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void validateCQ(VM vm, final String cqName, final int resultSize, final int creates,\n      final int updates, final int deletes, final int queryInserts, final int queryUpdates,\n      final int queryDeletes, final int totalEvents) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCQService.\");\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListeners[] = cqAttr.getCqListeners();\n        CqQueryTestListener listener = (CqQueryTestListener) cqListeners[0];\n        listener.printInfo(false);\n\n        \r\n        if (totalEvents != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Total Event Count mismatch\", totalEvents, listener.getTotalEventCount());\n        }\n\n        if (resultSize != noTest) {\n          \r\n          \r\n          \r\n          \r\n          \r\n          fail(\"test for event counts instead of results size\");\n          \r\n          \r\n        }\n\n        \r\n        if (creates != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Create Event mismatch\", creates, listener.getCreateEventCount());\n        }\n\n        \r\n        if (updates != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Update Event mismatch\", updates, listener.getUpdateEventCount());\n        }\n\n        \r\n        if (deletes != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Delete Event mismatch\", deletes, listener.getDeleteEventCount());\n        }\n\n        \r\n        if (queryInserts != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Query Insert Event mismatch\", queryInserts,\n              listener.getQueryInsertEventCount());\n        }\n\n        \r\n        if (queryUpdates != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Query Update Event mismatch\", queryUpdates,\n              listener.getQueryUpdateEventCount());\n        }\n\n        \r\n        if (queryDeletes != noTest) {\n          \r\n          listener.printInfo(true);\n          assertEquals(\"Query Delete Event mismatch\", queryDeletes,\n              listener.getQueryDeleteEventCount());\n        }\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":870,"status":"M"},{"authorDate":"2018-08-31 08:10:50","commitOrder":2,"curCode":"  public void clearCQListenerEvents(VM vm, final String cqName) {\n    vm.invoke(() -> {\n      QueryService cqService = getCache().getQueryService();\n\n      CqQuery cQuery = cqService.getCq(cqName);\n      assertThat(cQuery).describedAs(\"Failed to get CqQuery for CQ : \" + cqName).isNotNull();\n\n      CqAttributes cqAttr = cQuery.getCqAttributes();\n      CqListener cqListener = cqAttr.getCqListener();\n      CqQueryTestListener listener = (CqQueryTestListener) cqListener;\n      listener.getEventHistory();\n    });\n  }\n","date":"2018-08-31 08:10:50","endLine":1092,"groupId":"10487","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"clearCQListenerEvents","params":"(VMvm@finalStringcqName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void clearCQListenerEvents(VM vm, final String cqName) {\n    vm.invoke(new CacheSerializableRunnable(\"validate cq count\") {\n      public void run2() throws CacheException {\n        \r\n\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCQService.\");\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        CqAttributes cqAttr = cQuery.getCqAttributes();\n        CqListener cqListener = cqAttr.getCqListener();\n        CqQueryTestListener listener = (CqQueryTestListener) cqListener;\n        listener.getEventHistory();\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1080,"status":"M"}],"commitId":"46b78978d894e8851daf86d929ae5efbd9093097","commitMessage":"@@@GEODE-5411: Adding awaitility fixing timing issue in CqPerfDUnitTest\n\n- Fixing timing issue by waiting for cq set to reach the right size\n- Code modernization and cleanup","date":"2018-08-31 08:10:50","modifiedFileCount":"3","status":"M","submitter":"mhansonp"}]
