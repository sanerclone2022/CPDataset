[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testLimitDistinctIterEvaluatedQueryForResultBag() {\n    try {\n      Query query;\n      SelectResults result;\n      String queryString = \"SELECT DISTINCT * FROM /portfolios pf WHERE pf.ID > 0 limit 5\";\n      query = qs.newQuery(queryString);\n      final int[] num = new int[1];\n      num[0] = 0;\n      QueryObserver old = QueryObserverHolder.setInstance(new QueryObserverAdapter() {\n        public void afterIterationEvaluation(Object result) {\n          num[0] += 1;\n        }\n      });\n      result = (SelectResults) query.execute();\n      assertEquals(5, num[0]);\n      assertTrue(result instanceof SelectResults);\n      assertEquals(5, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(5, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":244,"groupId":"30093","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLimitDistinctIterEvaluatedQueryForResultBag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a5/4e5ae173aaf0c335b09cb85d0fec1440765b99.src","preCode":"  public void testLimitDistinctIterEvaluatedQueryForResultBag() {\n    try {\n      Query query;\n      SelectResults result;\n      String queryString = \"SELECT DISTINCT * FROM /portfolios pf WHERE pf.ID > 0 limit 5\";\n      query = qs.newQuery(queryString);\n      final int[] num = new int[1];\n      num[0] = 0;\n      QueryObserver old = QueryObserverHolder.setInstance(new QueryObserverAdapter() {\n        public void afterIterationEvaluation(Object result) {\n          num[0] += 1;\n        }\n      });\n      result = (SelectResults) query.execute();\n      assertEquals(5, num[0]);\n      assertTrue(result instanceof SelectResults);\n      assertEquals(5, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(5, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testLimitDistinctIterEvaluatedQueryForResultBagWithProjectionAttribute() {\n    try {\n      Query query;\n      SelectResults result;\n      String queryString = \"SELECT DISTINCT pf.ID FROM /portfolios pf WHERE pf.ID > 0 limit 5\";\n      query = qs.newQuery(queryString);\n      final int[] num = new int[1];\n      num[0] = 0;\n      QueryObserver old = QueryObserverHolder.setInstance(new QueryObserverAdapter() {\n        public void afterIterationEvaluation(Object result) {\n          num[0] += 1;\n        }\n      });\n      result = (SelectResults) query.execute();\n      assertEquals(5, num[0]);\n      assertTrue(result instanceof SelectResults);\n      assertEquals(5, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(5, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":281,"groupId":"30093","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLimitDistinctIterEvaluatedQueryForResultBagWithProjectionAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a5/4e5ae173aaf0c335b09cb85d0fec1440765b99.src","preCode":"  public void testLimitDistinctIterEvaluatedQueryForResultBagWithProjectionAttribute() {\n    try {\n      Query query;\n      SelectResults result;\n      String queryString = \"SELECT DISTINCT pf.ID FROM /portfolios pf WHERE pf.ID > 0 limit 5\";\n      query = qs.newQuery(queryString);\n      final int[] num = new int[1];\n      num[0] = 0;\n      QueryObserver old = QueryObserverHolder.setInstance(new QueryObserverAdapter() {\n        public void afterIterationEvaluation(Object result) {\n          num[0] += 1;\n        }\n      });\n      result = (SelectResults) query.execute();\n      assertEquals(5, num[0]);\n      assertTrue(result instanceof SelectResults);\n      assertEquals(5, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(5, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":2,"curCode":"  public void testLimitDistinctIterEvaluatedQueryForResultBag() {\n    try {\n      Query query;\n      SelectResults result;\n      String queryString = \"SELECT DISTINCT * FROM /portfolios pf WHERE pf.ID > 0 limit 5\";\n      query = qs.newQuery(queryString);\n      final int[] num = new int[1];\n      num[0] = 0;\n      QueryObserver old = QueryObserverHolder.setInstance(new QueryObserverAdapter() {\n        @Override\n        public void afterIterationEvaluation(Object result) {\n          num[0] += 1;\n        }\n      });\n      result = (SelectResults) query.execute();\n      assertEquals(5, num[0]);\n      assertTrue(result instanceof SelectResults);\n      assertEquals(5, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(5, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","date":"2019-01-12 07:53:54","endLine":245,"groupId":"24023","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLimitDistinctIterEvaluatedQueryForResultBag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/df/baf92041efe3980f5ac1ac1c6d12674200afd4.src","preCode":"  public void testLimitDistinctIterEvaluatedQueryForResultBag() {\n    try {\n      Query query;\n      SelectResults result;\n      String queryString = \"SELECT DISTINCT * FROM /portfolios pf WHERE pf.ID > 0 limit 5\";\n      query = qs.newQuery(queryString);\n      final int[] num = new int[1];\n      num[0] = 0;\n      QueryObserver old = QueryObserverHolder.setInstance(new QueryObserverAdapter() {\n        public void afterIterationEvaluation(Object result) {\n          num[0] += 1;\n        }\n      });\n      result = (SelectResults) query.execute();\n      assertEquals(5, num[0]);\n      assertTrue(result instanceof SelectResults);\n      assertEquals(5, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(5, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":2,"curCode":"  public void testLimitDistinctIterEvaluatedQueryForResultBagWithProjectionAttribute() {\n    try {\n      Query query;\n      SelectResults result;\n      String queryString = \"SELECT DISTINCT pf.ID FROM /portfolios pf WHERE pf.ID > 0 limit 5\";\n      query = qs.newQuery(queryString);\n      final int[] num = new int[1];\n      num[0] = 0;\n      QueryObserver old = QueryObserverHolder.setInstance(new QueryObserverAdapter() {\n        @Override\n        public void afterIterationEvaluation(Object result) {\n          num[0] += 1;\n        }\n      });\n      result = (SelectResults) query.execute();\n      assertEquals(5, num[0]);\n      assertTrue(result instanceof SelectResults);\n      assertEquals(5, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(5, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","date":"2019-01-12 07:53:54","endLine":283,"groupId":"24023","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLimitDistinctIterEvaluatedQueryForResultBagWithProjectionAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/df/baf92041efe3980f5ac1ac1c6d12674200afd4.src","preCode":"  public void testLimitDistinctIterEvaluatedQueryForResultBagWithProjectionAttribute() {\n    try {\n      Query query;\n      SelectResults result;\n      String queryString = \"SELECT DISTINCT pf.ID FROM /portfolios pf WHERE pf.ID > 0 limit 5\";\n      query = qs.newQuery(queryString);\n      final int[] num = new int[1];\n      num[0] = 0;\n      QueryObserver old = QueryObserverHolder.setInstance(new QueryObserverAdapter() {\n        public void afterIterationEvaluation(Object result) {\n          num[0] += 1;\n        }\n      });\n      result = (SelectResults) query.execute();\n      assertEquals(5, num[0]);\n      assertTrue(result instanceof SelectResults);\n      assertEquals(5, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(5, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":3,"curCode":"  public void testLimitDistinctIterEvaluatedQueryForResultBag() {\n    try {\n      Query query;\n      SelectResults result;\n      String queryString =\n          \"SELECT DISTINCT * FROM \" + SEPARATOR + \"portfolios pf WHERE pf.ID > 0 limit 5\";\n      query = qs.newQuery(queryString);\n      final int[] num = new int[1];\n      num[0] = 0;\n      QueryObserver old = QueryObserverHolder.setInstance(new QueryObserverAdapter() {\n        @Override\n        public void afterIterationEvaluation(Object result) {\n          num[0] += 1;\n        }\n      });\n      result = (SelectResults) query.execute();\n      assertEquals(5, num[0]);\n      assertTrue(result instanceof SelectResults);\n      assertEquals(5, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(5, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","date":"2020-05-29 00:37:39","endLine":248,"groupId":"104969","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLimitDistinctIterEvaluatedQueryForResultBag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5c/3d68687a85aa18106b6bd8e8c5f712f5086270.src","preCode":"  public void testLimitDistinctIterEvaluatedQueryForResultBag() {\n    try {\n      Query query;\n      SelectResults result;\n      String queryString = \"SELECT DISTINCT * FROM /portfolios pf WHERE pf.ID > 0 limit 5\";\n      query = qs.newQuery(queryString);\n      final int[] num = new int[1];\n      num[0] = 0;\n      QueryObserver old = QueryObserverHolder.setInstance(new QueryObserverAdapter() {\n        @Override\n        public void afterIterationEvaluation(Object result) {\n          num[0] += 1;\n        }\n      });\n      result = (SelectResults) query.execute();\n      assertEquals(5, num[0]);\n      assertTrue(result instanceof SelectResults);\n      assertEquals(5, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(5, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":3,"curCode":"  public void testLimitDistinctIterEvaluatedQueryForResultBagWithProjectionAttribute() {\n    try {\n      Query query;\n      SelectResults result;\n      String queryString =\n          \"SELECT DISTINCT pf.ID FROM \" + SEPARATOR + \"portfolios pf WHERE pf.ID > 0 limit 5\";\n      query = qs.newQuery(queryString);\n      final int[] num = new int[1];\n      num[0] = 0;\n      QueryObserver old = QueryObserverHolder.setInstance(new QueryObserverAdapter() {\n        @Override\n        public void afterIterationEvaluation(Object result) {\n          num[0] += 1;\n        }\n      });\n      result = (SelectResults) query.execute();\n      assertEquals(5, num[0]);\n      assertTrue(result instanceof SelectResults);\n      assertEquals(5, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(5, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","date":"2020-05-29 00:37:39","endLine":287,"groupId":"104969","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLimitDistinctIterEvaluatedQueryForResultBagWithProjectionAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5c/3d68687a85aa18106b6bd8e8c5f712f5086270.src","preCode":"  public void testLimitDistinctIterEvaluatedQueryForResultBagWithProjectionAttribute() {\n    try {\n      Query query;\n      SelectResults result;\n      String queryString = \"SELECT DISTINCT pf.ID FROM /portfolios pf WHERE pf.ID > 0 limit 5\";\n      query = qs.newQuery(queryString);\n      final int[] num = new int[1];\n      num[0] = 0;\n      QueryObserver old = QueryObserverHolder.setInstance(new QueryObserverAdapter() {\n        @Override\n        public void afterIterationEvaluation(Object result) {\n          num[0] += 1;\n        }\n      });\n      result = (SelectResults) query.execute();\n      assertEquals(5, num[0]);\n      assertTrue(result instanceof SelectResults);\n      assertEquals(5, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(5, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
