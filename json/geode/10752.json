[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testGetDurableCqsFromServer() {\n    disconnectAllFromDS();\n\n    final String regionName = \"testGetAllDurableCqsFromServer\";\n    final String cq1Name = \"testCq1\";\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client1 = host.getVM(1);\n    VM client2 = host.getVM(2);\n\n    \r\n    final int server1Port = ((Integer) server\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    client1.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client1.getHost()), server1Port), regionName));\n\n    \r\n    client2.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client2.getHost()), server1Port), regionName));\n\n    createClient1CqsAndDurableCqs(client1, regionName);\n    createClient2CqsAndDurableCqs(client2, regionName);\n\n    client2.invoke(new CacheSerializableRunnable(\"check durable cqs for client 2\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(4, list.size());\n        assertTrue(list.contains(\"client2DCQ1\"));\n        assertTrue(list.contains(\"client2DCQ2\"));\n        assertTrue(list.contains(\"client2DCQ3\"));\n        assertTrue(list.contains(\"client2DCQ4\"));\n      }\n    });\n\n    client1.invoke(new CacheSerializableRunnable(\"check durable cqs for client 1\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(2, list.size());\n        assertTrue(list.contains(\"client1DCQ1\"));\n        assertTrue(list.contains(\"client1DCQ2\"));\n      }\n    });\n\n    client1.invoke(() -> CacheServerTestUtil.closeCache());\n    client2.invoke(() -> CacheServerTestUtil.closeCache());\n    server.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","date":"2018-07-18 03:54:18","endLine":1155,"groupId":"12948","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDurableCqsFromServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/44/e63605008e737dd7ba7324cb2c06266dd9d013.src","preCode":"  public void testGetDurableCqsFromServer() {\n    disconnectAllFromDS();\n\n    final String regionName = \"testGetAllDurableCqsFromServer\";\n    final String cq1Name = \"testCq1\";\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client1 = host.getVM(1);\n    VM client2 = host.getVM(2);\n\n    \r\n    final int server1Port = ((Integer) server\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    client1.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client1.getHost()), server1Port), regionName));\n\n    \r\n    client2.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client2.getHost()), server1Port), regionName));\n\n    createClient1CqsAndDurableCqs(client1, regionName);\n    createClient2CqsAndDurableCqs(client2, regionName);\n\n    client2.invoke(new CacheSerializableRunnable(\"check durable cqs for client 2\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(4, list.size());\n        assertTrue(list.contains(\"client2DCQ1\"));\n        assertTrue(list.contains(\"client2DCQ2\"));\n        assertTrue(list.contains(\"client2DCQ3\"));\n        assertTrue(list.contains(\"client2DCQ4\"));\n      }\n    });\n\n    client1.invoke(new CacheSerializableRunnable(\"check durable cqs for client 1\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(2, list.size());\n        assertTrue(list.contains(\"client1DCQ1\"));\n        assertTrue(list.contains(\"client1DCQ2\"));\n      }\n    });\n\n    client1.invoke(() -> CacheServerTestUtil.closeCache());\n    client2.invoke(() -> CacheServerTestUtil.closeCache());\n    server.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1092,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testGetDurableCqsFromServerCycleClientsAndMoreCqs() {\n    final String regionName = \"testGetAllDurableCqsFromServerCycleClients\";\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client1 = host.getVM(1);\n    VM client2 = host.getVM(2);\n    int timeout = 60000;\n    \r\n    final int server1Port = ((Integer) server\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    client1.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client1.getHost()), server1Port), regionName,\n        getDurableClientProperties(\"client1_dc\", timeout)));\n\n    \r\n    client2.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client2.getHost()), server1Port), regionName,\n        getDurableClientProperties(\"client2_dc\", timeout)));\n\n    \r\n    createClient1CqsAndDurableCqs(client1, regionName);\n    createClient2CqsAndDurableCqs(client2, regionName);\n\n    cycleDurableClient(client1, \"client1_dc\", server1Port, regionName, timeout);\n    cycleDurableClient(client2, \"client2_dc\", server1Port, regionName, timeout);\n\n    client1.invoke(new CacheSerializableRunnable(\"Register more cq for client 1\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        CqAttributesFactory cqAf = new CqAttributesFactory();\n        CqAttributes attributes = cqAf.create();\n        try {\n          queryService.newCq(\"client1MoreDCQ1\", \"Select * From /\" + regionName + \" where id = 1\",\n              attributes, true).execute();\n          queryService.newCq(\"client1MoreDCQ2\", \"Select * From /\" + regionName + \" where id = 10\",\n              attributes, true).execute();\n          queryService.newCq(\"client1MoreNoDC1\", \"Select * From /\" + regionName, attributes, false)\n              .execute();\n          queryService.newCq(\"client1MoreNoDC2\", \"Select * From /\" + regionName + \" where id = 3\",\n              attributes, false).execute();\n        } catch (RegionNotFoundException e) {\n          fail(\"failed\", e);\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        } catch (CqExistsException e) {\n          fail(\"failed\", e);\n        }\n      }\n    });\n\n    client2.invoke(new CacheSerializableRunnable(\"Register more cq for client 2\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        CqAttributesFactory cqAf = new CqAttributesFactory();\n        CqAttributes attributes = cqAf.create();\n        try {\n          queryService.newCq(\"client2MoreDCQ1\", \"Select * From /\" + regionName + \" where id = 1\",\n              attributes, true).execute();\n          queryService.newCq(\"client2MoreDCQ2\", \"Select * From /\" + regionName + \" where id = 10\",\n              attributes, true).execute();\n          queryService.newCq(\"client2MoreDCQ3\", \"Select * From /\" + regionName, attributes, true)\n              .execute();\n          queryService.newCq(\"client2MoreDCQ4\", \"Select * From /\" + regionName + \" where id = 3\",\n              attributes, true).execute();\n        } catch (RegionNotFoundException e) {\n          fail(\"failed\", e);\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        } catch (CqExistsException e) {\n          fail(\"failed\", e);\n        }\n      }\n    });\n\n    \r\n    cycleDurableClient(client1, \"client1_dc\", server1Port, regionName, timeout);\n    cycleDurableClient(client2, \"client2_dc\", server1Port, regionName, timeout);\n\n    client2.invoke(new CacheSerializableRunnable(\"check durable cqs for client 2\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(8, list.size());\n        assertTrue(list.contains(\"client2DCQ1\"));\n        assertTrue(list.contains(\"client2DCQ2\"));\n        assertTrue(list.contains(\"client2DCQ3\"));\n        assertTrue(list.contains(\"client2DCQ4\"));\n        assertTrue(list.contains(\"client2MoreDCQ1\"));\n        assertTrue(list.contains(\"client2MoreDCQ2\"));\n        assertTrue(list.contains(\"client2MoreDCQ3\"));\n        assertTrue(list.contains(\"client2MoreDCQ4\"));\n      }\n    });\n\n    client1.invoke(new CacheSerializableRunnable(\"check durable cqs for client 1\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(4, list.size());\n        assertTrue(list.contains(\"client1DCQ1\"));\n        assertTrue(list.contains(\"client1DCQ2\"));\n        assertTrue(list.contains(\"client1MoreDCQ1\"));\n        assertTrue(list.contains(\"client1MoreDCQ2\"));\n      }\n    });\n\n    client1.invoke(() -> CacheServerTestUtil.closeCache());\n    client2.invoke(() -> CacheServerTestUtil.closeCache());\n    server.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","date":"2018-07-18 03:54:18","endLine":1356,"groupId":"31710","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetDurableCqsFromServerCycleClientsAndMoreCqs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/44/e63605008e737dd7ba7324cb2c06266dd9d013.src","preCode":"  public void testGetDurableCqsFromServerCycleClientsAndMoreCqs() {\n    final String regionName = \"testGetAllDurableCqsFromServerCycleClients\";\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client1 = host.getVM(1);\n    VM client2 = host.getVM(2);\n    int timeout = 60000;\n    \r\n    final int server1Port = ((Integer) server\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    client1.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client1.getHost()), server1Port), regionName,\n        getDurableClientProperties(\"client1_dc\", timeout)));\n\n    \r\n    client2.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client2.getHost()), server1Port), regionName,\n        getDurableClientProperties(\"client2_dc\", timeout)));\n\n    \r\n    createClient1CqsAndDurableCqs(client1, regionName);\n    createClient2CqsAndDurableCqs(client2, regionName);\n\n    cycleDurableClient(client1, \"client1_dc\", server1Port, regionName, timeout);\n    cycleDurableClient(client2, \"client2_dc\", server1Port, regionName, timeout);\n\n    client1.invoke(new CacheSerializableRunnable(\"Register more cq for client 1\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        CqAttributesFactory cqAf = new CqAttributesFactory();\n        CqAttributes attributes = cqAf.create();\n        try {\n          queryService.newCq(\"client1MoreDCQ1\", \"Select * From /\" + regionName + \" where id = 1\",\n              attributes, true).execute();\n          queryService.newCq(\"client1MoreDCQ2\", \"Select * From /\" + regionName + \" where id = 10\",\n              attributes, true).execute();\n          queryService.newCq(\"client1MoreNoDC1\", \"Select * From /\" + regionName, attributes, false)\n              .execute();\n          queryService.newCq(\"client1MoreNoDC2\", \"Select * From /\" + regionName + \" where id = 3\",\n              attributes, false).execute();\n        } catch (RegionNotFoundException e) {\n          fail(\"failed\", e);\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        } catch (CqExistsException e) {\n          fail(\"failed\", e);\n        }\n      }\n    });\n\n    client2.invoke(new CacheSerializableRunnable(\"Register more cq for client 2\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        CqAttributesFactory cqAf = new CqAttributesFactory();\n        CqAttributes attributes = cqAf.create();\n        try {\n          queryService.newCq(\"client2MoreDCQ1\", \"Select * From /\" + regionName + \" where id = 1\",\n              attributes, true).execute();\n          queryService.newCq(\"client2MoreDCQ2\", \"Select * From /\" + regionName + \" where id = 10\",\n              attributes, true).execute();\n          queryService.newCq(\"client2MoreDCQ3\", \"Select * From /\" + regionName, attributes, true)\n              .execute();\n          queryService.newCq(\"client2MoreDCQ4\", \"Select * From /\" + regionName + \" where id = 3\",\n              attributes, true).execute();\n        } catch (RegionNotFoundException e) {\n          fail(\"failed\", e);\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        } catch (CqExistsException e) {\n          fail(\"failed\", e);\n        }\n      }\n    });\n\n    \r\n    cycleDurableClient(client1, \"client1_dc\", server1Port, regionName, timeout);\n    cycleDurableClient(client2, \"client2_dc\", server1Port, regionName, timeout);\n\n    client2.invoke(new CacheSerializableRunnable(\"check durable cqs for client 2\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(8, list.size());\n        assertTrue(list.contains(\"client2DCQ1\"));\n        assertTrue(list.contains(\"client2DCQ2\"));\n        assertTrue(list.contains(\"client2DCQ3\"));\n        assertTrue(list.contains(\"client2DCQ4\"));\n        assertTrue(list.contains(\"client2MoreDCQ1\"));\n        assertTrue(list.contains(\"client2MoreDCQ2\"));\n        assertTrue(list.contains(\"client2MoreDCQ3\"));\n        assertTrue(list.contains(\"client2MoreDCQ4\"));\n      }\n    });\n\n    client1.invoke(new CacheSerializableRunnable(\"check durable cqs for client 1\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(4, list.size());\n        assertTrue(list.contains(\"client1DCQ1\"));\n        assertTrue(list.contains(\"client1DCQ2\"));\n        assertTrue(list.contains(\"client1MoreDCQ1\"));\n        assertTrue(list.contains(\"client1MoreDCQ2\"));\n      }\n    });\n\n    client1.invoke(() -> CacheServerTestUtil.closeCache());\n    client2.invoke(() -> CacheServerTestUtil.closeCache());\n    server.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1228,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public void testGetDurableCqsFromServer() {\n    disconnectAllFromDS();\n\n    final String regionName = \"testGetAllDurableCqsFromServer\";\n    final String cq1Name = \"testCq1\";\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client1 = host.getVM(1);\n    VM client2 = host.getVM(2);\n\n    \r\n    final int server1Port = ((Integer) server\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    client1.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client1.getHost()), server1Port), regionName));\n\n    \r\n    client2.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client2.getHost()), server1Port), regionName));\n\n    createClient1CqsAndDurableCqs(client1, regionName);\n    createClient2CqsAndDurableCqs(client2, regionName);\n\n    client2.invoke(new CacheSerializableRunnable(\"check durable cqs for client 2\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(4, list.size());\n        assertTrue(list.contains(\"client2DCQ1\"));\n        assertTrue(list.contains(\"client2DCQ2\"));\n        assertTrue(list.contains(\"client2DCQ3\"));\n        assertTrue(list.contains(\"client2DCQ4\"));\n      }\n    });\n\n    client1.invoke(new CacheSerializableRunnable(\"check durable cqs for client 1\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(2, list.size());\n        assertTrue(list.contains(\"client1DCQ1\"));\n        assertTrue(list.contains(\"client1DCQ2\"));\n      }\n    });\n\n    client1.invoke(() -> CacheServerTestUtil.closeCache());\n    client2.invoke(() -> CacheServerTestUtil.closeCache());\n    server.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","date":"2018-07-18 03:54:18","endLine":1155,"groupId":"10752","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDurableCqsFromServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/44/e63605008e737dd7ba7324cb2c06266dd9d013.src","preCode":"  public void testGetDurableCqsFromServer() {\n    disconnectAllFromDS();\n\n    final String regionName = \"testGetAllDurableCqsFromServer\";\n    final String cq1Name = \"testCq1\";\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client1 = host.getVM(1);\n    VM client2 = host.getVM(2);\n\n    \r\n    final int server1Port = ((Integer) server\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    client1.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client1.getHost()), server1Port), regionName));\n\n    \r\n    client2.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client2.getHost()), server1Port), regionName));\n\n    createClient1CqsAndDurableCqs(client1, regionName);\n    createClient2CqsAndDurableCqs(client2, regionName);\n\n    client2.invoke(new CacheSerializableRunnable(\"check durable cqs for client 2\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(4, list.size());\n        assertTrue(list.contains(\"client2DCQ1\"));\n        assertTrue(list.contains(\"client2DCQ2\"));\n        assertTrue(list.contains(\"client2DCQ3\"));\n        assertTrue(list.contains(\"client2DCQ4\"));\n      }\n    });\n\n    client1.invoke(new CacheSerializableRunnable(\"check durable cqs for client 1\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(2, list.size());\n        assertTrue(list.contains(\"client1DCQ1\"));\n        assertTrue(list.contains(\"client1DCQ2\"));\n      }\n    });\n\n    client1.invoke(() -> CacheServerTestUtil.closeCache());\n    client2.invoke(() -> CacheServerTestUtil.closeCache());\n    server.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1092,"status":"N"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testGetDurableCqsFromServerCycleClientsAndMoreCqs() {\n    final String regionName = \"testGetAllDurableCqsFromServerCycleClients\";\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client1 = host.getVM(1);\n    VM client2 = host.getVM(2);\n    int timeout = 60000;\n    \r\n    final int server1Port = ((Integer) server\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    client1.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client1.getHost()), server1Port), regionName,\n        getDurableClientProperties(\"client1_dc\", timeout)));\n\n    \r\n    client2.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client2.getHost()), server1Port), regionName,\n        getDurableClientProperties(\"client2_dc\", timeout)));\n\n    \r\n    createClient1CqsAndDurableCqs(client1, regionName);\n    createClient2CqsAndDurableCqs(client2, regionName);\n\n    cycleDurableClient(client1, \"client1_dc\", server1Port, regionName, timeout);\n    cycleDurableClient(client2, \"client2_dc\", server1Port, regionName, timeout);\n\n    client1.invoke(new CacheSerializableRunnable(\"Register more cq for client 1\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        CqAttributesFactory cqAf = new CqAttributesFactory();\n        CqAttributes attributes = cqAf.create();\n        try {\n          queryService\n              .newCq(\"client1MoreDCQ1\", \"Select * From \" + SEPARATOR + regionName + \" where id = 1\",\n                  attributes, true)\n              .execute();\n          queryService.newCq(\"client1MoreDCQ2\",\n              \"Select * From \" + SEPARATOR + regionName + \" where id = 10\",\n              attributes, true).execute();\n          queryService.newCq(\"client1MoreNoDC1\", \"Select * From \" + SEPARATOR + regionName,\n              attributes, false)\n              .execute();\n          queryService.newCq(\"client1MoreNoDC2\",\n              \"Select * From \" + SEPARATOR + regionName + \" where id = 3\",\n              attributes, false).execute();\n        } catch (RegionNotFoundException e) {\n          fail(\"failed\", e);\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        } catch (CqExistsException e) {\n          fail(\"failed\", e);\n        }\n      }\n    });\n\n    client2.invoke(new CacheSerializableRunnable(\"Register more cq for client 2\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        CqAttributesFactory cqAf = new CqAttributesFactory();\n        CqAttributes attributes = cqAf.create();\n        try {\n          queryService\n              .newCq(\"client2MoreDCQ1\", \"Select * From \" + SEPARATOR + regionName + \" where id = 1\",\n                  attributes, true)\n              .execute();\n          queryService.newCq(\"client2MoreDCQ2\",\n              \"Select * From \" + SEPARATOR + regionName + \" where id = 10\",\n              attributes, true).execute();\n          queryService\n              .newCq(\"client2MoreDCQ3\", \"Select * From \" + SEPARATOR + regionName, attributes, true)\n              .execute();\n          queryService\n              .newCq(\"client2MoreDCQ4\", \"Select * From \" + SEPARATOR + regionName + \" where id = 3\",\n                  attributes, true)\n              .execute();\n        } catch (RegionNotFoundException e) {\n          fail(\"failed\", e);\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        } catch (CqExistsException e) {\n          fail(\"failed\", e);\n        }\n      }\n    });\n\n    \r\n    cycleDurableClient(client1, \"client1_dc\", server1Port, regionName, timeout);\n    cycleDurableClient(client2, \"client2_dc\", server1Port, regionName, timeout);\n\n    client2.invoke(new CacheSerializableRunnable(\"check durable cqs for client 2\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(8, list.size());\n        assertTrue(list.contains(\"client2DCQ1\"));\n        assertTrue(list.contains(\"client2DCQ2\"));\n        assertTrue(list.contains(\"client2DCQ3\"));\n        assertTrue(list.contains(\"client2DCQ4\"));\n        assertTrue(list.contains(\"client2MoreDCQ1\"));\n        assertTrue(list.contains(\"client2MoreDCQ2\"));\n        assertTrue(list.contains(\"client2MoreDCQ3\"));\n        assertTrue(list.contains(\"client2MoreDCQ4\"));\n      }\n    });\n\n    client1.invoke(new CacheSerializableRunnable(\"check durable cqs for client 1\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(4, list.size());\n        assertTrue(list.contains(\"client1DCQ1\"));\n        assertTrue(list.contains(\"client1DCQ2\"));\n        assertTrue(list.contains(\"client1MoreDCQ1\"));\n        assertTrue(list.contains(\"client1MoreDCQ2\"));\n      }\n    });\n\n    client1.invoke(() -> CacheServerTestUtil.closeCache());\n    client2.invoke(() -> CacheServerTestUtil.closeCache());\n    server.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","date":"2020-05-29 00:37:39","endLine":1384,"groupId":"10752","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testGetDurableCqsFromServerCycleClientsAndMoreCqs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f2/1e4714029bec9005d8d0ed6db3eff2055d5ae3.src","preCode":"  public void testGetDurableCqsFromServerCycleClientsAndMoreCqs() {\n    final String regionName = \"testGetAllDurableCqsFromServerCycleClients\";\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client1 = host.getVM(1);\n    VM client2 = host.getVM(2);\n    int timeout = 60000;\n    \r\n    final int server1Port = ((Integer) server\n        .invoke(() -> CacheServerTestUtil.createCacheServer(regionName, new Boolean(true))))\n            .intValue();\n\n    \r\n    client1.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client1.getHost()), server1Port), regionName,\n        getDurableClientProperties(\"client1_dc\", timeout)));\n\n    \r\n    client2.invoke(() -> CacheServerTestUtil.createClientCache(\n        getClientPool(NetworkUtils.getServerHostName(client2.getHost()), server1Port), regionName,\n        getDurableClientProperties(\"client2_dc\", timeout)));\n\n    \r\n    createClient1CqsAndDurableCqs(client1, regionName);\n    createClient2CqsAndDurableCqs(client2, regionName);\n\n    cycleDurableClient(client1, \"client1_dc\", server1Port, regionName, timeout);\n    cycleDurableClient(client2, \"client2_dc\", server1Port, regionName, timeout);\n\n    client1.invoke(new CacheSerializableRunnable(\"Register more cq for client 1\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        CqAttributesFactory cqAf = new CqAttributesFactory();\n        CqAttributes attributes = cqAf.create();\n        try {\n          queryService.newCq(\"client1MoreDCQ1\", \"Select * From /\" + regionName + \" where id = 1\",\n              attributes, true).execute();\n          queryService.newCq(\"client1MoreDCQ2\", \"Select * From /\" + regionName + \" where id = 10\",\n              attributes, true).execute();\n          queryService.newCq(\"client1MoreNoDC1\", \"Select * From /\" + regionName, attributes, false)\n              .execute();\n          queryService.newCq(\"client1MoreNoDC2\", \"Select * From /\" + regionName + \" where id = 3\",\n              attributes, false).execute();\n        } catch (RegionNotFoundException e) {\n          fail(\"failed\", e);\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        } catch (CqExistsException e) {\n          fail(\"failed\", e);\n        }\n      }\n    });\n\n    client2.invoke(new CacheSerializableRunnable(\"Register more cq for client 2\") {\n      @Override\n      public void run2() throws CacheException {\n        \r\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        CqAttributesFactory cqAf = new CqAttributesFactory();\n        CqAttributes attributes = cqAf.create();\n        try {\n          queryService.newCq(\"client2MoreDCQ1\", \"Select * From /\" + regionName + \" where id = 1\",\n              attributes, true).execute();\n          queryService.newCq(\"client2MoreDCQ2\", \"Select * From /\" + regionName + \" where id = 10\",\n              attributes, true).execute();\n          queryService.newCq(\"client2MoreDCQ3\", \"Select * From /\" + regionName, attributes, true)\n              .execute();\n          queryService.newCq(\"client2MoreDCQ4\", \"Select * From /\" + regionName + \" where id = 3\",\n              attributes, true).execute();\n        } catch (RegionNotFoundException e) {\n          fail(\"failed\", e);\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        } catch (CqExistsException e) {\n          fail(\"failed\", e);\n        }\n      }\n    });\n\n    \r\n    cycleDurableClient(client1, \"client1_dc\", server1Port, regionName, timeout);\n    cycleDurableClient(client2, \"client2_dc\", server1Port, regionName, timeout);\n\n    client2.invoke(new CacheSerializableRunnable(\"check durable cqs for client 2\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(8, list.size());\n        assertTrue(list.contains(\"client2DCQ1\"));\n        assertTrue(list.contains(\"client2DCQ2\"));\n        assertTrue(list.contains(\"client2DCQ3\"));\n        assertTrue(list.contains(\"client2DCQ4\"));\n        assertTrue(list.contains(\"client2MoreDCQ1\"));\n        assertTrue(list.contains(\"client2MoreDCQ2\"));\n        assertTrue(list.contains(\"client2MoreDCQ3\"));\n        assertTrue(list.contains(\"client2MoreDCQ4\"));\n      }\n    });\n\n    client1.invoke(new CacheSerializableRunnable(\"check durable cqs for client 1\") {\n      @Override\n      public void run2() throws CacheException {\n        QueryService queryService = CacheServerTestUtil.getCache().getQueryService();\n        List<String> list = null;\n        try {\n          list = queryService.getAllDurableCqsFromServer();\n        } catch (CqException e) {\n          fail(\"failed\", e);\n        }\n        assertEquals(4, list.size());\n        assertTrue(list.contains(\"client1DCQ1\"));\n        assertTrue(list.contains(\"client1DCQ2\"));\n        assertTrue(list.contains(\"client1MoreDCQ1\"));\n        assertTrue(list.contains(\"client1MoreDCQ2\"));\n      }\n    });\n\n    client1.invoke(() -> CacheServerTestUtil.closeCache());\n    client2.invoke(() -> CacheServerTestUtil.closeCache());\n    server.invoke(() -> CacheServerTestUtil.closeCache());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqDataUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1245,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
