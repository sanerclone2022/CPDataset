[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testSizeAllocation() {\n    \r\n    System.setProperty(OffHeapStorage.STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY, \"true\");\n    GemFireCacheImpl gfc = createCache();\n    try {\n      MemoryAllocator ma = gfc.getOffHeapStore();\n      assertNotNull(ma);\n      final long offHeapSize = ma.getFreeMemory();\n      assertEquals(0, ma.getUsedMemory());\n      StoredObject mc1 = ma.allocate(64);\n      assertEquals(64 + perObjectOverhead(), ma.getUsedMemory());\n      assertEquals(offHeapSize - (64 + perObjectOverhead()), ma.getFreeMemory());\n      mc1.release();\n      assertEquals(offHeapSize, ma.getFreeMemory());\n      assertEquals(0, ma.getUsedMemory());\n      \r\n      \r\n      \r\n      \r\n      try {\n        ma.allocate(1024 * 1024 * 20);\n        fail(\"Expected an out of heap exception\");\n      } catch (OutOfOffHeapMemoryException expected) {\n      }\n      assertEquals(0, ma.getUsedMemory());\n      assertFalse(gfc.isClosed());\n    } finally {\n      System.clearProperty(OffHeapStorage.STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY);\n      closeCache(gfc, false);\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":146,"groupId":"4981","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSizeAllocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/cb/c2ddccd4eb65b16613371f546d8cc994d2f566.src","preCode":"  public void testSizeAllocation() {\n    \r\n    System.setProperty(OffHeapStorage.STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY, \"true\");\n    GemFireCacheImpl gfc = createCache();\n    try {\n      MemoryAllocator ma = gfc.getOffHeapStore();\n      assertNotNull(ma);\n      final long offHeapSize = ma.getFreeMemory();\n      assertEquals(0, ma.getUsedMemory());\n      StoredObject mc1 = ma.allocate(64);\n      assertEquals(64 + perObjectOverhead(), ma.getUsedMemory());\n      assertEquals(offHeapSize - (64 + perObjectOverhead()), ma.getFreeMemory());\n      mc1.release();\n      assertEquals(offHeapSize, ma.getFreeMemory());\n      assertEquals(0, ma.getUsedMemory());\n      \r\n      \r\n      \r\n      \r\n      try {\n        ma.allocate(1024 * 1024 * 20);\n        fail(\"Expected an out of heap exception\");\n      } catch (OutOfOffHeapMemoryException expected) {\n      }\n      assertEquals(0, ma.getUsedMemory());\n      assertFalse(gfc.isClosed());\n    } finally {\n      System.clearProperty(OffHeapStorage.STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY);\n      closeCache(gfc, false);\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/offheap/OffHeapRegionBase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void keep_testOutOfOffHeapMemoryErrorClosesCache() {\n    \r\n    final GemFireCacheImpl gfc = createCache();\n    try {\n      MemoryAllocator ma = gfc.getOffHeapStore();\n      assertNotNull(ma);\n      final long offHeapSize = ma.getFreeMemory();\n      assertEquals(0, ma.getUsedMemory());\n      StoredObject mc1 = ma.allocate(64);\n      assertEquals(64 + perObjectOverhead(), ma.getUsedMemory());\n      assertEquals(offHeapSize - (64 + perObjectOverhead()), ma.getFreeMemory());\n      mc1.release();\n      assertEquals(offHeapSize, ma.getFreeMemory());\n      assertEquals(0, ma.getUsedMemory());\n      \r\n      try {\n        ma.allocate(1024 * 1024 * 10);\n        fail(\"Expected an out of heap exception\");\n      } catch (OutOfOffHeapMemoryException expected) {\n        \r\n      }\n      assertEquals(0, ma.getUsedMemory());\n\n      final WaitCriterion waitForDisconnect = new WaitCriterion() {\n        public boolean done() {\n          return gfc.isClosed();\n        }\n\n        public String description() {\n          return \"Waiting for disconnect to complete\";\n        }\n      };\n      org.apache.geode.test.dunit.Wait.waitForCriterion(waitForDisconnect, 10 * 1000, 100, true);\n\n      assertTrue(gfc.isClosed());\n    } finally {\n      closeCache(gfc, false);\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":186,"groupId":"4981","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"keep_testOutOfOffHeapMemoryErrorClosesCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/cb/c2ddccd4eb65b16613371f546d8cc994d2f566.src","preCode":"  public void keep_testOutOfOffHeapMemoryErrorClosesCache() {\n    \r\n    final GemFireCacheImpl gfc = createCache();\n    try {\n      MemoryAllocator ma = gfc.getOffHeapStore();\n      assertNotNull(ma);\n      final long offHeapSize = ma.getFreeMemory();\n      assertEquals(0, ma.getUsedMemory());\n      StoredObject mc1 = ma.allocate(64);\n      assertEquals(64 + perObjectOverhead(), ma.getUsedMemory());\n      assertEquals(offHeapSize - (64 + perObjectOverhead()), ma.getFreeMemory());\n      mc1.release();\n      assertEquals(offHeapSize, ma.getFreeMemory());\n      assertEquals(0, ma.getUsedMemory());\n      \r\n      try {\n        ma.allocate(1024 * 1024 * 10);\n        fail(\"Expected an out of heap exception\");\n      } catch (OutOfOffHeapMemoryException expected) {\n        \r\n      }\n      assertEquals(0, ma.getUsedMemory());\n\n      final WaitCriterion waitForDisconnect = new WaitCriterion() {\n        public boolean done() {\n          return gfc.isClosed();\n        }\n\n        public String description() {\n          return \"Waiting for disconnect to complete\";\n        }\n      };\n      org.apache.geode.test.dunit.Wait.waitForCriterion(waitForDisconnect, 10 * 1000, 100, true);\n\n      assertTrue(gfc.isClosed());\n    } finally {\n      closeCache(gfc, false);\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/offheap/OffHeapRegionBase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-10-06 04:56:13","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public void testSizeAllocation() {\n    \r\n    System.setProperty(OffHeapStorage.STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY, \"true\");\n    GemFireCacheImpl gfc = createCache();\n    try {\n      MemoryAllocator ma = gfc.getOffHeapStore();\n      assertNotNull(ma);\n      final long offHeapSize = ma.getFreeMemory();\n      assertEquals(0, ma.getUsedMemory());\n      StoredObject mc1 = ma.allocate(64);\n      assertEquals(64 + perObjectOverhead(), ma.getUsedMemory());\n      assertEquals(offHeapSize - (64 + perObjectOverhead()), ma.getFreeMemory());\n      mc1.release();\n      assertEquals(offHeapSize, ma.getFreeMemory());\n      assertEquals(0, ma.getUsedMemory());\n      \r\n      \r\n      \r\n      \r\n      try {\n        ma.allocate(1024 * 1024 * 20);\n        fail(\"Expected an out of heap exception\");\n      } catch (OutOfOffHeapMemoryException expected) {\n      }\n      assertEquals(0, ma.getUsedMemory());\n      assertFalse(gfc.isClosed());\n    } finally {\n      System.clearProperty(OffHeapStorage.STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY);\n      closeCache(gfc, false);\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":146,"groupId":"4981","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSizeAllocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/cb/c2ddccd4eb65b16613371f546d8cc994d2f566.src","preCode":"  public void testSizeAllocation() {\n    \r\n    System.setProperty(OffHeapStorage.STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY, \"true\");\n    GemFireCacheImpl gfc = createCache();\n    try {\n      MemoryAllocator ma = gfc.getOffHeapStore();\n      assertNotNull(ma);\n      final long offHeapSize = ma.getFreeMemory();\n      assertEquals(0, ma.getUsedMemory());\n      StoredObject mc1 = ma.allocate(64);\n      assertEquals(64 + perObjectOverhead(), ma.getUsedMemory());\n      assertEquals(offHeapSize - (64 + perObjectOverhead()), ma.getFreeMemory());\n      mc1.release();\n      assertEquals(offHeapSize, ma.getFreeMemory());\n      assertEquals(0, ma.getUsedMemory());\n      \r\n      \r\n      \r\n      \r\n      try {\n        ma.allocate(1024 * 1024 * 20);\n        fail(\"Expected an out of heap exception\");\n      } catch (OutOfOffHeapMemoryException expected) {\n      }\n      assertEquals(0, ma.getUsedMemory());\n      assertFalse(gfc.isClosed());\n    } finally {\n      System.clearProperty(OffHeapStorage.STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY);\n      closeCache(gfc, false);\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/offheap/OffHeapRegionBase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"N"},{"authorDate":"2018-10-06 04:56:13","commitOrder":2,"curCode":"  public void keep_testOutOfOffHeapMemoryErrorClosesCache() {\n    \r\n    final GemFireCacheImpl gfc = createCache();\n    try {\n      MemoryAllocator ma = gfc.getOffHeapStore();\n      assertNotNull(ma);\n      final long offHeapSize = ma.getFreeMemory();\n      assertEquals(0, ma.getUsedMemory());\n      StoredObject mc1 = ma.allocate(64);\n      assertEquals(64 + perObjectOverhead(), ma.getUsedMemory());\n      assertEquals(offHeapSize - (64 + perObjectOverhead()), ma.getFreeMemory());\n      mc1.release();\n      assertEquals(offHeapSize, ma.getFreeMemory());\n      assertEquals(0, ma.getUsedMemory());\n      \r\n      try {\n        ma.allocate(1024 * 1024 * 10);\n        fail(\"Expected an out of heap exception\");\n      } catch (OutOfOffHeapMemoryException expected) {\n        \r\n      }\n      assertEquals(0, ma.getUsedMemory());\n\n      final WaitCriterion waitForDisconnect = new WaitCriterion() {\n        public boolean done() {\n          return gfc.isClosed();\n        }\n\n        public String description() {\n          return \"Waiting for disconnect to complete\";\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(waitForDisconnect);\n\n      assertTrue(gfc.isClosed());\n    } finally {\n      closeCache(gfc, false);\n    }\n  }\n","date":"2018-10-19 08:01:02","endLine":186,"groupId":"4981","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"keep_testOutOfOffHeapMemoryErrorClosesCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/fa/523bfb1fb1081d607b68529d4693b50fc3a2b4.src","preCode":"  public void keep_testOutOfOffHeapMemoryErrorClosesCache() {\n    \r\n    final GemFireCacheImpl gfc = createCache();\n    try {\n      MemoryAllocator ma = gfc.getOffHeapStore();\n      assertNotNull(ma);\n      final long offHeapSize = ma.getFreeMemory();\n      assertEquals(0, ma.getUsedMemory());\n      StoredObject mc1 = ma.allocate(64);\n      assertEquals(64 + perObjectOverhead(), ma.getUsedMemory());\n      assertEquals(offHeapSize - (64 + perObjectOverhead()), ma.getFreeMemory());\n      mc1.release();\n      assertEquals(offHeapSize, ma.getFreeMemory());\n      assertEquals(0, ma.getUsedMemory());\n      \r\n      try {\n        ma.allocate(1024 * 1024 * 10);\n        fail(\"Expected an out of heap exception\");\n      } catch (OutOfOffHeapMemoryException expected) {\n        \r\n      }\n      assertEquals(0, ma.getUsedMemory());\n\n      final WaitCriterion waitForDisconnect = new WaitCriterion() {\n        public boolean done() {\n          return gfc.isClosed();\n        }\n\n        public String description() {\n          return \"Waiting for disconnect to complete\";\n        }\n      };\n      org.apache.geode.test.dunit.Wait.waitForCriterion(waitForDisconnect, 10 * 1000, 100, true);\n\n      assertTrue(gfc.isClosed());\n    } finally {\n      closeCache(gfc, false);\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/offheap/OffHeapRegionBase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"8fa6ef6205938767d0106810daca1f91ee8bb3a8","commitMessage":"@@@GEODE-5424: Replacing calls to waitForCriterion with Awaitility\n\nReplacing all of the calls to waitForCriterion with awaitility instead. \nto use a standard timeout.\n","date":"2018-10-19 08:01:02","modifiedFileCount":"132","status":"M","submitter":"Dan Smith"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":3,"curCode":"  public void testSizeAllocation() {\n    \r\n    System.setProperty(OffHeapStorage.STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY, \"true\");\n    GemFireCacheImpl gfc = createCache();\n    try {\n      MemoryAllocator ma = gfc.getOffHeapStore();\n      assertNotNull(ma);\n      final long offHeapSize = ma.getFreeMemory();\n      assertEquals(0, ma.getUsedMemory());\n      StoredObject mc1 = ma.allocate(64);\n      assertEquals(64 + perObjectOverhead(), ma.getUsedMemory());\n      assertEquals(offHeapSize - (64 + perObjectOverhead()), ma.getFreeMemory());\n      mc1.release();\n      assertEquals(offHeapSize, ma.getFreeMemory());\n      assertEquals(0, ma.getUsedMemory());\n      \r\n      \r\n      \r\n      \r\n      try {\n        ma.allocate(1024 * 1024 * 20);\n        fail(\"Expected an out of heap exception\");\n      } catch (OutOfOffHeapMemoryException expected) {\n      }\n      assertEquals(0, ma.getUsedMemory());\n      assertFalse(gfc.isClosed());\n    } finally {\n      System.clearProperty(OffHeapStorage.STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY);\n      closeCache(gfc, false);\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":146,"groupId":"104150","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSizeAllocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/cb/c2ddccd4eb65b16613371f546d8cc994d2f566.src","preCode":"  public void testSizeAllocation() {\n    \r\n    System.setProperty(OffHeapStorage.STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY, \"true\");\n    GemFireCacheImpl gfc = createCache();\n    try {\n      MemoryAllocator ma = gfc.getOffHeapStore();\n      assertNotNull(ma);\n      final long offHeapSize = ma.getFreeMemory();\n      assertEquals(0, ma.getUsedMemory());\n      StoredObject mc1 = ma.allocate(64);\n      assertEquals(64 + perObjectOverhead(), ma.getUsedMemory());\n      assertEquals(offHeapSize - (64 + perObjectOverhead()), ma.getFreeMemory());\n      mc1.release();\n      assertEquals(offHeapSize, ma.getFreeMemory());\n      assertEquals(0, ma.getUsedMemory());\n      \r\n      \r\n      \r\n      \r\n      try {\n        ma.allocate(1024 * 1024 * 20);\n        fail(\"Expected an out of heap exception\");\n      } catch (OutOfOffHeapMemoryException expected) {\n      }\n      assertEquals(0, ma.getUsedMemory());\n      assertFalse(gfc.isClosed());\n    } finally {\n      System.clearProperty(OffHeapStorage.STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY);\n      closeCache(gfc, false);\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/offheap/OffHeapRegionBase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"N"},{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public void keep_testOutOfOffHeapMemoryErrorClosesCache() {\n    \r\n    final GemFireCacheImpl gfc = createCache();\n    try {\n      MemoryAllocator ma = gfc.getOffHeapStore();\n      assertNotNull(ma);\n      final long offHeapSize = ma.getFreeMemory();\n      assertEquals(0, ma.getUsedMemory());\n      StoredObject mc1 = ma.allocate(64);\n      assertEquals(64 + perObjectOverhead(), ma.getUsedMemory());\n      assertEquals(offHeapSize - (64 + perObjectOverhead()), ma.getFreeMemory());\n      mc1.release();\n      assertEquals(offHeapSize, ma.getFreeMemory());\n      assertEquals(0, ma.getUsedMemory());\n      \r\n      try {\n        ma.allocate(1024 * 1024 * 10);\n        fail(\"Expected an out of heap exception\");\n      } catch (OutOfOffHeapMemoryException expected) {\n        \r\n      }\n      assertEquals(0, ma.getUsedMemory());\n\n      final WaitCriterion waitForDisconnect = new WaitCriterion() {\n        @Override\n        public boolean done() {\n          return gfc.isClosed();\n        }\n\n        @Override\n        public String description() {\n          return \"Waiting for disconnect to complete\";\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(waitForDisconnect);\n\n      assertTrue(gfc.isClosed());\n    } finally {\n      closeCache(gfc, false);\n    }\n  }\n","date":"2019-01-12 07:53:54","endLine":188,"groupId":"104150","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"keep_testOutOfOffHeapMemoryErrorClosesCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/13/914bc47cd069d46548b07c0d05e2fa982c7dbb.src","preCode":"  public void keep_testOutOfOffHeapMemoryErrorClosesCache() {\n    \r\n    final GemFireCacheImpl gfc = createCache();\n    try {\n      MemoryAllocator ma = gfc.getOffHeapStore();\n      assertNotNull(ma);\n      final long offHeapSize = ma.getFreeMemory();\n      assertEquals(0, ma.getUsedMemory());\n      StoredObject mc1 = ma.allocate(64);\n      assertEquals(64 + perObjectOverhead(), ma.getUsedMemory());\n      assertEquals(offHeapSize - (64 + perObjectOverhead()), ma.getFreeMemory());\n      mc1.release();\n      assertEquals(offHeapSize, ma.getFreeMemory());\n      assertEquals(0, ma.getUsedMemory());\n      \r\n      try {\n        ma.allocate(1024 * 1024 * 10);\n        fail(\"Expected an out of heap exception\");\n      } catch (OutOfOffHeapMemoryException expected) {\n        \r\n      }\n      assertEquals(0, ma.getUsedMemory());\n\n      final WaitCriterion waitForDisconnect = new WaitCriterion() {\n        public boolean done() {\n          return gfc.isClosed();\n        }\n\n        public String description() {\n          return \"Waiting for disconnect to complete\";\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(waitForDisconnect);\n\n      assertTrue(gfc.isClosed());\n    } finally {\n      closeCache(gfc, false);\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/offheap/OffHeapRegionBase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"}]
