[{"authorTime":"2019-05-29 19:16:36","codes":[{"authorDate":"2019-05-29 19:16:36","commitOrder":1,"curCode":"  public void create_succeedsOnAllMembers() throws Exception {\n    List<CliFunctionResult> functionResults = new ArrayList<>();\n    functionResults.add(new CliFunctionResult(\"member1\", true, \"success\"));\n    functionResults.add(new CliFunctionResult(\"member2\", true, \"failed\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(service).findMembers(any());\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","date":"2019-05-29 19:16:36","endLine":160,"groupId":"38649","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"create_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/54/438f3d7c73dde258f8e2d48f40b8e823ac0d3e.src","preCode":"  public void create_succeedsOnAllMembers() throws Exception {\n    List<CliFunctionResult> functionResults = new ArrayList<>();\n    functionResults.add(new CliFunctionResult(\"member1\", true, \"success\"));\n    functionResults.add(new CliFunctionResult(\"member2\", true, \"failed\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(service).findMembers(any());\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"},{"authorDate":"2019-05-29 19:16:36","commitOrder":1,"curCode":"  public void delete_succeedsOnAllMembers() throws Exception {\n    List<CliFunctionResult> functionResults = new ArrayList<>();\n    functionResults.add(new CliFunctionResult(\"member1\", true, \"success\"));\n    functionResults.add(new CliFunctionResult(\"member2\", true, \"failed\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(service).findMembers(any());\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n    when(regionValidator.exists(eq(\"test\"), any())).thenReturn(true);\n\n    result = service.delete(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","date":"2019-05-29 19:16:36","endLine":271,"groupId":"29255","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"delete_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/54/438f3d7c73dde258f8e2d48f40b8e823ac0d3e.src","preCode":"  public void delete_succeedsOnAllMembers() throws Exception {\n    List<CliFunctionResult> functionResults = new ArrayList<>();\n    functionResults.add(new CliFunctionResult(\"member1\", true, \"success\"));\n    functionResults.add(new CliFunctionResult(\"member2\", true, \"failed\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(service).findMembers(any());\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n    when(regionValidator.exists(eq(\"test\"), any())).thenReturn(true);\n\n    result = service.delete(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"B"}],"commitId":"ce10ede1dd8a8a085d332bde0389473f7a57ba9d","commitMessage":"@@@GEODE-6786: Provide ability to delete a region using V2 REST API (#3610)\n\n","date":"2019-05-29 19:16:36","modifiedFileCount":"20","status":"B","submitter":"Jens Deppe"},{"authorTime":"2019-06-12 00:18:57","codes":[{"authorDate":"2019-06-12 00:18:57","commitOrder":2,"curCode":"  public void create_succeedsOnAllMembers() throws Exception {\n    List<CliFunctionResult> functionResults = new ArrayList<>();\n    functionResults.add(new CliFunctionResult(\"member1\", true, \"success\"));\n    functionResults.add(new CliFunctionResult(\"member2\", true, \"failed\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findMembers(any());\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","date":"2019-06-12 00:18:57","endLine":181,"groupId":"3214","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"create_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/eb/59389fae57ef0f7bd7e1a706b63d655b09a3de.src","preCode":"  public void create_succeedsOnAllMembers() throws Exception {\n    List<CliFunctionResult> functionResults = new ArrayList<>();\n    functionResults.add(new CliFunctionResult(\"member1\", true, \"success\"));\n    functionResults.add(new CliFunctionResult(\"member2\", true, \"failed\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(service).findMembers(any());\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2019-06-12 00:18:57","commitOrder":2,"curCode":"  public void delete_succeedsOnAllMembers() throws Exception {\n    List<CliFunctionResult> functionResults = new ArrayList<>();\n    functionResults.add(new CliFunctionResult(\"member1\", true, \"success\"));\n    functionResults.add(new CliFunctionResult(\"member2\", true, \"success\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findMembers(any());\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    result = service.delete(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","date":"2019-06-12 00:18:57","endLine":297,"groupId":"2841","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"delete_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/eb/59389fae57ef0f7bd7e1a706b63d655b09a3de.src","preCode":"  public void delete_succeedsOnAllMembers() throws Exception {\n    List<CliFunctionResult> functionResults = new ArrayList<>();\n    functionResults.add(new CliFunctionResult(\"member1\", true, \"success\"));\n    functionResults.add(new CliFunctionResult(\"member2\", true, \"failed\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(service).findMembers(any());\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n    when(regionValidator.exists(eq(\"test\"), any())).thenReturn(true);\n\n    result = service.delete(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"}],"commitId":"7b4870a624fcf57e151ee55bea9c958652d35a0b","commitMessage":"@@@GEODE-6811: be able to create GWR in management api. (#3687)\n\n* add createGWR methods in the gateway controllers\n* add GatewaReceiverConfigValidator\n* add MemberValidator to validate same element can't exists in multiple groups which have common member\n* add ConfigurationManager.get method to replace ConfigurationValidator.exists method for more conflict validation","date":"2019-06-12 00:18:57","modifiedFileCount":"23","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2019-06-20 06:30:55","codes":[{"authorDate":"2019-06-20 06:30:55","commitOrder":3,"curCode":"  public void create_succeedsOnAllMembers() throws Exception {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findMembers(any());\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","date":"2019-06-20 06:30:55","endLine":181,"groupId":"3214","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"create_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/eb/15c1c85d9498e361e10aea9057f46fa58998fa.src","preCode":"  public void create_succeedsOnAllMembers() throws Exception {\n    List<CliFunctionResult> functionResults = new ArrayList<>();\n    functionResults.add(new CliFunctionResult(\"member1\", true, \"success\"));\n    functionResults.add(new CliFunctionResult(\"member2\", true, \"failed\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findMembers(any());\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2019-06-20 06:30:55","commitOrder":3,"curCode":"  public void delete_succeedsOnAllMembers() throws Exception {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findMembers(any());\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    result = service.delete(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","date":"2019-06-20 06:30:55","endLine":298,"groupId":"2841","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"delete_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/eb/15c1c85d9498e361e10aea9057f46fa58998fa.src","preCode":"  public void delete_succeedsOnAllMembers() throws Exception {\n    List<CliFunctionResult> functionResults = new ArrayList<>();\n    functionResults.add(new CliFunctionResult(\"member1\", true, \"success\"));\n    functionResults.add(new CliFunctionResult(\"member2\", true, \"success\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findMembers(any());\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    result = service.delete(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"}],"commitId":"94cd789a18181ac4640b715bab5428d537103cd0","commitMessage":"@@@GEODE-6811: refactor MemberStatus in ClusterManagementResult (#3709)\n\n* change memberStatus in ClusterManagementResult to use RealizationResult","date":"2019-06-20 06:30:55","modifiedFileCount":"17","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2019-06-29 02:10:02","codes":[{"authorDate":"2019-06-29 02:10:02","commitOrder":4,"curCode":"  public void create_succeedsOnAllMembers() throws Exception {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","date":"2019-06-29 02:10:02","endLine":180,"groupId":"3214","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"create_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/07/8a68695a67644ed121bb209118b694ab9f1b5b.src","preCode":"  public void create_succeedsOnAllMembers() throws Exception {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findMembers(any());\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2019-06-29 02:10:02","commitOrder":4,"curCode":"  public void delete_succeedsOnAllMembers() throws Exception {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    result = service.delete(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","date":"2019-06-29 02:10:02","endLine":297,"groupId":"12825","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"delete_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/07/8a68695a67644ed121bb209118b694ab9f1b5b.src","preCode":"  public void delete_succeedsOnAllMembers() throws Exception {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findMembers(any());\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    result = service.delete(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"}],"commitId":"2c39f92dc5fa129058144a9ec16606092dc3d51e","commitMessage":"@@@GEODE-6861: separate static config object from runtime info in the Cl? (#3754)\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\n\n* use ConfigRealizer to retrieve the runtime information for configuration on each member\n* list result would return a List of Response object which has a configuration object and a list runtime objects\n* use existing object for runtime member info and move them to geode-management module.\n","date":"2019-06-29 02:10:02","modifiedFileCount":"61","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2019-08-01 12:10:06","codes":[{"authorDate":"2019-08-01 12:10:06","commitOrder":5,"curCode":"  public void create_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","date":"2019-08-01 12:10:06","endLine":190,"groupId":"3214","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"create_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a8/bf6f8b6768ad0dc8d9b25e4c061567ed188362.src","preCode":"  public void create_succeedsOnAllMembers() throws Exception {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"},{"authorDate":"2019-08-01 12:10:06","commitOrder":5,"curCode":"  public void delete_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    result = service.delete(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","date":"2019-08-01 12:10:06","endLine":307,"groupId":"12825","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"delete_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a8/bf6f8b6768ad0dc8d9b25e4c061567ed188362.src","preCode":"  public void delete_succeedsOnAllMembers() throws Exception {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    result = service.delete(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"}],"commitId":"e2855b4d2359c8a7f402f8dbd011292645b94b5a","commitMessage":"@@@GEODE-7024: raise a Java exception on non-success response from REST API (#3861)\n\n* GEODE-7024: raise a Java exception on non-success response from REST call","date":"2019-08-01 12:10:06","modifiedFileCount":"17","status":"M","submitter":"Owen Nichols"},{"authorTime":"2019-08-16 05:45:33","codes":[{"authorDate":"2019-08-16 05:45:33","commitOrder":6,"curCode":"  public void create_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region mockRegion = mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    regionConfig.setType(RegionType.REPLICATE);\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","date":"2019-08-16 05:45:33","endLine":192,"groupId":"10727","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"create_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8b/1da6a4481c5ee3a332db1926bfdffff131bf3e.src","preCode":"  public void create_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2019-08-16 05:45:33","commitOrder":6,"curCode":"  public void delete_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region mockRegion = mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    Region region = new Region();\n    region.setName(\"test\");\n    result = service.delete(region);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","date":"2019-08-16 05:45:33","endLine":313,"groupId":"12825","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"delete_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8b/1da6a4481c5ee3a332db1926bfdffff131bf3e.src","preCode":"  public void delete_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    Region mockRegion = mock(Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    result = service.delete(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"}],"commitId":"550e19e9c9bfd147a387c56019f00dbf162a2b26","commitMessage":"@@@GEODE-6945:geode-managment should create its own set of configuration? (#3928)\n\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>\n\n* do not use xml domain object for region configuration\n* add RegionType.UNSUPPORTED\n","date":"2019-08-16 05:45:33","modifiedFileCount":"40","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2020-01-08 07:58:15","codes":[{"authorDate":"2019-08-16 05:45:33","commitOrder":7,"curCode":"  public void create_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region mockRegion = mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    regionConfig.setType(RegionType.REPLICATE);\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","date":"2019-08-16 05:45:33","endLine":192,"groupId":"10727","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"create_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8b/1da6a4481c5ee3a332db1926bfdffff131bf3e.src","preCode":"  public void create_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region mockRegion = mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    regionConfig.setType(RegionType.REPLICATE);\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"N"},{"authorDate":"2020-01-08 07:58:15","commitOrder":7,"curCode":"  public void delete_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator);\n    memberValidator.findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region mockRegion = mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    Region region = new Region();\n    region.setName(\"test\");\n    result = service.delete(region);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","date":"2020-01-08 07:58:15","endLine":332,"groupId":"14383","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"delete_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2a/6f9ee5c0f40eba7bf23e6e8ebcb88ffe135df3.src","preCode":"  public void delete_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region mockRegion = mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    Region region = new Region();\n    region.setName(\"test\");\n    result = service.delete(region);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"M"}],"commitId":"f1e5d8f9a06eb5fb08a38d580e12fa3b89ee32ef","commitMessage":"@@@GEODE-7579: introduce RegionAware (#4546)\n\n* GEODE-7579: Make Index configuration RegionAware\n\n* Index configuration is ReqionAware.  but not groupable\n* index's group depends on what region it's defined with\n* display member status in the exception","date":"2020-01-08 07:58:15","modifiedFileCount":"14","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2020-02-21 01:39:39","codes":[{"authorDate":"2020-02-21 01:39:39","commitOrder":8,"curCode":"  public void create_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region<String, Object> mockRegion =\n        mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    regionConfig.setType(RegionType.REPLICATE);\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","date":"2020-02-21 01:39:39","endLine":211,"groupId":"21269","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"create_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/d76e68703ec8ef8e5cc0500a0715e05540e1c7.src","preCode":"  public void create_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region mockRegion = mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    regionConfig.setType(RegionType.REPLICATE);\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"},{"authorDate":"2020-02-21 01:39:39","commitOrder":8,"curCode":"  public void delete_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator);\n    memberValidator.findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region<String, Object> mockRegion =\n        mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    Region region = new Region();\n    region.setName(\"test\");\n    result = service.delete(region);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","date":"2020-02-21 01:39:39","endLine":347,"groupId":"14383","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"delete_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/d76e68703ec8ef8e5cc0500a0715e05540e1c7.src","preCode":"  public void delete_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator);\n    memberValidator.findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region mockRegion = mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    Region region = new Region();\n    region.setName(\"test\");\n    result = service.delete(region);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"}],"commitId":"22403e00c2196ab9239569b82ed34a71af7a7b26","commitMessage":"@@@GEODE-7799: Distribute rebalance status to other locators (#4692)\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>\nCo-authored-by: Dale Emery <demery@pivotal.io>\n","date":"2020-02-21 01:39:39","modifiedFileCount":"28","status":"M","submitter":"Darrel Schneider"},{"authorTime":"2020-02-27 13:09:01","codes":[{"authorDate":"2020-02-27 13:09:01","commitOrder":9,"curCode":"  public void create_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region<String, Object> mockRegion =\n        mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    regionConfig.setType(RegionType.REPLICATE);\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","date":"2020-02-27 13:09:01","endLine":212,"groupId":"21269","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"create_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/31/20ce2c5688a904162fa14dd0b1399d3c2feaa6.src","preCode":"  public void create_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region<String, Object> mockRegion =\n        mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    regionConfig.setType(RegionType.REPLICATE);\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"},{"authorDate":"2020-02-27 13:09:01","commitOrder":9,"curCode":"  public void delete_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator);\n    memberValidator.findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region<String, Object> mockRegion =\n        mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    Region region = new Region();\n    region.setName(\"test\");\n    result = service.delete(region);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","date":"2020-02-27 13:09:01","endLine":348,"groupId":"14383","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"delete_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/31/20ce2c5688a904162fa14dd0b1399d3c2feaa6.src","preCode":"  public void delete_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator);\n    memberValidator.findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region<String, Object> mockRegion =\n        mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    Region region = new Region();\n    region.setName(\"test\");\n    result = service.delete(region);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"}],"commitId":"ddfee1c502b26945829fdb13b43829aa85be4002","commitMessage":"@@@GEODE-7421:  deploy jar by REST API/JAVA API for Management\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>","date":"2020-02-27 13:09:01","modifiedFileCount":"32","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2020-06-16 07:51:28","codes":[{"authorDate":"2020-06-16 07:51:28","commitOrder":10,"curCode":"  public void create_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region<String, Object> mockRegion =\n        mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    regionConfig.setType(RegionType.REPLICATE);\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n    verify(dLockService).lock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME, -1, -1);\n    verify(dLockService).unlock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME);\n  }\n","date":"2020-06-16 07:51:28","endLine":241,"groupId":"21269","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"create_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/45/1bbbb9c6697a13fb84eacf831d8e702cc7ce13.src","preCode":"  public void create_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region<String, Object> mockRegion =\n        mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    regionConfig.setType(RegionType.REPLICATE);\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"},{"authorDate":"2020-06-16 07:51:28","commitOrder":10,"curCode":"  public void delete_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator);\n    memberValidator.findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region<String, Object> mockRegion =\n        mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    Region region = new Region();\n    region.setName(\"test\");\n    result = service.delete(region);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n    verify(dLockService).lock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME, -1, -1);\n    verify(dLockService).unlock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME);\n  }\n","date":"2020-06-16 07:51:28","endLine":379,"groupId":"14383","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"delete_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/45/1bbbb9c6697a13fb84eacf831d8e702cc7ce13.src","preCode":"  public void delete_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator);\n    memberValidator.findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region<String, Object> mockRegion =\n        mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    Region region = new Region();\n    region.setName(\"test\");\n    result = service.delete(region);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"M"}],"commitId":"0f763eadfbbe4ce25c0628370199ba0850f6d630","commitMessage":"@@@GEODE-8099: add dlock around cms create/delete operations. (#5188)\n\n","date":"2020-06-16 07:51:28","modifiedFileCount":"5","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2020-10-08 02:05:28","codes":[{"authorDate":"2020-10-08 02:05:28","commitOrder":11,"curCode":"  public void create_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeCacheRealizationFunction(any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region<String, Object> mockRegion =\n        mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    regionConfig.setType(RegionType.REPLICATE);\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n    verify(dLockService).lock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME, -1, -1);\n    verify(dLockService).unlock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME);\n  }\n","date":"2020-10-08 02:05:28","endLine":256,"groupId":"10210","id":21,"instanceNumber":1,"isCurCommit":1,"methodName":"create_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c5/0e66928f141f4be1a869cc6088a549540f65de.src","preCode":"  public void create_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any(), any());\n\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator)\n        .findServers();\n\n    CacheConfig cacheConfig = new CacheConfig();\n    when(persistenceService.getCacheConfig(\"cluster\", true)).thenReturn(cacheConfig);\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region<String, Object> mockRegion =\n        mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    regionConfig.setName(\"test\");\n    regionConfig.setType(RegionType.REPLICATE);\n    result = service.create(regionConfig);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(cacheConfig.getRegions()).hasSize(1);\n    verify(dLockService).lock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME, -1, -1);\n    verify(dLockService).unlock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"},{"authorDate":"2020-10-08 02:05:28","commitOrder":11,"curCode":"  public void delete_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeCacheRealizationFunction(any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator);\n    memberValidator.findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region<String, Object> mockRegion =\n        mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    Region region = new Region();\n    region.setName(\"test\");\n    result = service.delete(region);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n    verify(dLockService).lock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME, -1, -1);\n    verify(dLockService).unlock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME);\n  }\n","date":"2020-10-08 02:05:28","endLine":394,"groupId":"10210","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"delete_succeedsOnAllMembers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c5/0e66928f141f4be1a869cc6088a549540f65de.src","preCode":"  public void delete_succeedsOnAllMembers() {\n    List<RealizationResult> functionResults = new ArrayList<>();\n    functionResults.add(new RealizationResult().setMemberName(\"member1\"));\n    functionResults.add(new RealizationResult().setMemberName(\"member2\"));\n    doReturn(functionResults).when(service).executeAndGetFunctionResult(any(), any(), any(), any());\n\n    doReturn(new String[] {\"cluster\"}).when(memberValidator).findGroupsWithThisElement(any(),\n        any());\n    doReturn(Collections.singleton(mock(DistributedMember.class))).when(memberValidator);\n    memberValidator.findServers();\n\n    CacheConfig config = new CacheConfig();\n    RegionConfig regionConfig = new RegionConfig();\n    regionConfig.setName(\"test\");\n    config.getRegions().add(regionConfig);\n    doReturn(config).when(persistenceService).getCacheConfig(eq(\"cluster\"), anyBoolean());\n    doReturn(null).when(persistenceService).getConfiguration(any());\n    org.apache.geode.cache.Region<String, Object> mockRegion =\n        mock(org.apache.geode.cache.Region.class);\n    doReturn(mockRegion).when(persistenceService).getConfigurationRegion();\n\n    Region region = new Region();\n    region.setName(\"test\");\n    result = service.delete(region);\n    assertThat(result.isSuccessful()).isTrue();\n\n    assertThat(config.getRegions()).isEmpty();\n    verify(dLockService).lock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME, -1, -1);\n    verify(dLockService).unlock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"}],"commitId":"73f6783b07f1151c1617978fb57822ade5b71414","commitMessage":"@@@GEODE-8574: ClusterManagementService should not throw ClassCastExcept? (#5596)\n\n","date":"2020-10-08 02:05:28","modifiedFileCount":"2","status":"M","submitter":"Jinmei Liao"}]
