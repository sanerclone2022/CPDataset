[{"authorTime":"2018-01-23 03:21:53","codes":[{"authorDate":"2018-01-23 03:21:53","commitOrder":2,"curCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        CustomEntryConcurrentHashMap map, RegionEntryFactory factory) {\n      super(null);\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        this._setMap(map);\n      }\n      if (factory != null) {\n        this.setEntryFactory(factory);\n      }\n    }\n","date":"2018-01-23 03:21:53","endLine":735,"groupId":"5858","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"TestableAbstractRegionMap","params":"(booleanwithConcurrencyChecks@CustomEntryConcurrentHashMapmap@RegionEntryFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/85bfd3e4bbf64676992cf501b31c9bb97d41de.src","preCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        CustomEntryConcurrentHashMap map, RegionEntryFactory factory) {\n      super(null);\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        this._setMap(map);\n      }\n      if (factory != null) {\n        this.setEntryFactory(factory);\n      }\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":719,"status":"MB"},{"authorDate":"2018-01-23 03:21:53","commitOrder":2,"curCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","date":"2018-01-23 03:21:53","endLine":755,"groupId":"34049","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createOwner","params":"(booleanwithConcurrencyChecks)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/85bfd3e4bbf64676992cf501b31c9bb97d41de.src","preCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"B"}],"commitId":"4f0c0b1f32d86aad4595c33c679e20799c5dbaeb","commitMessage":"@@@GEODE-4333: add unit tests for AbstractRegionMap.destroy (#1314)\n\n","date":"2018-01-23 03:21:53","modifiedFileCount":"3","status":"M","submitter":"Darrel Schneider"},{"authorTime":"2018-01-23 03:21:53","codes":[{"authorDate":"2018-02-01 03:06:55","commitOrder":3,"curCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory) {\n      super(null);\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","date":"2018-02-01 03:06:55","endLine":760,"groupId":"5858","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"TestableAbstractRegionMap","params":"(booleanwithConcurrencyChecks@ConcurrentMapWithReusableEntriesmap@RegionEntryFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d3/053b045c0b33c492495ca3e4181737f1e7f4e8.src","preCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        CustomEntryConcurrentHashMap map, RegionEntryFactory factory) {\n      super(null);\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        this._setMap(map);\n      }\n      if (factory != null) {\n        this.setEntryFactory(factory);\n      }\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":744,"status":"M"},{"authorDate":"2018-01-23 03:21:53","commitOrder":3,"curCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","date":"2018-01-23 03:21:53","endLine":755,"groupId":"34049","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createOwner","params":"(booleanwithConcurrencyChecks)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/85bfd3e4bbf64676992cf501b31c9bb97d41de.src","preCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"N"}],"commitId":"21e2e0ae73a155b0c072e385544f3fb0d382c4e0","commitMessage":"@@@GEODE-4364: extract RegionMapDestroy and add RegionMapDestroyTest (#1347)\n\n\n","date":"2018-02-01 03:06:55","modifiedFileCount":"27","status":"M","submitter":"Kirk Lund"},{"authorTime":"2018-01-23 03:21:53","codes":[{"authorDate":"2018-04-13 02:34:02","commitOrder":4,"curCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory) {\n      super(null);\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      when(owner.getScope()).thenReturn(Scope.LOCAL);\n      when(owner.isInitialized()).thenReturn(true);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","date":"2018-04-13 02:34:02","endLine":909,"groupId":"41882","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"TestableAbstractRegionMap","params":"(booleanwithConcurrencyChecks@ConcurrentMapWithReusableEntriesmap@RegionEntryFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ed/5ccf2bfd591484d56425936cbc60eef204c2a4.src","preCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory) {\n      super(null);\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":891,"status":"M"},{"authorDate":"2018-01-23 03:21:53","commitOrder":4,"curCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","date":"2018-01-23 03:21:53","endLine":755,"groupId":"34049","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createOwner","params":"(booleanwithConcurrencyChecks)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/85bfd3e4bbf64676992cf501b31c9bb97d41de.src","preCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"N"}],"commitId":"65b52f28f4e11b9f5ec82b0e457fc0292132e5da","commitMessage":"@@@GEODE-4957: fix race in concurrent create on region (#1750)\n\nRefactored basicPut so that a RegionEntry with REMOVE_PHASE1\nis added to the map.  it will already be synchronized.\nThis prevents a second concurrent threads from \"stealing\" it and\ncreating a region entry with a key that is the same but has a different\nidentity.\n","date":"2018-04-13 02:34:02","modifiedFileCount":"3","status":"M","submitter":"Darrel Schneider"},{"authorTime":"2018-01-23 03:21:53","codes":[{"authorDate":"2018-04-18 03:27:55","commitOrder":5,"curCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory) {\n      super(null);\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","date":"2018-04-18 03:27:55","endLine":760,"groupId":"5858","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"TestableAbstractRegionMap","params":"(booleanwithConcurrencyChecks@ConcurrentMapWithReusableEntriesmap@RegionEntryFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d3/053b045c0b33c492495ca3e4181737f1e7f4e8.src","preCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory) {\n      super(null);\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      when(owner.getScope()).thenReturn(Scope.LOCAL);\n      when(owner.isInitialized()).thenReturn(true);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":744,"status":"M"},{"authorDate":"2018-01-23 03:21:53","commitOrder":5,"curCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","date":"2018-01-23 03:21:53","endLine":755,"groupId":"34049","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createOwner","params":"(booleanwithConcurrencyChecks)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/85bfd3e4bbf64676992cf501b31c9bb97d41de.src","preCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"N"}],"commitId":"33f8f5fadbe5655a31f2607dd121fc97e1a373f3","commitMessage":"@@@Revert \"GEODE-4957: fix race in concurrent create on region (#1750)\" (#1812)\n\nThis reverts commit 65b52f28f4e11b9f5ec82b0e457fc0292132e5da.","date":"2018-04-18 03:27:55","modifiedFileCount":"3","status":"M","submitter":"Darrel Schneider"},{"authorTime":"2018-01-23 03:21:53","codes":[{"authorDate":"2018-04-25 03:04:28","commitOrder":6,"curCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory) {\n      super(null);\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      when(owner.getScope()).thenReturn(Scope.LOCAL);\n      when(owner.isInitialized()).thenReturn(true);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","date":"2018-04-25 03:04:28","endLine":912,"groupId":"41882","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"TestableAbstractRegionMap","params":"(booleanwithConcurrencyChecks@ConcurrentMapWithReusableEntriesmap@RegionEntryFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2e/7baaaa71b902e84a9c38dee81ea29559aad0dd.src","preCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory) {\n      super(null);\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":894,"status":"M"},{"authorDate":"2018-01-23 03:21:53","commitOrder":6,"curCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","date":"2018-01-23 03:21:53","endLine":755,"groupId":"34049","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createOwner","params":"(booleanwithConcurrencyChecks)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/85bfd3e4bbf64676992cf501b31c9bb97d41de.src","preCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"N"}],"commitId":"c020dc9aeaf68f91d9da1182cec78930550b5d6b","commitMessage":"@@@GEODE-4957: fix race in concurrent create on region (#1836)\n\nReverted the revert of GEODE-4957.\nOnly cleanup if basicPut created a new region entry and its value at the end is still REMOVED_PHASE1\n","date":"2018-04-25 03:04:28","modifiedFileCount":"3","status":"M","submitter":"Darrel Schneider"},{"authorTime":"2018-01-23 03:21:53","codes":[{"authorDate":"2018-06-02 01:41:47","commitOrder":7,"curCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory,\n        RegionEntry regionEntryForGetEntry) {\n      super(null);\n      this.regionEntryForGetEntry = regionEntryForGetEntry;\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      when(owner.getScope()).thenReturn(Scope.LOCAL);\n      when(owner.isInitialized()).thenReturn(true);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","date":"2018-06-02 01:41:47","endLine":976,"groupId":"41882","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"TestableAbstractRegionMap","params":"(booleanwithConcurrencyChecks@ConcurrentMapWithReusableEntriesmap@RegionEntryFactoryfactory@RegionEntryregionEntryForGetEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d5/46ddb47fb1878d4be4ebe1bfbdfb6e68cee7ba.src","preCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory) {\n      super(null);\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      when(owner.getScope()).thenReturn(Scope.LOCAL);\n      when(owner.isInitialized()).thenReturn(true);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":956,"status":"M"},{"authorDate":"2018-01-23 03:21:53","commitOrder":7,"curCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","date":"2018-01-23 03:21:53","endLine":755,"groupId":"34049","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createOwner","params":"(booleanwithConcurrencyChecks)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/85bfd3e4bbf64676992cf501b31c9bb97d41de.src","preCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"N"}],"commitId":"44e5d36d46216c4005c77619cce1f9cd47aa3ebf","commitMessage":"@@@GEODE-5265: fix dataStoreEntryCount statistic (#2006)\n\n* tested and fixed updateRecoveredEntry's dataStoreEntryCount code\n* tested and fixed initialImagePut's dataStoreEntryCount code\n* tested and fixed txApplyDestroy's dataStoreEntryCount code\n* tested and fixed RegionMapDestroy's dataStoreEntryCount code\n","date":"2018-06-02 01:41:47","modifiedFileCount":"4","status":"M","submitter":"Darrel Schneider"},{"authorTime":"2018-01-23 03:21:53","codes":[{"authorDate":"2018-06-02 02:19:01","commitOrder":8,"curCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory) {\n      super(null);\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      when(owner.getScope()).thenReturn(Scope.LOCAL);\n      when(owner.isInitialized()).thenReturn(true);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","date":"2018-06-02 02:19:01","endLine":773,"groupId":"41882","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"TestableAbstractRegionMap","params":"(booleanwithConcurrencyChecks@ConcurrentMapWithReusableEntriesmap@RegionEntryFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d8/957edbab2c14c6827a3be74e9b75cdb95e00aa.src","preCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory,\n        RegionEntry regionEntryForGetEntry) {\n      super(null);\n      this.regionEntryForGetEntry = regionEntryForGetEntry;\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      when(owner.getScope()).thenReturn(Scope.LOCAL);\n      when(owner.isInitialized()).thenReturn(true);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":755,"status":"M"},{"authorDate":"2018-01-23 03:21:53","commitOrder":8,"curCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","date":"2018-01-23 03:21:53","endLine":755,"groupId":"34049","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createOwner","params":"(booleanwithConcurrencyChecks)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/85bfd3e4bbf64676992cf501b31c9bb97d41de.src","preCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"N"}],"commitId":"7d69f29e6b3b173d6f621a2e1548dc7df355964e","commitMessage":"@@@Revert \"GEODE-5265: fix dataStoreEntryCount statistic (#2006)\"\n\nThis reverts commit 44e5d36d46216c4005c77619cce1f9cd47aa3ebf.\n","date":"2018-06-02 02:19:01","modifiedFileCount":"4","status":"M","submitter":"Darrel Schneider"},{"authorTime":"2018-01-23 03:21:53","codes":[{"authorDate":"2018-06-02 02:20:01","commitOrder":9,"curCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory,\n        RegionEntry regionEntryForGetEntry) {\n      super(null);\n      this.regionEntryForGetEntry = regionEntryForGetEntry;\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      when(owner.getScope()).thenReturn(Scope.LOCAL);\n      when(owner.isInitialized()).thenReturn(true);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","date":"2018-06-02 02:26:11","endLine":976,"groupId":"41882","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"TestableAbstractRegionMap","params":"(booleanwithConcurrencyChecks@ConcurrentMapWithReusableEntriesmap@RegionEntryFactoryfactory@RegionEntryregionEntryForGetEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d5/46ddb47fb1878d4be4ebe1bfbdfb6e68cee7ba.src","preCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory) {\n      super(null);\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      when(owner.getScope()).thenReturn(Scope.LOCAL);\n      when(owner.isInitialized()).thenReturn(true);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":956,"status":"M"},{"authorDate":"2018-01-23 03:21:53","commitOrder":9,"curCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","date":"2018-01-23 03:21:53","endLine":755,"groupId":"34049","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createOwner","params":"(booleanwithConcurrencyChecks)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/85bfd3e4bbf64676992cf501b31c9bb97d41de.src","preCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"N"}],"commitId":"9a40c9dc27d174cd477a9fdd05182d69323189e9","commitMessage":"@@@GEODE-5265: fix dataStoreEntryCount statistic (#2006)\n\nfixed new unit test to not expect updateSizeOnCreate to be called\n","date":"2018-06-02 02:26:11","modifiedFileCount":"5","status":"M","submitter":"Darrel Schneider"},{"authorTime":"2018-01-23 03:21:53","codes":[{"authorDate":"2018-09-27 02:31:56","commitOrder":10,"curCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks, boolean isDistributedRegion,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory,\n        RegionEntry regionEntryForGetEntry) {\n      super(null);\n      this.regionEntryForGetEntry = regionEntryForGetEntry;\n      LocalRegion owner = isDistributedRegion ? mock(DistributedRegion.class, RETURNS_DEEP_STUBS)\n          : mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      when(owner.getScope()).thenReturn(Scope.LOCAL);\n      when(owner.isInitialized()).thenReturn(true);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","date":"2018-09-27 02:31:56","endLine":1220,"groupId":"41882","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"TestableAbstractRegionMap","params":"(booleanwithConcurrencyChecks@booleanisDistributedRegion@ConcurrentMapWithReusableEntriesmap@RegionEntryFactoryfactory@RegionEntryregionEntryForGetEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/21/2a1b87a1e33995914c847eba6207fae0a8830a.src","preCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory,\n        RegionEntry regionEntryForGetEntry) {\n      super(null);\n      this.regionEntryForGetEntry = regionEntryForGetEntry;\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      when(owner.getScope()).thenReturn(Scope.LOCAL);\n      when(owner.isInitialized()).thenReturn(true);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1199,"status":"M"},{"authorDate":"2018-01-23 03:21:53","commitOrder":10,"curCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","date":"2018-01-23 03:21:53","endLine":755,"groupId":"34049","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"createOwner","params":"(booleanwithConcurrencyChecks)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/85bfd3e4bbf64676992cf501b31c9bb97d41de.src","preCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"N"}],"commitId":"2c320c345a22e62c381b92d2078280085305fbc2","commitMessage":"@@@GEODE-5748: Hold a write lock during cleanUpAfterFailedGII (#2501)\n\n * Hold write lock when cleanUpAfterFailedGII.\n * Hold read lock when cache operation is performed on the farside if region is not yet initialized.\n * Also hold read lock when transaction is performed on the farside if region not initialized yet.\n","date":"2018-09-27 02:31:56","modifiedFileCount":"13","status":"M","submitter":"pivotal-eshu"},{"authorTime":"2019-05-31 05:47:34","codes":[{"authorDate":"2019-05-31 05:47:34","commitOrder":11,"curCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks, boolean isDistributedRegion,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory,\n        RegionEntry regionEntryForGetEntry) {\n      super(null);\n      this.regionEntryForGetEntry = regionEntryForGetEntry;\n      LocalRegion owner = isDistributedRegion ? mock(DistributedRegion.class, RETURNS_DEEP_STUBS)\n          : mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      when(owner.getScope()).thenReturn(Scope.LOCAL);\n      when(owner.isInitialized()).thenReturn(true);\n\n      InternalCache cache = mock(InternalCache.class);\n      InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n      when(owner.getCache()).thenReturn(cache);\n      when(cache.getDistributedSystem()).thenReturn(ids);\n      when(ids.getOffHeapStore()).thenReturn(null);\n\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","date":"2019-05-31 05:47:34","endLine":1228,"groupId":"102099","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"TestableAbstractRegionMap","params":"(booleanwithConcurrencyChecks@booleanisDistributedRegion@ConcurrentMapWithReusableEntriesmap@RegionEntryFactoryfactory@RegionEntryregionEntryForGetEntry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b8/d88615beb173d77b71d0c42b9bd71192ce8a4a.src","preCode":"    protected TestableAbstractRegionMap(boolean withConcurrencyChecks, boolean isDistributedRegion,\n        ConcurrentMapWithReusableEntries map, RegionEntryFactory factory,\n        RegionEntry regionEntryForGetEntry) {\n      super(null);\n      this.regionEntryForGetEntry = regionEntryForGetEntry;\n      LocalRegion owner = isDistributedRegion ? mock(DistributedRegion.class, RETURNS_DEEP_STUBS)\n          : mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      when(owner.getScope()).thenReturn(Scope.LOCAL);\n      when(owner.isInitialized()).thenReturn(true);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      initialize(owner, new Attributes(), null, false);\n      if (map != null) {\n        setEntryMap(map);\n      }\n      if (factory != null) {\n        setEntryFactory(factory);\n      }\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1200,"status":"M"},{"authorDate":"2019-05-31 05:47:34","commitOrder":11,"curCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n\n      InternalCache cache = mock(InternalCache.class);\n      InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n      when(owner.getCache()).thenReturn(cache);\n      when(cache.getDistributedSystem()).thenReturn(ids);\n      when(ids.getOffHeapStore()).thenReturn(null);\n\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","date":"2019-05-31 05:47:34","endLine":1268,"groupId":"102099","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"createOwner","params":"(booleanwithConcurrencyChecks)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b8/d88615beb173d77b71d0c42b9bd71192ce8a4a.src","preCode":"    private static LocalRegion createOwner(boolean withConcurrencyChecks) {\n      LocalRegion owner = mock(LocalRegion.class);\n      CachePerfStats cachePerfStats = mock(CachePerfStats.class);\n      when(owner.getCachePerfStats()).thenReturn(cachePerfStats);\n      when(owner.getEvictionAttributes()).thenReturn(evictionAttributes);\n      when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks);\n      when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE);\n      doThrow(EntryNotFoundException.class).when(owner).checkEntryNotFound(any());\n      return owner;\n    }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1252,"status":"M"}],"commitId":"327feec1946a0b6e28dd552d175e7833dc8d8dd2","commitMessage":"@@@GEODE-6696: EntryEvenImpl.offHeapLock created only if off-heap in use (#3581)\n\n","date":"2019-05-31 05:47:34","modifiedFileCount":"11","status":"M","submitter":"mivanac"}]
