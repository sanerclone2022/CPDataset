[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testQueryMethod_2() throws Exception {\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    AbstractIndex i1 =\n        (AbstractIndex) qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"ID\", \"/portfolios\");\n    AbstractIndex i2 = (AbstractIndex) qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"status\",\n        \"/portfolios\");\n    AbstractIndex i3 = (AbstractIndex) qs.createIndex(\"status.toString()\", IndexType.FUNCTIONAL,\n        \"status.toString\", \"/portfolios\");\n\n    Set results = new HashSet();\n    DefaultQuery q = new DefaultQuery(\"select * from /portfolios  \", CacheUtils.getCache(), false);\n    q.setRemoteQuery(false);\n    ExecutionContext context = new QueryExecutionContext(null, CacheUtils.getCache(), q);\n    bindIterators(context, \"/portfolios\");\n    Set keysToRemove = new HashSet();\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_EQ, results, context);\n    assertEquals(1, results.size());\n    assertTrue(results.iterator().next() == region.get(new Integer(1)));\n    results.clear();\n    keysToRemove.clear();\n    keysToRemove.add(new Integer(1));\n    try {\n      i1.query(new Integer(1), OQLLexerTokenTypes.TOK_EQ, results, keysToRemove, context);\n      fail(\n          \"A condition having an  equal will be identified at RangeJunction level itself, so this type of condition should throw error in RangeIndex where along with an equal there happens not equal conditions\");\n    } catch (AssertionError error) {\n      \r\n    }\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(9));\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_GT, results, keysToRemove, context);\n    assertEquals(9, results.size());\n    for (int i = 2; i < 12;) {\n      if (i != 9) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(1));\n    keysToRemove.add(new Integer(10));\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_GE, results, keysToRemove, context);\n    assertEquals(9, results.size());\n    for (int i = 2; i < 12;) {\n      if (i != 10) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(8));\n    keysToRemove.add(new Integer(11));\n    i1.query(new Integer(11), OQLLexerTokenTypes.TOK_LT, results, keysToRemove, context);\n    assertEquals(10, results.size());\n    for (int i = 0; i < 11;) {\n      if (i != 8) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(8));\n    keysToRemove.add(new Integer(11));\n    i1.query(new Integer(11), OQLLexerTokenTypes.TOK_LE, results, keysToRemove, context);\n    assertEquals(10, results.size());\n    for (int i = 0; i < 11;) {\n      if (i != 8) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(1));\n    keysToRemove.add(new Integer(10));\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_GT, results, keysToRemove, context);\n    assertEquals(9, results.size());\n    for (int i = 2; i < 12;) {\n      if (i != 10) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":224,"groupId":"38823","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryMethod_2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/0d/a2b1bdde5954071456d5a5c459d7ed51a23a7c.src","preCode":"  public void testQueryMethod_2() throws Exception {\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    AbstractIndex i1 =\n        (AbstractIndex) qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"ID\", \"/portfolios\");\n    AbstractIndex i2 = (AbstractIndex) qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"status\",\n        \"/portfolios\");\n    AbstractIndex i3 = (AbstractIndex) qs.createIndex(\"status.toString()\", IndexType.FUNCTIONAL,\n        \"status.toString\", \"/portfolios\");\n\n    Set results = new HashSet();\n    DefaultQuery q = new DefaultQuery(\"select * from /portfolios  \", CacheUtils.getCache(), false);\n    q.setRemoteQuery(false);\n    ExecutionContext context = new QueryExecutionContext(null, CacheUtils.getCache(), q);\n    bindIterators(context, \"/portfolios\");\n    Set keysToRemove = new HashSet();\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_EQ, results, context);\n    assertEquals(1, results.size());\n    assertTrue(results.iterator().next() == region.get(new Integer(1)));\n    results.clear();\n    keysToRemove.clear();\n    keysToRemove.add(new Integer(1));\n    try {\n      i1.query(new Integer(1), OQLLexerTokenTypes.TOK_EQ, results, keysToRemove, context);\n      fail(\n          \"A condition having an  equal will be identified at RangeJunction level itself, so this type of condition should throw error in RangeIndex where along with an equal there happens not equal conditions\");\n    } catch (AssertionError error) {\n      \r\n    }\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(9));\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_GT, results, keysToRemove, context);\n    assertEquals(9, results.size());\n    for (int i = 2; i < 12;) {\n      if (i != 9) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(1));\n    keysToRemove.add(new Integer(10));\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_GE, results, keysToRemove, context);\n    assertEquals(9, results.size());\n    for (int i = 2; i < 12;) {\n      if (i != 10) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(8));\n    keysToRemove.add(new Integer(11));\n    i1.query(new Integer(11), OQLLexerTokenTypes.TOK_LT, results, keysToRemove, context);\n    assertEquals(10, results.size());\n    for (int i = 0; i < 11;) {\n      if (i != 8) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(8));\n    keysToRemove.add(new Integer(11));\n    i1.query(new Integer(11), OQLLexerTokenTypes.TOK_LE, results, keysToRemove, context);\n    assertEquals(10, results.size());\n    for (int i = 0; i < 11;) {\n      if (i != 8) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(1));\n    keysToRemove.add(new Integer(10));\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_GT, results, keysToRemove, context);\n    assertEquals(9, results.size());\n    for (int i = 2; i < 12;) {\n      if (i != 10) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/RangeIndexAPIJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testQueryMethod_4() throws Exception {\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    AbstractIndex i1 =\n        (AbstractIndex) qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"ID\", \"/portfolios\");\n    AbstractIndex i2 = (AbstractIndex) qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"status\",\n        \"/portfolios\");\n    AbstractIndex i3 = (AbstractIndex) qs.createIndex(\"status.toString()\", IndexType.FUNCTIONAL,\n        \"status.toString\", \"/portfolios\");\n    Set results = new HashSet();\n    DefaultQuery q = new DefaultQuery(\"select * from /portfolios\", CacheUtils.getCache(), false);\n    q.setRemoteQuery(false);\n    ExecutionContext context = new QueryExecutionContext(null, CacheUtils.getCache(), q);\n    bindIterators(context, \"/portfolios\");\n\n    Set keysToRemove = new HashSet();\n    keysToRemove.add(new Integer(5));\n    i1.query(results, keysToRemove, context);\n    assertEquals(11, results.size());\n    for (int i = 0; i < 12;) {\n      if (i != 5) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    results.clear();\n    keysToRemove.clear();\n    keysToRemove.add(new Integer(5));\n    keysToRemove.add(new Integer(8));\n    i1.query(results, keysToRemove, context);\n    assertEquals(10, results.size());\n    for (int i = 0; i < 12;) {\n      if (i != 5 && i != 8) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    results.clear();\n    keysToRemove.clear();\n    keysToRemove.add(\"active\");\n    keysToRemove.add(\"inactive\");\n    i2.query(results, keysToRemove, context);\n    assertEquals(2, results.size());\n    for (int i = 10; i < 12;) {\n      assertTrue(results.contains(region.get(new Integer(i))));\n      ++i;\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":375,"groupId":"36602","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryMethod_4","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/0d/a2b1bdde5954071456d5a5c459d7ed51a23a7c.src","preCode":"  public void testQueryMethod_4() throws Exception {\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    AbstractIndex i1 =\n        (AbstractIndex) qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"ID\", \"/portfolios\");\n    AbstractIndex i2 = (AbstractIndex) qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"status\",\n        \"/portfolios\");\n    AbstractIndex i3 = (AbstractIndex) qs.createIndex(\"status.toString()\", IndexType.FUNCTIONAL,\n        \"status.toString\", \"/portfolios\");\n    Set results = new HashSet();\n    DefaultQuery q = new DefaultQuery(\"select * from /portfolios\", CacheUtils.getCache(), false);\n    q.setRemoteQuery(false);\n    ExecutionContext context = new QueryExecutionContext(null, CacheUtils.getCache(), q);\n    bindIterators(context, \"/portfolios\");\n\n    Set keysToRemove = new HashSet();\n    keysToRemove.add(new Integer(5));\n    i1.query(results, keysToRemove, context);\n    assertEquals(11, results.size());\n    for (int i = 0; i < 12;) {\n      if (i != 5) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    results.clear();\n    keysToRemove.clear();\n    keysToRemove.add(new Integer(5));\n    keysToRemove.add(new Integer(8));\n    i1.query(results, keysToRemove, context);\n    assertEquals(10, results.size());\n    for (int i = 0; i < 12;) {\n      if (i != 5 && i != 8) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    results.clear();\n    keysToRemove.clear();\n    keysToRemove.add(\"active\");\n    keysToRemove.add(\"inactive\");\n    i2.query(results, keysToRemove, context);\n    assertEquals(2, results.size());\n    for (int i = 10; i < 12;) {\n      assertTrue(results.contains(region.get(new Integer(i))));\n      ++i;\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/RangeIndexAPIJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testQueryMethod_2() throws Exception {\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    AbstractIndex i1 =\n        (AbstractIndex) qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"ID\",\n            SEPARATOR + \"portfolios\");\n    AbstractIndex i2 = (AbstractIndex) qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"status\",\n        SEPARATOR + \"portfolios\");\n    AbstractIndex i3 = (AbstractIndex) qs.createIndex(\"status.toString()\", IndexType.FUNCTIONAL,\n        \"status.toString\", SEPARATOR + \"portfolios\");\n\n    Set results = new HashSet();\n    DefaultQuery q = new DefaultQuery(\"select * from \" + SEPARATOR + \"portfolios  \",\n        CacheUtils.getCache(), false);\n    q.setRemoteQuery(false);\n    ExecutionContext context = new QueryExecutionContext(null, CacheUtils.getCache(), q);\n    bindIterators(context, SEPARATOR + \"portfolios\");\n    Set keysToRemove = new HashSet();\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_EQ, results, context);\n    assertEquals(1, results.size());\n    assertTrue(results.iterator().next() == region.get(new Integer(1)));\n    results.clear();\n    keysToRemove.clear();\n    keysToRemove.add(new Integer(1));\n    try {\n      i1.query(new Integer(1), OQLLexerTokenTypes.TOK_EQ, results, keysToRemove, context);\n      fail(\n          \"A condition having an  equal will be identified at RangeJunction level itself, so this type of condition should throw error in RangeIndex where along with an equal there happens not equal conditions\");\n    } catch (AssertionError error) {\n      \r\n    }\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(9));\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_GT, results, keysToRemove, context);\n    assertEquals(9, results.size());\n    for (int i = 2; i < 12;) {\n      if (i != 9) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(1));\n    keysToRemove.add(new Integer(10));\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_GE, results, keysToRemove, context);\n    assertEquals(9, results.size());\n    for (int i = 2; i < 12;) {\n      if (i != 10) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(8));\n    keysToRemove.add(new Integer(11));\n    i1.query(new Integer(11), OQLLexerTokenTypes.TOK_LT, results, keysToRemove, context);\n    assertEquals(10, results.size());\n    for (int i = 0; i < 11;) {\n      if (i != 8) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(8));\n    keysToRemove.add(new Integer(11));\n    i1.query(new Integer(11), OQLLexerTokenTypes.TOK_LE, results, keysToRemove, context);\n    assertEquals(10, results.size());\n    for (int i = 0; i < 11;) {\n      if (i != 8) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(1));\n    keysToRemove.add(new Integer(10));\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_GT, results, keysToRemove, context);\n    assertEquals(9, results.size());\n    for (int i = 2; i < 12;) {\n      if (i != 10) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n  }\n","date":"2020-05-29 00:37:39","endLine":229,"groupId":"104744","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testQueryMethod_2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/59/6dac080c2433878cac0f0251877422de914fb4.src","preCode":"  public void testQueryMethod_2() throws Exception {\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    AbstractIndex i1 =\n        (AbstractIndex) qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"ID\", \"/portfolios\");\n    AbstractIndex i2 = (AbstractIndex) qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"status\",\n        \"/portfolios\");\n    AbstractIndex i3 = (AbstractIndex) qs.createIndex(\"status.toString()\", IndexType.FUNCTIONAL,\n        \"status.toString\", \"/portfolios\");\n\n    Set results = new HashSet();\n    DefaultQuery q = new DefaultQuery(\"select * from /portfolios  \", CacheUtils.getCache(), false);\n    q.setRemoteQuery(false);\n    ExecutionContext context = new QueryExecutionContext(null, CacheUtils.getCache(), q);\n    bindIterators(context, \"/portfolios\");\n    Set keysToRemove = new HashSet();\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_EQ, results, context);\n    assertEquals(1, results.size());\n    assertTrue(results.iterator().next() == region.get(new Integer(1)));\n    results.clear();\n    keysToRemove.clear();\n    keysToRemove.add(new Integer(1));\n    try {\n      i1.query(new Integer(1), OQLLexerTokenTypes.TOK_EQ, results, keysToRemove, context);\n      fail(\n          \"A condition having an  equal will be identified at RangeJunction level itself, so this type of condition should throw error in RangeIndex where along with an equal there happens not equal conditions\");\n    } catch (AssertionError error) {\n      \r\n    }\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(9));\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_GT, results, keysToRemove, context);\n    assertEquals(9, results.size());\n    for (int i = 2; i < 12;) {\n      if (i != 9) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(1));\n    keysToRemove.add(new Integer(10));\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_GE, results, keysToRemove, context);\n    assertEquals(9, results.size());\n    for (int i = 2; i < 12;) {\n      if (i != 10) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(8));\n    keysToRemove.add(new Integer(11));\n    i1.query(new Integer(11), OQLLexerTokenTypes.TOK_LT, results, keysToRemove, context);\n    assertEquals(10, results.size());\n    for (int i = 0; i < 11;) {\n      if (i != 8) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(8));\n    keysToRemove.add(new Integer(11));\n    i1.query(new Integer(11), OQLLexerTokenTypes.TOK_LE, results, keysToRemove, context);\n    assertEquals(10, results.size());\n    for (int i = 0; i < 11;) {\n      if (i != 8) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    keysToRemove.clear();\n    results.clear();\n    keysToRemove.add(new Integer(1));\n    keysToRemove.add(new Integer(10));\n    i1.query(new Integer(1), OQLLexerTokenTypes.TOK_GT, results, keysToRemove, context);\n    assertEquals(9, results.size());\n    for (int i = 2; i < 12;) {\n      if (i != 10) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/RangeIndexAPIJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testQueryMethod_4() throws Exception {\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    AbstractIndex i1 =\n        (AbstractIndex) qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"ID\",\n            SEPARATOR + \"portfolios\");\n    AbstractIndex i2 = (AbstractIndex) qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"status\",\n        SEPARATOR + \"portfolios\");\n    AbstractIndex i3 = (AbstractIndex) qs.createIndex(\"status.toString()\", IndexType.FUNCTIONAL,\n        \"status.toString\", SEPARATOR + \"portfolios\");\n    Set results = new HashSet();\n    DefaultQuery q =\n        new DefaultQuery(\"select * from \" + SEPARATOR + \"portfolios\", CacheUtils.getCache(), false);\n    q.setRemoteQuery(false);\n    ExecutionContext context = new QueryExecutionContext(null, CacheUtils.getCache(), q);\n    bindIterators(context, SEPARATOR + \"portfolios\");\n\n    Set keysToRemove = new HashSet();\n    keysToRemove.add(new Integer(5));\n    i1.query(results, keysToRemove, context);\n    assertEquals(11, results.size());\n    for (int i = 0; i < 12;) {\n      if (i != 5) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    results.clear();\n    keysToRemove.clear();\n    keysToRemove.add(new Integer(5));\n    keysToRemove.add(new Integer(8));\n    i1.query(results, keysToRemove, context);\n    assertEquals(10, results.size());\n    for (int i = 0; i < 12;) {\n      if (i != 5 && i != 8) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    results.clear();\n    keysToRemove.clear();\n    keysToRemove.add(\"active\");\n    keysToRemove.add(\"inactive\");\n    i2.query(results, keysToRemove, context);\n    assertEquals(2, results.size());\n    for (int i = 10; i < 12;) {\n      assertTrue(results.contains(region.get(new Integer(i))));\n      ++i;\n    }\n  }\n","date":"2020-05-29 00:37:39","endLine":384,"groupId":"104744","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testQueryMethod_4","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/59/6dac080c2433878cac0f0251877422de914fb4.src","preCode":"  public void testQueryMethod_4() throws Exception {\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n    AbstractIndex i1 =\n        (AbstractIndex) qs.createIndex(\"idIndex\", IndexType.FUNCTIONAL, \"ID\", \"/portfolios\");\n    AbstractIndex i2 = (AbstractIndex) qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"status\",\n        \"/portfolios\");\n    AbstractIndex i3 = (AbstractIndex) qs.createIndex(\"status.toString()\", IndexType.FUNCTIONAL,\n        \"status.toString\", \"/portfolios\");\n    Set results = new HashSet();\n    DefaultQuery q = new DefaultQuery(\"select * from /portfolios\", CacheUtils.getCache(), false);\n    q.setRemoteQuery(false);\n    ExecutionContext context = new QueryExecutionContext(null, CacheUtils.getCache(), q);\n    bindIterators(context, \"/portfolios\");\n\n    Set keysToRemove = new HashSet();\n    keysToRemove.add(new Integer(5));\n    i1.query(results, keysToRemove, context);\n    assertEquals(11, results.size());\n    for (int i = 0; i < 12;) {\n      if (i != 5) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    results.clear();\n    keysToRemove.clear();\n    keysToRemove.add(new Integer(5));\n    keysToRemove.add(new Integer(8));\n    i1.query(results, keysToRemove, context);\n    assertEquals(10, results.size());\n    for (int i = 0; i < 12;) {\n      if (i != 5 && i != 8) {\n        assertTrue(results.contains(region.get(new Integer(i))));\n      }\n      ++i;\n    }\n\n    results.clear();\n    keysToRemove.clear();\n    keysToRemove.add(\"active\");\n    keysToRemove.add(\"inactive\");\n    i2.query(results, keysToRemove, context);\n    assertEquals(2, results.size());\n    for (int i = 10; i < 12;) {\n      assertTrue(results.contains(region.get(new Integer(i))));\n      ++i;\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/RangeIndexAPIJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
