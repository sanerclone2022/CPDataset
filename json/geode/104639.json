[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testMapIndexUsableQueryOnEmptyRegion() throws Exception {\n    IndexManager.TEST_RANGEINDEX_ONLY = true;\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n    Index i1 =\n        qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"objs.maap['key2','key3']\", \"/testRgn objs\");\n    qs = CacheUtils.getQueryService();\n    \r\n    Query q = CacheUtils.getQueryService()\n        .newQuery(\"SELECT DISTINCT * FROM /testRgn itr1  WHERE itr1.maap['key2'] >= 3 \");\n    SelectResults sr = (SelectResults) q.execute();\n    assertTrue(sr.isEmpty());\n  }\n","date":"2018-07-18 03:54:18","endLine":848,"groupId":"49882","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMapIndexUsableQueryOnEmptyRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/69/c58110d1e654d3465022d2caaa0e30f95a803c.src","preCode":"  public void testMapIndexUsableQueryOnEmptyRegion() throws Exception {\n    IndexManager.TEST_RANGEINDEX_ONLY = true;\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n    Index i1 =\n        qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"objs.maap['key2','key3']\", \"/testRgn objs\");\n    qs = CacheUtils.getQueryService();\n    \r\n    Query q = CacheUtils.getQueryService()\n        .newQuery(\"SELECT DISTINCT * FROM /testRgn itr1  WHERE itr1.maap['key2'] >= 3 \");\n    SelectResults sr = (SelectResults) q.execute();\n    assertTrue(sr.isEmpty());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":836,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testSizeEstimateLTInRangeIndexForNullMap() throws Exception {\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n    \r\n    Index i1 =\n        qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"p.status\", \"/testRgn p, p.positions\");\n    Index i2 = qs.createIndex(\"Index2\", IndexType.FUNCTIONAL, \"p.ID\", \"/testRgn p, p.positions\");\n\n    \r\n    testRgn.put(0, new Portfolio(0));\n    testRgn.put(1, new Portfolio(1));\n\n    \r\n    TestHook hook = new RangeIndexTestHook();\n    RangeIndex.setTestHook(hook);\n    \r\n    Query q = CacheUtils.getQueryService().newQuery(\n        \"<trace> SELECT * FROM /testRgn p, p.positions where p.status = 'active' AND p.ID > 0 \");\n\n    \r\n    SelectResults sr = (SelectResults) q.execute();\n\n    assertTrue(\"RangeIndexTestHook was not hooked for spot 2\",\n        ((RangeIndexTestHook) hook).isHooked(2));\n    RangeIndex.setTestHook(null);\n  }\n","date":"2018-07-18 03:54:18","endLine":876,"groupId":"49884","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSizeEstimateLTInRangeIndexForNullMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/69/c58110d1e654d3465022d2caaa0e30f95a803c.src","preCode":"  public void testSizeEstimateLTInRangeIndexForNullMap() throws Exception {\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n    \r\n    Index i1 =\n        qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"p.status\", \"/testRgn p, p.positions\");\n    Index i2 = qs.createIndex(\"Index2\", IndexType.FUNCTIONAL, \"p.ID\", \"/testRgn p, p.positions\");\n\n    \r\n    testRgn.put(0, new Portfolio(0));\n    testRgn.put(1, new Portfolio(1));\n\n    \r\n    TestHook hook = new RangeIndexTestHook();\n    RangeIndex.setTestHook(hook);\n    \r\n    Query q = CacheUtils.getQueryService().newQuery(\n        \"<trace> SELECT * FROM /testRgn p, p.positions where p.status = 'active' AND p.ID > 0 \");\n\n    \r\n    SelectResults sr = (SelectResults) q.execute();\n\n    assertTrue(\"RangeIndexTestHook was not hooked for spot 2\",\n        ((RangeIndexTestHook) hook).isHooked(2));\n    RangeIndex.setTestHook(null);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":851,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testMapIndexUsableQueryOnEmptyRegion() throws Exception {\n    IndexManager.TEST_RANGEINDEX_ONLY = true;\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n    Index i1 =\n        qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"objs.maap['key2','key3']\",\n            SEPARATOR + \"testRgn objs\");\n    qs = CacheUtils.getQueryService();\n    \r\n    Query q = CacheUtils.getQueryService()\n        .newQuery(\n            \"SELECT DISTINCT * FROM \" + SEPARATOR + \"testRgn itr1  WHERE itr1.maap['key2'] >= 3 \");\n    SelectResults sr = (SelectResults) q.execute();\n    assertTrue(sr.isEmpty());\n  }\n","date":"2020-05-29 00:37:39","endLine":879,"groupId":"104639","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testMapIndexUsableQueryOnEmptyRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5d/1a1f1313fd495ea562370d8b35707c312c307c.src","preCode":"  public void testMapIndexUsableQueryOnEmptyRegion() throws Exception {\n    IndexManager.TEST_RANGEINDEX_ONLY = true;\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n    Index i1 =\n        qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"objs.maap['key2','key3']\", \"/testRgn objs\");\n    qs = CacheUtils.getQueryService();\n    \r\n    Query q = CacheUtils.getQueryService()\n        .newQuery(\"SELECT DISTINCT * FROM /testRgn itr1  WHERE itr1.maap['key2'] >= 3 \");\n    SelectResults sr = (SelectResults) q.execute();\n    assertTrue(sr.isEmpty());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":865,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testSizeEstimateLTInRangeIndexForNullMap() throws Exception {\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n    \r\n    Index i1 =\n        qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"p.status\",\n            SEPARATOR + \"testRgn p, p.positions\");\n    Index i2 = qs.createIndex(\"Index2\", IndexType.FUNCTIONAL, \"p.ID\",\n        SEPARATOR + \"testRgn p, p.positions\");\n\n    \r\n    testRgn.put(0, new Portfolio(0));\n    testRgn.put(1, new Portfolio(1));\n\n    \r\n    TestHook hook = new RangeIndexTestHook();\n    RangeIndex.setTestHook(hook);\n    \r\n    Query q = CacheUtils.getQueryService().newQuery(\n        \"<trace> SELECT * FROM \" + SEPARATOR\n            + \"testRgn p, p.positions where p.status = 'active' AND p.ID > 0 \");\n\n    \r\n    SelectResults sr = (SelectResults) q.execute();\n\n    assertTrue(\"RangeIndexTestHook was not hooked for spot 2\",\n        ((RangeIndexTestHook) hook).isHooked(2));\n    RangeIndex.setTestHook(null);\n  }\n","date":"2020-05-29 00:37:39","endLine":910,"groupId":"104639","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testSizeEstimateLTInRangeIndexForNullMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5d/1a1f1313fd495ea562370d8b35707c312c307c.src","preCode":"  public void testSizeEstimateLTInRangeIndexForNullMap() throws Exception {\n    QueryService qs = CacheUtils.getQueryService();\n    LocalRegion testRgn = (LocalRegion) CacheUtils.createRegion(\"testRgn\", null);\n    \r\n    Index i1 =\n        qs.createIndex(\"Index1\", IndexType.FUNCTIONAL, \"p.status\", \"/testRgn p, p.positions\");\n    Index i2 = qs.createIndex(\"Index2\", IndexType.FUNCTIONAL, \"p.ID\", \"/testRgn p, p.positions\");\n\n    \r\n    testRgn.put(0, new Portfolio(0));\n    testRgn.put(1, new Portfolio(1));\n\n    \r\n    TestHook hook = new RangeIndexTestHook();\n    RangeIndex.setTestHook(hook);\n    \r\n    Query q = CacheUtils.getQueryService().newQuery(\n        \"<trace> SELECT * FROM /testRgn p, p.positions where p.status = 'active' AND p.ID > 0 \");\n\n    \r\n    SelectResults sr = (SelectResults) q.execute();\n\n    assertTrue(\"RangeIndexTestHook was not hooked for spot 2\",\n        ((RangeIndexTestHook) hook).isHooked(2));\n    RangeIndex.setTestHook(null);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexUseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":882,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
