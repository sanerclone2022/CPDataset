[{"authorTime":"2019-10-26 00:34:11","codes":[{"authorDate":"2019-10-26 00:34:11","commitOrder":1,"curCode":"  public void setUp() {\n    InternalCache mockCache = mock(InternalCache.class);\n    when(mockCache.getQueryService()).thenReturn(mock(InternalQueryService.class));\n    when(mockCache.getQueryService().getMethodInvocationAuthorizer())\n        .thenReturn(mock(MethodInvocationAuthorizer.class));\n\n    context = new QueryExecutionContext(null, mockCache);\n  }\n","date":"2019-10-26 00:34:11","endLine":55,"groupId":"25122","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/74/bc4f114f432f71507497785a41e9285f6af32a.src","preCode":"  public void setUp() {\n    InternalCache mockCache = mock(InternalCache.class);\n    when(mockCache.getQueryService()).thenReturn(mock(InternalQueryService.class));\n    when(mockCache.getQueryService().getMethodInvocationAuthorizer())\n        .thenReturn(mock(MethodInvocationAuthorizer.class));\n\n    context = new QueryExecutionContext(null, mockCache);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/query/internal/QCompilerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2019-10-26 00:34:11","commitOrder":1,"curCode":"  public void setUp() {\n    InternalCache mockCache = mock(InternalCache.class);\n    when(mockCache.getQueryService()).thenReturn(mock(InternalQueryService.class));\n    when(mockCache.getQueryService().getMethodInvocationAuthorizer())\n        .thenReturn(mock(MethodInvocationAuthorizer.class));\n\n    context = new QueryExecutionContext(null, mockCache);\n  }\n","date":"2019-10-26 00:34:11","endLine":39,"groupId":"25122","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f7/ec2fc3a8b554aff5aa90f07e3f5852a593add3.src","preCode":"  public void setUp() {\n    InternalCache mockCache = mock(InternalCache.class);\n    when(mockCache.getQueryService()).thenReturn(mock(InternalQueryService.class));\n    when(mockCache.getQueryService().getMethodInvocationAuthorizer())\n        .thenReturn(mock(MethodInvocationAuthorizer.class));\n\n    context = new QueryExecutionContext(null, mockCache);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/query/internal/QueryExecutionContextTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"B"}],"commitId":"bd03dc7ff99e9cf95b3d9a9369ec8b0de308620d","commitMessage":"@@@GEODE-7283: Store MethodAuthorizer in Context (#4179)\n\nThe MethodInvocationAuthorizer should be unique per query and should\nnot be changed for a particular query while it's being executed so. \nstarting with this commit.  it is directly stored as part of the\nExecutionContext. This also prevents the creation of multiple instances\nof the DefaultQueryService and the configured authorizer itself while\nthe intermediate result objects are being traversed during the query\nevaluation.\n\n- Added tests.\n- Fixed minor warnings and spelling.\n- Replaced usages of 'junit.Assert' by 'assertj'.\n- The AttributeDescriptor and MethodDispatch classes do not require\n  MethodInvocationAuthorizer as a constructor parameter anymore.  the\n  authorizer is obtained from the context.  and **only** when needed.\n- The MethodDispatch class does not internally store and cache the\n  MethodInvocationAuthorizer instance anymore.  thus allowing Geode to\n  change the authorizer in runtime without needing to re-load every\n  already known method (expensive due to reflection).\n- The ExecutionContext uses a no-op authorizer when created from a\n  client cache: authorization and authentication logic happens only on\n  server side.  and the authorizer will be obtained from the cluster\n  configuration service directly instead of the query service when OQL\n  security is fully implemented.","date":"2019-10-26 00:34:11","modifiedFileCount":"15","status":"B","submitter":"Juan Jos? Ramos"},{"authorTime":"2019-11-28 21:05:19","codes":[{"authorDate":"2019-11-28 21:05:19","commitOrder":2,"curCode":"  public void setUp() {\n    QueryConfigurationService mockService = mock(QueryConfigurationService.class);\n    when(mockService.getMethodAuthorizer()).thenReturn(mock(MethodInvocationAuthorizer.class));\n    InternalCache mockCache = mock(InternalCache.class);\n    when(mockCache.getService(QueryConfigurationService.class)).thenReturn(mockService);\n\n    context = new QueryExecutionContext(null, mockCache);\n  }\n","date":"2019-11-28 21:05:19","endLine":55,"groupId":"103065","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/fc/f4bbdc958f0da2cc122792fe2bd54b4b738cae.src","preCode":"  public void setUp() {\n    InternalCache mockCache = mock(InternalCache.class);\n    when(mockCache.getQueryService()).thenReturn(mock(InternalQueryService.class));\n    when(mockCache.getQueryService().getMethodInvocationAuthorizer())\n        .thenReturn(mock(MethodInvocationAuthorizer.class));\n\n    context = new QueryExecutionContext(null, mockCache);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/query/internal/QCompilerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-11-28 21:05:19","commitOrder":2,"curCode":"  public void setUp() {\n    QueryConfigurationService mockService = mock(QueryConfigurationService.class);\n    when(mockService.getMethodAuthorizer()).thenReturn(mock(MethodInvocationAuthorizer.class));\n    InternalCache mockCache = mock(InternalCache.class);\n    when(mockCache.getService(QueryConfigurationService.class)).thenReturn(mockService);\n\n    context = new QueryExecutionContext(null, mockCache);\n  }\n","date":"2019-11-28 21:05:19","endLine":39,"groupId":"103065","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6e/dc0381d0c9ec9c4dbfaf4c58b7bd6f52add310.src","preCode":"  public void setUp() {\n    InternalCache mockCache = mock(InternalCache.class);\n    when(mockCache.getQueryService()).thenReturn(mock(InternalQueryService.class));\n    when(mockCache.getQueryService().getMethodInvocationAuthorizer())\n        .thenReturn(mock(MethodInvocationAuthorizer.class));\n\n    context = new QueryExecutionContext(null, mockCache);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/query/internal/QueryExecutionContextTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"}],"commitId":"693323257481dbf5b785421061369abb5497742e","commitMessage":"@@@GEODE-7487: Update Running CQ Context (#4369)\n\n- Added unit and integration tests.\n- Implemented method to invalidate the cache used by CQs.\n- Updated the context implementation to change the internal\n  MethodInvocationAuthorizer used whenever the CQ resets the\n  ExecutionContext.\n- Added a warning message whenever the MethodInvocationAuthorizer \n  returned by the QueryConfigurationService is null.","date":"2019-11-28 21:05:19","modifiedFileCount":"15","status":"M","submitter":"Juan Jos? Ramos"}]
