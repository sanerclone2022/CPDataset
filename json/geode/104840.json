[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testMiscQueries() throws Exception {\n    String testData[][] = {{\"/Portfolios.fullPath\", \"/Portfolios\"}, {\"/Portfolios.size\", \"4\"},\n        {\"/Portfolios.size > 0\", \"true\"},};\n    for (int i = 0; i < testData.length; i++) {\n      Query query = CacheUtils.getQueryService().newQuery(testData[i][0]);\n      String result = query.execute().toString();\n      if (!result.equals(testData[i][1]))\n        fail(query.getQueryString());\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":97,"groupId":"9208","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMiscQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/07/dd10b878c1184df618144d31a5d3d34c77013b.src","preCode":"  public void testMiscQueries() throws Exception {\n    String testData[][] = {{\"/Portfolios.fullPath\", \"/Portfolios\"}, {\"/Portfolios.size\", \"4\"},\n        {\"/Portfolios.size > 0\", \"true\"},};\n    for (int i = 0; i < testData.length; i++) {\n      Query query = CacheUtils.getQueryService().newQuery(testData[i][0]);\n      String result = query.execute().toString();\n      if (!result.equals(testData[i][1]))\n        fail(query.getQueryString());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QRegionInterfaceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testBug35905ContainsValue() throws Exception {\n    String testData[][] = {{\"/Portfolios.containsValue($1)\", \"true\"},};\n    for (int i = 0; i < testData.length; i++) {\n      Query query = CacheUtils.getQueryService().newQuery(testData[i][0]);\n      String result =\n          query.execute(new Object[] {CacheUtils.getRegion(\"/Portfolios\").get(\"1\")}).toString();\n      if (!result.equals(testData[i][1]))\n        fail(query.getQueryString());\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":127,"groupId":"35646","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBug35905ContainsValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/07/dd10b878c1184df618144d31a5d3d34c77013b.src","preCode":"  public void testBug35905ContainsValue() throws Exception {\n    String testData[][] = {{\"/Portfolios.containsValue($1)\", \"true\"},};\n    for (int i = 0; i < testData.length; i++) {\n      Query query = CacheUtils.getQueryService().newQuery(testData[i][0]);\n      String result =\n          query.execute(new Object[] {CacheUtils.getRegion(\"/Portfolios\").get(\"1\")}).toString();\n      if (!result.equals(testData[i][1]))\n        fail(query.getQueryString());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QRegionInterfaceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testMiscQueries() throws Exception {\n    String testData[][] = {{SEPARATOR + \"Portfolios.fullPath\", SEPARATOR + \"Portfolios\"},\n        {SEPARATOR + \"Portfolios.size\", \"4\"},\n        {SEPARATOR + \"Portfolios.size > 0\", \"true\"},};\n    for (int i = 0; i < testData.length; i++) {\n      Query query = CacheUtils.getQueryService().newQuery(testData[i][0]);\n      String result = query.execute().toString();\n      if (!result.equals(testData[i][1]))\n        fail(query.getQueryString());\n    }\n  }\n","date":"2020-05-29 00:37:39","endLine":100,"groupId":"9208","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMiscQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8c/e6b4c0bbefa7a48f82856f215ce21223df413c.src","preCode":"  public void testMiscQueries() throws Exception {\n    String testData[][] = {{\"/Portfolios.fullPath\", \"/Portfolios\"}, {\"/Portfolios.size\", \"4\"},\n        {\"/Portfolios.size > 0\", \"true\"},};\n    for (int i = 0; i < testData.length; i++) {\n      Query query = CacheUtils.getQueryService().newQuery(testData[i][0]);\n      String result = query.execute().toString();\n      if (!result.equals(testData[i][1]))\n        fail(query.getQueryString());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QRegionInterfaceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testBug35905ContainsValue() throws Exception {\n    String testData[][] = {{SEPARATOR + \"Portfolios.containsValue($1)\", \"true\"},};\n    for (int i = 0; i < testData.length; i++) {\n      Query query = CacheUtils.getQueryService().newQuery(testData[i][0]);\n      String result =\n          query.execute(new Object[] {CacheUtils.getRegion(SEPARATOR + \"Portfolios\").get(\"1\")})\n              .toString();\n      if (!result.equals(testData[i][1]))\n        fail(query.getQueryString());\n    }\n  }\n","date":"2020-05-29 00:37:39","endLine":132,"groupId":"35646","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBug35905ContainsValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8c/e6b4c0bbefa7a48f82856f215ce21223df413c.src","preCode":"  public void testBug35905ContainsValue() throws Exception {\n    String testData[][] = {{\"/Portfolios.containsValue($1)\", \"true\"},};\n    for (int i = 0; i < testData.length; i++) {\n      Query query = CacheUtils.getQueryService().newQuery(testData[i][0]);\n      String result =\n          query.execute(new Object[] {CacheUtils.getRegion(\"/Portfolios\").get(\"1\")}).toString();\n      if (!result.equals(testData[i][1]))\n        fail(query.getQueryString());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QRegionInterfaceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"},{"authorTime":"2021-06-04 00:32:09","codes":[{"authorDate":"2021-06-04 00:32:09","commitOrder":3,"curCode":"  public void testMiscQueries() throws Exception {\n    String testData[][] = {{SEPARATOR + \"Portfolios.fullPath\", SEPARATOR + \"Portfolios\"},\n        {SEPARATOR + \"Portfolios.size\", \"4\"},\n        {SEPARATOR + \"Portfolios.size > 0\", \"true\"},};\n    for (int i = 0; i < testData.length; i++) {\n      Query query = CacheUtils.getQueryService().newQuery(testData[i][0]);\n      String result = query.execute().toString();\n      if (!result.equals(testData[i][1])) {\n        fail(query.getQueryString());\n      }\n    }\n  }\n","date":"2021-06-04 00:32:09","endLine":104,"groupId":"104840","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testMiscQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/27784073d5ce4e46a0c3bb35362208f1e74f17.src","preCode":"  public void testMiscQueries() throws Exception {\n    String testData[][] = {{SEPARATOR + \"Portfolios.fullPath\", SEPARATOR + \"Portfolios\"},\n        {SEPARATOR + \"Portfolios.size\", \"4\"},\n        {SEPARATOR + \"Portfolios.size > 0\", \"true\"},};\n    for (int i = 0; i < testData.length; i++) {\n      Query query = CacheUtils.getQueryService().newQuery(testData[i][0]);\n      String result = query.execute().toString();\n      if (!result.equals(testData[i][1]))\n        fail(query.getQueryString());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QRegionInterfaceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2021-06-04 00:32:09","commitOrder":3,"curCode":"  public void testBug35905ContainsValue() throws Exception {\n    String testData[][] = {{SEPARATOR + \"Portfolios.containsValue($1)\", \"true\"},};\n    for (int i = 0; i < testData.length; i++) {\n      Query query = CacheUtils.getQueryService().newQuery(testData[i][0]);\n      String result =\n          query.execute(new Object[] {CacheUtils.getRegion(SEPARATOR + \"Portfolios\").get(\"1\")})\n              .toString();\n      if (!result.equals(testData[i][1])) {\n        fail(query.getQueryString());\n      }\n    }\n  }\n","date":"2021-06-04 00:32:09","endLine":139,"groupId":"104840","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testBug35905ContainsValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/27784073d5ce4e46a0c3bb35362208f1e74f17.src","preCode":"  public void testBug35905ContainsValue() throws Exception {\n    String testData[][] = {{SEPARATOR + \"Portfolios.containsValue($1)\", \"true\"},};\n    for (int i = 0; i < testData.length; i++) {\n      Query query = CacheUtils.getQueryService().newQuery(testData[i][0]);\n      String result =\n          query.execute(new Object[] {CacheUtils.getRegion(SEPARATOR + \"Portfolios\").get(\"1\")})\n              .toString();\n      if (!result.equals(testData[i][1]))\n        fail(query.getQueryString());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/QRegionInterfaceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"2879573ffb04e9e029e14ca37d8a064268cc8f44","commitMessage":"@@@GEODE-7864: Always use curly braces for control flow statements (#6523)\n\nAuthored-by: Donal Evans <doevans@vmware.com>","date":"2021-06-04 00:32:09","modifiedFileCount":"640","status":"M","submitter":"Donal Evans"}]
