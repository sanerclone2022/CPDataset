[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  protected void addClientNotifListener(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable addClientNotifListener =\n        new SerializableRunnable(\"Add Client Notif Listener\") {\n          public void run() {\n            GemFireCacheImpl cache = GemFireCacheImpl.getInstance();\n            ManagementService service = ManagementService.getManagementService(cache);\n            final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n            assertNotNull(bean);\n            WaitCriterion ev = new WaitCriterion() {\n              public boolean done() {\n                if (bean.isRunning())\n                  return true;\n                return false;\n              }\n\n              public String description() {\n                return null;\n              }\n            };\n            Wait.waitForCriterion(ev, 10 * 1000, 200, true);\n            assertTrue(bean.isRunning());\n            TestCacheServerNotif nt = new TestCacheServerNotif();\n            try {\n              mbeanServer.addNotificationListener(MBeanJMXAdapter.getClientServiceMBeanName(\n                  serverPort, cache.getDistributedSystem().getMemberId()), nt, null, null);\n            } catch (InstanceNotFoundException e) {\n              fail(\"Failed With Exception \" + e);\n            }\n\n          }\n        };\n    vm.invoke(addClientNotifListener);\n  }\n","date":"2018-07-18 03:54:18","endLine":346,"groupId":"33637","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addClientNotifListener","params":"(finalVMvm@finalintserverPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7c/b3fdeca8d128e6c55bc171be688097cdda8ff0.src","preCode":"  protected void addClientNotifListener(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable addClientNotifListener =\n        new SerializableRunnable(\"Add Client Notif Listener\") {\n          public void run() {\n            GemFireCacheImpl cache = GemFireCacheImpl.getInstance();\n            ManagementService service = ManagementService.getManagementService(cache);\n            final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n            assertNotNull(bean);\n            WaitCriterion ev = new WaitCriterion() {\n              public boolean done() {\n                if (bean.isRunning())\n                  return true;\n                return false;\n              }\n\n              public String description() {\n                return null;\n              }\n            };\n            Wait.waitForCriterion(ev, 10 * 1000, 200, true);\n            assertTrue(bean.isRunning());\n            TestCacheServerNotif nt = new TestCacheServerNotif();\n            try {\n              mbeanServer.addNotificationListener(MBeanJMXAdapter.getClientServiceMBeanName(\n                  serverPort, cache.getDistributedSystem().getMemberId()), nt, null, null);\n            } catch (InstanceNotFoundException e) {\n              fail(\"Failed With Exception \" + e);\n            }\n\n          }\n        };\n    vm.invoke(addClientNotifListener);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/management/CacheServerManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  protected void verifyCacheServer(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable verifyCacheServer = new SerializableRunnable(\"Verify Cache Server\") {\n      public void run() {\n        GemFireCacheImpl cache = GemFireCacheImpl.getInstance();\n        ManagementService service = ManagementService.getManagementService(cache);\n        final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n        assertNotNull(bean);\n        WaitCriterion ev = new WaitCriterion() {\n          public boolean done() {\n            if (bean.isRunning())\n              return true;\n            return false;\n          }\n\n          public String description() {\n            return null;\n          }\n        };\n        Wait.waitForCriterion(ev, 10 * 1000, 200, true);\n        assertTrue(bean.isRunning());\n        assertCacheServerConfig(bean);\n\n      }\n    };\n    vm.invoke(verifyCacheServer);\n  }\n","date":"2018-07-18 03:54:18","endLine":438,"groupId":"33637","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyCacheServer","params":"(finalVMvm@finalintserverPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7c/b3fdeca8d128e6c55bc171be688097cdda8ff0.src","preCode":"  protected void verifyCacheServer(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable verifyCacheServer = new SerializableRunnable(\"Verify Cache Server\") {\n      public void run() {\n        GemFireCacheImpl cache = GemFireCacheImpl.getInstance();\n        ManagementService service = ManagementService.getManagementService(cache);\n        final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n        assertNotNull(bean);\n        WaitCriterion ev = new WaitCriterion() {\n          public boolean done() {\n            if (bean.isRunning())\n              return true;\n            return false;\n          }\n\n          public String description() {\n            return null;\n          }\n        };\n        Wait.waitForCriterion(ev, 10 * 1000, 200, true);\n        assertTrue(bean.isRunning());\n        assertCacheServerConfig(bean);\n\n      }\n    };\n    vm.invoke(verifyCacheServer);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/management/CacheServerManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":413,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-10-06 04:56:13","codes":[{"authorDate":"2018-10-06 04:56:13","commitOrder":2,"curCode":"  protected void addClientNotifListener(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable addClientNotifListener =\n        new SerializableRunnable(\"Add Client Notif Listener\") {\n          public void run() {\n            GemFireCacheImpl cache = getInstance();\n            ManagementService service = getManagementService(cache);\n            final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n            assertNotNull(bean);\n            WaitCriterion ev = new WaitCriterion() {\n              public boolean done() {\n                if (bean.isRunning())\n                  return true;\n                return false;\n              }\n\n              public String description() {\n                return null;\n              }\n            };\n            GeodeAwaitility.await().untilAsserted(ev);\n            assertTrue(bean.isRunning());\n            TestCacheServerNotif nt = new TestCacheServerNotif();\n            try {\n              mbeanServer.addNotificationListener(getClientServiceMBeanName(\n                  serverPort, cache.getDistributedSystem().getMemberId()), nt, null, null);\n            } catch (InstanceNotFoundException e) {\n              fail(\"Failed With Exception \" + e);\n            }\n\n          }\n        };\n    vm.invoke(addClientNotifListener);\n  }\n","date":"2018-10-19 08:01:02","endLine":350,"groupId":"31567","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addClientNotifListener","params":"(finalVMvm@finalintserverPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/15/7ea193b80324878d2544d806807e6486ae76f7.src","preCode":"  protected void addClientNotifListener(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable addClientNotifListener =\n        new SerializableRunnable(\"Add Client Notif Listener\") {\n          public void run() {\n            GemFireCacheImpl cache = GemFireCacheImpl.getInstance();\n            ManagementService service = ManagementService.getManagementService(cache);\n            final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n            assertNotNull(bean);\n            WaitCriterion ev = new WaitCriterion() {\n              public boolean done() {\n                if (bean.isRunning())\n                  return true;\n                return false;\n              }\n\n              public String description() {\n                return null;\n              }\n            };\n            Wait.waitForCriterion(ev, 10 * 1000, 200, true);\n            assertTrue(bean.isRunning());\n            TestCacheServerNotif nt = new TestCacheServerNotif();\n            try {\n              mbeanServer.addNotificationListener(MBeanJMXAdapter.getClientServiceMBeanName(\n                  serverPort, cache.getDistributedSystem().getMemberId()), nt, null, null);\n            } catch (InstanceNotFoundException e) {\n              fail(\"Failed With Exception \" + e);\n            }\n\n          }\n        };\n    vm.invoke(addClientNotifListener);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/management/CacheServerManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"},{"authorDate":"2018-10-06 04:56:13","commitOrder":2,"curCode":"  protected void verifyCacheServer(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable verifyCacheServer = new SerializableRunnable(\"Verify Cache Server\") {\n      public void run() {\n        GemFireCacheImpl cache = getInstance();\n        ManagementService service = getManagementService(cache);\n        final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n        assertNotNull(bean);\n        WaitCriterion ev = new WaitCriterion() {\n          public boolean done() {\n            if (bean.isRunning())\n              return true;\n            return false;\n          }\n\n          public String description() {\n            return null;\n          }\n        };\n        GeodeAwaitility.await().untilAsserted(ev);\n        assertTrue(bean.isRunning());\n        assertCacheServerConfig(bean);\n\n      }\n    };\n    vm.invoke(verifyCacheServer);\n  }\n","date":"2018-10-19 08:01:02","endLine":442,"groupId":"31567","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyCacheServer","params":"(finalVMvm@finalintserverPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/15/7ea193b80324878d2544d806807e6486ae76f7.src","preCode":"  protected void verifyCacheServer(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable verifyCacheServer = new SerializableRunnable(\"Verify Cache Server\") {\n      public void run() {\n        GemFireCacheImpl cache = GemFireCacheImpl.getInstance();\n        ManagementService service = ManagementService.getManagementService(cache);\n        final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n        assertNotNull(bean);\n        WaitCriterion ev = new WaitCriterion() {\n          public boolean done() {\n            if (bean.isRunning())\n              return true;\n            return false;\n          }\n\n          public String description() {\n            return null;\n          }\n        };\n        Wait.waitForCriterion(ev, 10 * 1000, 200, true);\n        assertTrue(bean.isRunning());\n        assertCacheServerConfig(bean);\n\n      }\n    };\n    vm.invoke(verifyCacheServer);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/management/CacheServerManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"M"}],"commitId":"8fa6ef6205938767d0106810daca1f91ee8bb3a8","commitMessage":"@@@GEODE-5424: Replacing calls to waitForCriterion with Awaitility\n\nReplacing all of the calls to waitForCriterion with awaitility instead. \nto use a standard timeout.\n","date":"2018-10-19 08:01:02","modifiedFileCount":"132","status":"M","submitter":"Dan Smith"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  protected void addClientNotifListener(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable addClientNotifListener =\n        new SerializableRunnable(\"Add Client Notif Listener\") {\n          @Override\n          public void run() {\n            GemFireCacheImpl cache = getInstance();\n            ManagementService service = getManagementService(cache);\n            final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n            assertNotNull(bean);\n            WaitCriterion ev = new WaitCriterion() {\n              @Override\n              public boolean done() {\n                if (bean.isRunning())\n                  return true;\n                return false;\n              }\n\n              @Override\n              public String description() {\n                return null;\n              }\n            };\n            GeodeAwaitility.await().untilAsserted(ev);\n            assertTrue(bean.isRunning());\n            TestCacheServerNotif nt = new TestCacheServerNotif();\n            try {\n              mbeanServer.addNotificationListener(getClientServiceMBeanName(\n                  serverPort, cache.getDistributedSystem().getMemberId()), nt, null, null);\n            } catch (InstanceNotFoundException e) {\n              fail(\"Failed With Exception \" + e);\n            }\n\n          }\n        };\n    vm.invoke(addClientNotifListener);\n  }\n","date":"2019-01-12 07:53:54","endLine":354,"groupId":"28715","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addClientNotifListener","params":"(finalVMvm@finalintserverPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a7/68c05da7fabd7c9cf87c3be203538b84133dbc.src","preCode":"  protected void addClientNotifListener(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable addClientNotifListener =\n        new SerializableRunnable(\"Add Client Notif Listener\") {\n          public void run() {\n            GemFireCacheImpl cache = getInstance();\n            ManagementService service = getManagementService(cache);\n            final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n            assertNotNull(bean);\n            WaitCriterion ev = new WaitCriterion() {\n              public boolean done() {\n                if (bean.isRunning())\n                  return true;\n                return false;\n              }\n\n              public String description() {\n                return null;\n              }\n            };\n            GeodeAwaitility.await().untilAsserted(ev);\n            assertTrue(bean.isRunning());\n            TestCacheServerNotif nt = new TestCacheServerNotif();\n            try {\n              mbeanServer.addNotificationListener(getClientServiceMBeanName(\n                  serverPort, cache.getDistributedSystem().getMemberId()), nt, null, null);\n            } catch (InstanceNotFoundException e) {\n              fail(\"Failed With Exception \" + e);\n            }\n\n          }\n        };\n    vm.invoke(addClientNotifListener);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/management/CacheServerManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  protected void verifyCacheServer(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable verifyCacheServer = new SerializableRunnable(\"Verify Cache Server\") {\n      @Override\n      public void run() {\n        GemFireCacheImpl cache = getInstance();\n        ManagementService service = getManagementService(cache);\n        final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n        assertNotNull(bean);\n        WaitCriterion ev = new WaitCriterion() {\n          @Override\n          public boolean done() {\n            if (bean.isRunning())\n              return true;\n            return false;\n          }\n\n          @Override\n          public String description() {\n            return null;\n          }\n        };\n        GeodeAwaitility.await().untilAsserted(ev);\n        assertTrue(bean.isRunning());\n        assertCacheServerConfig(bean);\n\n      }\n    };\n    vm.invoke(verifyCacheServer);\n  }\n","date":"2019-01-12 07:53:54","endLine":451,"groupId":"28715","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyCacheServer","params":"(finalVMvm@finalintserverPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a7/68c05da7fabd7c9cf87c3be203538b84133dbc.src","preCode":"  protected void verifyCacheServer(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable verifyCacheServer = new SerializableRunnable(\"Verify Cache Server\") {\n      public void run() {\n        GemFireCacheImpl cache = getInstance();\n        ManagementService service = getManagementService(cache);\n        final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n        assertNotNull(bean);\n        WaitCriterion ev = new WaitCriterion() {\n          public boolean done() {\n            if (bean.isRunning())\n              return true;\n            return false;\n          }\n\n          public String description() {\n            return null;\n          }\n        };\n        GeodeAwaitility.await().untilAsserted(ev);\n        assertTrue(bean.isRunning());\n        assertCacheServerConfig(bean);\n\n      }\n    };\n    vm.invoke(verifyCacheServer);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/management/CacheServerManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2019-11-01 07:27:31","commitOrder":4,"curCode":"  protected void addClientNotifListener(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable addClientNotifListener =\n        new SerializableRunnable(\"Add Client Notif Listener\") {\n          @Override\n          public void run() {\n            GemFireCacheImpl cache = getInstance();\n            ManagementService service = getManagementService(cache);\n            final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n            assertNotNull(bean);\n            WaitCriterion ev = new WaitCriterion() {\n              @Override\n              public boolean done() {\n                if (bean.isRunning())\n                  return true;\n                return false;\n              }\n\n              @Override\n              public String description() {\n                return null;\n              }\n            };\n            GeodeAwaitility.await().untilAsserted(ev);\n            assertTrue(bean.isRunning());\n            TestCacheServerNotif nt = new TestCacheServerNotif();\n            try {\n              mbeanServer.addNotificationListener(getClientServiceMBeanName(\n                  serverPort, cache.getDistributedSystem().getMemberId()), nt, null, null);\n            } catch (InstanceNotFoundException e) {\n              throw new RuntimeException(\"Failed With Exception \", e);\n            }\n\n          }\n        };\n    vm.invoke(addClientNotifListener);\n  }\n","date":"2019-11-01 07:27:31","endLine":354,"groupId":"28715","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"addClientNotifListener","params":"(finalVMvm@finalintserverPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d5/1de09bea8925ddb39b044043b87e1810b2056b.src","preCode":"  protected void addClientNotifListener(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable addClientNotifListener =\n        new SerializableRunnable(\"Add Client Notif Listener\") {\n          @Override\n          public void run() {\n            GemFireCacheImpl cache = getInstance();\n            ManagementService service = getManagementService(cache);\n            final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n            assertNotNull(bean);\n            WaitCriterion ev = new WaitCriterion() {\n              @Override\n              public boolean done() {\n                if (bean.isRunning())\n                  return true;\n                return false;\n              }\n\n              @Override\n              public String description() {\n                return null;\n              }\n            };\n            GeodeAwaitility.await().untilAsserted(ev);\n            assertTrue(bean.isRunning());\n            TestCacheServerNotif nt = new TestCacheServerNotif();\n            try {\n              mbeanServer.addNotificationListener(getClientServiceMBeanName(\n                  serverPort, cache.getDistributedSystem().getMemberId()), nt, null, null);\n            } catch (InstanceNotFoundException e) {\n              fail(\"Failed With Exception \" + e);\n            }\n\n          }\n        };\n    vm.invoke(addClientNotifListener);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/management/CacheServerManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":4,"curCode":"  protected void verifyCacheServer(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable verifyCacheServer = new SerializableRunnable(\"Verify Cache Server\") {\n      @Override\n      public void run() {\n        GemFireCacheImpl cache = getInstance();\n        ManagementService service = getManagementService(cache);\n        final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n        assertNotNull(bean);\n        WaitCriterion ev = new WaitCriterion() {\n          @Override\n          public boolean done() {\n            if (bean.isRunning())\n              return true;\n            return false;\n          }\n\n          @Override\n          public String description() {\n            return null;\n          }\n        };\n        GeodeAwaitility.await().untilAsserted(ev);\n        assertTrue(bean.isRunning());\n        assertCacheServerConfig(bean);\n\n      }\n    };\n    vm.invoke(verifyCacheServer);\n  }\n","date":"2019-01-12 07:53:54","endLine":451,"groupId":"28715","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyCacheServer","params":"(finalVMvm@finalintserverPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a7/68c05da7fabd7c9cf87c3be203538b84133dbc.src","preCode":"  protected void verifyCacheServer(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable verifyCacheServer = new SerializableRunnable(\"Verify Cache Server\") {\n      @Override\n      public void run() {\n        GemFireCacheImpl cache = getInstance();\n        ManagementService service = getManagementService(cache);\n        final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n        assertNotNull(bean);\n        WaitCriterion ev = new WaitCriterion() {\n          @Override\n          public boolean done() {\n            if (bean.isRunning())\n              return true;\n            return false;\n          }\n\n          @Override\n          public String description() {\n            return null;\n          }\n        };\n        GeodeAwaitility.await().untilAsserted(ev);\n        assertTrue(bean.isRunning());\n        assertCacheServerConfig(bean);\n\n      }\n    };\n    vm.invoke(verifyCacheServer);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/management/CacheServerManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"N"}],"commitId":"77103d0db68c9dd5087b98d47697dd05f2dc90f5","commitMessage":"@@@GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier (#4230)\n\n* GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier\n\nInitial refactor: removal of NetMember.  MemberAttributes and other classes that subordinated GMS\nidentifiers.  Repurposing GMSMember as a data packet to hold information required in a membership\nidentifer.\n\n* fixing failing tests\n\n* fixing failing unit tests\n\n* picking up a change that IntelliJ didn't auto-save & fixing serializables test\n\n* fixing problems with durable client ids\n\nthese identifiers morph after the client's membership identifier has been formed\nso the member ID needs to be updated before serializing it\n\n* fixing merge error\n\n* updating sanctionedDataSerializables\n\n* fixing lgtm complaint\n\n* removing unnecessary serialization/deserialization methods in GMSUtil\n\n* remove methods no longer needed for serializing an object with a different DSFID\n\n* fixing serializables test\n","date":"2019-11-01 07:27:31","modifiedFileCount":"91","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2021-06-04 00:32:09","codes":[{"authorDate":"2021-06-04 00:32:09","commitOrder":5,"curCode":"  protected void addClientNotifListener(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable addClientNotifListener =\n        new SerializableRunnable(\"Add Client Notif Listener\") {\n          @Override\n          public void run() {\n            GemFireCacheImpl cache = getInstance();\n            ManagementService service = getManagementService(cache);\n            final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n            assertNotNull(bean);\n            WaitCriterion ev = new WaitCriterion() {\n              @Override\n              public boolean done() {\n                if (bean.isRunning()) {\n                  return true;\n                }\n                return false;\n              }\n\n              @Override\n              public String description() {\n                return null;\n              }\n            };\n            GeodeAwaitility.await().untilAsserted(ev);\n            assertTrue(bean.isRunning());\n            TestCacheServerNotif nt = new TestCacheServerNotif();\n            try {\n              mbeanServer.addNotificationListener(getClientServiceMBeanName(\n                  serverPort, cache.getDistributedSystem().getMemberId()), nt, null, null);\n            } catch (InstanceNotFoundException e) {\n              throw new RuntimeException(\"Failed With Exception \", e);\n            }\n\n          }\n        };\n    vm.invoke(addClientNotifListener);\n  }\n","date":"2021-06-04 00:32:09","endLine":356,"groupId":"10179","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"addClientNotifListener","params":"(finalVMvm@finalintserverPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/55/9bda50ea3199bf0b2c61a9cc5902190a217d51.src","preCode":"  protected void addClientNotifListener(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable addClientNotifListener =\n        new SerializableRunnable(\"Add Client Notif Listener\") {\n          @Override\n          public void run() {\n            GemFireCacheImpl cache = getInstance();\n            ManagementService service = getManagementService(cache);\n            final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n            assertNotNull(bean);\n            WaitCriterion ev = new WaitCriterion() {\n              @Override\n              public boolean done() {\n                if (bean.isRunning())\n                  return true;\n                return false;\n              }\n\n              @Override\n              public String description() {\n                return null;\n              }\n            };\n            GeodeAwaitility.await().untilAsserted(ev);\n            assertTrue(bean.isRunning());\n            TestCacheServerNotif nt = new TestCacheServerNotif();\n            try {\n              mbeanServer.addNotificationListener(getClientServiceMBeanName(\n                  serverPort, cache.getDistributedSystem().getMemberId()), nt, null, null);\n            } catch (InstanceNotFoundException e) {\n              throw new RuntimeException(\"Failed With Exception \", e);\n            }\n\n          }\n        };\n    vm.invoke(addClientNotifListener);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/management/CacheServerManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"},{"authorDate":"2021-06-04 00:32:09","commitOrder":5,"curCode":"  protected void verifyCacheServer(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable verifyCacheServer = new SerializableRunnable(\"Verify Cache Server\") {\n      @Override\n      public void run() {\n        GemFireCacheImpl cache = getInstance();\n        ManagementService service = getManagementService(cache);\n        final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n        assertNotNull(bean);\n        WaitCriterion ev = new WaitCriterion() {\n          @Override\n          public boolean done() {\n            if (bean.isRunning()) {\n              return true;\n            }\n            return false;\n          }\n\n          @Override\n          public String description() {\n            return null;\n          }\n        };\n        GeodeAwaitility.await().untilAsserted(ev);\n        assertTrue(bean.isRunning());\n        assertCacheServerConfig(bean);\n\n      }\n    };\n    vm.invoke(verifyCacheServer);\n  }\n","date":"2021-06-04 00:32:09","endLine":455,"groupId":"10179","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"verifyCacheServer","params":"(finalVMvm@finalintserverPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/55/9bda50ea3199bf0b2c61a9cc5902190a217d51.src","preCode":"  protected void verifyCacheServer(final VM vm, final int serverPort) throws Exception {\n    SerializableRunnable verifyCacheServer = new SerializableRunnable(\"Verify Cache Server\") {\n      @Override\n      public void run() {\n        GemFireCacheImpl cache = getInstance();\n        ManagementService service = getManagementService(cache);\n        final CacheServerMXBean bean = service.getLocalCacheServerMXBean(serverPort);\n        assertNotNull(bean);\n        WaitCriterion ev = new WaitCriterion() {\n          @Override\n          public boolean done() {\n            if (bean.isRunning())\n              return true;\n            return false;\n          }\n\n          @Override\n          public String description() {\n            return null;\n          }\n        };\n        GeodeAwaitility.await().untilAsserted(ev);\n        assertTrue(bean.isRunning());\n        assertCacheServerConfig(bean);\n\n      }\n    };\n    vm.invoke(verifyCacheServer);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/management/CacheServerManagementDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"}],"commitId":"2879573ffb04e9e029e14ca37d8a064268cc8f44","commitMessage":"@@@GEODE-7864: Always use curly braces for control flow statements (#6523)\n\nAuthored-by: Donal Evans <doevans@vmware.com>","date":"2021-06-04 00:32:09","modifiedFileCount":"640","status":"M","submitter":"Donal Evans"}]
