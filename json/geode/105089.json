[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryAndCompareResults(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"p.status from /REGION_NAME p order by p.status\",\n            \"* from /REGION_NAME order by status, ID desc\",\n            \"status, ID from /REGION_NAME order by status\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"key from /REGION_NAME.keys key order by key.status\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID desc\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"* from /REGION_NAME p order by p.status, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"p.ID, p.status from /REGION_NAME p, p.positions.values order by p.status\",\n            \"pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p.ID, pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"* from /REGION_NAME p order by p.iD\", \"p.iD from /REGION_NAME p order by p.iD\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"p.getID() from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.names[1]\",\n            \"* from /REGION_NAME p order by p.getP1().secId\",\n            \"* from /REGION_NAME p order by p.getP1().getSecId()\",\n            \"* from /REGION_NAME p order by p.position1.secId\",\n            \"p.ID, p.position1.secId from /REGION_NAME p order by p.position1.secId\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"e.key.ID from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key, e.value from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId\",};\n\n        Object r[][] = new Object[queries.length][2];\n        Region local = cache.getRegion(localRegion);\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        String distinct = \"SELECT DISTINCT \";\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n\n        try {\n          for (int j = 0; j < queries.length; j++) {\n            String qStr = null;\n            synchronized (region) {\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n              r[j][0] = qs.newQuery(qStr).execute();\n\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n              r[j][1] = qs.newQuery(qStr).execute();\n            }\n          }\n\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n\n          StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n          ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","date":"2018-07-18 03:54:18","endLine":926,"groupId":"50296","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getCacheSerializableRunnableForPROrderByQueryAndCompareResults","params":"(finalStringregionName@finalStringlocalRegion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2c/d5dc1cc699726f4b4f0687c8807477722183a8.src","preCode":"  public CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryAndCompareResults(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"p.status from /REGION_NAME p order by p.status\",\n            \"* from /REGION_NAME order by status, ID desc\",\n            \"status, ID from /REGION_NAME order by status\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"key from /REGION_NAME.keys key order by key.status\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID desc\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"* from /REGION_NAME p order by p.status, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"p.ID, p.status from /REGION_NAME p, p.positions.values order by p.status\",\n            \"pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p.ID, pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"* from /REGION_NAME p order by p.iD\", \"p.iD from /REGION_NAME p order by p.iD\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"p.getID() from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.names[1]\",\n            \"* from /REGION_NAME p order by p.getP1().secId\",\n            \"* from /REGION_NAME p order by p.getP1().getSecId()\",\n            \"* from /REGION_NAME p order by p.position1.secId\",\n            \"p.ID, p.position1.secId from /REGION_NAME p order by p.position1.secId\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"e.key.ID from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key, e.value from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId\",};\n\n        Object r[][] = new Object[queries.length][2];\n        Region local = cache.getRegion(localRegion);\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        String distinct = \"SELECT DISTINCT \";\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n\n        try {\n          for (int j = 0; j < queries.length; j++) {\n            String qStr = null;\n            synchronized (region) {\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n              r[j][0] = qs.newQuery(qStr).execute();\n\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n              r[j][1] = qs.newQuery(qStr).execute();\n            }\n          }\n\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n\n          StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n          ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":802,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryWithLimit(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"status as st from /REGION_NAME order by status\",\n            \"p.status from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId, p.ID desc\",\n            \"key from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID asc\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values val order by p.ID, val.secId\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.getP1().secId, p.ID desc, p.ID\",\n            \" p.position1.secId , p.ID as st from /REGION_NAME p order by p.position1.secId, p.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId, p.ID\",\n            \"status , ID as ied from /REGION_NAME where ID > 0 order by status, ID desc\",\n            \"p.status as st, p.ID as id from /REGION_NAME p where ID > 0 and status = 'inactive' order by p.status, p.ID desc\",\n            \"p.position1.secId as st, p.ID as ied from /REGION_NAME p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId, p.ID\",\n            \" key.status as st, key.ID from /REGION_NAME.keys key where key.ID > 5 order by key.status, key.ID desc\",\n            \" key.ID, key.status as st from /REGION_NAME.keys key where key.status = 'inactive' order by key.status desc, key.ID\",\n\n        };\n\n        Object r[][] = new Object[queries.length][2];\n        Region local = cache.getRegion(localRegion);\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        String distinct = \"<TRACE>SELECT DISTINCT \";\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n        try {\n          for (int l = 1; l <= 3; l++) {\n            String[] rq = new String[queries.length];\n            for (int j = 0; j < queries.length; j++) {\n              String qStr = null;\n              synchronized (region) {\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults sr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][0] = sr;\n                if (sr.asList().size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + sr.asList().size());\n                }\n\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults srr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][1] = srr;\n                if (srr.size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + srr.asList().size());\n                }\n                \r\n                \r\n\n                \r\n              }\n            }\n            StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n            ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, rq);\n\n          }\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","date":"2018-07-18 03:54:18","endLine":1174,"groupId":"35791","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getCacheSerializableRunnableForPROrderByQueryWithLimit","params":"(finalStringregionName@finalStringlocalRegion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2c/d5dc1cc699726f4b4f0687c8807477722183a8.src","preCode":"  public CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryWithLimit(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"status as st from /REGION_NAME order by status\",\n            \"p.status from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId, p.ID desc\",\n            \"key from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID asc\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values val order by p.ID, val.secId\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.getP1().secId, p.ID desc, p.ID\",\n            \" p.position1.secId , p.ID as st from /REGION_NAME p order by p.position1.secId, p.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId, p.ID\",\n            \"status , ID as ied from /REGION_NAME where ID > 0 order by status, ID desc\",\n            \"p.status as st, p.ID as id from /REGION_NAME p where ID > 0 and status = 'inactive' order by p.status, p.ID desc\",\n            \"p.position1.secId as st, p.ID as ied from /REGION_NAME p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId, p.ID\",\n            \" key.status as st, key.ID from /REGION_NAME.keys key where key.ID > 5 order by key.status, key.ID desc\",\n            \" key.ID, key.status as st from /REGION_NAME.keys key where key.status = 'inactive' order by key.status desc, key.ID\",\n\n        };\n\n        Object r[][] = new Object[queries.length][2];\n        Region local = cache.getRegion(localRegion);\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        String distinct = \"<TRACE>SELECT DISTINCT \";\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n        try {\n          for (int l = 1; l <= 3; l++) {\n            String[] rq = new String[queries.length];\n            for (int j = 0; j < queries.length; j++) {\n              String qStr = null;\n              synchronized (region) {\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults sr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][0] = sr;\n                if (sr.asList().size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + sr.asList().size());\n                }\n\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults srr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][1] = srr;\n                if (srr.size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + srr.asList().size());\n                }\n                \r\n                \r\n\n                \r\n              }\n            }\n            StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n            ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, rq);\n\n          }\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1043,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-08-24 06:24:01","commitOrder":2,"curCode":"  public CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryAndCompareResults(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"p.status from /REGION_NAME p order by p.status\",\n            \"* from /REGION_NAME order by status, ID desc\",\n            \"status, ID from /REGION_NAME order by status\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"key from /REGION_NAME.keys key order by key.status\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID desc\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"* from /REGION_NAME p order by p.status, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"p.ID, p.status from /REGION_NAME p, p.positions.values order by p.status\",\n            \"pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p.ID, pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"* from /REGION_NAME p order by p.iD\", \"p.iD from /REGION_NAME p order by p.iD\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"p.getID() from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.names[1]\",\n            \"* from /REGION_NAME p order by p.getP1().secId\",\n            \"* from /REGION_NAME p order by p.getP1().getSecId()\",\n            \"* from /REGION_NAME p order by p.position1.secId\",\n            \"p.ID, p.position1.secId from /REGION_NAME p order by p.position1.secId\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"e.key.ID from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key, e.value from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId\",};\n\n        Object r[][] = new Object[queries.length][2];\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        String distinct = \"SELECT DISTINCT \";\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n\n        try {\n          for (int j = 0; j < queries.length; j++) {\n            String qStr = null;\n            synchronized (region) {\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n              r[j][0] = qs.newQuery(qStr).execute();\n\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n              r[j][1] = qs.newQuery(qStr).execute();\n            }\n          }\n\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n\n          StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n          ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","date":"2018-08-24 06:24:01","endLine":921,"groupId":"50296","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getCacheSerializableRunnableForPROrderByQueryAndCompareResults","params":"(finalStringregionName@finalStringlocalRegion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ed/b5cfa44efeb915ae507d5312c621398406f6ed.src","preCode":"  public CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryAndCompareResults(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"p.status from /REGION_NAME p order by p.status\",\n            \"* from /REGION_NAME order by status, ID desc\",\n            \"status, ID from /REGION_NAME order by status\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"key from /REGION_NAME.keys key order by key.status\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID desc\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"* from /REGION_NAME p order by p.status, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"p.ID, p.status from /REGION_NAME p, p.positions.values order by p.status\",\n            \"pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p.ID, pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"* from /REGION_NAME p order by p.iD\", \"p.iD from /REGION_NAME p order by p.iD\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"p.getID() from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.names[1]\",\n            \"* from /REGION_NAME p order by p.getP1().secId\",\n            \"* from /REGION_NAME p order by p.getP1().getSecId()\",\n            \"* from /REGION_NAME p order by p.position1.secId\",\n            \"p.ID, p.position1.secId from /REGION_NAME p order by p.position1.secId\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"e.key.ID from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key, e.value from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId\",};\n\n        Object r[][] = new Object[queries.length][2];\n        Region local = cache.getRegion(localRegion);\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        String distinct = \"SELECT DISTINCT \";\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n\n        try {\n          for (int j = 0; j < queries.length; j++) {\n            String qStr = null;\n            synchronized (region) {\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n              r[j][0] = qs.newQuery(qStr).execute();\n\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n              r[j][1] = qs.newQuery(qStr).execute();\n            }\n          }\n\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n\n          StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n          ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":798,"status":"M"},{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryWithLimit(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"status as st from /REGION_NAME order by status\",\n            \"p.status from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId, p.ID desc\",\n            \"key from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID asc\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values val order by p.ID, val.secId\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.getP1().secId, p.ID desc, p.ID\",\n            \" p.position1.secId , p.ID as st from /REGION_NAME p order by p.position1.secId, p.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId, p.ID\",\n            \"status , ID as ied from /REGION_NAME where ID > 0 order by status, ID desc\",\n            \"p.status as st, p.ID as id from /REGION_NAME p where ID > 0 and status = 'inactive' order by p.status, p.ID desc\",\n            \"p.position1.secId as st, p.ID as ied from /REGION_NAME p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId, p.ID\",\n            \" key.status as st, key.ID from /REGION_NAME.keys key where key.ID > 5 order by key.status, key.ID desc\",\n            \" key.ID, key.status as st from /REGION_NAME.keys key where key.status = 'inactive' order by key.status desc, key.ID\",\n\n        };\n\n        Object r[][] = new Object[queries.length][2];\n        Region local = cache.getRegion(localRegion);\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        String distinct = \"<TRACE>SELECT DISTINCT \";\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n        try {\n          for (int l = 1; l <= 3; l++) {\n            String[] rq = new String[queries.length];\n            for (int j = 0; j < queries.length; j++) {\n              String qStr = null;\n              synchronized (region) {\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults sr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][0] = sr;\n                if (sr.asList().size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + sr.asList().size());\n                }\n\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults srr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][1] = srr;\n                if (srr.size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + srr.asList().size());\n                }\n                \r\n                \r\n\n                \r\n              }\n            }\n            StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n            ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, rq);\n\n          }\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","date":"2018-07-18 03:54:18","endLine":1174,"groupId":"35791","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getCacheSerializableRunnableForPROrderByQueryWithLimit","params":"(finalStringregionName@finalStringlocalRegion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2c/d5dc1cc699726f4b4f0687c8807477722183a8.src","preCode":"  public CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryWithLimit(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"status as st from /REGION_NAME order by status\",\n            \"p.status from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId, p.ID desc\",\n            \"key from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID asc\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values val order by p.ID, val.secId\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.getP1().secId, p.ID desc, p.ID\",\n            \" p.position1.secId , p.ID as st from /REGION_NAME p order by p.position1.secId, p.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId, p.ID\",\n            \"status , ID as ied from /REGION_NAME where ID > 0 order by status, ID desc\",\n            \"p.status as st, p.ID as id from /REGION_NAME p where ID > 0 and status = 'inactive' order by p.status, p.ID desc\",\n            \"p.position1.secId as st, p.ID as ied from /REGION_NAME p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId, p.ID\",\n            \" key.status as st, key.ID from /REGION_NAME.keys key where key.ID > 5 order by key.status, key.ID desc\",\n            \" key.ID, key.status as st from /REGION_NAME.keys key where key.status = 'inactive' order by key.status desc, key.ID\",\n\n        };\n\n        Object r[][] = new Object[queries.length][2];\n        Region local = cache.getRegion(localRegion);\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        String distinct = \"<TRACE>SELECT DISTINCT \";\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n        try {\n          for (int l = 1; l <= 3; l++) {\n            String[] rq = new String[queries.length];\n            for (int j = 0; j < queries.length; j++) {\n              String qStr = null;\n              synchronized (region) {\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults sr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][0] = sr;\n                if (sr.asList().size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + sr.asList().size());\n                }\n\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults srr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][1] = srr;\n                if (srr.size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + srr.asList().size());\n                }\n                \r\n                \r\n\n                \r\n              }\n            }\n            StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n            ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, rq);\n\n          }\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1043,"status":"N"}],"commitId":"a1f747ca126a85192ac3c36183b9bfc9ae5116f9","commitMessage":"@@@GEODE-5440: when we need re-evaluate a entry in a index.  we need to pass in the outer value key in the equiJoin. (#2338)\n\n* rewrite the flaky test with an integration test\n* pass in the value key when doing the equiJoin\n* code clean up.","date":"2018-08-24 06:24:01","modifiedFileCount":"9","status":"M","submitter":"jinmeiliao"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryAndCompareResults(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      @Override\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"p.status from /REGION_NAME p order by p.status\",\n            \"* from /REGION_NAME order by status, ID desc\",\n            \"status, ID from /REGION_NAME order by status\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"key from /REGION_NAME.keys key order by key.status\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID desc\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"* from /REGION_NAME p order by p.status, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"p.ID, p.status from /REGION_NAME p, p.positions.values order by p.status\",\n            \"pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p.ID, pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"* from /REGION_NAME p order by p.iD\", \"p.iD from /REGION_NAME p order by p.iD\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"p.getID() from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.names[1]\",\n            \"* from /REGION_NAME p order by p.getP1().secId\",\n            \"* from /REGION_NAME p order by p.getP1().getSecId()\",\n            \"* from /REGION_NAME p order by p.position1.secId\",\n            \"p.ID, p.position1.secId from /REGION_NAME p order by p.position1.secId\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"e.key.ID from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key, e.value from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId\",};\n\n        Object r[][] = new Object[queries.length][2];\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        String distinct = \"SELECT DISTINCT \";\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n\n        try {\n          for (int j = 0; j < queries.length; j++) {\n            String qStr = null;\n            synchronized (region) {\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n              r[j][0] = qs.newQuery(qStr).execute();\n\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n              r[j][1] = qs.newQuery(qStr).execute();\n            }\n          }\n\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n\n          StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n          ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","date":"2019-01-12 07:53:54","endLine":923,"groupId":"50296","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getCacheSerializableRunnableForPROrderByQueryAndCompareResults","params":"(finalStringregionName@finalStringlocalRegion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b2/3314802ecb656586b094cdbef6b32d4ad12630.src","preCode":"  public CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryAndCompareResults(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"p.status from /REGION_NAME p order by p.status\",\n            \"* from /REGION_NAME order by status, ID desc\",\n            \"status, ID from /REGION_NAME order by status\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"key from /REGION_NAME.keys key order by key.status\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID desc\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"* from /REGION_NAME p order by p.status, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"p.ID, p.status from /REGION_NAME p, p.positions.values order by p.status\",\n            \"pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p.ID, pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"* from /REGION_NAME p order by p.iD\", \"p.iD from /REGION_NAME p order by p.iD\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"p.getID() from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.names[1]\",\n            \"* from /REGION_NAME p order by p.getP1().secId\",\n            \"* from /REGION_NAME p order by p.getP1().getSecId()\",\n            \"* from /REGION_NAME p order by p.position1.secId\",\n            \"p.ID, p.position1.secId from /REGION_NAME p order by p.position1.secId\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"e.key.ID from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key, e.value from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId\",};\n\n        Object r[][] = new Object[queries.length][2];\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        String distinct = \"SELECT DISTINCT \";\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n\n        try {\n          for (int j = 0; j < queries.length; j++) {\n            String qStr = null;\n            synchronized (region) {\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n              r[j][0] = qs.newQuery(qStr).execute();\n\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n              r[j][1] = qs.newQuery(qStr).execute();\n            }\n          }\n\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n\n          StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n          ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":799,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryWithLimit(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      @Override\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"status as st from /REGION_NAME order by status\",\n            \"p.status from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId, p.ID desc\",\n            \"key from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID asc\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values val order by p.ID, val.secId\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.getP1().secId, p.ID desc, p.ID\",\n            \" p.position1.secId , p.ID as st from /REGION_NAME p order by p.position1.secId, p.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId, p.ID\",\n            \"status , ID as ied from /REGION_NAME where ID > 0 order by status, ID desc\",\n            \"p.status as st, p.ID as id from /REGION_NAME p where ID > 0 and status = 'inactive' order by p.status, p.ID desc\",\n            \"p.position1.secId as st, p.ID as ied from /REGION_NAME p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId, p.ID\",\n            \" key.status as st, key.ID from /REGION_NAME.keys key where key.ID > 5 order by key.status, key.ID desc\",\n            \" key.ID, key.status as st from /REGION_NAME.keys key where key.status = 'inactive' order by key.status desc, key.ID\",\n\n        };\n\n        Object r[][] = new Object[queries.length][2];\n        Region local = cache.getRegion(localRegion);\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        String distinct = \"<TRACE>SELECT DISTINCT \";\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n        try {\n          for (int l = 1; l <= 3; l++) {\n            String[] rq = new String[queries.length];\n            for (int j = 0; j < queries.length; j++) {\n              String qStr = null;\n              synchronized (region) {\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults sr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][0] = sr;\n                if (sr.asList().size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + sr.asList().size());\n                }\n\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults srr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][1] = srr;\n                if (srr.size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + srr.asList().size());\n                }\n                \r\n                \r\n\n                \r\n              }\n            }\n            StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n            ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, rq);\n\n          }\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","date":"2019-01-12 07:53:54","endLine":1172,"groupId":"35791","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getCacheSerializableRunnableForPROrderByQueryWithLimit","params":"(finalStringregionName@finalStringlocalRegion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b2/3314802ecb656586b094cdbef6b32d4ad12630.src","preCode":"  public CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryWithLimit(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"status as st from /REGION_NAME order by status\",\n            \"p.status from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId, p.ID desc\",\n            \"key from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID asc\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values val order by p.ID, val.secId\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.getP1().secId, p.ID desc, p.ID\",\n            \" p.position1.secId , p.ID as st from /REGION_NAME p order by p.position1.secId, p.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId, p.ID\",\n            \"status , ID as ied from /REGION_NAME where ID > 0 order by status, ID desc\",\n            \"p.status as st, p.ID as id from /REGION_NAME p where ID > 0 and status = 'inactive' order by p.status, p.ID desc\",\n            \"p.position1.secId as st, p.ID as ied from /REGION_NAME p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId, p.ID\",\n            \" key.status as st, key.ID from /REGION_NAME.keys key where key.ID > 5 order by key.status, key.ID desc\",\n            \" key.ID, key.status as st from /REGION_NAME.keys key where key.status = 'inactive' order by key.status desc, key.ID\",\n\n        };\n\n        Object r[][] = new Object[queries.length][2];\n        Region local = cache.getRegion(localRegion);\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        String distinct = \"<TRACE>SELECT DISTINCT \";\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n        try {\n          for (int l = 1; l <= 3; l++) {\n            String[] rq = new String[queries.length];\n            for (int j = 0; j < queries.length; j++) {\n              String qStr = null;\n              synchronized (region) {\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults sr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][0] = sr;\n                if (sr.asList().size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + sr.asList().size());\n                }\n\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults srr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][1] = srr;\n                if (srr.size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + srr.asList().size());\n                }\n                \r\n                \r\n\n                \r\n              }\n            }\n            StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n            ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, rq);\n\n          }\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1040,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2019-05-07 02:52:16","codes":[{"authorDate":"2019-05-07 02:52:16","commitOrder":4,"curCode":"  CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryAndCompareResults(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      @Override\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"p.status from /REGION_NAME p order by p.status\",\n            \"* from /REGION_NAME order by status, ID desc\",\n            \"status, ID from /REGION_NAME order by status\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"key from /REGION_NAME.keys key order by key.status\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID desc\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"* from /REGION_NAME p order by p.status, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"p.ID, p.status from /REGION_NAME p, p.positions.values order by p.status\",\n            \"pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p.ID, pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"* from /REGION_NAME p order by p.iD\", \"p.iD from /REGION_NAME p order by p.iD\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"p.getID() from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.names[1]\",\n            \"* from /REGION_NAME p order by p.getP1().secId\",\n            \"* from /REGION_NAME p order by p.getP1().getSecId()\",\n            \"* from /REGION_NAME p order by p.position1.secId\",\n            \"p.ID, p.position1.secId from /REGION_NAME p order by p.position1.secId\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"e.key.ID from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key, e.value from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId\",};\n\n        Object r[][] = new Object[queries.length][2];\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n\n        try {\n          String distinct = \"SELECT DISTINCT \";\n          for (int j = 0; j < queries.length; j++) {\n            synchronized (region) {\n              \r\n              String qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n              r[j][0] = qs.newQuery(qStr).execute();\n\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n              r[j][1] = qs.newQuery(qStr).execute();\n            }\n          }\n\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n\n          StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n          ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","date":"2019-05-08 00:21:55","endLine":884,"groupId":"17431","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getCacheSerializableRunnableForPROrderByQueryAndCompareResults","params":"(finalStringregionName@finalStringlocalRegion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/57/0ccbf2020da4209987d2e59ec378847ca57f30.src","preCode":"  public CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryAndCompareResults(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      @Override\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"p.status from /REGION_NAME p order by p.status\",\n            \"* from /REGION_NAME order by status, ID desc\",\n            \"status, ID from /REGION_NAME order by status\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"key from /REGION_NAME.keys key order by key.status\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID desc\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"* from /REGION_NAME p order by p.status, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"p.ID, p.status from /REGION_NAME p, p.positions.values order by p.status\",\n            \"pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p.ID, pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"* from /REGION_NAME p order by p.iD\", \"p.iD from /REGION_NAME p order by p.iD\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"p.getID() from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.names[1]\",\n            \"* from /REGION_NAME p order by p.getP1().secId\",\n            \"* from /REGION_NAME p order by p.getP1().getSecId()\",\n            \"* from /REGION_NAME p order by p.position1.secId\",\n            \"p.ID, p.position1.secId from /REGION_NAME p order by p.position1.secId\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"e.key.ID from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key, e.value from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId\",};\n\n        Object r[][] = new Object[queries.length][2];\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        String distinct = \"SELECT DISTINCT \";\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n\n        try {\n          for (int j = 0; j < queries.length; j++) {\n            String qStr = null;\n            synchronized (region) {\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n              r[j][0] = qs.newQuery(qStr).execute();\n\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n              r[j][1] = qs.newQuery(qStr).execute();\n            }\n          }\n\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n\n          StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n          ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":761,"status":"M"},{"authorDate":"2019-05-07 02:52:16","commitOrder":4,"curCode":"  CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryWithLimit(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      @Override\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"status as st from /REGION_NAME order by status\",\n            \"p.status from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId, p.ID desc\",\n            \"key from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID asc\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values val order by p.ID, val.secId\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.getP1().secId, p.ID desc, p.ID\",\n            \" p.position1.secId , p.ID as st from /REGION_NAME p order by p.position1.secId, p.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId, p.ID\",\n            \"status , ID as ied from /REGION_NAME where ID > 0 order by status, ID desc\",\n            \"p.status as st, p.ID as id from /REGION_NAME p where ID > 0 and status = 'inactive' order by p.status, p.ID desc\",\n            \"p.position1.secId as st, p.ID as ied from /REGION_NAME p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId, p.ID\",\n            \" key.status as st, key.ID from /REGION_NAME.keys key where key.ID > 5 order by key.status, key.ID desc\",\n            \" key.ID, key.status as st from /REGION_NAME.keys key where key.status = 'inactive' order by key.status desc, key.ID\",\n\n        };\n\n        Object r[][] = new Object[queries.length][2];\n        Region local = cache.getRegion(localRegion);\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n        try {\n          String distinct = \"<TRACE>SELECT DISTINCT \";\n          for (int l = 1; l <= 3; l++) {\n            String[] rq = new String[queries.length];\n            for (int j = 0; j < queries.length; j++) {\n              synchronized (region) {\n                \r\n                String qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults sr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][0] = sr;\n                if (sr.asList().size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + sr.asList().size());\n                }\n\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults srr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][1] = srr;\n                if (srr.size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + srr.asList().size());\n                }\n                \r\n                \r\n\n                \r\n              }\n            }\n            StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n            ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, rq);\n\n          }\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","date":"2019-05-08 00:21:55","endLine":1130,"groupId":"17425","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getCacheSerializableRunnableForPROrderByQueryWithLimit","params":"(finalStringregionName@finalStringlocalRegion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/57/0ccbf2020da4209987d2e59ec378847ca57f30.src","preCode":"  public CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryWithLimit(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      @Override\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"status as st from /REGION_NAME order by status\",\n            \"p.status from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId, p.ID desc\",\n            \"key from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID asc\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values val order by p.ID, val.secId\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.getP1().secId, p.ID desc, p.ID\",\n            \" p.position1.secId , p.ID as st from /REGION_NAME p order by p.position1.secId, p.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId, p.ID\",\n            \"status , ID as ied from /REGION_NAME where ID > 0 order by status, ID desc\",\n            \"p.status as st, p.ID as id from /REGION_NAME p where ID > 0 and status = 'inactive' order by p.status, p.ID desc\",\n            \"p.position1.secId as st, p.ID as ied from /REGION_NAME p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId, p.ID\",\n            \" key.status as st, key.ID from /REGION_NAME.keys key where key.ID > 5 order by key.status, key.ID desc\",\n            \" key.ID, key.status as st from /REGION_NAME.keys key where key.status = 'inactive' order by key.status desc, key.ID\",\n\n        };\n\n        Object r[][] = new Object[queries.length][2];\n        Region local = cache.getRegion(localRegion);\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        String distinct = \"<TRACE>SELECT DISTINCT \";\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n        try {\n          for (int l = 1; l <= 3; l++) {\n            String[] rq = new String[queries.length];\n            for (int j = 0; j < queries.length; j++) {\n              String qStr = null;\n              synchronized (region) {\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults sr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][0] = sr;\n                if (sr.asList().size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + sr.asList().size());\n                }\n\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults srr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][1] = srr;\n                if (srr.size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + srr.asList().size());\n                }\n                \r\n                \r\n\n                \r\n              }\n            }\n            StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n            ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, rq);\n\n          }\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":999,"status":"M"}],"commitId":"49a3eaad3c492bbe96a58da8c48461f34026c3cf","commitMessage":"@@@GEODE-6731: Cleanup tests using ResourceUtils\n","date":"2019-05-08 00:21:55","modifiedFileCount":"23","status":"M","submitter":"Kirk Lund"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":5,"curCode":"  CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryAndCompareResults(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      @Override\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries =\n            new String[] {\"p.status from \" + SEPARATOR + \"REGION_NAME p order by p.status\",\n                \"* from \" + SEPARATOR + \"REGION_NAME order by status, ID desc\",\n                \"status, ID from \" + SEPARATOR + \"REGION_NAME order by status\",\n                \"p.status, p.ID from \" + SEPARATOR + \"REGION_NAME p order by p.status\",\n                \"p.position1.secId, p.ID from \" + SEPARATOR\n                    + \"REGION_NAME p order by p.position1.secId\",\n                \"key from \" + SEPARATOR + \"REGION_NAME.keys key order by key.status\",\n                \"key.ID from \" + SEPARATOR + \"REGION_NAME.keys key order by key.ID\",\n                \"key.ID, key.status from \" + SEPARATOR + \"REGION_NAME.keys key order by key.status\",\n                \"key.ID, key.status from \" + SEPARATOR\n                    + \"REGION_NAME.keys key order by key.status, key.ID\",\n                \"key.ID, key.status from \" + SEPARATOR\n                    + \"REGION_NAME.keys key order by key.status desc, key.ID\",\n                \"key.ID, key.status from \" + SEPARATOR\n                    + \"REGION_NAME.keys key order by key.status, key.ID desc\",\n                \"p.status, p.ID from \" + SEPARATOR + \"REGION_NAME p order by p.status asc, p.ID\",\n                \"* from \" + SEPARATOR + \"REGION_NAME p order by p.status, p.ID\",\n                \"p.ID from \" + SEPARATOR + \"REGION_NAME p, p.positions.values order by p.ID\",\n                \"* from \" + SEPARATOR + \"REGION_NAME p, p.positions.values order by p.ID\",\n                \"p.ID, p.status from \" + SEPARATOR\n                    + \"REGION_NAME p, p.positions.values order by p.status\",\n                \"pos.secId from \" + SEPARATOR\n                    + \"REGION_NAME p, p.positions.values pos order by pos.secId\",\n                \"p.ID, pos.secId from \" + SEPARATOR\n                    + \"REGION_NAME p, p.positions.values pos order by pos.secId\",\n                \"* from \" + SEPARATOR + \"REGION_NAME p order by p.iD\",\n                \"p.iD from \" + SEPARATOR + \"REGION_NAME p order by p.iD\",\n                \"p.iD, p.status from \" + SEPARATOR + \"REGION_NAME p order by p.iD\",\n                \"iD, status from \" + SEPARATOR + \"REGION_NAME order by iD\",\n                \"* from \" + SEPARATOR + \"REGION_NAME p order by p.getID()\",\n                \"p.getID() from \" + SEPARATOR + \"REGION_NAME p order by p.getID()\",\n                \"* from \" + SEPARATOR + \"REGION_NAME p order by p.names[1]\",\n                \"* from \" + SEPARATOR + \"REGION_NAME p order by p.getP1().secId\",\n                \"* from \" + SEPARATOR + \"REGION_NAME p order by p.getP1().getSecId()\",\n                \"* from \" + SEPARATOR + \"REGION_NAME p order by p.position1.secId\",\n                \"p.ID, p.position1.secId from \" + SEPARATOR\n                    + \"REGION_NAME p order by p.position1.secId\",\n                \"p.position1.secId, p.ID from \" + SEPARATOR\n                    + \"REGION_NAME p order by p.position1.secId\",\n                \"e.key.ID from \" + SEPARATOR + \"REGION_NAME.entries e order by e.key.ID\",\n                \"e.key.ID, e.value.status from \" + SEPARATOR\n                    + \"REGION_NAME.entries e order by e.key.ID\",\n                \"e.key.ID, e.value.status from \" + SEPARATOR\n                    + \"REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n                \"e.key, e.value from \" + SEPARATOR\n                    + \"REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n                \"e.key from \" + SEPARATOR\n                    + \"REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n                \"p, pos from \" + SEPARATOR + \"REGION_NAME p, p.positions.values pos order by p.ID\",\n                \"p, pos from \" + SEPARATOR\n                    + \"REGION_NAME p, p.positions.values pos order by pos.secId\",\n                \"p, pos from \" + SEPARATOR\n                    + \"REGION_NAME p, p.positions.values pos order by p.ID, pos.secId\",};\n\n        Object r[][] = new Object[queries.length][2];\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n\n        try {\n          String distinct = \"SELECT DISTINCT \";\n          for (int j = 0; j < queries.length; j++) {\n            synchronized (region) {\n              \r\n              String qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n              r[j][0] = qs.newQuery(qStr).execute();\n\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n              r[j][1] = qs.newQuery(qStr).execute();\n            }\n          }\n\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n\n          StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n          ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","date":"2020-05-29 00:37:39","endLine":903,"groupId":"105089","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getCacheSerializableRunnableForPROrderByQueryAndCompareResults","params":"(finalStringregionName@finalStringlocalRegion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b2/b35b76be2d0c15c61bc42ebebafe34dc3cfbda.src","preCode":"  CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryAndCompareResults(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      @Override\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"p.status from /REGION_NAME p order by p.status\",\n            \"* from /REGION_NAME order by status, ID desc\",\n            \"status, ID from /REGION_NAME order by status\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"key from /REGION_NAME.keys key order by key.status\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID desc\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"* from /REGION_NAME p order by p.status, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"p.ID, p.status from /REGION_NAME p, p.positions.values order by p.status\",\n            \"pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p.ID, pos.secId from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"* from /REGION_NAME p order by p.iD\", \"p.iD from /REGION_NAME p order by p.iD\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"p.getID() from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.names[1]\",\n            \"* from /REGION_NAME p order by p.getP1().secId\",\n            \"* from /REGION_NAME p order by p.getP1().getSecId()\",\n            \"* from /REGION_NAME p order by p.position1.secId\",\n            \"p.ID, p.position1.secId from /REGION_NAME p order by p.position1.secId\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId\",\n            \"e.key.ID from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entries e order by e.key.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key, e.value from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId\",};\n\n        Object r[][] = new Object[queries.length][2];\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n\n        try {\n          String distinct = \"SELECT DISTINCT \";\n          for (int j = 0; j < queries.length; j++) {\n            synchronized (region) {\n              \r\n              String qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n              r[j][0] = qs.newQuery(qStr).execute();\n\n              \r\n              qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n              r[j][1] = qs.newQuery(qStr).execute();\n            }\n          }\n\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n\n          StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n          ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, queries);\n\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":762,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":5,"curCode":"  CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryWithLimit(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      @Override\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries =\n            new String[] {\"status as st from \" + SEPARATOR + \"REGION_NAME order by status\",\n                \"p.status from \" + SEPARATOR + \"REGION_NAME p order by p.status\",\n                \"p.position1.secId, p.ID from \" + SEPARATOR\n                    + \"REGION_NAME p order by p.position1.secId, p.ID desc\",\n                \"key from \" + SEPARATOR + \"REGION_NAME.keys key order by key.status, key.ID\",\n                \"key.ID from \" + SEPARATOR + \"REGION_NAME.keys key order by key.ID\",\n                \"key.ID, key.status from \" + SEPARATOR\n                    + \"REGION_NAME.keys key order by key.status, key.ID asc\",\n                \"key.ID, key.status from \" + SEPARATOR\n                    + \"REGION_NAME.keys key order by key.status desc, key.ID\",\n                \"p.status, p.ID from \" + SEPARATOR + \"REGION_NAME p order by p.status asc, p.ID\",\n                \"p.ID from \" + SEPARATOR + \"REGION_NAME p, p.positions.values order by p.ID\",\n                \"* from \" + SEPARATOR\n                    + \"REGION_NAME p, p.positions.values val order by p.ID, val.secId\",\n                \"p.iD, p.status from \" + SEPARATOR + \"REGION_NAME p order by p.iD\",\n                \"iD, status from \" + SEPARATOR + \"REGION_NAME order by iD\",\n                \"* from \" + SEPARATOR + \"REGION_NAME p order by p.getID()\",\n                \"* from \" + SEPARATOR + \"REGION_NAME p order by p.getP1().secId, p.ID desc, p.ID\",\n                \" p.position1.secId , p.ID as st from \" + SEPARATOR\n                    + \"REGION_NAME p order by p.position1.secId, p.ID\",\n                \"e.key.ID, e.value.status from \" + SEPARATOR\n                    + \"REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n                \"e.key from \" + SEPARATOR\n                    + \"REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n                \"p, pos from \" + SEPARATOR\n                    + \"REGION_NAME p, p.positions.values pos order by p.ID, pos.secId desc\",\n                \"p, pos from \" + SEPARATOR\n                    + \"REGION_NAME p, p.positions.values pos order by pos.secId, p.ID\",\n                \"status , ID as ied from \" + SEPARATOR\n                    + \"REGION_NAME where ID > 0 order by status, ID desc\",\n                \"p.status as st, p.ID as id from \" + SEPARATOR\n                    + \"REGION_NAME p where ID > 0 and status = 'inactive' order by p.status, p.ID desc\",\n                \"p.position1.secId as st, p.ID as ied from \" + SEPARATOR\n                    + \"REGION_NAME p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId, p.ID\",\n                \" key.status as st, key.ID from \" + SEPARATOR\n                    + \"REGION_NAME.keys key where key.ID > 5 order by key.status, key.ID desc\",\n                \" key.ID, key.status as st from \" + SEPARATOR\n                    + \"REGION_NAME.keys key where key.status = 'inactive' order by key.status desc, key.ID\",\n\n            };\n\n        Object r[][] = new Object[queries.length][2];\n        Region local = cache.getRegion(localRegion);\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n        try {\n          String distinct = \"<TRACE>SELECT DISTINCT \";\n          for (int l = 1; l <= 3; l++) {\n            String[] rq = new String[queries.length];\n            for (int j = 0; j < queries.length; j++) {\n              synchronized (region) {\n                \r\n                String qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults sr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][0] = sr;\n                if (sr.asList().size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + sr.asList().size());\n                }\n\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults srr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][1] = srr;\n                if (srr.size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + srr.asList().size());\n                }\n                \r\n                \r\n\n                \r\n              }\n            }\n            StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n            ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, rq);\n\n          }\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","date":"2020-05-29 00:37:39","endLine":1182,"groupId":"105089","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getCacheSerializableRunnableForPROrderByQueryWithLimit","params":"(finalStringregionName@finalStringlocalRegion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b2/b35b76be2d0c15c61bc42ebebafe34dc3cfbda.src","preCode":"  CacheSerializableRunnable getCacheSerializableRunnableForPROrderByQueryWithLimit(\n      final String regionName, final String localRegion) {\n    SerializableRunnable PrRegion = new CacheSerializableRunnable(\"PRQuery\") {\n      @Override\n      public void run2() throws CacheException {\n\n        Cache cache = getCache();\n        \r\n\n        String[] queries = new String[] {\"status as st from /REGION_NAME order by status\",\n            \"p.status from /REGION_NAME p order by p.status\",\n            \"p.position1.secId, p.ID from /REGION_NAME p order by p.position1.secId, p.ID desc\",\n            \"key from /REGION_NAME.keys key order by key.status, key.ID\",\n            \"key.ID from /REGION_NAME.keys key order by key.ID\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status, key.ID asc\",\n            \"key.ID, key.status from /REGION_NAME.keys key order by key.status desc, key.ID\",\n            \"p.status, p.ID from /REGION_NAME p order by p.status asc, p.ID\",\n            \"p.ID from /REGION_NAME p, p.positions.values order by p.ID\",\n            \"* from /REGION_NAME p, p.positions.values val order by p.ID, val.secId\",\n            \"p.iD, p.status from /REGION_NAME p order by p.iD\",\n            \"iD, status from /REGION_NAME order by iD\", \"* from /REGION_NAME p order by p.getID()\",\n            \"* from /REGION_NAME p order by p.getP1().secId, p.ID desc, p.ID\",\n            \" p.position1.secId , p.ID as st from /REGION_NAME p order by p.position1.secId, p.ID\",\n            \"e.key.ID, e.value.status from /REGION_NAME.entrySet e order by e.key.ID, e.value.status desc\",\n            \"e.key from /REGION_NAME.entrySet e order by e.key.ID, e.key.pkid desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by p.ID, pos.secId desc\",\n            \"p, pos from /REGION_NAME p, p.positions.values pos order by pos.secId, p.ID\",\n            \"status , ID as ied from /REGION_NAME where ID > 0 order by status, ID desc\",\n            \"p.status as st, p.ID as id from /REGION_NAME p where ID > 0 and status = 'inactive' order by p.status, p.ID desc\",\n            \"p.position1.secId as st, p.ID as ied from /REGION_NAME p where p.ID > 0 and p.position1.secId != 'IBM' order by p.position1.secId, p.ID\",\n            \" key.status as st, key.ID from /REGION_NAME.keys key where key.ID > 5 order by key.status, key.ID desc\",\n            \" key.ID, key.status as st from /REGION_NAME.keys key where key.status = 'inactive' order by key.status desc, key.ID\",\n\n        };\n\n        Object r[][] = new Object[queries.length][2];\n        Region local = cache.getRegion(localRegion);\n        Region region = cache.getRegion(regionName);\n        assertNotNull(region);\n\n        final String[] expectedExceptions =\n            new String[] {RegionDestroyedException.class.getName(), ReplyException.class.getName(),\n                CacheClosedException.class.getName(), ForceReattemptException.class.getName(),\n                QueryInvocationTargetException.class.getName()};\n\n        for (final String expectedException : expectedExceptions) {\n          getCache().getLogger()\n              .info(\"<ExpectedException action=add>\" + expectedException + \"</ExpectedException>\");\n        }\n\n        QueryService qs = getCache().getQueryService();\n        Object[] params;\n\n        try {\n          String distinct = \"<TRACE>SELECT DISTINCT \";\n          for (int l = 1; l <= 3; l++) {\n            String[] rq = new String[queries.length];\n            for (int j = 0; j < queries.length; j++) {\n              synchronized (region) {\n                \r\n                String qStr = (distinct + queries[j].replace(\"REGION_NAME\", localRegion));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults sr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][0] = sr;\n                if (sr.asList().size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + sr.asList().size());\n                }\n\n                \r\n                qStr = (distinct + queries[j].replace(\"REGION_NAME\", regionName));\n                qStr += (\" LIMIT \" + (l * l));\n                rq[j] = qStr;\n                SelectResults srr = (SelectResults) qs.newQuery(qStr).execute();\n                r[j][1] = srr;\n                if (srr.size() > l * l) {\n                  fail(\"The resultset size exceeds limit size. Limit size=\" + l * l\n                      + \", result size =\" + srr.asList().size());\n                }\n                \r\n                \r\n\n                \r\n              }\n            }\n            StructSetOrResultsSet ssORrs = new StructSetOrResultsSet();\n            ssORrs.CompareQueryResultsWithoutAndWithIndexes(r, queries.length, true, rq);\n\n          }\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Queries Executed successfully on Local region & PR Region\");\n        } catch (QueryInvocationTargetException e) {\n          \r\n          \r\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (QueryException e) {\n          LogWriterUtils.getLogWriter().error(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught QueryException while querying\"\n                  + e,\n              e);\n          throw new TestException(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught unexpected query exception\",\n              e);\n        }\n\n        catch (RegionDestroyedException rde) {\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a RegionDestroyedException while querying as expected \",\n              rde);\n\n        } catch (CancelException cce) {\n          LogWriterUtils.getLogWriter().info(\n              \"PRQueryDUnitHelper#getCacheSerializableRunnableForPRQueryAndCompareResults: Caught a CancelException while querying as expected \",\n              cce);\n\n        } finally {\n          for (final String expectedException : expectedExceptions) {\n            getCache().getLogger().info(\n                \"<ExpectedException action=remove>\" + expectedException + \"</ExpectedException>\");\n          }\n        }\n\n      }\n\n    };\n    return (CacheSerializableRunnable) PrRegion;\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1035,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
