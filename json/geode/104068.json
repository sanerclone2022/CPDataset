[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testBlockingQueueForConcurrentPeekAndTake() throws Exception {\n    TestBlockingHARegionQueue regionQueue =\n        new TestBlockingHARegionQueue(\"testBlockQueueForConcurrentPeekAndTake\", cache);\n    Thread[] threads = new Thread[3];\n\n    for (int i = 0; i < 3; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            long startTime = System.currentTimeMillis();\n            Object obj = regionQueue.peek();\n            if (obj == null) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  failed since object was null and was not expected to be null\"));\n            }\n            long totalTime = System.currentTimeMillis() - startTime;\n\n            if (totalTime < 4000) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  Expected time to be greater than 4000 but it is not so\"));\n            }\n          } catch (Exception e) {\n            errorCollector.addError(e);\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < 3; k++) {\n      threads[k].start();\n    }\n\n    Thread.sleep(4000);\n\n    EventID id = new EventID(new byte[] {1}, 1, 1);\n    EventID id1 = new EventID(new byte[] {1}, 1, 2);\n\n    regionQueue.takeFirst = true;\n    regionQueue.put(new ConflatableObject(\"key\", \"value\", id, true, testName.getMethodName()));\n\n    Thread.sleep(2000);\n\n    regionQueue.put(new ConflatableObject(\"key1\", \"value1\", id1, true, testName.getMethodName()));\n\n    long startTime = System.currentTimeMillis();\n    for (int k = 0; k < 3; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    long totalTime = System.currentTimeMillis() - startTime;\n    if (totalTime >= 180000) {\n      fail(\" Test taken too long \");\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":1111,"groupId":"18741","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlockingQueueForConcurrentPeekAndTake","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/35/0a91e1a70dda8c7c907c2fe169c9eb53981dbf.src","preCode":"  public void testBlockingQueueForConcurrentPeekAndTake() throws Exception {\n    TestBlockingHARegionQueue regionQueue =\n        new TestBlockingHARegionQueue(\"testBlockQueueForConcurrentPeekAndTake\", cache);\n    Thread[] threads = new Thread[3];\n\n    for (int i = 0; i < 3; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            long startTime = System.currentTimeMillis();\n            Object obj = regionQueue.peek();\n            if (obj == null) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  failed since object was null and was not expected to be null\"));\n            }\n            long totalTime = System.currentTimeMillis() - startTime;\n\n            if (totalTime < 4000) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  Expected time to be greater than 4000 but it is not so\"));\n            }\n          } catch (Exception e) {\n            errorCollector.addError(e);\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < 3; k++) {\n      threads[k].start();\n    }\n\n    Thread.sleep(4000);\n\n    EventID id = new EventID(new byte[] {1}, 1, 1);\n    EventID id1 = new EventID(new byte[] {1}, 1, 2);\n\n    regionQueue.takeFirst = true;\n    regionQueue.put(new ConflatableObject(\"key\", \"value\", id, true, testName.getMethodName()));\n\n    Thread.sleep(2000);\n\n    regionQueue.put(new ConflatableObject(\"key1\", \"value1\", id1, true, testName.getMethodName()));\n\n    long startTime = System.currentTimeMillis();\n    for (int k = 0; k < 3; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    long totalTime = System.currentTimeMillis() - startTime;\n    if (totalTime >= 180000) {\n      fail(\" Test taken too long \");\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1057,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testBlockingQueueForTakeWhenPeekInProgress() throws Exception {\n    TestBlockingHARegionQueue regionQueue =\n        new TestBlockingHARegionQueue(\"testBlockQueueForTakeWhenPeekInProgress\", cache);\n    Thread[] threads = new Thread[3];\n\n    for (int i = 0; i < 3; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            long startTime = System.currentTimeMillis();\n            Object obj = regionQueue.peek();\n            if (obj == null) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  failed since object was null and was not expected to be null\"));\n            }\n            long totalTime = System.currentTimeMillis() - startTime;\n\n            if (totalTime < 4000) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  Expected time to be greater than 4000 but it is not so\"));\n            }\n          } catch (Exception e) {\n            errorCollector.addError(e);\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < 3; k++) {\n      threads[k].start();\n    }\n\n    Thread.sleep(4000);\n\n    EventID id = new EventID(new byte[] {1}, 1, 1);\n    EventID id1 = new EventID(new byte[] {1}, 1, 2);\n\n    regionQueue.takeWhenPeekInProgress = true;\n    regionQueue.put(new ConflatableObject(\"key\", \"value\", id, true, testName.getMethodName()));\n\n    Thread.sleep(2000);\n\n    regionQueue.put(new ConflatableObject(\"key1\", \"value1\", id1, true, testName.getMethodName()));\n\n    long startTime = System.currentTimeMillis();\n    for (int k = 0; k < 3; k++) {\n      ThreadUtils.join(threads[k], 60 * 1000);\n    }\n\n    long totalTime = System.currentTimeMillis() - startTime;\n    if (totalTime >= 60000) {\n      fail(\" Test taken too long \");\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":1172,"groupId":"18741","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlockingQueueForTakeWhenPeekInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/35/0a91e1a70dda8c7c907c2fe169c9eb53981dbf.src","preCode":"  public void testBlockingQueueForTakeWhenPeekInProgress() throws Exception {\n    TestBlockingHARegionQueue regionQueue =\n        new TestBlockingHARegionQueue(\"testBlockQueueForTakeWhenPeekInProgress\", cache);\n    Thread[] threads = new Thread[3];\n\n    for (int i = 0; i < 3; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            long startTime = System.currentTimeMillis();\n            Object obj = regionQueue.peek();\n            if (obj == null) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  failed since object was null and was not expected to be null\"));\n            }\n            long totalTime = System.currentTimeMillis() - startTime;\n\n            if (totalTime < 4000) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  Expected time to be greater than 4000 but it is not so\"));\n            }\n          } catch (Exception e) {\n            errorCollector.addError(e);\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < 3; k++) {\n      threads[k].start();\n    }\n\n    Thread.sleep(4000);\n\n    EventID id = new EventID(new byte[] {1}, 1, 1);\n    EventID id1 = new EventID(new byte[] {1}, 1, 2);\n\n    regionQueue.takeWhenPeekInProgress = true;\n    regionQueue.put(new ConflatableObject(\"key\", \"value\", id, true, testName.getMethodName()));\n\n    Thread.sleep(2000);\n\n    regionQueue.put(new ConflatableObject(\"key1\", \"value1\", id1, true, testName.getMethodName()));\n\n    long startTime = System.currentTimeMillis();\n    for (int k = 0; k < 3; k++) {\n      ThreadUtils.join(threads[k], 60 * 1000);\n    }\n\n    long totalTime = System.currentTimeMillis() - startTime;\n    if (totalTime >= 60000) {\n      fail(\" Test taken too long \");\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1118,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2019-08-09 00:33:26","codes":[{"authorDate":"2019-08-09 00:33:26","commitOrder":2,"curCode":"  public void testBlockingQueueForConcurrentPeekAndTake() throws Exception {\n    TestBlockingHARegionQueue regionQueue =\n        new TestBlockingHARegionQueue(\"testBlockQueueForConcurrentPeekAndTake\", cache,\n            disabledClock());\n    Thread[] threads = new Thread[3];\n\n    for (int i = 0; i < 3; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            long startTime = System.currentTimeMillis();\n            Object obj = regionQueue.peek();\n            if (obj == null) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  failed since object was null and was not expected to be null\"));\n            }\n            long totalTime = System.currentTimeMillis() - startTime;\n\n            if (totalTime < 4000) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  Expected time to be greater than 4000 but it is not so\"));\n            }\n          } catch (Exception e) {\n            errorCollector.addError(e);\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < 3; k++) {\n      threads[k].start();\n    }\n\n    Thread.sleep(4000);\n\n    EventID id = new EventID(new byte[] {1}, 1, 1);\n    EventID id1 = new EventID(new byte[] {1}, 1, 2);\n\n    regionQueue.takeFirst = true;\n    regionQueue.put(new ConflatableObject(\"key\", \"value\", id, true, testName.getMethodName()));\n\n    Thread.sleep(2000);\n\n    regionQueue.put(new ConflatableObject(\"key1\", \"value1\", id1, true, testName.getMethodName()));\n\n    long startTime = System.currentTimeMillis();\n    for (int k = 0; k < 3; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    long totalTime = System.currentTimeMillis() - startTime;\n    if (totalTime >= 180000) {\n      fail(\" Test taken too long \");\n    }\n  }\n","date":"2019-08-09 00:33:26","endLine":1132,"groupId":"104068","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlockingQueueForConcurrentPeekAndTake","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/67/c39a88f1881c3c4b18fccf7a38c840fb67aa81.src","preCode":"  public void testBlockingQueueForConcurrentPeekAndTake() throws Exception {\n    TestBlockingHARegionQueue regionQueue =\n        new TestBlockingHARegionQueue(\"testBlockQueueForConcurrentPeekAndTake\", cache);\n    Thread[] threads = new Thread[3];\n\n    for (int i = 0; i < 3; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            long startTime = System.currentTimeMillis();\n            Object obj = regionQueue.peek();\n            if (obj == null) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  failed since object was null and was not expected to be null\"));\n            }\n            long totalTime = System.currentTimeMillis() - startTime;\n\n            if (totalTime < 4000) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  Expected time to be greater than 4000 but it is not so\"));\n            }\n          } catch (Exception e) {\n            errorCollector.addError(e);\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < 3; k++) {\n      threads[k].start();\n    }\n\n    Thread.sleep(4000);\n\n    EventID id = new EventID(new byte[] {1}, 1, 1);\n    EventID id1 = new EventID(new byte[] {1}, 1, 2);\n\n    regionQueue.takeFirst = true;\n    regionQueue.put(new ConflatableObject(\"key\", \"value\", id, true, testName.getMethodName()));\n\n    Thread.sleep(2000);\n\n    regionQueue.put(new ConflatableObject(\"key1\", \"value1\", id1, true, testName.getMethodName()));\n\n    long startTime = System.currentTimeMillis();\n    for (int k = 0; k < 3; k++) {\n      ThreadUtils.join(threads[k], 180 * 1000);\n    }\n\n    long totalTime = System.currentTimeMillis() - startTime;\n    if (totalTime >= 180000) {\n      fail(\" Test taken too long \");\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1077,"status":"M"},{"authorDate":"2019-08-09 00:33:26","commitOrder":2,"curCode":"  public void testBlockingQueueForTakeWhenPeekInProgress() throws Exception {\n    TestBlockingHARegionQueue regionQueue =\n        new TestBlockingHARegionQueue(\"testBlockQueueForTakeWhenPeekInProgress\", cache,\n            disabledClock());\n    Thread[] threads = new Thread[3];\n\n    for (int i = 0; i < 3; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            long startTime = System.currentTimeMillis();\n            Object obj = regionQueue.peek();\n            if (obj == null) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  failed since object was null and was not expected to be null\"));\n            }\n            long totalTime = System.currentTimeMillis() - startTime;\n\n            if (totalTime < 4000) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  Expected time to be greater than 4000 but it is not so\"));\n            }\n          } catch (Exception e) {\n            errorCollector.addError(e);\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < 3; k++) {\n      threads[k].start();\n    }\n\n    Thread.sleep(4000);\n\n    EventID id = new EventID(new byte[] {1}, 1, 1);\n    EventID id1 = new EventID(new byte[] {1}, 1, 2);\n\n    regionQueue.takeWhenPeekInProgress = true;\n    regionQueue.put(new ConflatableObject(\"key\", \"value\", id, true, testName.getMethodName()));\n\n    Thread.sleep(2000);\n\n    regionQueue.put(new ConflatableObject(\"key1\", \"value1\", id1, true, testName.getMethodName()));\n\n    long startTime = System.currentTimeMillis();\n    for (int k = 0; k < 3; k++) {\n      ThreadUtils.join(threads[k], 60 * 1000);\n    }\n\n    long totalTime = System.currentTimeMillis() - startTime;\n    if (totalTime >= 60000) {\n      fail(\" Test taken too long \");\n    }\n  }\n","date":"2019-08-09 00:33:26","endLine":1194,"groupId":"104068","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlockingQueueForTakeWhenPeekInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/67/c39a88f1881c3c4b18fccf7a38c840fb67aa81.src","preCode":"  public void testBlockingQueueForTakeWhenPeekInProgress() throws Exception {\n    TestBlockingHARegionQueue regionQueue =\n        new TestBlockingHARegionQueue(\"testBlockQueueForTakeWhenPeekInProgress\", cache);\n    Thread[] threads = new Thread[3];\n\n    for (int i = 0; i < 3; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            long startTime = System.currentTimeMillis();\n            Object obj = regionQueue.peek();\n            if (obj == null) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  failed since object was null and was not expected to be null\"));\n            }\n            long totalTime = System.currentTimeMillis() - startTime;\n\n            if (totalTime < 4000) {\n              errorCollector.addError(new AssertionError(\n                  \"Failed :  Expected time to be greater than 4000 but it is not so\"));\n            }\n          } catch (Exception e) {\n            errorCollector.addError(e);\n          }\n        }\n      };\n    }\n\n    for (int k = 0; k < 3; k++) {\n      threads[k].start();\n    }\n\n    Thread.sleep(4000);\n\n    EventID id = new EventID(new byte[] {1}, 1, 1);\n    EventID id1 = new EventID(new byte[] {1}, 1, 2);\n\n    regionQueue.takeWhenPeekInProgress = true;\n    regionQueue.put(new ConflatableObject(\"key\", \"value\", id, true, testName.getMethodName()));\n\n    Thread.sleep(2000);\n\n    regionQueue.put(new ConflatableObject(\"key1\", \"value1\", id1, true, testName.getMethodName()));\n\n    long startTime = System.currentTimeMillis();\n    for (int k = 0; k < 3; k++) {\n      ThreadUtils.join(threads[k], 60 * 1000);\n    }\n\n    long totalTime = System.currentTimeMillis() - startTime;\n    if (totalTime >= 60000) {\n      fail(\" Test taken too long \");\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/ha/HARegionQueueJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1139,"status":"M"}],"commitId":"b49279477a4c79b90220fb34239d12c2d9e50782","commitMessage":"@@@GEODE-7010: Replace static globals in CachePerfStats with StatisticsClock (#3859)\n\n* Replace CachePerfStats.getStatTime with Cache owned StatisticsClock\n* Inject StatisticsClock dependency via constructor\n","date":"2019-08-09 00:33:26","modifiedFileCount":"134","status":"M","submitter":"Kirk Lund"}]
