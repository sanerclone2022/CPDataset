[{"authorTime":"2019-03-22 03:56:11","codes":[{"authorDate":"2019-03-22 03:56:11","commitOrder":1,"curCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() throws Exception {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service = ClusterManagementServiceProvider.getService();\n      assertThat(service).isNotNull();\n      ClusterManagementResult clusterManagementResult = service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-03-22 03:56:11","endLine":126,"groupId":"940","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"serverHasNoSslPropertyAndDoUseCorrectDefaultSSL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/95/449a448c7386b74cc91e235ae2532f07c537b1.src","preCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() throws Exception {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service = ClusterManagementServiceProvider.getService();\n      assertThat(service).isNotNull();\n      ClusterManagementResult clusterManagementResult = service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2019-03-22 03:56:11","commitOrder":1,"curCode":"  public void useDefaultSSLPropertyTakesPrecedence() throws Exception {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service = ClusterManagementServiceProvider.getService();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-03-22 03:56:11","endLine":148,"groupId":"3156","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"useDefaultSSLPropertyTakesPrecedence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/95/449a448c7386b74cc91e235ae2532f07c537b1.src","preCode":"  public void useDefaultSSLPropertyTakesPrecedence() throws Exception {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service = ClusterManagementServiceProvider.getService();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"}],"commitId":"c97b15641816275af09b14a1f1b12c746f5cdff7","commitMessage":"@@@GEODE-6450: can use default SSL when invoking CMS on server (#3320)\n\n\n","date":"2019-03-22 03:56:11","modifiedFileCount":"3","status":"B","submitter":"jinmeiliao"},{"authorTime":"2019-05-03 22:53:16","codes":[{"authorDate":"2019-05-03 22:53:16","commitOrder":2,"curCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() throws Exception {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementServiceConfig config = GeodeClusterManagementServiceConfig.builder()\n          .setCache(ClusterStartupRule.getCache())\n          .build();\n      ClusterManagementService service = new ClientClusterManagementService(config);\n\n      assertThat(service).isNotNull();\n      ClusterManagementResult clusterManagementResult = service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-05-03 22:53:16","endLine":137,"groupId":"940","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"serverHasNoSslPropertyAndDoUseCorrectDefaultSSL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8e/a432613ec9908b7650b0360ab72de0d6e046ce.src","preCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() throws Exception {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service = ClusterManagementServiceProvider.getService();\n      assertThat(service).isNotNull();\n      ClusterManagementResult clusterManagementResult = service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2019-05-03 22:53:16","commitOrder":2,"curCode":"  public void useDefaultSSLPropertyTakesPrecedence() throws Exception {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementServiceConfig config = GeodeClusterManagementServiceConfig.builder()\n          .setCache(ClusterStartupRule.getCache())\n          .build();\n      ClusterManagementService service = new ClientClusterManagementService(config);\n\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-05-03 22:53:16","endLine":163,"groupId":"3156","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"useDefaultSSLPropertyTakesPrecedence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8e/a432613ec9908b7650b0360ab72de0d6e046ce.src","preCode":"  public void useDefaultSSLPropertyTakesPrecedence() throws Exception {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service = ClusterManagementServiceProvider.getService();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"}],"commitId":"a39ab8e362451979ac883be62e836a421752c2cd","commitMessage":"@@@GEODE-6678: Remove singleton cache reference from ClusterManagementServiceProvider (#3496)\n\n","date":"2019-05-03 22:53:16","modifiedFileCount":"18","status":"M","submitter":"Jens Deppe"},{"authorTime":"2019-05-21 04:51:07","codes":[{"authorDate":"2019-05-21 04:51:07","commitOrder":3,"curCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() throws Exception {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      ClusterManagementResult clusterManagementResult = service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-05-21 04:51:07","endLine":134,"groupId":"940","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"serverHasNoSslPropertyAndDoUseCorrectDefaultSSL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a9/7d0855a9af7b499224e7d00810b935409283b9.src","preCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() throws Exception {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementServiceConfig config = GeodeClusterManagementServiceConfig.builder()\n          .setCache(ClusterStartupRule.getCache())\n          .build();\n      ClusterManagementService service = new ClientClusterManagementService(config);\n\n      assertThat(service).isNotNull();\n      ClusterManagementResult clusterManagementResult = service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2019-05-21 04:51:07","commitOrder":3,"curCode":"  public void useDefaultSSLPropertyTakesPrecedence() throws Exception {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-05-21 04:51:07","endLine":158,"groupId":"3156","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"useDefaultSSLPropertyTakesPrecedence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a9/7d0855a9af7b499224e7d00810b935409283b9.src","preCode":"  public void useDefaultSSLPropertyTakesPrecedence() throws Exception {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementServiceConfig config = GeodeClusterManagementServiceConfig.builder()\n          .setCache(ClusterStartupRule.getCache())\n          .build();\n      ClusterManagementService service = new ClientClusterManagementService(config);\n\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"0de72a97bc487b497204ef835540482fe31bf8cb","commitMessage":"@@@GEODE-6678: use builder to build ClusterManagementService (#3554)\n\n\n","date":"2019-05-21 04:51:07","modifiedFileCount":"18","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2019-06-19 06:26:48","codes":[{"authorDate":"2019-06-19 06:26:48","commitOrder":4,"curCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      ClusterManagementResult<RegionConfig> clusterManagementResult =\n          service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-06-19 06:26:48","endLine":135,"groupId":"940","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"serverHasNoSslPropertyAndDoUseCorrectDefaultSSL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/90937c995650b1e35e373a7d18f42a8208da2b.src","preCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() throws Exception {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      ClusterManagementResult clusterManagementResult = service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2019-06-19 06:26:48","commitOrder":4,"curCode":"  public void useDefaultSSLPropertyTakesPrecedence() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-06-19 06:26:48","endLine":159,"groupId":"3156","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"useDefaultSSLPropertyTakesPrecedence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/90937c995650b1e35e373a7d18f42a8208da2b.src","preCode":"  public void useDefaultSSLPropertyTakesPrecedence() throws Exception {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"a60ade270e3dc1901fe900e2521351bdc93ecced","commitMessage":"@@@GEODE-6861: Generify ClusterManagementService (#3708)\n\n* GEODE-6861: Generify ClusterManagementService","date":"2019-06-19 06:26:48","modifiedFileCount":"50","status":"M","submitter":"Owen Nichols"},{"authorTime":"2019-06-19 06:26:48","codes":[{"authorDate":"2019-06-28 00:27:11","commitOrder":5,"curCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      SimpleClusterManagementResult clusterManagementResult =\n          service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-06-28 00:27:11","endLine":135,"groupId":"940","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"serverHasNoSslPropertyAndDoUseCorrectDefaultSSL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6c/f2377b00777c2aa9e54effae4692d24ba8a29a.src","preCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      ClusterManagementResult<RegionConfig> clusterManagementResult =\n          service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2019-06-19 06:26:48","commitOrder":5,"curCode":"  public void useDefaultSSLPropertyTakesPrecedence() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-06-19 06:26:48","endLine":159,"groupId":"3156","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"useDefaultSSLPropertyTakesPrecedence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/90937c995650b1e35e373a7d18f42a8208da2b.src","preCode":"  public void useDefaultSSLPropertyTakesPrecedence() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"b3157c94cd9738be618b59b3f0ab064a9356a589","commitMessage":"@@@* GEODE-6861: have create/delete/update return SimpleClusterManagementResult which does not need generics.\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\n\n\n","date":"2019-06-28 00:27:11","modifiedFileCount":"25","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2019-06-19 06:26:48","codes":[{"authorDate":"2019-06-28 01:35:06","commitOrder":6,"curCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      ClusterManagementResult<RegionConfig> clusterManagementResult =\n          service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-06-28 01:35:06","endLine":135,"groupId":"940","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"serverHasNoSslPropertyAndDoUseCorrectDefaultSSL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/90937c995650b1e35e373a7d18f42a8208da2b.src","preCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      SimpleClusterManagementResult clusterManagementResult =\n          service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2019-06-19 06:26:48","commitOrder":6,"curCode":"  public void useDefaultSSLPropertyTakesPrecedence() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-06-19 06:26:48","endLine":159,"groupId":"3156","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"useDefaultSSLPropertyTakesPrecedence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/90937c995650b1e35e373a7d18f42a8208da2b.src","preCode":"  public void useDefaultSSLPropertyTakesPrecedence() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"24fc3195e214cdbcacc6688c5045747e32c62bc1","commitMessage":"@@@Revert \"* GEODE-6861: have create/delete/update return SimpleClusterManagementResult which does not need generics.\"\n\nThis reverts commit b3157c94\n","date":"2019-06-28 01:35:06","modifiedFileCount":"25","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2019-06-19 06:26:48","codes":[{"authorDate":"2019-06-29 02:10:02","commitOrder":7,"curCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      ClusterManagementResult<?, ?> clusterManagementResult =\n          service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-06-29 02:10:02","endLine":135,"groupId":"940","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"serverHasNoSslPropertyAndDoUseCorrectDefaultSSL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e4/f3a7e1a3941d62e33360a449e2c653c2640231.src","preCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      ClusterManagementResult<RegionConfig> clusterManagementResult =\n          service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2019-06-19 06:26:48","commitOrder":7,"curCode":"  public void useDefaultSSLPropertyTakesPrecedence() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-06-19 06:26:48","endLine":159,"groupId":"3156","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"useDefaultSSLPropertyTakesPrecedence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/90937c995650b1e35e373a7d18f42a8208da2b.src","preCode":"  public void useDefaultSSLPropertyTakesPrecedence() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"2c39f92dc5fa129058144a9ec16606092dc3d51e","commitMessage":"@@@GEODE-6861: separate static config object from runtime info in the Cl? (#3754)\n\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>\n\n* use ConfigRealizer to retrieve the runtime information for configuration on each member\n* list result would return a List of Response object which has a configuration object and a list runtime objects\n* use existing object for runtime member info and move them to geode-management module.\n","date":"2019-06-29 02:10:02","modifiedFileCount":"61","status":"M","submitter":"Jinmei Liao"},{"authorTime":"2019-06-19 06:26:48","codes":[{"authorDate":"2019-07-12 06:08:46","commitOrder":8,"curCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      ClusterManagementResult clusterManagementResult =\n          service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-07-12 06:08:46","endLine":135,"groupId":"940","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"serverHasNoSslPropertyAndDoUseCorrectDefaultSSL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d8/6596fc1139ae7398dff21020cd33c8dc539969.src","preCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      ClusterManagementResult<?, ?> clusterManagementResult =\n          service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2019-06-19 06:26:48","commitOrder":8,"curCode":"  public void useDefaultSSLPropertyTakesPrecedence() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2019-06-19 06:26:48","endLine":159,"groupId":"3156","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"useDefaultSSLPropertyTakesPrecedence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/90937c995650b1e35e373a7d18f42a8208da2b.src","preCode":"  public void useDefaultSSLPropertyTakesPrecedence() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"592875c12cf723be42d62747efcc71a97887cfd4","commitMessage":"@@@GEODE-6897: refactor ClusterManagementResult into subclasses (#3793)\n\n* GEODE-6897: refactoring of ClusterManagementResult into subclasses","date":"2019-07-12 06:08:46","modifiedFileCount":"30","status":"M","submitter":"Owen Nichols"},{"authorTime":"2020-01-22 07:31:35","codes":[{"authorDate":"2020-01-22 07:31:35","commitOrder":9,"curCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          new ClusterManagementServiceBuilder().setConnectionConfig(\n              new GeodeConnectionConfig(ClusterStartupRule.getCache()))\n              .build();\n      assertThat(service).isNotNull();\n      ClusterManagementResult clusterManagementResult =\n          service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2020-01-22 07:31:35","endLine":137,"groupId":"940","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"serverHasNoSslPropertyAndDoUseCorrectDefaultSSL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c9/130b3b90f12ff83748caa33bfe6b3328a6086a.src","preCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      ClusterManagementResult clusterManagementResult =\n          service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2020-01-22 07:31:35","commitOrder":9,"curCode":"  public void useDefaultSSLPropertyTakesPrecedence() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          new ClusterManagementServiceBuilder().setConnectionConfig(\n              new GeodeConnectionConfig(ClusterStartupRule.getCache()))\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2020-01-22 07:31:35","endLine":162,"groupId":"3156","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"useDefaultSSLPropertyTakesPrecedence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c9/130b3b90f12ff83748caa33bfe6b3328a6086a.src","preCode":"  public void useDefaultSSLPropertyTakesPrecedence() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          buildWithCache().setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"}],"commitId":"efe5f70cf7641e42a9892cf9a949e46f9a989a5e","commitMessage":"@@@GEODE-7715: Introduce Transport and Config interfaces to ClusterManagementServiceBuilder (#4601)\n\nThis introduces several new interfaces to the `ClusterManagementService`. These are:\n\n- `ClusterManagmentServiceTransport` which represents the message exchange between client and endpoint.\n- `ClusterManagementServiceConnectionConfig` which is a data object and represents various properties required to establish a connection.\n","date":"2020-01-22 07:31:35","modifiedFileCount":"33","status":"M","submitter":"Patrick Johnson"},{"authorTime":"2020-02-06 05:47:39","codes":[{"authorDate":"2020-02-06 05:47:39","commitOrder":10,"curCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          new GeodeClusterManagementServiceBuilder()\n              .setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      ClusterManagementResult clusterManagementResult =\n          service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2020-02-06 05:47:39","endLine":137,"groupId":"101522","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"serverHasNoSslPropertyAndDoUseCorrectDefaultSSL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d2/ded0330275f8c0cf2dd6b460bab1b00117bec2.src","preCode":"  public void serverHasNoSslPropertyAndDoUseCorrectDefaultSSL() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties();\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      System.setProperty(\"javax.net.ssl.keyStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");\n      System.setProperty(\"javax.net.ssl.trustStore\", keyFile.getCanonicalPath());\n      System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n      System.setProperty(\"javax.net.ssl.trustStoreType\", \"JKS\");\n\n      ClusterManagementService service =\n          new ClusterManagementServiceBuilder().setConnectionConfig(\n              new GeodeConnectionConfig(ClusterStartupRule.getCache()))\n              .build();\n      assertThat(service).isNotNull();\n      ClusterManagementResult clusterManagementResult =\n          service.create(regionConfig);\n      assertThat(clusterManagementResult.isSuccessful()).isTrue();\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2020-02-06 05:47:39","commitOrder":10,"curCode":"  public void useDefaultSSLPropertyTakesPrecedence() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          new GeodeClusterManagementServiceBuilder()\n              .setCache(ClusterStartupRule.getCache())\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","date":"2020-02-06 05:47:39","endLine":162,"groupId":"101522","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"useDefaultSSLPropertyTakesPrecedence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d2/ded0330275f8c0cf2dd6b460bab1b00117bec2.src","preCode":"  public void useDefaultSSLPropertyTakesPrecedence() {\n    locator = cluster.startLocatorVM(0, l -> l.withHttpService().withProperties(sslProps));\n    int locatorPort = locator.getPort();\n    Properties serverProps = new Properties(sslProps);\n    serverProps.setProperty(SSL_USE_DEFAULT_CONTEXT, \"true\");\n    server = cluster.startServerVM(1,\n        s -> s.withConnectionToLocator(locatorPort).withProperties(serverProps));\n\n    server.invoke(() -> {\n      \r\n      \r\n      ClusterManagementService service =\n          new ClusterManagementServiceBuilder().setConnectionConfig(\n              new GeodeConnectionConfig(ClusterStartupRule.getCache()))\n              .build();\n      assertThat(service).isNotNull();\n      assertThatThrownBy(() -> service.create(regionConfig))\n          .isInstanceOf(ResourceAccessException.class);\n    });\n\n    \r\n    server.getVM().bounce();\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"}],"commitId":"7028f601680fee3f57cbdff63951128d7180ca13","commitMessage":"@@@GEODE-7752: Removed the current optionality on the ClusterManagementServiceBuilder. (#4650)\n\nThe Transport is not responsible to set the ConnectionConfig.","date":"2020-02-06 05:47:39","modifiedFileCount":"29","status":"M","submitter":"Udo Kohlmeyer"}]
