[{"authorTime":"2019-07-30 05:14:27","codes":[{"authorDate":"2019-05-21 23:42:21","commitOrder":4,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sc.createSSLEngine(\"localhost\", 1234),\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(500),\n                new BufferPool(mock(DMStats.class)));\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IllegalStateException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2019-05-21 23:42:21","endLine":289,"groupId":"42069","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5a/092856c46dc9ac234f4988d39dc9f9fbd1df56.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sc.createSSLEngine(\"localhost\", 1234),\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(500),\n                new BufferPool(mock(DMStats.class)));\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IllegalStateException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"NB"},{"authorDate":"2019-07-30 05:14:27","commitOrder":4,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sc.createSSLEngine(this.localHost.getHostName(), 1234),\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(500),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IllegalStateException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2019-07-30 05:14:27","endLine":214,"groupId":"1607","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b1/4f78fb4e5019dd6610a19033dc6fc4d273b035.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sc.createSSLEngine(this.localHost.getHostName(), 1234),\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(500),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IllegalStateException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketHostNameVerificationIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"B"}],"commitId":"e57028fd62a2f5980ea6c9a7ab89ada06c828634","commitMessage":"@@@GEODE-7018: Enable hostname validation for SSL over NIO (#3849)\n\n\n","date":"2019-07-30 05:14:27","modifiedFileCount":"2","status":"M","submitter":"Sai Boorlagadda"},{"authorTime":"2019-11-06 23:54:54","codes":[{"authorDate":"2019-11-06 23:54:54","commitOrder":5,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sc.createSSLEngine(\"localhost\", 1234),\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IllegalStateException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2019-11-06 23:54:54","endLine":289,"groupId":"42069","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/86/59c6797681806d07306d31eb57af41f92ea08c.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sc.createSSLEngine(\"localhost\", 1234),\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(500),\n                new BufferPool(mock(DMStats.class)));\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IllegalStateException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2019-11-06 23:54:54","commitOrder":5,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(this.localHost.getHostName(), 1234);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IllegalStateException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2019-11-06 23:54:54","endLine":226,"groupId":"1607","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a1/b0226f3ba31e37ae5c89d828e8a3bb333f608f.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sc.createSSLEngine(this.localHost.getHostName(), 1234),\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(500),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IllegalStateException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketHostNameVerificationIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"4a69a7fea153ce4435e1c4caf777e21ab07a6128","commitMessage":"@@@Feature/geode 6661 (#4284)\n\n* GEODE-6661 NioSslEngine has some problems in its ByteBuffer management\n\nReverting the change to use a temporary byte buffer for SSL handshakes.\nAt the end of a handshake the buffer may contain application data that\nmust be available for subsequent decryption.  In the case of TCPConduit\nthis is usually the \"handshake\" bytes transmitted for that package's\ncommunications protocol.\n\nSince we really need those bytes I've removed the option of expanding\nthe handshake buffer if it's smaller than the SSL session's required\npacket size.  TCPConduit uses that figure to allocate the buffer so this\nshould be safe.  I've added a test for this.\n\n* reverting investigative changes to test\n\n* fix failing unit tests - adjusted buffer sizes\n\n* reverted another set of investigative test changes\n","date":"2019-11-06 23:54:54","modifiedFileCount":"4","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-03-25 02:07:27","codes":[{"authorDate":"2020-03-25 02:07:27","commitOrder":6,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sc.createSSLEngine(\"localhost\", 1234),\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2020-03-25 02:07:27","endLine":294,"groupId":"42069","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f1/d73972778b7bac096d84e7a89928aaaa565c25.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sc.createSSLEngine(\"localhost\", 1234),\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IllegalStateException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"M"},{"authorDate":"2020-03-25 02:07:27","commitOrder":6,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(this.localHost.getHostName(), 1234);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2020-03-25 02:07:27","endLine":227,"groupId":"1607","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/54/834579ee79344f0f6af48698c6f9e7c4746107.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(this.localHost.getHostName(), 1234);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IllegalStateException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketHostNameVerificationIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"1dfc496da34916297258b881c5606944d26bfb8b","commitMessage":"@@@GEODE-6008: CI Failure: ClientServerHostNameVerificationDistributedTe? (#4839)\n\n* GEODE-6008: CI Failure: ClientServerHostNameVerificationDistributedTest.expectConnectionFailureWhenNoHostNameInServerKey failed\n\nThe \"Message distribution has terminated\" failure is caused by an\nunreported NullPointerException in a residual reader thread introduced\nin the fix for GEODE-7727.  That fix caused a thread to say alive in a\npeer-to-peer tcp/ip Connection in order to clean up the receiving side\nof a socket.  The Connection shutdown method close() method.  however. \nreleases the Connection's input buffer and nulls out the field.  The\nreader thread then threw an NPE that was caught and caused the\n\"Message distribution has terminated\" message.  which is picked up as a\nsuspect string by the testing infrastructure.\n\nThis problem is also seen in GEODE-7894.  GEODE-7871.  GEODE-7873 and\nGEODE-7806.\n\nThe fix is to record the fact that a residual reader thread exists and\navoid releasing the Connection's input buffer when the connection is\nclosed.  This lets the reader thread do the cleanup.\n\nWhile testing the fix I found that the NioSslEngine was throwing an\nIllegalStateException when the reader thread tried to use it in this\nsame situation.  This exception wasn't being caught and caused more\nsuspect strings to be logged.  I've changed this to a checked exception\nthat is already handled by the reader thread.\n\nClientServerHostNameVerificationDistributedTest also wasn't working on\nmy Mac due to its /etc/hosts configuration.  I changed the test to allow\nthe IP address selected by LocalHostUtil to be a valid client/server\naddress for the SSL certificates it generates.\n\n* fixed failing test due to change in exceptions in NioSslEngine","date":"2020-03-25 02:07:27","modifiedFileCount":"7","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-03-25 02:07:27","codes":[{"authorDate":"2020-06-17 01:27:59","commitOrder":7,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(\"localhost\", 1234);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n        final List<SNIServerName> serverNames = sslEngine.getSSLParameters().getServerNames();\n        if (serverNames != null && serverNames.stream()\n            .mapToInt(SNIServerName::getType)\n            .anyMatch(type -> type == StandardConstants.SNI_HOST_NAME)) {\n          serverException = new AssertionError(\"found SNI server name in SSL Parameters\");\n          return;\n        }\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2020-06-17 01:27:59","endLine":311,"groupId":"10600","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/48/00940dba05a515a1d504c32680358a43404b21.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sc.createSSLEngine(\"localhost\", 1234),\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2020-03-25 02:07:27","commitOrder":7,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(this.localHost.getHostName(), 1234);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2020-03-25 02:07:27","endLine":227,"groupId":"1607","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/54/834579ee79344f0f6af48698c6f9e7c4746107.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(this.localHost.getHostName(), 1234);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketHostNameVerificationIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"N"}],"commitId":"b1107d2e403404337c22830a4964eefc2490ef50","commitMessage":"@@@GEODE-8144: setting SNI server name is not needed if endpoint verification is disabled (#5250)\n\n* GEODE-8144: endpoint identification in servers is not working\n\nmodified the fix for this issue to not set the SNI server name parameter\nif endpoint verification is disabled.  We're doing this because setting\nthis parameter appears to decrease performance in large performance\ntests.\n\n* changed test to throw exceptions instead of asserting they don't exist\n\n* replaced check for SNI server name in SSL parameters with a more in-depth check\n\n* SSLParameters.getServerNames() may return a null value","date":"2020-06-17 01:27:59","modifiedFileCount":"2","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-08-20 06:27:07","codes":[{"authorDate":"2020-08-20 06:27:07","commitOrder":8,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(\"localhost\", 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n        final List<SNIServerName> serverNames = sslEngine.getSSLParameters().getServerNames();\n        if (serverNames != null && serverNames.stream()\n            .mapToInt(SNIServerName::getType)\n            .anyMatch(type -> type == StandardConstants.SNI_HOST_NAME)) {\n          serverException = new AssertionError(\"found SNI server name in SSL Parameters\");\n          return;\n        }\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2020-08-20 06:27:07","endLine":311,"groupId":"10600","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/19/eab4fdc6abd0591c756f42f00e9194e29d3354.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(\"localhost\", 1234);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n        final List<SNIServerName> serverNames = sslEngine.getSSLParameters().getServerNames();\n        if (serverNames != null && serverNames.stream()\n            .mapToInt(SNIServerName::getType)\n            .anyMatch(type -> type == StandardConstants.SNI_HOST_NAME)) {\n          serverException = new AssertionError(\"found SNI server name in SSL Parameters\");\n          return;\n        }\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2020-08-20 06:27:07","commitOrder":8,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(this.localHost.getHostName(), 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2020-08-20 06:27:07","endLine":227,"groupId":"47356","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/dc/7df44f23c793f7e1f6adef14209915361a9b40.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(this.localHost.getHostName(), 1234);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketHostNameVerificationIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"537721ff815cf40eff85fde65db9b5e787471c89","commitMessage":"@@@GEODE-8419: SSL/TLS protocol and cipher suite configuration is ignored (#5465)\n\n* GEODE-8419: SSL/TLS protocol and cipher suite configuration is ignored\n\nConfigure cipher suites when creating an SSLEngine\n\n* addressing test issues\n\n* fixing error in SSLSocket endpoint validation\n\n* addressing Jake's comments\n\n* change test to use ArgumentCaptor - thanks Jake\\!\n\n* check captured argument content","date":"2020-08-20 06:27:07","modifiedFileCount":"33","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-10-30 07:38:25","codes":[{"authorDate":"2020-10-30 07:38:25","commitOrder":9,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(\"localhost\", 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n        final List<SNIServerName> serverNames = sslEngine.getSSLParameters().getServerNames();\n        if (serverNames != null && serverNames.stream()\n            .mapToInt(SNIServerName::getType)\n            .anyMatch(type -> type == StandardConstants.SNI_HOST_NAME)) {\n          serverException = new AssertionError(\"found SNI server name in SSL Parameters\");\n          return;\n        }\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            try (final ByteBufferSharing unused =\n                nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]))) {\n            }\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2020-10-30 07:38:25","endLine":315,"groupId":"10600","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ad/d6b9a65d5116771f48f3ac44ff17df5e477571.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(\"localhost\", 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n        final List<SNIServerName> serverNames = sslEngine.getSSLParameters().getServerNames();\n        if (serverNames != null && serverNames.stream()\n            .mapToInt(SNIServerName::getType)\n            .anyMatch(type -> type == StandardConstants.SNI_HOST_NAME)) {\n          serverException = new AssertionError(\"found SNI server name in SSL Parameters\");\n          return;\n        }\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"},{"authorDate":"2020-10-30 07:38:25","commitOrder":9,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(this.localHost.getHostName(), 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            try (final ByteBufferSharing unused =\n                nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]))) {\n            }\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2020-10-30 07:38:25","endLine":229,"groupId":"47356","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a7/0f3b15ae6562386499ba97e845fb6b603ce94f.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(this.localHost.getHostName(), 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketHostNameVerificationIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"08e9e9673d0ed05555a3d74c6d16e706817cab09","commitMessage":"@@@GEODE-8652: NioSslEngine.close() Bypasses Locks (#5666)\n\n- NioSslEngine.close() proceeds even if readers (or writers) are\n  operating on its ByteBuffers.  allowing Connection.close() to close \n  its socket and proceed.\n\n- NioSslEngine.close() needed a lock only on the output buffer.  so \n  we split what was a single lock into two. Also instead of using \n  synchronized we use a ReentrantLock so we can \n  call tryLock() and time out if needed in NioSslEngine.close().\n\n- Since readers/writers may hold locks on these input/output buffers\n  when NioSslEngine.close() is called a reference count is maintained\n  and the buffers are returned to the pool only when the last user\n  is done.\n\n- To manage the locking and reference counting a new AutoCloseable\n  ByteBufferSharing interface is introduced with a trivial \n  implementation: ByteBufferSharingNoOp and a real implementation:\n  ByteBufferSharingImpl.\n\nCo-authored-by: Bill Burcham <bill.burcham@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>\nCo-authored-by: Ernie Burghardt <burghardte@vmware.com>","date":"2020-10-30 07:38:25","modifiedFileCount":"9","status":"M","submitter":"Bill Burcham"},{"authorTime":"2020-11-06 04:52:02","codes":[{"authorDate":"2020-11-06 04:52:02","commitOrder":10,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(\"localhost\", 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n        final List<SNIServerName> serverNames = sslEngine.getSSLParameters().getServerNames();\n        if (serverNames != null && serverNames.stream()\n            .mapToInt(SNIServerName::getType)\n            .anyMatch(type -> type == StandardConstants.SNI_HOST_NAME)) {\n          serverException = new AssertionError(\"found SNI server name in SSL Parameters\");\n          return;\n        }\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2020-11-06 05:45:26","endLine":311,"groupId":"10600","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/19/eab4fdc6abd0591c756f42f00e9194e29d3354.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(\"localhost\", 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n        final List<SNIServerName> serverNames = sslEngine.getSSLParameters().getServerNames();\n        if (serverNames != null && serverNames.stream()\n            .mapToInt(SNIServerName::getType)\n            .anyMatch(type -> type == StandardConstants.SNI_HOST_NAME)) {\n          serverException = new AssertionError(\"found SNI server name in SSL Parameters\");\n          return;\n        }\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            try (final ByteBufferSharing unused =\n                nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]))) {\n            }\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2020-11-06 04:52:02","commitOrder":10,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(this.localHost.getHostName(), 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2020-11-06 05:45:26","endLine":227,"groupId":"47356","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/dc/7df44f23c793f7e1f6adef14209915361a9b40.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(this.localHost.getHostName(), 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            try (final ByteBufferSharing unused =\n                nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]))) {\n            }\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketHostNameVerificationIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"9653a0b6e490272fa77d375049f0e9f1cb6c8929","commitMessage":"@@@Revert \"GEODE-8652: NioSslEngine.close() Bypasses Locks (#5666)\"\n\nThis reverts commit 08e9e9673d0ed05555a3d74c6d16e706817cab09.\n","date":"2020-11-06 05:45:26","modifiedFileCount":"9","status":"M","submitter":"Bill Burcham"},{"authorTime":"2020-11-06 09:30:29","codes":[{"authorDate":"2020-11-06 09:30:29","commitOrder":11,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(\"localhost\", 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n        final List<SNIServerName> serverNames = sslEngine.getSSLParameters().getServerNames();\n        if (serverNames != null && serverNames.stream()\n            .mapToInt(SNIServerName::getType)\n            .anyMatch(type -> type == StandardConstants.SNI_HOST_NAME)) {\n          serverException = new AssertionError(\"found SNI server name in SSL Parameters\");\n          return;\n        }\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            try (final ByteBufferSharing unused =\n                nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]))) {\n            }\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2020-11-06 09:30:29","endLine":315,"groupId":"10600","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ad/d6b9a65d5116771f48f3ac44ff17df5e477571.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(\"localhost\", 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n        final List<SNIServerName> serverNames = sslEngine.getSSLParameters().getServerNames();\n        if (serverNames != null && serverNames.stream()\n            .mapToInt(SNIServerName::getType)\n            .anyMatch(type -> type == StandardConstants.SNI_HOST_NAME)) {\n          serverException = new AssertionError(\"found SNI server name in SSL Parameters\");\n          return;\n        }\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"},{"authorDate":"2020-11-06 09:30:29","commitOrder":11,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(this.localHost.getHostName(), 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            try (final ByteBufferSharing unused =\n                nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]))) {\n            }\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2020-11-06 09:30:29","endLine":229,"groupId":"47356","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a7/0f3b15ae6562386499ba97e845fb6b603ce94f.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(this.localHost.getHostName(), 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]));\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketHostNameVerificationIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"af267c005a63317cbb8528cdb38eccf6a8747818","commitMessage":"@@@* GEODE-8652: NioSslEngine.close() Bypasses Locks (#5712)\n\n- NioSslEngine.close() proceeds even if readers (or writers) are\n  operating on its ByteBuffers.  allowing Connection.close() to close\n  its socket and proceed.\n\n- NioSslEngine.close() needed a lock only on the output buffer.  so\n  we split what was a single lock into two. Also instead of using\n  synchronized we use a ReentrantLock so we can\n  call tryLock() and time out if needed in NioSslEngine.close().\n\n- Since readers/writers may hold locks on these input/output buffers\n  when NioSslEngine.close() is called a reference count is maintained\n  and the buffers are returned to the pool only when the last user\n  is done.\n\n- To manage the locking and reference counting a new AutoCloseable\n  ByteBufferSharing interface is introduced with a trivial\n  implementation: ByteBufferSharingNoOp and a real implementation:\n  ByteBufferSharingImpl.\n\n- Added a new unit test.  and a new concurrency test for\n  ByteBufferSharingImpl: both ensure that ByteBuffers are returned\n  to the pool exactly once. Added a new DUnit test for the interaction\n  between ByteBufferSharingImpl and NioSslEngine and Connection.\n\nCo-authored-by: Bill Burcham <bill.burcham@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>\nCo-authored-by: Ernie Burghardt <burghardte@vmware.com>\nCo-authored-by: Dan Smith <upthewaterspout@apache.org>","date":"2020-11-06 09:30:29","modifiedFileCount":"9","status":"M","submitter":"Bill Burcham"},{"authorTime":"2021-03-05 03:55:51","codes":[{"authorDate":"2020-11-06 09:30:29","commitOrder":12,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(\"localhost\", 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n        final List<SNIServerName> serverNames = sslEngine.getSSLParameters().getServerNames();\n        if (serverNames != null && serverNames.stream()\n            .mapToInt(SNIServerName::getType)\n            .anyMatch(type -> type == StandardConstants.SNI_HOST_NAME)) {\n          serverException = new AssertionError(\"found SNI server name in SSL Parameters\");\n          return;\n        }\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            try (final ByteBufferSharing unused =\n                nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]))) {\n            }\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2020-11-06 09:30:29","endLine":315,"groupId":"10600","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ad/d6b9a65d5116771f48f3ac44ff17df5e477571.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(\"localhost\", 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n        final List<SNIServerName> serverNames = sslEngine.getSSLParameters().getServerNames();\n        if (serverNames != null && serverNames.stream()\n            .mapToInt(SNIServerName::getType)\n            .anyMatch(type -> type == StandardConstants.SNI_HOST_NAME)) {\n          serverException = new AssertionError(\"found SNI server name in SSL Parameters\");\n          return;\n        }\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            try (final ByteBufferSharing unused =\n                nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]))) {\n            }\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"N"},{"authorDate":"2021-03-05 03:55:51","commitOrder":12,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(localHost.getHostName(), 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            try (final ByteBufferSharing unused =\n                nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]))) {\n            }\n          }).isInstanceOf(IOException.class);\n        }\n      }\n    }, testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2021-03-05 03:55:51","endLine":228,"groupId":"38157","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5b/31a34418c956e5f011d295155e2a36a340251e.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(this.localHost.getHostName(), 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            try (final ByteBufferSharing unused =\n                nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]))) {\n            }\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketHostNameVerificationIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"52e74112317bdc0b25904eba5b1308e0c1691306","commitMessage":"@@@GEODE-8979: CI Failure: SSLSocketHostNameVerificationIntegrationTest (#6079)\n\nThis test was closing a client socket before ensuring that a thread it\nhad created was finished.  If the socket is closed quickly enough it\ncould cause that thread to get an IOException and cause the test to\nfail.\n\nThe fix is to ensure that the thread is finished before closing the\nclient socket.","date":"2021-03-05 03:55:51","modifiedFileCount":"1","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2021-04-18 00:12:13","codes":[{"authorDate":"2021-04-18 00:12:13","commitOrder":13,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(\"localhost\", 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sslEngine,\n                timeoutMillis,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n        final List<SNIServerName> serverNames = sslEngine.getSSLParameters().getServerNames();\n        if (serverNames != null && serverNames.stream()\n            .mapToInt(SNIServerName::getType)\n            .anyMatch(type -> type == StandardConstants.SNI_HOST_NAME)) {\n          serverException = new AssertionError(\"found SNI server name in SSL Parameters\");\n          return;\n        }\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            try (final ByteBufferSharing unused =\n                nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]))) {\n            }\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2021-04-29 01:25:35","endLine":314,"groupId":"104258","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/54/15f4e6eed35aad6cb5e620d73be69d18d52da9.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis)\n      throws Exception {\n    Thread serverThread = new Thread(new MyThreadGroup(this.testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        ByteBuffer buffer = ByteBuffer.allocate(65535);\n\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(\"localhost\", 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(), sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(65535),\n                new BufferPool(mock(DMStats.class)));\n        final List<SNIServerName> serverNames = sslEngine.getSSLParameters().getServerNames();\n        if (serverNames != null && serverNames.stream()\n            .mapToInt(SNIServerName::getType)\n            .anyMatch(type -> type == StandardConstants.SNI_HOST_NAME)) {\n          serverException = new AssertionError(\"found SNI server name in SSL Parameters\");\n          return;\n        }\n\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n        readMessageFromNIOSSLClient(socket, buffer, engine);\n      } catch (Throwable throwable) {\n        throwable.printStackTrace(System.out);\n        serverException = throwable;\n      } finally {\n        if (engine != null && socket != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            try (final ByteBufferSharing unused =\n                nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]))) {\n            }\n          })\n              .isInstanceOf(IOException.class);\n        }\n      }\n    }, this.testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"},{"authorDate":"2021-04-18 00:12:13","commitOrder":13,"curCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(localHost.getHostName(), 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            try (final ByteBufferSharing unused =\n                nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]))) {\n            }\n          }).isInstanceOf(IOException.class);\n        }\n      }\n    }, testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","date":"2021-04-29 01:25:35","endLine":230,"groupId":"104258","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"startServerNIO","params":"(finalServerSocketserverSocket@inttimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/11/a5e720aa23b0da11781394896021accf80dc9d.src","preCode":"  private Thread startServerNIO(final ServerSocket serverSocket, int timeoutMillis) {\n    Thread serverThread = new Thread(new MyThreadGroup(testName.getMethodName()), () -> {\n      NioSslEngine engine = null;\n      Socket socket = null;\n      try {\n        socket = serverSocket.accept();\n        SocketCreator sc = SocketCreatorFactory.getSocketCreatorForComponent(CLUSTER);\n        final SSLEngine sslEngine = sc.createSSLEngine(localHost.getHostName(), 1234, false);\n        engine =\n            sc.handshakeSSLSocketChannel(socket.getChannel(),\n                sslEngine,\n                timeoutMillis,\n                false,\n                ByteBuffer.allocate(sslEngine.getSession().getPacketBufferSize()),\n                new BufferPool(mock(DMStats.class)));\n      } catch (Throwable throwable) {\n        serverException = throwable;\n      } finally {\n        if (engine != null) {\n          final NioSslEngine nioSslEngine = engine;\n          engine.close(socket.getChannel());\n          assertThatThrownBy(() -> {\n            try (final ByteBufferSharing unused =\n                nioSslEngine.unwrap(ByteBuffer.wrap(new byte[0]))) {\n            }\n          }).isInstanceOf(IOException.class);\n        }\n      }\n    }, testName.getMethodName() + \"-server\");\n\n    serverThread.start();\n    return serverThread;\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketHostNameVerificationIntegrationTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"9d0d4d1d33794d0f6a21c3bcae71e965cbbd7fbd","commitMessage":"@@@GEODE-9141: (2 of 2) Handle in-buffer concurrency\n* Connection uses a ByteBufferVendor to mediate access to inputBuffer\n* Prevent return to pool before socket closer is finished\n","date":"2021-04-29 01:25:35","modifiedFileCount":"12","status":"M","submitter":"Bill Burcham"}]
