[{"authorTime":"2018-08-11 06:49:22","codes":[{"authorDate":"2018-08-11 06:49:22","commitOrder":1,"curCode":"  public void testOrderByWithNullValues() throws Exception {\n    \r\n    \r\n    String queries[] = getQueriesForOrderByWithNullValues();\n\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n\n    \r\n    final int size = 9;\n    final int numNullValues = 3;\n    Region r1 = createRegion(\"portfolio1\", Portfolio.class);\n    for (int i = 1; i <= size; i++) {\n      Portfolio pf = new Portfolio(i);\n      \r\n      if (i <= numNullValues) {\n        pf.pkid = null;\n        pf.status = \"a\" + i;\n      }\n      r1.put(i + \"\", pf);\n    }\n\n    Query q = null;\n    SelectResults results = null;\n    List list = null;\n    String str = \"\";\n    try {\n      \r\n      str = queries[0];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      r[0][0] = results;\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, p: \" + p, p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[1];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[2];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i > (size - numNullValues)) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[3];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i == 1) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (numNullValues + (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[4];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i == 1) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (numNullValues + (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[5];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i == (list.size())) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n\n      \r\n      str = queries[6];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        int id = (Integer) ((Struct) list.get((i - 1))).getFieldValues()[0];\n        \r\n        if (i <= numNullValues) {\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (id != i) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        }\n      }\n\n\n\n      \r\n      str = queries[7];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[8];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != i) {\n            fail(\" Value of ID is not as expected, it is: \" + id + \" expected :\" + i);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[9];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != (numNullValues - (i - 1))) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(q.getQueryString());\n    }\n  }\n","date":"2018-08-11 06:49:22","endLine":536,"groupId":"47849","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrderByWithNullValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f9/cfa69e508fed220a334eed043290123c2f457b.src","preCode":"  public void testOrderByWithNullValues() throws Exception {\n    \r\n    \r\n    String queries[] = getQueriesForOrderByWithNullValues();\n\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n\n    \r\n    final int size = 9;\n    final int numNullValues = 3;\n    Region r1 = createRegion(\"portfolio1\", Portfolio.class);\n    for (int i = 1; i <= size; i++) {\n      Portfolio pf = new Portfolio(i);\n      \r\n      if (i <= numNullValues) {\n        pf.pkid = null;\n        pf.status = \"a\" + i;\n      }\n      r1.put(i + \"\", pf);\n    }\n\n    Query q = null;\n    SelectResults results = null;\n    List list = null;\n    String str = \"\";\n    try {\n      \r\n      str = queries[0];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      r[0][0] = results;\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, p: \" + p, p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[1];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[2];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i > (size - numNullValues)) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[3];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i == 1) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (numNullValues + (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[4];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i == 1) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (numNullValues + (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[5];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i == (list.size())) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n\n      \r\n      str = queries[6];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        int id = (Integer) ((Struct) list.get((i - 1))).getFieldValues()[0];\n        \r\n        if (i <= numNullValues) {\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (id != i) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        }\n      }\n\n\n\n      \r\n      str = queries[7];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[8];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != i) {\n            fail(\" Value of ID is not as expected, it is: \" + id + \" expected :\" + i);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[9];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != (numNullValues - (i - 1))) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(q.getQueryString());\n    }\n  }\n","realPath":"geode-dunit/src/main/java/org/apache/geode/cache/query/functional/OrderByPartitionedJUnitTestBase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"B"},{"authorDate":"2018-08-11 06:49:22","commitOrder":1,"curCode":"  public void testOrderByWithNullValues() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    String queries[] = {\"SELECT   * FROM /portfolio1 pf1 order by pkid\", \r\n                                                                         \r\n                                                                         \r\n                                                                         \r\n        \"SELECT   * FROM /portfolio1 pf1  order by pkid asc\", \r\n                                                              \r\n                                                              \r\n        \"SELECT   * FROM /portfolio1 order by pkid desc\", \r\n                                                          \r\n                                                          \r\n                                                          \r\n        \"SELECT   pkid FROM /portfolio1 pf1 order by pkid\", \r\n                                                            \r\n                                                            \r\n                                                            \r\n                                                            \r\n        \"SELECT   pkid FROM /portfolio1 pf1 where pkid != 'XXXX' order by pkid asc\", \r\n        \"SELECT   pkid FROM /portfolio1 pf1 where pkid != 'XXXX' order by pkid desc\", \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID < 1000 order by pkid\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID > 3 order by pkid\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID < 1000 order by pkid\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID > 0 order by pkid\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID > 0 order by pkid, ID asc\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID > 0 order by pkid, ID desc\", \r\n    };\n\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n\n    \r\n    final int size = 9;\n    final int numNullValues = 3;\n    Region r1 = this.createRegion(\"portfolio1\", Portfolio.class);\n    for (int i = 1; i <= size; i++) {\n      Portfolio pf = new Portfolio(i);\n      \r\n      if (i <= numNullValues) {\n        pf.pkid = null;\n        pf.status = \"a\" + i;\n      }\n      r1.put(i + \"\", pf);\n    }\n\n    Query q = null;\n    SelectResults results = null;\n    List list = null;\n    String str = \"\";\n    try {\n      \r\n      str = queries[0];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      r[0][0] = results;\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, p: \" + p, p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[1];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[2];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i > (size - numNullValues)) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[3];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[4];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i <= 3) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[5];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i > (list.size() - numNullValues)) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[6];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        int id = (Integer) ((Struct) list.get((i - 1))).getFieldValues()[0];\n        \r\n        if (i <= numNullValues) {\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (id != i) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[7];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        int id = (Integer) ((Struct) list.get((i - 1))).getFieldValues()[0];\n        if (id != (numNullValues + i)) {\n          fail(\" Value of ID is not as expected, \" + id);\n        }\n      }\n\n      \r\n      str = queries[8];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        \r\n        if (i <= numNullValues) {\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          if (id != i) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[9];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[10];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != i) {\n            fail(\" Value of ID is not as expected, it is: \" + id + \" expected :\" + i);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[11];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != (numNullValues - (i - 1))) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(q.getQueryString());\n    }\n  }\n","date":"2018-08-11 06:49:22","endLine":1091,"groupId":"12612","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrderByWithNullValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/fb/72a3a0265b7b6b3a3a14c1ccd5c55280510ea2.src","preCode":"  public void testOrderByWithNullValues() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    String queries[] = {\"SELECT   * FROM /portfolio1 pf1 order by pkid\", \r\n                                                                         \r\n                                                                         \r\n                                                                         \r\n        \"SELECT   * FROM /portfolio1 pf1  order by pkid asc\", \r\n                                                              \r\n                                                              \r\n        \"SELECT   * FROM /portfolio1 order by pkid desc\", \r\n                                                          \r\n                                                          \r\n                                                          \r\n        \"SELECT   pkid FROM /portfolio1 pf1 order by pkid\", \r\n                                                            \r\n                                                            \r\n                                                            \r\n                                                            \r\n        \"SELECT   pkid FROM /portfolio1 pf1 where pkid != 'XXXX' order by pkid asc\", \r\n        \"SELECT   pkid FROM /portfolio1 pf1 where pkid != 'XXXX' order by pkid desc\", \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID < 1000 order by pkid\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID > 3 order by pkid\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID < 1000 order by pkid\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID > 0 order by pkid\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID > 0 order by pkid, ID asc\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID > 0 order by pkid, ID desc\", \r\n    };\n\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n\n    \r\n    final int size = 9;\n    final int numNullValues = 3;\n    Region r1 = this.createRegion(\"portfolio1\", Portfolio.class);\n    for (int i = 1; i <= size; i++) {\n      Portfolio pf = new Portfolio(i);\n      \r\n      if (i <= numNullValues) {\n        pf.pkid = null;\n        pf.status = \"a\" + i;\n      }\n      r1.put(i + \"\", pf);\n    }\n\n    Query q = null;\n    SelectResults results = null;\n    List list = null;\n    String str = \"\";\n    try {\n      \r\n      str = queries[0];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      r[0][0] = results;\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, p: \" + p, p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[1];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[2];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i > (size - numNullValues)) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[3];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[4];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i <= 3) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[5];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i > (list.size() - numNullValues)) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[6];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        int id = (Integer) ((Struct) list.get((i - 1))).getFieldValues()[0];\n        \r\n        if (i <= numNullValues) {\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (id != i) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[7];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        int id = (Integer) ((Struct) list.get((i - 1))).getFieldValues()[0];\n        if (id != (numNullValues + i)) {\n          fail(\" Value of ID is not as expected, \" + id);\n        }\n      }\n\n      \r\n      str = queries[8];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        \r\n        if (i <= numNullValues) {\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          if (id != i) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[9];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[10];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != i) {\n            fail(\" Value of ID is not as expected, it is: \" + id + \" expected :\" + i);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[11];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != (numNullValues - (i - 1))) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(q.getQueryString());\n    }\n  }\n","realPath":"geode-junit/src/main/java/org/apache/geode/cache/query/functional/NonDistinctOrderByTestImplementation.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":775,"status":"B"}],"commitId":"65c79841b65d7bd9ffa3c50fa73d4d3857dced58","commitMessage":"@@@ GEODE-5530: Removes test dependency from other test source sets (#2294)\n\nMoves common sources to geode-dunit or geode-junit.\n\nCo-authored-by: Finn Sutherland <fsoutherland@pivotal.io>","date":"2018-08-11 06:49:22","modifiedFileCount":"10","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2018-08-11 06:49:22","commitOrder":2,"curCode":"  public void testOrderByWithNullValues() throws Exception {\n    \r\n    \r\n    String queries[] = getQueriesForOrderByWithNullValues();\n\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n\n    \r\n    final int size = 9;\n    final int numNullValues = 3;\n    Region r1 = createRegion(\"portfolio1\", Portfolio.class);\n    for (int i = 1; i <= size; i++) {\n      Portfolio pf = new Portfolio(i);\n      \r\n      if (i <= numNullValues) {\n        pf.pkid = null;\n        pf.status = \"a\" + i;\n      }\n      r1.put(i + \"\", pf);\n    }\n\n    Query q = null;\n    SelectResults results = null;\n    List list = null;\n    String str = \"\";\n    try {\n      \r\n      str = queries[0];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      r[0][0] = results;\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, p: \" + p, p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[1];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[2];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i > (size - numNullValues)) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[3];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i == 1) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (numNullValues + (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[4];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i == 1) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (numNullValues + (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[5];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i == (list.size())) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n\n      \r\n      str = queries[6];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        int id = (Integer) ((Struct) list.get((i - 1))).getFieldValues()[0];\n        \r\n        if (i <= numNullValues) {\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (id != i) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        }\n      }\n\n\n\n      \r\n      str = queries[7];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[8];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != i) {\n            fail(\" Value of ID is not as expected, it is: \" + id + \" expected :\" + i);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[9];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != (numNullValues - (i - 1))) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(q.getQueryString());\n    }\n  }\n","date":"2018-08-11 06:49:22","endLine":536,"groupId":"105105","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrderByWithNullValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f9/cfa69e508fed220a334eed043290123c2f457b.src","preCode":"  public void testOrderByWithNullValues() throws Exception {\n    \r\n    \r\n    String queries[] = getQueriesForOrderByWithNullValues();\n\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n\n    \r\n    final int size = 9;\n    final int numNullValues = 3;\n    Region r1 = createRegion(\"portfolio1\", Portfolio.class);\n    for (int i = 1; i <= size; i++) {\n      Portfolio pf = new Portfolio(i);\n      \r\n      if (i <= numNullValues) {\n        pf.pkid = null;\n        pf.status = \"a\" + i;\n      }\n      r1.put(i + \"\", pf);\n    }\n\n    Query q = null;\n    SelectResults results = null;\n    List list = null;\n    String str = \"\";\n    try {\n      \r\n      str = queries[0];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      r[0][0] = results;\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, p: \" + p, p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[1];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[2];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i > (size - numNullValues)) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[3];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i == 1) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (numNullValues + (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[4];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i == 1) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (numNullValues + (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[5];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i == (list.size())) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n\n      \r\n      str = queries[6];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        int id = (Integer) ((Struct) list.get((i - 1))).getFieldValues()[0];\n        \r\n        if (i <= numNullValues) {\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (id != i) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        }\n      }\n\n\n\n      \r\n      str = queries[7];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[8];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != i) {\n            fail(\" Value of ID is not as expected, it is: \" + id + \" expected :\" + i);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[9];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != (numNullValues - (i - 1))) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(q.getQueryString());\n    }\n  }\n","realPath":"geode-dunit/src/main/java/org/apache/geode/cache/query/functional/OrderByPartitionedJUnitTestBase.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testOrderByWithNullValues() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    String queries[] = {\"SELECT   * FROM \" + SEPARATOR + \"portfolio1 pf1 order by pkid\", \r\n        \r\n        \r\n        \r\n        \"SELECT   * FROM \" + SEPARATOR + \"portfolio1 pf1  order by pkid asc\", \r\n        \r\n        \r\n        \"SELECT   * FROM \" + SEPARATOR + \"portfolio1 order by pkid desc\", \r\n        \r\n        \r\n        \r\n        \"SELECT   pkid FROM \" + SEPARATOR + \"portfolio1 pf1 order by pkid\", \r\n        \r\n        \r\n        \r\n        \r\n        \"SELECT   pkid FROM \" + SEPARATOR + \"portfolio1 pf1 where pkid != 'XXXX' order by pkid asc\", \r\n        \"SELECT   pkid FROM \" + SEPARATOR\n            + \"portfolio1 pf1 where pkid != 'XXXX' order by pkid desc\", \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        \"SELECT   ID, pkid FROM \" + SEPARATOR + \"portfolio1 pf1 where ID < 1000 order by pkid\", \r\n        \"SELECT   ID, pkid FROM \" + SEPARATOR + \"portfolio1 pf1 where ID > 3 order by pkid\", \r\n        \"SELECT   ID, pkid FROM \" + SEPARATOR + \"portfolio1 pf1 where ID < 1000 order by pkid\", \r\n        \"SELECT   ID, pkid FROM \" + SEPARATOR + \"portfolio1 pf1 where ID > 0 order by pkid\", \r\n        \"SELECT   ID, pkid FROM \" + SEPARATOR + \"portfolio1 pf1 where ID > 0 order by pkid, ID asc\", \r\n        \"SELECT   ID, pkid FROM \" + SEPARATOR\n            + \"portfolio1 pf1 where ID > 0 order by pkid, ID desc\", \r\n    };\n\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n\n    \r\n    final int size = 9;\n    final int numNullValues = 3;\n    Region r1 = this.createRegion(\"portfolio1\", Portfolio.class);\n    for (int i = 1; i <= size; i++) {\n      Portfolio pf = new Portfolio(i);\n      \r\n      if (i <= numNullValues) {\n        pf.pkid = null;\n        pf.status = \"a\" + i;\n      }\n      r1.put(i + \"\", pf);\n    }\n\n    Query q = null;\n    SelectResults results = null;\n    List list = null;\n    String str = \"\";\n    try {\n      \r\n      str = queries[0];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      r[0][0] = results;\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, p: \" + p, p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[1];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[2];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i > (size - numNullValues)) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[3];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[4];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i <= 3) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[5];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i > (list.size() - numNullValues)) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[6];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        int id = (Integer) ((Struct) list.get((i - 1))).getFieldValues()[0];\n        \r\n        if (i <= numNullValues) {\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (id != i) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[7];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        int id = (Integer) ((Struct) list.get((i - 1))).getFieldValues()[0];\n        if (id != (numNullValues + i)) {\n          fail(\" Value of ID is not as expected, \" + id);\n        }\n      }\n\n      \r\n      str = queries[8];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        \r\n        if (i <= numNullValues) {\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          if (id != i) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[9];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[10];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != i) {\n            fail(\" Value of ID is not as expected, it is: \" + id + \" expected :\" + i);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[11];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != (numNullValues - (i - 1))) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(q.getQueryString());\n    }\n  }\n","date":"2020-05-29 00:37:39","endLine":1196,"groupId":"105105","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testOrderByWithNullValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/50/f77539ac07311d5f03856793d110ff7b52f21b.src","preCode":"  public void testOrderByWithNullValues() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    String queries[] = {\"SELECT   * FROM /portfolio1 pf1 order by pkid\", \r\n                                                                         \r\n                                                                         \r\n                                                                         \r\n        \"SELECT   * FROM /portfolio1 pf1  order by pkid asc\", \r\n                                                              \r\n                                                              \r\n        \"SELECT   * FROM /portfolio1 order by pkid desc\", \r\n                                                          \r\n                                                          \r\n                                                          \r\n        \"SELECT   pkid FROM /portfolio1 pf1 order by pkid\", \r\n                                                            \r\n                                                            \r\n                                                            \r\n                                                            \r\n        \"SELECT   pkid FROM /portfolio1 pf1 where pkid != 'XXXX' order by pkid asc\", \r\n        \"SELECT   pkid FROM /portfolio1 pf1 where pkid != 'XXXX' order by pkid desc\", \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n                                                                                      \r\n\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID < 1000 order by pkid\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID > 3 order by pkid\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID < 1000 order by pkid\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID > 0 order by pkid\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID > 0 order by pkid, ID asc\", \r\n        \"SELECT   ID, pkid FROM /portfolio1 pf1 where ID > 0 order by pkid, ID desc\", \r\n    };\n\n    Object r[][] = new Object[queries.length][2];\n    QueryService qs;\n    qs = CacheUtils.getQueryService();\n\n    \r\n    final int size = 9;\n    final int numNullValues = 3;\n    Region r1 = this.createRegion(\"portfolio1\", Portfolio.class);\n    for (int i = 1; i <= size; i++) {\n      Portfolio pf = new Portfolio(i);\n      \r\n      if (i <= numNullValues) {\n        pf.pkid = null;\n        pf.status = \"a\" + i;\n      }\n      r1.put(i + \"\", pf);\n    }\n\n    Query q = null;\n    SelectResults results = null;\n    List list = null;\n    String str = \"\";\n    try {\n      \r\n      str = queries[0];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      r[0][0] = results;\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, p: \" + p, p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[1];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[2];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Portfolio p = (Portfolio) list.get((i - 1));\n        if (i > (size - numNullValues)) {\n          assertNull(\"Expected null value for pkid\", p.pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", p.pkid);\n          if (!p.pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[3];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[4];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i <= 3) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[5];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        String pkid = (String) list.get((i - 1));\n        if (i > (list.size() - numNullValues)) {\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + (size - (i - 1)))) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[6];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        int id = (Integer) ((Struct) list.get((i - 1))).getFieldValues()[0];\n        \r\n        if (i <= numNullValues) {\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (id != i) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[7];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= list.size(); i++) {\n        int id = (Integer) ((Struct) list.get((i - 1))).getFieldValues()[0];\n        if (id != (numNullValues + i)) {\n          fail(\" Value of ID is not as expected, \" + id);\n        }\n      }\n\n      \r\n      str = queries[8];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n      for (int i = 1; i <= size; i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        \r\n        if (i <= numNullValues) {\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n          assertNull(\"Expected null value for pkid\", pkid);\n        } else {\n          if (id != i) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n          assertNotNull(\"Expected not null value for pkid\", pkid);\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not in expected order.\");\n          }\n        }\n      }\n\n      \r\n      str = queries[9];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (!(id == 1 || id == 2 || id == 3)) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[10];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != i) {\n            fail(\" Value of ID is not as expected, it is: \" + id + \" expected :\" + i);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n\n      \r\n      str = queries[11];\n      q = CacheUtils.getQueryService().newQuery(str);\n      CacheUtils.getLogger().info(\"Executing query: \" + str);\n      results = (SelectResults) q.execute();\n      list = results.asList();\n\n      for (int i = 1; i <= list.size(); i++) {\n        Struct vals = (Struct) list.get((i - 1));\n        int id = ((Integer) vals.get(\"ID\")).intValue();\n        String pkid = (String) vals.get(\"pkid\");\n\n        if (i <= numNullValues) {\n          assertNull(\"Expected null value for pkid, \" + pkid, pkid);\n          if (id != (numNullValues - (i - 1))) {\n            fail(\" Value of ID is not as expected \" + id);\n          }\n        } else {\n          if (!pkid.equals(\"\" + i)) {\n            fail(\" Value of pkid is not as expected, \" + pkid);\n          }\n          if (id != i) {\n            fail(\" Value of ID is not as expected, \" + id);\n          }\n        }\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(q.getQueryString());\n    }\n  }\n","realPath":"geode-junit/src/main/java/org/apache/geode/cache/query/functional/NonDistinctOrderByTestImplementation.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":878,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
