[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testCutDownAndExpandIndexResultsWithNoCutDownAndTwoFinalIters() throws Exception {\n    region = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n    Portfolio[] po =\n        new Portfolio[] {new Portfolio(0), new Portfolio(1), new Portfolio(2), new Portfolio(3)};\n    region.put(\"0\", new Portfolio(0));\n    region.put(\"1\", new Portfolio(1));\n    region.put(\"2\", new Portfolio(2));\n    region.put(\"3\", new Portfolio(3));\n    \r\n    QCompiler compiler = new QCompiler();\n    List list = compiler.compileFromClause(\"/portfolio p, p.positions\");\n    ExecutionContext context = new ExecutionContext(null, CacheUtils.getCache());\n    context.newScope(context.associateScopeID());\n    RuntimeIterator[] indexToItrMappping = new RuntimeIterator[1];\n    RuntimeIterator expand = null;\n    boolean set = false;\n\n    Iterator iter = list.iterator();\n    while (iter.hasNext()) {\n      CompiledIteratorDef iterDef = (CompiledIteratorDef) iter.next();\n      context.addDependencies(new CompiledID(\"dummy\"), iterDef.computeDependencies(context));\n      RuntimeIterator rIter = iterDef.getRuntimeIterator(context);\n      if (!set) {\n        set = true;\n        indexToItrMappping[0] = rIter;\n      } else {\n        expand = rIter;\n      }\n      context.bindIterator(rIter);\n      context.addToIndependentRuntimeItrMap(iterDef);\n    }\n    List finalList = new ArrayList();\n    finalList.add(indexToItrMappping[0]);\n    finalList.add(expand);\n    ResultsSet indexResult = new ResultsSet(new ObjectTypeImpl(Portfolio.class));\n    for (int i = 0; i < po.length; ++i)\n      indexResult.add(po[i]);\n    List expandList = new LinkedList();\n    expandList.add(expand);\n    List dataList = new ArrayList();\n    dataList.add(indexResult);\n    dataList.add(indexToItrMappping);\n    dataList.add(expandList);\n    dataList.add(finalList);\n    dataList.add(context);\n    dataList.add(new ArrayList());\n    SelectResults results = QueryUtils.testCutDownAndExpandIndexResults(dataList);\n    assertTrue(\"Resultset obtained not of type StructBag\", results instanceof StructBag);\n    StructBag st = (StructBag) results;\n    assertTrue(\"StructBag not of size expected as 8\", st.size() == 8);\n  }\n","date":"2018-07-18 03:54:18","endLine":120,"groupId":"6401","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCutDownAndExpandIndexResultsWithNoCutDownAndTwoFinalIters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e4/ce4c011f55dc0ac3114bf1069fdb87dfd2314e.src","preCode":"  public void testCutDownAndExpandIndexResultsWithNoCutDownAndTwoFinalIters() throws Exception {\n    region = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n    Portfolio[] po =\n        new Portfolio[] {new Portfolio(0), new Portfolio(1), new Portfolio(2), new Portfolio(3)};\n    region.put(\"0\", new Portfolio(0));\n    region.put(\"1\", new Portfolio(1));\n    region.put(\"2\", new Portfolio(2));\n    region.put(\"3\", new Portfolio(3));\n    \r\n    QCompiler compiler = new QCompiler();\n    List list = compiler.compileFromClause(\"/portfolio p, p.positions\");\n    ExecutionContext context = new ExecutionContext(null, CacheUtils.getCache());\n    context.newScope(context.associateScopeID());\n    RuntimeIterator[] indexToItrMappping = new RuntimeIterator[1];\n    RuntimeIterator expand = null;\n    boolean set = false;\n\n    Iterator iter = list.iterator();\n    while (iter.hasNext()) {\n      CompiledIteratorDef iterDef = (CompiledIteratorDef) iter.next();\n      context.addDependencies(new CompiledID(\"dummy\"), iterDef.computeDependencies(context));\n      RuntimeIterator rIter = iterDef.getRuntimeIterator(context);\n      if (!set) {\n        set = true;\n        indexToItrMappping[0] = rIter;\n      } else {\n        expand = rIter;\n      }\n      context.bindIterator(rIter);\n      context.addToIndependentRuntimeItrMap(iterDef);\n    }\n    List finalList = new ArrayList();\n    finalList.add(indexToItrMappping[0]);\n    finalList.add(expand);\n    ResultsSet indexResult = new ResultsSet(new ObjectTypeImpl(Portfolio.class));\n    for (int i = 0; i < po.length; ++i)\n      indexResult.add(po[i]);\n    List expandList = new LinkedList();\n    expandList.add(expand);\n    List dataList = new ArrayList();\n    dataList.add(indexResult);\n    dataList.add(indexToItrMappping);\n    dataList.add(expandList);\n    dataList.add(finalList);\n    dataList.add(context);\n    dataList.add(new ArrayList());\n    SelectResults results = QueryUtils.testCutDownAndExpandIndexResults(dataList);\n    assertTrue(\"Resultset obtained not of type StructBag\", results instanceof StructBag);\n    StructBag st = (StructBag) results;\n    assertTrue(\"StructBag not of size expected as 8\", st.size() == 8);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryUtilsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testCutDownAndExpandIndexResultsWithNoCutDownAndThreeFinalIters() throws Exception {\n    region = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n    Portfolio[] po =\n        new Portfolio[] {new Portfolio(0), new Portfolio(1), new Portfolio(2), new Portfolio(3)};\n    region.put(\"0\", new Portfolio(0));\n    region.put(\"1\", new Portfolio(1));\n    region.put(\"2\", new Portfolio(2));\n    region.put(\"3\", new Portfolio(3));\n\n    Region r3 = CacheUtils.createRegion(\"employees\", Employee.class);\n    Set add1 = new HashSet();\n    add1.add(new Address(\"411045\", \"Baner\"));\n    add1.add(new Address(\"411001\", \"DholePatilRd\"));\n    for (int i = 0; i < 4; i++) {\n      r3.put(i + \"\", new Employee(\"empName\", (20 + i), i, \"Mr.\", (5000 + i), add1));\n    }\n    \r\n    QCompiler compiler = new QCompiler();\n    List list = compiler.compileFromClause(\"/portfolio p, p.positions, /employees e\");\n    ExecutionContext context = new ExecutionContext(null, CacheUtils.getCache());\n    context.newScope(context.associateScopeID());\n    RuntimeIterator[] indexToItrMappping = new RuntimeIterator[1];\n    RuntimeIterator expand[] = new RuntimeIterator[2];\n    boolean set = false;\n    int j = 0;\n\n    Iterator iter = list.iterator();\n    while (iter.hasNext()) {\n      CompiledIteratorDef iterDef = (CompiledIteratorDef) iter.next();\n      context.addDependencies(new CompiledID(\"dummy\"), iterDef.computeDependencies(context));\n      RuntimeIterator rIter = iterDef.getRuntimeIterator(context);\n      if (!set) {\n        set = true;\n        indexToItrMappping[0] = rIter;\n      } else {\n        expand[j++] = rIter;\n      }\n      context.bindIterator(rIter);\n      context.addToIndependentRuntimeItrMap(iterDef);\n    }\n    List finalList = new ArrayList();\n    finalList.add(indexToItrMappping[0]);\n\n    ResultsSet indexResult = new ResultsSet(new ObjectTypeImpl(Portfolio.class));\n    for (int i = 0; i < po.length; ++i)\n      indexResult.add(po[i]);\n    List expandList = new LinkedList();\n    expandList.add(expand[0]);\n    expandList.add(expand[1]);\n    finalList.addAll(expandList);\n    List dataList = new ArrayList();\n    dataList.add(indexResult);\n    dataList.add(indexToItrMappping);\n    dataList.add(expandList);\n    dataList.add(finalList);\n    dataList.add(context);\n    dataList.add(new ArrayList());\n    SelectResults results = QueryUtils.testCutDownAndExpandIndexResults(dataList);\n\n    assertTrue(\"Resultset obtained not of type structbag\", results instanceof StructBag);\n    StructBag st = (StructBag) results;\n    assertTrue(\"StructSet not of size expected as 32\", st.size() == 32);\n  }\n","date":"2018-07-18 03:54:18","endLine":185,"groupId":"3175","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCutDownAndExpandIndexResultsWithNoCutDownAndThreeFinalIters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e4/ce4c011f55dc0ac3114bf1069fdb87dfd2314e.src","preCode":"  public void testCutDownAndExpandIndexResultsWithNoCutDownAndThreeFinalIters() throws Exception {\n    region = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n    Portfolio[] po =\n        new Portfolio[] {new Portfolio(0), new Portfolio(1), new Portfolio(2), new Portfolio(3)};\n    region.put(\"0\", new Portfolio(0));\n    region.put(\"1\", new Portfolio(1));\n    region.put(\"2\", new Portfolio(2));\n    region.put(\"3\", new Portfolio(3));\n\n    Region r3 = CacheUtils.createRegion(\"employees\", Employee.class);\n    Set add1 = new HashSet();\n    add1.add(new Address(\"411045\", \"Baner\"));\n    add1.add(new Address(\"411001\", \"DholePatilRd\"));\n    for (int i = 0; i < 4; i++) {\n      r3.put(i + \"\", new Employee(\"empName\", (20 + i), i, \"Mr.\", (5000 + i), add1));\n    }\n    \r\n    QCompiler compiler = new QCompiler();\n    List list = compiler.compileFromClause(\"/portfolio p, p.positions, /employees e\");\n    ExecutionContext context = new ExecutionContext(null, CacheUtils.getCache());\n    context.newScope(context.associateScopeID());\n    RuntimeIterator[] indexToItrMappping = new RuntimeIterator[1];\n    RuntimeIterator expand[] = new RuntimeIterator[2];\n    boolean set = false;\n    int j = 0;\n\n    Iterator iter = list.iterator();\n    while (iter.hasNext()) {\n      CompiledIteratorDef iterDef = (CompiledIteratorDef) iter.next();\n      context.addDependencies(new CompiledID(\"dummy\"), iterDef.computeDependencies(context));\n      RuntimeIterator rIter = iterDef.getRuntimeIterator(context);\n      if (!set) {\n        set = true;\n        indexToItrMappping[0] = rIter;\n      } else {\n        expand[j++] = rIter;\n      }\n      context.bindIterator(rIter);\n      context.addToIndependentRuntimeItrMap(iterDef);\n    }\n    List finalList = new ArrayList();\n    finalList.add(indexToItrMappping[0]);\n\n    ResultsSet indexResult = new ResultsSet(new ObjectTypeImpl(Portfolio.class));\n    for (int i = 0; i < po.length; ++i)\n      indexResult.add(po[i]);\n    List expandList = new LinkedList();\n    expandList.add(expand[0]);\n    expandList.add(expand[1]);\n    finalList.addAll(expandList);\n    List dataList = new ArrayList();\n    dataList.add(indexResult);\n    dataList.add(indexToItrMappping);\n    dataList.add(expandList);\n    dataList.add(finalList);\n    dataList.add(context);\n    dataList.add(new ArrayList());\n    SelectResults results = QueryUtils.testCutDownAndExpandIndexResults(dataList);\n\n    assertTrue(\"Resultset obtained not of type structbag\", results instanceof StructBag);\n    StructBag st = (StructBag) results;\n    assertTrue(\"StructSet not of size expected as 32\", st.size() == 32);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryUtilsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testCutDownAndExpandIndexResultsWithNoCutDownAndTwoFinalIters() throws Exception {\n    region = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n    Portfolio[] po =\n        new Portfolio[] {new Portfolio(0), new Portfolio(1), new Portfolio(2), new Portfolio(3)};\n    region.put(\"0\", new Portfolio(0));\n    region.put(\"1\", new Portfolio(1));\n    region.put(\"2\", new Portfolio(2));\n    region.put(\"3\", new Portfolio(3));\n    \r\n    QCompiler compiler = new QCompiler();\n    List list = compiler.compileFromClause(SEPARATOR + \"portfolio p, p.positions\");\n    ExecutionContext context = new ExecutionContext(null, CacheUtils.getCache());\n    context.newScope(context.associateScopeID());\n    RuntimeIterator[] indexToItrMappping = new RuntimeIterator[1];\n    RuntimeIterator expand = null;\n    boolean set = false;\n\n    Iterator iter = list.iterator();\n    while (iter.hasNext()) {\n      CompiledIteratorDef iterDef = (CompiledIteratorDef) iter.next();\n      context.addDependencies(new CompiledID(\"dummy\"), iterDef.computeDependencies(context));\n      RuntimeIterator rIter = iterDef.getRuntimeIterator(context);\n      if (!set) {\n        set = true;\n        indexToItrMappping[0] = rIter;\n      } else {\n        expand = rIter;\n      }\n      context.bindIterator(rIter);\n      context.addToIndependentRuntimeItrMap(iterDef);\n    }\n    List finalList = new ArrayList();\n    finalList.add(indexToItrMappping[0]);\n    finalList.add(expand);\n    ResultsSet indexResult = new ResultsSet(new ObjectTypeImpl(Portfolio.class));\n    for (int i = 0; i < po.length; ++i)\n      indexResult.add(po[i]);\n    List expandList = new LinkedList();\n    expandList.add(expand);\n    List dataList = new ArrayList();\n    dataList.add(indexResult);\n    dataList.add(indexToItrMappping);\n    dataList.add(expandList);\n    dataList.add(finalList);\n    dataList.add(context);\n    dataList.add(new ArrayList());\n    SelectResults results = QueryUtils.testCutDownAndExpandIndexResults(dataList);\n    assertTrue(\"Resultset obtained not of type StructBag\", results instanceof StructBag);\n    StructBag st = (StructBag) results;\n    assertTrue(\"StructBag not of size expected as 8\", st.size() == 8);\n  }\n","date":"2020-05-29 00:37:39","endLine":121,"groupId":"6401","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCutDownAndExpandIndexResultsWithNoCutDownAndTwoFinalIters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/cb/32a31cd8055050be64157ce63e1a9641c5d0e6.src","preCode":"  public void testCutDownAndExpandIndexResultsWithNoCutDownAndTwoFinalIters() throws Exception {\n    region = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n    Portfolio[] po =\n        new Portfolio[] {new Portfolio(0), new Portfolio(1), new Portfolio(2), new Portfolio(3)};\n    region.put(\"0\", new Portfolio(0));\n    region.put(\"1\", new Portfolio(1));\n    region.put(\"2\", new Portfolio(2));\n    region.put(\"3\", new Portfolio(3));\n    \r\n    QCompiler compiler = new QCompiler();\n    List list = compiler.compileFromClause(\"/portfolio p, p.positions\");\n    ExecutionContext context = new ExecutionContext(null, CacheUtils.getCache());\n    context.newScope(context.associateScopeID());\n    RuntimeIterator[] indexToItrMappping = new RuntimeIterator[1];\n    RuntimeIterator expand = null;\n    boolean set = false;\n\n    Iterator iter = list.iterator();\n    while (iter.hasNext()) {\n      CompiledIteratorDef iterDef = (CompiledIteratorDef) iter.next();\n      context.addDependencies(new CompiledID(\"dummy\"), iterDef.computeDependencies(context));\n      RuntimeIterator rIter = iterDef.getRuntimeIterator(context);\n      if (!set) {\n        set = true;\n        indexToItrMappping[0] = rIter;\n      } else {\n        expand = rIter;\n      }\n      context.bindIterator(rIter);\n      context.addToIndependentRuntimeItrMap(iterDef);\n    }\n    List finalList = new ArrayList();\n    finalList.add(indexToItrMappping[0]);\n    finalList.add(expand);\n    ResultsSet indexResult = new ResultsSet(new ObjectTypeImpl(Portfolio.class));\n    for (int i = 0; i < po.length; ++i)\n      indexResult.add(po[i]);\n    List expandList = new LinkedList();\n    expandList.add(expand);\n    List dataList = new ArrayList();\n    dataList.add(indexResult);\n    dataList.add(indexToItrMappping);\n    dataList.add(expandList);\n    dataList.add(finalList);\n    dataList.add(context);\n    dataList.add(new ArrayList());\n    SelectResults results = QueryUtils.testCutDownAndExpandIndexResults(dataList);\n    assertTrue(\"Resultset obtained not of type StructBag\", results instanceof StructBag);\n    StructBag st = (StructBag) results;\n    assertTrue(\"StructBag not of size expected as 8\", st.size() == 8);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryUtilsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testCutDownAndExpandIndexResultsWithNoCutDownAndThreeFinalIters() throws Exception {\n    region = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n    Portfolio[] po =\n        new Portfolio[] {new Portfolio(0), new Portfolio(1), new Portfolio(2), new Portfolio(3)};\n    region.put(\"0\", new Portfolio(0));\n    region.put(\"1\", new Portfolio(1));\n    region.put(\"2\", new Portfolio(2));\n    region.put(\"3\", new Portfolio(3));\n\n    Region r3 = CacheUtils.createRegion(\"employees\", Employee.class);\n    Set add1 = new HashSet();\n    add1.add(new Address(\"411045\", \"Baner\"));\n    add1.add(new Address(\"411001\", \"DholePatilRd\"));\n    for (int i = 0; i < 4; i++) {\n      r3.put(i + \"\", new Employee(\"empName\", (20 + i), i, \"Mr.\", (5000 + i), add1));\n    }\n    \r\n    QCompiler compiler = new QCompiler();\n    List list = compiler\n        .compileFromClause(SEPARATOR + \"portfolio p, p.positions, \" + SEPARATOR + \"employees e\");\n    ExecutionContext context = new ExecutionContext(null, CacheUtils.getCache());\n    context.newScope(context.associateScopeID());\n    RuntimeIterator[] indexToItrMappping = new RuntimeIterator[1];\n    RuntimeIterator expand[] = new RuntimeIterator[2];\n    boolean set = false;\n    int j = 0;\n\n    Iterator iter = list.iterator();\n    while (iter.hasNext()) {\n      CompiledIteratorDef iterDef = (CompiledIteratorDef) iter.next();\n      context.addDependencies(new CompiledID(\"dummy\"), iterDef.computeDependencies(context));\n      RuntimeIterator rIter = iterDef.getRuntimeIterator(context);\n      if (!set) {\n        set = true;\n        indexToItrMappping[0] = rIter;\n      } else {\n        expand[j++] = rIter;\n      }\n      context.bindIterator(rIter);\n      context.addToIndependentRuntimeItrMap(iterDef);\n    }\n    List finalList = new ArrayList();\n    finalList.add(indexToItrMappping[0]);\n\n    ResultsSet indexResult = new ResultsSet(new ObjectTypeImpl(Portfolio.class));\n    for (int i = 0; i < po.length; ++i)\n      indexResult.add(po[i]);\n    List expandList = new LinkedList();\n    expandList.add(expand[0]);\n    expandList.add(expand[1]);\n    finalList.addAll(expandList);\n    List dataList = new ArrayList();\n    dataList.add(indexResult);\n    dataList.add(indexToItrMappping);\n    dataList.add(expandList);\n    dataList.add(finalList);\n    dataList.add(context);\n    dataList.add(new ArrayList());\n    SelectResults results = QueryUtils.testCutDownAndExpandIndexResults(dataList);\n\n    assertTrue(\"Resultset obtained not of type structbag\", results instanceof StructBag);\n    StructBag st = (StructBag) results;\n    assertTrue(\"StructSet not of size expected as 32\", st.size() == 32);\n  }\n","date":"2020-05-29 00:37:39","endLine":187,"groupId":"15990","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCutDownAndExpandIndexResultsWithNoCutDownAndThreeFinalIters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/cb/32a31cd8055050be64157ce63e1a9641c5d0e6.src","preCode":"  public void testCutDownAndExpandIndexResultsWithNoCutDownAndThreeFinalIters() throws Exception {\n    region = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n    Portfolio[] po =\n        new Portfolio[] {new Portfolio(0), new Portfolio(1), new Portfolio(2), new Portfolio(3)};\n    region.put(\"0\", new Portfolio(0));\n    region.put(\"1\", new Portfolio(1));\n    region.put(\"2\", new Portfolio(2));\n    region.put(\"3\", new Portfolio(3));\n\n    Region r3 = CacheUtils.createRegion(\"employees\", Employee.class);\n    Set add1 = new HashSet();\n    add1.add(new Address(\"411045\", \"Baner\"));\n    add1.add(new Address(\"411001\", \"DholePatilRd\"));\n    for (int i = 0; i < 4; i++) {\n      r3.put(i + \"\", new Employee(\"empName\", (20 + i), i, \"Mr.\", (5000 + i), add1));\n    }\n    \r\n    QCompiler compiler = new QCompiler();\n    List list = compiler.compileFromClause(\"/portfolio p, p.positions, /employees e\");\n    ExecutionContext context = new ExecutionContext(null, CacheUtils.getCache());\n    context.newScope(context.associateScopeID());\n    RuntimeIterator[] indexToItrMappping = new RuntimeIterator[1];\n    RuntimeIterator expand[] = new RuntimeIterator[2];\n    boolean set = false;\n    int j = 0;\n\n    Iterator iter = list.iterator();\n    while (iter.hasNext()) {\n      CompiledIteratorDef iterDef = (CompiledIteratorDef) iter.next();\n      context.addDependencies(new CompiledID(\"dummy\"), iterDef.computeDependencies(context));\n      RuntimeIterator rIter = iterDef.getRuntimeIterator(context);\n      if (!set) {\n        set = true;\n        indexToItrMappping[0] = rIter;\n      } else {\n        expand[j++] = rIter;\n      }\n      context.bindIterator(rIter);\n      context.addToIndependentRuntimeItrMap(iterDef);\n    }\n    List finalList = new ArrayList();\n    finalList.add(indexToItrMappping[0]);\n\n    ResultsSet indexResult = new ResultsSet(new ObjectTypeImpl(Portfolio.class));\n    for (int i = 0; i < po.length; ++i)\n      indexResult.add(po[i]);\n    List expandList = new LinkedList();\n    expandList.add(expand[0]);\n    expandList.add(expand[1]);\n    finalList.addAll(expandList);\n    List dataList = new ArrayList();\n    dataList.add(indexResult);\n    dataList.add(indexToItrMappping);\n    dataList.add(expandList);\n    dataList.add(finalList);\n    dataList.add(context);\n    dataList.add(new ArrayList());\n    SelectResults results = QueryUtils.testCutDownAndExpandIndexResults(dataList);\n\n    assertTrue(\"Resultset obtained not of type structbag\", results instanceof StructBag);\n    StructBag st = (StructBag) results;\n    assertTrue(\"StructSet not of size expected as 32\", st.size() == 32);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryUtilsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"},{"authorTime":"2021-06-04 00:32:09","codes":[{"authorDate":"2021-06-04 00:32:09","commitOrder":3,"curCode":"  public void testCutDownAndExpandIndexResultsWithNoCutDownAndTwoFinalIters() throws Exception {\n    region = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n    Portfolio[] po =\n        new Portfolio[] {new Portfolio(0), new Portfolio(1), new Portfolio(2), new Portfolio(3)};\n    region.put(\"0\", new Portfolio(0));\n    region.put(\"1\", new Portfolio(1));\n    region.put(\"2\", new Portfolio(2));\n    region.put(\"3\", new Portfolio(3));\n    \r\n    QCompiler compiler = new QCompiler();\n    List list = compiler.compileFromClause(SEPARATOR + \"portfolio p, p.positions\");\n    ExecutionContext context = new ExecutionContext(null, CacheUtils.getCache());\n    context.newScope(context.associateScopeID());\n    RuntimeIterator[] indexToItrMappping = new RuntimeIterator[1];\n    RuntimeIterator expand = null;\n    boolean set = false;\n\n    Iterator iter = list.iterator();\n    while (iter.hasNext()) {\n      CompiledIteratorDef iterDef = (CompiledIteratorDef) iter.next();\n      context.addDependencies(new CompiledID(\"dummy\"), iterDef.computeDependencies(context));\n      RuntimeIterator rIter = iterDef.getRuntimeIterator(context);\n      if (!set) {\n        set = true;\n        indexToItrMappping[0] = rIter;\n      } else {\n        expand = rIter;\n      }\n      context.bindIterator(rIter);\n      context.addToIndependentRuntimeItrMap(iterDef);\n    }\n    List finalList = new ArrayList();\n    finalList.add(indexToItrMappping[0]);\n    finalList.add(expand);\n    ResultsSet indexResult = new ResultsSet(new ObjectTypeImpl(Portfolio.class));\n    for (int i = 0; i < po.length; ++i) {\n      indexResult.add(po[i]);\n    }\n    List expandList = new LinkedList();\n    expandList.add(expand);\n    List dataList = new ArrayList();\n    dataList.add(indexResult);\n    dataList.add(indexToItrMappping);\n    dataList.add(expandList);\n    dataList.add(finalList);\n    dataList.add(context);\n    dataList.add(new ArrayList());\n    SelectResults results = QueryUtils.testCutDownAndExpandIndexResults(dataList);\n    assertTrue(\"Resultset obtained not of type StructBag\", results instanceof StructBag);\n    StructBag st = (StructBag) results;\n    assertTrue(\"StructBag not of size expected as 8\", st.size() == 8);\n  }\n","date":"2021-06-04 00:32:09","endLine":122,"groupId":"104751","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testCutDownAndExpandIndexResultsWithNoCutDownAndTwoFinalIters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d4/4706ac57b84852a1e6a57cebe4280e8205e824.src","preCode":"  public void testCutDownAndExpandIndexResultsWithNoCutDownAndTwoFinalIters() throws Exception {\n    region = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n    Portfolio[] po =\n        new Portfolio[] {new Portfolio(0), new Portfolio(1), new Portfolio(2), new Portfolio(3)};\n    region.put(\"0\", new Portfolio(0));\n    region.put(\"1\", new Portfolio(1));\n    region.put(\"2\", new Portfolio(2));\n    region.put(\"3\", new Portfolio(3));\n    \r\n    QCompiler compiler = new QCompiler();\n    List list = compiler.compileFromClause(SEPARATOR + \"portfolio p, p.positions\");\n    ExecutionContext context = new ExecutionContext(null, CacheUtils.getCache());\n    context.newScope(context.associateScopeID());\n    RuntimeIterator[] indexToItrMappping = new RuntimeIterator[1];\n    RuntimeIterator expand = null;\n    boolean set = false;\n\n    Iterator iter = list.iterator();\n    while (iter.hasNext()) {\n      CompiledIteratorDef iterDef = (CompiledIteratorDef) iter.next();\n      context.addDependencies(new CompiledID(\"dummy\"), iterDef.computeDependencies(context));\n      RuntimeIterator rIter = iterDef.getRuntimeIterator(context);\n      if (!set) {\n        set = true;\n        indexToItrMappping[0] = rIter;\n      } else {\n        expand = rIter;\n      }\n      context.bindIterator(rIter);\n      context.addToIndependentRuntimeItrMap(iterDef);\n    }\n    List finalList = new ArrayList();\n    finalList.add(indexToItrMappping[0]);\n    finalList.add(expand);\n    ResultsSet indexResult = new ResultsSet(new ObjectTypeImpl(Portfolio.class));\n    for (int i = 0; i < po.length; ++i)\n      indexResult.add(po[i]);\n    List expandList = new LinkedList();\n    expandList.add(expand);\n    List dataList = new ArrayList();\n    dataList.add(indexResult);\n    dataList.add(indexToItrMappping);\n    dataList.add(expandList);\n    dataList.add(finalList);\n    dataList.add(context);\n    dataList.add(new ArrayList());\n    SelectResults results = QueryUtils.testCutDownAndExpandIndexResults(dataList);\n    assertTrue(\"Resultset obtained not of type StructBag\", results instanceof StructBag);\n    StructBag st = (StructBag) results;\n    assertTrue(\"StructBag not of size expected as 8\", st.size() == 8);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryUtilsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2021-06-04 00:32:09","commitOrder":3,"curCode":"  public void testCutDownAndExpandIndexResultsWithNoCutDownAndThreeFinalIters() throws Exception {\n    region = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n    Portfolio[] po =\n        new Portfolio[] {new Portfolio(0), new Portfolio(1), new Portfolio(2), new Portfolio(3)};\n    region.put(\"0\", new Portfolio(0));\n    region.put(\"1\", new Portfolio(1));\n    region.put(\"2\", new Portfolio(2));\n    region.put(\"3\", new Portfolio(3));\n\n    Region r3 = CacheUtils.createRegion(\"employees\", Employee.class);\n    Set add1 = new HashSet();\n    add1.add(new Address(\"411045\", \"Baner\"));\n    add1.add(new Address(\"411001\", \"DholePatilRd\"));\n    for (int i = 0; i < 4; i++) {\n      r3.put(i + \"\", new Employee(\"empName\", (20 + i), i, \"Mr.\", (5000 + i), add1));\n    }\n    \r\n    QCompiler compiler = new QCompiler();\n    List list = compiler\n        .compileFromClause(SEPARATOR + \"portfolio p, p.positions, \" + SEPARATOR + \"employees e\");\n    ExecutionContext context = new ExecutionContext(null, CacheUtils.getCache());\n    context.newScope(context.associateScopeID());\n    RuntimeIterator[] indexToItrMappping = new RuntimeIterator[1];\n    RuntimeIterator expand[] = new RuntimeIterator[2];\n    boolean set = false;\n    int j = 0;\n\n    Iterator iter = list.iterator();\n    while (iter.hasNext()) {\n      CompiledIteratorDef iterDef = (CompiledIteratorDef) iter.next();\n      context.addDependencies(new CompiledID(\"dummy\"), iterDef.computeDependencies(context));\n      RuntimeIterator rIter = iterDef.getRuntimeIterator(context);\n      if (!set) {\n        set = true;\n        indexToItrMappping[0] = rIter;\n      } else {\n        expand[j++] = rIter;\n      }\n      context.bindIterator(rIter);\n      context.addToIndependentRuntimeItrMap(iterDef);\n    }\n    List finalList = new ArrayList();\n    finalList.add(indexToItrMappping[0]);\n\n    ResultsSet indexResult = new ResultsSet(new ObjectTypeImpl(Portfolio.class));\n    for (int i = 0; i < po.length; ++i) {\n      indexResult.add(po[i]);\n    }\n    List expandList = new LinkedList();\n    expandList.add(expand[0]);\n    expandList.add(expand[1]);\n    finalList.addAll(expandList);\n    List dataList = new ArrayList();\n    dataList.add(indexResult);\n    dataList.add(indexToItrMappping);\n    dataList.add(expandList);\n    dataList.add(finalList);\n    dataList.add(context);\n    dataList.add(new ArrayList());\n    SelectResults results = QueryUtils.testCutDownAndExpandIndexResults(dataList);\n\n    assertTrue(\"Resultset obtained not of type structbag\", results instanceof StructBag);\n    StructBag st = (StructBag) results;\n    assertTrue(\"StructSet not of size expected as 32\", st.size() == 32);\n  }\n","date":"2021-06-04 00:32:09","endLine":189,"groupId":"104751","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testCutDownAndExpandIndexResultsWithNoCutDownAndThreeFinalIters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d4/4706ac57b84852a1e6a57cebe4280e8205e824.src","preCode":"  public void testCutDownAndExpandIndexResultsWithNoCutDownAndThreeFinalIters() throws Exception {\n    region = CacheUtils.createRegion(\"portfolio\", Portfolio.class);\n    Portfolio[] po =\n        new Portfolio[] {new Portfolio(0), new Portfolio(1), new Portfolio(2), new Portfolio(3)};\n    region.put(\"0\", new Portfolio(0));\n    region.put(\"1\", new Portfolio(1));\n    region.put(\"2\", new Portfolio(2));\n    region.put(\"3\", new Portfolio(3));\n\n    Region r3 = CacheUtils.createRegion(\"employees\", Employee.class);\n    Set add1 = new HashSet();\n    add1.add(new Address(\"411045\", \"Baner\"));\n    add1.add(new Address(\"411001\", \"DholePatilRd\"));\n    for (int i = 0; i < 4; i++) {\n      r3.put(i + \"\", new Employee(\"empName\", (20 + i), i, \"Mr.\", (5000 + i), add1));\n    }\n    \r\n    QCompiler compiler = new QCompiler();\n    List list = compiler\n        .compileFromClause(SEPARATOR + \"portfolio p, p.positions, \" + SEPARATOR + \"employees e\");\n    ExecutionContext context = new ExecutionContext(null, CacheUtils.getCache());\n    context.newScope(context.associateScopeID());\n    RuntimeIterator[] indexToItrMappping = new RuntimeIterator[1];\n    RuntimeIterator expand[] = new RuntimeIterator[2];\n    boolean set = false;\n    int j = 0;\n\n    Iterator iter = list.iterator();\n    while (iter.hasNext()) {\n      CompiledIteratorDef iterDef = (CompiledIteratorDef) iter.next();\n      context.addDependencies(new CompiledID(\"dummy\"), iterDef.computeDependencies(context));\n      RuntimeIterator rIter = iterDef.getRuntimeIterator(context);\n      if (!set) {\n        set = true;\n        indexToItrMappping[0] = rIter;\n      } else {\n        expand[j++] = rIter;\n      }\n      context.bindIterator(rIter);\n      context.addToIndependentRuntimeItrMap(iterDef);\n    }\n    List finalList = new ArrayList();\n    finalList.add(indexToItrMappping[0]);\n\n    ResultsSet indexResult = new ResultsSet(new ObjectTypeImpl(Portfolio.class));\n    for (int i = 0; i < po.length; ++i)\n      indexResult.add(po[i]);\n    List expandList = new LinkedList();\n    expandList.add(expand[0]);\n    expandList.add(expand[1]);\n    finalList.addAll(expandList);\n    List dataList = new ArrayList();\n    dataList.add(indexResult);\n    dataList.add(indexToItrMappping);\n    dataList.add(expandList);\n    dataList.add(finalList);\n    dataList.add(context);\n    dataList.add(new ArrayList());\n    SelectResults results = QueryUtils.testCutDownAndExpandIndexResults(dataList);\n\n    assertTrue(\"Resultset obtained not of type structbag\", results instanceof StructBag);\n    StructBag st = (StructBag) results;\n    assertTrue(\"StructSet not of size expected as 32\", st.size() == 32);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/QueryUtilsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"2879573ffb04e9e029e14ca37d8a064268cc8f44","commitMessage":"@@@GEODE-7864: Always use curly braces for control flow statements (#6523)\n\nAuthored-by: Donal Evans <doevans@vmware.com>","date":"2021-06-04 00:32:09","modifiedFileCount":"640","status":"M","submitter":"Donal Evans"}]
