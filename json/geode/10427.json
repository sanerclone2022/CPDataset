[{"authorTime":"2018-08-07 04:28:44","codes":[{"authorDate":"2018-08-07 04:28:44","commitOrder":1,"curCode":"  public void testOneClientToOneServerOnPartitionedRegion() throws Exception {\n    \r\n    int server1Port = server1.getPort();\n    int server2Port = server2.getPort();\n    client3 = cluster.startClientVM(3, true, server1Port);\n    client4 = cluster.startClientVM(4, true, server2Port);\n\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(0, 100));\n    server2.invoke(() -> populateRegion(100, 200));\n\n    client3.invoke(() -> exuteQuery());\n    client4.invoke(() -> exuteQuery());\n  }\n","date":"2018-08-07 04:28:44","endLine":141,"groupId":"23361","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneClientToOneServerOnPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/1c0b441cee7d80e3ef325e9f979672e367fbe6.src","preCode":"  public void testOneClientToOneServerOnPartitionedRegion() throws Exception {\n    \r\n    int server1Port = server1.getPort();\n    int server2Port = server2.getPort();\n    client3 = cluster.startClientVM(3, true, server1Port);\n    client4 = cluster.startClientVM(4, true, server2Port);\n\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(0, 100));\n    server2.invoke(() -> populateRegion(100, 200));\n\n    client3.invoke(() -> exuteQuery());\n    client4.invoke(() -> exuteQuery());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryMonitorDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"},{"authorDate":"2018-08-07 04:28:44","commitOrder":1,"curCode":"  public void testQueryExecutionFromServerOnPartitionedRegion() throws Exception {\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(100, 200));\n    server2.invoke(() -> populateRegion(200, 300));\n\n    \r\n    server1.invoke(() -> exuteQuery());\n    server2.invoke(() -> exuteQuery());\n  }\n","date":"2018-08-07 04:28:44","endLine":178,"groupId":"26820","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryExecutionFromServerOnPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/1c0b441cee7d80e3ef325e9f979672e367fbe6.src","preCode":"  public void testQueryExecutionFromServerOnPartitionedRegion() throws Exception {\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(100, 200));\n    server2.invoke(() -> populateRegion(200, 300));\n\n    \r\n    server1.invoke(() -> exuteQuery());\n    server2.invoke(() -> exuteQuery());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryMonitorDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"B"}],"commitId":"38e1714b54894caafa508dab9634d62a9c4c42fc","commitMessage":"@@@GEODE-577: rewrite QueryMonitorDUnitTest (#2179)\n\n* code cleanup.\n* add QueryMonitor unit test\n* do not add cq query to the monitor queue\n","date":"2018-08-07 04:28:44","modifiedFileCount":"5","status":"B","submitter":"jinmeiliao"},{"authorTime":"2018-10-31 10:06:49","codes":[{"authorDate":"2018-10-31 10:06:49","commitOrder":2,"curCode":"  public void testOneClientToOneServerOnPartitionedRegion() throws Exception {\n    \r\n    int server1Port = server1.getPort();\n    int server2Port = server2.getPort();\n    client3 = cluster.startClientVM(3, true, server1Port);\n    client4 = cluster.startClientVM(4, true, server2Port);\n\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(0, 100));\n    server2.invoke(() -> populateRegion(100, 200));\n\n    client3.invoke(() -> executeQuery());\n    client4.invoke(() -> executeQuery());\n  }\n","date":"2018-10-31 10:06:49","endLine":151,"groupId":"23361","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneClientToOneServerOnPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6e/44448bbb0551bc4c0766d8b2583a40461f6989.src","preCode":"  public void testOneClientToOneServerOnPartitionedRegion() throws Exception {\n    \r\n    int server1Port = server1.getPort();\n    int server2Port = server2.getPort();\n    client3 = cluster.startClientVM(3, true, server1Port);\n    client4 = cluster.startClientVM(4, true, server2Port);\n\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(0, 100));\n    server2.invoke(() -> populateRegion(100, 200));\n\n    client3.invoke(() -> exuteQuery());\n    client4.invoke(() -> exuteQuery());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryMonitorDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2018-10-31 10:06:49","commitOrder":2,"curCode":"  public void testQueryExecutionFromServerOnPartitionedRegion() throws Exception {\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(100, 200));\n    server2.invoke(() -> populateRegion(200, 300));\n\n    \r\n    server1.invoke(() -> executeQuery());\n    server2.invoke(() -> executeQuery());\n  }\n","date":"2018-10-31 10:06:49","endLine":188,"groupId":"26820","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryExecutionFromServerOnPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6e/44448bbb0551bc4c0766d8b2583a40461f6989.src","preCode":"  public void testQueryExecutionFromServerOnPartitionedRegion() throws Exception {\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(100, 200));\n    server2.invoke(() -> populateRegion(200, 300));\n\n    \r\n    server1.invoke(() -> exuteQuery());\n    server2.invoke(() -> exuteQuery());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryMonitorDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"}],"commitId":"80614978deefe7528c2135810129a7ad780521fb","commitMessage":"@@@GEODE-5568: Rewrite QueryMonitor to use ScheduledThreadPoolExecutor (#2744)\n\n* GEODE-5568: Rewrite QueryMonitor to use ScheduledThreadPoolExecutor\n\nEliminate notify/wait bugs and improve hot-path performance.\n\nCo-authored-by: Bill Burcham <bburcham@pivotal.io>\nCo-authored-by: Ryan McMahon <rmcmahon@pivotal.io>","date":"2018-10-31 10:06:49","modifiedFileCount":"20","status":"M","submitter":"Ryan McMahon"},{"authorTime":"2018-10-31 10:06:49","codes":[{"authorDate":"2018-11-20 23:37:19","commitOrder":3,"curCode":"  public void testOneClientToOneServerOnPartitionedRegion() throws Exception {\n    \r\n    int server1Port = server1.getPort();\n    int server2Port = server2.getPort();\n    client3 =\n        cluster.startClientVM(3,\n            c1 -> c1.withPoolSubscription(true).withServerConnection(server1Port));\n    client4 =\n        cluster.startClientVM(4,\n            c -> c.withPoolSubscription(true).withServerConnection(server2Port));\n\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(0, 100));\n    server2.invoke(() -> populateRegion(100, 200));\n\n    client3.invoke(() -> executeQuery());\n    client4.invoke(() -> executeQuery());\n  }\n","date":"2018-11-20 23:37:19","endLine":162,"groupId":"29044","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneClientToOneServerOnPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e9/66aed3de1a00f53e030c8df6e9793314ce1bba.src","preCode":"  public void testOneClientToOneServerOnPartitionedRegion() throws Exception {\n    \r\n    int server1Port = server1.getPort();\n    int server2Port = server2.getPort();\n    client3 = cluster.startClientVM(3, true, server1Port);\n    client4 = cluster.startClientVM(4, true, server2Port);\n\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(0, 100));\n    server2.invoke(() -> populateRegion(100, 200));\n\n    client3.invoke(() -> executeQuery());\n    client4.invoke(() -> executeQuery());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryMonitorDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2018-10-31 10:06:49","commitOrder":3,"curCode":"  public void testQueryExecutionFromServerOnPartitionedRegion() throws Exception {\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(100, 200));\n    server2.invoke(() -> populateRegion(200, 300));\n\n    \r\n    server1.invoke(() -> executeQuery());\n    server2.invoke(() -> executeQuery());\n  }\n","date":"2018-10-31 10:06:49","endLine":188,"groupId":"26820","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryExecutionFromServerOnPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6e/44448bbb0551bc4c0766d8b2583a40461f6989.src","preCode":"  public void testQueryExecutionFromServerOnPartitionedRegion() throws Exception {\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(100, 200));\n    server2.invoke(() -> populateRegion(200, 300));\n\n    \r\n    server1.invoke(() -> executeQuery());\n    server2.invoke(() -> executeQuery());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryMonitorDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"N"}],"commitId":"222701ad7511841b1ba0033fc51c0ac6b044efe8","commitMessage":"@@@GEODE-4110: improve junit ClientCacheRule (#2872)\n\n* refactor some multiUser tests to use the ClientCacheRule\n* add more convenience methods in ClientCacheRule\n* clean up the ClusterStarterRule.startClient interface\n* deprecate the SecurityTestUtils to favor using rules","date":"2018-11-20 23:37:19","modifiedFileCount":"21","status":"M","submitter":"jinmeiliao"},{"authorTime":"2019-03-20 23:38:04","codes":[{"authorDate":"2019-03-20 23:38:04","commitOrder":4,"curCode":"  public void testOneClientToOneServerOnPartitionedRegion() throws Exception {\n    \r\n    int server1Port = server1.getPort();\n    int server2Port = server2.getPort();\n    client3 =\n        cluster.startClientVM(3,\n            c1 -> c1.withPoolSubscription(true).withServerConnection(server1Port));\n    client4 =\n        cluster.startClientVM(4,\n            c -> c.withPoolSubscription(true).withServerConnection(server2Port));\n\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(0, 100));\n    server2.invoke(() -> populateRegion(100, 200));\n\n    client3.invoke(() -> executeQueries());\n    client4.invoke(() -> executeQueries());\n  }\n","date":"2019-03-20 23:38:04","endLine":167,"groupId":"29044","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneClientToOneServerOnPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/cd/880046a00865b5ddf8bf9971000f208875debe.src","preCode":"  public void testOneClientToOneServerOnPartitionedRegion() throws Exception {\n    \r\n    int server1Port = server1.getPort();\n    int server2Port = server2.getPort();\n    client3 =\n        cluster.startClientVM(3,\n            c1 -> c1.withPoolSubscription(true).withServerConnection(server1Port));\n    client4 =\n        cluster.startClientVM(4,\n            c -> c.withPoolSubscription(true).withServerConnection(server2Port));\n\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(0, 100));\n    server2.invoke(() -> populateRegion(100, 200));\n\n    client3.invoke(() -> executeQuery());\n    client4.invoke(() -> executeQuery());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryMonitorDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2019-03-20 23:38:04","commitOrder":4,"curCode":"  public void testQueryExecutionFromServerOnPartitionedRegion() throws Exception {\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(100, 200));\n    server2.invoke(() -> populateRegion(200, 300));\n\n    \r\n    server1.invoke(() -> executeQueries());\n    server2.invoke(() -> executeQueries());\n  }\n","date":"2019-03-20 23:38:04","endLine":204,"groupId":"26820","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryExecutionFromServerOnPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/cd/880046a00865b5ddf8bf9971000f208875debe.src","preCode":"  public void testQueryExecutionFromServerOnPartitionedRegion() throws Exception {\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(100, 200));\n    server2.invoke(() -> populateRegion(200, 300));\n\n    \r\n    server1.invoke(() -> executeQuery());\n    server2.invoke(() -> executeQuery());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryMonitorDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"3ffbc4183de59aa0603bea2e25f91a6e80a1d079","commitMessage":"@@@GEODE-6488: Migrating cancellation state to execution context (#3322)\n\nThis work solves two problems.  One is that the query cancellation task\nreference in DefaultQuery could be overwritten and thus never removed\nfrom monitoring upon successful completion of a query.  Second is that\nonce a query execution timed out once.  the query object was in an\nunusable state which is undesirable.\n\nThe solution is to attach the cancellation state to the execution\ncontext rather than the query object.  so that cancellation is associated\nwith each independent execution of a query rather than having\ncancellation state that applies to the entire query object.","date":"2019-03-20 23:38:04","modifiedFileCount":"35","status":"M","submitter":"Ryan McMahon"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":5,"curCode":"  public void testOneClientToOneServerOnPartitionedRegion() throws Exception {\n    \r\n    int server1Port = server1.getPort();\n    int server2Port = server2.getPort();\n    client3 =\n        cluster.startClientVM(3,\n            c1 -> c1.withPoolSubscription(true).withServerConnection(server1Port));\n    client4 =\n        cluster.startClientVM(4,\n            c -> c.withPoolSubscription(true).withServerConnection(server2Port));\n\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + \"exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(0, 100));\n    server2.invoke(() -> populateRegion(100, 200));\n\n    client3.invoke(() -> executeQueries());\n    client4.invoke(() -> executeQueries());\n  }\n","date":"2020-05-29 00:37:39","endLine":168,"groupId":"10427","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testOneClientToOneServerOnPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/41/c196562fc1e6c19a5b2f4a47d8b8df2239cf0a.src","preCode":"  public void testOneClientToOneServerOnPartitionedRegion() throws Exception {\n    \r\n    int server1Port = server1.getPort();\n    int server2Port = server2.getPort();\n    client3 =\n        cluster.startClientVM(3,\n            c1 -> c1.withPoolSubscription(true).withServerConnection(server1Port));\n    client4 =\n        cluster.startClientVM(4,\n            c -> c.withPoolSubscription(true).withServerConnection(server2Port));\n\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(0, 100));\n    server2.invoke(() -> populateRegion(100, 200));\n\n    client3.invoke(() -> executeQueries());\n    client4.invoke(() -> executeQueries());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryMonitorDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":5,"curCode":"  public void testQueryExecutionFromServerOnPartitionedRegion() throws Exception {\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + \"exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(100, 200));\n    server2.invoke(() -> populateRegion(200, 300));\n\n    \r\n    server1.invoke(() -> executeQueries());\n    server2.invoke(() -> executeQueries());\n  }\n","date":"2020-05-29 00:37:39","endLine":206,"groupId":"10427","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testQueryExecutionFromServerOnPartitionedRegion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/41/c196562fc1e6c19a5b2f4a47d8b8df2239cf0a.src","preCode":"  public void testQueryExecutionFromServerOnPartitionedRegion() throws Exception {\n    gfsh.executeAndAssertThat(\"create region --name=exampleRegion --type=PARTITION\")\n        .statusIsSuccess();\n\n    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(\"/exampleRegion\", 2);\n    server1.invoke(() -> populateRegion(100, 200));\n    server2.invoke(() -> populateRegion(200, 300));\n\n    \r\n    server1.invoke(() -> executeQueries());\n    server2.invoke(() -> executeQueries());\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryMonitorDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
