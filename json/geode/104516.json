[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testUpdateWithSameKeysSameValuesShouldRetainIndexMappings() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    Portfolio p = new Portfolio(1, 1);\n    HashMap map1 = new HashMap();\n    map1.put(\"SUN\", 1);\n    map1.put(\"IBM\", 2);\n    p.positions = map1;\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    region.put(1, p);\n    qs = CacheUtils.getQueryService();\n\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions[*]\", \"/portfolio\");\n    region.put(1, p);\n\n    SelectResults results = (SelectResults) qs\n        .newQuery(\"select * from /portfolio p where p.positions['SUN'] = 1\").execute();\n    assertEquals(1, results.size());\n  }\n","date":"2018-07-18 03:54:18","endLine":511,"groupId":"30940","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateWithSameKeysSameValuesShouldRetainIndexMappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/62/952078f1ad951b7ab26118b5265f46e3f9887e.src","preCode":"  public void testUpdateWithSameKeysSameValuesShouldRetainIndexMappings() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    Portfolio p = new Portfolio(1, 1);\n    HashMap map1 = new HashMap();\n    map1.put(\"SUN\", 1);\n    map1.put(\"IBM\", 2);\n    p.positions = map1;\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    region.put(1, p);\n    qs = CacheUtils.getQueryService();\n\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions[*]\", \"/portfolio\");\n    region.put(1, p);\n\n    SelectResults results = (SelectResults) qs\n        .newQuery(\"select * from /portfolio p where p.positions['SUN'] = 1\").execute();\n    assertEquals(1, results.size());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":492,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void updatingWithSameKeysDifferentValuesShouldRetainIndexMappings() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    Portfolio p = new Portfolio(1, 1);\n    HashMap map1 = new HashMap();\n    map1.put(\"SUN\", 1);\n    map1.put(\"IBM\", 2);\n    p.positions = map1;\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    region.put(1, p);\n    qs = CacheUtils.getQueryService();\n\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions[*]\", \"/portfolio\");\n    Portfolio p2 = new Portfolio(1, 1);\n    HashMap map2 = new HashMap();\n    p2.positions = map2;\n    map2.put(\"SUN\", 3);\n    map2.put(\"IBM\", 4);\n    region.put(1, p2);\n\n    SelectResults results = (SelectResults) qs\n        .newQuery(\"select * from /portfolio p where p.positions['SUN'] = 1\").execute();\n    assertEquals(0, results.size());\n\n    results = (SelectResults) qs.newQuery(\"select * from /portfolio p where p.positions['SUN'] = 3\")\n        .execute();\n    assertEquals(1, results.size());\n  }\n","date":"2018-07-18 03:54:18","endLine":542,"groupId":"30940","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"updatingWithSameKeysDifferentValuesShouldRetainIndexMappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/62/952078f1ad951b7ab26118b5265f46e3f9887e.src","preCode":"  public void updatingWithSameKeysDifferentValuesShouldRetainIndexMappings() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    Portfolio p = new Portfolio(1, 1);\n    HashMap map1 = new HashMap();\n    map1.put(\"SUN\", 1);\n    map1.put(\"IBM\", 2);\n    p.positions = map1;\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    region.put(1, p);\n    qs = CacheUtils.getQueryService();\n\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions[*]\", \"/portfolio\");\n    Portfolio p2 = new Portfolio(1, 1);\n    HashMap map2 = new HashMap();\n    p2.positions = map2;\n    map2.put(\"SUN\", 3);\n    map2.put(\"IBM\", 4);\n    region.put(1, p2);\n\n    SelectResults results = (SelectResults) qs\n        .newQuery(\"select * from /portfolio p where p.positions['SUN'] = 1\").execute();\n    assertEquals(0, results.size());\n\n    results = (SelectResults) qs.newQuery(\"select * from /portfolio p where p.positions['SUN'] = 3\")\n        .execute();\n    assertEquals(1, results.size());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":514,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testUpdateWithSameKeysSameValuesShouldRetainIndexMappings() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    Portfolio p = new Portfolio(1, 1);\n    HashMap map1 = new HashMap();\n    map1.put(\"SUN\", 1);\n    map1.put(\"IBM\", 2);\n    p.positions = map1;\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    region.put(1, p);\n    qs = CacheUtils.getQueryService();\n\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions[*]\", SEPARATOR + \"portfolio\");\n    region.put(1, p);\n\n    SelectResults results = (SelectResults) qs\n        .newQuery(\"select * from \" + SEPARATOR + \"portfolio p where p.positions['SUN'] = 1\")\n        .execute();\n    assertEquals(1, results.size());\n  }\n","date":"2020-05-29 00:37:39","endLine":521,"groupId":"104516","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateWithSameKeysSameValuesShouldRetainIndexMappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/1556f769105a7d21547518ea43b44c6587604f.src","preCode":"  public void testUpdateWithSameKeysSameValuesShouldRetainIndexMappings() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    Portfolio p = new Portfolio(1, 1);\n    HashMap map1 = new HashMap();\n    map1.put(\"SUN\", 1);\n    map1.put(\"IBM\", 2);\n    p.positions = map1;\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    region.put(1, p);\n    qs = CacheUtils.getQueryService();\n\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions[*]\", \"/portfolio\");\n    region.put(1, p);\n\n    SelectResults results = (SelectResults) qs\n        .newQuery(\"select * from /portfolio p where p.positions['SUN'] = 1\").execute();\n    assertEquals(1, results.size());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":501,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void updatingWithSameKeysDifferentValuesShouldRetainIndexMappings() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    Portfolio p = new Portfolio(1, 1);\n    HashMap map1 = new HashMap();\n    map1.put(\"SUN\", 1);\n    map1.put(\"IBM\", 2);\n    p.positions = map1;\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    region.put(1, p);\n    qs = CacheUtils.getQueryService();\n\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions[*]\", SEPARATOR + \"portfolio\");\n    Portfolio p2 = new Portfolio(1, 1);\n    HashMap map2 = new HashMap();\n    p2.positions = map2;\n    map2.put(\"SUN\", 3);\n    map2.put(\"IBM\", 4);\n    region.put(1, p2);\n\n    SelectResults results = (SelectResults) qs\n        .newQuery(\"select * from \" + SEPARATOR + \"portfolio p where p.positions['SUN'] = 1\")\n        .execute();\n    assertEquals(0, results.size());\n\n    results = (SelectResults) qs\n        .newQuery(\"select * from \" + SEPARATOR + \"portfolio p where p.positions['SUN'] = 3\")\n        .execute();\n    assertEquals(1, results.size());\n  }\n","date":"2020-05-29 00:37:39","endLine":554,"groupId":"104516","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"updatingWithSameKeysDifferentValuesShouldRetainIndexMappings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/1556f769105a7d21547518ea43b44c6587604f.src","preCode":"  public void updatingWithSameKeysDifferentValuesShouldRetainIndexMappings() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    Portfolio p = new Portfolio(1, 1);\n    HashMap map1 = new HashMap();\n    map1.put(\"SUN\", 1);\n    map1.put(\"IBM\", 2);\n    p.positions = map1;\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    region.put(1, p);\n    qs = CacheUtils.getQueryService();\n\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions[*]\", \"/portfolio\");\n    Portfolio p2 = new Portfolio(1, 1);\n    HashMap map2 = new HashMap();\n    p2.positions = map2;\n    map2.put(\"SUN\", 3);\n    map2.put(\"IBM\", 4);\n    region.put(1, p2);\n\n    SelectResults results = (SelectResults) qs\n        .newQuery(\"select * from /portfolio p where p.positions['SUN'] = 1\").execute();\n    assertEquals(0, results.size());\n\n    results = (SelectResults) qs.newQuery(\"select * from /portfolio p where p.positions['SUN'] = 3\")\n        .execute();\n    assertEquals(1, results.size());\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":524,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
