[{"authorTime":"2018-08-09 00:51:50","codes":[{"authorDate":"2018-08-09 00:51:50","commitOrder":1,"curCode":"  public void testWithConflictingPIDFile() throws IOException {\n    final String fileName = ProcessType.SERVER.getPidFileName();\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String memberName = \"testWithConflictingPIDFile-server\";\n\n    \r\n    File pidFile = new File(workingDir.getAbsolutePath(), fileName);\n    assertThat(pidFile.createNewFile()).isTrue();\n\n    \r\n    try (FileWriter fileWriter = new FileWriter(pidFile, false)) {\n      fileWriter.write(getPidOrOne().toString() + \"\\n\");\n      fileWriter.flush();\n    }\n    assertThat(pidFile.isFile()).isTrue();\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__DIR, pidFile.getParentFile().getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    final String expectedError = \"A PID file already exists and a Server may be running in \"\n        + pidFile.getParentFile().getCanonicalPath();\n    final String expectedCause = \"Caused by: \"\n        + \"org.apache.geode.internal.process.FileAlreadyExistsException: Pid file already exists: \"\n        + pidFile.getCanonicalPath();\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError).contains(expectedCause);\n\n  }\n","date":"2018-08-09 00:51:50","endLine":317,"groupId":"45406","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithConflictingPIDFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/dd/96e99874bf8a255e56d78ea5e269aae586f96c.src","preCode":"  public void testWithConflictingPIDFile() throws IOException {\n    final String fileName = ProcessType.SERVER.getPidFileName();\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String memberName = \"testWithConflictingPIDFile-server\";\n\n    \r\n    File pidFile = new File(workingDir.getAbsolutePath(), fileName);\n    assertThat(pidFile.createNewFile()).isTrue();\n\n    \r\n    try (FileWriter fileWriter = new FileWriter(pidFile, false)) {\n      fileWriter.write(getPidOrOne().toString() + \"\\n\");\n      fileWriter.flush();\n    }\n    assertThat(pidFile.isFile()).isTrue();\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__DIR, pidFile.getParentFile().getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    final String expectedError = \"A PID file already exists and a Server may be running in \"\n        + pidFile.getParentFile().getCanonicalPath();\n    final String expectedCause = \"Caused by: \"\n        + \"org.apache.geode.internal.process.FileAlreadyExistsException: Pid file already exists: \"\n        + pidFile.getCanonicalPath();\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError).contains(expectedCause);\n\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"B"},{"authorDate":"2018-08-09 00:51:50","commitOrder":1,"curCode":"  public void testWithForceOverwriteConflictingPIDFile() throws IOException {\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String memberName = \"testWithForceOverwriteConflictingPIDFile-server\";\n    final String fileName = ProcessType.SERVER.getPidFileName();\n\n    \r\n    File pidFile = new File(workingDir.getAbsolutePath(), fileName);\n    assertThat(pidFile.createNewFile()).isTrue();\n\n    \r\n    try (FileWriter fileWriter = new FileWriter(pidFile, false)) {\n      fileWriter.write(getPidOrOne().toString() + \"\\n\");\n      fileWriter.flush();\n    }\n    assertThat(pidFile.isFile()).isTrue();\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__DIR, pidFile.getParentFile().getCanonicalPath())\n        .addOption(START_SERVER__FORCE, \"true\")\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    final String expectedMessage = \"Server in \" + pidFile.getParentFile().getCanonicalPath();\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.OK);\n    assertThat(result.getMessageFromContent()).contains(expectedMessage);\n  }\n","date":"2018-08-09 00:51:50","endLine":350,"groupId":"45411","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithForceOverwriteConflictingPIDFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/dd/96e99874bf8a255e56d78ea5e269aae586f96c.src","preCode":"  public void testWithForceOverwriteConflictingPIDFile() throws IOException {\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String memberName = \"testWithForceOverwriteConflictingPIDFile-server\";\n    final String fileName = ProcessType.SERVER.getPidFileName();\n\n    \r\n    File pidFile = new File(workingDir.getAbsolutePath(), fileName);\n    assertThat(pidFile.createNewFile()).isTrue();\n\n    \r\n    try (FileWriter fileWriter = new FileWriter(pidFile, false)) {\n      fileWriter.write(getPidOrOne().toString() + \"\\n\");\n      fileWriter.flush();\n    }\n    assertThat(pidFile.isFile()).isTrue();\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__DIR, pidFile.getParentFile().getCanonicalPath())\n        .addOption(START_SERVER__FORCE, \"true\")\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    final String expectedMessage = \"Server in \" + pidFile.getParentFile().getCanonicalPath();\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.OK);\n    assertThat(result.getMessageFromContent()).contains(expectedMessage);\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"B"}],"commitId":"57581af961203ed373456ce84a5c8e7bdb4e0ee6","commitMessage":"@@@Geode 3530 launcher lifecycle server commands (#2267)\n\n\n* GEODE-3530: Modernize LauncherLifecycleCommandsDUnit\n\n* Extract server start and locator start/stop/status commands into their own\nclasses\n* Remove the CliCommandTestBase\n* make locator names match test method names\n* add a method for writing classes to a jar file\n* add a function to use up all the server's memory for testing\n* add max heap property for out of memory test\n\nMake the behavior of the server out of memory test more reliable by\nadding a maxheap size (otherwise the size is decided by the JVM)\n\nSigned-off-by: Ken Howe<khowe@pivotal.io>\n","date":"2018-08-09 00:51:50","modifiedFileCount":"3","status":"B","submitter":"Helena Bales"},{"authorTime":"2018-10-12 07:11:27","codes":[{"authorDate":"2018-10-12 07:11:27","commitOrder":2,"curCode":"  public void testWithConflictingPIDFile() throws Exception {\n    String fileName = ProcessType.SERVER.getPidFileName();\n\n    \r\n    File pidFile = new File(workingDir.getAbsolutePath(), fileName);\n    assertThat(pidFile.createNewFile()).isTrue();\n\n    \r\n    try (FileWriter fileWriter = new FileWriter(pidFile, false)) {\n      fileWriter.write(ProcessUtils.identifyPid() + \"\\n\");\n      fileWriter.flush();\n    }\n    assertThat(pidFile.isFile()).isTrue();\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, String.valueOf(serverPort))\n        .addOption(START_SERVER__DIR, pidFile.getParentFile().getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    String expectedError = \"A PID file already exists and a Server may be running in \"\n        + pidFile.getParentFile().getCanonicalPath();\n    String expectedCause = \"Caused by: \"\n        + \"org.apache.geode.internal.process.FileAlreadyExistsException: Pid file already exists: \"\n        + pidFile.getCanonicalPath();\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError).contains(expectedCause);\n  }\n","date":"2018-10-12 07:11:27","endLine":279,"groupId":"43931","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithConflictingPIDFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6b/da01bb0427b0ee32daf496891600e3d59a9917.src","preCode":"  public void testWithConflictingPIDFile() throws IOException {\n    final String fileName = ProcessType.SERVER.getPidFileName();\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String memberName = \"testWithConflictingPIDFile-server\";\n\n    \r\n    File pidFile = new File(workingDir.getAbsolutePath(), fileName);\n    assertThat(pidFile.createNewFile()).isTrue();\n\n    \r\n    try (FileWriter fileWriter = new FileWriter(pidFile, false)) {\n      fileWriter.write(getPidOrOne().toString() + \"\\n\");\n      fileWriter.flush();\n    }\n    assertThat(pidFile.isFile()).isTrue();\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__DIR, pidFile.getParentFile().getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    final String expectedError = \"A PID file already exists and a Server may be running in \"\n        + pidFile.getParentFile().getCanonicalPath();\n    final String expectedCause = \"Caused by: \"\n        + \"org.apache.geode.internal.process.FileAlreadyExistsException: Pid file already exists: \"\n        + pidFile.getCanonicalPath();\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError).contains(expectedCause);\n\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"},{"authorDate":"2018-10-12 07:11:27","commitOrder":2,"curCode":"  public void testWithForceOverwriteConflictingPIDFile() throws Exception {\n    String fileName = ProcessType.SERVER.getPidFileName();\n\n    \r\n    File pidFile = new File(workingDir.getAbsolutePath(), fileName);\n    assertThat(pidFile.createNewFile()).isTrue();\n\n    \r\n    try (FileWriter fileWriter = new FileWriter(pidFile, false)) {\n      fileWriter.write(ProcessUtils.identifyPid() + \"\\n\");\n      fileWriter.flush();\n    }\n    assertThat(pidFile.isFile()).isTrue();\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, String.valueOf(serverPort))\n        .addOption(START_SERVER__DIR, pidFile.getParentFile().getCanonicalPath())\n        .addOption(START_SERVER__FORCE, \"true\")\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    String expectedMessage = \"Server in \" + pidFile.getParentFile().getCanonicalPath();\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.OK);\n    assertThat(result.getMessageFromContent()).contains(expectedMessage);\n  }\n","date":"2018-10-12 07:11:27","endLine":310,"groupId":"43931","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithForceOverwriteConflictingPIDFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6b/da01bb0427b0ee32daf496891600e3d59a9917.src","preCode":"  public void testWithForceOverwriteConflictingPIDFile() throws IOException {\n    final Integer serverPort = AvailablePortHelper.getRandomAvailableTCPPort();\n    final String memberName = \"testWithForceOverwriteConflictingPIDFile-server\";\n    final String fileName = ProcessType.SERVER.getPidFileName();\n\n    \r\n    File pidFile = new File(workingDir.getAbsolutePath(), fileName);\n    assertThat(pidFile.createNewFile()).isTrue();\n\n    \r\n    try (FileWriter fileWriter = new FileWriter(pidFile, false)) {\n      fileWriter.write(getPidOrOne().toString() + \"\\n\");\n      fileWriter.flush();\n    }\n    assertThat(pidFile.isFile()).isTrue();\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, serverPort.toString())\n        .addOption(START_SERVER__DIR, pidFile.getParentFile().getCanonicalPath())\n        .addOption(START_SERVER__FORCE, \"true\")\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    final String expectedMessage = \"Server in \" + pidFile.getParentFile().getCanonicalPath();\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.OK);\n    assertThat(result.getMessageFromContent()).contains(expectedMessage);\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"}],"commitId":"a9023e06d835d660e9c9f5b2f6a1017866977088","commitMessage":"@@@GEODE-5212: fix failing StartLocator and Server command DUnit tests (#2580)\n\n   * Added unit tests to cover different working directory cases\n   * Removed acceptance tests related to working directory as they\n     seem to be fragile as paths are environment specific\n\nSigned-off-by: Kirk Lund <klund@apache.org>","date":"2018-10-12 07:11:27","modifiedFileCount":"7","status":"M","submitter":"Sai Boorlagadda"},{"authorTime":"2019-04-25 23:05:13","codes":[{"authorDate":"2019-04-25 23:05:13","commitOrder":3,"curCode":"  public void testWithConflictingPIDFile() throws Exception {\n    String fileName = ProcessType.SERVER.getPidFileName();\n\n    \r\n    File pidFile = new File(workingDir.getAbsolutePath(), fileName);\n    assertThat(pidFile.createNewFile()).isTrue();\n\n    \r\n    try (FileWriter fileWriter = new FileWriter(pidFile, false)) {\n      fileWriter.write(ProcessUtils.identifyPid() + \"\\n\");\n      fileWriter.flush();\n    }\n    assertThat(pidFile.isFile()).isTrue();\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, String.valueOf(serverPort))\n        .addOption(START_SERVER__DIR, pidFile.getParentFile().getCanonicalPath())\n        .getCommandString();\n\n    String expectedError = \"A PID file already exists and a Server may be running in \"\n        + pidFile.getParentFile().getCanonicalPath();\n    String expectedCause = \"Caused by: \"\n        + \"org.apache.geode.internal.process.FileAlreadyExistsException: Pid file already exists: \"\n        + pidFile.getCanonicalPath();\n\n    gfsh.executeAndAssertThat(command).statusIsError()\n        .hasOutput().contains(expectedError, expectedCause);\n  }\n","date":"2019-04-25 23:05:13","endLine":263,"groupId":"101439","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithConflictingPIDFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/50/2f303680357f69a2a331838273371a69c868d4.src","preCode":"  public void testWithConflictingPIDFile() throws Exception {\n    String fileName = ProcessType.SERVER.getPidFileName();\n\n    \r\n    File pidFile = new File(workingDir.getAbsolutePath(), fileName);\n    assertThat(pidFile.createNewFile()).isTrue();\n\n    \r\n    try (FileWriter fileWriter = new FileWriter(pidFile, false)) {\n      fileWriter.write(ProcessUtils.identifyPid() + \"\\n\");\n      fileWriter.flush();\n    }\n    assertThat(pidFile.isFile()).isTrue();\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, String.valueOf(serverPort))\n        .addOption(START_SERVER__DIR, pidFile.getParentFile().getCanonicalPath())\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    String expectedError = \"A PID file already exists and a Server may be running in \"\n        + pidFile.getParentFile().getCanonicalPath();\n    String expectedCause = \"Caused by: \"\n        + \"org.apache.geode.internal.process.FileAlreadyExistsException: Pid file already exists: \"\n        + pidFile.getCanonicalPath();\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.ERROR);\n    assertThat(result.getMessageFromContent()).contains(expectedError).contains(expectedCause);\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"},{"authorDate":"2019-04-25 23:05:13","commitOrder":3,"curCode":"  public void testWithForceOverwriteConflictingPIDFile() throws Exception {\n    String fileName = ProcessType.SERVER.getPidFileName();\n\n    \r\n    File pidFile = new File(workingDir.getAbsolutePath(), fileName);\n    assertThat(pidFile.createNewFile()).isTrue();\n\n    \r\n    try (FileWriter fileWriter = new FileWriter(pidFile, false)) {\n      fileWriter.write(ProcessUtils.identifyPid() + \"\\n\");\n      fileWriter.flush();\n    }\n    assertThat(pidFile.isFile()).isTrue();\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, String.valueOf(serverPort))\n        .addOption(START_SERVER__DIR, pidFile.getParentFile().getCanonicalPath())\n        .addOption(START_SERVER__FORCE, \"true\")\n        .getCommandString();\n\n    String expectedMessage = \"Server in \" + pidFile.getParentFile().getCanonicalPath();\n\n    gfsh.executeAndAssertThat(command).statusIsSuccess()\n        .containsOutput(expectedMessage);\n  }\n","date":"2019-04-25 23:05:13","endLine":292,"groupId":"101439","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithForceOverwriteConflictingPIDFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/50/2f303680357f69a2a331838273371a69c868d4.src","preCode":"  public void testWithForceOverwriteConflictingPIDFile() throws Exception {\n    String fileName = ProcessType.SERVER.getPidFileName();\n\n    \r\n    File pidFile = new File(workingDir.getAbsolutePath(), fileName);\n    assertThat(pidFile.createNewFile()).isTrue();\n\n    \r\n    try (FileWriter fileWriter = new FileWriter(pidFile, false)) {\n      fileWriter.write(ProcessUtils.identifyPid() + \"\\n\");\n      fileWriter.flush();\n    }\n    assertThat(pidFile.isFile()).isTrue();\n\n    String command = new CommandStringBuilder(START_SERVER)\n        .addOption(START_SERVER__NAME, memberName)\n        .addOption(START_SERVER__LOCATORS, locatorConnectionString)\n        .addOption(START_SERVER__SERVER_PORT, String.valueOf(serverPort))\n        .addOption(START_SERVER__DIR, pidFile.getParentFile().getCanonicalPath())\n        .addOption(START_SERVER__FORCE, \"true\")\n        .getCommandString();\n\n    CommandResult result = gfsh.executeCommand(command);\n\n    String expectedMessage = \"Server in \" + pidFile.getParentFile().getCanonicalPath();\n\n    assertThat(result.getStatus()).isEqualTo(Result.Status.OK);\n    assertThat(result.getMessageFromContent()).contains(expectedMessage);\n  }\n","realPath":"geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartServerCommandDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"}],"commitId":"96466c95cc233111db2d57b5d97ea52864fee875","commitMessage":"@@@GEODE-5971: delete LegacyCommandResult and rename ModelResultModel to? (#3497)\n\n\n","date":"2019-04-25 23:05:13","modifiedFileCount":"91","status":"M","submitter":"jinmeiliao"}]
