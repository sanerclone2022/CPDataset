[{"authorTime":"2019-01-04 07:06:09","codes":[{"authorDate":"2019-01-04 07:06:09","commitOrder":1,"curCode":"  public void wrap() throws Exception {\n    \r\n    ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100);\n    byte[] appBytes = new byte[appData.capacity()];\n    Arrays.fill(appBytes, (byte) 0x1F);\n    appData.put(appBytes);\n    appData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(\n        new SSLEngineResult(OK, NEED_TASK, appData.remaining(), appData.remaining()));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer wrappedBuffer = spyNioSslEngine.wrap(appData);\n\n    verify(spyNioSslEngine, times(1)).expandBuffer(any(Buffers.BufferType.class),\n        any(ByteBuffer.class), any(Integer.class), any(DMStats.class));\n    appData.flip();\n    assertThat(wrappedBuffer).isEqualTo(appData);\n    verify(spyNioSslEngine, times(1)).handleBlockingTasks();\n  }\n","date":"2019-01-04 07:06:09","endLine":233,"groupId":"9193","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"wrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/70/10db0c77de0e85f4d8b2c8b52552760ba29fb0.src","preCode":"  public void wrap() throws Exception {\n    \r\n    ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100);\n    byte[] appBytes = new byte[appData.capacity()];\n    Arrays.fill(appBytes, (byte) 0x1F);\n    appData.put(appBytes);\n    appData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(\n        new SSLEngineResult(OK, NEED_TASK, appData.remaining(), appData.remaining()));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer wrappedBuffer = spyNioSslEngine.wrap(appData);\n\n    verify(spyNioSslEngine, times(1)).expandBuffer(any(Buffers.BufferType.class),\n        any(ByteBuffer.class), any(Integer.class), any(DMStats.class));\n    appData.flip();\n    assertThat(wrappedBuffer).isEqualTo(appData);\n    verify(spyNioSslEngine, times(1)).handleBlockingTasks();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/net/NioSslEngineTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"B"},{"authorDate":"2019-01-04 07:06:09","commitOrder":1,"curCode":"  public void unwrapWithBufferUnderflow() throws Exception {\n    ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity());\n    byte[] netBytes = new byte[wrappedData.capacity() / 2];\n    Arrays.fill(netBytes, (byte) 0x1F);\n    wrappedData.put(netBytes);\n    wrappedData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW, NEED_TASK, 0, 0));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer unwrappedBuffer = spyNioSslEngine.unwrap(wrappedData);\n    unwrappedBuffer.flip();\n    assertThat(unwrappedBuffer.remaining()).isEqualTo(0);\n    assertThat(wrappedData.position()).isEqualTo(netBytes.length);\n  }\n","date":"2019-01-04 07:06:09","endLine":294,"groupId":"9195","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unwrapWithBufferUnderflow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/70/10db0c77de0e85f4d8b2c8b52552760ba29fb0.src","preCode":"  public void unwrapWithBufferUnderflow() throws Exception {\n    ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity());\n    byte[] netBytes = new byte[wrappedData.capacity() / 2];\n    Arrays.fill(netBytes, (byte) 0x1F);\n    wrappedData.put(netBytes);\n    wrappedData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW, NEED_TASK, 0, 0));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer unwrappedBuffer = spyNioSslEngine.unwrap(wrappedData);\n    unwrappedBuffer.flip();\n    assertThat(unwrappedBuffer.remaining()).isEqualTo(0);\n    assertThat(wrappedData.position()).isEqualTo(netBytes.length);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/net/NioSslEngineTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"B"}],"commitId":"a075b0e1a13a7a57378973bbfb7f14a63f29bf87","commitMessage":"@@@GEODE-2113 Implement SSL over NIO\n\nThis removes old-I/O use in TCPConduit peer-to-peer communications.\nThis was used for SSL/TLS secure commuications but Java has had an\nSSLEngine implementation that allows you to implement secure communications\non new-I/O SocketChannels or any other transport mechanism.\n\nA new NioSSLEngine class wraps the JDK's SSLEngine and provides the\nSSL handshake as well as encryption/decryption of messages. SocketCreator\nperforms the SSL handshake and returns a NioSslEngine that TCPConduit\nthen uses for messaging.\n\nThe SSL handshake needs to be done in Connection.java now because the\nByteBuffer used to do the handshake is also used for reading messages\nin Receivers. Because of this the Handshake pool in TCPConduit became\nobsolete and I deleted it.\n\nI've also done a lot of cleanup of compilation warnings in Connection.java\nand removed references to \"NIO\". The primary SSL/TLS changes in that class\nare in writeFully (renamed from nioWriteFully) and processBuffer (renamed\nfrom processNIOBuffer).\n\nWhile testing I noticed some places where we're creating non-daemon\nthreads that were keeping DUnit ChildVM processes from exiting.  I've\nchanged these places to use daemon threads.  Very few threads in Geode\nshould be non-daemon.\n\nPorting client/server to use NioSSLEngine will be done under a separate\nticket and a different version of NioEngine may be created to secure\nUDP messaging.\n","date":"2019-01-04 07:06:09","modifiedFileCount":"28","status":"B","submitter":"Bruce Schuchardt"},{"authorTime":"2019-01-04 07:06:09","codes":[{"authorDate":"2019-01-30 08:05:48","commitOrder":2,"curCode":"  public void wrap() throws Exception {\n    \r\n    ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100);\n    byte[] appBytes = new byte[appData.capacity()];\n    Arrays.fill(appBytes, (byte) 0x1F);\n    appData.put(appBytes);\n    appData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(\n        new SSLEngineResult(OK, NEED_TASK, appData.remaining(), appData.remaining()));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer wrappedBuffer = spyNioSslEngine.wrap(appData);\n\n    verify(spyNioSslEngine, times(1)).expandWriteBuffer(any(Buffers.BufferType.class),\n        any(ByteBuffer.class), any(Integer.class), any(DMStats.class));\n    appData.flip();\n    assertThat(wrappedBuffer).isEqualTo(appData);\n    verify(spyNioSslEngine, times(1)).handleBlockingTasks();\n  }\n","date":"2019-01-30 08:05:48","endLine":236,"groupId":"9193","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"wrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/d79361070624666d1f40f774257b6d57a155b7.src","preCode":"  public void wrap() throws Exception {\n    \r\n    ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100);\n    byte[] appBytes = new byte[appData.capacity()];\n    Arrays.fill(appBytes, (byte) 0x1F);\n    appData.put(appBytes);\n    appData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(\n        new SSLEngineResult(OK, NEED_TASK, appData.remaining(), appData.remaining()));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer wrappedBuffer = spyNioSslEngine.wrap(appData);\n\n    verify(spyNioSslEngine, times(1)).expandBuffer(any(Buffers.BufferType.class),\n        any(ByteBuffer.class), any(Integer.class), any(DMStats.class));\n    appData.flip();\n    assertThat(wrappedBuffer).isEqualTo(appData);\n    verify(spyNioSslEngine, times(1)).handleBlockingTasks();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/net/NioSslEngineTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2019-01-04 07:06:09","commitOrder":2,"curCode":"  public void unwrapWithBufferUnderflow() throws Exception {\n    ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity());\n    byte[] netBytes = new byte[wrappedData.capacity() / 2];\n    Arrays.fill(netBytes, (byte) 0x1F);\n    wrappedData.put(netBytes);\n    wrappedData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW, NEED_TASK, 0, 0));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer unwrappedBuffer = spyNioSslEngine.unwrap(wrappedData);\n    unwrappedBuffer.flip();\n    assertThat(unwrappedBuffer.remaining()).isEqualTo(0);\n    assertThat(wrappedData.position()).isEqualTo(netBytes.length);\n  }\n","date":"2019-01-04 07:06:09","endLine":294,"groupId":"9195","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unwrapWithBufferUnderflow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/70/10db0c77de0e85f4d8b2c8b52552760ba29fb0.src","preCode":"  public void unwrapWithBufferUnderflow() throws Exception {\n    ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity());\n    byte[] netBytes = new byte[wrappedData.capacity() / 2];\n    Arrays.fill(netBytes, (byte) 0x1F);\n    wrappedData.put(netBytes);\n    wrappedData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW, NEED_TASK, 0, 0));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer unwrappedBuffer = spyNioSslEngine.unwrap(wrappedData);\n    unwrappedBuffer.flip();\n    assertThat(unwrappedBuffer.remaining()).isEqualTo(0);\n    assertThat(wrappedData.position()).isEqualTo(netBytes.length);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/net/NioSslEngineTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"N"}],"commitId":"33077b3dab41260c70cece5b4f7ff1c42501b01c","commitMessage":"@@@GEODE-2113 Implement SSL over NIO\n\nThis fixes several bugs in the original implementation of SSL over NIO.\nNotably there were buffer handling problems in MsgReader and the\nNioFilters.  This new commit includes code coverage for these classes\nin new tests.\n\nOriginal commit message:\n\nThis removes old-I/O use in TCPConduit peer-to-peer communications.\nThis was used for SSL/TLS secure commuications but Java has had an\nSSLEngine implementation that allows you to implement secure communications\non new-I/O SocketChannels or any other transport mechanism.\n\nA new NioSSLEngine class wraps the JDK's SSLEngine and provides the\nSSL handshake as well as encryption/decryption of messages. SocketCreator\nperforms the SSL handshake and returns a NioSslEngine that TCPConduit\nthen uses for messaging.\n\nThe SSL handshake needs to be done in Connection.java now because the\nByteBuffer used to do the handshake is also used for reading messages\nin Receivers. Because of this the Handshake pool in TCPConduit became\nobsolete and I deleted it.\n\nI've also done a lot of cleanup of compilation warnings in Connection.java\nand removed references to \"NIO\". The primary SSL/TLS changes in that class\nare in writeFully (renamed from nioWriteFully) and processBuffer (renamed\nfrom processNIOBuffer).\n\nWhile testing I noticed some places where we're creating non-daemon\nthreads that were keeping DUnit ChildVM processes from exiting.  I've\nchanged these places to use daemon threads.  Very few threads in Geode\nshould be non-daemon.\n\nPorting client/server to use NioSSLEngine will be done under a separate\nticket and a different version of NioEngine may be created to secure\nUDP messaging.\n","date":"2019-01-30 08:05:48","modifiedFileCount":"33","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2019-01-04 07:06:09","codes":[{"authorDate":"2019-05-21 23:42:21","commitOrder":3,"curCode":"  public void wrap() throws Exception {\n    \r\n    ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100);\n    byte[] appBytes = new byte[appData.capacity()];\n    Arrays.fill(appBytes, (byte) 0x1F);\n    appData.put(appBytes);\n    appData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(\n        new SSLEngineResult(OK, NEED_TASK, appData.remaining(), appData.remaining()));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer wrappedBuffer = spyNioSslEngine.wrap(appData);\n\n    verify(spyNioSslEngine, times(1)).expandWriteBuffer(any(BufferPool.BufferType.class),\n        any(ByteBuffer.class), any(Integer.class));\n    appData.flip();\n    assertThat(wrappedBuffer).isEqualTo(appData);\n    verify(spyNioSslEngine, times(1)).handleBlockingTasks();\n  }\n","date":"2019-05-21 23:42:21","endLine":236,"groupId":"9193","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"wrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/72/36895946daa05b531c6aa58acbd18bacbc2766.src","preCode":"  public void wrap() throws Exception {\n    \r\n    ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100);\n    byte[] appBytes = new byte[appData.capacity()];\n    Arrays.fill(appBytes, (byte) 0x1F);\n    appData.put(appBytes);\n    appData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(\n        new SSLEngineResult(OK, NEED_TASK, appData.remaining(), appData.remaining()));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer wrappedBuffer = spyNioSslEngine.wrap(appData);\n\n    verify(spyNioSslEngine, times(1)).expandWriteBuffer(any(Buffers.BufferType.class),\n        any(ByteBuffer.class), any(Integer.class), any(DMStats.class));\n    appData.flip();\n    assertThat(wrappedBuffer).isEqualTo(appData);\n    verify(spyNioSslEngine, times(1)).handleBlockingTasks();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/net/NioSslEngineTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2019-01-04 07:06:09","commitOrder":3,"curCode":"  public void unwrapWithBufferUnderflow() throws Exception {\n    ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity());\n    byte[] netBytes = new byte[wrappedData.capacity() / 2];\n    Arrays.fill(netBytes, (byte) 0x1F);\n    wrappedData.put(netBytes);\n    wrappedData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW, NEED_TASK, 0, 0));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer unwrappedBuffer = spyNioSslEngine.unwrap(wrappedData);\n    unwrappedBuffer.flip();\n    assertThat(unwrappedBuffer.remaining()).isEqualTo(0);\n    assertThat(wrappedData.position()).isEqualTo(netBytes.length);\n  }\n","date":"2019-01-04 07:06:09","endLine":294,"groupId":"9195","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unwrapWithBufferUnderflow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/70/10db0c77de0e85f4d8b2c8b52552760ba29fb0.src","preCode":"  public void unwrapWithBufferUnderflow() throws Exception {\n    ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity());\n    byte[] netBytes = new byte[wrappedData.capacity() / 2];\n    Arrays.fill(netBytes, (byte) 0x1F);\n    wrappedData.put(netBytes);\n    wrappedData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW, NEED_TASK, 0, 0));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer unwrappedBuffer = spyNioSslEngine.unwrap(wrappedData);\n    unwrappedBuffer.flip();\n    assertThat(unwrappedBuffer.remaining()).isEqualTo(0);\n    assertThat(wrappedData.position()).isEqualTo(netBytes.length);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/net/NioSslEngineTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"N"}],"commitId":"3ec8459e9254b7b5a553965c40b75668f9e8b673","commitMessage":"@@@GEODE-6733 Remove mutable static org.apache.geode.internal.net.Buffers.buffersQueue\n\nConverted static Buffers class to be a non-static buffer pool.\n","date":"2019-05-21 23:42:21","modifiedFileCount":"18","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-10-30 07:38:25","codes":[{"authorDate":"2020-10-30 07:38:25","commitOrder":4,"curCode":"  public void wrap() throws Exception {\n    try (final ByteBufferSharing outputSharing = nioSslEngine.shareOutputBuffer()) {\n\n      \r\n      ByteBuffer appData =\n          ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100);\n      byte[] appBytes = new byte[appData.capacity()];\n      Arrays.fill(appBytes, (byte) 0x1F);\n      appData.put(appBytes);\n      appData.flip();\n\n      \r\n      \r\n      TestSSLEngine testEngine = new TestSSLEngine();\n      testEngine.addReturnResult(\n          new SSLEngineResult(OK, NEED_TASK, appData.remaining(), appData.remaining()));\n      spyNioSslEngine.engine = testEngine;\n\n      try (final ByteBufferSharing outputSharing2 = spyNioSslEngine.wrap(appData)) {\n        ByteBuffer wrappedBuffer = outputSharing2.getBuffer();\n\n        verify(spyBufferPool, times(1)).expandWriteBufferIfNeeded(any(BufferPool.BufferType.class),\n            any(ByteBuffer.class), any(Integer.class));\n        appData.flip();\n        assertThat(wrappedBuffer).isEqualTo(appData);\n      }\n      verify(spyNioSslEngine, times(1)).handleBlockingTasks();\n    }\n  }\n","date":"2020-10-30 07:38:25","endLine":220,"groupId":"9193","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"wrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e9/b01cfd0ea5c86b2b7a2ad8e53f1928429cda44.src","preCode":"  public void wrap() throws Exception {\n    \r\n    ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100);\n    byte[] appBytes = new byte[appData.capacity()];\n    Arrays.fill(appBytes, (byte) 0x1F);\n    appData.put(appBytes);\n    appData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(\n        new SSLEngineResult(OK, NEED_TASK, appData.remaining(), appData.remaining()));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer wrappedBuffer = spyNioSslEngine.wrap(appData);\n\n    verify(spyNioSslEngine, times(1)).expandWriteBuffer(any(BufferPool.BufferType.class),\n        any(ByteBuffer.class), any(Integer.class));\n    appData.flip();\n    assertThat(wrappedBuffer).isEqualTo(appData);\n    verify(spyNioSslEngine, times(1)).handleBlockingTasks();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/net/NioSslEngineTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"},{"authorDate":"2020-10-30 07:38:25","commitOrder":4,"curCode":"  public void unwrapWithBufferUnderflow() throws Exception {\n    try (final ByteBufferSharing inputSharing = nioSslEngine.shareInputBuffer()) {\n      ByteBuffer wrappedData =\n          ByteBuffer.allocate(inputSharing.getBuffer().capacity());\n      byte[] netBytes = new byte[wrappedData.capacity() / 2];\n      Arrays.fill(netBytes, (byte) 0x1F);\n      wrappedData.put(netBytes);\n      wrappedData.flip();\n\n      \r\n      \r\n      TestSSLEngine testEngine = new TestSSLEngine();\n      testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW, NEED_TASK, 0, 0));\n      spyNioSslEngine.engine = testEngine;\n\n      try (final ByteBufferSharing sharedBuffer = spyNioSslEngine.unwrap(wrappedData)) {\n        ByteBuffer unwrappedBuffer = sharedBuffer.getBuffer();\n        unwrappedBuffer.flip();\n        assertThat(unwrappedBuffer.remaining()).isEqualTo(0);\n      }\n      assertThat(wrappedData.position()).isEqualTo(netBytes.length);\n    }\n  }\n","date":"2020-10-30 07:38:25","endLine":308,"groupId":"9195","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"unwrapWithBufferUnderflow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e9/b01cfd0ea5c86b2b7a2ad8e53f1928429cda44.src","preCode":"  public void unwrapWithBufferUnderflow() throws Exception {\n    ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity());\n    byte[] netBytes = new byte[wrappedData.capacity() / 2];\n    Arrays.fill(netBytes, (byte) 0x1F);\n    wrappedData.put(netBytes);\n    wrappedData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW, NEED_TASK, 0, 0));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer unwrappedBuffer = spyNioSslEngine.unwrap(wrappedData);\n    unwrappedBuffer.flip();\n    assertThat(unwrappedBuffer.remaining()).isEqualTo(0);\n    assertThat(wrappedData.position()).isEqualTo(netBytes.length);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/net/NioSslEngineTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"}],"commitId":"08e9e9673d0ed05555a3d74c6d16e706817cab09","commitMessage":"@@@GEODE-8652: NioSslEngine.close() Bypasses Locks (#5666)\n\n- NioSslEngine.close() proceeds even if readers (or writers) are\n  operating on its ByteBuffers.  allowing Connection.close() to close \n  its socket and proceed.\n\n- NioSslEngine.close() needed a lock only on the output buffer.  so \n  we split what was a single lock into two. Also instead of using \n  synchronized we use a ReentrantLock so we can \n  call tryLock() and time out if needed in NioSslEngine.close().\n\n- Since readers/writers may hold locks on these input/output buffers\n  when NioSslEngine.close() is called a reference count is maintained\n  and the buffers are returned to the pool only when the last user\n  is done.\n\n- To manage the locking and reference counting a new AutoCloseable\n  ByteBufferSharing interface is introduced with a trivial \n  implementation: ByteBufferSharingNoOp and a real implementation:\n  ByteBufferSharingImpl.\n\nCo-authored-by: Bill Burcham <bill.burcham@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>\nCo-authored-by: Ernie Burghardt <burghardte@vmware.com>","date":"2020-10-30 07:38:25","modifiedFileCount":"9","status":"M","submitter":"Bill Burcham"},{"authorTime":"2020-11-06 04:52:02","codes":[{"authorDate":"2020-11-06 04:52:02","commitOrder":5,"curCode":"  public void wrap() throws Exception {\n    \r\n    ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100);\n    byte[] appBytes = new byte[appData.capacity()];\n    Arrays.fill(appBytes, (byte) 0x1F);\n    appData.put(appBytes);\n    appData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(\n        new SSLEngineResult(OK, NEED_TASK, appData.remaining(), appData.remaining()));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer wrappedBuffer = spyNioSslEngine.wrap(appData);\n\n    verify(spyNioSslEngine, times(1)).expandWriteBuffer(any(BufferPool.BufferType.class),\n        any(ByteBuffer.class), any(Integer.class));\n    appData.flip();\n    assertThat(wrappedBuffer).isEqualTo(appData);\n    verify(spyNioSslEngine, times(1)).handleBlockingTasks();\n  }\n","date":"2020-11-06 05:45:26","endLine":231,"groupId":"9193","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"wrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/88/e4f31a6fdf460bda4a1562a2f06ec9701417ea.src","preCode":"  public void wrap() throws Exception {\n    try (final ByteBufferSharing outputSharing = nioSslEngine.shareOutputBuffer()) {\n\n      \r\n      ByteBuffer appData =\n          ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100);\n      byte[] appBytes = new byte[appData.capacity()];\n      Arrays.fill(appBytes, (byte) 0x1F);\n      appData.put(appBytes);\n      appData.flip();\n\n      \r\n      \r\n      TestSSLEngine testEngine = new TestSSLEngine();\n      testEngine.addReturnResult(\n          new SSLEngineResult(OK, NEED_TASK, appData.remaining(), appData.remaining()));\n      spyNioSslEngine.engine = testEngine;\n\n      try (final ByteBufferSharing outputSharing2 = spyNioSslEngine.wrap(appData)) {\n        ByteBuffer wrappedBuffer = outputSharing2.getBuffer();\n\n        verify(spyBufferPool, times(1)).expandWriteBufferIfNeeded(any(BufferPool.BufferType.class),\n            any(ByteBuffer.class), any(Integer.class));\n        appData.flip();\n        assertThat(wrappedBuffer).isEqualTo(appData);\n      }\n      verify(spyNioSslEngine, times(1)).handleBlockingTasks();\n    }\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/net/NioSslEngineTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"},{"authorDate":"2020-11-06 04:52:02","commitOrder":5,"curCode":"  public void unwrapWithBufferUnderflow() throws Exception {\n    ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity());\n    byte[] netBytes = new byte[wrappedData.capacity() / 2];\n    Arrays.fill(netBytes, (byte) 0x1F);\n    wrappedData.put(netBytes);\n    wrappedData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW, NEED_TASK, 0, 0));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer unwrappedBuffer = spyNioSslEngine.unwrap(wrappedData);\n    unwrappedBuffer.flip();\n    assertThat(unwrappedBuffer.remaining()).isEqualTo(0);\n    assertThat(wrappedData.position()).isEqualTo(netBytes.length);\n  }\n","date":"2020-11-06 05:45:26","endLine":302,"groupId":"9195","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"unwrapWithBufferUnderflow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/88/e4f31a6fdf460bda4a1562a2f06ec9701417ea.src","preCode":"  public void unwrapWithBufferUnderflow() throws Exception {\n    try (final ByteBufferSharing inputSharing = nioSslEngine.shareInputBuffer()) {\n      ByteBuffer wrappedData =\n          ByteBuffer.allocate(inputSharing.getBuffer().capacity());\n      byte[] netBytes = new byte[wrappedData.capacity() / 2];\n      Arrays.fill(netBytes, (byte) 0x1F);\n      wrappedData.put(netBytes);\n      wrappedData.flip();\n\n      \r\n      \r\n      TestSSLEngine testEngine = new TestSSLEngine();\n      testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW, NEED_TASK, 0, 0));\n      spyNioSslEngine.engine = testEngine;\n\n      try (final ByteBufferSharing sharedBuffer = spyNioSslEngine.unwrap(wrappedData)) {\n        ByteBuffer unwrappedBuffer = sharedBuffer.getBuffer();\n        unwrappedBuffer.flip();\n        assertThat(unwrappedBuffer.remaining()).isEqualTo(0);\n      }\n      assertThat(wrappedData.position()).isEqualTo(netBytes.length);\n    }\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/net/NioSslEngineTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"}],"commitId":"9653a0b6e490272fa77d375049f0e9f1cb6c8929","commitMessage":"@@@Revert \"GEODE-8652: NioSslEngine.close() Bypasses Locks (#5666)\"\n\nThis reverts commit 08e9e9673d0ed05555a3d74c6d16e706817cab09.\n","date":"2020-11-06 05:45:26","modifiedFileCount":"9","status":"M","submitter":"Bill Burcham"},{"authorTime":"2020-11-06 09:30:29","codes":[{"authorDate":"2020-11-06 09:30:29","commitOrder":6,"curCode":"  public void wrap() throws Exception {\n    try (final ByteBufferSharing outputSharing = nioSslEngine.shareOutputBuffer()) {\n\n      \r\n      ByteBuffer appData =\n          ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100);\n      byte[] appBytes = new byte[appData.capacity()];\n      Arrays.fill(appBytes, (byte) 0x1F);\n      appData.put(appBytes);\n      appData.flip();\n\n      \r\n      \r\n      TestSSLEngine testEngine = new TestSSLEngine();\n      testEngine.addReturnResult(\n          new SSLEngineResult(OK, NEED_TASK, appData.remaining(), appData.remaining()));\n      spyNioSslEngine.engine = testEngine;\n\n      try (final ByteBufferSharing outputSharing2 = spyNioSslEngine.wrap(appData)) {\n        ByteBuffer wrappedBuffer = outputSharing2.getBuffer();\n\n        verify(spyBufferPool, times(1)).expandWriteBufferIfNeeded(any(BufferPool.BufferType.class),\n            any(ByteBuffer.class), any(Integer.class));\n        appData.flip();\n        assertThat(wrappedBuffer).isEqualTo(appData);\n      }\n      verify(spyNioSslEngine, times(1)).handleBlockingTasks();\n    }\n  }\n","date":"2020-11-06 09:30:29","endLine":220,"groupId":"9193","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"wrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/df/d7b9012b1bcff84ad56505519a39503aa3b1fb.src","preCode":"  public void wrap() throws Exception {\n    \r\n    ByteBuffer appData = ByteBuffer.allocate(nioSslEngine.myNetData.capacity() + 100);\n    byte[] appBytes = new byte[appData.capacity()];\n    Arrays.fill(appBytes, (byte) 0x1F);\n    appData.put(appBytes);\n    appData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(\n        new SSLEngineResult(OK, NEED_TASK, appData.remaining(), appData.remaining()));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer wrappedBuffer = spyNioSslEngine.wrap(appData);\n\n    verify(spyNioSslEngine, times(1)).expandWriteBuffer(any(BufferPool.BufferType.class),\n        any(ByteBuffer.class), any(Integer.class));\n    appData.flip();\n    assertThat(wrappedBuffer).isEqualTo(appData);\n    verify(spyNioSslEngine, times(1)).handleBlockingTasks();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/net/NioSslEngineTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"},{"authorDate":"2020-11-06 09:30:29","commitOrder":6,"curCode":"  public void unwrapWithBufferUnderflow() throws Exception {\n    try (final ByteBufferSharing inputSharing = nioSslEngine.shareInputBuffer()) {\n      ByteBuffer wrappedData =\n          ByteBuffer.allocate(inputSharing.getBuffer().capacity());\n      byte[] netBytes = new byte[wrappedData.capacity() / 2];\n      Arrays.fill(netBytes, (byte) 0x1F);\n      wrappedData.put(netBytes);\n      wrappedData.flip();\n\n      \r\n      \r\n      TestSSLEngine testEngine = new TestSSLEngine();\n      testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW, NEED_TASK, 0, 0));\n      spyNioSslEngine.engine = testEngine;\n\n      try (final ByteBufferSharing sharedBuffer = spyNioSslEngine.unwrap(wrappedData)) {\n        ByteBuffer unwrappedBuffer = sharedBuffer.getBuffer();\n        unwrappedBuffer.flip();\n        assertThat(unwrappedBuffer.remaining()).isEqualTo(0);\n      }\n      assertThat(wrappedData.position()).isEqualTo(netBytes.length);\n    }\n  }\n","date":"2020-11-06 09:30:29","endLine":308,"groupId":"9195","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"unwrapWithBufferUnderflow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/df/d7b9012b1bcff84ad56505519a39503aa3b1fb.src","preCode":"  public void unwrapWithBufferUnderflow() throws Exception {\n    ByteBuffer wrappedData = ByteBuffer.allocate(nioSslEngine.peerAppData.capacity());\n    byte[] netBytes = new byte[wrappedData.capacity() / 2];\n    Arrays.fill(netBytes, (byte) 0x1F);\n    wrappedData.put(netBytes);\n    wrappedData.flip();\n\n    \r\n    TestSSLEngine testEngine = new TestSSLEngine();\n    testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW, NEED_TASK, 0, 0));\n    spyNioSslEngine.engine = testEngine;\n\n    ByteBuffer unwrappedBuffer = spyNioSslEngine.unwrap(wrappedData);\n    unwrappedBuffer.flip();\n    assertThat(unwrappedBuffer.remaining()).isEqualTo(0);\n    assertThat(wrappedData.position()).isEqualTo(netBytes.length);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/net/NioSslEngineTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"}],"commitId":"af267c005a63317cbb8528cdb38eccf6a8747818","commitMessage":"@@@* GEODE-8652: NioSslEngine.close() Bypasses Locks (#5712)\n\n- NioSslEngine.close() proceeds even if readers (or writers) are\n  operating on its ByteBuffers.  allowing Connection.close() to close\n  its socket and proceed.\n\n- NioSslEngine.close() needed a lock only on the output buffer.  so\n  we split what was a single lock into two. Also instead of using\n  synchronized we use a ReentrantLock so we can\n  call tryLock() and time out if needed in NioSslEngine.close().\n\n- Since readers/writers may hold locks on these input/output buffers\n  when NioSslEngine.close() is called a reference count is maintained\n  and the buffers are returned to the pool only when the last user\n  is done.\n\n- To manage the locking and reference counting a new AutoCloseable\n  ByteBufferSharing interface is introduced with a trivial\n  implementation: ByteBufferSharingNoOp and a real implementation:\n  ByteBufferSharingImpl.\n\n- Added a new unit test.  and a new concurrency test for\n  ByteBufferSharingImpl: both ensure that ByteBuffers are returned\n  to the pool exactly once. Added a new DUnit test for the interaction\n  between ByteBufferSharingImpl and NioSslEngine and Connection.\n\nCo-authored-by: Bill Burcham <bill.burcham@gmail.com>\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>\nCo-authored-by: Ernie Burghardt <burghardte@vmware.com>\nCo-authored-by: Dan Smith <upthewaterspout@apache.org>","date":"2020-11-06 09:30:29","modifiedFileCount":"9","status":"M","submitter":"Bill Burcham"},{"authorTime":"2021-04-18 00:12:13","codes":[{"authorDate":"2021-04-18 00:12:13","commitOrder":7,"curCode":"  public void wrap() throws Exception {\n    try (final ByteBufferSharing outputSharing =\n        nioSslEngine.getOutputBufferVendorForTestingOnly().open()) {\n\n      \r\n      ByteBuffer appData =\n          ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100);\n      byte[] appBytes = new byte[appData.capacity()];\n      Arrays.fill(appBytes, (byte) 0x1F);\n      appData.put(appBytes);\n      appData.flip();\n\n      \r\n      \r\n      TestSSLEngine testEngine = new TestSSLEngine();\n      testEngine.addReturnResult(\n          new SSLEngineResult(OK, NEED_TASK, appData.remaining(), appData.remaining()));\n      spyNioSslEngine.engine = testEngine;\n\n      try (final ByteBufferSharing outputSharing2 = spyNioSslEngine.wrap(appData)) {\n        ByteBuffer wrappedBuffer = outputSharing2.getBuffer();\n\n        verify(spyBufferPool, times(1)).expandWriteBufferIfNeeded(any(BufferPool.BufferType.class),\n            any(ByteBuffer.class), any(Integer.class));\n        appData.flip();\n        assertThat(wrappedBuffer).isEqualTo(appData);\n      }\n      verify(spyNioSslEngine, times(1)).handleBlockingTasks();\n    }\n  }\n","date":"2021-04-29 01:25:35","endLine":222,"groupId":"102558","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"wrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d6/b9aa64850c9bae417a4ecf837e567ba5e51df9.src","preCode":"  public void wrap() throws Exception {\n    try (final ByteBufferSharing outputSharing = nioSslEngine.shareOutputBuffer()) {\n\n      \r\n      ByteBuffer appData =\n          ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100);\n      byte[] appBytes = new byte[appData.capacity()];\n      Arrays.fill(appBytes, (byte) 0x1F);\n      appData.put(appBytes);\n      appData.flip();\n\n      \r\n      \r\n      TestSSLEngine testEngine = new TestSSLEngine();\n      testEngine.addReturnResult(\n          new SSLEngineResult(OK, NEED_TASK, appData.remaining(), appData.remaining()));\n      spyNioSslEngine.engine = testEngine;\n\n      try (final ByteBufferSharing outputSharing2 = spyNioSslEngine.wrap(appData)) {\n        ByteBuffer wrappedBuffer = outputSharing2.getBuffer();\n\n        verify(spyBufferPool, times(1)).expandWriteBufferIfNeeded(any(BufferPool.BufferType.class),\n            any(ByteBuffer.class), any(Integer.class));\n        appData.flip();\n        assertThat(wrappedBuffer).isEqualTo(appData);\n      }\n      verify(spyNioSslEngine, times(1)).handleBlockingTasks();\n    }\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/net/NioSslEngineTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"},{"authorDate":"2021-04-18 00:12:13","commitOrder":7,"curCode":"  public void unwrapWithBufferUnderflow() throws Exception {\n    try (final ByteBufferSharing inputSharing =\n        nioSslEngine.getInputBufferVendorForTestingOnly().open()) {\n      ByteBuffer wrappedData =\n          ByteBuffer.allocate(inputSharing.getBuffer().capacity());\n      byte[] netBytes = new byte[wrappedData.capacity() / 2];\n      Arrays.fill(netBytes, (byte) 0x1F);\n      wrappedData.put(netBytes);\n      wrappedData.flip();\n\n      \r\n      \r\n      TestSSLEngine testEngine = new TestSSLEngine();\n      testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW, NEED_TASK, 0, 0));\n      spyNioSslEngine.engine = testEngine;\n\n      try (final ByteBufferSharing sharedBuffer = spyNioSslEngine.unwrap(wrappedData)) {\n        ByteBuffer unwrappedBuffer = sharedBuffer.getBuffer();\n        unwrappedBuffer.flip();\n        assertThat(unwrappedBuffer.remaining()).isEqualTo(0);\n      }\n      assertThat(wrappedData.position()).isEqualTo(netBytes.length);\n    }\n  }\n","date":"2021-04-29 01:25:35","endLine":313,"groupId":"102558","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"unwrapWithBufferUnderflow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d6/b9aa64850c9bae417a4ecf837e567ba5e51df9.src","preCode":"  public void unwrapWithBufferUnderflow() throws Exception {\n    try (final ByteBufferSharing inputSharing = nioSslEngine.shareInputBuffer()) {\n      ByteBuffer wrappedData =\n          ByteBuffer.allocate(inputSharing.getBuffer().capacity());\n      byte[] netBytes = new byte[wrappedData.capacity() / 2];\n      Arrays.fill(netBytes, (byte) 0x1F);\n      wrappedData.put(netBytes);\n      wrappedData.flip();\n\n      \r\n      \r\n      TestSSLEngine testEngine = new TestSSLEngine();\n      testEngine.addReturnResult(new SSLEngineResult(BUFFER_UNDERFLOW, NEED_TASK, 0, 0));\n      spyNioSslEngine.engine = testEngine;\n\n      try (final ByteBufferSharing sharedBuffer = spyNioSslEngine.unwrap(wrappedData)) {\n        ByteBuffer unwrappedBuffer = sharedBuffer.getBuffer();\n        unwrappedBuffer.flip();\n        assertThat(unwrappedBuffer.remaining()).isEqualTo(0);\n      }\n      assertThat(wrappedData.position()).isEqualTo(netBytes.length);\n    }\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/net/NioSslEngineTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"}],"commitId":"9d0d4d1d33794d0f6a21c3bcae71e965cbbd7fbd","commitMessage":"@@@GEODE-9141: (2 of 2) Handle in-buffer concurrency\n* Connection uses a ByteBufferVendor to mediate access to inputBuffer\n* Prevent return to pool before socket closer is finished\n","date":"2021-04-29 01:25:35","modifiedFileCount":"12","status":"M","submitter":"Bill Burcham"}]
