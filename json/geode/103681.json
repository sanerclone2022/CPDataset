[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    \r\n\n    \r\n\n    setCacheObserverCallBack();\n\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      Wait.waitForCriterion(ev, 30 * 1000, 200, true);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n\n    unSetCacheObserverCallBack();\n\n  }\n","date":"2018-07-18 03:54:18","endLine":178,"groupId":"38615","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"populateSecond10kto20kwrites","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e1/469172fb27005c3af70ac7f273bf836b1935bb.src","preCode":"  public void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    \r\n\n    \r\n\n    setCacheObserverCallBack();\n\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      Wait.waitForCriterion(ev, 30 * 1000, 200, true);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n\n    unSetCacheObserverCallBack();\n\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionOverflowSyncRollingOpLogJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  private void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    setCacheObserverCallBack();\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    if (debug)\n      System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n    \r\n    \r\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      Wait.waitForCriterion(ev, 30 * 1000, 200, true);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    if (debug)\n      System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    if (debug)\n      System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    if (debug)\n      System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n    unSetCacheObserverCallBack();\n  }\n","date":"2018-07-18 03:54:18","endLine":186,"groupId":"34934","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"populateSecond10kto20kwrites","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/96/e228600bc52684f789ffab5f49c7a1edbf603d.src","preCode":"  private void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    setCacheObserverCallBack();\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    if (debug)\n      System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n    \r\n    \r\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      Wait.waitForCriterion(ev, 30 * 1000, 200, true);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    if (debug)\n      System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    if (debug)\n      System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    if (debug)\n      System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n    unSetCacheObserverCallBack();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionOverflowAsyncRollingOpLogJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-10-06 04:56:13","codes":[{"authorDate":"2018-10-06 04:56:13","commitOrder":2,"curCode":"  public void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    \r\n\n    \r\n\n    setCacheObserverCallBack();\n\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n\n    unSetCacheObserverCallBack();\n\n  }\n","date":"2018-10-19 08:01:02","endLine":178,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"populateSecond10kto20kwrites","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3e/c0b18ef46d69f5eea35dcb3d10e59915a966f5.src","preCode":"  public void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    \r\n\n    \r\n\n    setCacheObserverCallBack();\n\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      Wait.waitForCriterion(ev, 30 * 1000, 200, true);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n\n    unSetCacheObserverCallBack();\n\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionOverflowSyncRollingOpLogJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2018-10-06 04:56:13","commitOrder":2,"curCode":"  private void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    setCacheObserverCallBack();\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    if (debug)\n      System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n    \r\n    \r\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    if (debug)\n      System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    if (debug)\n      System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    if (debug)\n      System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n    unSetCacheObserverCallBack();\n  }\n","date":"2018-10-19 08:01:02","endLine":186,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"populateSecond10kto20kwrites","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/bd/737cb9fb6650e58838e3cbc1c05fe737cd8acb.src","preCode":"  private void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    setCacheObserverCallBack();\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    if (debug)\n      System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n    \r\n    \r\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      Wait.waitForCriterion(ev, 30 * 1000, 200, true);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    if (debug)\n      System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    if (debug)\n      System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    if (debug)\n      System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n    unSetCacheObserverCallBack();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionOverflowAsyncRollingOpLogJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"8fa6ef6205938767d0106810daca1f91ee8bb3a8","commitMessage":"@@@GEODE-5424: Replacing calls to waitForCriterion with Awaitility\n\nReplacing all of the calls to waitForCriterion with awaitility instead. \nto use a standard timeout.\n","date":"2018-10-19 08:01:02","modifiedFileCount":"132","status":"M","submitter":"Dan Smith"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    \r\n\n    \r\n\n    setCacheObserverCallBack();\n\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      @Override\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        @Override\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        @Override\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n\n    unSetCacheObserverCallBack();\n\n  }\n","date":"2019-01-12 07:53:54","endLine":181,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"populateSecond10kto20kwrites","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a6/a6c18dc28df820528227612001a74874d5838d.src","preCode":"  public void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    \r\n\n    \r\n\n    setCacheObserverCallBack();\n\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n\n    unSetCacheObserverCallBack();\n\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionOverflowSyncRollingOpLogJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  private void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    setCacheObserverCallBack();\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      @Override\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    if (debug)\n      System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n    \r\n    \r\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        @Override\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        @Override\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    if (debug)\n      System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    if (debug)\n      System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    if (debug)\n      System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n    unSetCacheObserverCallBack();\n  }\n","date":"2019-01-12 07:53:54","endLine":189,"groupId":"4051","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"populateSecond10kto20kwrites","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/dd/87f17f1933d392bd9c2f1f01dfb67b3e13f9d7.src","preCode":"  private void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    setCacheObserverCallBack();\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    if (debug)\n      System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n    \r\n    \r\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    if (debug)\n      System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    if (debug)\n      System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    if (debug)\n      System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n    unSetCacheObserverCallBack();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionOverflowAsyncRollingOpLogJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2021-06-04 00:32:09","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":4,"curCode":"  public void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    \r\n\n    \r\n\n    setCacheObserverCallBack();\n\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      @Override\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        @Override\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        @Override\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n\n    unSetCacheObserverCallBack();\n\n  }\n","date":"2019-01-12 07:53:54","endLine":181,"groupId":"103681","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"populateSecond10kto20kwrites","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a6/a6c18dc28df820528227612001a74874d5838d.src","preCode":"  public void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    \r\n\n    \r\n\n    setCacheObserverCallBack();\n\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      @Override\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        @Override\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        @Override\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n\n    unSetCacheObserverCallBack();\n\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionOverflowSyncRollingOpLogJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"N"},{"authorDate":"2021-06-04 00:32:09","commitOrder":4,"curCode":"  private void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    setCacheObserverCallBack();\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      @Override\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    if (debug) {\n      System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n    }\n    \r\n    \r\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        @Override\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        @Override\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    if (debug) {\n      System.out.println(\" done with getting 0-9999 entries from H-tree\");\n    }\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    if (debug) {\n      System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n    }\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    if (debug) {\n      System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n    }\n    unSetCacheObserverCallBack();\n  }\n","date":"2021-06-04 00:32:09","endLine":195,"groupId":"103681","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"populateSecond10kto20kwrites","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/85/61ddc91610223715de77f846acb46b3028481a.src","preCode":"  private void populateSecond10kto20kwrites() {\n    afterHavingCompacted = false;\n    setCacheObserverCallBack();\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      @Override\n      public void afterHavingCompacted() {\n        afterHavingCompacted = true;\n      }\n    });\n\n    \r\n    final byte[] value = new byte[ENTRY_SIZE];\n    Arrays.fill(value, (byte) 77);\n\n    for (int i = 10000; i < 20000; i++) {\n      region.put(\"\" + i, value);\n    }\n    \r\n    long startTimeGet2 = System.currentTimeMillis();\n    for (int i = 10000; i < 20000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet2 = System.currentTimeMillis();\n    if (debug)\n      System.out.println(\" done with getting 10000-19999 which will fault in from second oplog\");\n    \r\n    \r\n    if (((LocalRegion) region).getDiskRegion().isBackup()) {\n      WaitCriterion ev = new WaitCriterion() {\n        @Override\n        public boolean done() {\n          return afterHavingCompacted;\n        }\n\n        @Override\n        public String description() {\n          return null;\n        }\n      };\n      GeodeAwaitility.await().untilAsserted(ev);\n    }\n\n    \r\n    long startTimeGet1 = System.currentTimeMillis();\n    for (int i = 0; i < 10000; i++) {\n      region.get(\"\" + i);\n    }\n    long endTimeGet1 = System.currentTimeMillis();\n    if (debug)\n      System.out.println(\" done with getting 0-9999 entries from H-tree\");\n\n    region.close(); \r\n\n    \r\n    float etGet1 = endTimeGet1 - startTimeGet1;\n    float etSecsGet1 = etGet1 / 1000f;\n    float opPerSecGet1 = etSecsGet1 == 0 ? 0 : (10000 / (etGet1 / 1000f));\n    float bytesPerSecGet1 = etSecsGet1 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet1 / 1000f));\n\n    String statsGet1 =\n        \"etGet=\" + etGet1 + \"ms gets/sec=\" + opPerSecGet1 + \" bytes/sec=\" + bytesPerSecGet1;\n    log.info(statsGet1);\n    if (debug)\n      System.out.println(\"Perf Stats of get which is fauting in from H-tree  :\" + statsGet1);\n\n    \r\n    float etGet2 = endTimeGet2 - startTimeGet2;\n    float etSecsGet2 = etGet2 / 1000f;\n    float opPerSecGet2 = etSecsGet2 == 0 ? 0 : (10000 / (etGet2 / 1000f));\n    float bytesPerSecGet2 = etSecsGet2 == 0 ? 0 : ((10000 * ENTRY_SIZE) / (etGet2 / 1000f));\n\n    String statsGet2 =\n        \"etGet=\" + etGet2 + \"ms gets/sec=\" + opPerSecGet2 + \" bytes/sec=\" + bytesPerSecGet2;\n    log.info(statsGet2);\n    if (debug)\n      System.out.println(\"Perf Stats of get which is fauting in from Second OpLog  :\" + statsGet2);\n    unSetCacheObserverCallBack();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/diskPerf/DiskRegionOverflowAsyncRollingOpLogJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"2879573ffb04e9e029e14ca37d8a064268cc8f44","commitMessage":"@@@GEODE-7864: Always use curly braces for control flow statements (#6523)\n\nAuthored-by: Donal Evans <doevans@vmware.com>","date":"2021-06-04 00:32:09","modifiedFileCount":"640","status":"M","submitter":"Donal Evans"}]
