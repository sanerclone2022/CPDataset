[{"authorTime":"2017-11-17 05:02:51","codes":[{"authorDate":"2017-11-17 05:02:51","commitOrder":1,"curCode":"  public void setUp() throws Exception {\n    dm = mock(DM.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    flushToDiskFactory = mock(FlushToDiskFactory.class);\n    flushToDisk = mock(FlushToDisk.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(flushToDiskFactory.createFlushToDisk(eq(cache))).thenReturn(flushToDisk);\n    when(flushToDiskFactory.createResponse(eq(sender))).thenReturn(mock(FlushToDiskResponse.class));\n\n    flushToDiskRequest = new FlushToDiskRequest(sender, recipients, msgId, flushToDiskFactory);\n  }\n","date":"2017-11-17 05:02:51","endLine":62,"groupId":"49375","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/11/3bb70d506a6de8336c9631e6407dbd8f73652c.src","preCode":"  public void setUp() throws Exception {\n    dm = mock(DM.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    flushToDiskFactory = mock(FlushToDiskFactory.class);\n    flushToDisk = mock(FlushToDisk.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(flushToDiskFactory.createFlushToDisk(eq(cache))).thenReturn(flushToDisk);\n    when(flushToDiskFactory.createResponse(eq(sender))).thenReturn(mock(FlushToDiskResponse.class));\n\n    flushToDiskRequest = new FlushToDiskRequest(sender, recipients, msgId, flushToDiskFactory);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/backup/FlushToDiskRequestTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2017-11-17 05:02:51","commitOrder":1,"curCode":"  public void setUp() throws Exception {\n    dm = mock(DM.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    prepareBackupFactory = mock(PrepareBackupFactory.class);\n    prepareBackup = mock(PrepareBackup.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n    persistentIds = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(prepareBackupFactory.createPrepareBackup(eq(sender), eq(cache))).thenReturn(prepareBackup);\n    when(prepareBackupFactory.createBackupResponse(eq(sender), eq(persistentIds)))\n        .thenReturn(mock(BackupResponse.class));\n    when(prepareBackup.run()).thenReturn(persistentIds);\n\n    prepareBackupRequest =\n        new PrepareBackupRequest(sender, recipients, msgId, prepareBackupFactory);\n  }\n","date":"2017-11-17 05:02:51","endLine":70,"groupId":"48002","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f1/700bc1857728f7ffbffc4fee6f09f69d6d7481.src","preCode":"  public void setUp() throws Exception {\n    dm = mock(DM.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    prepareBackupFactory = mock(PrepareBackupFactory.class);\n    prepareBackup = mock(PrepareBackup.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n    persistentIds = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(prepareBackupFactory.createPrepareBackup(eq(sender), eq(cache))).thenReturn(prepareBackup);\n    when(prepareBackupFactory.createBackupResponse(eq(sender), eq(persistentIds)))\n        .thenReturn(mock(BackupResponse.class));\n    when(prepareBackup.run()).thenReturn(persistentIds);\n\n    prepareBackupRequest =\n        new PrepareBackupRequest(sender, recipients, msgId, prepareBackupFactory);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/backup/PrepareBackupRequestTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"}],"commitId":"d59c73030b0d5123158829e8a32acfe28f6b1a9d","commitMessage":"@@@Merge pull request #1053 from apache/feature/GEODE-3940\n\nFeature/geode 3940","date":"2017-11-17 05:02:51","modifiedFileCount":"111","status":"B","submitter":"Darrel Schneider"},{"authorTime":"2018-01-05 03:58:16","codes":[{"authorDate":"2018-01-05 03:58:16","commitOrder":2,"curCode":"  public void setUp() throws Exception {\n    dm = mock(DistributionManager.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    flushToDiskFactory = mock(FlushToDiskFactory.class);\n    flushToDisk = mock(FlushToDisk.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(flushToDiskFactory.createFlushToDisk(eq(cache))).thenReturn(flushToDisk);\n    when(flushToDiskFactory.createResponse(eq(sender))).thenReturn(mock(FlushToDiskResponse.class));\n\n    flushToDiskRequest = new FlushToDiskRequest(sender, recipients, msgId, flushToDiskFactory);\n  }\n","date":"2018-01-06 05:02:50","endLine":66,"groupId":"49375","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c5/ee1ba22f9f68275ff564842225ea33db004254.src","preCode":"  public void setUp() throws Exception {\n    dm = mock(DM.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    flushToDiskFactory = mock(FlushToDiskFactory.class);\n    flushToDisk = mock(FlushToDisk.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(flushToDiskFactory.createFlushToDisk(eq(cache))).thenReturn(flushToDisk);\n    when(flushToDiskFactory.createResponse(eq(sender))).thenReturn(mock(FlushToDiskResponse.class));\n\n    flushToDiskRequest = new FlushToDiskRequest(sender, recipients, msgId, flushToDiskFactory);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/backup/FlushToDiskRequestTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2018-01-05 03:58:16","commitOrder":2,"curCode":"  public void setUp() throws Exception {\n    dm = mock(DistributionManager.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    prepareBackupFactory = mock(PrepareBackupFactory.class);\n    prepareBackup = mock(PrepareBackup.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n    persistentIds = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(prepareBackupFactory.createPrepareBackup(eq(sender), eq(cache))).thenReturn(prepareBackup);\n    when(prepareBackupFactory.createBackupResponse(eq(sender), eq(persistentIds)))\n        .thenReturn(mock(BackupResponse.class));\n    when(prepareBackup.run()).thenReturn(persistentIds);\n\n    prepareBackupRequest =\n        new PrepareBackupRequest(sender, recipients, msgId, prepareBackupFactory);\n  }\n","date":"2018-01-06 05:02:50","endLine":74,"groupId":"48002","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ab/b784f74c108267192d9a1cdc5d7fa4e379a8c1.src","preCode":"  public void setUp() throws Exception {\n    dm = mock(DM.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    prepareBackupFactory = mock(PrepareBackupFactory.class);\n    prepareBackup = mock(PrepareBackup.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n    persistentIds = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(prepareBackupFactory.createPrepareBackup(eq(sender), eq(cache))).thenReturn(prepareBackup);\n    when(prepareBackupFactory.createBackupResponse(eq(sender), eq(persistentIds)))\n        .thenReturn(mock(BackupResponse.class));\n    when(prepareBackup.run()).thenReturn(persistentIds);\n\n    prepareBackupRequest =\n        new PrepareBackupRequest(sender, recipients, msgId, prepareBackupFactory);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/backup/PrepareBackupRequestTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"75c04138a42bed3edda1f6391b71c45280fe3ef7","commitMessage":"@@@GEODE-3965: rename DistributionManager classes\n\n* DistributionManager -> ClusterDistributionManager\n* DM -> DistributionManager\n* LonerDistributionManager remains LonerDistributionManager\n","date":"2018-01-06 05:02:50","modifiedFileCount":"492","status":"M","submitter":"Kirk Lund"},{"authorTime":"2018-02-03 01:20:18","codes":[{"authorDate":"2018-01-05 03:58:16","commitOrder":3,"curCode":"  public void setUp() throws Exception {\n    dm = mock(DistributionManager.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    flushToDiskFactory = mock(FlushToDiskFactory.class);\n    flushToDisk = mock(FlushToDisk.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(flushToDiskFactory.createFlushToDisk(eq(cache))).thenReturn(flushToDisk);\n    when(flushToDiskFactory.createResponse(eq(sender))).thenReturn(mock(FlushToDiskResponse.class));\n\n    flushToDiskRequest = new FlushToDiskRequest(sender, recipients, msgId, flushToDiskFactory);\n  }\n","date":"2018-01-06 05:02:50","endLine":66,"groupId":"49375","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c5/ee1ba22f9f68275ff564842225ea33db004254.src","preCode":"  public void setUp() throws Exception {\n    dm = mock(DistributionManager.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    flushToDiskFactory = mock(FlushToDiskFactory.class);\n    flushToDisk = mock(FlushToDisk.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(flushToDiskFactory.createFlushToDisk(eq(cache))).thenReturn(flushToDisk);\n    when(flushToDiskFactory.createResponse(eq(sender))).thenReturn(mock(FlushToDiskResponse.class));\n\n    flushToDiskRequest = new FlushToDiskRequest(sender, recipients, msgId, flushToDiskFactory);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/backup/FlushToDiskRequestTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2018-02-03 01:20:18","commitOrder":3,"curCode":"  public void setUp() throws Exception {\n    dm = mock(DistributionManager.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    prepareBackupFactory = mock(PrepareBackupFactory.class);\n    prepareBackup = mock(PrepareBackup.class);\n    targetDir = mock(File.class);\n    baselineDir = mock(File.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n    persistentIds = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(prepareBackupFactory.createPrepareBackup(eq(sender), eq(cache), eq(targetDir),\n        eq(baselineDir))).thenReturn(prepareBackup);\n    when(prepareBackupFactory.createBackupResponse(eq(sender), eq(persistentIds)))\n        .thenReturn(mock(BackupResponse.class));\n    when(prepareBackup.run()).thenReturn(persistentIds);\n\n    prepareBackupRequest = new PrepareBackupRequest(sender, recipients, msgId, prepareBackupFactory,\n        targetDir, baselineDir);\n  }\n","date":"2018-02-03 01:20:18","endLine":80,"groupId":"48002","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b8/cbcc01323adbba6fc19be83b07d77c1fbe1331.src","preCode":"  public void setUp() throws Exception {\n    dm = mock(DistributionManager.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    prepareBackupFactory = mock(PrepareBackupFactory.class);\n    prepareBackup = mock(PrepareBackup.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n    persistentIds = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(prepareBackupFactory.createPrepareBackup(eq(sender), eq(cache))).thenReturn(prepareBackup);\n    when(prepareBackupFactory.createBackupResponse(eq(sender), eq(persistentIds)))\n        .thenReturn(mock(BackupResponse.class));\n    when(prepareBackup.run()).thenReturn(persistentIds);\n\n    prepareBackupRequest =\n        new PrepareBackupRequest(sender, recipients, msgId, prepareBackupFactory);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/backup/PrepareBackupRequestTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"94049aa1b3046b6143cb155c219a18e628a6282a","commitMessage":"@@@GEODE-4405: Move backup target and base line dirs to prepare backup message (#1377)\n\n","date":"2018-02-03 01:20:18","modifiedFileCount":"22","status":"M","submitter":"Nick Reich"},{"authorTime":"2018-03-01 01:06:46","codes":[{"authorDate":"2018-01-05 03:58:16","commitOrder":4,"curCode":"  public void setUp() throws Exception {\n    dm = mock(DistributionManager.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    flushToDiskFactory = mock(FlushToDiskFactory.class);\n    flushToDisk = mock(FlushToDisk.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(flushToDiskFactory.createFlushToDisk(eq(cache))).thenReturn(flushToDisk);\n    when(flushToDiskFactory.createResponse(eq(sender))).thenReturn(mock(FlushToDiskResponse.class));\n\n    flushToDiskRequest = new FlushToDiskRequest(sender, recipients, msgId, flushToDiskFactory);\n  }\n","date":"2018-01-06 05:02:50","endLine":66,"groupId":"49375","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c5/ee1ba22f9f68275ff564842225ea33db004254.src","preCode":"  public void setUp() throws Exception {\n    dm = mock(DistributionManager.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    flushToDiskFactory = mock(FlushToDiskFactory.class);\n    flushToDisk = mock(FlushToDisk.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(flushToDiskFactory.createFlushToDisk(eq(cache))).thenReturn(flushToDisk);\n    when(flushToDiskFactory.createResponse(eq(sender))).thenReturn(mock(FlushToDiskResponse.class));\n\n    flushToDiskRequest = new FlushToDiskRequest(sender, recipients, msgId, flushToDiskFactory);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/backup/FlushToDiskRequestTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2018-03-01 01:06:46","commitOrder":4,"curCode":"  public void setUp() throws Exception {\n    dm = mock(DistributionManager.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    prepareBackupFactory = mock(PrepareBackupFactory.class);\n    prepareBackup = mock(PrepareBackup.class);\n    targetDir = mock(File.class);\n    baselineDir = mock(File.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n    persistentIds = new HashSet<>();\n\n    backupProperties =\n        BackupUtil.createBackupProperties(targetDir.toString(), baselineDir.toString());\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(prepareBackupFactory.createPrepareBackup(eq(sender), eq(cache), eq(backupProperties)))\n        .thenReturn(prepareBackup);\n    when(prepareBackupFactory.createBackupResponse(eq(sender), eq(persistentIds)))\n        .thenReturn(mock(BackupResponse.class));\n    when(prepareBackup.run()).thenReturn(persistentIds);\n\n    prepareBackupRequest =\n        new PrepareBackupRequest(sender, recipients, msgId, prepareBackupFactory, backupProperties);\n  }\n","date":"2018-03-01 01:06:46","endLine":85,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/cb/26a8cdef4cde38431b3a122468a041c03a5100.src","preCode":"  public void setUp() throws Exception {\n    dm = mock(DistributionManager.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    prepareBackupFactory = mock(PrepareBackupFactory.class);\n    prepareBackup = mock(PrepareBackup.class);\n    targetDir = mock(File.class);\n    baselineDir = mock(File.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n    persistentIds = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(prepareBackupFactory.createPrepareBackup(eq(sender), eq(cache), eq(targetDir),\n        eq(baselineDir))).thenReturn(prepareBackup);\n    when(prepareBackupFactory.createBackupResponse(eq(sender), eq(persistentIds)))\n        .thenReturn(mock(BackupResponse.class));\n    when(prepareBackup.run()).thenReturn(persistentIds);\n\n    prepareBackupRequest = new PrepareBackupRequest(sender, recipients, msgId, prepareBackupFactory,\n        targetDir, baselineDir);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/backup/PrepareBackupRequestTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"f4433fcc6ce2d28568b7bf08b9b936ad08d3d1bf","commitMessage":"@@@GEODE-4404: Move BackupWriter creation (#1521)\n\n  * to facilitate future creation of backup plugins.  the BackupWriter is created\n    using generic information passed from gfsh\n","date":"2018-03-01 01:06:46","modifiedFileCount":"25","status":"M","submitter":"Nick Reich"},{"authorTime":"2018-07-03 01:40:54","codes":[{"authorDate":"2018-01-05 03:58:16","commitOrder":5,"curCode":"  public void setUp() throws Exception {\n    dm = mock(DistributionManager.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    flushToDiskFactory = mock(FlushToDiskFactory.class);\n    flushToDisk = mock(FlushToDisk.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(flushToDiskFactory.createFlushToDisk(eq(cache))).thenReturn(flushToDisk);\n    when(flushToDiskFactory.createResponse(eq(sender))).thenReturn(mock(FlushToDiskResponse.class));\n\n    flushToDiskRequest = new FlushToDiskRequest(sender, recipients, msgId, flushToDiskFactory);\n  }\n","date":"2018-01-06 05:02:50","endLine":66,"groupId":"101269","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c5/ee1ba22f9f68275ff564842225ea33db004254.src","preCode":"  public void setUp() throws Exception {\n    dm = mock(DistributionManager.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    flushToDiskFactory = mock(FlushToDiskFactory.class);\n    flushToDisk = mock(FlushToDisk.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(flushToDiskFactory.createFlushToDisk(eq(cache))).thenReturn(flushToDisk);\n    when(flushToDiskFactory.createResponse(eq(sender))).thenReturn(mock(FlushToDiskResponse.class));\n\n    flushToDiskRequest = new FlushToDiskRequest(sender, recipients, msgId, flushToDiskFactory);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/backup/FlushToDiskRequestTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2018-07-03 01:40:54","commitOrder":5,"curCode":"  public void setUp() throws Exception {\n    dm = mock(DistributionManager.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    prepareBackupFactory = mock(PrepareBackupFactory.class);\n    prepareBackup = mock(PrepareBackup.class);\n    targetDir = mock(File.class);\n    baselineDir = mock(File.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n    persistentIds = new HashSet<>();\n\n    backupProperties = new BackupConfigFactory().withTargetDirPath(targetDir.toString())\n        .withBaselineDirPath(baselineDir.toString()).createBackupProperties();\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(prepareBackupFactory.createPrepareBackup(eq(sender), eq(cache), eq(backupProperties)))\n        .thenReturn(prepareBackup);\n    when(prepareBackupFactory.createBackupResponse(eq(sender), eq(persistentIds)))\n        .thenReturn(mock(BackupResponse.class));\n    when(prepareBackup.run()).thenReturn(persistentIds);\n\n    prepareBackupRequest =\n        new PrepareBackupRequest(sender, recipients, msgId, prepareBackupFactory, backupProperties);\n  }\n","date":"2018-07-06 07:29:03","endLine":85,"groupId":"101269","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3b/b7cec4c77d084d1a7908311e88cd1c04ecd256.src","preCode":"  public void setUp() throws Exception {\n    dm = mock(DistributionManager.class);\n    sender = mock(InternalDistributedMember.class);\n    cache = mock(InternalCache.class);\n    prepareBackupFactory = mock(PrepareBackupFactory.class);\n    prepareBackup = mock(PrepareBackup.class);\n    targetDir = mock(File.class);\n    baselineDir = mock(File.class);\n\n    msgId = 42;\n    recipients = new HashSet<>();\n    persistentIds = new HashSet<>();\n\n    backupProperties =\n        BackupUtil.createBackupProperties(targetDir.toString(), baselineDir.toString());\n\n    when(dm.getCache()).thenReturn(cache);\n    when(dm.getDistributionManagerId()).thenReturn(sender);\n    when(prepareBackupFactory.createPrepareBackup(eq(sender), eq(cache), eq(backupProperties)))\n        .thenReturn(prepareBackup);\n    when(prepareBackupFactory.createBackupResponse(eq(sender), eq(persistentIds)))\n        .thenReturn(mock(BackupResponse.class));\n    when(prepareBackup.run()).thenReturn(persistentIds);\n\n    prepareBackupRequest =\n        new PrepareBackupRequest(sender, recipients, msgId, prepareBackupFactory, backupProperties);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/backup/PrepareBackupRequestTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"bb85e7c32a9cba9717fa22907997ca3c3bdab28a","commitMessage":"@@@GEODE-5355: Remove BackupUtil and BackupDataStoreHelper\n\n* Rename *Operation classes to *Step\n* Introduce new BackupOperation as internal API for launching backup\n","date":"2018-07-06 07:29:03","modifiedFileCount":"13","status":"M","submitter":"Kirk Lund"}]
