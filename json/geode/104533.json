[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testStatsForRangeIndexBeforeRegionCreation() throws Exception {\n    \r\n    region.clear();\n    assertEquals(0, region.size());\n    Position.cnt = 0;\n\n    keyIndex1 = (IndexProtocol) qs.createIndex(\"multiKeyIndex4\", IndexType.FUNCTIONAL, \"pos.secId\",\n        \"/portfolio p, p.positions.values pos\");\n\n    \r\n    for (int i = 0; i < 100; i++) {\n      region.put(Integer.toString(i), new Portfolio(i, i));\n    }\n\n    assertTrue(keyIndex1 instanceof RangeIndex);\n\n    IndexStatistics keyIndex1Stats = keyIndex1.getStatistics();\n\n    \r\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(200, keyIndex1Stats.getNumberOfValues());\n    assertEquals(200, keyIndex1Stats.getNumUpdates());\n\n    for (int i = 0; i < 100; i++) {\n      region.put(Integer.toString(i), new Portfolio(i, i));\n    }\n\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(200, keyIndex1Stats.getNumberOfValues());\n    assertEquals(400, keyIndex1Stats.getNumUpdates());\n\n    \r\n    String queryStr = \"select * from /portfolio p, p.positions.values pos where pos.secId = 'YHOO'\";\n    Query query = qs.newQuery(queryStr);\n\n    for (int i = 0; i < 50; i++) {\n      query.execute();\n    }\n\n    assertEquals(50, keyIndex1Stats.getTotalUses());\n\n    \r\n    for (int i = 0; i < 50; i++) {\n      region.invalidate(Integer.toString(i));\n    }\n\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(450, keyIndex1Stats.getNumUpdates());\n\n    \r\n    for (int i = 0; i < 50; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(450, keyIndex1Stats.getNumUpdates());\n\n    \r\n    for (int i = 50; i < 100; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(500, keyIndex1Stats.getNumUpdates());\n\n    assertEquals(0, keyIndex1Stats.getNumberOfKeys());\n\n    qs.removeIndex(keyIndex1);\n  }\n","date":"2018-07-18 03:54:18","endLine":551,"groupId":"39177","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStatsForRangeIndexBeforeRegionCreation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d8/c65522e784f76fce9aa7817a34482b139020a3.src","preCode":"  public void testStatsForRangeIndexBeforeRegionCreation() throws Exception {\n    \r\n    region.clear();\n    assertEquals(0, region.size());\n    Position.cnt = 0;\n\n    keyIndex1 = (IndexProtocol) qs.createIndex(\"multiKeyIndex4\", IndexType.FUNCTIONAL, \"pos.secId\",\n        \"/portfolio p, p.positions.values pos\");\n\n    \r\n    for (int i = 0; i < 100; i++) {\n      region.put(Integer.toString(i), new Portfolio(i, i));\n    }\n\n    assertTrue(keyIndex1 instanceof RangeIndex);\n\n    IndexStatistics keyIndex1Stats = keyIndex1.getStatistics();\n\n    \r\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(200, keyIndex1Stats.getNumberOfValues());\n    assertEquals(200, keyIndex1Stats.getNumUpdates());\n\n    for (int i = 0; i < 100; i++) {\n      region.put(Integer.toString(i), new Portfolio(i, i));\n    }\n\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(200, keyIndex1Stats.getNumberOfValues());\n    assertEquals(400, keyIndex1Stats.getNumUpdates());\n\n    \r\n    String queryStr = \"select * from /portfolio p, p.positions.values pos where pos.secId = 'YHOO'\";\n    Query query = qs.newQuery(queryStr);\n\n    for (int i = 0; i < 50; i++) {\n      query.execute();\n    }\n\n    assertEquals(50, keyIndex1Stats.getTotalUses());\n\n    \r\n    for (int i = 0; i < 50; i++) {\n      region.invalidate(Integer.toString(i));\n    }\n\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(450, keyIndex1Stats.getNumUpdates());\n\n    \r\n    for (int i = 0; i < 50; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(450, keyIndex1Stats.getNumUpdates());\n\n    \r\n    for (int i = 50; i < 100; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(500, keyIndex1Stats.getNumUpdates());\n\n    assertEquals(0, keyIndex1Stats.getNumberOfKeys());\n\n    qs.removeIndex(keyIndex1);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexStatisticsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":482,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testStatsForCompactRangeIndex() throws Exception {\n    createAndPopulateRegion();\n    keyIndex2 =\n        (IndexProtocol) qs.createIndex(\"multiKeyIndex2\", IndexType.FUNCTIONAL, \"ID\", \"/portfolio \");\n\n    assertTrue(keyIndex2 instanceof PartitionedIndex);\n\n    IndexStatistics keyIndex1Stats = keyIndex2.getStatistics();\n    assertEquals(89, keyIndex1Stats.getNumberOfBucketIndexes());\n\n    \r\n    assertEquals(100, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(100, keyIndex1Stats.getNumUpdates());\n\n    for (int i = 0; i < 100; i++) {\n      region.put(Integer.toString(i), new Portfolio(i, i));\n    }\n\n    assertEquals(100, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(200, keyIndex1Stats.getNumUpdates());\n\n    \r\n    String queryStr = \"select * from /portfolio where ID > 0\";\n    Query query = qs.newQuery(queryStr);\n\n    for (int i = 0; i < 50; i++) {\n      query.execute();\n    }\n\n    assertEquals(50, keyIndex1Stats.getTotalUses());\n\n    \r\n    for (int i = 0; i < 50; i++) {\n      region.invalidate(Integer.toString(i));\n    }\n\n    assertEquals(50, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(50, keyIndex1Stats.getNumberOfValues());\n    assertEquals(250, keyIndex1Stats.getNumUpdates());\n\n    for (int i = 0; i < 50; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(50, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(50, keyIndex1Stats.getNumberOfValues());\n    assertEquals(250, keyIndex1Stats.getNumUpdates());\n\n    \r\n    for (int i = 50; i < 100; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(300, keyIndex1Stats.getNumUpdates());\n\n    assertEquals(0, keyIndex1Stats.getNumberOfKeys());\n\n    qs.removeIndex(keyIndex2);\n    region.destroyRegion();\n  }\n","date":"2018-07-18 03:54:18","endLine":231,"groupId":"35899","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsForCompactRangeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/9d/eb88e5a9b9f91c6f1be606362dbe1aa6677b02.src","preCode":"  public void testStatsForCompactRangeIndex() throws Exception {\n    createAndPopulateRegion();\n    keyIndex2 =\n        (IndexProtocol) qs.createIndex(\"multiKeyIndex2\", IndexType.FUNCTIONAL, \"ID\", \"/portfolio \");\n\n    assertTrue(keyIndex2 instanceof PartitionedIndex);\n\n    IndexStatistics keyIndex1Stats = keyIndex2.getStatistics();\n    assertEquals(89, keyIndex1Stats.getNumberOfBucketIndexes());\n\n    \r\n    assertEquals(100, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(100, keyIndex1Stats.getNumUpdates());\n\n    for (int i = 0; i < 100; i++) {\n      region.put(Integer.toString(i), new Portfolio(i, i));\n    }\n\n    assertEquals(100, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(200, keyIndex1Stats.getNumUpdates());\n\n    \r\n    String queryStr = \"select * from /portfolio where ID > 0\";\n    Query query = qs.newQuery(queryStr);\n\n    for (int i = 0; i < 50; i++) {\n      query.execute();\n    }\n\n    assertEquals(50, keyIndex1Stats.getTotalUses());\n\n    \r\n    for (int i = 0; i < 50; i++) {\n      region.invalidate(Integer.toString(i));\n    }\n\n    assertEquals(50, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(50, keyIndex1Stats.getNumberOfValues());\n    assertEquals(250, keyIndex1Stats.getNumUpdates());\n\n    for (int i = 0; i < 50; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(50, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(50, keyIndex1Stats.getNumberOfValues());\n    assertEquals(250, keyIndex1Stats.getNumUpdates());\n\n    \r\n    for (int i = 50; i < 100; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(300, keyIndex1Stats.getNumUpdates());\n\n    assertEquals(0, keyIndex1Stats.getNumberOfKeys());\n\n    qs.removeIndex(keyIndex2);\n    region.destroyRegion();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRIndexStatisticsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testStatsForRangeIndexBeforeRegionCreation() throws Exception {\n    \r\n    region.clear();\n    assertEquals(0, region.size());\n    Position.cnt = 0;\n\n    keyIndex1 = (IndexProtocol) qs.createIndex(\"multiKeyIndex4\", IndexType.FUNCTIONAL, \"pos.secId\",\n        SEPARATOR + \"portfolio p, p.positions.values pos\");\n\n    \r\n    for (int i = 0; i < 100; i++) {\n      region.put(Integer.toString(i), new Portfolio(i, i));\n    }\n\n    assertTrue(keyIndex1 instanceof RangeIndex);\n\n    IndexStatistics keyIndex1Stats = keyIndex1.getStatistics();\n\n    \r\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(200, keyIndex1Stats.getNumberOfValues());\n    assertEquals(200, keyIndex1Stats.getNumUpdates());\n\n    for (int i = 0; i < 100; i++) {\n      region.put(Integer.toString(i), new Portfolio(i, i));\n    }\n\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(200, keyIndex1Stats.getNumberOfValues());\n    assertEquals(400, keyIndex1Stats.getNumUpdates());\n\n    \r\n    String queryStr = \"select * from \" + SEPARATOR\n        + \"portfolio p, p.positions.values pos where pos.secId = 'YHOO'\";\n    Query query = qs.newQuery(queryStr);\n\n    for (int i = 0; i < 50; i++) {\n      query.execute();\n    }\n\n    assertEquals(50, keyIndex1Stats.getTotalUses());\n\n    \r\n    for (int i = 0; i < 50; i++) {\n      region.invalidate(Integer.toString(i));\n    }\n\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(450, keyIndex1Stats.getNumUpdates());\n\n    \r\n    for (int i = 0; i < 50; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(450, keyIndex1Stats.getNumUpdates());\n\n    \r\n    for (int i = 50; i < 100; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(500, keyIndex1Stats.getNumUpdates());\n\n    assertEquals(0, keyIndex1Stats.getNumberOfKeys());\n\n    qs.removeIndex(keyIndex1);\n  }\n","date":"2020-05-29 00:37:39","endLine":559,"groupId":"104533","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStatsForRangeIndexBeforeRegionCreation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6d/982a00d4ae9af33a19c2d006ef931d554e74d9.src","preCode":"  public void testStatsForRangeIndexBeforeRegionCreation() throws Exception {\n    \r\n    region.clear();\n    assertEquals(0, region.size());\n    Position.cnt = 0;\n\n    keyIndex1 = (IndexProtocol) qs.createIndex(\"multiKeyIndex4\", IndexType.FUNCTIONAL, \"pos.secId\",\n        \"/portfolio p, p.positions.values pos\");\n\n    \r\n    for (int i = 0; i < 100; i++) {\n      region.put(Integer.toString(i), new Portfolio(i, i));\n    }\n\n    assertTrue(keyIndex1 instanceof RangeIndex);\n\n    IndexStatistics keyIndex1Stats = keyIndex1.getStatistics();\n\n    \r\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(200, keyIndex1Stats.getNumberOfValues());\n    assertEquals(200, keyIndex1Stats.getNumUpdates());\n\n    for (int i = 0; i < 100; i++) {\n      region.put(Integer.toString(i), new Portfolio(i, i));\n    }\n\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(200, keyIndex1Stats.getNumberOfValues());\n    assertEquals(400, keyIndex1Stats.getNumUpdates());\n\n    \r\n    String queryStr = \"select * from /portfolio p, p.positions.values pos where pos.secId = 'YHOO'\";\n    Query query = qs.newQuery(queryStr);\n\n    for (int i = 0; i < 50; i++) {\n      query.execute();\n    }\n\n    assertEquals(50, keyIndex1Stats.getTotalUses());\n\n    \r\n    for (int i = 0; i < 50; i++) {\n      region.invalidate(Integer.toString(i));\n    }\n\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(450, keyIndex1Stats.getNumUpdates());\n\n    \r\n    for (int i = 0; i < 50; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(4, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(450, keyIndex1Stats.getNumUpdates());\n\n    \r\n    for (int i = 50; i < 100; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(500, keyIndex1Stats.getNumUpdates());\n\n    assertEquals(0, keyIndex1Stats.getNumberOfKeys());\n\n    qs.removeIndex(keyIndex1);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexStatisticsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testStatsForCompactRangeIndex() throws Exception {\n    createAndPopulateRegion();\n    keyIndex2 =\n        (IndexProtocol) qs.createIndex(\"multiKeyIndex2\", IndexType.FUNCTIONAL, \"ID\",\n            SEPARATOR + \"portfolio \");\n\n    assertTrue(keyIndex2 instanceof PartitionedIndex);\n\n    IndexStatistics keyIndex1Stats = keyIndex2.getStatistics();\n    assertEquals(89, keyIndex1Stats.getNumberOfBucketIndexes());\n\n    \r\n    assertEquals(100, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(100, keyIndex1Stats.getNumUpdates());\n\n    for (int i = 0; i < 100; i++) {\n      region.put(Integer.toString(i), new Portfolio(i, i));\n    }\n\n    assertEquals(100, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(200, keyIndex1Stats.getNumUpdates());\n\n    \r\n    String queryStr = \"select * from \" + SEPARATOR + \"portfolio where ID > 0\";\n    Query query = qs.newQuery(queryStr);\n\n    for (int i = 0; i < 50; i++) {\n      query.execute();\n    }\n\n    assertEquals(50, keyIndex1Stats.getTotalUses());\n\n    \r\n    for (int i = 0; i < 50; i++) {\n      region.invalidate(Integer.toString(i));\n    }\n\n    assertEquals(50, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(50, keyIndex1Stats.getNumberOfValues());\n    assertEquals(250, keyIndex1Stats.getNumUpdates());\n\n    for (int i = 0; i < 50; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(50, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(50, keyIndex1Stats.getNumberOfValues());\n    assertEquals(250, keyIndex1Stats.getNumUpdates());\n\n    \r\n    for (int i = 50; i < 100; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(300, keyIndex1Stats.getNumUpdates());\n\n    assertEquals(0, keyIndex1Stats.getNumberOfKeys());\n\n    qs.removeIndex(keyIndex2);\n    region.destroyRegion();\n  }\n","date":"2020-05-29 00:37:39","endLine":234,"groupId":"104533","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsForCompactRangeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/be/4178e06022c25d3634729ecdcfad014a65428a.src","preCode":"  public void testStatsForCompactRangeIndex() throws Exception {\n    createAndPopulateRegion();\n    keyIndex2 =\n        (IndexProtocol) qs.createIndex(\"multiKeyIndex2\", IndexType.FUNCTIONAL, \"ID\", \"/portfolio \");\n\n    assertTrue(keyIndex2 instanceof PartitionedIndex);\n\n    IndexStatistics keyIndex1Stats = keyIndex2.getStatistics();\n    assertEquals(89, keyIndex1Stats.getNumberOfBucketIndexes());\n\n    \r\n    assertEquals(100, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(100, keyIndex1Stats.getNumUpdates());\n\n    for (int i = 0; i < 100; i++) {\n      region.put(Integer.toString(i), new Portfolio(i, i));\n    }\n\n    assertEquals(100, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(100, keyIndex1Stats.getNumberOfValues());\n    assertEquals(200, keyIndex1Stats.getNumUpdates());\n\n    \r\n    String queryStr = \"select * from /portfolio where ID > 0\";\n    Query query = qs.newQuery(queryStr);\n\n    for (int i = 0; i < 50; i++) {\n      query.execute();\n    }\n\n    assertEquals(50, keyIndex1Stats.getTotalUses());\n\n    \r\n    for (int i = 0; i < 50; i++) {\n      region.invalidate(Integer.toString(i));\n    }\n\n    assertEquals(50, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(50, keyIndex1Stats.getNumberOfValues());\n    assertEquals(250, keyIndex1Stats.getNumUpdates());\n\n    for (int i = 0; i < 50; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(50, keyIndex1Stats.getNumberOfKeys());\n    assertEquals(50, keyIndex1Stats.getNumberOfValues());\n    assertEquals(250, keyIndex1Stats.getNumUpdates());\n\n    \r\n    for (int i = 50; i < 100; i++) {\n      region.destroy(Integer.toString(i));\n    }\n\n    assertEquals(300, keyIndex1Stats.getNumUpdates());\n\n    assertEquals(0, keyIndex1Stats.getNumberOfKeys());\n\n    qs.removeIndex(keyIndex2);\n    region.destroyRegion();\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRIndexStatisticsJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
