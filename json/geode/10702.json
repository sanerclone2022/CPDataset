[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testCqExecuteWithoutQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort =\n        server.invoke(() -> PartitionedRegionCqQueryOptimizedExecuteDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        int numOfQueryExecutions = (Integer) ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","date":"2018-07-18 03:54:18","endLine":146,"groupId":"23461","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCqExecuteWithoutQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/37/9ba291d749652f81cccbbf5b41073cbc8423aa.src","preCode":"  public void testCqExecuteWithoutQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort =\n        server.invoke(() -> PartitionedRegionCqQueryOptimizedExecuteDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        int numOfQueryExecutions = (Integer) ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PartitionedRegionCqQueryOptimizedExecuteDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testCqExecuteWithoutQueryExecutionAndNoRSCaching() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      public void run2() throws CacheException {\n        CqServiceProvider.MAINTAIN_KEYS = false;\n      }\n    });\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort = server.invoke(() -> PartitionedRegionCqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        assertFalse(DistributionConfig.GEMFIRE_PREFIX + \"cq.MAINTAIN_KEYS flag should be false \",\n            CqServiceProvider.MAINTAIN_KEYS);\n        int numOfQueryExecutions = (Integer) ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","date":"2018-07-18 03:54:18","endLine":235,"groupId":"36673","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCqExecuteWithoutQueryExecutionAndNoRSCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/37/9ba291d749652f81cccbbf5b41073cbc8423aa.src","preCode":"  public void testCqExecuteWithoutQueryExecutionAndNoRSCaching() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      public void run2() throws CacheException {\n        CqServiceProvider.MAINTAIN_KEYS = false;\n      }\n    });\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort = server.invoke(() -> PartitionedRegionCqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        assertFalse(DistributionConfig.GEMFIRE_PREFIX + \"cq.MAINTAIN_KEYS flag should be false \",\n            CqServiceProvider.MAINTAIN_KEYS);\n        int numOfQueryExecutions = (Integer) ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PartitionedRegionCqQueryOptimizedExecuteDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":2,"curCode":"  public void testCqExecuteWithoutQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort =\n        server.invoke(() -> PartitionedRegionCqQueryOptimizedExecuteDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        int numOfQueryExecutions = (Integer) ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","date":"2019-01-12 07:53:54","endLine":150,"groupId":"23461","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCqExecuteWithoutQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/39/91481fc033fd3a12d813a86b36c4130acc878f.src","preCode":"  public void testCqExecuteWithoutQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort =\n        server.invoke(() -> PartitionedRegionCqQueryOptimizedExecuteDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        int numOfQueryExecutions = (Integer) ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PartitionedRegionCqQueryOptimizedExecuteDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":2,"curCode":"  public void testCqExecuteWithoutQueryExecutionAndNoRSCaching() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        CqServiceProvider.MAINTAIN_KEYS = false;\n      }\n    });\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort = server.invoke(() -> PartitionedRegionCqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        assertFalse(DistributionConfig.GEMFIRE_PREFIX + \"cq.MAINTAIN_KEYS flag should be false \",\n            CqServiceProvider.MAINTAIN_KEYS);\n        int numOfQueryExecutions = (Integer) ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","date":"2019-01-12 07:53:54","endLine":242,"groupId":"23461","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCqExecuteWithoutQueryExecutionAndNoRSCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/39/91481fc033fd3a12d813a86b36c4130acc878f.src","preCode":"  public void testCqExecuteWithoutQueryExecutionAndNoRSCaching() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      public void run2() throws CacheException {\n        CqServiceProvider.MAINTAIN_KEYS = false;\n      }\n    });\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort = server.invoke(() -> PartitionedRegionCqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        assertFalse(DistributionConfig.GEMFIRE_PREFIX + \"cq.MAINTAIN_KEYS flag should be false \",\n            CqServiceProvider.MAINTAIN_KEYS);\n        int numOfQueryExecutions = (Integer) ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PartitionedRegionCqQueryOptimizedExecuteDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2019-02-12 02:18:49","codes":[{"authorDate":"2019-02-12 02:18:49","commitOrder":3,"curCode":"  public void testCqExecuteWithoutQueryExecution() {\n    final VM server = VM.getVM(0);\n    final VM client = VM.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort =\n        server.invoke(PartitionedRegionCqQueryOptimizedExecuteDUnitTest::getCacheServerPort);\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        long numOfQueryExecutions = (long) getCache().getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName, CqQueryDUnitTest.noTest, numOfEntries, 0, 0,\n        numOfEntries, 0, 0, numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName, CqQueryDUnitTest.noTest, numOfEntries, 15, 0,\n        numOfEntries, 15, 0, numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName, CqQueryDUnitTest.noTest, numOfEntries, 15, 5,\n        numOfEntries, 15, 5, numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","date":"2019-02-12 02:18:49","endLine":141,"groupId":"18641","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCqExecuteWithoutQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/35/399431c4bf0b7cae6e22d36308fbd960ea6cba.src","preCode":"  public void testCqExecuteWithoutQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort =\n        server.invoke(() -> PartitionedRegionCqQueryOptimizedExecuteDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        int numOfQueryExecutions = (Integer) ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PartitionedRegionCqQueryOptimizedExecuteDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2019-02-12 02:18:49","commitOrder":3,"curCode":"  public void testCqExecuteWithoutQueryExecutionAndNoRSCaching() {\n    final VM server = VM.getVM(0);\n    final VM client = VM.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        CqServiceProvider.MAINTAIN_KEYS = false;\n      }\n    });\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort = server.invoke(PartitionedRegionCqQueryDUnitTest::getCacheServerPort);\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        assertFalse(DistributionConfig.GEMFIRE_PREFIX + \"cq.MAINTAIN_KEYS flag should be false \",\n            CqServiceProvider.MAINTAIN_KEYS);\n        long numOfQueryExecutions = (long) getCache().getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName, CqQueryDUnitTest.noTest, numOfEntries, 0, 0,\n        numOfEntries, 0, 0, numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName, CqQueryDUnitTest.noTest, numOfEntries, 15, 0,\n        numOfEntries, 15, 0, numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName, CqQueryDUnitTest.noTest, numOfEntries, 15, 5,\n        numOfEntries, 15, 5, numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","date":"2019-02-12 02:18:49","endLine":226,"groupId":"18641","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCqExecuteWithoutQueryExecutionAndNoRSCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/35/399431c4bf0b7cae6e22d36308fbd960ea6cba.src","preCode":"  public void testCqExecuteWithoutQueryExecutionAndNoRSCaching() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        CqServiceProvider.MAINTAIN_KEYS = false;\n      }\n    });\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort = server.invoke(() -> PartitionedRegionCqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        assertFalse(DistributionConfig.GEMFIRE_PREFIX + \"cq.MAINTAIN_KEYS flag should be false \",\n            CqServiceProvider.MAINTAIN_KEYS);\n        int numOfQueryExecutions = (Integer) ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PartitionedRegionCqQueryOptimizedExecuteDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"2be43b2f35f1ae65bebf6b4dfbe2b329d6dccb2f","commitMessage":"@@@GEODE-6334: Change cache operation stats to longs (#3142)\n\n* Change cache operation stats to longs\n* Use long instead of int for CqQueryOptimized Tests\n* Clean up easy parts of CqQueryOptimized Tests\n* Fix usages of CachePerfStats from ints to longs\n* Add CacheStatistics integration test\n* Remove cachePerfStats.getPuts() testing in backwards compatibility\nDUnit test because it was trying to test old versions when this is all internal\n* Update sanctioned data serializables\n\nCo-authored-by: Michael Oleske <moleske@pivotal.io>\nCo-authored-by: Galen O'Sullivan <gosullivan@pivotal.io>\nCo-authored-by: Kirk Lund <klund@pivotal.io>\n","date":"2019-02-12 02:18:49","modifiedFileCount":"20","status":"M","submitter":"M. Oleske"},{"authorTime":"2019-02-15 02:42:24","codes":[{"authorDate":"2019-02-15 02:42:24","commitOrder":4,"curCode":"  public void testCqExecuteWithoutQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort =\n        server.invoke(() -> PartitionedRegionCqQueryOptimizedExecuteDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        int numOfQueryExecutions = (Integer) ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","date":"2019-02-16 00:51:13","endLine":150,"groupId":"23461","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCqExecuteWithoutQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/39/91481fc033fd3a12d813a86b36c4130acc878f.src","preCode":"  public void testCqExecuteWithoutQueryExecution() {\n    final VM server = VM.getVM(0);\n    final VM client = VM.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort =\n        server.invoke(PartitionedRegionCqQueryOptimizedExecuteDUnitTest::getCacheServerPort);\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        long numOfQueryExecutions = (long) getCache().getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName, CqQueryDUnitTest.noTest, numOfEntries, 0, 0,\n        numOfEntries, 0, 0, numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName, CqQueryDUnitTest.noTest, numOfEntries, 15, 0,\n        numOfEntries, 15, 0, numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName, CqQueryDUnitTest.noTest, numOfEntries, 15, 5,\n        numOfEntries, 15, 5, numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PartitionedRegionCqQueryOptimizedExecuteDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2019-02-15 02:42:24","commitOrder":4,"curCode":"  public void testCqExecuteWithoutQueryExecutionAndNoRSCaching() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        CqServiceProvider.MAINTAIN_KEYS = false;\n      }\n    });\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort = server.invoke(() -> PartitionedRegionCqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        assertFalse(DistributionConfig.GEMFIRE_PREFIX + \"cq.MAINTAIN_KEYS flag should be false \",\n            CqServiceProvider.MAINTAIN_KEYS);\n        int numOfQueryExecutions = (Integer) ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","date":"2019-02-16 00:51:13","endLine":242,"groupId":"23461","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCqExecuteWithoutQueryExecutionAndNoRSCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/39/91481fc033fd3a12d813a86b36c4130acc878f.src","preCode":"  public void testCqExecuteWithoutQueryExecutionAndNoRSCaching() {\n    final VM server = VM.getVM(0);\n    final VM client = VM.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        CqServiceProvider.MAINTAIN_KEYS = false;\n      }\n    });\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort = server.invoke(PartitionedRegionCqQueryDUnitTest::getCacheServerPort);\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        assertFalse(DistributionConfig.GEMFIRE_PREFIX + \"cq.MAINTAIN_KEYS flag should be false \",\n            CqServiceProvider.MAINTAIN_KEYS);\n        long numOfQueryExecutions = (long) getCache().getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName, CqQueryDUnitTest.noTest, numOfEntries, 0, 0,\n        numOfEntries, 0, 0, numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName, CqQueryDUnitTest.noTest, numOfEntries, 15, 0,\n        numOfEntries, 15, 0, numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName, CqQueryDUnitTest.noTest, numOfEntries, 15, 5,\n        numOfEntries, 15, 5, numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PartitionedRegionCqQueryOptimizedExecuteDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"8d0bd6420c435c437d37f5ab60dfedfb4d46d2cd","commitMessage":"@@@Revert \"GEODE-6334: Change cache operation stats to longs (#3142)\"\n\nThis reverts commit 2be43b2f35f1ae65bebf6b4dfbe2b329d6dccb2f.\n","date":"2019-02-16 00:51:13","modifiedFileCount":"20","status":"M","submitter":"Michael Oleske"},{"authorTime":"2019-06-20 02:33:45","codes":[{"authorDate":"2019-06-20 02:33:45","commitOrder":5,"curCode":"  public void testCqExecuteWithoutQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort =\n        server.invoke(() -> PartitionedRegionCqQueryOptimizedExecuteDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        Number numOfQueryExecutions = ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0L,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","date":"2019-06-20 02:33:45","endLine":150,"groupId":"23461","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCqExecuteWithoutQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8c/c9457ad454a1b82c06479f9744af40b595cb94.src","preCode":"  public void testCqExecuteWithoutQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort =\n        server.invoke(() -> PartitionedRegionCqQueryOptimizedExecuteDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        int numOfQueryExecutions = (Integer) ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PartitionedRegionCqQueryOptimizedExecuteDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2019-06-20 02:33:45","commitOrder":5,"curCode":"  public void testCqExecuteWithoutQueryExecutionAndNoRSCaching() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        CqServiceProvider.MAINTAIN_KEYS = false;\n      }\n    });\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort = server.invoke(() -> PartitionedRegionCqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        assertFalse(DistributionConfig.GEMFIRE_PREFIX + \"cq.MAINTAIN_KEYS flag should be false \",\n            CqServiceProvider.MAINTAIN_KEYS);\n        Number numOfQueryExecutions = ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0L,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","date":"2019-06-20 02:33:45","endLine":242,"groupId":"23461","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCqExecuteWithoutQueryExecutionAndNoRSCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8c/c9457ad454a1b82c06479f9744af40b595cb94.src","preCode":"  public void testCqExecuteWithoutQueryExecutionAndNoRSCaching() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        CqServiceProvider.MAINTAIN_KEYS = false;\n      }\n    });\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort = server.invoke(() -> PartitionedRegionCqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        assertFalse(DistributionConfig.GEMFIRE_PREFIX + \"cq.MAINTAIN_KEYS flag should be false \",\n            CqServiceProvider.MAINTAIN_KEYS);\n        int numOfQueryExecutions = (Integer) ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PartitionedRegionCqQueryOptimizedExecuteDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"e377ed7d3d76a244a1494025231851fac8b37350","commitMessage":"@@@GEODE-6850: change int stats to long (#3713)\n\nThe \"Int\" methods on the statistics interfaces have been deprecated in favor of the corresponding \"Long\" methods.\nThe implementation of these deprecated \"Int\" methods now use the \"Long\" methods.\nThe only place this could be visible to a user is if they call Statistics.get(String) or Statistics.get(StatisticDescriptor). Both of these methods return a \"Number\" instance.\nThese methods continue to do this and existing code will work fine if it does not try to downcast the Number to a subclass. But for \"Int\" stats.  these methods used to return an \"Integer\" instance and now return a \"Long\" instance. If code used to cast to an \"Integer\" it will now be broken.\nMany places in the product now use these deprecated \"Int\" methods and as of this checkin all those places are now creating a \"Long\" statistic.","date":"2019-06-20 02:33:45","modifiedFileCount":"28","status":"M","submitter":"Darrel Schneider"},{"authorTime":"2020-01-01 07:43:47","codes":[{"authorDate":"2019-06-20 02:33:45","commitOrder":6,"curCode":"  public void testCqExecuteWithoutQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort =\n        server.invoke(() -> PartitionedRegionCqQueryOptimizedExecuteDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        Number numOfQueryExecutions = ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0L,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","date":"2019-06-20 02:33:45","endLine":150,"groupId":"10702","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCqExecuteWithoutQueryExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8c/c9457ad454a1b82c06479f9744af40b595cb94.src","preCode":"  public void testCqExecuteWithoutQueryExecution() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort =\n        server.invoke(() -> PartitionedRegionCqQueryOptimizedExecuteDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        Number numOfQueryExecutions = ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0L,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PartitionedRegionCqQueryOptimizedExecuteDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"},{"authorDate":"2020-01-01 07:43:47","commitOrder":6,"curCode":"  public void testCqExecuteWithoutQueryExecutionAndNoRSCaching() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        CqServiceProvider.MAINTAIN_KEYS = false;\n      }\n    });\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort = server.invoke(() -> PartitionedRegionCqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        assertFalse(GeodeGlossary.GEMFIRE_PREFIX + \"cq.MAINTAIN_KEYS flag should be false \",\n            CqServiceProvider.MAINTAIN_KEYS);\n        Number numOfQueryExecutions = ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0L,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","date":"2020-01-01 07:43:47","endLine":242,"groupId":"10702","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testCqExecuteWithoutQueryExecutionAndNoRSCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c3/9b61e44d542cc32972560156146aff7d47c6ee.src","preCode":"  public void testCqExecuteWithoutQueryExecutionAndNoRSCaching() throws Exception {\n    final Host host = Host.getHost(0);\n    final VM server = host.getVM(0);\n    final VM client = host.getVM(1);\n    final int numOfEntries = 10;\n    final String cqName = \"testCqExecuteWithoutQueryExecution_1\";\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        CqServiceProvider.MAINTAIN_KEYS = false;\n      }\n    });\n\n    createServer(server);\n    \r\n    createValues(server, regions[0], numOfEntries);\n\n    final int thePort = server.invoke(() -> PartitionedRegionCqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \n    createCQ(client, cqName, cqs[0]);\n\n    cqHelper.validateCQCount(client, 1);\n\n    cqHelper.executeCQ(client, cqName, false, null);\n\n    server.invoke(new CacheSerializableRunnable(\"execute cq\") {\n      @Override\n      public void run2() throws CacheException {\n        assertFalse(\"CqServiceImpl.EXECUTE_QUERY_DURING_INIT flag should be false \",\n            CqServiceImpl.EXECUTE_QUERY_DURING_INIT);\n        assertFalse(DistributionConfig.GEMFIRE_PREFIX + \"cq.MAINTAIN_KEYS flag should be false \",\n            CqServiceProvider.MAINTAIN_KEYS);\n        Number numOfQueryExecutions = ((GemFireCacheImpl) getCache()).getCachePerfStats()\n            .getStats().get(\"queryExecutions\");\n        assertEquals(\"Number of query executions for cq.execute should be 0 \", 0L,\n            numOfQueryExecutions);\n      }\n    });\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = numOfEntries + 1; i <= numOfEntries * 2; i++) {\n          region1.put(KEY + i, new Portfolio(i));\n        }\n        LogWriterUtils.getLogWriter()\n            .info(\"### Number of Entries in Region :\" + region1.keySet().size());\n      }\n    });\n\n    cqHelper.waitForCreated(client, cqName, KEY + numOfEntries * 2);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  0,  0,\n         numOfEntries,  0,  0,\n         numOfEntries);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    cqHelper.waitForUpdated(client, cqName, KEY + numOfEntries);\n\n\n    \r\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15,  0,\n         numOfEntries,  15,  0,\n         numOfEntries + 15);\n\n    \r\n    cqHelper.deleteValues(server, regions[0], 5);\n    cqHelper.waitForDestroyed(client, cqName, KEY + 5);\n\n    cqHelper.validateCQ(client, cqName,  cqHelper.noTest,\n         numOfEntries,  15, 5,\n         numOfEntries,  15,  5,\n         numOfEntries + 15 + 5);\n\n    cqHelper.closeClient(client);\n    cqHelper.closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/PartitionedRegionCqQueryOptimizedExecuteDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"af5a044175ee9cee55bf46f4af8be15faafa0687","commitMessage":"@@@GEODE-7630: Resolve depencency on OSProcess. (#4548)\n\n","date":"2020-01-01 07:43:47","modifiedFileCount":"306","status":"M","submitter":"Ernie Burghardt"}]
