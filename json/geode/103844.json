[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testClearInteractionWithCreateOperation_Bug37606() throws Exception {\n    DiskRegionProperties props = new DiskRegionProperties();\n    props.setOverflow(false);\n    props.setRolling(false);\n    props.setDiskDirs(dirs);\n    props.setPersistBackup(true);\n    props.setRegionName(\"IGNORE_EXCEPTION_testClearInteractionWithCreateOperation_Bug37606\");\n    final Region region =\n        DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache, props, Scope.LOCAL);\n    LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = true;\n    final Thread th = new Thread(new Runnable() {\n      public void run() {\n        region.create(\"key1\", \"value1\");\n      }\n    });\n    CacheObserver old = CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void beforeDiskClear() {\n        th.start();\n        Wait.pause(7 * 1000);\n        System.out.println(\"FIXME: this thread does not terminate--EVER!\");\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n      }\n    });\n    try {\n      region.clear();\n      ThreadUtils.join(th, 30 * 1000);\n      assertFalse(this.failureCause, this.exceptionOccurred);\n      \r\n      \r\n      assertEquals(1, region.size());\n      region.close();\n      assertEquals(1,\n          DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache, props, Scope.LOCAL).size());\n    } finally {\n      CacheObserverHolder.setInstance(old);\n      LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = false;\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":1608,"groupId":"40903","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testClearInteractionWithCreateOperation_Bug37606","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6f/ec15b27cf96b28e5f7bf1a1027c42781a868ef.src","preCode":"  public void testClearInteractionWithCreateOperation_Bug37606() throws Exception {\n    DiskRegionProperties props = new DiskRegionProperties();\n    props.setOverflow(false);\n    props.setRolling(false);\n    props.setDiskDirs(dirs);\n    props.setPersistBackup(true);\n    props.setRegionName(\"IGNORE_EXCEPTION_testClearInteractionWithCreateOperation_Bug37606\");\n    final Region region =\n        DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache, props, Scope.LOCAL);\n    LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = true;\n    final Thread th = new Thread(new Runnable() {\n      public void run() {\n        region.create(\"key1\", \"value1\");\n      }\n    });\n    CacheObserver old = CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void beforeDiskClear() {\n        th.start();\n        Wait.pause(7 * 1000);\n        System.out.println(\"FIXME: this thread does not terminate--EVER!\");\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n      }\n    });\n    try {\n      region.clear();\n      ThreadUtils.join(th, 30 * 1000);\n      assertFalse(this.failureCause, this.exceptionOccurred);\n      \r\n      \r\n      assertEquals(1, region.size());\n      region.close();\n      assertEquals(1,\n          DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache, props, Scope.LOCAL).size());\n    } finally {\n      CacheObserverHolder.setInstance(old);\n      LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = false;\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1565,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testClearInteractionWithUpdateOperation_Bug37606() throws Exception {\n    DiskRegionProperties props = new DiskRegionProperties();\n    props.setOverflow(false);\n    props.setRolling(false);\n    props.setDiskDirs(dirs);\n    props.setPersistBackup(true);\n    props.setRegionName(\"IGNORE_EXCEPTION_testClearInteractionWithUpdateOperation_Bug37606\");\n    final Region region =\n        DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache, props, Scope.LOCAL);\n    region.create(\"key1\", \"value1\");\n    LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = true;\n    final Thread th = new Thread(new Runnable() {\n      public void run() {\n        region.put(\"key1\", \"value2\");\n      }\n    });\n    CacheObserver old = CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void beforeDiskClear() {\n        LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = false;\n        th.start();\n        System.out.println(\"FIXME: this thread (2) does not terminate--EVER!\");\n        Wait.pause(10 * 1000);\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n      }\n    });\n    try {\n      region.clear();\n      ThreadUtils.join(th, 30 * 1000);\n      assertFalse(this.failureCause, this.exceptionOccurred);\n      \r\n      \r\n      assertEquals(1, region.size());\n      region.close();\n      assertEquals(1,\n          DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache, props, Scope.LOCAL).size());\n    } finally {\n      CacheObserverHolder.setInstance(old);\n      LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = false;\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":1659,"groupId":"40902","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testClearInteractionWithUpdateOperation_Bug37606","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6f/ec15b27cf96b28e5f7bf1a1027c42781a868ef.src","preCode":"  public void testClearInteractionWithUpdateOperation_Bug37606() throws Exception {\n    DiskRegionProperties props = new DiskRegionProperties();\n    props.setOverflow(false);\n    props.setRolling(false);\n    props.setDiskDirs(dirs);\n    props.setPersistBackup(true);\n    props.setRegionName(\"IGNORE_EXCEPTION_testClearInteractionWithUpdateOperation_Bug37606\");\n    final Region region =\n        DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache, props, Scope.LOCAL);\n    region.create(\"key1\", \"value1\");\n    LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = true;\n    final Thread th = new Thread(new Runnable() {\n      public void run() {\n        region.put(\"key1\", \"value2\");\n      }\n    });\n    CacheObserver old = CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void beforeDiskClear() {\n        LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = false;\n        th.start();\n        System.out.println(\"FIXME: this thread (2) does not terminate--EVER!\");\n        Wait.pause(10 * 1000);\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n      }\n    });\n    try {\n      region.clear();\n      ThreadUtils.join(th, 30 * 1000);\n      assertFalse(this.failureCause, this.exceptionOccurred);\n      \r\n      \r\n      assertEquals(1, region.size());\n      region.close();\n      assertEquals(1,\n          DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache, props, Scope.LOCAL).size());\n    } finally {\n      CacheObserverHolder.setInstance(old);\n      LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = false;\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1614,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-09-13 05:13:28","codes":[{"authorDate":"2018-09-13 05:13:28","commitOrder":2,"curCode":"  public void testClearInteractionWithCreateOperation_Bug37606() throws Exception {\n    DiskRegionProperties diskRegionProperties = new DiskRegionProperties();\n    diskRegionProperties.setOverflow(false);\n    diskRegionProperties.setRolling(false);\n    diskRegionProperties.setDiskDirs(diskDirs);\n    diskRegionProperties.setPersistBackup(true);\n    diskRegionProperties.setRegionName(regionName);\n\n    DiskStoreFactory diskStoreFactory = toDiskStoreFactory(diskRegionProperties);\n\n    createDiskStoreWithSizeInBytes(diskStoreName, diskStoreFactory);\n\n    Region<String, String> region =\n        createRegion(regionName, diskStoreName, true, true, false, false, 0);\n\n    AtomicReference<Future<Void>> doCreateFuture = new AtomicReference<>();\n    LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = true;\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      @Override\n      public void beforeDiskClear() {\n        LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = false;\n        doCreateFuture.set(executorServiceRule.runAsync(() -> {\n          try {\n            region.create(\"key1\", \"value1\");\n          } catch (AssertionError | Exception e) {\n            errorCollector.addError(e);\n          }\n        }));\n      }\n    });\n\n    region.clear();\n    awaitFuture(doCreateFuture);\n\n    \r\n    assertThat(region.size()).isEqualTo(1);\n\n    \r\n    region.close();\n    Region<String, String> region2 =\n        createRegion(regionName, diskStoreName, true, true, false, false, 0);\n    assertThat(region2.size()).isEqualTo(1);\n  }\n","date":"2018-09-13 05:13:28","endLine":1257,"groupId":"103844","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testClearInteractionWithCreateOperation_Bug37606","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/af/60aca498efb0c3f81d3920a2383310bdff6ec0.src","preCode":"  public void testClearInteractionWithCreateOperation_Bug37606() throws Exception {\n    DiskRegionProperties props = new DiskRegionProperties();\n    props.setOverflow(false);\n    props.setRolling(false);\n    props.setDiskDirs(dirs);\n    props.setPersistBackup(true);\n    props.setRegionName(\"IGNORE_EXCEPTION_testClearInteractionWithCreateOperation_Bug37606\");\n    final Region region =\n        DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache, props, Scope.LOCAL);\n    LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = true;\n    final Thread th = new Thread(new Runnable() {\n      public void run() {\n        region.create(\"key1\", \"value1\");\n      }\n    });\n    CacheObserver old = CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void beforeDiskClear() {\n        th.start();\n        Wait.pause(7 * 1000);\n        System.out.println(\"FIXME: this thread does not terminate--EVER!\");\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n      }\n    });\n    try {\n      region.clear();\n      ThreadUtils.join(th, 30 * 1000);\n      assertFalse(this.failureCause, this.exceptionOccurred);\n      \r\n      \r\n      assertEquals(1, region.size());\n      region.close();\n      assertEquals(1,\n          DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache, props, Scope.LOCAL).size());\n    } finally {\n      CacheObserverHolder.setInstance(old);\n      LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = false;\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1215,"status":"M"},{"authorDate":"2018-09-13 05:13:28","commitOrder":2,"curCode":"  public void testClearInteractionWithUpdateOperation_Bug37606() throws Exception {\n    DiskRegionProperties diskRegionProperties = new DiskRegionProperties();\n    diskRegionProperties.setOverflow(false);\n    diskRegionProperties.setRolling(false);\n    diskRegionProperties.setDiskDirs(diskDirs);\n    diskRegionProperties.setPersistBackup(true);\n    diskRegionProperties.setRegionName(regionName);\n\n    DiskStoreFactory diskStoreFactory = toDiskStoreFactory(diskRegionProperties);\n\n    createDiskStoreWithSizeInBytes(diskStoreName, diskStoreFactory);\n\n    Region<String, String> region =\n        createRegion(regionName, diskStoreName, true, true, false, false, 0);\n\n    region.create(\"key1\", \"value1\");\n\n    AtomicReference<Future<Void>> doPutFuture = new AtomicReference<>();\n    LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = true;\n    CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      @Override\n      public void beforeDiskClear() {\n        LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = false;\n        doPutFuture.set(executorServiceRule.runAsync(() -> {\n          try {\n            region.put(\"key1\", \"value1\");\n          } catch (AssertionError | Exception e) {\n            errorCollector.addError(e);\n          }\n        }));\n      }\n    });\n\n    region.clear();\n    awaitFuture(doPutFuture);\n\n    \r\n    assertThat(region.size()).isEqualTo(1);\n\n    \r\n    region.close();\n    Region<String, String> region2 =\n        createRegion(regionName, diskStoreName, true, true, false, false, 0);\n    assertThat(region2.size()).isEqualTo(1);\n  }\n","date":"2018-09-13 05:13:28","endLine":1311,"groupId":"103844","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testClearInteractionWithUpdateOperation_Bug37606","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/af/60aca498efb0c3f81d3920a2383310bdff6ec0.src","preCode":"  public void testClearInteractionWithUpdateOperation_Bug37606() throws Exception {\n    DiskRegionProperties props = new DiskRegionProperties();\n    props.setOverflow(false);\n    props.setRolling(false);\n    props.setDiskDirs(dirs);\n    props.setPersistBackup(true);\n    props.setRegionName(\"IGNORE_EXCEPTION_testClearInteractionWithUpdateOperation_Bug37606\");\n    final Region region =\n        DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache, props, Scope.LOCAL);\n    region.create(\"key1\", \"value1\");\n    LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = true;\n    final Thread th = new Thread(new Runnable() {\n      public void run() {\n        region.put(\"key1\", \"value2\");\n      }\n    });\n    CacheObserver old = CacheObserverHolder.setInstance(new CacheObserverAdapter() {\n      public void beforeDiskClear() {\n        LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = false;\n        th.start();\n        System.out.println(\"FIXME: this thread (2) does not terminate--EVER!\");\n        Wait.pause(10 * 1000);\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n      }\n    });\n    try {\n      region.clear();\n      ThreadUtils.join(th, 30 * 1000);\n      assertFalse(this.failureCause, this.exceptionOccurred);\n      \r\n      \r\n      assertEquals(1, region.size());\n      region.close();\n      assertEquals(1,\n          DiskRegionHelperFactory.getSyncPersistOnlyRegion(cache, props, Scope.LOCAL).size());\n    } finally {\n      CacheObserverHolder.setInstance(old);\n      LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER = false;\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/internal/cache/DiskRegionJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1267,"status":"M"}],"commitId":"4290946d9dab98450964bbf498beea2bee650a3f","commitMessage":"@@@GEODE-4273: overhaul DiskRegionJUnitTest (#2449)\n\n* Remove use of base class\n* Extract testCompactorClose to DiskRegionCompactorCloseIntegrationTest\n* Extract testDiskRegDWAttrbts to DiskRegionAttributesIntegrationTest\n* GEODE-3900: Use TemporaryFolder for all disk dirs and files\n* Ensure Cache and DS have proper tearDown\n* Use Rules.  Awaitility.  and AssertJ\n* Use CountDownLatch instead of verbose synchronization tricks\n* Minimize usage of non-User APIs\n* Fix usage of deprecated APIs\n* Use proper variable names\n* Use MAX_OPLOG_SIZE_IN_BYTES instead of literal value\n* Protect AtomicReferences with Awaitility to prevent NPEs\n","date":"2018-09-13 05:13:28","modifiedFileCount":"4","status":"M","submitter":"Kirk Lund"}]
