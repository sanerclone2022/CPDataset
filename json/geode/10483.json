[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void closeCQ(VM vm, final String cqName) throws Exception {\n    vm.invoke(new CacheSerializableRunnable(\"Close CQ :\" + cqName) {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Close CQ. ###\" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCqService.\");\n        }\n\n        \r\n        CqQuery cq1 = null;\n        try {\n          cq1 = cqService.getCq(cqName);\n          cq1.close();\n        } catch (Exception ex) {\n          ex.printStackTrace();\n          fail(\"Failed to close CQ \" + cqName + \" . \" + ex.getMessage());\n        }\n        assertTrue(\"Close CQ state mismatch\", cq1.getState().isClosed());\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":969,"groupId":"27790","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"closeCQ","params":"(VMvm@finalStringcqName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/72f987b8bfe0450ffa77a55fdf0efa1c66c36f.src","preCode":"  public void closeCQ(VM vm, final String cqName) throws Exception {\n    vm.invoke(new CacheSerializableRunnable(\"Close CQ :\" + cqName) {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Close CQ. ###\" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCqService.\");\n        }\n\n        \r\n        CqQuery cq1 = null;\n        try {\n          cq1 = cqService.getCq(cqName);\n          cq1.close();\n        } catch (Exception ex) {\n          ex.printStackTrace();\n          fail(\"Failed to close CQ \" + cqName + \" . \" + ex.getMessage());\n        }\n        assertTrue(\"Close CQ state mismatch\", cq1.getState().isClosed());\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":944,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testCQPerf() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    cqDUnitTest.createServer(server);\n\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n    final String cqName = \"testCQPerf_0\";\n\n    client.invoke(new CacheSerializableRunnable(\"Create CQ :\" + cqName) {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCQService.\");\n        }\n        \r\n        CqAttributesFactory cqf = new CqAttributesFactory();\n        CqListener[] cqListeners = {new CqTimeTestListener(LogWriterUtils.getLogWriter())};\n        ((CqTimeTestListener) cqListeners[0]).cqName = cqName;\n\n        cqf.initCqListeners(cqListeners);\n        CqAttributes cqa = cqf.create();\n\n        \r\n        try {\n          CqQuery cq1 = cqService.newCq(cqName, cqDUnitTest.cqs[0], cqa);\n          assertTrue(\"newCq() state mismatch\", cq1.getState().isStopped());\n          cq1.execute();\n        } catch (Exception ex) {\n          LogWriterUtils.getLogWriter().info(\"CqService is :\" + cqService);\n          ex.printStackTrace();\n          AssertionError err = new AssertionError(\"Failed to create CQ \" + cqName + \" . \");\n          err.initCause(ex);\n          throw err;\n        }\n      }\n    });\n\n    final int size = 50;\n\n    \r\n    cqDUnitTest.createValuesWithTime(client, cqDUnitTest.regions[0], size);\n    Wait.pause(5000);\n\n    \r\n    cqDUnitTest.createValuesWithTime(client, cqDUnitTest.regions[0], size);\n\n    client.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCqService.\");\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n        \r\n        \r\n        \r\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        \r\n        \r\n      }\n    });\n\n    Wait.pause(10 * 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n\n  }\n","date":"2018-07-18 03:54:18","endLine":187,"groupId":"26316","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCQPerf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/eb/4868c2d609b816cd7ad689eafcf14ea6c9bfca.src","preCode":"  public void testCQPerf() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    cqDUnitTest.createServer(server);\n\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n    final String cqName = \"testCQPerf_0\";\n\n    client.invoke(new CacheSerializableRunnable(\"Create CQ :\" + cqName) {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCQService.\");\n        }\n        \r\n        CqAttributesFactory cqf = new CqAttributesFactory();\n        CqListener[] cqListeners = {new CqTimeTestListener(LogWriterUtils.getLogWriter())};\n        ((CqTimeTestListener) cqListeners[0]).cqName = cqName;\n\n        cqf.initCqListeners(cqListeners);\n        CqAttributes cqa = cqf.create();\n\n        \r\n        try {\n          CqQuery cq1 = cqService.newCq(cqName, cqDUnitTest.cqs[0], cqa);\n          assertTrue(\"newCq() state mismatch\", cq1.getState().isStopped());\n          cq1.execute();\n        } catch (Exception ex) {\n          LogWriterUtils.getLogWriter().info(\"CqService is :\" + cqService);\n          ex.printStackTrace();\n          AssertionError err = new AssertionError(\"Failed to create CQ \" + cqName + \" . \");\n          err.initCause(ex);\n          throw err;\n        }\n      }\n    });\n\n    final int size = 50;\n\n    \r\n    cqDUnitTest.createValuesWithTime(client, cqDUnitTest.regions[0], size);\n    Wait.pause(5000);\n\n    \r\n    cqDUnitTest.createValuesWithTime(client, cqDUnitTest.regions[0], size);\n\n    client.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCqService.\");\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n        \r\n        \r\n        \r\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        \r\n        \r\n      }\n    });\n\n    Wait.pause(10 * 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqPerfDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-08-31 08:10:50","codes":[{"authorDate":"2018-08-31 08:10:50","commitOrder":2,"curCode":"  public void closeCQ(VM vm, final String cqName) {\n    vm.invoke(() -> {\n      \r\n      QueryService cqService = getCache().getQueryService();\n\n      \r\n      CqQuery cq1 = cqService.getCq(cqName);\n      cq1.close();\n\n      assertThat(cq1.getState().isClosed()).describedAs(\"Close CQ state mismatch\").isTrue();\n    });\n  }\n","date":"2018-08-31 08:10:50","endLine":769,"groupId":"22067","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"closeCQ","params":"(VMvm@finalStringcqName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void closeCQ(VM vm, final String cqName) throws Exception {\n    vm.invoke(new CacheSerializableRunnable(\"Close CQ :\" + cqName) {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Close CQ. ###\" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCqService.\");\n        }\n\n        \r\n        CqQuery cq1 = null;\n        try {\n          cq1 = cqService.getCq(cqName);\n          cq1.close();\n        } catch (Exception ex) {\n          ex.printStackTrace();\n          fail(\"Failed to close CQ \" + cqName + \" . \" + ex.getMessage());\n        }\n        assertTrue(\"Close CQ state mismatch\", cq1.getState().isClosed());\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":758,"status":"M"},{"authorDate":"2018-08-31 08:10:50","commitOrder":2,"curCode":"  public void testCQPerf() {\n\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    cqDUnitTest.createServer(server);\n\n    final int port = server.invoke(CqQueryDUnitTest::getCacheServerPort);\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n    final String cqName = \"testCQPerf_0\";\n\n    client.invoke(() -> {\n      logger.info(\"### Create CQ. ###\" + cqName);\n      \r\n      QueryService cqService =\n          getCache().getQueryService();\n\n      \r\n      CqAttributesFactory cqf = new CqAttributesFactory();\n      CqListener[] cqListeners = {new CqTimeTestListener(LogWriterUtils.getLogWriter())};\n      ((CqTimeTestListener) cqListeners[0]).cqName = cqName;\n\n      cqf.initCqListeners(cqListeners);\n      CqAttributes cqa = cqf.create();\n\n      \r\n      CqQuery cq1 = cqService.newCq(cqName, cqDUnitTest.cqs[0], cqa);\n      assertThat(cq1.getState().isStopped()).describedAs(\"newCq() state mismatch\").isTrue();\n      cq1.execute();\n    });\n\n    final int size = 50;\n\n    \r\n    cqDUnitTest.createValuesWithTime(client, cqDUnitTest.regions[0], size);\n\n    Wait.pause(5000);\n\n    \r\n    cqDUnitTest.createValuesWithTime(client, cqDUnitTest.regions[0], size);\n\n    client.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        logger.info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = getCache().getQueryService();\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        assertThat(cQuery).isNotNull();\n\n      }\n    });\n\n    Wait.pause(10 * 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n\n  }\n","date":"2018-08-31 08:10:50","endLine":149,"groupId":"2669","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCQPerf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/c8/80d1f83587642d49d729f133c581aea4e8f514.src","preCode":"  public void testCQPerf() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    cqDUnitTest.createServer(server);\n\n    final int port = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n    final String cqName = \"testCQPerf_0\";\n\n    client.invoke(new CacheSerializableRunnable(\"Create CQ :\" + cqName) {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCQService.\");\n        }\n        \r\n        CqAttributesFactory cqf = new CqAttributesFactory();\n        CqListener[] cqListeners = {new CqTimeTestListener(LogWriterUtils.getLogWriter())};\n        ((CqTimeTestListener) cqListeners[0]).cqName = cqName;\n\n        cqf.initCqListeners(cqListeners);\n        CqAttributes cqa = cqf.create();\n\n        \r\n        try {\n          CqQuery cq1 = cqService.newCq(cqName, cqDUnitTest.cqs[0], cqa);\n          assertTrue(\"newCq() state mismatch\", cq1.getState().isStopped());\n          cq1.execute();\n        } catch (Exception ex) {\n          LogWriterUtils.getLogWriter().info(\"CqService is :\" + cqService);\n          ex.printStackTrace();\n          AssertionError err = new AssertionError(\"Failed to create CQ \" + cqName + \" . \");\n          err.initCause(ex);\n          throw err;\n        }\n      }\n    });\n\n    final int size = 50;\n\n    \r\n    cqDUnitTest.createValuesWithTime(client, cqDUnitTest.regions[0], size);\n    Wait.pause(5000);\n\n    \r\n    cqDUnitTest.createValuesWithTime(client, cqDUnitTest.regions[0], size);\n\n    client.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = null;\n        try {\n          cqService = getCache().getQueryService();\n        } catch (Exception cqe) {\n          cqe.printStackTrace();\n          fail(\"Failed to getCqService.\");\n        }\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        if (cQuery == null) {\n          fail(\"Failed to get CqQuery for CQ : \" + cqName);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n        \r\n        \r\n        \r\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        \r\n        \r\n      }\n    });\n\n    Wait.pause(10 * 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqPerfDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"46b78978d894e8851daf86d929ae5efbd9093097","commitMessage":"@@@GEODE-5411: Adding awaitility fixing timing issue in CqPerfDUnitTest\n\n- Fixing timing issue by waiting for cq set to reach the right size\n- Code modernization and cleanup","date":"2018-08-31 08:10:50","modifiedFileCount":"3","status":"M","submitter":"mhansonp"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2018-08-31 08:10:50","commitOrder":3,"curCode":"  public void closeCQ(VM vm, final String cqName) {\n    vm.invoke(() -> {\n      \r\n      QueryService cqService = getCache().getQueryService();\n\n      \r\n      CqQuery cq1 = cqService.getCq(cqName);\n      cq1.close();\n\n      assertThat(cq1.getState().isClosed()).describedAs(\"Close CQ state mismatch\").isTrue();\n    });\n  }\n","date":"2018-08-31 08:10:50","endLine":769,"groupId":"10483","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"closeCQ","params":"(VMvm@finalStringcqName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void closeCQ(VM vm, final String cqName) {\n    vm.invoke(() -> {\n      \r\n      QueryService cqService = getCache().getQueryService();\n\n      \r\n      CqQuery cq1 = cqService.getCq(cqName);\n      cq1.close();\n\n      assertThat(cq1.getState().isClosed()).describedAs(\"Close CQ state mismatch\").isTrue();\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":758,"status":"N"},{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public void testCQPerf() {\n\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    cqDUnitTest.createServer(server);\n\n    final int port = server.invoke(CqQueryDUnitTest::getCacheServerPort);\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n    final String cqName = \"testCQPerf_0\";\n\n    client.invoke(() -> {\n      logger.info(\"### Create CQ. ###\" + cqName);\n      \r\n      QueryService cqService =\n          getCache().getQueryService();\n\n      \r\n      CqAttributesFactory cqf = new CqAttributesFactory();\n      CqListener[] cqListeners = {new CqTimeTestListener(LogWriterUtils.getLogWriter())};\n      ((CqTimeTestListener) cqListeners[0]).cqName = cqName;\n\n      cqf.initCqListeners(cqListeners);\n      CqAttributes cqa = cqf.create();\n\n      \r\n      CqQuery cq1 = cqService.newCq(cqName, cqDUnitTest.cqs[0], cqa);\n      assertThat(cq1.getState().isStopped()).describedAs(\"newCq() state mismatch\").isTrue();\n      cq1.execute();\n    });\n\n    final int size = 50;\n\n    \r\n    cqDUnitTest.createValuesWithTime(client, cqDUnitTest.regions[0], size);\n\n    Wait.pause(5000);\n\n    \r\n    cqDUnitTest.createValuesWithTime(client, cqDUnitTest.regions[0], size);\n\n    client.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      @Override\n      public void run2() throws CacheException {\n        logger.info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = getCache().getQueryService();\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        assertThat(cQuery).isNotNull();\n\n      }\n    });\n\n    Wait.pause(10 * 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n\n  }\n","date":"2019-01-12 07:53:54","endLine":150,"groupId":"10483","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCQPerf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/4d/7cd48c02a922a60c270a0909cd99258a8476c4.src","preCode":"  public void testCQPerf() {\n\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    cqDUnitTest.createServer(server);\n\n    final int port = server.invoke(CqQueryDUnitTest::getCacheServerPort);\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    cqDUnitTest.createClient(client, port, host0);\n    final String cqName = \"testCQPerf_0\";\n\n    client.invoke(() -> {\n      logger.info(\"### Create CQ. ###\" + cqName);\n      \r\n      QueryService cqService =\n          getCache().getQueryService();\n\n      \r\n      CqAttributesFactory cqf = new CqAttributesFactory();\n      CqListener[] cqListeners = {new CqTimeTestListener(LogWriterUtils.getLogWriter())};\n      ((CqTimeTestListener) cqListeners[0]).cqName = cqName;\n\n      cqf.initCqListeners(cqListeners);\n      CqAttributes cqa = cqf.create();\n\n      \r\n      CqQuery cq1 = cqService.newCq(cqName, cqDUnitTest.cqs[0], cqa);\n      assertThat(cq1.getState().isStopped()).describedAs(\"newCq() state mismatch\").isTrue();\n      cq1.execute();\n    });\n\n    final int size = 50;\n\n    \r\n    cqDUnitTest.createValuesWithTime(client, cqDUnitTest.regions[0], size);\n\n    Wait.pause(5000);\n\n    \r\n    cqDUnitTest.createValuesWithTime(client, cqDUnitTest.regions[0], size);\n\n    client.invoke(new CacheSerializableRunnable(\"Validate CQs\") {\n      public void run2() throws CacheException {\n        logger.info(\"### Validating CQ. ### \" + cqName);\n        \r\n        QueryService cqService = getCache().getQueryService();\n\n        CqQuery cQuery = cqService.getCq(cqName);\n        assertThat(cQuery).isNotNull();\n\n      }\n    });\n\n    Wait.pause(10 * 60 * 1000);\n\n    \r\n    cqDUnitTest.closeClient(client);\n    cqDUnitTest.closeServer(server);\n\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqPerfDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"}]
