[{"authorTime":"2019-10-22 00:25:45","codes":[{"authorDate":"2019-10-22 05:22:49","commitOrder":2,"curCode":"  public void setUp() throws IOException {\n    int[] availablePorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n\n    locatorPort = availablePorts[0];\n    int serverPort = availablePorts[1];\n\n    Path serviceJarPath = serviceJarRule.createJarFor(\"metrics-publishing-service.jar\",\n        MetricsPublishingService.class, SimpleMetricsPublishingService.class);\n\n    Path functionsJarPath = temporaryFolder.getRoot().toPath()\n        .resolve(\"functions.jar\").toAbsolutePath();\n    writeJarFromClasses(functionsJarPath.toFile(),\n        GetFunctionExecutionTimerValues.class, FunctionToTimeWithoutResult.class,\n        ExecutionsTimerValues.class, ThreadSleep.class);\n\n    String startLocatorCommand = String.join(\" \",\n        \"start locator\",\n        \"--name=\" + \"locator\",\n        \"--dir=\" + temporaryFolder.newFolder(\"locator\").getAbsolutePath(),\n        \"--port=\" + locatorPort);\n\n    String serverName = \"server1\";\n    String startServerCommand =\n        startServerCommand(serverName, serverPort, serviceJarPath, functionsJarPath);\n\n    String replicateRegionName = \"ReplicateRegion\";\n    String createReplicateRegionCommand = String.join(\" \",\n        \"create region\",\n        \"--type=REPLICATE\",\n        \"--name=\" + replicateRegionName);\n\n    String partitionRegionName = \"PartitionRegion\";\n    String createPartitionRegionCommand = String.join(\" \",\n        \"create region\",\n        \"--type=PARTITION\",\n        \"--name=\" + partitionRegionName);\n\n    gfshRule.execute(startLocatorCommand, startServerCommand, createReplicateRegionCommand,\n        createPartitionRegionCommand);\n\n    clientCache = new ClientCacheFactory()\n        .addPoolLocator(\"localhost\", locatorPort)\n        .create();\n\n    replicateRegion = clientCache\n        .createClientRegionFactory(ClientRegionShortcut.PROXY)\n        .create(replicateRegionName);\n\n    partitionRegion = clientCache\n        .createClientRegionFactory(ClientRegionShortcut.PROXY)\n        .create(partitionRegionName);\n\n    functionWithNoResult = new FunctionToTimeWithoutResult();\n    functionDuration = Duration.ofSeconds(1);\n  }\n","date":"2019-10-24 00:20:43","endLine":125,"groupId":"28281","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/71/19b92e856ecce68ebb3ec73b829ac46b2717cf.src","preCode":"  public void setUp() throws IOException {\n    int[] availablePorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n\n    locatorPort = availablePorts[0];\n    int serverPort = availablePorts[1];\n\n    Path serviceJarPath = serviceJarRule.createJarFor(\"metrics-publishing-service.jar\",\n        MetricsPublishingService.class, SimpleMetricsPublishingService.class);\n\n    Path functionsJarPath = temporaryFolder.getRoot().toPath()\n        .resolve(\"functions.jar\").toAbsolutePath();\n    writeJarFromClasses(functionsJarPath.toFile(),\n        GetFunctionExecutionTimerValues.class, FunctionToTimeWithoutResult.class,\n        ExecutionsTimerValues.class, ThreadSleep.class);\n\n    String startLocatorCommand = String.join(\" \",\n        \"start locator\",\n        \"--name=\" + \"locator\",\n        \"--dir=\" + temporaryFolder.newFolder(\"locator\").getAbsolutePath(),\n        \"--port=\" + locatorPort);\n\n    String serverName = \"server1\";\n    String startServerCommand =\n        startServerCommand(serverName, serverPort, serviceJarPath, functionsJarPath);\n\n    String replicateRegionName = \"ReplicateRegion\";\n    String createReplicateRegionCommand = String.join(\" \",\n        \"create region\",\n        \"--type=REPLICATE\",\n        \"--name=\" + replicateRegionName);\n\n    String partitionRegionName = \"PartitionRegion\";\n    String createPartitionRegionCommand = String.join(\" \",\n        \"create region\",\n        \"--type=PARTITION\",\n        \"--name=\" + partitionRegionName);\n\n    gfshRule.execute(startLocatorCommand, startServerCommand, createReplicateRegionCommand,\n        createPartitionRegionCommand);\n\n    clientCache = new ClientCacheFactory()\n        .addPoolLocator(\"localhost\", locatorPort)\n        .create();\n\n    replicateRegion = clientCache\n        .createClientRegionFactory(ClientRegionShortcut.PROXY)\n        .create(replicateRegionName);\n\n    partitionRegion = clientCache\n        .createClientRegionFactory(ClientRegionShortcut.PROXY)\n        .create(partitionRegionName);\n\n    functionWithNoResult = new FunctionToTimeWithoutResult();\n    functionDuration = Duration.ofSeconds(1);\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/function/executions/FunctionExecutionsTimerNoResultTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"MB"},{"authorDate":"2019-10-22 00:25:45","commitOrder":2,"curCode":"  private String startServerCommand(String serverName, int serverPort, Path serviceJarPath,\n      Path functionsJarPath)\n      throws IOException {\n    return String.join(\" \",\n        \"start server\",\n        \"--name=\" + serverName,\n        \"--groups=\" + serverName,\n        \"--dir=\" + temporaryFolder.newFolder(serverName).getAbsolutePath(),\n        \"--server-port=\" + serverPort,\n        \"--locators=localhost[\" + locatorPort + \"]\",\n        \"--classpath=\" + serviceJarPath + pathSeparatorChar + functionsJarPath);\n  }\n","date":"2019-10-22 00:25:45","endLine":251,"groupId":"46879","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"startServerCommand","params":"(StringserverName@intserverPort@PathserviceJarPath@PathfunctionsJarPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/10/e0347e2fdd9d2fdb3c99f9c93eaf3c4b0e8ba1.src","preCode":"  private String startServerCommand(String serverName, int serverPort, Path serviceJarPath,\n      Path functionsJarPath)\n      throws IOException {\n    return String.join(\" \",\n        \"start server\",\n        \"--name=\" + serverName,\n        \"--groups=\" + serverName,\n        \"--dir=\" + temporaryFolder.newFolder(serverName).getAbsolutePath(),\n        \"--server-port=\" + serverPort,\n        \"--locators=localhost[\" + locatorPort + \"]\",\n        \"--classpath=\" + serviceJarPath + pathSeparatorChar + functionsJarPath);\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/function/executions/FunctionExecutionsTimerNoResultTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"NB"}],"commitId":"7c70b61d8510ce5c79246f21e9a0bb8cfd452439","commitMessage":"@@@GEODE-7184: Fix failing windows CI jobs\n\nThread.sleep() is not guaranteed to sleep for the given duration. Add\nnew method for testing which sleeps for at least as long as the given\nduration.\n\nCo-authored-by: Aaron Lindsey <alindsey@pivotal.io>\nCo-authored-by: Kirk Lund <klund@apache.org>\n","date":"2019-10-24 00:20:43","modifiedFileCount":"5","status":"M","submitter":"Aaron Lindsey"},{"authorTime":"2019-10-22 00:25:45","codes":[{"authorDate":"2019-10-30 07:04:44","commitOrder":3,"curCode":"  public void setUp() throws IOException {\n    int[] availablePorts = AvailablePortHelper.getRandomAvailableTCPPorts(3);\n\n    locatorPort = availablePorts[0];\n    int locatorJmxPort = availablePorts[1];\n    int serverPort = availablePorts[2];\n\n    Path serviceJarPath = serviceJarRule.createJarFor(\"metrics-publishing-service.jar\",\n        MetricsPublishingService.class, SimpleMetricsPublishingService.class);\n\n    Path functionsJarPath = temporaryFolder.getRoot().toPath()\n        .resolve(\"functions.jar\").toAbsolutePath();\n    writeJarFromClasses(functionsJarPath.toFile(),\n        GetFunctionExecutionTimerValues.class, FunctionToTimeWithoutResult.class,\n        ExecutionsTimerValues.class, ThreadSleep.class);\n\n    String startLocatorCommand = String.join(\" \",\n        \"start locator\",\n        \"--name=\" + \"locator\",\n        \"--dir=\" + temporaryFolder.newFolder(\"locator\").getAbsolutePath(),\n        \"--port=\" + locatorPort,\n        \"--http-service-port=0\",\n        \"--J=-Dgemfire.jmx-manager-port=\" + locatorJmxPort);\n\n    String serverName = \"server1\";\n    String startServerCommand =\n        startServerCommand(serverName, serverPort, serviceJarPath, functionsJarPath);\n\n    String replicateRegionName = \"ReplicateRegion\";\n    String createReplicateRegionCommand = String.join(\" \",\n        \"create region\",\n        \"--type=REPLICATE\",\n        \"--name=\" + replicateRegionName);\n\n    String partitionRegionName = \"PartitionRegion\";\n    String createPartitionRegionCommand = String.join(\" \",\n        \"create region\",\n        \"--type=PARTITION\",\n        \"--name=\" + partitionRegionName);\n\n    gfshRule.execute(startLocatorCommand, startServerCommand, createReplicateRegionCommand,\n        createPartitionRegionCommand);\n\n    clientCache = new ClientCacheFactory()\n        .addPoolLocator(\"localhost\", locatorPort)\n        .create();\n\n    replicateRegion = clientCache\n        .createClientRegionFactory(ClientRegionShortcut.PROXY)\n        .create(replicateRegionName);\n\n    partitionRegion = clientCache\n        .createClientRegionFactory(ClientRegionShortcut.PROXY)\n        .create(partitionRegionName);\n\n    functionWithNoResult = new FunctionToTimeWithoutResult();\n    functionDuration = Duration.ofSeconds(1);\n  }\n","date":"2019-10-30 07:04:44","endLine":128,"groupId":"101290","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/72/192e65cc1cba0abaf0a2013d731458c0014116.src","preCode":"  public void setUp() throws IOException {\n    int[] availablePorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n\n    locatorPort = availablePorts[0];\n    int serverPort = availablePorts[1];\n\n    Path serviceJarPath = serviceJarRule.createJarFor(\"metrics-publishing-service.jar\",\n        MetricsPublishingService.class, SimpleMetricsPublishingService.class);\n\n    Path functionsJarPath = temporaryFolder.getRoot().toPath()\n        .resolve(\"functions.jar\").toAbsolutePath();\n    writeJarFromClasses(functionsJarPath.toFile(),\n        GetFunctionExecutionTimerValues.class, FunctionToTimeWithoutResult.class,\n        ExecutionsTimerValues.class, ThreadSleep.class);\n\n    String startLocatorCommand = String.join(\" \",\n        \"start locator\",\n        \"--name=\" + \"locator\",\n        \"--dir=\" + temporaryFolder.newFolder(\"locator\").getAbsolutePath(),\n        \"--port=\" + locatorPort);\n\n    String serverName = \"server1\";\n    String startServerCommand =\n        startServerCommand(serverName, serverPort, serviceJarPath, functionsJarPath);\n\n    String replicateRegionName = \"ReplicateRegion\";\n    String createReplicateRegionCommand = String.join(\" \",\n        \"create region\",\n        \"--type=REPLICATE\",\n        \"--name=\" + replicateRegionName);\n\n    String partitionRegionName = \"PartitionRegion\";\n    String createPartitionRegionCommand = String.join(\" \",\n        \"create region\",\n        \"--type=PARTITION\",\n        \"--name=\" + partitionRegionName);\n\n    gfshRule.execute(startLocatorCommand, startServerCommand, createReplicateRegionCommand,\n        createPartitionRegionCommand);\n\n    clientCache = new ClientCacheFactory()\n        .addPoolLocator(\"localhost\", locatorPort)\n        .create();\n\n    replicateRegion = clientCache\n        .createClientRegionFactory(ClientRegionShortcut.PROXY)\n        .create(replicateRegionName);\n\n    partitionRegion = clientCache\n        .createClientRegionFactory(ClientRegionShortcut.PROXY)\n        .create(partitionRegionName);\n\n    functionWithNoResult = new FunctionToTimeWithoutResult();\n    functionDuration = Duration.ofSeconds(1);\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/function/executions/FunctionExecutionsTimerNoResultTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2019-10-22 00:25:45","commitOrder":3,"curCode":"  private String startServerCommand(String serverName, int serverPort, Path serviceJarPath,\n      Path functionsJarPath)\n      throws IOException {\n    return String.join(\" \",\n        \"start server\",\n        \"--name=\" + serverName,\n        \"--groups=\" + serverName,\n        \"--dir=\" + temporaryFolder.newFolder(serverName).getAbsolutePath(),\n        \"--server-port=\" + serverPort,\n        \"--locators=localhost[\" + locatorPort + \"]\",\n        \"--classpath=\" + serviceJarPath + pathSeparatorChar + functionsJarPath);\n  }\n","date":"2019-10-22 00:25:45","endLine":251,"groupId":"101290","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"startServerCommand","params":"(StringserverName@intserverPort@PathserviceJarPath@PathfunctionsJarPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/10/e0347e2fdd9d2fdb3c99f9c93eaf3c4b0e8ba1.src","preCode":"  private String startServerCommand(String serverName, int serverPort, Path serviceJarPath,\n      Path functionsJarPath)\n      throws IOException {\n    return String.join(\" \",\n        \"start server\",\n        \"--name=\" + serverName,\n        \"--groups=\" + serverName,\n        \"--dir=\" + temporaryFolder.newFolder(serverName).getAbsolutePath(),\n        \"--server-port=\" + serverPort,\n        \"--locators=localhost[\" + locatorPort + \"]\",\n        \"--classpath=\" + serviceJarPath + pathSeparatorChar + functionsJarPath);\n  }\n","realPath":"geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/function/executions/FunctionExecutionsTimerNoResultTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"N"}],"commitId":"000073d1b0c2bb3a7cd331f6473e3b8600fc5da2","commitMessage":"@@@GEODE-7375: Fix metrics test port allocation (#4248)\n\nSome metrics acceptance tests uses hard-coded ports.  and others used\ndefault ports for various processes. This caused failures in CI on\nWindows.\n\nThese tests have been updated to allocate random ports.\n\nCo-authored-by: Dale Emery <demery@pivotal.io>\nCo-authored-by: Kirk Lund <klund@apache.org>","date":"2019-10-30 07:04:44","modifiedFileCount":"9","status":"M","submitter":"Dale Emery"}]
