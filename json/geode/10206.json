[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testPutPostOpNotifications() throws Exception {\n    OperationWithAction[] allOps = allOps();\n\n    AuthzCredentialGenerator gen = this.getXmlAuthzGenerator();\n    CredentialGenerator cGen = gen.getCredentialGenerator();\n    Properties extraAuthProps = cGen.getSystemProperties();\n    Properties javaProps = cGen.getJavaProperties();\n    Properties extraAuthzProps = gen.getSystemProperties();\n    String authenticator = cGen.getAuthenticator();\n    String authInit = cGen.getAuthInit();\n    String accessor = gen.getAuthorizationCallback();\n    TestAuthzCredentialGenerator tgen = new TestAuthzCredentialGenerator(gen);\n\n    getLogWriter().info(\"testAllOpsNotifications: Using authinit: \" + authInit);\n    getLogWriter().info(\"testAllOpsNotifications: Using authenticator: \" + authenticator);\n    getLogWriter().info(\"testAllOpsNotifications: Using accessor: \" + accessor);\n\n    \r\n    Properties serverProps =\n        buildProperties(authenticator, accessor, true, extraAuthProps, extraAuthzProps);\n\n    \r\n    int[] randomAvailableTCPPorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n    int port1 = randomAvailableTCPPorts[0];\n    int port2 = randomAvailableTCPPorts[1];\n\n    \r\n    List opBlock = new ArrayList();\n    Random rnd = new Random();\n\n    for (int opNum = 0; opNum < allOps.length; ++opNum) {\n      \r\n      OperationWithAction currentOp = allOps[opNum];\n      if (currentOp.equals(OperationWithAction.OPBLOCK_END)\n          || currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n\n        \r\n        if (opBlock.size() > 0) {\n          \r\n          server1.invoke(() -> ClientAuthorizationTestCase.createCacheServer(getLocatorPort(),\n              port1, serverProps, javaProps));\n          server2.invoke(() -> closeCache());\n\n          executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n              rnd);\n\n          if (!currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n            \r\n            server2.invoke(() -> ClientAuthorizationTestCase.createCacheServer(getLocatorPort(),\n                port2, serverProps, javaProps));\n            server1.invoke(() -> closeCache());\n\n            executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                rnd);\n          }\n\n          opBlock.clear();\n        }\n\n      } else {\n        currentOp.setOpNum(opNum);\n        opBlock.add(currentOp);\n      }\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":133,"groupId":"6968","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPutPostOpNotifications","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2f/3947d30b48a782115561a6724fb41a89f8382e.src","preCode":"  public void testPutPostOpNotifications() throws Exception {\n    OperationWithAction[] allOps = allOps();\n\n    AuthzCredentialGenerator gen = this.getXmlAuthzGenerator();\n    CredentialGenerator cGen = gen.getCredentialGenerator();\n    Properties extraAuthProps = cGen.getSystemProperties();\n    Properties javaProps = cGen.getJavaProperties();\n    Properties extraAuthzProps = gen.getSystemProperties();\n    String authenticator = cGen.getAuthenticator();\n    String authInit = cGen.getAuthInit();\n    String accessor = gen.getAuthorizationCallback();\n    TestAuthzCredentialGenerator tgen = new TestAuthzCredentialGenerator(gen);\n\n    getLogWriter().info(\"testAllOpsNotifications: Using authinit: \" + authInit);\n    getLogWriter().info(\"testAllOpsNotifications: Using authenticator: \" + authenticator);\n    getLogWriter().info(\"testAllOpsNotifications: Using accessor: \" + accessor);\n\n    \r\n    Properties serverProps =\n        buildProperties(authenticator, accessor, true, extraAuthProps, extraAuthzProps);\n\n    \r\n    int[] randomAvailableTCPPorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n    int port1 = randomAvailableTCPPorts[0];\n    int port2 = randomAvailableTCPPorts[1];\n\n    \r\n    List opBlock = new ArrayList();\n    Random rnd = new Random();\n\n    for (int opNum = 0; opNum < allOps.length; ++opNum) {\n      \r\n      OperationWithAction currentOp = allOps[opNum];\n      if (currentOp.equals(OperationWithAction.OPBLOCK_END)\n          || currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n\n        \r\n        if (opBlock.size() > 0) {\n          \r\n          server1.invoke(() -> ClientAuthorizationTestCase.createCacheServer(getLocatorPort(),\n              port1, serverProps, javaProps));\n          server2.invoke(() -> closeCache());\n\n          executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n              rnd);\n\n          if (!currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n            \r\n            server2.invoke(() -> ClientAuthorizationTestCase.createCacheServer(getLocatorPort(),\n                port2, serverProps, javaProps));\n            server1.invoke(() -> closeCache());\n\n            executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                rnd);\n          }\n\n          opBlock.clear();\n        }\n\n      } else {\n        currentOp.setOpNum(opNum);\n        opBlock.add(currentOp);\n      }\n    }\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/security/DeltaClientPostAuthorizationDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testAllPostOps() throws Exception {\n    OperationWithAction[] allOps = allOpsForTestAllPostOps();\n\n    for (Iterator<AuthzCredentialGenerator> iter = getDummyGeneratorCombos().iterator(); iter\n        .hasNext();) {\n      AuthzCredentialGenerator gen = iter.next();\n      CredentialGenerator cGen = gen.getCredentialGenerator();\n      Properties extraAuthProps = cGen.getSystemProperties();\n      Properties javaProps = cGen.getJavaProperties();\n      Properties extraAuthzProps = gen.getSystemProperties();\n      String authenticator = cGen.getAuthenticator();\n      String authInit = cGen.getAuthInit();\n      String accessor = gen.getAuthorizationCallback();\n      TestAuthzCredentialGenerator tgen = new TestAuthzCredentialGenerator(gen);\n\n      getLogWriter().info(\"testAllPostOps: Using authinit: \" + authInit);\n      getLogWriter().info(\"testAllPostOps: Using authenticator: \" + authenticator);\n      getLogWriter().info(\"testAllPostOps: Using accessor: \" + accessor);\n\n      \r\n      Properties serverProps =\n          buildProperties(authenticator, accessor, true, extraAuthProps, extraAuthzProps);\n\n      \r\n      int[] randomAvailableTCPPorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n      int port1 = randomAvailableTCPPorts[0];\n      int port2 = randomAvailableTCPPorts[1];\n\n      \r\n      server1.invoke(() -> closeCache());\n      server2.invoke(() -> closeCache());\n\n      \r\n      List opBlock = new ArrayList();\n      Random rnd = new Random();\n\n      for (int opNum = 0; opNum < allOps.length; ++opNum) {\n        \r\n        OperationWithAction currentOp = allOps[opNum];\n        if (currentOp.equals(OperationWithAction.OPBLOCK_END)\n            || currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n          \r\n          if (opBlock.size() > 0) {\n            \r\n            server1\n                .invoke(() -> createCacheServer(getLocatorPort(), port1, serverProps, javaProps));\n            server2.invoke(() -> closeCache());\n            executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                rnd);\n            if (!currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n              \r\n              server2\n                  .invoke(() -> createCacheServer(getLocatorPort(), port2, serverProps, javaProps));\n              server1.invoke(() -> closeCache());\n              executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                  rnd);\n            }\n            opBlock.clear();\n          }\n\n        } else {\n          currentOp.setOpNum(opNum);\n          opBlock.add(currentOp);\n        }\n      }\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":113,"groupId":"24082","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllPostOps","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/0d/a7d45ddf2d6cc2a602a0ad5cc091525e0edfee.src","preCode":"  public void testAllPostOps() throws Exception {\n    OperationWithAction[] allOps = allOpsForTestAllPostOps();\n\n    for (Iterator<AuthzCredentialGenerator> iter = getDummyGeneratorCombos().iterator(); iter\n        .hasNext();) {\n      AuthzCredentialGenerator gen = iter.next();\n      CredentialGenerator cGen = gen.getCredentialGenerator();\n      Properties extraAuthProps = cGen.getSystemProperties();\n      Properties javaProps = cGen.getJavaProperties();\n      Properties extraAuthzProps = gen.getSystemProperties();\n      String authenticator = cGen.getAuthenticator();\n      String authInit = cGen.getAuthInit();\n      String accessor = gen.getAuthorizationCallback();\n      TestAuthzCredentialGenerator tgen = new TestAuthzCredentialGenerator(gen);\n\n      getLogWriter().info(\"testAllPostOps: Using authinit: \" + authInit);\n      getLogWriter().info(\"testAllPostOps: Using authenticator: \" + authenticator);\n      getLogWriter().info(\"testAllPostOps: Using accessor: \" + accessor);\n\n      \r\n      Properties serverProps =\n          buildProperties(authenticator, accessor, true, extraAuthProps, extraAuthzProps);\n\n      \r\n      int[] randomAvailableTCPPorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n      int port1 = randomAvailableTCPPorts[0];\n      int port2 = randomAvailableTCPPorts[1];\n\n      \r\n      server1.invoke(() -> closeCache());\n      server2.invoke(() -> closeCache());\n\n      \r\n      List opBlock = new ArrayList();\n      Random rnd = new Random();\n\n      for (int opNum = 0; opNum < allOps.length; ++opNum) {\n        \r\n        OperationWithAction currentOp = allOps[opNum];\n        if (currentOp.equals(OperationWithAction.OPBLOCK_END)\n            || currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n          \r\n          if (opBlock.size() > 0) {\n            \r\n            server1\n                .invoke(() -> createCacheServer(getLocatorPort(), port1, serverProps, javaProps));\n            server2.invoke(() -> closeCache());\n            executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                rnd);\n            if (!currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n              \r\n              server2\n                  .invoke(() -> createCacheServer(getLocatorPort(), port2, serverProps, javaProps));\n              server1.invoke(() -> closeCache());\n              executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                  rnd);\n            }\n            opBlock.clear();\n          }\n\n        } else {\n          currentOp.setOpNum(opNum);\n          opBlock.add(currentOp);\n        }\n      }\n    }\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/security/ClientPostAuthorizationDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-08-08 23:44:43","codes":[{"authorDate":"2018-08-08 23:44:43","commitOrder":2,"curCode":"  public void testPutPostOpNotifications() throws Exception {\n    OperationWithAction[] allOps = allOps();\n\n    AuthzCredentialGenerator gen = this.getXmlAuthzGenerator();\n    CredentialGenerator cGen = gen.getCredentialGenerator();\n    Properties extraAuthProps = cGen.getSystemProperties();\n    Properties javaProps = cGen.getJavaProperties();\n    Properties extraAuthzProps = gen.getSystemProperties();\n    String authenticator = cGen.getAuthenticator();\n    String authInit = cGen.getAuthInit();\n    String accessor = gen.getAuthorizationCallback();\n    TestAuthzCredentialGenerator tgen = new TestAuthzCredentialGenerator(gen);\n\n    getLogWriter().info(\"testAllOpsNotifications: Using authinit: \" + authInit);\n    getLogWriter().info(\"testAllOpsNotifications: Using authenticator: \" + authenticator);\n    getLogWriter().info(\"testAllOpsNotifications: Using accessor: \" + accessor);\n\n    \r\n    Properties serverProps =\n        buildProperties(authenticator, accessor, true, extraAuthProps, extraAuthzProps);\n\n    \r\n    int[] randomAvailableTCPPorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n    int port1 = randomAvailableTCPPorts[0];\n    int port2 = randomAvailableTCPPorts[1];\n\n    \r\n    List opBlock = new ArrayList();\n    Random rnd = new Random();\n\n    for (int opNum = 0; opNum < allOps.length; ++opNum) {\n      \r\n      OperationWithAction currentOp = allOps[opNum];\n      if (currentOp.equals(OperationWithAction.OPBLOCK_END)\n          || currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n\n        \r\n        if (opBlock.size() > 0) {\n          \r\n          server1.invoke(\n              () -> ClientAuthorizationTestCase.createCacheServer(port1, serverProps, javaProps));\n          server2.invoke(() -> closeCache());\n\n          executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n              rnd);\n\n          if (!currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n            \r\n            server2.invoke(\n                () -> ClientAuthorizationTestCase.createCacheServer(port2, serverProps, javaProps));\n            server1.invoke(() -> closeCache());\n\n            executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                rnd);\n          }\n\n          opBlock.clear();\n        }\n\n      } else {\n        currentOp.setOpNum(opNum);\n        opBlock.add(currentOp);\n      }\n    }\n  }\n","date":"2018-08-08 23:44:43","endLine":132,"groupId":"6968","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPutPostOpNotifications","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/65/8bff0dc5bf2c0d3885175d4e43bfd957aa40ce.src","preCode":"  public void testPutPostOpNotifications() throws Exception {\n    OperationWithAction[] allOps = allOps();\n\n    AuthzCredentialGenerator gen = this.getXmlAuthzGenerator();\n    CredentialGenerator cGen = gen.getCredentialGenerator();\n    Properties extraAuthProps = cGen.getSystemProperties();\n    Properties javaProps = cGen.getJavaProperties();\n    Properties extraAuthzProps = gen.getSystemProperties();\n    String authenticator = cGen.getAuthenticator();\n    String authInit = cGen.getAuthInit();\n    String accessor = gen.getAuthorizationCallback();\n    TestAuthzCredentialGenerator tgen = new TestAuthzCredentialGenerator(gen);\n\n    getLogWriter().info(\"testAllOpsNotifications: Using authinit: \" + authInit);\n    getLogWriter().info(\"testAllOpsNotifications: Using authenticator: \" + authenticator);\n    getLogWriter().info(\"testAllOpsNotifications: Using accessor: \" + accessor);\n\n    \r\n    Properties serverProps =\n        buildProperties(authenticator, accessor, true, extraAuthProps, extraAuthzProps);\n\n    \r\n    int[] randomAvailableTCPPorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n    int port1 = randomAvailableTCPPorts[0];\n    int port2 = randomAvailableTCPPorts[1];\n\n    \r\n    List opBlock = new ArrayList();\n    Random rnd = new Random();\n\n    for (int opNum = 0; opNum < allOps.length; ++opNum) {\n      \r\n      OperationWithAction currentOp = allOps[opNum];\n      if (currentOp.equals(OperationWithAction.OPBLOCK_END)\n          || currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n\n        \r\n        if (opBlock.size() > 0) {\n          \r\n          server1.invoke(() -> ClientAuthorizationTestCase.createCacheServer(getLocatorPort(),\n              port1, serverProps, javaProps));\n          server2.invoke(() -> closeCache());\n\n          executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n              rnd);\n\n          if (!currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n            \r\n            server2.invoke(() -> ClientAuthorizationTestCase.createCacheServer(getLocatorPort(),\n                port2, serverProps, javaProps));\n            server1.invoke(() -> closeCache());\n\n            executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                rnd);\n          }\n\n          opBlock.clear();\n        }\n\n      } else {\n        currentOp.setOpNum(opNum);\n        opBlock.add(currentOp);\n      }\n    }\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/security/DeltaClientPostAuthorizationDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2018-08-08 23:44:43","commitOrder":2,"curCode":"  public void testAllPostOps() throws Exception {\n    OperationWithAction[] allOps = allOpsForTestAllPostOps();\n\n    for (Iterator<AuthzCredentialGenerator> iter = getDummyGeneratorCombos().iterator(); iter\n        .hasNext();) {\n      AuthzCredentialGenerator gen = iter.next();\n      CredentialGenerator cGen = gen.getCredentialGenerator();\n      Properties extraAuthProps = cGen.getSystemProperties();\n      Properties javaProps = cGen.getJavaProperties();\n      Properties extraAuthzProps = gen.getSystemProperties();\n      String authenticator = cGen.getAuthenticator();\n      String authInit = cGen.getAuthInit();\n      String accessor = gen.getAuthorizationCallback();\n      TestAuthzCredentialGenerator tgen = new TestAuthzCredentialGenerator(gen);\n\n      getLogWriter().info(\"testAllPostOps: Using authinit: \" + authInit);\n      getLogWriter().info(\"testAllPostOps: Using authenticator: \" + authenticator);\n      getLogWriter().info(\"testAllPostOps: Using accessor: \" + accessor);\n\n      \r\n      Properties serverProps =\n          buildProperties(authenticator, accessor, true, extraAuthProps, extraAuthzProps);\n\n      \r\n      int[] randomAvailableTCPPorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n      int port1 = randomAvailableTCPPorts[0];\n      int port2 = randomAvailableTCPPorts[1];\n\n      \r\n      server1.invoke(() -> closeCache());\n      server2.invoke(() -> closeCache());\n\n      \r\n      List opBlock = new ArrayList();\n      Random rnd = new Random();\n\n      for (int opNum = 0; opNum < allOps.length; ++opNum) {\n        \r\n        OperationWithAction currentOp = allOps[opNum];\n        if (currentOp.equals(OperationWithAction.OPBLOCK_END)\n            || currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n          \r\n          if (opBlock.size() > 0) {\n            \r\n            server1\n                .invoke(() -> createCacheServer(port1, serverProps, javaProps));\n            server2.invoke(() -> closeCache());\n            executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                rnd);\n            if (!currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n              \r\n              server2\n                  .invoke(() -> createCacheServer(port2, serverProps, javaProps));\n              server1.invoke(() -> closeCache());\n              executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                  rnd);\n            }\n            opBlock.clear();\n          }\n\n        } else {\n          currentOp.setOpNum(opNum);\n          opBlock.add(currentOp);\n        }\n      }\n    }\n  }\n","date":"2018-08-08 23:44:43","endLine":111,"groupId":"24082","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllPostOps","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/31/abe72a8f93d8ae26f360a28df1ca84da854609.src","preCode":"  public void testAllPostOps() throws Exception {\n    OperationWithAction[] allOps = allOpsForTestAllPostOps();\n\n    for (Iterator<AuthzCredentialGenerator> iter = getDummyGeneratorCombos().iterator(); iter\n        .hasNext();) {\n      AuthzCredentialGenerator gen = iter.next();\n      CredentialGenerator cGen = gen.getCredentialGenerator();\n      Properties extraAuthProps = cGen.getSystemProperties();\n      Properties javaProps = cGen.getJavaProperties();\n      Properties extraAuthzProps = gen.getSystemProperties();\n      String authenticator = cGen.getAuthenticator();\n      String authInit = cGen.getAuthInit();\n      String accessor = gen.getAuthorizationCallback();\n      TestAuthzCredentialGenerator tgen = new TestAuthzCredentialGenerator(gen);\n\n      getLogWriter().info(\"testAllPostOps: Using authinit: \" + authInit);\n      getLogWriter().info(\"testAllPostOps: Using authenticator: \" + authenticator);\n      getLogWriter().info(\"testAllPostOps: Using accessor: \" + accessor);\n\n      \r\n      Properties serverProps =\n          buildProperties(authenticator, accessor, true, extraAuthProps, extraAuthzProps);\n\n      \r\n      int[] randomAvailableTCPPorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n      int port1 = randomAvailableTCPPorts[0];\n      int port2 = randomAvailableTCPPorts[1];\n\n      \r\n      server1.invoke(() -> closeCache());\n      server2.invoke(() -> closeCache());\n\n      \r\n      List opBlock = new ArrayList();\n      Random rnd = new Random();\n\n      for (int opNum = 0; opNum < allOps.length; ++opNum) {\n        \r\n        OperationWithAction currentOp = allOps[opNum];\n        if (currentOp.equals(OperationWithAction.OPBLOCK_END)\n            || currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n          \r\n          if (opBlock.size() > 0) {\n            \r\n            server1\n                .invoke(() -> createCacheServer(getLocatorPort(), port1, serverProps, javaProps));\n            server2.invoke(() -> closeCache());\n            executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                rnd);\n            if (!currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n              \r\n              server2\n                  .invoke(() -> createCacheServer(getLocatorPort(), port2, serverProps, javaProps));\n              server1.invoke(() -> closeCache());\n              executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                  rnd);\n            }\n            opBlock.clear();\n          }\n\n        } else {\n          currentOp.setOpNum(opNum);\n          opBlock.add(currentOp);\n        }\n      }\n    }\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/security/ClientPostAuthorizationDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"d89ac55c79e18e54b8748a62aa95759afdac16ef","commitMessage":"@@@GEODE-838: remove port conflict by always creating the cache server connecting to dunit locator (#2275)\n\n","date":"2018-08-08 23:44:43","modifiedFileCount":"14","status":"M","submitter":"jinmeiliao"},{"authorTime":"2019-06-04 23:00:52","codes":[{"authorDate":"2018-08-08 23:44:43","commitOrder":3,"curCode":"  public void testPutPostOpNotifications() throws Exception {\n    OperationWithAction[] allOps = allOps();\n\n    AuthzCredentialGenerator gen = this.getXmlAuthzGenerator();\n    CredentialGenerator cGen = gen.getCredentialGenerator();\n    Properties extraAuthProps = cGen.getSystemProperties();\n    Properties javaProps = cGen.getJavaProperties();\n    Properties extraAuthzProps = gen.getSystemProperties();\n    String authenticator = cGen.getAuthenticator();\n    String authInit = cGen.getAuthInit();\n    String accessor = gen.getAuthorizationCallback();\n    TestAuthzCredentialGenerator tgen = new TestAuthzCredentialGenerator(gen);\n\n    getLogWriter().info(\"testAllOpsNotifications: Using authinit: \" + authInit);\n    getLogWriter().info(\"testAllOpsNotifications: Using authenticator: \" + authenticator);\n    getLogWriter().info(\"testAllOpsNotifications: Using accessor: \" + accessor);\n\n    \r\n    Properties serverProps =\n        buildProperties(authenticator, accessor, true, extraAuthProps, extraAuthzProps);\n\n    \r\n    int[] randomAvailableTCPPorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n    int port1 = randomAvailableTCPPorts[0];\n    int port2 = randomAvailableTCPPorts[1];\n\n    \r\n    List opBlock = new ArrayList();\n    Random rnd = new Random();\n\n    for (int opNum = 0; opNum < allOps.length; ++opNum) {\n      \r\n      OperationWithAction currentOp = allOps[opNum];\n      if (currentOp.equals(OperationWithAction.OPBLOCK_END)\n          || currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n\n        \r\n        if (opBlock.size() > 0) {\n          \r\n          server1.invoke(\n              () -> ClientAuthorizationTestCase.createCacheServer(port1, serverProps, javaProps));\n          server2.invoke(() -> closeCache());\n\n          executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n              rnd);\n\n          if (!currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n            \r\n            server2.invoke(\n                () -> ClientAuthorizationTestCase.createCacheServer(port2, serverProps, javaProps));\n            server1.invoke(() -> closeCache());\n\n            executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                rnd);\n          }\n\n          opBlock.clear();\n        }\n\n      } else {\n        currentOp.setOpNum(opNum);\n        opBlock.add(currentOp);\n      }\n    }\n  }\n","date":"2018-08-08 23:44:43","endLine":132,"groupId":"10206","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPutPostOpNotifications","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/65/8bff0dc5bf2c0d3885175d4e43bfd957aa40ce.src","preCode":"  public void testPutPostOpNotifications() throws Exception {\n    OperationWithAction[] allOps = allOps();\n\n    AuthzCredentialGenerator gen = this.getXmlAuthzGenerator();\n    CredentialGenerator cGen = gen.getCredentialGenerator();\n    Properties extraAuthProps = cGen.getSystemProperties();\n    Properties javaProps = cGen.getJavaProperties();\n    Properties extraAuthzProps = gen.getSystemProperties();\n    String authenticator = cGen.getAuthenticator();\n    String authInit = cGen.getAuthInit();\n    String accessor = gen.getAuthorizationCallback();\n    TestAuthzCredentialGenerator tgen = new TestAuthzCredentialGenerator(gen);\n\n    getLogWriter().info(\"testAllOpsNotifications: Using authinit: \" + authInit);\n    getLogWriter().info(\"testAllOpsNotifications: Using authenticator: \" + authenticator);\n    getLogWriter().info(\"testAllOpsNotifications: Using accessor: \" + accessor);\n\n    \r\n    Properties serverProps =\n        buildProperties(authenticator, accessor, true, extraAuthProps, extraAuthzProps);\n\n    \r\n    int[] randomAvailableTCPPorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n    int port1 = randomAvailableTCPPorts[0];\n    int port2 = randomAvailableTCPPorts[1];\n\n    \r\n    List opBlock = new ArrayList();\n    Random rnd = new Random();\n\n    for (int opNum = 0; opNum < allOps.length; ++opNum) {\n      \r\n      OperationWithAction currentOp = allOps[opNum];\n      if (currentOp.equals(OperationWithAction.OPBLOCK_END)\n          || currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n\n        \r\n        if (opBlock.size() > 0) {\n          \r\n          server1.invoke(\n              () -> ClientAuthorizationTestCase.createCacheServer(port1, serverProps, javaProps));\n          server2.invoke(() -> closeCache());\n\n          executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n              rnd);\n\n          if (!currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n            \r\n            server2.invoke(\n                () -> ClientAuthorizationTestCase.createCacheServer(port2, serverProps, javaProps));\n            server1.invoke(() -> closeCache());\n\n            executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                rnd);\n          }\n\n          opBlock.clear();\n        }\n\n      } else {\n        currentOp.setOpNum(opNum);\n        opBlock.add(currentOp);\n      }\n    }\n  }\n","realPath":"geode-core/src/distributedTest/java/org/apache/geode/security/DeltaClientPostAuthorizationDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2019-06-04 23:00:52","commitOrder":3,"curCode":"  public void testAllPostOps() throws Exception {\n    OperationWithAction[] allOps = allOpsForTestAllPostOps();\n\n    for (Iterator<AuthzCredentialGenerator> iter = getDummyGeneratorCombos().iterator(); iter\n        .hasNext();) {\n      AuthzCredentialGenerator gen = iter.next();\n      CredentialGenerator cGen = gen.getCredentialGenerator();\n      Properties extraAuthProps = cGen.getSystemProperties();\n      Properties javaProps = cGen.getJavaProperties();\n      Properties extraAuthzProps = gen.getSystemProperties();\n      String authenticator = cGen.getAuthenticator();\n      String authInit = cGen.getAuthInit();\n      String accessor = gen.getAuthorizationCallback();\n      TestAuthzCredentialGenerator tgen = new TestAuthzCredentialGenerator(gen);\n\n      getLogWriter().info(\"testAllPostOps: Using authinit: \" + authInit);\n      getLogWriter().info(\"testAllPostOps: Using authenticator: \" + authenticator);\n      getLogWriter().info(\"testAllPostOps: Using accessor: \" + accessor);\n\n      \r\n      Properties serverProps =\n          buildProperties(authenticator, accessor, true, extraAuthProps, extraAuthzProps);\n\n      \r\n      int[] randomAvailableTCPPorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n      int port1 = randomAvailableTCPPorts[0];\n      int port2 = randomAvailableTCPPorts[1];\n\n      \r\n      server1.invoke(() -> closeCache());\n      server2.invoke(() -> closeCache());\n\n      \r\n      List<OperationWithAction> opBlock = new ArrayList<>();\n      Random rnd = new Random();\n\n      for (int opNum = 0; opNum < allOps.length; ++opNum) {\n        \r\n        OperationWithAction currentOp = allOps[opNum];\n        if (currentOp.equals(OperationWithAction.OPBLOCK_END)\n            || currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n          \r\n          if (opBlock.size() > 0) {\n            \r\n            server1\n                .invoke(() -> createCacheServer(port1, serverProps, javaProps));\n            server2.invoke(() -> closeCache());\n            executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                rnd);\n            if (!currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n              \r\n              server2\n                  .invoke(() -> createCacheServer(port2, serverProps, javaProps));\n              server1.invoke(() -> closeCache());\n              executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                  rnd);\n            }\n            opBlock.clear();\n          }\n\n        } else {\n          currentOp.setOpNum(opNum);\n          opBlock.add(currentOp);\n        }\n      }\n    }\n  }\n","date":"2019-06-04 23:00:52","endLine":111,"groupId":"10206","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testAllPostOps","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/86/9a20182abfbd3b7bf14ecf417b55b2b3e072c3.src","preCode":"  public void testAllPostOps() throws Exception {\n    OperationWithAction[] allOps = allOpsForTestAllPostOps();\n\n    for (Iterator<AuthzCredentialGenerator> iter = getDummyGeneratorCombos().iterator(); iter\n        .hasNext();) {\n      AuthzCredentialGenerator gen = iter.next();\n      CredentialGenerator cGen = gen.getCredentialGenerator();\n      Properties extraAuthProps = cGen.getSystemProperties();\n      Properties javaProps = cGen.getJavaProperties();\n      Properties extraAuthzProps = gen.getSystemProperties();\n      String authenticator = cGen.getAuthenticator();\n      String authInit = cGen.getAuthInit();\n      String accessor = gen.getAuthorizationCallback();\n      TestAuthzCredentialGenerator tgen = new TestAuthzCredentialGenerator(gen);\n\n      getLogWriter().info(\"testAllPostOps: Using authinit: \" + authInit);\n      getLogWriter().info(\"testAllPostOps: Using authenticator: \" + authenticator);\n      getLogWriter().info(\"testAllPostOps: Using accessor: \" + accessor);\n\n      \r\n      Properties serverProps =\n          buildProperties(authenticator, accessor, true, extraAuthProps, extraAuthzProps);\n\n      \r\n      int[] randomAvailableTCPPorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n      int port1 = randomAvailableTCPPorts[0];\n      int port2 = randomAvailableTCPPorts[1];\n\n      \r\n      server1.invoke(() -> closeCache());\n      server2.invoke(() -> closeCache());\n\n      \r\n      List opBlock = new ArrayList();\n      Random rnd = new Random();\n\n      for (int opNum = 0; opNum < allOps.length; ++opNum) {\n        \r\n        OperationWithAction currentOp = allOps[opNum];\n        if (currentOp.equals(OperationWithAction.OPBLOCK_END)\n            || currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n          \r\n          if (opBlock.size() > 0) {\n            \r\n            server1\n                .invoke(() -> createCacheServer(port1, serverProps, javaProps));\n            server2.invoke(() -> closeCache());\n            executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                rnd);\n            if (!currentOp.equals(OperationWithAction.OPBLOCK_NO_FAILOVER)) {\n              \r\n              server2\n                  .invoke(() -> createCacheServer(port2, serverProps, javaProps));\n              server1.invoke(() -> closeCache());\n              executeOpBlock(opBlock, port1, port2, authInit, extraAuthProps, extraAuthzProps, tgen,\n                  rnd);\n            }\n            opBlock.clear();\n          }\n\n        } else {\n          currentOp.setOpNum(opNum);\n          opBlock.add(currentOp);\n        }\n      }\n    }\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/security/ClientPostAuthorizationDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"fcefe67da0a19141f2c1234a40b7812dd6585146","commitMessage":"@@@GEODE-6588 removed raw arraylists.  assigning them each a type (#3659)\n\n\n","date":"2019-06-04 23:00:52","modifiedFileCount":"13","status":"M","submitter":"jackw26"}]
