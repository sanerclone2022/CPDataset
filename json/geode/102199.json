[{"authorTime":"2017-06-13 08:29:16","codes":[{"authorDate":"2017-06-13 08:29:16","commitOrder":1,"curCode":"  public void decrementsBucketCountOnRegainingRedundancyForBucket() {\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES);\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES - 1);\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES);\n    verify(regionRedundancyTracker, times(2)).decrementLowRedundancyBucketCount();\n    assertEquals(TARGET_COPIES - 1, bucketRedundancyTracker.getCurrentRedundancy());\n  }\n","date":"2017-07-25 08:52:43","endLine":64,"groupId":"17041","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"decrementsBucketCountOnRegainingRedundancyForBucket","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/08/0cec10858beabe246c065f79fecffdbdf5abc4.src","preCode":"  public void decrementsBucketCountOnRegainingRedundancyForBucket() {\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES);\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES - 1);\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES);\n    verify(regionRedundancyTracker, times(2)).decrementLowRedundancyBucketCount();\n    assertEquals(TARGET_COPIES - 1, bucketRedundancyTracker.getCurrentRedundancy());\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/BucketRedundancyTrackerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2017-06-13 08:29:16","commitOrder":1,"curCode":"  public void decrementsBucketCountOnClosingABucketWithNoCopies() {\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES);\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES - 1);\n    bucketRedundancyTracker.updateStatistics(0);\n    bucketRedundancyTracker.closeBucket();\n    verify(regionRedundancyTracker, times(2)).decrementLowRedundancyBucketCount();\n    assertEquals(-1, bucketRedundancyTracker.getCurrentRedundancy());\n  }\n","date":"2017-07-25 08:52:43","endLine":83,"groupId":"17041","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"decrementsBucketCountOnClosingABucketWithNoCopies","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/08/0cec10858beabe246c065f79fecffdbdf5abc4.src","preCode":"  public void decrementsBucketCountOnClosingABucketWithNoCopies() {\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES);\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES - 1);\n    bucketRedundancyTracker.updateStatistics(0);\n    bucketRedundancyTracker.closeBucket();\n    verify(regionRedundancyTracker, times(2)).decrementLowRedundancyBucketCount();\n    assertEquals(-1, bucketRedundancyTracker.getCurrentRedundancy());\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/BucketRedundancyTrackerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"}],"commitId":"b7db727ad8477806e7884d16624cd72bd6ba26e0","commitMessage":"@@@GEODE-3049: Add warning on loss of all buckets in region\n\n  * Add statistics for count of buckets that have no copies remaining\n  * Refactor logic for keeping track of redundancy statistics into\n    separate classes\n  * Remove dependency of tracking on the PartitionRegionStatistics\n    (since this can be turned off).  but continue recording statistics\n    to that location\n\nThis closes #577\n","date":"2017-07-25 08:52:43","modifiedFileCount":"4","status":"B","submitter":"Nick Reich"},{"authorTime":"2018-07-28 04:34:05","codes":[{"authorDate":"2018-07-28 04:34:05","commitOrder":2,"curCode":"  public void decrementsBucketCountOnRegainingRedundancyForBucket() {\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES);\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES - 1);\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES);\n    verify(regionRedundancyTracker, times(1)).decrementLowRedundancyBucketCount();\n    assertEquals(TARGET_COPIES - 1, bucketRedundancyTracker.getCurrentRedundancy());\n  }\n","date":"2018-07-28 04:34:05","endLine":61,"groupId":"102199","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"decrementsBucketCountOnRegainingRedundancyForBucket","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d4/8d9c1fded682b05eaf191f4c5afb0224742f35.src","preCode":"  public void decrementsBucketCountOnRegainingRedundancyForBucket() {\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES);\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES - 1);\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES);\n    verify(regionRedundancyTracker, times(2)).decrementLowRedundancyBucketCount();\n    assertEquals(TARGET_COPIES - 1, bucketRedundancyTracker.getCurrentRedundancy());\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/BucketRedundancyTrackerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2018-07-28 04:34:05","commitOrder":2,"curCode":"  public void decrementsBucketCountOnClosingABucketWithNoCopies() {\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES);\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES - 1);\n    bucketRedundancyTracker.updateStatistics(0);\n    bucketRedundancyTracker.closeBucket();\n    verify(regionRedundancyTracker, times(1)).decrementLowRedundancyBucketCount();\n    assertEquals(-1, bucketRedundancyTracker.getCurrentRedundancy());\n  }\n","date":"2018-07-28 04:34:05","endLine":80,"groupId":"102199","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"decrementsBucketCountOnClosingABucketWithNoCopies","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/d4/8d9c1fded682b05eaf191f4c5afb0224742f35.src","preCode":"  public void decrementsBucketCountOnClosingABucketWithNoCopies() {\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES);\n    bucketRedundancyTracker.updateStatistics(TARGET_COPIES - 1);\n    bucketRedundancyTracker.updateStatistics(0);\n    bucketRedundancyTracker.closeBucket();\n    verify(regionRedundancyTracker, times(2)).decrementLowRedundancyBucketCount();\n    assertEquals(-1, bucketRedundancyTracker.getCurrentRedundancy());\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/cache/BucketRedundancyTrackerTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"12e17d80629bfd4193b3bcd603a75eb9694c8107","commitMessage":"@@@GEODE-5478: Modified to not increment low redundancy bucket count twice\n\nCo-authored-by: Darrel Schneider <dschneider@pivotal.io>","date":"2018-07-28 04:34:05","modifiedFileCount":"2","status":"M","submitter":"Barry Oglesby"}]
