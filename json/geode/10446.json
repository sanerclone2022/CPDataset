[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void validateQueryOnIndexWithRegion(VM vm, final String query, final int resultSize,\n      final String region) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate Query\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating Query. ###\");\n        QueryService qs = getCache().getQueryService();\n\n        Query q = qs.newQuery(query);\n        \r\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        try {\n          Object r = q.execute();\n          if (r instanceof SelectResults) {\n            int rSize = ((SelectResults) r).asSet().size();\n            LogWriterUtils.getLogWriter().info(\"### Result Size is :\" + rSize);\n\n            if (region == null) {\n              assertEquals(resultSize, rSize);\n            } else {\n              Region reg;\n              if (region != null && (reg = getCache().getRegion(\"/root/\" + region)) != null) {\n                assertEquals(rSize, reg.size());\n                for (Object value : reg.values()) {\n                  if (!((SelectResults) r).asSet().contains((Portfolio) value)) {\n                    fail(\"Query resultset mismatch with region values for value: \" + value);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          Assert.fail(\"Failed to execute the query.\", e);\n        }\n        if (!observer.isIndexesUsed) {\n          fail(\"Index not used for query\");\n        }\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":739,"groupId":"42710","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validateQueryOnIndexWithRegion","params":"(VMvm@finalStringquery@finalintresultSize@finalStringregion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/57/b7486139a5cfb5cfa9a04c07e52dcac1af3667.src","preCode":"  public void validateQueryOnIndexWithRegion(VM vm, final String query, final int resultSize,\n      final String region) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate Query\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating Query. ###\");\n        QueryService qs = getCache().getQueryService();\n\n        Query q = qs.newQuery(query);\n        \r\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        try {\n          Object r = q.execute();\n          if (r instanceof SelectResults) {\n            int rSize = ((SelectResults) r).asSet().size();\n            LogWriterUtils.getLogWriter().info(\"### Result Size is :\" + rSize);\n\n            if (region == null) {\n              assertEquals(resultSize, rSize);\n            } else {\n              Region reg;\n              if (region != null && (reg = getCache().getRegion(\"/root/\" + region)) != null) {\n                assertEquals(rSize, reg.size());\n                for (Object value : reg.values()) {\n                  if (!((SelectResults) r).asSet().contains((Portfolio) value)) {\n                    fail(\"Query resultset mismatch with region values for value: \" + value);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          Assert.fail(\"Failed to execute the query.\", e);\n        }\n        if (!observer.isIndexesUsed) {\n          fail(\"Index not used for query\");\n        }\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexUpdateRIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":700,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void validateQuery(VM vm, final String query, final int resultSize) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate Query\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating Query. ###\");\n        QueryService qs = getCache().getQueryService();\n\n        Query q = qs.newQuery(query);\n        try {\n          Object r = q.execute();\n          if (r instanceof Collection) {\n            int rSize = ((Collection) r).size();\n            LogWriterUtils.getLogWriter().info(\"### Result Size is :\" + rSize);\n            assertEquals(rSize, resultSize);\n          }\n        } catch (Exception e) {\n          Assert.fail(\"Failed to execute the query.\", e);\n        }\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":1218,"groupId":"6855","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validateQuery","params":"(VMvm@finalStringquery@finalintresultSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/5172d12d02b90c1af7e602c4eef42915b15293.src","preCode":"  public void validateQuery(VM vm, final String query, final int resultSize) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate Query\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating Query. ###\");\n        QueryService qs = getCache().getQueryService();\n\n        Query q = qs.newQuery(query);\n        try {\n          Object r = q.execute();\n          if (r instanceof Collection) {\n            int rSize = ((Collection) r).size();\n            LogWriterUtils.getLogWriter().info(\"### Result Size is :\" + rSize);\n            assertEquals(rSize, resultSize);\n          }\n        } catch (Exception e) {\n          Assert.fail(\"Failed to execute the query.\", e);\n        }\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1198,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":2,"curCode":"  public void validateQueryOnIndexWithRegion(VM vm, final String query, final int resultSize,\n      final String region) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate Query\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating Query. ###\");\n        QueryService qs = getCache().getQueryService();\n\n        Query q = qs.newQuery(query);\n        \r\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        try {\n          Object r = q.execute();\n          if (r instanceof SelectResults) {\n            int rSize = ((SelectResults) r).asSet().size();\n            LogWriterUtils.getLogWriter().info(\"### Result Size is :\" + rSize);\n\n            if (region == null) {\n              assertEquals(resultSize, rSize);\n            } else {\n              Region reg;\n              if (region != null && (reg = getCache().getRegion(\"/root/\" + region)) != null) {\n                assertEquals(rSize, reg.size());\n                for (Object value : reg.values()) {\n                  if (!((SelectResults) r).asSet().contains((Portfolio) value)) {\n                    fail(\"Query resultset mismatch with region values for value: \" + value);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          Assert.fail(\"Failed to execute the query.\", e);\n        }\n        if (!observer.isIndexesUsed) {\n          fail(\"Index not used for query\");\n        }\n      }\n    });\n  }\n","date":"2019-01-12 07:53:54","endLine":745,"groupId":"42710","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validateQueryOnIndexWithRegion","params":"(VMvm@finalStringquery@finalintresultSize@finalStringregion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/2b/9bcd6771061c107a78629c918311aaacda2b63.src","preCode":"  public void validateQueryOnIndexWithRegion(VM vm, final String query, final int resultSize,\n      final String region) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate Query\") {\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating Query. ###\");\n        QueryService qs = getCache().getQueryService();\n\n        Query q = qs.newQuery(query);\n        \r\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        try {\n          Object r = q.execute();\n          if (r instanceof SelectResults) {\n            int rSize = ((SelectResults) r).asSet().size();\n            LogWriterUtils.getLogWriter().info(\"### Result Size is :\" + rSize);\n\n            if (region == null) {\n              assertEquals(resultSize, rSize);\n            } else {\n              Region reg;\n              if (region != null && (reg = getCache().getRegion(\"/root/\" + region)) != null) {\n                assertEquals(rSize, reg.size());\n                for (Object value : reg.values()) {\n                  if (!((SelectResults) r).asSet().contains((Portfolio) value)) {\n                    fail(\"Query resultset mismatch with region values for value: \" + value);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          Assert.fail(\"Failed to execute the query.\", e);\n        }\n        if (!observer.isIndexesUsed) {\n          fail(\"Index not used for query\");\n        }\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexUpdateRIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":705,"status":"M"},{"authorDate":"2018-07-18 03:54:18","commitOrder":2,"curCode":"  public void validateQuery(VM vm, final String query, final int resultSize) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate Query\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating Query. ###\");\n        QueryService qs = getCache().getQueryService();\n\n        Query q = qs.newQuery(query);\n        try {\n          Object r = q.execute();\n          if (r instanceof Collection) {\n            int rSize = ((Collection) r).size();\n            LogWriterUtils.getLogWriter().info(\"### Result Size is :\" + rSize);\n            assertEquals(rSize, resultSize);\n          }\n        } catch (Exception e) {\n          Assert.fail(\"Failed to execute the query.\", e);\n        }\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":1218,"groupId":"6855","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"validateQuery","params":"(VMvm@finalStringquery@finalintresultSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/5172d12d02b90c1af7e602c4eef42915b15293.src","preCode":"  public void validateQuery(VM vm, final String query, final int resultSize) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate Query\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating Query. ###\");\n        QueryService qs = getCache().getQueryService();\n\n        Query q = qs.newQuery(query);\n        try {\n          Object r = q.execute();\n          if (r instanceof Collection) {\n            int rSize = ((Collection) r).size();\n            LogWriterUtils.getLogWriter().info(\"### Result Size is :\" + rSize);\n            assertEquals(rSize, resultSize);\n          }\n        } catch (Exception e) {\n          Assert.fail(\"Failed to execute the query.\", e);\n        }\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1198,"status":"N"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":3,"curCode":"  public void validateQueryOnIndexWithRegion(VM vm, final String query, final int resultSize,\n      final String region) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate Query\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating Query. ###\");\n        QueryService qs = getCache().getQueryService();\n\n        Query q = qs.newQuery(query);\n        \r\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        try {\n          Object r = q.execute();\n          if (r instanceof SelectResults) {\n            int rSize = ((SelectResults) r).asSet().size();\n            LogWriterUtils.getLogWriter().info(\"### Result Size is :\" + rSize);\n\n            if (region == null) {\n              assertEquals(resultSize, rSize);\n            } else {\n              Region reg;\n              if (region != null && (reg =\n                  getCache().getRegion(SEPARATOR + \"root\" + SEPARATOR + region)) != null) {\n                assertEquals(rSize, reg.size());\n                for (Object value : reg.values()) {\n                  if (!((SelectResults) r).asSet().contains((Portfolio) value)) {\n                    fail(\"Query resultset mismatch with region values for value: \" + value);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          Assert.fail(\"Failed to execute the query.\", e);\n        }\n        if (!observer.isIndexesUsed) {\n          fail(\"Index not used for query\");\n        }\n      }\n    });\n  }\n","date":"2020-05-29 00:37:39","endLine":753,"groupId":"10446","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"validateQueryOnIndexWithRegion","params":"(VMvm@finalStringquery@finalintresultSize@finalStringregion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/af/966788775069ff6f576dfb5c71de6524f675cf.src","preCode":"  public void validateQueryOnIndexWithRegion(VM vm, final String query, final int resultSize,\n      final String region) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate Query\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating Query. ###\");\n        QueryService qs = getCache().getQueryService();\n\n        Query q = qs.newQuery(query);\n        \r\n        QueryObserverImpl observer = new QueryObserverImpl();\n        QueryObserverHolder.setInstance(observer);\n        try {\n          Object r = q.execute();\n          if (r instanceof SelectResults) {\n            int rSize = ((SelectResults) r).asSet().size();\n            LogWriterUtils.getLogWriter().info(\"### Result Size is :\" + rSize);\n\n            if (region == null) {\n              assertEquals(resultSize, rSize);\n            } else {\n              Region reg;\n              if (region != null && (reg = getCache().getRegion(\"/root/\" + region)) != null) {\n                assertEquals(rSize, reg.size());\n                for (Object value : reg.values()) {\n                  if (!((SelectResults) r).asSet().contains((Portfolio) value)) {\n                    fail(\"Query resultset mismatch with region values for value: \" + value);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          Assert.fail(\"Failed to execute the query.\", e);\n        }\n        if (!observer.isIndexesUsed) {\n          fail(\"Index not used for query\");\n        }\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexUpdateRIDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":712,"status":"M"},{"authorDate":"2018-07-18 03:54:18","commitOrder":3,"curCode":"  public void validateQuery(VM vm, final String query, final int resultSize) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate Query\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating Query. ###\");\n        QueryService qs = getCache().getQueryService();\n\n        Query q = qs.newQuery(query);\n        try {\n          Object r = q.execute();\n          if (r instanceof Collection) {\n            int rSize = ((Collection) r).size();\n            LogWriterUtils.getLogWriter().info(\"### Result Size is :\" + rSize);\n            assertEquals(rSize, resultSize);\n          }\n        } catch (Exception e) {\n          Assert.fail(\"Failed to execute the query.\", e);\n        }\n      }\n    });\n  }\n","date":"2018-07-18 03:54:18","endLine":1218,"groupId":"10446","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"validateQuery","params":"(VMvm@finalStringquery@finalintresultSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/87/5172d12d02b90c1af7e602c4eef42915b15293.src","preCode":"  public void validateQuery(VM vm, final String query, final int resultSize) {\n    vm.invoke(new CacheSerializableRunnable(\"Validate Query\") {\n      @Override\n      public void run2() throws CacheException {\n        LogWriterUtils.getLogWriter().info(\"### Validating Query. ###\");\n        QueryService qs = getCache().getQueryService();\n\n        Query q = qs.newQuery(query);\n        try {\n          Object r = q.execute();\n          if (r instanceof Collection) {\n            int rSize = ((Collection) r).size();\n            LogWriterUtils.getLogWriter().info(\"### Result Size is :\" + rSize);\n            assertEquals(rSize, resultSize);\n          }\n        } catch (Exception e) {\n          Assert.fail(\"Failed to execute the query.\", e);\n        }\n      }\n    });\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryUsingPoolDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1198,"status":"N"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
