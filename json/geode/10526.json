[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testCQEvents() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEvents_0\", cqs[0]);\n\n    executeCQ(client, \"testCQEvents_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEvents_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEvents_0\", KEY + size);\n\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEvents_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n          \r\n          \r\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1 * 1000);\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","date":"2018-07-18 03:54:18","endLine":2467,"groupId":"9409","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCQEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/72f987b8bfe0450ffa77a55fdf0efa1c66c36f.src","preCode":"  public void testCQEvents() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEvents_0\", cqs[0]);\n\n    executeCQ(client, \"testCQEvents_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEvents_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEvents_0\", KEY + size);\n\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEvents_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n          \r\n          \r\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1 * 1000);\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":2396,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testCQEventsWithNotEqualsUndefined() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEventsWithUndefined_0\",\n        \"SELECT ALL * FROM /root/\" + regions[0] + \" p where p.position2.secId <> 'ABC'\");\n\n    executeCQ(client, \"testCQEventsWithUndefined_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEventsWithUndefined_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n          \r\n          \r\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1 * 1000);\n    \r\n    \r\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,\n         size + 5,  15, 5,  size + 5,\n         15,  5,  size + 15 + 5 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","date":"2018-07-18 03:54:18","endLine":3709,"groupId":"9409","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCQEventsWithNotEqualsUndefined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1f/72f987b8bfe0450ffa77a55fdf0efa1c66c36f.src","preCode":"  public void testCQEventsWithNotEqualsUndefined() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEventsWithUndefined_0\",\n        \"SELECT ALL * FROM /root/\" + regions[0] + \" p where p.position2.secId <> 'ABC'\");\n\n    executeCQ(client, \"testCQEventsWithUndefined_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEventsWithUndefined_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n          \r\n          \r\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1 * 1000);\n    \r\n    \r\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,\n         size + 5,  15, 5,  size + 5,\n         15,  5,  size + 15 + 5 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":3635,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-08-31 08:10:50","codes":[{"authorDate":"2018-08-31 08:10:50","commitOrder":2,"curCode":"  public void testCQEvents() {\n\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEvents_0\", cqs[0]);\n\n    executeCQ(client, \"testCQEvents_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEvents_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEvents_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEvents_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1000);\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","date":"2018-08-31 08:10:50","endLine":2002,"groupId":"9409","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCQEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void testCQEvents() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEvents_0\", cqs[0]);\n\n    executeCQ(client, \"testCQEvents_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEvents_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEvents_0\", KEY + size);\n\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEvents_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n          \r\n          \r\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1 * 1000);\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1934,"status":"M"},{"authorDate":"2018-08-31 08:10:50","commitOrder":2,"curCode":"  public void testCQEventsWithNotEqualsUndefined() {\n\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEventsWithUndefined_0\",\n        \"SELECT ALL * FROM /root/\" + regions[0] + \" p where p.position2.secId <> 'ABC'\");\n\n    executeCQ(client, \"testCQEventsWithUndefined_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEventsWithUndefined_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1000);\n    \r\n    \r\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,\n         size + 5,  15, 5,  size + 5,\n         15,  5,  size + 15 + 5 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","date":"2018-08-31 08:10:50","endLine":3204,"groupId":"9409","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCQEventsWithNotEqualsUndefined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7e/66814e44a3bcce352a36d519d0565a40bf5630.src","preCode":"  public void testCQEventsWithNotEqualsUndefined() throws Exception {\n\n    final Host host = Host.getHost(0);\n    VM server = host.getVM(0);\n    VM client = host.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName(server.getHost());\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEventsWithUndefined_0\",\n        \"SELECT ALL * FROM /root/\" + regions[0] + \" p where p.position2.secId <> 'ABC'\");\n\n    executeCQ(client, \"testCQEventsWithUndefined_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEventsWithUndefined_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n          \r\n          \r\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1 * 1000);\n    \r\n    \r\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,\n         size + 5,  15, 5,  size + 5,\n         15,  5,  size + 15 + 5 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":3134,"status":"M"}],"commitId":"46b78978d894e8851daf86d929ae5efbd9093097","commitMessage":"@@@GEODE-5411: Adding awaitility fixing timing issue in CqPerfDUnitTest\n\n- Fixing timing issue by waiting for cq set to reach the right size\n- Code modernization and cleanup","date":"2018-08-31 08:10:50","modifiedFileCount":"3","status":"M","submitter":"mhansonp"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public void testCQEvents() {\n\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEvents_0\", cqs[0]);\n\n    executeCQ(client, \"testCQEvents_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEvents_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEvents_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEvents_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1000);\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","date":"2019-01-12 07:53:54","endLine":2027,"groupId":"9409","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCQEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/12/01d65d4e254284a3b2774d91deec45ce8f0fa0.src","preCode":"  public void testCQEvents() {\n\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEvents_0\", cqs[0]);\n\n    executeCQ(client, \"testCQEvents_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEvents_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEvents_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEvents_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1000);\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1958,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public void testCQEventsWithNotEqualsUndefined() {\n\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEventsWithUndefined_0\",\n        \"SELECT ALL * FROM /root/\" + regions[0] + \" p where p.position2.secId <> 'ABC'\");\n\n    executeCQ(client, \"testCQEventsWithUndefined_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEventsWithUndefined_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1000);\n    \r\n    \r\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,\n         size + 5,  15, 5,  size + 5,\n         15,  5,  size + 15 + 5 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","date":"2019-01-12 07:53:54","endLine":3242,"groupId":"9409","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCQEventsWithNotEqualsUndefined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/12/01d65d4e254284a3b2774d91deec45ce8f0fa0.src","preCode":"  public void testCQEventsWithNotEqualsUndefined() {\n\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEventsWithUndefined_0\",\n        \"SELECT ALL * FROM /root/\" + regions[0] + \" p where p.position2.secId <> 'ABC'\");\n\n    executeCQ(client, \"testCQEventsWithUndefined_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEventsWithUndefined_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1000);\n    \r\n    \r\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,\n         size + 5,  15, 5,  size + 5,\n         15,  5,  size + 15 + 5 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":3171,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":4,"curCode":"  public void testCQEvents() {\n\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEvents_0\", cqs[0]);\n\n    executeCQ(client, \"testCQEvents_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEvents_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEvents_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEvents_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1000);\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","date":"2019-01-12 07:53:54","endLine":2027,"groupId":"10526","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCQEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/12/01d65d4e254284a3b2774d91deec45ce8f0fa0.src","preCode":"  public void testCQEvents() {\n\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEvents_0\", cqs[0]);\n\n    executeCQ(client, \"testCQEvents_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEvents_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEvents_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEvents_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1000);\n    \r\n    validateCQ(client, \"testCQEvents_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1958,"status":"N"},{"authorDate":"2020-05-29 00:37:39","commitOrder":4,"curCode":"  public void testCQEventsWithNotEqualsUndefined() {\n\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEventsWithUndefined_0\",\n        \"SELECT ALL * FROM \" + SEPARATOR + \"root\" + SEPARATOR + regions[0]\n            + \" p where p.position2.secId <> 'ABC'\");\n\n    executeCQ(client, \"testCQEventsWithUndefined_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEventsWithUndefined_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1000);\n    \r\n    \r\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,\n         size + 5,  15, 5,  size + 5,\n         15,  5,  size + 15 + 5 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","date":"2020-05-29 00:37:39","endLine":3273,"groupId":"10526","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCQEventsWithNotEqualsUndefined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/51/dd20a81a454712e07a45d3c80685a8a7d60b82.src","preCode":"  public void testCQEventsWithNotEqualsUndefined() {\n\n    VM server = VM.getVM(0);\n    VM client = VM.getVM(1);\n\n    createServer(server);\n\n    final int thePort = server.invoke(() -> CqQueryDUnitTest.getCacheServerPort());\n    final String host0 = NetworkUtils.getServerHostName();\n\n    \r\n    createClient(client, thePort, host0);\n\n    \r\n    createCQ(client, \"testCQEventsWithUndefined_0\",\n        \"SELECT ALL * FROM /root/\" + regions[0] + \" p where p.position2.secId <> 'ABC'\");\n\n    executeCQ(client, \"testCQEventsWithUndefined_0\", false, null);\n\n    \r\n    int size = 10;\n    createValues(server, regions[0], size);\n\n    waitForCreated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         0,  0,  size,  0,\n         0,  size);\n\n    \r\n    createValues(server, regions[0], 5);\n    createValues(server, regions[0], 10);\n\n    waitForUpdated(client, \"testCQEventsWithUndefined_0\", KEY + size);\n\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15,  0,  size,  15,\n         0,  size + 15);\n\n    \r\n    deleteValues(server, regions[0], 5);\n    waitForDestroyed(client, \"testCQEventsWithUndefined_0\", KEY + 5);\n\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,  size,\n         15, 5,  size,  15,\n         5,  size + 15 + 5);\n\n    \r\n    server.invoke(new CacheSerializableRunnable(\"Create values\") {\n      @Override\n      public void run2() throws CacheException {\n        Region region1 = getRootRegion().getSubregion(regions[0]);\n        for (int i = -1; i >= -5; i--) {\n          region1.put(KEY + i, KEY + i);\n        }\n      }\n    });\n\n    Wait.pause(1000);\n    \r\n    \r\n    \r\n    validateCQ(client, \"testCQEventsWithUndefined_0\",  noTest,\n         size + 5,  15, 5,  size + 5,\n         15,  5,  size + 15 + 5 + 5);\n\n    \r\n    closeClient(client);\n    closeServer(server);\n  }\n","realPath":"geode-cq/src/distributedTest/java/org/apache/geode/cache/query/cq/dunit/CqQueryDUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":3201,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
