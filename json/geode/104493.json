[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testUndefinedForMapRangeIndex() throws Exception {\n    IndexManager.TEST_RANGEINDEX_ONLY = true;\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    qs = CacheUtils.getQueryService();\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", \"/portfolio \");\n    assertTrue(\"Index should be a MapRangeIndex \", keyIndex1 instanceof MapRangeIndex);\n\n    if (region.size() == 0) {\n      for (int i = 1; i <= 100; i++) {\n        \r\n        if (i % 2 == 0) {\n          region.put(Integer.toString(i), \"Portfolio-\" + i);\n        } else {\n          region.put(Integer.toString(i), new Portfolio(i, i));\n        }\n      }\n    }\n    assertEquals(100, region.size());\n\n    qs.removeIndexes();\n\n    \r\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", \"/portfolio \");\n    assertTrue(\"Index should be a MapRangeIndex \", keyIndex1 instanceof MapRangeIndex);\n  }\n","date":"2018-07-18 03:54:18","endLine":280,"groupId":"30932","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUndefinedForMapRangeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/62/952078f1ad951b7ab26118b5265f46e3f9887e.src","preCode":"  public void testUndefinedForMapRangeIndex() throws Exception {\n    IndexManager.TEST_RANGEINDEX_ONLY = true;\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    qs = CacheUtils.getQueryService();\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", \"/portfolio \");\n    assertTrue(\"Index should be a MapRangeIndex \", keyIndex1 instanceof MapRangeIndex);\n\n    if (region.size() == 0) {\n      for (int i = 1; i <= 100; i++) {\n        \r\n        if (i % 2 == 0) {\n          region.put(Integer.toString(i), \"Portfolio-\" + i);\n        } else {\n          region.put(Integer.toString(i), new Portfolio(i, i));\n        }\n      }\n    }\n    assertEquals(100, region.size());\n\n    qs.removeIndexes();\n\n    \r\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", \"/portfolio \");\n    assertTrue(\"Index should be a MapRangeIndex \", keyIndex1 instanceof MapRangeIndex);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testUndefinedForCompactMapRangeIndex() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    qs = CacheUtils.getQueryService();\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", \"/portfolio \");\n    assertTrue(\"Index should be a CompactMapRangeIndex \",\n        keyIndex1 instanceof CompactMapRangeIndex);\n\n    if (region.size() == 0) {\n      for (int i = 1; i <= 100; i++) {\n        \r\n        if (i % 2 == 0) {\n          region.put(Integer.toString(i), \"Portfolio-\" + i);\n        } else {\n          region.put(Integer.toString(i), new Portfolio(i, i));\n        }\n      }\n    }\n    assertEquals(100, region.size());\n\n    qs.removeIndexes();\n\n    \r\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", \"/portfolio \");\n    assertTrue(\"Index should be a CompactMapRangeIndex \",\n        keyIndex1 instanceof CompactMapRangeIndex);\n  }\n","date":"2018-07-18 03:54:18","endLine":311,"groupId":"30932","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUndefinedForCompactMapRangeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/62/952078f1ad951b7ab26118b5265f46e3f9887e.src","preCode":"  public void testUndefinedForCompactMapRangeIndex() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    qs = CacheUtils.getQueryService();\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", \"/portfolio \");\n    assertTrue(\"Index should be a CompactMapRangeIndex \",\n        keyIndex1 instanceof CompactMapRangeIndex);\n\n    if (region.size() == 0) {\n      for (int i = 1; i <= 100; i++) {\n        \r\n        if (i % 2 == 0) {\n          region.put(Integer.toString(i), \"Portfolio-\" + i);\n        } else {\n          region.put(Integer.toString(i), new Portfolio(i, i));\n        }\n      }\n    }\n    assertEquals(100, region.size());\n\n    qs.removeIndexes();\n\n    \r\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", \"/portfolio \");\n    assertTrue(\"Index should be a CompactMapRangeIndex \",\n        keyIndex1 instanceof CompactMapRangeIndex);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testUndefinedForMapRangeIndex() throws Exception {\n    IndexManager.TEST_RANGEINDEX_ONLY = true;\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    qs = CacheUtils.getQueryService();\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", SEPARATOR + \"portfolio \");\n    assertTrue(\"Index should be a MapRangeIndex \", keyIndex1 instanceof MapRangeIndex);\n\n    if (region.size() == 0) {\n      for (int i = 1; i <= 100; i++) {\n        \r\n        if (i % 2 == 0) {\n          region.put(Integer.toString(i), \"Portfolio-\" + i);\n        } else {\n          region.put(Integer.toString(i), new Portfolio(i, i));\n        }\n      }\n    }\n    assertEquals(100, region.size());\n\n    qs.removeIndexes();\n\n    \r\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", SEPARATOR + \"portfolio \");\n    assertTrue(\"Index should be a MapRangeIndex \", keyIndex1 instanceof MapRangeIndex);\n  }\n","date":"2020-05-29 00:37:39","endLine":283,"groupId":"104493","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUndefinedForMapRangeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/1556f769105a7d21547518ea43b44c6587604f.src","preCode":"  public void testUndefinedForMapRangeIndex() throws Exception {\n    IndexManager.TEST_RANGEINDEX_ONLY = true;\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    qs = CacheUtils.getQueryService();\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", \"/portfolio \");\n    assertTrue(\"Index should be a MapRangeIndex \", keyIndex1 instanceof MapRangeIndex);\n\n    if (region.size() == 0) {\n      for (int i = 1; i <= 100; i++) {\n        \r\n        if (i % 2 == 0) {\n          region.put(Integer.toString(i), \"Portfolio-\" + i);\n        } else {\n          region.put(Integer.toString(i), new Portfolio(i, i));\n        }\n      }\n    }\n    assertEquals(100, region.size());\n\n    qs.removeIndexes();\n\n    \r\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", \"/portfolio \");\n    assertTrue(\"Index should be a MapRangeIndex \", keyIndex1 instanceof MapRangeIndex);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testUndefinedForCompactMapRangeIndex() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    qs = CacheUtils.getQueryService();\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", SEPARATOR + \"portfolio \");\n    assertTrue(\"Index should be a CompactMapRangeIndex \",\n        keyIndex1 instanceof CompactMapRangeIndex);\n\n    if (region.size() == 0) {\n      for (int i = 1; i <= 100; i++) {\n        \r\n        if (i % 2 == 0) {\n          region.put(Integer.toString(i), \"Portfolio-\" + i);\n        } else {\n          region.put(Integer.toString(i), new Portfolio(i, i));\n        }\n      }\n    }\n    assertEquals(100, region.size());\n\n    qs.removeIndexes();\n\n    \r\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", SEPARATOR + \"portfolio \");\n    assertTrue(\"Index should be a CompactMapRangeIndex \",\n        keyIndex1 instanceof CompactMapRangeIndex);\n  }\n","date":"2020-05-29 00:37:39","endLine":314,"groupId":"104493","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUndefinedForCompactMapRangeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/68/1556f769105a7d21547518ea43b44c6587604f.src","preCode":"  public void testUndefinedForCompactMapRangeIndex() throws Exception {\n    AttributesFactory af = new AttributesFactory();\n    af.setScope(Scope.LOCAL);\n\n    region = CacheUtils.createRegion(\"portfolio\", af.create(), false);\n    qs = CacheUtils.getQueryService();\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", \"/portfolio \");\n    assertTrue(\"Index should be a CompactMapRangeIndex \",\n        keyIndex1 instanceof CompactMapRangeIndex);\n\n    if (region.size() == 0) {\n      for (int i = 1; i <= 100; i++) {\n        \r\n        if (i % 2 == 0) {\n          region.put(Integer.toString(i), \"Portfolio-\" + i);\n        } else {\n          region.put(Integer.toString(i), new Portfolio(i, i));\n        }\n      }\n    }\n    assertEquals(100, region.size());\n\n    qs.removeIndexes();\n\n    \r\n    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN', 'IBM']\", \"/portfolio \");\n    assertTrue(\"Index should be a CompactMapRangeIndex \",\n        keyIndex1 instanceof CompactMapRangeIndex);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
