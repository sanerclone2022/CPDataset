[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testIndexMaintenanceBasedOnTimeInterval() throws Exception {\n    System.getProperties()\n        .put(DistributionConfig.GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"-1\");\n    System.getProperties().put(DistributionConfig.GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"10000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"p.getID\", \"/portfolio p\");\n\n    final int size = 5;\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    \r\n\n    WaitCriterion evSize = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == size);\n      }\n\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + size;\n      }\n    };\n\n    Wait.waitForCriterion(evSize, 17 * 1000, 200, true);\n\n    \r\n    region.clear();\n\n    WaitCriterion evClear = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == 0);\n      }\n\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + 0;\n      }\n    };\n    Wait.waitForCriterion(evClear, 17 * 1000, 200, true);\n\n    \r\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n    \r\n    Wait.waitForCriterion(evSize, 17 * 1000, 200, true);\n  }\n","date":"2018-07-18 03:54:18","endLine":155,"groupId":"36668","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexMaintenanceBasedOnTimeInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/dc/271510bb0f250d087213fcac122649837b43d5.src","preCode":"  public void testIndexMaintenanceBasedOnTimeInterval() throws Exception {\n    System.getProperties()\n        .put(DistributionConfig.GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"-1\");\n    System.getProperties().put(DistributionConfig.GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"10000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"p.getID\", \"/portfolio p\");\n\n    final int size = 5;\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    \r\n\n    WaitCriterion evSize = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == size);\n      }\n\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + size;\n      }\n    };\n\n    Wait.waitForCriterion(evSize, 17 * 1000, 200, true);\n\n    \r\n    region.clear();\n\n    WaitCriterion evClear = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == 0);\n      }\n\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + 0;\n      }\n    };\n    Wait.waitForCriterion(evClear, 17 * 1000, 200, true);\n\n    \r\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n    \r\n    Wait.waitForCriterion(evSize, 17 * 1000, 200, true);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsynchIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testIndexMaintenanceBasedOnThresholdAsZero() throws Exception {\n    System.getProperties()\n        .put(DistributionConfig.GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"0\");\n    System.getProperties().put(DistributionConfig.GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"60000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"p.getID\", \"/portfolio p\");\n    for (int i = 0; i < 3; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    WaitCriterion ev = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == 3);\n      }\n\n      public String description() {\n        return \"valueToEntries map never became size 3\";\n      }\n    };\n    Wait.waitForCriterion(ev, 10 * 1000, 200, true);\n  }\n","date":"2018-07-18 03:54:18","endLine":180,"groupId":"39955","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexMaintenanceBasedOnThresholdAsZero","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/dc/271510bb0f250d087213fcac122649837b43d5.src","preCode":"  public void testIndexMaintenanceBasedOnThresholdAsZero() throws Exception {\n    System.getProperties()\n        .put(DistributionConfig.GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"0\");\n    System.getProperties().put(DistributionConfig.GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"60000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"p.getID\", \"/portfolio p\");\n    for (int i = 0; i < 3; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    WaitCriterion ev = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == 3);\n      }\n\n      public String description() {\n        return \"valueToEntries map never became size 3\";\n      }\n    };\n    Wait.waitForCriterion(ev, 10 * 1000, 200, true);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsynchIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2018-10-06 04:56:13","codes":[{"authorDate":"2018-10-06 04:56:13","commitOrder":2,"curCode":"  public void testIndexMaintenanceBasedOnTimeInterval() throws Exception {\n    getProperties()\n        .put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"-1\");\n    getProperties().put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"10000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", FUNCTIONAL, \"p.getID\", \"/portfolio p\");\n\n    final int size = 5;\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    \r\n\n    WaitCriterion evSize = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == size);\n      }\n\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + size;\n      }\n    };\n\n    GeodeAwaitility.await().untilAsserted(evSize);\n\n    \r\n    region.clear();\n\n    WaitCriterion evClear = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == 0);\n      }\n\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + 0;\n      }\n    };\n    GeodeAwaitility.await().untilAsserted(evClear);\n\n    \r\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n    \r\n    GeodeAwaitility.await().untilAsserted(evSize);\n  }\n","date":"2018-10-19 08:01:02","endLine":158,"groupId":"36668","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexMaintenanceBasedOnTimeInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ef/37b5df10d2de94f1d1f10cc8929d5f88484f4a.src","preCode":"  public void testIndexMaintenanceBasedOnTimeInterval() throws Exception {\n    System.getProperties()\n        .put(DistributionConfig.GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"-1\");\n    System.getProperties().put(DistributionConfig.GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"10000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"p.getID\", \"/portfolio p\");\n\n    final int size = 5;\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    \r\n\n    WaitCriterion evSize = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == size);\n      }\n\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + size;\n      }\n    };\n\n    Wait.waitForCriterion(evSize, 17 * 1000, 200, true);\n\n    \r\n    region.clear();\n\n    WaitCriterion evClear = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == 0);\n      }\n\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + 0;\n      }\n    };\n    Wait.waitForCriterion(evClear, 17 * 1000, 200, true);\n\n    \r\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n    \r\n    Wait.waitForCriterion(evSize, 17 * 1000, 200, true);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsynchIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2018-10-06 04:56:13","commitOrder":2,"curCode":"  public void testIndexMaintenanceBasedOnThresholdAsZero() throws Exception {\n    getProperties()\n        .put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"0\");\n    getProperties().put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"60000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", FUNCTIONAL, \"p.getID\", \"/portfolio p\");\n    for (int i = 0; i < 3; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    WaitCriterion ev = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == 3);\n      }\n\n      public String description() {\n        return \"valueToEntries map never became size 3\";\n      }\n    };\n    GeodeAwaitility.await().untilAsserted(ev);\n  }\n","date":"2018-10-19 08:01:02","endLine":183,"groupId":"22909","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexMaintenanceBasedOnThresholdAsZero","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/ef/37b5df10d2de94f1d1f10cc8929d5f88484f4a.src","preCode":"  public void testIndexMaintenanceBasedOnThresholdAsZero() throws Exception {\n    System.getProperties()\n        .put(DistributionConfig.GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"0\");\n    System.getProperties().put(DistributionConfig.GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"60000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", IndexType.FUNCTIONAL, \"p.getID\", \"/portfolio p\");\n    for (int i = 0; i < 3; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    WaitCriterion ev = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == 3);\n      }\n\n      public String description() {\n        return \"valueToEntries map never became size 3\";\n      }\n    };\n    Wait.waitForCriterion(ev, 10 * 1000, 200, true);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsynchIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"8fa6ef6205938767d0106810daca1f91ee8bb3a8","commitMessage":"@@@GEODE-5424: Replacing calls to waitForCriterion with Awaitility\n\nReplacing all of the calls to waitForCriterion with awaitility instead. \nto use a standard timeout.\n","date":"2018-10-19 08:01:02","modifiedFileCount":"132","status":"M","submitter":"Dan Smith"},{"authorTime":"2019-01-12 07:53:54","codes":[{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public void testIndexMaintenanceBasedOnTimeInterval() throws Exception {\n    getProperties()\n        .put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"-1\");\n    getProperties().put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"10000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", FUNCTIONAL, \"p.getID\", \"/portfolio p\");\n\n    final int size = 5;\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    \r\n\n    WaitCriterion evSize = new WaitCriterion() {\n      @Override\n      public boolean done() {\n        return (getIndexSize(ri) == size);\n      }\n\n      @Override\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + size;\n      }\n    };\n\n    GeodeAwaitility.await().untilAsserted(evSize);\n\n    \r\n    region.clear();\n\n    WaitCriterion evClear = new WaitCriterion() {\n      @Override\n      public boolean done() {\n        return (getIndexSize(ri) == 0);\n      }\n\n      @Override\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + 0;\n      }\n    };\n    GeodeAwaitility.await().untilAsserted(evClear);\n\n    \r\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n    \r\n    GeodeAwaitility.await().untilAsserted(evSize);\n  }\n","date":"2019-01-12 07:53:54","endLine":164,"groupId":"36668","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexMaintenanceBasedOnTimeInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b1/e94283a1d7df717edde2c94918906d16e2f121.src","preCode":"  public void testIndexMaintenanceBasedOnTimeInterval() throws Exception {\n    getProperties()\n        .put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"-1\");\n    getProperties().put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"10000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", FUNCTIONAL, \"p.getID\", \"/portfolio p\");\n\n    final int size = 5;\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    \r\n\n    WaitCriterion evSize = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == size);\n      }\n\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + size;\n      }\n    };\n\n    GeodeAwaitility.await().untilAsserted(evSize);\n\n    \r\n    region.clear();\n\n    WaitCriterion evClear = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == 0);\n      }\n\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + 0;\n      }\n    };\n    GeodeAwaitility.await().untilAsserted(evClear);\n\n    \r\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n    \r\n    GeodeAwaitility.await().untilAsserted(evSize);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsynchIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2019-01-12 07:53:54","commitOrder":3,"curCode":"  public void testIndexMaintenanceBasedOnThresholdAsZero() throws Exception {\n    getProperties()\n        .put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"0\");\n    getProperties().put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"60000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", FUNCTIONAL, \"p.getID\", \"/portfolio p\");\n    for (int i = 0; i < 3; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    WaitCriterion ev = new WaitCriterion() {\n      @Override\n      public boolean done() {\n        return (getIndexSize(ri) == 3);\n      }\n\n      @Override\n      public String description() {\n        return \"valueToEntries map never became size 3\";\n      }\n    };\n    GeodeAwaitility.await().untilAsserted(ev);\n  }\n","date":"2019-01-12 07:53:54","endLine":191,"groupId":"22909","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexMaintenanceBasedOnThresholdAsZero","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/b1/e94283a1d7df717edde2c94918906d16e2f121.src","preCode":"  public void testIndexMaintenanceBasedOnThresholdAsZero() throws Exception {\n    getProperties()\n        .put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"0\");\n    getProperties().put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"60000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", FUNCTIONAL, \"p.getID\", \"/portfolio p\");\n    for (int i = 0; i < 3; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    WaitCriterion ev = new WaitCriterion() {\n      public boolean done() {\n        return (getIndexSize(ri) == 3);\n      }\n\n      public String description() {\n        return \"valueToEntries map never became size 3\";\n      }\n    };\n    GeodeAwaitility.await().untilAsserted(ev);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsynchIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"9d737c9e95a77cb4db05a258f318908e7899bd6c","commitMessage":"@@@GEODE-4391: Add `@Override` where missing. (#3069)\n\n* GEODE-4391: Add `@Override` where missing.\n\n* Restart Concourse.  I think that was flaky.\n","date":"2019-01-12 07:53:54","modifiedFileCount":"1582","status":"M","submitter":"Galen O'Sullivan"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":4,"curCode":"  public void testIndexMaintenanceBasedOnTimeInterval() throws Exception {\n    getProperties()\n        .put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"-1\");\n    getProperties().put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"10000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", FUNCTIONAL, \"p.getID\", SEPARATOR + \"portfolio p\");\n\n    final int size = 5;\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    \r\n\n    WaitCriterion evSize = new WaitCriterion() {\n      @Override\n      public boolean done() {\n        return (getIndexSize(ri) == size);\n      }\n\n      @Override\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + size;\n      }\n    };\n\n    GeodeAwaitility.await().untilAsserted(evSize);\n\n    \r\n    region.clear();\n\n    WaitCriterion evClear = new WaitCriterion() {\n      @Override\n      public boolean done() {\n        return (getIndexSize(ri) == 0);\n      }\n\n      @Override\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + 0;\n      }\n    };\n    GeodeAwaitility.await().untilAsserted(evClear);\n\n    \r\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n    \r\n    GeodeAwaitility.await().untilAsserted(evSize);\n  }\n","date":"2020-05-29 00:37:39","endLine":166,"groupId":"104742","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testIndexMaintenanceBasedOnTimeInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/77/db20a726db9cdfaa92474be7540dbfd11a337c.src","preCode":"  public void testIndexMaintenanceBasedOnTimeInterval() throws Exception {\n    getProperties()\n        .put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"-1\");\n    getProperties().put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"10000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", FUNCTIONAL, \"p.getID\", \"/portfolio p\");\n\n    final int size = 5;\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    \r\n\n    WaitCriterion evSize = new WaitCriterion() {\n      @Override\n      public boolean done() {\n        return (getIndexSize(ri) == size);\n      }\n\n      @Override\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + size;\n      }\n    };\n\n    GeodeAwaitility.await().untilAsserted(evSize);\n\n    \r\n    region.clear();\n\n    WaitCriterion evClear = new WaitCriterion() {\n      @Override\n      public boolean done() {\n        return (getIndexSize(ri) == 0);\n      }\n\n      @Override\n      public String description() {\n        return \"valueToEntriesMap never became size :\" + 0;\n      }\n    };\n    GeodeAwaitility.await().untilAsserted(evClear);\n\n    \r\n    for (int i = 0; i < size; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n    \r\n    GeodeAwaitility.await().untilAsserted(evSize);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsynchIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":4,"curCode":"  public void testIndexMaintenanceBasedOnThresholdAsZero() throws Exception {\n    getProperties()\n        .put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"0\");\n    getProperties().put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"60000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", FUNCTIONAL, \"p.getID\", SEPARATOR + \"portfolio p\");\n    for (int i = 0; i < 3; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    WaitCriterion ev = new WaitCriterion() {\n      @Override\n      public boolean done() {\n        return (getIndexSize(ri) == 3);\n      }\n\n      @Override\n      public String description() {\n        return \"valueToEntries map never became size 3\";\n      }\n    };\n    GeodeAwaitility.await().untilAsserted(ev);\n  }\n","date":"2020-05-29 00:37:39","endLine":193,"groupId":"104742","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testIndexMaintenanceBasedOnThresholdAsZero","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/77/db20a726db9cdfaa92474be7540dbfd11a337c.src","preCode":"  public void testIndexMaintenanceBasedOnThresholdAsZero() throws Exception {\n    getProperties()\n        .put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceThreshold\", \"0\");\n    getProperties().put(GEMFIRE_PREFIX + \"AsynchIndexMaintenanceInterval\",\n        \"60000\");\n    final Index ri =\n        (Index) qs.createIndex(\"statusIndex\", FUNCTIONAL, \"p.getID\", \"/portfolio p\");\n    for (int i = 0; i < 3; ++i) {\n      region.put(\"\" + (i + 1), new Portfolio(i + 1));\n      idSet.add((i + 1) + \"\");\n    }\n\n    WaitCriterion ev = new WaitCriterion() {\n      @Override\n      public boolean done() {\n        return (getIndexSize(ri) == 3);\n      }\n\n      @Override\n      public String description() {\n        return \"valueToEntries map never became size 3\";\n      }\n    };\n    GeodeAwaitility.await().untilAsserted(ev);\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/AsynchIndexMaintenanceJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"}]
