[{"authorTime":"2016-09-15 02:08:18","codes":[{"authorDate":"2016-09-15 02:08:18","commitOrder":1,"curCode":"  public void testAddOutputStreamWithOneStream() throws IOException {\n    final Sequence seqStreamOne = mockContext.sequence(\"seqStreamOne\");\n    final OutputStream streamOne = mockContext.mock(OutputStream.class, \"streamOne\");\n    mockContext.checking(new Expectations() {{\n      oneOf(streamOne).write(2); inSequence(seqStreamOne);\n      oneOf(streamOne).write(3); inSequence(seqStreamOne);\n      oneOf(streamOne).write(4); inSequence(seqStreamOne);\n      oneOf(streamOne).write(0); inSequence(seqStreamOne);\n      oneOf(streamOne).write(1); inSequence(seqStreamOne);\n      oneOf(streamOne).write(9); inSequence(seqStreamOne);\n      oneOf(streamOne).flush(); inSequence(seqStreamOne);\n      oneOf(streamOne).flush(); inSequence(seqStreamOne);\n      oneOf(streamOne).close(); inSequence(seqStreamOne);\n    }});\n\n    final Sequence seqStreamTwo = mockContext.sequence(\"seqStreamTwo\");\n    final OutputStream streamTwo = mockContext.mock(OutputStream.class, \"streamTwo\");\n    mockContext.checking(new Expectations() {{\n      oneOf(streamTwo).write(2); inSequence(seqStreamTwo);\n      oneOf(streamTwo).write(3); inSequence(seqStreamTwo);\n      oneOf(streamTwo).write(4); inSequence(seqStreamTwo);\n      oneOf(streamTwo).write(0); inSequence(seqStreamTwo);\n      oneOf(streamTwo).write(1); inSequence(seqStreamTwo);\n      oneOf(streamTwo).write(9); inSequence(seqStreamTwo);\n      oneOf(streamTwo).flush(); inSequence(seqStreamTwo);\n      oneOf(streamTwo).flush(); inSequence(seqStreamTwo);\n      oneOf(streamTwo).close(); inSequence(seqStreamTwo);\n    }});\n    \n    final CompositeOutputStream cos = new CompositeOutputStream(streamOne);\n\n    assertFalse(cos.isEmpty());\n    assertEquals(1, cos.size());\n    \n    cos.addOutputStream(streamTwo);\n    assertEquals(2, cos.size());\n    \n    cos.write(new byte[]{0,1,2,3,4,5,6,7,8,9}, 2, 3);\n    cos.write(new byte[]{0,1});\n    cos.write(9);\n    cos.flush();\n    cos.close();\n  }\n","date":"2016-09-15 02:08:18","endLine":262,"groupId":"8742","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddOutputStreamWithOneStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/65/8c11ac6f8a3217a191283b4d7fb0636a12771a.src","preCode":"  public void testAddOutputStreamWithOneStream() throws IOException {\n    final Sequence seqStreamOne = mockContext.sequence(\"seqStreamOne\");\n    final OutputStream streamOne = mockContext.mock(OutputStream.class, \"streamOne\");\n    mockContext.checking(new Expectations() {{\n      oneOf(streamOne).write(2); inSequence(seqStreamOne);\n      oneOf(streamOne).write(3); inSequence(seqStreamOne);\n      oneOf(streamOne).write(4); inSequence(seqStreamOne);\n      oneOf(streamOne).write(0); inSequence(seqStreamOne);\n      oneOf(streamOne).write(1); inSequence(seqStreamOne);\n      oneOf(streamOne).write(9); inSequence(seqStreamOne);\n      oneOf(streamOne).flush(); inSequence(seqStreamOne);\n      oneOf(streamOne).flush(); inSequence(seqStreamOne);\n      oneOf(streamOne).close(); inSequence(seqStreamOne);\n    }});\n\n    final Sequence seqStreamTwo = mockContext.sequence(\"seqStreamTwo\");\n    final OutputStream streamTwo = mockContext.mock(OutputStream.class, \"streamTwo\");\n    mockContext.checking(new Expectations() {{\n      oneOf(streamTwo).write(2); inSequence(seqStreamTwo);\n      oneOf(streamTwo).write(3); inSequence(seqStreamTwo);\n      oneOf(streamTwo).write(4); inSequence(seqStreamTwo);\n      oneOf(streamTwo).write(0); inSequence(seqStreamTwo);\n      oneOf(streamTwo).write(1); inSequence(seqStreamTwo);\n      oneOf(streamTwo).write(9); inSequence(seqStreamTwo);\n      oneOf(streamTwo).flush(); inSequence(seqStreamTwo);\n      oneOf(streamTwo).flush(); inSequence(seqStreamTwo);\n      oneOf(streamTwo).close(); inSequence(seqStreamTwo);\n    }});\n    \n    final CompositeOutputStream cos = new CompositeOutputStream(streamOne);\n\n    assertFalse(cos.isEmpty());\n    assertEquals(1, cos.size());\n    \n    cos.addOutputStream(streamTwo);\n    assertEquals(2, cos.size());\n    \n    cos.write(new byte[]{0,1,2,3,4,5,6,7,8,9}, 2, 3);\n    cos.write(new byte[]{0,1});\n    cos.write(9);\n    cos.flush();\n    cos.close();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/io/CompositeOutputStreamJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"B"},{"authorDate":"2016-09-15 02:08:18","commitOrder":1,"curCode":"  public void testAddOneOutputStreamWhenEmpty() throws IOException {\n    final Sequence seqStreamOne = mockContext.sequence(\"seqStreamOne\");\n    final OutputStream streamOne = mockContext.mock(OutputStream.class, \"streamOne\");\n    mockContext.checking(new Expectations() {{\n      oneOf(streamOne).write(2); inSequence(seqStreamOne);\n      oneOf(streamOne).write(3); inSequence(seqStreamOne);\n      oneOf(streamOne).write(4); inSequence(seqStreamOne);\n      oneOf(streamOne).write(0); inSequence(seqStreamOne);\n      oneOf(streamOne).write(1); inSequence(seqStreamOne);\n      oneOf(streamOne).write(9); inSequence(seqStreamOne);\n      oneOf(streamOne).flush(); inSequence(seqStreamOne);\n      oneOf(streamOne).flush(); inSequence(seqStreamOne);\n      oneOf(streamOne).close(); inSequence(seqStreamOne);\n    }});\n\n    final CompositeOutputStream cos = new CompositeOutputStream();\n\n    assertTrue(cos.isEmpty());\n    assertEquals(0, cos.size());\n    \n    cos.addOutputStream(streamOne);\n    assertFalse(cos.isEmpty());\n    assertEquals(1, cos.size());\n    \n    cos.write(new byte[]{0,1,2,3,4,5,6,7,8,9}, 2, 3);\n    cos.write(new byte[]{0,1});\n    cos.write(9);\n    cos.flush();\n    cos.close();\n  }\n","date":"2016-09-15 02:08:18","endLine":294,"groupId":"8741","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddOneOutputStreamWhenEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/65/8c11ac6f8a3217a191283b4d7fb0636a12771a.src","preCode":"  public void testAddOneOutputStreamWhenEmpty() throws IOException {\n    final Sequence seqStreamOne = mockContext.sequence(\"seqStreamOne\");\n    final OutputStream streamOne = mockContext.mock(OutputStream.class, \"streamOne\");\n    mockContext.checking(new Expectations() {{\n      oneOf(streamOne).write(2); inSequence(seqStreamOne);\n      oneOf(streamOne).write(3); inSequence(seqStreamOne);\n      oneOf(streamOne).write(4); inSequence(seqStreamOne);\n      oneOf(streamOne).write(0); inSequence(seqStreamOne);\n      oneOf(streamOne).write(1); inSequence(seqStreamOne);\n      oneOf(streamOne).write(9); inSequence(seqStreamOne);\n      oneOf(streamOne).flush(); inSequence(seqStreamOne);\n      oneOf(streamOne).flush(); inSequence(seqStreamOne);\n      oneOf(streamOne).close(); inSequence(seqStreamOne);\n    }});\n\n    final CompositeOutputStream cos = new CompositeOutputStream();\n\n    assertTrue(cos.isEmpty());\n    assertEquals(0, cos.size());\n    \n    cos.addOutputStream(streamOne);\n    assertFalse(cos.isEmpty());\n    assertEquals(1, cos.size());\n    \n    cos.write(new byte[]{0,1,2,3,4,5,6,7,8,9}, 2, 3);\n    cos.write(new byte[]{0,1});\n    cos.write(9);\n    cos.flush();\n    cos.close();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/io/CompositeOutputStreamJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"B"}],"commitId":"8ea08da3d2baa64ca631641430b54d71ce3ff362","commitMessage":"@@@GEODE-37 Merge branch 'feature/GEODE-37_2' into develop\n\nConflicts:\n\tgeode-core/src/main/java/com/gemstone/gemfire/cache/query/internal/IndexTrackingQueryObserver.java\n","date":"2016-09-15 02:08:18","modifiedFileCount":"151","status":"B","submitter":"Hitesh Khamesra"},{"authorTime":"2018-09-06 23:46:08","codes":[{"authorDate":"2018-09-06 23:46:08","commitOrder":2,"curCode":"  public void testAddOutputStreamWithOneStream() throws IOException {\n    final OutputStream streamOne = mock(OutputStream.class, \"streamOne\");\n    final OutputStream streamTwo = mock(OutputStream.class, \"streamTwo\");\n    final CompositeOutputStream cos = new CompositeOutputStream(streamOne);\n    assertThat(cos.isEmpty()).isFalse();\n    assertThat(cos.size()).isEqualTo(1);\n    cos.addOutputStream(streamTwo);\n    assertThat(cos.size()).isEqualTo(2);\n    cos.write(new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 2, 3);\n    cos.write(new byte[] {0, 1});\n    cos.write(9);\n    cos.flush();\n    cos.close();\n\n    InOrder inOrderStreams = inOrder(streamOne, streamTwo);\n    inOrderStreams.verify(streamOne, times(1)).write(2);\n    inOrderStreams.verify(streamOne, times(1)).write(3);\n    inOrderStreams.verify(streamOne, times(1)).write(4);\n    inOrderStreams.verify(streamOne, times(1)).write(0);\n    inOrderStreams.verify(streamOne, times(1)).write(1);\n    inOrderStreams.verify(streamOne, times(1)).write(9);\n    inOrderStreams.verify(streamOne, times(2)).flush();\n    inOrderStreams.verify(streamOne, times(1)).close();\n  }\n","date":"2018-09-06 23:46:08","endLine":165,"groupId":"15487","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddOutputStreamWithOneStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/34/a438d29d56a7a644b8f93e54a28b5764b8584c.src","preCode":"  public void testAddOutputStreamWithOneStream() throws IOException {\n    final Sequence seqStreamOne = mockContext.sequence(\"seqStreamOne\");\n    final OutputStream streamOne = mockContext.mock(OutputStream.class, \"streamOne\");\n    mockContext.checking(new Expectations() {\n      {\n        oneOf(streamOne).write(2);\n        inSequence(seqStreamOne);\n        oneOf(streamOne).write(3);\n        inSequence(seqStreamOne);\n        oneOf(streamOne).write(4);\n        inSequence(seqStreamOne);\n        oneOf(streamOne).write(0);\n        inSequence(seqStreamOne);\n        oneOf(streamOne).write(1);\n        inSequence(seqStreamOne);\n        oneOf(streamOne).write(9);\n        inSequence(seqStreamOne);\n        oneOf(streamOne).flush();\n        inSequence(seqStreamOne);\n        oneOf(streamOne).flush();\n        inSequence(seqStreamOne);\n        oneOf(streamOne).close();\n        inSequence(seqStreamOne);\n      }\n    });\n\n    final Sequence seqStreamTwo = mockContext.sequence(\"seqStreamTwo\");\n    final OutputStream streamTwo = mockContext.mock(OutputStream.class, \"streamTwo\");\n    mockContext.checking(new Expectations() {\n      {\n        oneOf(streamTwo).write(2);\n        inSequence(seqStreamTwo);\n        oneOf(streamTwo).write(3);\n        inSequence(seqStreamTwo);\n        oneOf(streamTwo).write(4);\n        inSequence(seqStreamTwo);\n        oneOf(streamTwo).write(0);\n        inSequence(seqStreamTwo);\n        oneOf(streamTwo).write(1);\n        inSequence(seqStreamTwo);\n        oneOf(streamTwo).write(9);\n        inSequence(seqStreamTwo);\n        oneOf(streamTwo).flush();\n        inSequence(seqStreamTwo);\n        oneOf(streamTwo).flush();\n        inSequence(seqStreamTwo);\n        oneOf(streamTwo).close();\n        inSequence(seqStreamTwo);\n      }\n    });\n\n    final CompositeOutputStream cos = new CompositeOutputStream(streamOne);\n\n    assertFalse(cos.isEmpty());\n    assertEquals(1, cos.size());\n\n    cos.addOutputStream(streamTwo);\n    assertEquals(2, cos.size());\n\n    cos.write(new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 2, 3);\n    cos.write(new byte[] {0, 1});\n    cos.write(9);\n    cos.flush();\n    cos.close();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/io/CompositeOutputStreamJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2018-09-06 23:46:08","commitOrder":2,"curCode":"  public void testAddOneOutputStreamWhenEmpty() throws IOException {\n    final OutputStream streamOne = mock(OutputStream.class, \"streamOne\");\n    final CompositeOutputStream cos = new CompositeOutputStream();\n    assertThat(cos.isEmpty()).isTrue();\n    assertThat(cos.size()).isEqualTo(0);\n    cos.addOutputStream(streamOne);\n    assertThat(cos.isEmpty()).isFalse();\n    assertThat(cos.size()).isEqualTo(1);\n    cos.write(new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 2, 3);\n    cos.write(new byte[] {0, 1});\n    cos.write(9);\n    cos.flush();\n    cos.close();\n\n    InOrder inOrderStreams = inOrder(streamOne);\n    inOrderStreams.verify(streamOne, times(1)).write(2);\n    inOrderStreams.verify(streamOne, times(1)).write(3);\n    inOrderStreams.verify(streamOne, times(1)).write(4);\n    inOrderStreams.verify(streamOne, times(1)).write(0);\n    inOrderStreams.verify(streamOne, times(1)).write(1);\n    inOrderStreams.verify(streamOne, times(1)).write(9);\n    inOrderStreams.verify(streamOne, times(2)).flush();\n    inOrderStreams.verify(streamOne, times(1)).close();\n  }\n","date":"2018-09-06 23:46:08","endLine":191,"groupId":"15485","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddOneOutputStreamWhenEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/34/a438d29d56a7a644b8f93e54a28b5764b8584c.src","preCode":"  public void testAddOneOutputStreamWhenEmpty() throws IOException {\n    final Sequence seqStreamOne = mockContext.sequence(\"seqStreamOne\");\n    final OutputStream streamOne = mockContext.mock(OutputStream.class, \"streamOne\");\n    mockContext.checking(new Expectations() {\n      {\n        oneOf(streamOne).write(2);\n        inSequence(seqStreamOne);\n        oneOf(streamOne).write(3);\n        inSequence(seqStreamOne);\n        oneOf(streamOne).write(4);\n        inSequence(seqStreamOne);\n        oneOf(streamOne).write(0);\n        inSequence(seqStreamOne);\n        oneOf(streamOne).write(1);\n        inSequence(seqStreamOne);\n        oneOf(streamOne).write(9);\n        inSequence(seqStreamOne);\n        oneOf(streamOne).flush();\n        inSequence(seqStreamOne);\n        oneOf(streamOne).flush();\n        inSequence(seqStreamOne);\n        oneOf(streamOne).close();\n        inSequence(seqStreamOne);\n      }\n    });\n\n    final CompositeOutputStream cos = new CompositeOutputStream();\n\n    assertTrue(cos.isEmpty());\n    assertEquals(0, cos.size());\n\n    cos.addOutputStream(streamOne);\n    assertFalse(cos.isEmpty());\n    assertEquals(1, cos.size());\n\n    cos.write(new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 2, 3);\n    cos.write(new byte[] {0, 1});\n    cos.write(9);\n    cos.flush();\n    cos.close();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/io/CompositeOutputStreamJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"b73f8bbde3e19942093e14f090789ee7bec5a299","commitMessage":"@@@GEODE-5607: Replace Jmock with Mockito (#2414)\n\n* GEODE-5607: Replace Jmock with Mockito\n\n- Removed dependency to `org.jmock`.\n- Migrated several test classes to use `Mockito` instead `Jmock`.\n- Changed same classes to use `assertj` instead of `junit.Assert`.\n- Changed same classes to use `Awaitility` instead of `WaitCriterion`.\n\n* Minor fixes in test asserts\n\nSeveral test methods had the wrong order in the `assertThat` calls.\nAsserts were written as `assertThat(<exepcted>).is*(<actual>)`.  now\nthey have been corrected to `assertThat(<actual>).is*(<expected>)`.\n\n* Minor fixes in test classes\n","date":"2018-09-06 23:46:08","modifiedFileCount":"20","status":"M","submitter":"Juan Jos? Ramos"},{"authorTime":"2020-05-29 00:32:17","codes":[{"authorDate":"2020-05-29 00:32:17","commitOrder":3,"curCode":"  public void testAddOutputStreamWithOneStream() throws IOException {\n    final OutputStream streamOne = mock(OutputStream.class, \"streamOne\");\n    final OutputStream streamTwo = mock(OutputStream.class, \"streamTwo\");\n    final CompositeOutputStream cos = new CompositeOutputStream(streamOne);\n    assertThat(cos.isEmpty()).isFalse();\n    assertThat(cos.size()).isEqualTo(1);\n    cos.addOutputStream(streamTwo);\n    assertThat(cos.size()).isEqualTo(2);\n    cos.write(new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 2, 3);\n    cos.write(new byte[] {0, 1});\n    cos.write(9);\n    cos.flush();\n    cos.close();\n\n    InOrder inOrderStreams = inOrder(streamOne, streamTwo);\n    inOrderStreams.verify(streamOne, times(1)).write(new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 2,\n        3);\n    inOrderStreams.verify(streamOne, times(1)).write(new byte[] {0, 1}, 0, 2);\n    inOrderStreams.verify(streamOne, times(1)).write(9);\n    inOrderStreams.verify(streamOne, times(2)).flush();\n    inOrderStreams.verify(streamOne, times(1)).close();\n  }\n","date":"2020-05-29 00:32:17","endLine":156,"groupId":"102540","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testAddOutputStreamWithOneStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3f/3b6389a6ae8c00a669b7f7de9a984fb5c031e7.src","preCode":"  public void testAddOutputStreamWithOneStream() throws IOException {\n    final OutputStream streamOne = mock(OutputStream.class, \"streamOne\");\n    final OutputStream streamTwo = mock(OutputStream.class, \"streamTwo\");\n    final CompositeOutputStream cos = new CompositeOutputStream(streamOne);\n    assertThat(cos.isEmpty()).isFalse();\n    assertThat(cos.size()).isEqualTo(1);\n    cos.addOutputStream(streamTwo);\n    assertThat(cos.size()).isEqualTo(2);\n    cos.write(new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 2, 3);\n    cos.write(new byte[] {0, 1});\n    cos.write(9);\n    cos.flush();\n    cos.close();\n\n    InOrder inOrderStreams = inOrder(streamOne, streamTwo);\n    inOrderStreams.verify(streamOne, times(1)).write(2);\n    inOrderStreams.verify(streamOne, times(1)).write(3);\n    inOrderStreams.verify(streamOne, times(1)).write(4);\n    inOrderStreams.verify(streamOne, times(1)).write(0);\n    inOrderStreams.verify(streamOne, times(1)).write(1);\n    inOrderStreams.verify(streamOne, times(1)).write(9);\n    inOrderStreams.verify(streamOne, times(2)).flush();\n    inOrderStreams.verify(streamOne, times(1)).close();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/io/CompositeOutputStreamJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2020-05-29 00:32:17","commitOrder":3,"curCode":"  public void testAddOneOutputStreamWhenEmpty() throws IOException {\n    final OutputStream streamOne = mock(OutputStream.class, \"streamOne\");\n    final CompositeOutputStream cos = new CompositeOutputStream();\n    assertThat(cos.isEmpty()).isTrue();\n    assertThat(cos.size()).isEqualTo(0);\n    cos.addOutputStream(streamOne);\n    assertThat(cos.isEmpty()).isFalse();\n    assertThat(cos.size()).isEqualTo(1);\n    cos.write(new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 2, 3);\n    cos.write(new byte[] {0, 1});\n    cos.write(9);\n    cos.flush();\n    cos.close();\n\n    InOrder inOrderStreams = inOrder(streamOne);\n    inOrderStreams.verify(streamOne, times(1)).write(new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 2,\n        3);\n    inOrderStreams.verify(streamOne, times(1)).write(new byte[] {0, 1}, 0, 2);\n    inOrderStreams.verify(streamOne, times(1)).write(9);\n    inOrderStreams.verify(streamOne, times(2)).flush();\n    inOrderStreams.verify(streamOne, times(1)).close();\n  }\n","date":"2020-05-29 00:32:17","endLine":180,"groupId":"102540","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testAddOneOutputStreamWhenEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3f/3b6389a6ae8c00a669b7f7de9a984fb5c031e7.src","preCode":"  public void testAddOneOutputStreamWhenEmpty() throws IOException {\n    final OutputStream streamOne = mock(OutputStream.class, \"streamOne\");\n    final CompositeOutputStream cos = new CompositeOutputStream();\n    assertThat(cos.isEmpty()).isTrue();\n    assertThat(cos.size()).isEqualTo(0);\n    cos.addOutputStream(streamOne);\n    assertThat(cos.isEmpty()).isFalse();\n    assertThat(cos.size()).isEqualTo(1);\n    cos.write(new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 2, 3);\n    cos.write(new byte[] {0, 1});\n    cos.write(9);\n    cos.flush();\n    cos.close();\n\n    InOrder inOrderStreams = inOrder(streamOne);\n    inOrderStreams.verify(streamOne, times(1)).write(2);\n    inOrderStreams.verify(streamOne, times(1)).write(3);\n    inOrderStreams.verify(streamOne, times(1)).write(4);\n    inOrderStreams.verify(streamOne, times(1)).write(0);\n    inOrderStreams.verify(streamOne, times(1)).write(1);\n    inOrderStreams.verify(streamOne, times(1)).write(9);\n    inOrderStreams.verify(streamOne, times(2)).flush();\n    inOrderStreams.verify(streamOne, times(1)).close();\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/internal/io/CompositeOutputStreamJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"bd2d118ba3e5a5d07dacc8cb2ce3fd153b171f5c","commitMessage":"@@@GEODE-7864: Override the default implementation of write(byte[]. int. int) (#4871)\n\n* Prevent overheads of writing one byte at a time.","date":"2020-05-29 00:32:17","modifiedFileCount":"6","status":"M","submitter":"Nabarun Nag"}]
