[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null);\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        DistributedMembershipListener listener1 = mock(DistributedMembershipListener.class);\n        DMStats stats1 = mock(DMStats.class);\n        System.out.println(\"creating 1st membership manager\");\n        m1 = MemberFactory.newMembershipManager(listener1, config, transport, stats1,\n            SecurityServiceFactory.create());\n        m1.startEventProcessing();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      DistributedMembershipListener listener2 = mock(DistributedMembershipListener.class);\n      DMStats stats2 = mock(DMStats.class);\n      System.out.println(\"creating 2nd membership manager\");\n      m2 = MemberFactory.newMembershipManager(listener2, config, transport, stats2,\n          SecurityServiceFactory.create());\n      m2.startEventProcessing();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      NetView view = jl1.getView();\n      InternalDistributedMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(error);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":242,"groupId":"45032","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e6/eb9ba8f385396ecb483d5df33d5db92f3bc2f6.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null);\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        DistributedMembershipListener listener1 = mock(DistributedMembershipListener.class);\n        DMStats stats1 = mock(DMStats.class);\n        System.out.println(\"creating 1st membership manager\");\n        m1 = MemberFactory.newMembershipManager(listener1, config, transport, stats1,\n            SecurityServiceFactory.create());\n        m1.startEventProcessing();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      DistributedMembershipListener listener2 = mock(DistributedMembershipListener.class);\n      DMStats stats2 = mock(DMStats.class);\n      System.out.println(\"creating 2nd membership manager\");\n      m2 = MemberFactory.newMembershipManager(listener2, config, transport, stats2,\n          SecurityServiceFactory.create());\n      m2.startEventProcessing();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      NetView view = jl1.getView();\n      InternalDistributedMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(error);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null);\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        DistributedMembershipListener listener1 = mock(DistributedMembershipListener.class);\n        DMStats stats1 = mock(DMStats.class);\n        System.out.println(\"creating 1st membership manager\");\n        m1 = MemberFactory.newMembershipManager(listener1, config, transport, stats1,\n            SecurityServiceFactory.create());\n        m1.startEventProcessing();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      DistributedMembershipListener listener2 = mock(DistributedMembershipListener.class);\n      DMStats stats2 = mock(DMStats.class);\n      System.out.println(\"creating 2nd membership manager\");\n      m2 = MemberFactory.newMembershipManager(listener2, config, transport, stats2,\n          SecurityServiceFactory.create());\n      m2.startEventProcessing();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":375,"groupId":"28017","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e6/eb9ba8f385396ecb483d5df33d5db92f3bc2f6.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null);\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        DistributedMembershipListener listener1 = mock(DistributedMembershipListener.class);\n        DMStats stats1 = mock(DMStats.class);\n        System.out.println(\"creating 1st membership manager\");\n        m1 = MemberFactory.newMembershipManager(listener1, config, transport, stats1,\n            SecurityServiceFactory.create());\n        m1.startEventProcessing();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      DistributedMembershipListener listener2 = mock(DistributedMembershipListener.class);\n      DMStats stats2 = mock(DMStats.class);\n      System.out.println(\"creating 2nd membership manager\");\n      m2 = MemberFactory.newMembershipManager(listener2, config, transport, stats2,\n          SecurityServiceFactory.create());\n      m2.startEventProcessing();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2019-02-06 06:32:50","codes":[{"authorDate":"2019-02-06 06:32:50","commitOrder":2,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null);\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        DistributedMembershipListener listener1 = mock(DistributedMembershipListener.class);\n        DMStats stats1 = mock(DMStats.class);\n        InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n        when(mockSystem.getConfig()).thenReturn(config);\n        System.out.println(\"creating 1st membership manager\");\n        m1 = MemberFactory.newMembershipManager(listener1, mockSystem, transport, stats1,\n            SecurityServiceFactory.create());\n        m1.startEventProcessing();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      DistributedMembershipListener listener2 = mock(DistributedMembershipListener.class);\n      DMStats stats2 = mock(DMStats.class);\n      InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n      when(mockSystem.getConfig()).thenReturn(config);\n      System.out.println(\"creating 2nd membership manager\");\n      m2 = MemberFactory.newMembershipManager(listener2, mockSystem, transport, stats2,\n          SecurityServiceFactory.create());\n      m2.startEventProcessing();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      NetView view = jl1.getView();\n      InternalDistributedMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(error);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-02-06 06:34:08","endLine":247,"groupId":"45032","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/0c/259f3a714d33e1077a6ab28dacd52079536c7d.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null);\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        DistributedMembershipListener listener1 = mock(DistributedMembershipListener.class);\n        DMStats stats1 = mock(DMStats.class);\n        System.out.println(\"creating 1st membership manager\");\n        m1 = MemberFactory.newMembershipManager(listener1, config, transport, stats1,\n            SecurityServiceFactory.create());\n        m1.startEventProcessing();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      DistributedMembershipListener listener2 = mock(DistributedMembershipListener.class);\n      DMStats stats2 = mock(DMStats.class);\n      System.out.println(\"creating 2nd membership manager\");\n      m2 = MemberFactory.newMembershipManager(listener2, config, transport, stats2,\n          SecurityServiceFactory.create());\n      m2.startEventProcessing();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      NetView view = jl1.getView();\n      InternalDistributedMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(error);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2019-02-06 06:32:50","commitOrder":2,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null);\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        DistributedMembershipListener listener1 = mock(DistributedMembershipListener.class);\n        DMStats stats1 = mock(DMStats.class);\n        InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n        when(mockSystem.getConfig()).thenReturn(config);\n        System.out.println(\"creating 1st membership manager\");\n        m1 = MemberFactory.newMembershipManager(listener1, mockSystem, transport, stats1,\n            SecurityServiceFactory.create());\n        m1.startEventProcessing();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      DistributedMembershipListener listener2 = mock(DistributedMembershipListener.class);\n      DMStats stats2 = mock(DMStats.class);\n      InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n      when(mockSystem.getConfig()).thenReturn(config);\n      System.out.println(\"creating 2nd membership manager\");\n      m2 = MemberFactory.newMembershipManager(listener2, mockSystem, transport, stats2,\n          SecurityServiceFactory.create());\n      m2.startEventProcessing();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-02-06 06:34:08","endLine":384,"groupId":"28017","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/0c/259f3a714d33e1077a6ab28dacd52079536c7d.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null);\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        DistributedMembershipListener listener1 = mock(DistributedMembershipListener.class);\n        DMStats stats1 = mock(DMStats.class);\n        System.out.println(\"creating 1st membership manager\");\n        m1 = MemberFactory.newMembershipManager(listener1, config, transport, stats1,\n            SecurityServiceFactory.create());\n        m1.startEventProcessing();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      DistributedMembershipListener listener2 = mock(DistributedMembershipListener.class);\n      DMStats stats2 = mock(DMStats.class);\n      System.out.println(\"creating 2nd membership manager\");\n      m2 = MemberFactory.newMembershipManager(listener2, config, transport, stats2,\n          SecurityServiceFactory.create());\n      m2.startEventProcessing();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"986ef9dcad9f95e838a0423f01b183724b355bf6","commitMessage":"@@@GEODE-4582 Remove singleton calls from product code\n\nRemoving calls to find an InternalDistributedSystem from membership\nclasses.  This also addresses GEODE-1753 \"Clean up initialization of GMS\nServices log writer\".  GEODE-4581 and GEODE-4562.\n","date":"2019-02-06 06:34:08","modifiedFileCount":"19","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2019-06-11 05:15:21","codes":[{"authorDate":"2019-06-11 05:15:21","commitOrder":3,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        DistributedMembershipListener listener1 = mock(DistributedMembershipListener.class);\n        DMStats stats1 = mock(DMStats.class);\n        InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n        when(mockSystem.getConfig()).thenReturn(config);\n        System.out.println(\"creating 1st membership manager\");\n        m1 = MemberFactory.newMembershipManager(listener1, mockSystem, transport, stats1,\n            SecurityServiceFactory.create());\n        m1.startEventProcessing();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      DistributedMembershipListener listener2 = mock(DistributedMembershipListener.class);\n      DMStats stats2 = mock(DMStats.class);\n      InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n      when(mockSystem.getConfig()).thenReturn(config);\n      System.out.println(\"creating 2nd membership manager\");\n      m2 = MemberFactory.newMembershipManager(listener2, mockSystem, transport, stats2,\n          SecurityServiceFactory.create());\n      m2.startEventProcessing();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      NetView view = jl1.getView();\n      InternalDistributedMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(error);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-06-25 07:07:48","endLine":251,"groupId":"45032","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6a/1b891953b6361961cc0a88a9e890a2a1d77717.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null);\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        DistributedMembershipListener listener1 = mock(DistributedMembershipListener.class);\n        DMStats stats1 = mock(DMStats.class);\n        InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n        when(mockSystem.getConfig()).thenReturn(config);\n        System.out.println(\"creating 1st membership manager\");\n        m1 = MemberFactory.newMembershipManager(listener1, mockSystem, transport, stats1,\n            SecurityServiceFactory.create());\n        m1.startEventProcessing();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      DistributedMembershipListener listener2 = mock(DistributedMembershipListener.class);\n      DMStats stats2 = mock(DMStats.class);\n      InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n      when(mockSystem.getConfig()).thenReturn(config);\n      System.out.println(\"creating 2nd membership manager\");\n      m2 = MemberFactory.newMembershipManager(listener2, mockSystem, transport, stats2,\n          SecurityServiceFactory.create());\n      m2.startEventProcessing();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      NetView view = jl1.getView();\n      InternalDistributedMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(error);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2019-06-11 05:15:21","commitOrder":3,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        DistributedMembershipListener listener1 = mock(DistributedMembershipListener.class);\n        DMStats stats1 = mock(DMStats.class);\n        InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n        when(mockSystem.getConfig()).thenReturn(config);\n        System.out.println(\"creating 1st membership manager\");\n        m1 = MemberFactory.newMembershipManager(listener1, mockSystem, transport, stats1,\n            SecurityServiceFactory.create());\n        m1.startEventProcessing();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      DistributedMembershipListener listener2 = mock(DistributedMembershipListener.class);\n      DMStats stats2 = mock(DMStats.class);\n      InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n      when(mockSystem.getConfig()).thenReturn(config);\n      System.out.println(\"creating 2nd membership manager\");\n      m2 = MemberFactory.newMembershipManager(listener2, mockSystem, transport, stats2,\n          SecurityServiceFactory.create());\n      m2.startEventProcessing();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-06-25 07:07:48","endLine":389,"groupId":"28017","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6a/1b891953b6361961cc0a88a9e890a2a1d77717.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null);\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        DistributedMembershipListener listener1 = mock(DistributedMembershipListener.class);\n        DMStats stats1 = mock(DMStats.class);\n        InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n        when(mockSystem.getConfig()).thenReturn(config);\n        System.out.println(\"creating 1st membership manager\");\n        m1 = MemberFactory.newMembershipManager(listener1, mockSystem, transport, stats1,\n            SecurityServiceFactory.create());\n        m1.startEventProcessing();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      DistributedMembershipListener listener2 = mock(DistributedMembershipListener.class);\n      DMStats stats2 = mock(DMStats.class);\n      InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n      when(mockSystem.getConfig()).thenReturn(config);\n      System.out.println(\"creating 2nd membership manager\");\n      m2 = MemberFactory.newMembershipManager(listener2, mockSystem, transport, stats2,\n          SecurityServiceFactory.create());\n      m2.startEventProcessing();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"}],"commitId":"f893ccff3d8856297eb408366fcf6fd4ab980312","commitMessage":"@@@GEODE-6825: Add workingDirectory field to GMSLocator\n\nAdd workingDirectory parameter to the following:\n* InternalLocator.startLocator\n* MemberFactory.newLocatorHandler\n* GMSMemberFactory.newLocatorHandler\n\nUpdate some tests to use TemporaryFolder for Locator workingDirectory.\n","date":"2019-06-25 07:07:48","modifiedFileCount":"9","status":"M","submitter":"Kirk Lund"},{"authorTime":"2019-06-26 22:34:27","codes":[{"authorDate":"2019-06-26 22:34:27","commitOrder":4,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, DistributedMembershipListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final DistributedMembershipListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      NetView view = jl1.getView();\n      InternalDistributedMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(error);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-06-26 22:34:27","endLine":243,"groupId":"40644","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/39/5fff72d86c06cde5bc8c1d04dd92e13fc26974.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        DistributedMembershipListener listener1 = mock(DistributedMembershipListener.class);\n        DMStats stats1 = mock(DMStats.class);\n        InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n        when(mockSystem.getConfig()).thenReturn(config);\n        System.out.println(\"creating 1st membership manager\");\n        m1 = MemberFactory.newMembershipManager(listener1, mockSystem, transport, stats1,\n            SecurityServiceFactory.create());\n        m1.startEventProcessing();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      DistributedMembershipListener listener2 = mock(DistributedMembershipListener.class);\n      DMStats stats2 = mock(DMStats.class);\n      InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n      when(mockSystem.getConfig()).thenReturn(config);\n      System.out.println(\"creating 2nd membership manager\");\n      m2 = MemberFactory.newMembershipManager(listener2, mockSystem, transport, stats2,\n          SecurityServiceFactory.create());\n      m2.startEventProcessing();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      NetView view = jl1.getView();\n      InternalDistributedMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(error);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2019-06-26 22:34:27","commitOrder":4,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, DistributedMembershipListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final DistributedMembershipListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-06-26 22:34:27","endLine":387,"groupId":"28017","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/39/5fff72d86c06cde5bc8c1d04dd92e13fc26974.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        DistributedMembershipListener listener1 = mock(DistributedMembershipListener.class);\n        DMStats stats1 = mock(DMStats.class);\n        InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n        when(mockSystem.getConfig()).thenReturn(config);\n        System.out.println(\"creating 1st membership manager\");\n        m1 = MemberFactory.newMembershipManager(listener1, mockSystem, transport, stats1,\n            SecurityServiceFactory.create());\n        m1.startEventProcessing();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      DistributedMembershipListener listener2 = mock(DistributedMembershipListener.class);\n      DMStats stats2 = mock(DMStats.class);\n      InternalDistributedSystem mockSystem = mock(InternalDistributedSystem.class);\n      when(mockSystem.getConfig()).thenReturn(config);\n      System.out.println(\"creating 2nd membership manager\");\n      m2 = MemberFactory.newMembershipManager(listener2, mockSystem, transport, stats2,\n          SecurityServiceFactory.create());\n      m2.startEventProcessing();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"}],"commitId":"56dcf84b53b238aabaf10a246d37e60533950bbf","commitMessage":"@@@Merge pull request #3717 from Bill/feature/initial-cleanup-GEODE-6883\n\nGEODE-6883: Removing some dependencies on core from membership","date":"2019-06-26 22:34:27","modifiedFileCount":"26","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2019-07-10 00:55:28","codes":[{"authorDate":"2019-07-10 00:55:28","commitOrder":5,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, DistributedMembershipListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final DistributedMembershipListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      NetView view = jl1.getView();\n      InternalDistributedMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(error);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-07-10 00:55:28","endLine":243,"groupId":"40644","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/52/07765f0fbea708d598e20919514afd8413c8be.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, DistributedMembershipListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final DistributedMembershipListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      NetView view = jl1.getView();\n      InternalDistributedMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(error);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2019-07-10 00:55:28","commitOrder":5,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, DistributedMembershipListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final DistributedMembershipListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-07-10 00:55:28","endLine":387,"groupId":"28017","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/52/07765f0fbea708d598e20919514afd8413c8be.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, DistributedMembershipListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final DistributedMembershipListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"}],"commitId":"f94a498a7005948cbfba0f4eaffa0119e659eea6","commitMessage":"@@@GEODE-6918: Cleanup InternalLocator use of workingDirectory (#3782)\n\n* Pass workingDirectory to InternalConfigurationPersistenceService\n* Fixup InternalConfigurationPersistenceService constructors\n* Create InternalLocatorIntegrationTest\n* Use Path instead of String or File\n* Cleanup InternalConfigurationPersistenceService and JAXBService\n","date":"2019-07-10 00:55:28","modifiedFileCount":"17","status":"M","submitter":"Kirk Lund"},{"authorTime":"2019-07-10 00:55:28","codes":[{"authorDate":"2019-08-07 02:41:38","commitOrder":6,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, DistributedMembershipListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final DistributedMembershipListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      GMSMembershipView view = jl1.getView();\n      GMSMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = Arrays.asList(notCreator.getGroups());\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(error);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-08-07 02:44:04","endLine":237,"groupId":"41716","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/cf/f5061b2c240cb32146e96df190deb9bd940c49.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, DistributedMembershipListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final DistributedMembershipListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      NetView view = jl1.getView();\n      InternalDistributedMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(error);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2019-07-10 00:55:28","commitOrder":6,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, DistributedMembershipListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final DistributedMembershipListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-07-10 00:55:28","endLine":387,"groupId":"28017","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/52/07765f0fbea708d598e20919514afd8413c8be.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, DistributedMembershipListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final DistributedMembershipListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"N"}],"commitId":"159dd7b694a5c3cde160dd4d5b14fe3b77aa7fb4","commitMessage":"@@@GEODE-6883 Move the membership code into a separate gradle sub-project\n\nThis commit is focused on removing references to\nInternalDistributedMember and DistributionMessage from \"gms\"\npackages.\n\n    GMS classes only refer to GMSMember\n    GMS classes use GMSMembershipView.  NetView is now an interface\n    GMS classes do not refer to DistributionMessage.  JGroupsMessenger\n      expects GMSMessage instances.  Geode messages to be sent over UDP\n      are wrapped in a GMSMessageAdapter.\n    \"gms\" messages extend AbstractGMSMessage which implements GMSMessage\n    GMSMembershipManager has an inner class that implements the GMS Manager\n      interface and is now in the \"adapter\" package\n    GMSMembershipManager translates GMSMembershipView into a MembershipView\n      for the rest of Geode to use (this is the old NetView class)\n    GMS instantiation allows us to inject the Manager into the new Services\n      instance.\n    Other adapter classes have been added to translate between Geode\n      and GMS.\n\n    GMSUtil has new methods for marshalling/unmarshalling\n    InternalDistributedMember instances for backward-compatibility.\n    GMSMember now has the same on-wire form as\n    InternalDistributedMember.  This allows the GMS classes to\n    deserialize a message from a pre-1.10 member whose code writes\n    InternalDistributedMembers when serializing something like a\n    JoinRequest.\n","date":"2019-08-07 02:44:04","modifiedFileCount":"83","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2019-09-11 06:52:14","codes":[{"authorDate":"2019-09-11 06:52:14","commitOrder":7,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      GMSMembershipView view = jl1.getView();\n      GMSMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = Arrays.asList(notCreator.getGroups());\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-09-11 06:52:14","endLine":243,"groupId":"41716","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e0/85ce10c65284eff26d17a0a4eaf738c21c8004.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, DistributedMembershipListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final DistributedMembershipListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      GMSMembershipView view = jl1.getView();\n      GMSMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = Arrays.asList(notCreator.getGroups());\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(error);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2019-09-11 06:52:14","commitOrder":7,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-09-11 06:52:14","endLine":393,"groupId":"28017","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e0/85ce10c65284eff26d17a0a4eaf738c21c8004.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, DistributedMembershipListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final DistributedMembershipListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg, null);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"}],"commitId":"4c6dcf955b36e9897dfd146a4433764eb5c983f0","commitMessage":"@@@GEODE_6883: Creating membership api classes (#3985)\n\nCreating a new membership API package. Starting that package out with\nthese classes:\n* MembershipBuilder - created by moving NetMember and NetLocator factory stuff\n  out of MembershipFactory and renaming MembershipFactory to MembershipBuilder\n* Membership - Extracted an interface from MembershipManager\n* Authenticator - Moved Authenticator to the API package\n* MembershipStatistics - Extracted interface from DMStats\n* MembershipListener and MessageListener - Creating these new membership\n  specific interfaces by splitting up DistributedMembershipListener into two\n  separate interfaces.\n* MembershipConfig - Extracted interface from ServiceConfig\n\n* Adding an archunit test for the membership API. Ensure that the API only\n  depends on other API classes.\n\n* Removing GMSMemberFactory and MemberServices\n  These classes were adding another layer to creating a MembershipManager. \n  but they didn't actually allow swapping in a different implementation.\n  Inlining these methods into the respective NetLocatorFactory. \n  NetMemberFactory.  and MembershipManagerFactory.\n\n* Removing getDM from DirectChannelListener - We want to get rid of this\n  interface in favor of other membership\n  specific interfaces that don't depend on core.\n","date":"2019-09-11 06:52:14","modifiedFileCount":"38","status":"M","submitter":"Dan Smith"},{"authorTime":"2019-09-11 06:52:14","codes":[{"authorDate":"2019-11-01 07:27:31","commitOrder":8,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      GMSMembershipView view = jl1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-11-01 07:27:31","endLine":246,"groupId":"40644","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/03/ae0572d1e79a8a9e4f7cfecd6325abe97e6cf5.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      GMSMembershipView view = jl1.getView();\n      GMSMember notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = Arrays.asList(notCreator.getGroups());\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2019-09-11 06:52:14","commitOrder":8,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-09-11 06:52:14","endLine":393,"groupId":"28017","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/e0/85ce10c65284eff26d17a0a4eaf738c21c8004.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"N"}],"commitId":"77103d0db68c9dd5087b98d47697dd05f2dc90f5","commitMessage":"@@@GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier (#4230)\n\n* GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier\n\nInitial refactor: removal of NetMember.  MemberAttributes and other classes that subordinated GMS\nidentifiers.  Repurposing GMSMember as a data packet to hold information required in a membership\nidentifer.\n\n* fixing failing tests\n\n* fixing failing unit tests\n\n* picking up a change that IntelliJ didn't auto-save & fixing serializables test\n\n* fixing problems with durable client ids\n\nthese identifiers morph after the client's membership identifier has been formed\nso the member ID needs to be updated before serializing it\n\n* fixing merge error\n\n* updating sanctionedDataSerializables\n\n* fixing lgtm complaint\n\n* removing unnecessary serialization/deserialization methods in GMSUtil\n\n* remove methods no longer needed for serializing an object with a different DSFID\n\n* fixing serializables test\n","date":"2019-11-01 07:27:31","modifiedFileCount":"91","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2019-11-20 01:04:51","codes":[{"authorDate":"2019-11-20 01:04:51","commitOrder":9,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      GMSMembershipView view = jl1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-11-20 01:04:51","endLine":252,"groupId":"42380","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f3/406519663e6435d0242376ded895a3cddb0799.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      GMSMembershipView view = jl1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2019-11-20 01:04:51","commitOrder":9,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-11-20 01:04:51","endLine":417,"groupId":"1589","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/f3/406519663e6435d0242376ded895a3cddb0799.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    MembershipManager m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<MembershipManager, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembershipManager) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembershipManager) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"}],"commitId":"4c1b21c29a31234e0795da8f2c1b471f0158790f","commitMessage":"@@@GEODE-7456: Moving GMSMembershipManager into gms package (#4313)\n\nAdding a Distribution class that ClusterDistributionManager and the\nrest of geode-core uses.  which wraps GMSMembershipManager. Moving\nGMSMembershipManager into the gms package and renaming to MembershipImpl.\n\nDistribution now owns the DirectChannel.  rather than MembershipImpl.\n\nRemoving the MembershipManager interface and replacing uses of it with the\nMembership interface.\n\n* Added an ArchUnitTest for geode-core to only use Distribution to access Membership.\n","date":"2019-11-20 01:04:51","modifiedFileCount":"48","status":"M","submitter":"Ernie Burghardt"},{"authorTime":"2019-12-10 08:50:10","codes":[{"authorDate":"2019-12-10 08:50:10","commitOrder":10,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      GMSMembershipView<InternalDistributedMember> view = jl1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-12-10 08:50:10","endLine":255,"groupId":"11940","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/50/27b51d6df803b5fb71d083f977cc0297d7bb70.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      GMSMembershipView view = jl1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2019-12-10 08:50:10","commitOrder":10,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-12-10 08:50:10","endLine":426,"groupId":"1589","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/50/27b51d6df803b5fb71d083f977cc0297d7bb70.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"M"}],"commitId":"6f247efc6c0e483af94f361418146a5b9a691548","commitMessage":"@@@GEODE-7479: Change Membership interface to use MemberIdentifier interface (#4420)\n\nChanging all classes in Membership to be parameterized by an ID type. \nwhich extends MemberIdentifier. This allows core to create a membership\nsystem that manages InternalDistributedMember objects in a type safe\nway.\n\nRemoving all uses of InternalDistributedMember.  DistributedMember.  and\nfriends from within the membership code.\n","date":"2019-12-10 08:50:10","modifiedFileCount":"81","status":"M","submitter":"Ernie Burghardt"},{"authorTime":"2019-12-27 05:10:48","codes":[{"authorDate":"2019-12-27 05:10:48","commitOrder":11,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      GMSMembershipView<InternalDistributedMember> view = jl1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-12-27 05:10:48","endLine":256,"groupId":"11940","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7c/cbdf05a30fdedf64424365cd36d922b4dfcd22.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      GMSMembershipView<InternalDistributedMember> view = jl1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2019-12-27 05:10:48","commitOrder":11,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-12-27 05:10:48","endLine":429,"groupId":"1589","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/7c/cbdf05a30fdedf64424365cd36d922b4dfcd22.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = SocketCreator.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"}],"commitId":"ceea971a808aa3e88be4e9034018d10108e5ea14","commitMessage":"@@@GEODE-7541: move SocketCreator localhost lookup to geode-common (#4527)\n\n* GEODE-7541: move SocketCreator localhost lookup to geode-common\n\nGeneral host address lookup remains in SocketCreator while localhost-\nrelated functionality has moved to LocalHostUtil.\n\n* added deprecated SocketCreator.getLocalHost() for use in upgrade tests\n\n* hardening tests for stressTest environment\n\n* merging with develop\n\n* remove use of system properties.  ensure old locator directories are cleaned up\n","date":"2019-12-27 05:10:48","modifiedFileCount":"64","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2019-12-31 02:48:39","codes":[{"authorDate":"2019-12-31 02:48:39","commitOrder":12,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      GMSMembershipView<InternalDistributedMember> view = jl1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-12-31 02:48:39","endLine":258,"groupId":"11940","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/51/3db626768c99ade6e5c4adaa24955453f04749.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      GMSMembershipView<InternalDistributedMember> view = jl1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2019-12-31 02:48:39","commitOrder":12,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2019-12-31 02:48:39","endLine":432,"groupId":"1589","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/51/3db626768c99ade6e5c4adaa24955453f04749.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      assertTrue(m1.getView().size() == 1);\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"}],"commitId":"10d1b8c4d5de036e773a377b7282c5581514a239","commitMessage":"@@@GEODE-7626: Break dependency on LocalViewMessage in membership (#4538)\n\n* GEODE-7626: Break dependency on LocalViewMessage in membership\n\nLocalViewMessage was a DistributionMessage executed in an executor owned\nby ClusterDistributionmanager.  This arrangement was very convoluted\nbecause CDM only had upstream involvement in membership view\ninstallation.\n\nThis PR moves view installation into GMSMembership using a\nsingle-threaded executor similar to what CDM used but without\nstatistics.  Stats for the view installation thread have never been\nuseful so I have not retained that functionality.\n\nThere are already many tests for view installation.  so while I've\nmodified a couple I haven't added any new tests.\n\n* make constructor private\n\n* simplifying the executor\n","date":"2019-12-31 02:48:39","modifiedFileCount":"7","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-01-01 11:13:13","codes":[{"authorDate":"2020-01-01 11:13:13","commitOrder":13,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      m1 = createMembershipManager(config, transport).getLeft();\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      final Membership mgr1 = m1;\n      final Membership mgr2 = m2;\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + mgr2.getView(), mgr2.getView().size() == 2);\n          assertTrue(\"view = \" + mgr1.getView(), mgr1.getView().size() == 2);\n          assertTrue(mgr1.getView().getCreator().equals(mgr2.getView().getCreator()));\n          assertTrue(mgr1.getView().getViewId() == mgr2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      MembershipView<InternalDistributedMember> view = mgr1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(mgr1.getLocalMember())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2020-01-01 11:13:13","endLine":248,"groupId":"16322","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/99/990bc2e08a9b33f5de6b37c848eeeb8f6f986e.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      GMSMembershipView<InternalDistributedMember> view = jl1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(jl1.getMemberID())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2020-01-01 11:13:13","commitOrder":13,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      m1 = createMembershipManager(config, transport).getLeft();\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      final Membership mgr1 = m1;\n      final Membership mgr2 = m2;\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + mgr2.getView(), mgr2.getView().size() == 2);\n          assertTrue(\"view = \" + mgr1.getView(), mgr1.getView().size() == 2);\n          assertTrue(mgr1.getView().getCreator().equals(mgr2.getView().getCreator()));\n          assertTrue(mgr1.getView().getViewId() == mgr2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2020-01-01 11:13:13","endLine":427,"groupId":"11535","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/99/990bc2e08a9b33f5de6b37c848eeeb8f6f986e.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      try {\n        System.setProperty(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY, \"true\");\n        m1 = createMembershipManager(config, transport).getLeft();\n      } finally {\n        System.getProperties().remove(GMSJoinLeave.BYPASS_DISCOVERY_PROPERTY);\n      }\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      JoinLeave jl1 = ((GMSMembership) m1).getServices().getJoinLeave();\n      JoinLeave jl2 = ((GMSMembership) m2).getServices().getJoinLeave();\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + jl2.getView(), jl2.getView().size() == 2);\n          assertTrue(\"view = \" + jl1.getView(), jl1.getView().size() == 2);\n          assertTrue(jl1.getView().getCreator().equals(jl2.getView().getCreator()));\n          assertTrue(jl1.getView().getViewId() == jl2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"}],"commitId":"263b3e22fbd3f205c2a0348d7e068e6a48a4b32c","commitMessage":"@@@GEODE-7634: create an ArchUnitTest that asserts that geode-core only ? (#4549)\n\n* GEODE-7634: create an ArchUnitTest that asserts that geode-core only uses the membership API\n\ncreating a new test to enforce use of membership APIs.  There are a few\nexceptions in test code.  plus others that aren't in the \"integration\ntest\" source set.\n\n* removing test dependencies and fixing crashDistributedSystem method\n\n* moved membership API classes to membership.api package and fixed OOME\n\n* move address verification class to tcp-server module and subclass in membership\n\n* rebasing on Ernie's GeodeGlossary stuff\n","date":"2020-01-01 11:13:13","modifiedFileCount":"132","status":"M","submitter":"Bruce Schuchardt"},{"authorTime":"2020-01-07 07:36:07","codes":[{"authorDate":"2020-01-07 07:36:07","commitOrder":14,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.LOCATOR_DM_TYPE);\n\n      \r\n      m1 = createMembershipManager(config, transport).getLeft();\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      final Membership mgr1 = m1;\n      final Membership mgr2 = m2;\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + mgr2.getView(), mgr2.getView().size() == 2);\n          assertTrue(\"view = \" + mgr1.getView(), mgr1.getView().size() == 2);\n          assertTrue(mgr1.getView().getCreator().equals(mgr2.getView().getCreator()));\n          assertTrue(mgr1.getView().getViewId() == mgr2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      MembershipView<InternalDistributedMember> view = mgr1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(mgr1.getLocalMember())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2020-01-07 07:36:07","endLine":248,"groupId":"16322","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/43/0406b1022b2530fb358ec0875241428a56ba74.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      m1 = createMembershipManager(config, transport).getLeft();\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      final Membership mgr1 = m1;\n      final Membership mgr2 = m2;\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + mgr2.getView(), mgr2.getView().size() == 2);\n          assertTrue(\"view = \" + mgr1.getView(), mgr1.getView().size() == 2);\n          assertTrue(mgr1.getView().getCreator().equals(mgr2.getView().getCreator()));\n          assertTrue(mgr1.getView().getViewId() == mgr2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      MembershipView<InternalDistributedMember> view = mgr1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(mgr1.getLocalMember())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2020-01-07 07:36:07","commitOrder":14,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.LOCATOR_DM_TYPE);\n\n      \r\n      m1 = createMembershipManager(config, transport).getLeft();\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      final Membership mgr1 = m1;\n      final Membership mgr2 = m2;\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + mgr2.getView(), mgr2.getView().size() == 2);\n          assertTrue(\"view = \" + mgr1.getView(), mgr1.getView().size() == 2);\n          assertTrue(mgr1.getView().getCreator().equals(mgr2.getView().getCreator()));\n          assertTrue(mgr1.getView().getViewId() == mgr2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","date":"2020-01-07 07:36:07","endLine":427,"groupId":"11535","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/43/0406b1022b2530fb358ec0875241428a56ba74.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.NORMAL_DM_TYPE);\n\n      \r\n      m1 = createMembershipManager(config, transport).getLeft();\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      final Membership mgr1 = m1;\n      final Membership mgr2 = m2;\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + mgr2.getView(), mgr2.getView().size() == 2);\n          assertTrue(\"view = \" + mgr1.getView(), mgr1.getView().size() == 2);\n          assertTrue(mgr1.getView().getCreator().equals(mgr2.getView().getCreator()));\n          assertTrue(mgr1.getView().getViewId() == mgr2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"}],"commitId":"65260ef6cec059f6da5b1877941e4a86bf8c0179","commitMessage":"@@@GEODE-7585: Create API for starting a locator in the membership package\n\nCreating a new MembershipLocator and MembershipLocatorBuilder that are used to\ncreate the membership locator. These classes encapsulate the TcpServer. \nPrimaryHandler.  and GMSLocator that were previously held by InternalLocator.\n\nGetting rid of some intermdiate classes that wrapped the GMSLocator -\nNetLocator and GMSLocatorAdapter.\n\nRefactoring the restart logic out of PrimaryHandler. There is now a separate\nRestartHandler.  and a separate collection that tracks RestartHandlers. Removing\nRestartableTcpHandler.\n\nRemoving TcpServerFactory.\n","date":"2020-01-07 07:36:07","modifiedFileCount":"24","status":"M","submitter":"Dan Smith"},{"authorTime":"2020-01-30 14:08:07","codes":[{"authorDate":"2020-01-30 14:08:07","commitOrder":15,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    InternalLocator internalLocator = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n\n      \r\n      \r\n      internalLocator =\n          InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n              new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.LOCATOR_DM_TYPE);\n\n      \r\n      final MembershipLocator<InternalDistributedMember> membershipLocator =\n          internalLocator.getMembershipLocator();\n\n      m1 = createMembershipManager(config, transport, membershipLocator).getLeft();\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport, membershipLocator);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      final Membership mgr1 = m1;\n      final Membership mgr2 = m2;\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + mgr2.getView(), mgr2.getView().size() == 2);\n          assertTrue(\"view = \" + mgr1.getView(), mgr1.getView().size() == 2);\n          assertTrue(mgr1.getView().getCreator().equals(mgr2.getView().getCreator()));\n          assertTrue(mgr1.getView().getViewId() == mgr2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      MembershipView<InternalDistributedMember> view = mgr1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(mgr1.getLocalMember())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (internalLocator != null) {\n        internalLocator.stop();\n      }\n    }\n  }\n","date":"2020-01-30 14:08:07","endLine":250,"groupId":"16322","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3d/21f693c20eb817d7275001fbf6febee00e9add.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n          new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.LOCATOR_DM_TYPE);\n\n      \r\n      m1 = createMembershipManager(config, transport).getLeft();\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      final Membership mgr1 = m1;\n      final Membership mgr2 = m2;\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + mgr2.getView(), mgr2.getView().size() == 2);\n          assertTrue(\"view = \" + mgr1.getView(), mgr1.getView().size() == 2);\n          assertTrue(mgr1.getView().getCreator().equals(mgr2.getView().getCreator()));\n          assertTrue(mgr1.getView().getViewId() == mgr2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      MembershipView<InternalDistributedMember> view = mgr1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(mgr1.getLocalMember())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2020-01-30 14:08:07","commitOrder":15,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    InternalLocator internalLocator = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      internalLocator =\n          InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n              temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.LOCATOR_DM_TYPE);\n\n      \r\n      final MembershipLocator<InternalDistributedMember> membershipLocator =\n          internalLocator.getMembershipLocator();\n\n      m1 = createMembershipManager(config, transport, membershipLocator).getLeft();\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport, membershipLocator);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      final Membership mgr1 = m1;\n      final Membership mgr2 = m2;\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + mgr2.getView(), mgr2.getView().size() == 2);\n          assertTrue(\"view = \" + mgr1.getView(), mgr1.getView().size() == 2);\n          assertTrue(mgr1.getView().getCreator().equals(mgr2.getView().getCreator()));\n          assertTrue(mgr1.getView().getViewId() == mgr2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (internalLocator != null) {\n        internalLocator.stop();\n      }\n    }\n  }\n","date":"2020-01-30 14:08:07","endLine":434,"groupId":"11535","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3d/21f693c20eb817d7275001fbf6febee00e9add.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    Locator l = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      l = InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n          temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.LOCATOR_DM_TYPE);\n\n      \r\n      m1 = createMembershipManager(config, transport).getLeft();\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      final Membership mgr1 = m1;\n      final Membership mgr2 = m2;\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + mgr2.getView(), mgr2.getView().size() == 2);\n          assertTrue(\"view = \" + mgr1.getView(), mgr1.getView().size() == 2);\n          assertTrue(mgr1.getView().getCreator().equals(mgr2.getView().getCreator()));\n          assertTrue(mgr1.getView().getViewId() == mgr2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (l != null) {\n        l.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"d2947640af8c6bf16a650348bf09a28d11d27997","commitMessage":"@@@GEODE-7652: MembershipBuilder lets you set the local locator (#4614)\n\n","date":"2020-01-30 14:08:07","modifiedFileCount":"18","status":"M","submitter":"Bill Burcham"},{"authorTime":"2021-04-28 04:54:36","codes":[{"authorDate":"2021-04-28 04:54:36","commitOrder":16,"curCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    InternalLocator internalLocator = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      HostAddress localHost = new HostAddress(LocalHostUtil.getLocalHost());\n\n      \r\n      \r\n      internalLocator =\n          InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n              new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.LOCATOR_DM_TYPE);\n\n      \r\n      final MembershipLocator<InternalDistributedMember> membershipLocator =\n          internalLocator.getMembershipLocator();\n\n      m1 = createMembershipManager(config, transport, membershipLocator).getLeft();\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport, membershipLocator);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      final Membership mgr1 = m1;\n      final Membership mgr2 = m2;\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + mgr2.getView(), mgr2.getView().size() == 2);\n          assertTrue(\"view = \" + mgr1.getView(), mgr1.getView().size() == 2);\n          assertTrue(mgr1.getView().getCreator().equals(mgr2.getView().getCreator()));\n          assertTrue(mgr1.getView().getViewId() == mgr2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      MembershipView<InternalDistributedMember> view = mgr1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(mgr1.getLocalMember())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (internalLocator != null) {\n        internalLocator.stop();\n      }\n    }\n  }\n","date":"2021-04-28 04:54:36","endLine":251,"groupId":"104324","id":31,"instanceNumber":1,"isCurCommit":1,"methodName":"doTestMultipleManagersInSameProcessWithGroups","params":"(Stringgroups)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/08/f4fe1f7b1a4eadff29d2c247006b842526d140.src","preCode":"  private List<String> doTestMultipleManagersInSameProcessWithGroups(String groups)\n      throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    InternalLocator internalLocator = null;\n    \r\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n\n      \r\n      \r\n      internalLocator =\n          InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false,\n              new Properties(), null, temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DISABLE_TCP, \"true\");\n      nonDefault.put(MCAST_PORT, \"0\");\n      nonDefault.put(LOG_FILE, \"\");\n      nonDefault.put(LOG_LEVEL, \"fine\");\n      nonDefault.put(GROUPS, groups);\n      nonDefault.put(MEMBER_TIMEOUT, \"2000\");\n      nonDefault.put(LOCATORS, localHost.getHostName() + '[' + port + ']');\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.LOCATOR_DM_TYPE);\n\n      \r\n      final MembershipLocator<InternalDistributedMember> membershipLocator =\n          internalLocator.getMembershipLocator();\n\n      m1 = createMembershipManager(config, transport, membershipLocator).getLeft();\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport, membershipLocator);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      final Membership mgr1 = m1;\n      final Membership mgr2 = m2;\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + mgr2.getView(), mgr2.getView().size() == 2);\n          assertTrue(\"view = \" + mgr1.getView(), mgr1.getView().size() == 2);\n          assertTrue(mgr1.getView().getCreator().equals(mgr2.getView().getCreator()));\n          assertTrue(mgr1.getView().getViewId() == mgr2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      MembershipView<InternalDistributedMember> view = mgr1.getView();\n      MemberIdentifier notCreator;\n      if (view.getCreator().equals(mgr1.getLocalMember())) {\n        notCreator = view.getMembers().get(1);\n      } else {\n        notCreator = view.getMembers().get(0);\n      }\n      List<String> result = notCreator.getGroups();\n\n      System.out.println(\"sending SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(false);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 15000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        AssertionError error = new AssertionError(\"Expected a message to be received\");\n        if (problem != null) {\n          error.initCause(problem);\n        }\n        throw error;\n      }\n\n      \r\n      \r\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n      return result;\n    } finally {\n\n      if (m2 != null) {\n        m2.shutdown();\n      }\n      if (m1 != null) {\n        m1.shutdown();\n      }\n      if (internalLocator != null) {\n        internalLocator.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2021-04-28 04:54:36","commitOrder":16,"curCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    InternalLocator internalLocator = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      HostAddress localHost = new HostAddress(LocalHostUtil.getLocalHost());\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      internalLocator =\n          InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p,\n              null,\n              temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.LOCATOR_DM_TYPE);\n\n      \r\n      final MembershipLocator<InternalDistributedMember> membershipLocator =\n          internalLocator.getMembershipLocator();\n\n      m1 = createMembershipManager(config, transport, membershipLocator).getLeft();\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport, membershipLocator);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      final Membership mgr1 = m1;\n      final Membership mgr2 = m2;\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + mgr2.getView(), mgr2.getView().size() == 2);\n          assertTrue(\"view = \" + mgr1.getView(), mgr1.getView().size() == 2);\n          assertTrue(mgr1.getView().getCreator().equals(mgr2.getView().getCreator()));\n          assertTrue(mgr1.getView().getViewId() == mgr2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (internalLocator != null) {\n        internalLocator.stop();\n      }\n    }\n  }\n","date":"2021-04-28 04:54:36","endLine":437,"groupId":"104324","id":32,"instanceNumber":2,"isCurCommit":1,"methodName":"testLocatorAndTwoServersJoinUsingDiffeHellman","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/08/f4fe1f7b1a4eadff29d2c247006b842526d140.src","preCode":"  public void testLocatorAndTwoServersJoinUsingDiffeHellman() throws Exception {\n\n    Membership<InternalDistributedMember> m1 = null, m2 = null;\n    InternalLocator internalLocator = null;\n    int mcastPort = AvailablePortHelper.getRandomAvailableUDPPort();\n\n    try {\n\n      \r\n      int port = AvailablePortHelper.getRandomAvailableTCPPort();\n      InetAddress localHost = LocalHostUtil.getLocalHost();\n      Properties p = new Properties();\n      p.setProperty(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      \r\n      \r\n      internalLocator =\n          InternalLocator.startLocator(port, new File(\"\"), null, null, localHost, false, p, null,\n              temporaryFolder.getRoot().toPath());\n\n      \r\n      Properties nonDefault = new Properties();\n      nonDefault.put(DistributionConfig.DISABLE_TCP_NAME, \"true\");\n      nonDefault.put(DistributionConfig.MCAST_PORT_NAME, String.valueOf(mcastPort));\n      nonDefault.put(DistributionConfig.LOG_FILE_NAME, \"\");\n      nonDefault.put(DistributionConfig.LOG_LEVEL_NAME, \"fine\");\n      nonDefault.put(DistributionConfig.GROUPS_NAME, \"red, blue\");\n      nonDefault.put(DistributionConfig.MEMBER_TIMEOUT_NAME, \"2000\");\n      nonDefault.put(DistributionConfig.LOCATORS_NAME, localHost.getHostName() + '[' + port + ']');\n      nonDefault.put(ConfigurationProperties.SECURITY_UDP_DHALGO, \"AES:128\");\n      DistributionConfigImpl config = new DistributionConfigImpl(nonDefault);\n      RemoteTransportConfig transport =\n          new RemoteTransportConfig(config, ClusterDistributionManager.LOCATOR_DM_TYPE);\n\n      \r\n      final MembershipLocator<InternalDistributedMember> membershipLocator =\n          internalLocator.getMembershipLocator();\n\n      m1 = createMembershipManager(config, transport, membershipLocator).getLeft();\n\n      \r\n      final Pair<Membership, MessageListener> pair =\n          createMembershipManager(config, transport, membershipLocator);\n      m2 = pair.getLeft();\n      final MessageListener listener2 = pair.getRight();\n\n      \r\n      \r\n      \r\n      System.out.println(\"waiting for views to stabilize\");\n      final Membership mgr1 = m1;\n      final Membership mgr2 = m2;\n      long giveUp = System.currentTimeMillis() + 15000;\n      for (;;) {\n        try {\n          assertTrue(\"view = \" + mgr2.getView(), mgr2.getView().size() == 2);\n          assertTrue(\"view = \" + mgr1.getView(), mgr1.getView().size() == 2);\n          assertTrue(mgr1.getView().getCreator().equals(mgr2.getView().getCreator()));\n          assertTrue(mgr1.getView().getViewId() == mgr2.getView().getViewId());\n          break;\n        } catch (AssertionError e) {\n          if (System.currentTimeMillis() > giveUp) {\n            throw e;\n          }\n        }\n      }\n\n      System.out.println(\"testing multicast availability\");\n      assertTrue(m1.testMulticast());\n\n      System.out.println(\"multicasting SerialAckedMessage from m1 to m2\");\n      SerialAckedMessage msg = new SerialAckedMessage();\n      msg.setRecipient(m2.getLocalMember());\n      msg.setMulticast(true);\n      m1.send(new InternalDistributedMember[] {m2.getLocalMember()}, msg);\n      giveUp = System.currentTimeMillis() + 5000;\n      boolean verified = false;\n      Throwable problem = null;\n      while (giveUp > System.currentTimeMillis()) {\n        try {\n          verify(listener2).messageReceived(isA(SerialAckedMessage.class));\n          verified = true;\n          break;\n        } catch (Error e) {\n          problem = e;\n          Thread.sleep(500);\n        }\n      }\n      if (!verified) {\n        if (problem != null) {\n          problem.printStackTrace();\n        }\n        fail(\"Expected a multicast message to be received\");\n      }\n\n      \r\n      Thread.sleep(4000l);\n\n      m2.disconnect(false);\n      assertTrue(!m2.isConnected());\n\n      Membership waitingMember = m1;\n      await().untilAsserted(() -> assertTrue(waitingMember.getView().size() == 1));\n\n    } finally {\n\n      if (m2 != null) {\n        m2.disconnect(false);\n      }\n      if (m1 != null) {\n        m1.disconnect(false);\n      }\n      if (internalLocator != null) {\n        internalLocator.stop();\n      }\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/membership/MembershipJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"}],"commitId":"55921a4d7b66a51279e71d1a665dc797fcc8ca6f","commitMessage":"@@@GEODE-9139 SSLException in starting up a Locator (#6308)\n\n* GEODE-9139 SSLException in starting up a Locator\n\nPreserve the bind-address string specified by the user for cluster communications\n\nAlso enable use of host names in member identifiers if endpoint\nvalidation is enabled.\n\n* retain the bind address string or bind address InetAddress in a HostAddress\n\nHostAndPort could not be used because there will be a port set but there\nmay not be a bindAddress set.  That class requires a host name.\n\n* fixed NPE\n\n* fixing a few problems with HostAddress\n\n* spA\n\n* fixed lgtm issue\n\n* more lgtm issues fixed\n\n* addressing Kamilla's comments\n\n* typo\n\n* simplify HostAndPort & HostAddress by creating a common superclass to hold\ntheir InetSocketAddress.\nCache the result of attempting to resolve the host name.  as suggested by\nBill.\n\n* retain the string passed in as the hostname to avoid things like 127.0.0.1 being converted to localhost\n\n* added comments about retention of the hostName parameter","date":"2021-04-28 04:54:36","modifiedFileCount":"30","status":"M","submitter":"Bruce Schuchardt"}]
