[{"authorTime":"2018-07-18 03:54:18","codes":[{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testLimitDistinctQueryWithTwoCondButOneIndex() {\n    try {\n      Query query;\n      SelectResults result;\n      Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n      for (int i = 1; i < 100; i++) {\n        Portfolio p = new Portfolio(i);\n        if (i < 50)\n          p.status = \"active\";\n        region.put(Integer.toString(i), p);\n      }\n\n      \r\n      Index index = qs.createIndex(\"idIndex\", \"ID\", \"/portfolios1\");\n      assertNotNull(index);\n      String queryString =\n          \"select DISTINCT * from /portfolios1 where status ='inactive' AND (ID > 0 AND ID < 100) limit 10\";\n      query = qs.newQuery(queryString);\n      result = (SelectResults) query.execute();\n      assertTrue(result instanceof SelectResults);\n      assertEquals(10, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(10, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":983,"groupId":"34710","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLimitDistinctQueryWithTwoCondButOneIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a5/4e5ae173aaf0c335b09cb85d0fec1440765b99.src","preCode":"  public void testLimitDistinctQueryWithTwoCondButOneIndex() {\n    try {\n      Query query;\n      SelectResults result;\n      Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n      for (int i = 1; i < 100; i++) {\n        Portfolio p = new Portfolio(i);\n        if (i < 50)\n          p.status = \"active\";\n        region.put(Integer.toString(i), p);\n      }\n\n      \r\n      Index index = qs.createIndex(\"idIndex\", \"ID\", \"/portfolios1\");\n      assertNotNull(index);\n      String queryString =\n          \"select DISTINCT * from /portfolios1 where status ='inactive' AND (ID > 0 AND ID < 100) limit 10\";\n      query = qs.newQuery(queryString);\n      result = (SelectResults) query.execute();\n      assertTrue(result instanceof SelectResults);\n      assertEquals(10, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(10, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":954,"status":"B"},{"authorDate":"2018-07-18 03:54:18","commitOrder":1,"curCode":"  public void testLimitDistinctQueryWithTwoCondWithTwoIndex() {\n    try {\n      Query query;\n      SelectResults result;\n      Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n      for (int i = 1; i < 100; i++) {\n        Portfolio p = new Portfolio(i);\n        if (i < 50)\n          p.status = \"active\";\n        region.put(Integer.toString(i), p);\n      }\n\n      \r\n      Index index = qs.createIndex(\"idIndex\", \"ID\", \"/portfolios1\");\n      assertNotNull(index);\n      index = qs.createIndex(\"statusIndex\", \"status\", \"/portfolios1\");\n      assertNotNull(index);\n      MyQueryObserverAdapter observer = new MyQueryObserverAdapter();\n      QueryObserver old = QueryObserverHolder.setInstance(observer);\n\n      String queryString =\n          \"select DISTINCT * from /portfolios1 where status ='inactive' AND (ID > 0 AND ID < 100) limit 10\";\n      query = qs.newQuery(queryString);\n      result = (SelectResults) query.execute();\n      assertTrue(result instanceof SelectResults);\n      assertEquals(10, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(10, wrapper.asSet().size());\n      assertFalse(observer.limitAppliedAtIndex && observer.indexName.equals(\"idIndex\"));\n      assertTrue(observer.limitAppliedAtIndex && observer.indexName.equals(\"statusIndex\"));\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","date":"2018-07-18 03:54:18","endLine":1022,"groupId":"34710","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLimitDistinctQueryWithTwoCondWithTwoIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/a5/4e5ae173aaf0c335b09cb85d0fec1440765b99.src","preCode":"  public void testLimitDistinctQueryWithTwoCondWithTwoIndex() {\n    try {\n      Query query;\n      SelectResults result;\n      Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n      for (int i = 1; i < 100; i++) {\n        Portfolio p = new Portfolio(i);\n        if (i < 50)\n          p.status = \"active\";\n        region.put(Integer.toString(i), p);\n      }\n\n      \r\n      Index index = qs.createIndex(\"idIndex\", \"ID\", \"/portfolios1\");\n      assertNotNull(index);\n      index = qs.createIndex(\"statusIndex\", \"status\", \"/portfolios1\");\n      assertNotNull(index);\n      MyQueryObserverAdapter observer = new MyQueryObserverAdapter();\n      QueryObserver old = QueryObserverHolder.setInstance(observer);\n\n      String queryString =\n          \"select DISTINCT * from /portfolios1 where status ='inactive' AND (ID > 0 AND ID < 100) limit 10\";\n      query = qs.newQuery(queryString);\n      result = (SelectResults) query.execute();\n      assertTrue(result instanceof SelectResults);\n      assertEquals(10, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(10, wrapper.asSet().size());\n      assertFalse(observer.limitAppliedAtIndex && observer.indexName.equals(\"idIndex\"));\n      assertTrue(observer.limitAppliedAtIndex && observer.indexName.equals(\"statusIndex\"));\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":986,"status":"B"}],"commitId":"cb202f25b93e0a56f4776813da0bf6dcbba231cd","commitMessage":"@@@GEODE-5363: Moves all non-unit tests into specific isolated source sets. (#2126)\n\n* Creates integrationTest source set.\n* Creates distributedTest source set.\n* Creates acceptanceTest source set.\n* Creates uiTest source set.\n* Removes old categories.","date":"2018-07-18 03:54:18","modifiedFileCount":"697","status":"B","submitter":"Jacob Barrett"},{"authorTime":"2020-05-29 00:37:39","codes":[{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testLimitDistinctQueryWithTwoCondButOneIndex() {\n    try {\n      Query query;\n      SelectResults result;\n      Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n      for (int i = 1; i < 100; i++) {\n        Portfolio p = new Portfolio(i);\n        if (i < 50)\n          p.status = \"active\";\n        region.put(Integer.toString(i), p);\n      }\n\n      \r\n      Index index = qs.createIndex(\"idIndex\", \"ID\", SEPARATOR + \"portfolios1\");\n      assertNotNull(index);\n      String queryString =\n          \"select DISTINCT * from \" + SEPARATOR\n              + \"portfolios1 where status ='inactive' AND (ID > 0 AND ID < 100) limit 10\";\n      query = qs.newQuery(queryString);\n      result = (SelectResults) query.execute();\n      assertTrue(result instanceof SelectResults);\n      assertEquals(10, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(10, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","date":"2020-05-29 00:37:39","endLine":1018,"groupId":"24034","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLimitDistinctQueryWithTwoCondButOneIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5c/3d68687a85aa18106b6bd8e8c5f712f5086270.src","preCode":"  public void testLimitDistinctQueryWithTwoCondButOneIndex() {\n    try {\n      Query query;\n      SelectResults result;\n      Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n      for (int i = 1; i < 100; i++) {\n        Portfolio p = new Portfolio(i);\n        if (i < 50)\n          p.status = \"active\";\n        region.put(Integer.toString(i), p);\n      }\n\n      \r\n      Index index = qs.createIndex(\"idIndex\", \"ID\", \"/portfolios1\");\n      assertNotNull(index);\n      String queryString =\n          \"select DISTINCT * from /portfolios1 where status ='inactive' AND (ID > 0 AND ID < 100) limit 10\";\n      query = qs.newQuery(queryString);\n      result = (SelectResults) query.execute();\n      assertTrue(result instanceof SelectResults);\n      assertEquals(10, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(10, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":988,"status":"M"},{"authorDate":"2020-05-29 00:37:39","commitOrder":2,"curCode":"  public void testLimitDistinctQueryWithTwoCondWithTwoIndex() {\n    try {\n      Query query;\n      SelectResults result;\n      Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n      for (int i = 1; i < 100; i++) {\n        Portfolio p = new Portfolio(i);\n        if (i < 50)\n          p.status = \"active\";\n        region.put(Integer.toString(i), p);\n      }\n\n      \r\n      Index index = qs.createIndex(\"idIndex\", \"ID\", SEPARATOR + \"portfolios1\");\n      assertNotNull(index);\n      index = qs.createIndex(\"statusIndex\", \"status\", SEPARATOR + \"portfolios1\");\n      assertNotNull(index);\n      MyQueryObserverAdapter observer = new MyQueryObserverAdapter();\n      QueryObserver old = QueryObserverHolder.setInstance(observer);\n\n      String queryString =\n          \"select DISTINCT * from \" + SEPARATOR\n              + \"portfolios1 where status ='inactive' AND (ID > 0 AND ID < 100) limit 10\";\n      query = qs.newQuery(queryString);\n      result = (SelectResults) query.execute();\n      assertTrue(result instanceof SelectResults);\n      assertEquals(10, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(10, wrapper.asSet().size());\n      assertFalse(observer.limitAppliedAtIndex && observer.indexName.equals(\"idIndex\"));\n      assertTrue(observer.limitAppliedAtIndex && observer.indexName.equals(\"statusIndex\"));\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","date":"2020-05-29 00:37:39","endLine":1058,"groupId":"24034","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLimitDistinctQueryWithTwoCondWithTwoIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/5c/3d68687a85aa18106b6bd8e8c5f712f5086270.src","preCode":"  public void testLimitDistinctQueryWithTwoCondWithTwoIndex() {\n    try {\n      Query query;\n      SelectResults result;\n      Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n      for (int i = 1; i < 100; i++) {\n        Portfolio p = new Portfolio(i);\n        if (i < 50)\n          p.status = \"active\";\n        region.put(Integer.toString(i), p);\n      }\n\n      \r\n      Index index = qs.createIndex(\"idIndex\", \"ID\", \"/portfolios1\");\n      assertNotNull(index);\n      index = qs.createIndex(\"statusIndex\", \"status\", \"/portfolios1\");\n      assertNotNull(index);\n      MyQueryObserverAdapter observer = new MyQueryObserverAdapter();\n      QueryObserver old = QueryObserverHolder.setInstance(observer);\n\n      String queryString =\n          \"select DISTINCT * from /portfolios1 where status ='inactive' AND (ID > 0 AND ID < 100) limit 10\";\n      query = qs.newQuery(queryString);\n      result = (SelectResults) query.execute();\n      assertTrue(result instanceof SelectResults);\n      assertEquals(10, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(10, wrapper.asSet().size());\n      assertFalse(observer.limitAppliedAtIndex && observer.indexName.equals(\"idIndex\"));\n      assertTrue(observer.limitAppliedAtIndex && observer.indexName.equals(\"statusIndex\"));\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1021,"status":"M"}],"commitId":"0fd56e418752c14ed8ebebe5a370164034aafc39","commitMessage":"@@@GEODE-7846: Replace all uses of hardcoded / with Region.SEPARATOR (#5157)\n\nAuthored-by: Donal Evans <doevans@pivotal.io>","date":"2020-05-29 00:37:39","modifiedFileCount":"489","status":"M","submitter":"Donal Evans"},{"authorTime":"2021-06-04 00:32:09","codes":[{"authorDate":"2021-06-04 00:32:09","commitOrder":3,"curCode":"  public void testLimitDistinctQueryWithTwoCondButOneIndex() {\n    try {\n      Query query;\n      SelectResults result;\n      Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n      for (int i = 1; i < 100; i++) {\n        Portfolio p = new Portfolio(i);\n        if (i < 50) {\n          p.status = \"active\";\n        }\n        region.put(Integer.toString(i), p);\n      }\n\n      \r\n      Index index = qs.createIndex(\"idIndex\", \"ID\", SEPARATOR + \"portfolios1\");\n      assertNotNull(index);\n      String queryString =\n          \"select DISTINCT * from \" + SEPARATOR\n              + \"portfolios1 where status ='inactive' AND (ID > 0 AND ID < 100) limit 10\";\n      query = qs.newQuery(queryString);\n      result = (SelectResults) query.execute();\n      assertTrue(result instanceof SelectResults);\n      assertEquals(10, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(10, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","date":"2021-06-04 00:32:09","endLine":1020,"groupId":"104985","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testLimitDistinctQueryWithTwoCondButOneIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6d/c33920658b2d86321ab46d605966f4f1469ec1.src","preCode":"  public void testLimitDistinctQueryWithTwoCondButOneIndex() {\n    try {\n      Query query;\n      SelectResults result;\n      Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n      for (int i = 1; i < 100; i++) {\n        Portfolio p = new Portfolio(i);\n        if (i < 50)\n          p.status = \"active\";\n        region.put(Integer.toString(i), p);\n      }\n\n      \r\n      Index index = qs.createIndex(\"idIndex\", \"ID\", SEPARATOR + \"portfolios1\");\n      assertNotNull(index);\n      String queryString =\n          \"select DISTINCT * from \" + SEPARATOR\n              + \"portfolios1 where status ='inactive' AND (ID > 0 AND ID < 100) limit 10\";\n      query = qs.newQuery(queryString);\n      result = (SelectResults) query.execute();\n      assertTrue(result instanceof SelectResults);\n      assertEquals(10, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(10, wrapper.asSet().size());\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":989,"status":"M"},{"authorDate":"2021-06-04 00:32:09","commitOrder":3,"curCode":"  public void testLimitDistinctQueryWithTwoCondWithTwoIndex() {\n    try {\n      Query query;\n      SelectResults result;\n      Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n      for (int i = 1; i < 100; i++) {\n        Portfolio p = new Portfolio(i);\n        if (i < 50) {\n          p.status = \"active\";\n        }\n        region.put(Integer.toString(i), p);\n      }\n\n      \r\n      Index index = qs.createIndex(\"idIndex\", \"ID\", SEPARATOR + \"portfolios1\");\n      assertNotNull(index);\n      index = qs.createIndex(\"statusIndex\", \"status\", SEPARATOR + \"portfolios1\");\n      assertNotNull(index);\n      MyQueryObserverAdapter observer = new MyQueryObserverAdapter();\n      QueryObserver old = QueryObserverHolder.setInstance(observer);\n\n      String queryString =\n          \"select DISTINCT * from \" + SEPARATOR\n              + \"portfolios1 where status ='inactive' AND (ID > 0 AND ID < 100) limit 10\";\n      query = qs.newQuery(queryString);\n      result = (SelectResults) query.execute();\n      assertTrue(result instanceof SelectResults);\n      assertEquals(10, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(10, wrapper.asSet().size());\n      assertFalse(observer.limitAppliedAtIndex && observer.indexName.equals(\"idIndex\"));\n      assertTrue(observer.limitAppliedAtIndex && observer.indexName.equals(\"statusIndex\"));\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","date":"2021-06-04 00:32:09","endLine":1061,"groupId":"104985","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testLimitDistinctQueryWithTwoCondWithTwoIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/6d/c33920658b2d86321ab46d605966f4f1469ec1.src","preCode":"  public void testLimitDistinctQueryWithTwoCondWithTwoIndex() {\n    try {\n      Query query;\n      SelectResults result;\n      Region region = CacheUtils.createRegion(\"portfolios1\", Portfolio.class);\n      for (int i = 1; i < 100; i++) {\n        Portfolio p = new Portfolio(i);\n        if (i < 50)\n          p.status = \"active\";\n        region.put(Integer.toString(i), p);\n      }\n\n      \r\n      Index index = qs.createIndex(\"idIndex\", \"ID\", SEPARATOR + \"portfolios1\");\n      assertNotNull(index);\n      index = qs.createIndex(\"statusIndex\", \"status\", SEPARATOR + \"portfolios1\");\n      assertNotNull(index);\n      MyQueryObserverAdapter observer = new MyQueryObserverAdapter();\n      QueryObserver old = QueryObserverHolder.setInstance(observer);\n\n      String queryString =\n          \"select DISTINCT * from \" + SEPARATOR\n              + \"portfolios1 where status ='inactive' AND (ID > 0 AND ID < 100) limit 10\";\n      query = qs.newQuery(queryString);\n      result = (SelectResults) query.execute();\n      assertTrue(result instanceof SelectResults);\n      assertEquals(10, result.size());\n      SelectResults wrapper = (SelectResults) result;\n      assertEquals(10, wrapper.asSet().size());\n      assertFalse(observer.limitAppliedAtIndex && observer.indexName.equals(\"idIndex\"));\n      assertTrue(observer.limitAppliedAtIndex && observer.indexName.equals(\"statusIndex\"));\n    } catch (Exception e) {\n      CacheUtils.getLogger().error(e);\n      fail(e.toString());\n    } finally {\n      QueryObserverHolder.setInstance(new QueryObserverAdapter());\n    }\n  }\n","realPath":"geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/LimitClauseJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":1023,"status":"M"}],"commitId":"2879573ffb04e9e029e14ca37d8a064268cc8f44","commitMessage":"@@@GEODE-7864: Always use curly braces for control flow statements (#6523)\n\nAuthored-by: Donal Evans <doevans@vmware.com>","date":"2021-06-04 00:32:09","modifiedFileCount":"640","status":"M","submitter":"Donal Evans"}]
