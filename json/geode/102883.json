[{"authorTime":"2016-09-15 02:08:18","codes":[{"authorDate":"2016-09-15 02:08:18","commitOrder":1,"curCode":"  public void testExecute() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 3, 10, false, cancelCriterion, null);\n    Object result = exec.execute(new Op() {\n      @Override\n      public Object attempt(Connection cnx) throws Exception {\n        return \"hello\";\n      }\n      @Override\n      public boolean useThreadLocalConnection() {\n        return true;\n      }\n    });\n    assertEquals(\"hello\", result);\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n    \n    try {\n    result = exec.execute(new Op() {\n      @Override\n      public Object attempt(Connection cnx) throws Exception {\n        throw new SocketTimeoutException();\n      }\n      @Override\n      public boolean useThreadLocalConnection() {\n        return true;\n      }\n    });\n    fail(\"Should have got an exception\");\n    } catch(ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(0, serverCrashes);\n    \n    reset();\n    \n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new ServerOperationException(\"Something didn't work\");\n        }\n        @Override\n        public boolean useThreadLocalConnection() {\n          return true;\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch(ServerOperationException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n    \n    reset();\n    \n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n        @Override\n        public boolean useThreadLocalConnection() {\n          return true;\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch(ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(4, serverCrashes);\n  }\n","date":"2016-09-15 02:08:18","endLine":176,"groupId":"35372","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3c/f1673fa8eae8d4cba5e47884fd6f4d3f7b23f9.src","preCode":"  public void testExecute() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 3, 10, false, cancelCriterion, null);\n    Object result = exec.execute(new Op() {\n      @Override\n      public Object attempt(Connection cnx) throws Exception {\n        return \"hello\";\n      }\n      @Override\n      public boolean useThreadLocalConnection() {\n        return true;\n      }\n    });\n    assertEquals(\"hello\", result);\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n    \n    try {\n    result = exec.execute(new Op() {\n      @Override\n      public Object attempt(Connection cnx) throws Exception {\n        throw new SocketTimeoutException();\n      }\n      @Override\n      public boolean useThreadLocalConnection() {\n        return true;\n      }\n    });\n    fail(\"Should have got an exception\");\n    } catch(ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(0, serverCrashes);\n    \n    reset();\n    \n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new ServerOperationException(\"Something didn't work\");\n        }\n        @Override\n        public boolean useThreadLocalConnection() {\n          return true;\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch(ServerOperationException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n    \n    reset();\n    \n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n        @Override\n        public boolean useThreadLocalConnection() {\n          return true;\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch(ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(4, serverCrashes);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2016-09-15 02:08:18","commitOrder":1,"curCode":"  public void testRetryFailedServers() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 10, 10, false, cancelCriterion, null);\n    \n    manager.numServers = 5;\n    try {\n      exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n        @Override\n        public boolean useThreadLocalConnection() {\n          return true;\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch(ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(10, exchanges);\n    assertEquals(1, returns);\n    assertEquals(11, invalidateConnections);\n    assertEquals(11, serverCrashes);\n  }\n","date":"2016-09-15 02:08:18","endLine":240,"groupId":"47158","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetryFailedServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/3c/f1673fa8eae8d4cba5e47884fd6f4d3f7b23f9.src","preCode":"  public void testRetryFailedServers() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 10, 10, false, cancelCriterion, null);\n    \n    manager.numServers = 5;\n    try {\n      exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n        @Override\n        public boolean useThreadLocalConnection() {\n          return true;\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch(ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(10, exchanges);\n    assertEquals(1, returns);\n    assertEquals(11, invalidateConnections);\n    assertEquals(11, serverCrashes);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"B"}],"commitId":"8ea08da3d2baa64ca631641430b54d71ce3ff362","commitMessage":"@@@GEODE-37 Merge branch 'feature/GEODE-37_2' into develop\n\nConflicts:\n\tgeode-core/src/main/java/com/gemstone/gemfire/cache/query/internal/IndexTrackingQueryObserver.java\n","date":"2016-09-15 02:08:18","modifiedFileCount":"151","status":"B","submitter":"Hitesh Khamesra"},{"authorTime":"2019-04-27 02:00:40","codes":[{"authorDate":"2019-04-27 02:00:40","commitOrder":2,"curCode":"  public void testExecute() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 3,\n        10, cancelCriterion, null);\n    Object result = exec.execute(new Op() {\n      @Override\n      public Object attempt(Connection cnx) throws Exception {\n        return \"hello\";\n      }\n    });\n    assertEquals(\"hello\", result);\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new SocketTimeoutException();\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new ServerOperationException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerOperationException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(4, serverCrashes);\n  }\n","date":"2019-04-27 02:00:40","endLine":170,"groupId":"35372","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1e/88f6bbe7770aacaa7501a61bd6dd5c0cf4a553.src","preCode":"  public void testExecute() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 3,\n        10, false, cancelCriterion, null);\n    Object result = exec.execute(new Op() {\n      @Override\n      public Object attempt(Connection cnx) throws Exception {\n        return \"hello\";\n      }\n\n      @Override\n      public boolean useThreadLocalConnection() {\n        return true;\n      }\n    });\n    assertEquals(\"hello\", result);\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new SocketTimeoutException();\n        }\n\n        @Override\n        public boolean useThreadLocalConnection() {\n          return true;\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new ServerOperationException(\"Something didn't work\");\n        }\n\n        @Override\n        public boolean useThreadLocalConnection() {\n          return true;\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerOperationException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n\n        @Override\n        public boolean useThreadLocalConnection() {\n          return true;\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(4, serverCrashes);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2019-04-27 02:00:40","commitOrder":2,"curCode":"  public void testRetryFailedServers() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 10,\n        10, cancelCriterion, null);\n\n    manager.numServers = 5;\n    try {\n      exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(10, exchanges);\n    assertEquals(1, returns);\n    assertEquals(11, invalidateConnections);\n    assertEquals(11, serverCrashes);\n  }\n","date":"2019-04-27 02:00:40","endLine":228,"groupId":"35445","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetryFailedServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/1e/88f6bbe7770aacaa7501a61bd6dd5c0cf4a553.src","preCode":"  public void testRetryFailedServers() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 10,\n        10, false, cancelCriterion, null);\n\n    manager.numServers = 5;\n    try {\n      exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n\n        @Override\n        public boolean useThreadLocalConnection() {\n          return true;\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(10, exchanges);\n    assertEquals(1, returns);\n    assertEquals(11, invalidateConnections);\n    assertEquals(11, serverCrashes);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"b19734d6f98018fca816433326cab151350f963b","commitMessage":"@@@GEODE-6595: Deprecates and ignore thread local connection pool attribute. (#3394)\n\n* Remove internals of thread local connection.\n* Cleanup test usage of deprecated methods.\n","date":"2019-04-27 02:00:40","modifiedFileCount":"64","status":"M","submitter":"Jacob Barrett"},{"authorTime":"2020-03-11 05:56:49","codes":[{"authorDate":"2020-03-11 05:56:49","commitOrder":3,"curCode":"  public void testExecute() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 3,\n        10, PoolFactory.DEFAULT_SERVER_CONNECTION_TIMEOUT, cancelCriterion, null);\n    Object result = exec.execute(new Op() {\n      @Override\n      public Object attempt(Connection cnx) throws Exception {\n        return \"hello\";\n      }\n    });\n    assertEquals(\"hello\", result);\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new SocketTimeoutException();\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new ServerOperationException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerOperationException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(4, serverCrashes);\n  }\n","date":"2020-03-11 05:56:49","endLine":171,"groupId":"35372","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/0f/a4c37fc5f93eef66e9207e0d1bd9a4cc33db33.src","preCode":"  public void testExecute() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 3,\n        10, cancelCriterion, null);\n    Object result = exec.execute(new Op() {\n      @Override\n      public Object attempt(Connection cnx) throws Exception {\n        return \"hello\";\n      }\n    });\n    assertEquals(\"hello\", result);\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new SocketTimeoutException();\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new ServerOperationException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerOperationException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(4, serverCrashes);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2020-03-11 05:56:49","commitOrder":3,"curCode":"  public void testRetryFailedServers() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 10,\n        10, PoolFactory.DEFAULT_SERVER_CONNECTION_TIMEOUT, cancelCriterion, null);\n\n    manager.numServers = 5;\n    try {\n      exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(10, exchanges);\n    assertEquals(1, returns);\n    assertEquals(11, invalidateConnections);\n    assertEquals(11, serverCrashes);\n  }\n","date":"2020-03-11 05:56:49","endLine":229,"groupId":"35445","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetryFailedServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/0f/a4c37fc5f93eef66e9207e0d1bd9a4cc33db33.src","preCode":"  public void testRetryFailedServers() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 10,\n        10, cancelCriterion, null);\n\n    manager.numServers = 5;\n    try {\n      exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(10, exchanges);\n    assertEquals(1, returns);\n    assertEquals(11, invalidateConnections);\n    assertEquals(11, serverCrashes);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"}],"commitId":"86defd40c6ba558b53753c51176e05f009bb32c3","commitMessage":"@@@Feature/geode 6536 1: modify borrowConnection singleHop solution (#4753)\n\n* GEODE-6536: Added retry in borrowConnection/single hop\n\n* GEODE-6536: bug fix\n\n* GEODE-6536: update after comments\n\n* GEODE-6536: modify borrowConnection singleHop solution\n\n* GEODE-6536: test update\n\n* GEODE-6536: updated tests.  and added parameter to desable timeout\n\n* GEODE-6536: update of cachexml impacts\n\n* GEODE-6536: remove cachexml restriction\n\n* GEODE-6536: update default value and documentation","date":"2020-03-11 05:56:49","modifiedFileCount":"23","status":"M","submitter":"Mario Ivanac"},{"authorTime":"2020-03-14 06:50:37","codes":[{"authorDate":"2020-03-14 06:50:37","commitOrder":4,"curCode":"  public void testExecute() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 3,\n        10, cancelCriterion, null);\n    Object result = exec.execute(new Op() {\n      @Override\n      public Object attempt(Connection cnx) throws Exception {\n        return \"hello\";\n      }\n    });\n    assertEquals(\"hello\", result);\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new SocketTimeoutException();\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new ServerOperationException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerOperationException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(4, serverCrashes);\n  }\n","date":"2020-03-14 06:50:37","endLine":170,"groupId":"35372","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/75/2ba93e685df07ba456ca8a40c7e45a14168220.src","preCode":"  public void testExecute() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 3,\n        10, PoolFactory.DEFAULT_SERVER_CONNECTION_TIMEOUT, cancelCriterion, null);\n    Object result = exec.execute(new Op() {\n      @Override\n      public Object attempt(Connection cnx) throws Exception {\n        return \"hello\";\n      }\n    });\n    assertEquals(\"hello\", result);\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new SocketTimeoutException();\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new ServerOperationException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerOperationException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(4, serverCrashes);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2020-03-14 06:50:37","commitOrder":4,"curCode":"  public void testRetryFailedServers() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 10,\n        10, cancelCriterion, null);\n\n    manager.numServers = 5;\n    try {\n      exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(10, exchanges);\n    assertEquals(1, returns);\n    assertEquals(11, invalidateConnections);\n    assertEquals(11, serverCrashes);\n  }\n","date":"2020-03-14 06:50:37","endLine":228,"groupId":"35445","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetryFailedServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/75/2ba93e685df07ba456ca8a40c7e45a14168220.src","preCode":"  public void testRetryFailedServers() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 10,\n        10, PoolFactory.DEFAULT_SERVER_CONNECTION_TIMEOUT, cancelCriterion, null);\n\n    manager.numServers = 5;\n    try {\n      exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(10, exchanges);\n    assertEquals(1, returns);\n    assertEquals(11, invalidateConnections);\n    assertEquals(11, serverCrashes);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"d013311296d40a1cec4d5a6071a4eb1a7707601a","commitMessage":"@@@GEODE-7880: revert changes related to GEODE-6536 (#4810)\n\nRevert \"Feature/geode 6536 1: modify borrowConnection singleHop solution (#4753)\"\n\nThis reverts commit 86defd40c6ba558b53753c51176e05f009bb32c3.\n\nCo-authored-by: anilkumar gingade <agingade@pivotal.io>\nCo-authored-by: Dale Emery <demery@pivotal.io>","date":"2020-03-14 06:50:37","modifiedFileCount":"23","status":"M","submitter":"agingade"},{"authorTime":"2020-03-31 03:54:35","codes":[{"authorDate":"2020-03-31 03:54:35","commitOrder":5,"curCode":"  public void testExecute() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 3,\n        10, PoolFactory.DEFAULT_SERVER_CONNECTION_TIMEOUT, cancelCriterion, null);\n    Object result = exec.execute(new Op() {\n      @Override\n      public Object attempt(Connection cnx) throws Exception {\n        return \"hello\";\n      }\n    });\n    assertEquals(\"hello\", result);\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new SocketTimeoutException();\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new ServerOperationException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerOperationException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(4, serverCrashes);\n  }\n","date":"2020-03-31 03:54:35","endLine":171,"groupId":"35372","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/0f/a4c37fc5f93eef66e9207e0d1bd9a4cc33db33.src","preCode":"  public void testExecute() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 3,\n        10, cancelCriterion, null);\n    Object result = exec.execute(new Op() {\n      @Override\n      public Object attempt(Connection cnx) throws Exception {\n        return \"hello\";\n      }\n    });\n    assertEquals(\"hello\", result);\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new SocketTimeoutException();\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new ServerOperationException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerOperationException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(4, serverCrashes);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2020-03-31 03:54:35","commitOrder":5,"curCode":"  public void testRetryFailedServers() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 10,\n        10, PoolFactory.DEFAULT_SERVER_CONNECTION_TIMEOUT, cancelCriterion, null);\n\n    manager.numServers = 5;\n    try {\n      exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(10, exchanges);\n    assertEquals(1, returns);\n    assertEquals(11, invalidateConnections);\n    assertEquals(11, serverCrashes);\n  }\n","date":"2020-03-31 03:54:35","endLine":229,"groupId":"35445","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetryFailedServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/0f/a4c37fc5f93eef66e9207e0d1bd9a4cc33db33.src","preCode":"  public void testRetryFailedServers() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 10,\n        10, cancelCriterion, null);\n\n    manager.numServers = 5;\n    try {\n      exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(10, exchanges);\n    assertEquals(1, returns);\n    assertEquals(11, invalidateConnections);\n    assertEquals(11, serverCrashes);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"}],"commitId":"b021b127867d1e01e09fac26de10d29f896ed7dc","commitMessage":"@@@Feature/geode 6536 2: Added retry in borrowConnection/single hop (#4833)\n\n* GEODE-6536: Added retry in borrowConnection/single hop\n\n* GEODE-6536: bug fix\n\n* GEODE-6536: update after comments\n\n* GEODE-6536: modify borrowConnection singleHop solution\n\n* GEODE-6536: test update\n\n* GEODE-6536: updated tests.  and added parameter to desable timeout\n\n* GEODE-6536: update of cachexml impacts\n\n* GEODE-6536: remove cachexml restriction\n\n* GEODE-6536: update default value and documentation\n\n* GEODE-6536_2: change exception type\n\n* GEODE-6536_2: seize new connection only in case onlyUseExistingCnx=false","date":"2020-03-31 03:54:35","modifiedFileCount":"23","status":"M","submitter":"Mario Ivanac"},{"authorTime":"2020-04-29 00:05:55","codes":[{"authorDate":"2020-04-29 00:05:55","commitOrder":6,"curCode":"  public void testExecute() {\n    ExecutablePool exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 3,\n        10, PoolFactory.DEFAULT_SERVER_CONNECTION_TIMEOUT, cancelCriterion, null);\n    Object result = exec.execute(cnx -> \"hello\");\n\n    assertThat(result).isEqualTo(\"hello\");\n    assertThat(borrows).isEqualTo(1);\n    assertThat(returns).isEqualTo(1);\n    assertThat(invalidateConnections).isEqualTo(0);\n    assertThat(serverCrashes).isEqualTo(0);\n\n    reset();\n\n    Throwable thrown = catchThrowable(() -> {\n      exec.execute(cnx -> {\n        throw new SocketTimeoutException(\"test\");\n      });\n    });\n    assertThat(thrown).isInstanceOf(ServerConnectivityException.class);\n\n    assertThat(borrows).isEqualTo(1);\n    assertThat(exchanges).isEqualTo(3);\n    assertThat(returns).isEqualTo(1);\n    assertThat(invalidateConnections).isEqualTo(4);\n    assertThat(serverCrashes).isEqualTo(0);\n\n    reset();\n\n    thrown = catchThrowable(() -> {\n      exec.execute(cnx -> {\n        throw new ServerOperationException(\"Something didn't work\");\n      });\n    });\n    assertThat(thrown).isInstanceOf(ServerOperationException.class);\n\n    assertThat(borrows).isEqualTo(1);\n    assertThat(returns).isEqualTo(1);\n    assertThat(invalidateConnections).isEqualTo(0);\n    assertThat(serverCrashes).isEqualTo(0);\n\n    reset();\n\n    thrown = catchThrowable(() -> {\n      exec.execute(cnx -> {\n        throw new IOException(\"Something didn't work\");\n      });\n    });\n    assertThat(thrown).isInstanceOf(ServerConnectivityException.class);\n\n    assertThat(borrows).isEqualTo(1);\n    assertThat(exchanges).isEqualTo(3);\n    assertThat(returns).isEqualTo(1);\n    assertThat(invalidateConnections).isEqualTo(4);\n    assertThat(serverCrashes).isEqualTo(4);\n  }\n","date":"2020-04-29 00:05:55","endLine":148,"groupId":"102883","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8f/10d4d8df57a1a937242371f6468649e791942e.src","preCode":"  public void testExecute() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 3,\n        10, PoolFactory.DEFAULT_SERVER_CONNECTION_TIMEOUT, cancelCriterion, null);\n    Object result = exec.execute(new Op() {\n      @Override\n      public Object attempt(Connection cnx) throws Exception {\n        return \"hello\";\n      }\n    });\n    assertEquals(\"hello\", result);\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new SocketTimeoutException();\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new ServerOperationException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerOperationException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(1, returns);\n    assertEquals(0, invalidateConnections);\n    assertEquals(0, serverCrashes);\n\n    reset();\n\n    try {\n      result = exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(3, exchanges);\n    assertEquals(1, returns);\n    assertEquals(4, invalidateConnections);\n    assertEquals(4, serverCrashes);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-04-29 00:05:55","commitOrder":6,"curCode":"  public void testRetryFailedServers() {\n    ExecutablePool exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 10,\n        10, PoolFactory.DEFAULT_SERVER_CONNECTION_TIMEOUT, cancelCriterion, null);\n\n    manager.numServers = 5;\n\n    Throwable thrown = catchThrowable(() -> {\n      exec.execute(cnx -> {\n        throw new IOException(\"Something didn't work\");\n      });\n    });\n    assertThat(thrown).isInstanceOf(ServerConnectivityException.class);\n\n    assertThat(borrows).isEqualTo(1);\n    assertThat(exchanges).isEqualTo(10);\n    assertThat(returns).isEqualTo(1);\n    assertThat(invalidateConnections).isEqualTo(11);\n    assertThat(serverCrashes).isEqualTo(11);\n  }\n","date":"2020-04-29 00:05:55","endLine":190,"groupId":"102883","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetryFailedServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-geode-10-0.7/blobInfo/CC_OUT/blobs/8f/10d4d8df57a1a937242371f6468649e791942e.src","preCode":"  public void testRetryFailedServers() throws Exception {\n    OpExecutorImpl exec = new OpExecutorImpl(manager, queueManager, endpointManager, riTracker, 10,\n        10, PoolFactory.DEFAULT_SERVER_CONNECTION_TIMEOUT, cancelCriterion, null);\n\n    manager.numServers = 5;\n    try {\n      exec.execute(new Op() {\n        @Override\n        public Object attempt(Connection cnx) throws Exception {\n          throw new IOException(\"Something didn't work\");\n        }\n      });\n      fail(\"Should have got an exception\");\n    } catch (ServerConnectivityException expected) {\n      \r\n    }\n    assertEquals(1, borrows);\n    assertEquals(10, exchanges);\n    assertEquals(1, returns);\n    assertEquals(11, invalidateConnections);\n    assertEquals(11, serverCrashes);\n  }\n","realPath":"geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java","repoName":"geode","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"5e0b25a3247cb12075fd7bba97cb96b0e42dcb2c","commitMessage":"@@@GEODE-7964: Fixup all tests touched for Mockito upgrade (#4986)\n\n","date":"2020-04-29 00:05:55","modifiedFileCount":"7","status":"M","submitter":"Kirk Lund"}]
