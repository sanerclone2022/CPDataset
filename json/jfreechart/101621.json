[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            int pass) {\n\n        \r\n        if (!getItemVisible(row, column)) {\n            return;\n        }\n        int visibleRow = state.getVisibleSeriesIndex(row);\n        if (visibleRow < 0) {\n            return;\n        }\n        int visibleRowCount = state.getVisibleSeriesCount();\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        MultiValueCategoryDataset d = (MultiValueCategoryDataset) dataset;\n        List values = d.getValues(row, column);\n        if (values == null) {\n            return;\n        }\n        int valueCount = values.size();\n        for (int i = 0; i < valueCount; i++) {\n            \r\n            double x1;\n            if (this.useSeriesOffset) {\n                x1 = domainAxis.getCategorySeriesMiddle(column, \n                        dataset.getColumnCount(), visibleRow, visibleRowCount,\n                        this.itemMargin, dataArea, plot.getDomainAxisEdge());\n            }\n            else {\n                x1 = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                        dataArea, plot.getDomainAxisEdge());\n            }\n            Number n = (Number) values.get(i);\n            double value = n.doubleValue();\n            double y1 = rangeAxis.valueToJava2D(value, dataArea,\n                    plot.getRangeAxisEdge());\n\n            Shape shape = getItemShape(row, column);\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, y1, x1);\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, x1, y1);\n            }\n            if (getItemShapeFilled(row, column)) {\n                if (this.useFillPaint) {\n                    g2.setPaint(getItemFillPaint(row, column));\n                }\n                else {\n                    g2.setPaint(getItemPaint(row, column));\n                }\n                g2.fill(shape);\n            }\n            if (this.drawOutlines) {\n                if (this.useOutlinePaint) {\n                    g2.setPaint(getItemOutlinePaint(row, column));\n                }\n                else {\n                    g2.setPaint(getItemPaint(row, column));\n                }\n                g2.setStroke(getItemOutlineStroke(row, column));\n                g2.draw(shape);\n            }\n        }\n\n    }\n","date":"2016-02-19 16:24:22","endLine":456,"groupId":"696","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"drawItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn@intpass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/48/b329b1e2808c0b8b3d2394aa745114524c3662.src","preCode":"    public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            int pass) {\n\n        \r\n        if (!getItemVisible(row, column)) {\n            return;\n        }\n        int visibleRow = state.getVisibleSeriesIndex(row);\n        if (visibleRow < 0) {\n            return;\n        }\n        int visibleRowCount = state.getVisibleSeriesCount();\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        MultiValueCategoryDataset d = (MultiValueCategoryDataset) dataset;\n        List values = d.getValues(row, column);\n        if (values == null) {\n            return;\n        }\n        int valueCount = values.size();\n        for (int i = 0; i < valueCount; i++) {\n            \r\n            double x1;\n            if (this.useSeriesOffset) {\n                x1 = domainAxis.getCategorySeriesMiddle(column, \n                        dataset.getColumnCount(), visibleRow, visibleRowCount,\n                        this.itemMargin, dataArea, plot.getDomainAxisEdge());\n            }\n            else {\n                x1 = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                        dataArea, plot.getDomainAxisEdge());\n            }\n            Number n = (Number) values.get(i);\n            double value = n.doubleValue();\n            double y1 = rangeAxis.valueToJava2D(value, dataArea,\n                    plot.getRangeAxisEdge());\n\n            Shape shape = getItemShape(row, column);\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, y1, x1);\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, x1, y1);\n            }\n            if (getItemShapeFilled(row, column)) {\n                if (this.useFillPaint) {\n                    g2.setPaint(getItemFillPaint(row, column));\n                }\n                else {\n                    g2.setPaint(getItemPaint(row, column));\n                }\n                g2.fill(shape);\n            }\n            if (this.drawOutlines) {\n                if (this.useOutlinePaint) {\n                    g2.setPaint(getItemOutlinePaint(row, column));\n                }\n                else {\n                    g2.setPaint(getItemPaint(row, column));\n                }\n                g2.setStroke(getItemOutlineStroke(row, column));\n                g2.draw(shape);\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/ScatterRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            int pass) {\n\n        \r\n        if (!getItemVisible(row, column)) {\n            return;\n        }\n\n        \r\n        if (!getItemLineVisible(row, column)\n                && !getItemShapeVisible(row, column)) {\n            return;\n        }\n\n        \r\n        Number v = dataset.getValue(row, column);\n        if (v == null) {\n            return;\n        }\n\n        int visibleRow = state.getVisibleSeriesIndex(row);\n        if (visibleRow < 0) {\n            return;\n        }\n        int visibleRowCount = state.getVisibleSeriesCount();\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        \r\n        double x1;\n        if (this.useSeriesOffset) {\n            x1 = domainAxis.getCategorySeriesMiddle(column,\n                    dataset.getColumnCount(), visibleRow, visibleRowCount,\n                    this.itemMargin, dataArea, plot.getDomainAxisEdge());\n        }\n        else {\n            x1 = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                    dataArea, plot.getDomainAxisEdge());\n        }\n        double value = v.doubleValue();\n        double y1 = rangeAxis.valueToJava2D(value, dataArea,\n                plot.getRangeAxisEdge());\n\n        if (pass == 0 && getItemLineVisible(row, column)) {\n            if (column != 0) {\n                Number previousValue = dataset.getValue(row, column - 1);\n                if (previousValue != null) {\n                    \r\n                    double previous = previousValue.doubleValue();\n                    double x0;\n                    if (this.useSeriesOffset) {\n                        x0 = domainAxis.getCategorySeriesMiddle(\n                                column - 1, dataset.getColumnCount(),\n                                visibleRow, visibleRowCount,\n                                this.itemMargin, dataArea,\n                                plot.getDomainAxisEdge());\n                    }\n                    else {\n                        x0 = domainAxis.getCategoryMiddle(column - 1,\n                                getColumnCount(), dataArea,\n                                plot.getDomainAxisEdge());\n                    }\n                    double y0 = rangeAxis.valueToJava2D(previous, dataArea,\n                            plot.getRangeAxisEdge());\n\n                    Line2D line = null;\n                    if (orientation == PlotOrientation.HORIZONTAL) {\n                        line = new Line2D.Double(y0, x0, y1, x1);\n                    }\n                    else if (orientation == PlotOrientation.VERTICAL) {\n                        line = new Line2D.Double(x0, y0, x1, y1);\n                    }\n                    g2.setPaint(getItemPaint(row, column));\n                    g2.setStroke(getItemStroke(row, column));\n                    g2.draw(line);\n                }\n            }\n        }\n\n        if (pass == 1) {\n            Shape shape = getItemShape(row, column);\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, y1, x1);\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, x1, y1);\n            }\n\n            if (getItemShapeVisible(row, column)) {\n                if (getItemShapeFilled(row, column)) {\n                    if (this.useFillPaint) {\n                        g2.setPaint(getItemFillPaint(row, column));\n                    }\n                    else {\n                        g2.setPaint(getItemPaint(row, column));\n                    }\n                    g2.fill(shape);\n                }\n                if (this.drawOutlines) {\n                    if (this.useOutlinePaint) {\n                        g2.setPaint(getItemOutlinePaint(row, column));\n                    }\n                    else {\n                        g2.setPaint(getItemPaint(row, column));\n                    }\n                    g2.setStroke(getItemOutlineStroke(row, column));\n                    g2.draw(shape);\n                }\n            }\n\n            \r\n            if (isItemLabelVisible(row, column)) {\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    drawItemLabel(g2, orientation, dataset, row, column, y1,\n                            x1, (value < 0.0));\n                }\n                else if (orientation == PlotOrientation.VERTICAL) {\n                    drawItemLabel(g2, orientation, dataset, row, column, x1,\n                            y1, (value < 0.0));\n                }\n            }\n\n            \r\n            int datasetIndex = plot.indexOf(dataset);\n            updateCrosshairValues(state.getCrosshairState(),\n                    dataset.getRowKey(row), dataset.getColumnKey(column),\n                    value, datasetIndex, x1, y1, orientation);\n\n            \r\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, shape);\n            }\n        }\n\n    }\n","date":"2016-02-19 16:24:22","endLine":1039,"groupId":"260","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"drawItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn@intpass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/04/f80f7b0de234d3fa9df66f9b66a158d7f1011b.src","preCode":"    public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            int pass) {\n\n        \r\n        if (!getItemVisible(row, column)) {\n            return;\n        }\n\n        \r\n        if (!getItemLineVisible(row, column)\n                && !getItemShapeVisible(row, column)) {\n            return;\n        }\n\n        \r\n        Number v = dataset.getValue(row, column);\n        if (v == null) {\n            return;\n        }\n\n        int visibleRow = state.getVisibleSeriesIndex(row);\n        if (visibleRow < 0) {\n            return;\n        }\n        int visibleRowCount = state.getVisibleSeriesCount();\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        \r\n        double x1;\n        if (this.useSeriesOffset) {\n            x1 = domainAxis.getCategorySeriesMiddle(column,\n                    dataset.getColumnCount(), visibleRow, visibleRowCount,\n                    this.itemMargin, dataArea, plot.getDomainAxisEdge());\n        }\n        else {\n            x1 = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                    dataArea, plot.getDomainAxisEdge());\n        }\n        double value = v.doubleValue();\n        double y1 = rangeAxis.valueToJava2D(value, dataArea,\n                plot.getRangeAxisEdge());\n\n        if (pass == 0 && getItemLineVisible(row, column)) {\n            if (column != 0) {\n                Number previousValue = dataset.getValue(row, column - 1);\n                if (previousValue != null) {\n                    \r\n                    double previous = previousValue.doubleValue();\n                    double x0;\n                    if (this.useSeriesOffset) {\n                        x0 = domainAxis.getCategorySeriesMiddle(\n                                column - 1, dataset.getColumnCount(),\n                                visibleRow, visibleRowCount,\n                                this.itemMargin, dataArea,\n                                plot.getDomainAxisEdge());\n                    }\n                    else {\n                        x0 = domainAxis.getCategoryMiddle(column - 1,\n                                getColumnCount(), dataArea,\n                                plot.getDomainAxisEdge());\n                    }\n                    double y0 = rangeAxis.valueToJava2D(previous, dataArea,\n                            plot.getRangeAxisEdge());\n\n                    Line2D line = null;\n                    if (orientation == PlotOrientation.HORIZONTAL) {\n                        line = new Line2D.Double(y0, x0, y1, x1);\n                    }\n                    else if (orientation == PlotOrientation.VERTICAL) {\n                        line = new Line2D.Double(x0, y0, x1, y1);\n                    }\n                    g2.setPaint(getItemPaint(row, column));\n                    g2.setStroke(getItemStroke(row, column));\n                    g2.draw(line);\n                }\n            }\n        }\n\n        if (pass == 1) {\n            Shape shape = getItemShape(row, column);\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, y1, x1);\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, x1, y1);\n            }\n\n            if (getItemShapeVisible(row, column)) {\n                if (getItemShapeFilled(row, column)) {\n                    if (this.useFillPaint) {\n                        g2.setPaint(getItemFillPaint(row, column));\n                    }\n                    else {\n                        g2.setPaint(getItemPaint(row, column));\n                    }\n                    g2.fill(shape);\n                }\n                if (this.drawOutlines) {\n                    if (this.useOutlinePaint) {\n                        g2.setPaint(getItemOutlinePaint(row, column));\n                    }\n                    else {\n                        g2.setPaint(getItemPaint(row, column));\n                    }\n                    g2.setStroke(getItemOutlineStroke(row, column));\n                    g2.draw(shape);\n                }\n            }\n\n            \r\n            if (isItemLabelVisible(row, column)) {\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    drawItemLabel(g2, orientation, dataset, row, column, y1,\n                            x1, (value < 0.0));\n                }\n                else if (orientation == PlotOrientation.VERTICAL) {\n                    drawItemLabel(g2, orientation, dataset, row, column, x1,\n                            y1, (value < 0.0));\n                }\n            }\n\n            \r\n            int datasetIndex = plot.indexOf(dataset);\n            updateCrosshairValues(state.getCrosshairState(),\n                    dataset.getRowKey(row), dataset.getColumnKey(column),\n                    value, datasetIndex, x1, y1, orientation);\n\n            \r\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, shape);\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/LineAndShapeRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":902,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2017-03-08 01:39:11","codes":[{"authorDate":"2017-03-08 01:39:11","commitOrder":2,"curCode":"    public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            int pass) {\n\n        \r\n        if (!getItemVisible(row, column)) {\n            return;\n        }\n        int visibleRow = state.getVisibleSeriesIndex(row);\n        if (visibleRow < 0) {\n            return;\n        }\n        int visibleRowCount = state.getVisibleSeriesCount();\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        MultiValueCategoryDataset d = (MultiValueCategoryDataset) dataset;\n        List values = d.getValues(row, column);\n        if (values == null) {\n            return;\n        }\n        int valueCount = values.size();\n        for (int i = 0; i < valueCount; i++) {\n            \r\n            double x1;\n            if (this.useSeriesOffset) {\n                x1 = domainAxis.getCategorySeriesMiddle(column, \n                        dataset.getColumnCount(), visibleRow, visibleRowCount,\n                        this.itemMargin, dataArea, plot.getDomainAxisEdge());\n            }\n            else {\n                x1 = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                        dataArea, plot.getDomainAxisEdge());\n            }\n            Number n = (Number) values.get(i);\n            double value = n.doubleValue();\n            double y1 = rangeAxis.valueToJava2D(value, dataArea,\n                    plot.getRangeAxisEdge());\n\n            Shape shape = getItemShape(row, column);\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtils.createTranslatedShape(shape, y1, x1);\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtils.createTranslatedShape(shape, x1, y1);\n            }\n            if (getItemShapeFilled(row, column)) {\n                if (this.useFillPaint) {\n                    g2.setPaint(getItemFillPaint(row, column));\n                }\n                else {\n                    g2.setPaint(getItemPaint(row, column));\n                }\n                g2.fill(shape);\n            }\n            if (this.drawOutlines) {\n                if (this.useOutlinePaint) {\n                    g2.setPaint(getItemOutlinePaint(row, column));\n                }\n                else {\n                    g2.setPaint(getItemPaint(row, column));\n                }\n                g2.setStroke(getItemOutlineStroke(row, column));\n                g2.draw(shape);\n            }\n        }\n\n    }\n","date":"2017-03-08 01:39:11","endLine":454,"groupId":"101621","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"drawItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn@intpass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/c2/b56a35d02882de720d309df4507977a0e0ee65.src","preCode":"    public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            int pass) {\n\n        \r\n        if (!getItemVisible(row, column)) {\n            return;\n        }\n        int visibleRow = state.getVisibleSeriesIndex(row);\n        if (visibleRow < 0) {\n            return;\n        }\n        int visibleRowCount = state.getVisibleSeriesCount();\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        MultiValueCategoryDataset d = (MultiValueCategoryDataset) dataset;\n        List values = d.getValues(row, column);\n        if (values == null) {\n            return;\n        }\n        int valueCount = values.size();\n        for (int i = 0; i < valueCount; i++) {\n            \r\n            double x1;\n            if (this.useSeriesOffset) {\n                x1 = domainAxis.getCategorySeriesMiddle(column, \n                        dataset.getColumnCount(), visibleRow, visibleRowCount,\n                        this.itemMargin, dataArea, plot.getDomainAxisEdge());\n            }\n            else {\n                x1 = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                        dataArea, plot.getDomainAxisEdge());\n            }\n            Number n = (Number) values.get(i);\n            double value = n.doubleValue();\n            double y1 = rangeAxis.valueToJava2D(value, dataArea,\n                    plot.getRangeAxisEdge());\n\n            Shape shape = getItemShape(row, column);\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, y1, x1);\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, x1, y1);\n            }\n            if (getItemShapeFilled(row, column)) {\n                if (this.useFillPaint) {\n                    g2.setPaint(getItemFillPaint(row, column));\n                }\n                else {\n                    g2.setPaint(getItemPaint(row, column));\n                }\n                g2.fill(shape);\n            }\n            if (this.drawOutlines) {\n                if (this.useOutlinePaint) {\n                    g2.setPaint(getItemOutlinePaint(row, column));\n                }\n                else {\n                    g2.setPaint(getItemPaint(row, column));\n                }\n                g2.setStroke(getItemOutlineStroke(row, column));\n                g2.draw(shape);\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/ScatterRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"},{"authorDate":"2017-03-08 01:39:11","commitOrder":2,"curCode":"    public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            int pass) {\n\n        \r\n        if (!getItemVisible(row, column)) {\n            return;\n        }\n\n        \r\n        if (!getItemLineVisible(row, column)\n                && !getItemShapeVisible(row, column)) {\n            return;\n        }\n\n        \r\n        Number v = dataset.getValue(row, column);\n        if (v == null) {\n            return;\n        }\n\n        int visibleRow = state.getVisibleSeriesIndex(row);\n        if (visibleRow < 0) {\n            return;\n        }\n        int visibleRowCount = state.getVisibleSeriesCount();\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        \r\n        double x1;\n        if (this.useSeriesOffset) {\n            x1 = domainAxis.getCategorySeriesMiddle(column,\n                    dataset.getColumnCount(), visibleRow, visibleRowCount,\n                    this.itemMargin, dataArea, plot.getDomainAxisEdge());\n        }\n        else {\n            x1 = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                    dataArea, plot.getDomainAxisEdge());\n        }\n        double value = v.doubleValue();\n        double y1 = rangeAxis.valueToJava2D(value, dataArea,\n                plot.getRangeAxisEdge());\n\n        if (pass == 0 && getItemLineVisible(row, column)) {\n            if (column != 0) {\n                Number previousValue = dataset.getValue(row, column - 1);\n                if (previousValue != null) {\n                    \r\n                    double previous = previousValue.doubleValue();\n                    double x0;\n                    if (this.useSeriesOffset) {\n                        x0 = domainAxis.getCategorySeriesMiddle(\n                                column - 1, dataset.getColumnCount(),\n                                visibleRow, visibleRowCount,\n                                this.itemMargin, dataArea,\n                                plot.getDomainAxisEdge());\n                    }\n                    else {\n                        x0 = domainAxis.getCategoryMiddle(column - 1,\n                                getColumnCount(), dataArea,\n                                plot.getDomainAxisEdge());\n                    }\n                    double y0 = rangeAxis.valueToJava2D(previous, dataArea,\n                            plot.getRangeAxisEdge());\n\n                    Line2D line = null;\n                    if (orientation == PlotOrientation.HORIZONTAL) {\n                        line = new Line2D.Double(y0, x0, y1, x1);\n                    }\n                    else if (orientation == PlotOrientation.VERTICAL) {\n                        line = new Line2D.Double(x0, y0, x1, y1);\n                    }\n                    g2.setPaint(getItemPaint(row, column));\n                    g2.setStroke(getItemStroke(row, column));\n                    g2.draw(line);\n                }\n            }\n        }\n\n        if (pass == 1) {\n            Shape shape = getItemShape(row, column);\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtils.createTranslatedShape(shape, y1, x1);\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtils.createTranslatedShape(shape, x1, y1);\n            }\n\n            if (getItemShapeVisible(row, column)) {\n                if (getItemShapeFilled(row, column)) {\n                    if (this.useFillPaint) {\n                        g2.setPaint(getItemFillPaint(row, column));\n                    }\n                    else {\n                        g2.setPaint(getItemPaint(row, column));\n                    }\n                    g2.fill(shape);\n                }\n                if (this.drawOutlines) {\n                    if (this.useOutlinePaint) {\n                        g2.setPaint(getItemOutlinePaint(row, column));\n                    }\n                    else {\n                        g2.setPaint(getItemPaint(row, column));\n                    }\n                    g2.setStroke(getItemOutlineStroke(row, column));\n                    g2.draw(shape);\n                }\n            }\n\n            \r\n            if (isItemLabelVisible(row, column)) {\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    drawItemLabel(g2, orientation, dataset, row, column, y1,\n                            x1, (value < 0.0));\n                }\n                else if (orientation == PlotOrientation.VERTICAL) {\n                    drawItemLabel(g2, orientation, dataset, row, column, x1,\n                            y1, (value < 0.0));\n                }\n            }\n\n            \r\n            int datasetIndex = plot.indexOf(dataset);\n            updateCrosshairValues(state.getCrosshairState(),\n                    dataset.getRowKey(row), dataset.getColumnKey(column),\n                    value, datasetIndex, x1, y1, orientation);\n\n            \r\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, shape);\n            }\n        }\n\n    }\n","date":"2017-03-08 01:39:11","endLine":1038,"groupId":"101621","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"drawItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn@intpass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/8a/b9d0b98985b299d80767906b645675c42a7d3d.src","preCode":"    public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            int pass) {\n\n        \r\n        if (!getItemVisible(row, column)) {\n            return;\n        }\n\n        \r\n        if (!getItemLineVisible(row, column)\n                && !getItemShapeVisible(row, column)) {\n            return;\n        }\n\n        \r\n        Number v = dataset.getValue(row, column);\n        if (v == null) {\n            return;\n        }\n\n        int visibleRow = state.getVisibleSeriesIndex(row);\n        if (visibleRow < 0) {\n            return;\n        }\n        int visibleRowCount = state.getVisibleSeriesCount();\n\n        PlotOrientation orientation = plot.getOrientation();\n\n        \r\n        double x1;\n        if (this.useSeriesOffset) {\n            x1 = domainAxis.getCategorySeriesMiddle(column,\n                    dataset.getColumnCount(), visibleRow, visibleRowCount,\n                    this.itemMargin, dataArea, plot.getDomainAxisEdge());\n        }\n        else {\n            x1 = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                    dataArea, plot.getDomainAxisEdge());\n        }\n        double value = v.doubleValue();\n        double y1 = rangeAxis.valueToJava2D(value, dataArea,\n                plot.getRangeAxisEdge());\n\n        if (pass == 0 && getItemLineVisible(row, column)) {\n            if (column != 0) {\n                Number previousValue = dataset.getValue(row, column - 1);\n                if (previousValue != null) {\n                    \r\n                    double previous = previousValue.doubleValue();\n                    double x0;\n                    if (this.useSeriesOffset) {\n                        x0 = domainAxis.getCategorySeriesMiddle(\n                                column - 1, dataset.getColumnCount(),\n                                visibleRow, visibleRowCount,\n                                this.itemMargin, dataArea,\n                                plot.getDomainAxisEdge());\n                    }\n                    else {\n                        x0 = domainAxis.getCategoryMiddle(column - 1,\n                                getColumnCount(), dataArea,\n                                plot.getDomainAxisEdge());\n                    }\n                    double y0 = rangeAxis.valueToJava2D(previous, dataArea,\n                            plot.getRangeAxisEdge());\n\n                    Line2D line = null;\n                    if (orientation == PlotOrientation.HORIZONTAL) {\n                        line = new Line2D.Double(y0, x0, y1, x1);\n                    }\n                    else if (orientation == PlotOrientation.VERTICAL) {\n                        line = new Line2D.Double(x0, y0, x1, y1);\n                    }\n                    g2.setPaint(getItemPaint(row, column));\n                    g2.setStroke(getItemStroke(row, column));\n                    g2.draw(line);\n                }\n            }\n        }\n\n        if (pass == 1) {\n            Shape shape = getItemShape(row, column);\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, y1, x1);\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, x1, y1);\n            }\n\n            if (getItemShapeVisible(row, column)) {\n                if (getItemShapeFilled(row, column)) {\n                    if (this.useFillPaint) {\n                        g2.setPaint(getItemFillPaint(row, column));\n                    }\n                    else {\n                        g2.setPaint(getItemPaint(row, column));\n                    }\n                    g2.fill(shape);\n                }\n                if (this.drawOutlines) {\n                    if (this.useOutlinePaint) {\n                        g2.setPaint(getItemOutlinePaint(row, column));\n                    }\n                    else {\n                        g2.setPaint(getItemPaint(row, column));\n                    }\n                    g2.setStroke(getItemOutlineStroke(row, column));\n                    g2.draw(shape);\n                }\n            }\n\n            \r\n            if (isItemLabelVisible(row, column)) {\n                if (orientation == PlotOrientation.HORIZONTAL) {\n                    drawItemLabel(g2, orientation, dataset, row, column, y1,\n                            x1, (value < 0.0));\n                }\n                else if (orientation == PlotOrientation.VERTICAL) {\n                    drawItemLabel(g2, orientation, dataset, row, column, x1,\n                            y1, (value < 0.0));\n                }\n            }\n\n            \r\n            int datasetIndex = plot.indexOf(dataset);\n            updateCrosshairValues(state.getCrosshairState(),\n                    dataset.getRowKey(row), dataset.getColumnKey(column),\n                    value, datasetIndex, x1, y1, orientation);\n\n            \r\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, shape);\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/LineAndShapeRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":901,"status":"M"}],"commitId":"949365da759b3ea009185090fb4b27e75d768793","commitMessage":"@@@Incorporate required JCommon classes directly.","date":"2017-03-08 01:39:11","modifiedFileCount":"462","status":"M","submitter":"David Gilbert"}]
