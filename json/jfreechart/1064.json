[{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testEquals() {\n        XYTextAnnotation a1 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        XYTextAnnotation a2 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1 = new XYTextAnnotation(\"ABC\", 10.0, 20.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1 = new XYTextAnnotation(\"ABC\", 11.0, 20.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 11.0, 20.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1 = new XYTextAnnotation(\"ABC\", 11.0, 22.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 11.0, 22.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setFont(new Font(\"Serif\", Font.PLAIN, 23));\n        assertFalse(a1.equals(a2));\n        a2.setFont(new Font(\"Serif\", Font.PLAIN, 23));\n        assertTrue(a1.equals(a2));\n\n        \r\n        GradientPaint gp1 = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,\n                4.0f, Color.yellow);\n        GradientPaint gp2 = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,\n                4.0f, Color.yellow);\n        a1.setPaint(gp1);\n        assertFalse(a1.equals(a2));\n        a2.setPaint(gp2);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setRotationAnchor(TextAnchor.BASELINE_RIGHT);\n        assertFalse(a1.equals(a2));\n        a2.setRotationAnchor(TextAnchor.BASELINE_RIGHT);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setRotationAngle(12.3);\n        assertFalse(a1.equals(a2));\n        a2.setRotationAngle(12.3);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setTextAnchor(TextAnchor.BASELINE_RIGHT);\n        assertFalse(a1.equals(a2));\n        a2.setTextAnchor(TextAnchor.BASELINE_RIGHT);\n        assertTrue(a1.equals(a2));\n\n        a1.setBackgroundPaint(gp1);\n        assertFalse(a1.equals(a2));\n        a2.setBackgroundPaint(gp1);\n        assertTrue(a1.equals(a2));\n\n        a1.setOutlinePaint(gp1);\n        assertFalse(a1.equals(a2));\n        a2.setOutlinePaint(gp1);\n        assertTrue(a1.equals(a2));\n\n        a1.setOutlineStroke(new BasicStroke(1.2f));\n        assertFalse(a1.equals(a2));\n        a2.setOutlineStroke(new BasicStroke(1.2f));\n        assertTrue(a1.equals(a2));\n\n        a1.setOutlineVisible(!a1.isOutlineVisible());\n        assertFalse(a1.equals(a2));\n        a2.setOutlineVisible(a1.isOutlineVisible());\n        assertTrue(a1.equals(a2));\n\n    }\n","date":"2016-02-19 15:40:32","endLine":148,"groupId":"2124","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/71/1d65cac4fe8eac5b12b9cad1f37b830246c29b.src","preCode":"    public void testEquals() {\n        XYTextAnnotation a1 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        XYTextAnnotation a2 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1 = new XYTextAnnotation(\"ABC\", 10.0, 20.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1 = new XYTextAnnotation(\"ABC\", 11.0, 20.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 11.0, 20.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1 = new XYTextAnnotation(\"ABC\", 11.0, 22.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 11.0, 22.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setFont(new Font(\"Serif\", Font.PLAIN, 23));\n        assertFalse(a1.equals(a2));\n        a2.setFont(new Font(\"Serif\", Font.PLAIN, 23));\n        assertTrue(a1.equals(a2));\n\n        \r\n        GradientPaint gp1 = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,\n                4.0f, Color.yellow);\n        GradientPaint gp2 = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,\n                4.0f, Color.yellow);\n        a1.setPaint(gp1);\n        assertFalse(a1.equals(a2));\n        a2.setPaint(gp2);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setRotationAnchor(TextAnchor.BASELINE_RIGHT);\n        assertFalse(a1.equals(a2));\n        a2.setRotationAnchor(TextAnchor.BASELINE_RIGHT);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setRotationAngle(12.3);\n        assertFalse(a1.equals(a2));\n        a2.setRotationAngle(12.3);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setTextAnchor(TextAnchor.BASELINE_RIGHT);\n        assertFalse(a1.equals(a2));\n        a2.setTextAnchor(TextAnchor.BASELINE_RIGHT);\n        assertTrue(a1.equals(a2));\n\n        a1.setBackgroundPaint(gp1);\n        assertFalse(a1.equals(a2));\n        a2.setBackgroundPaint(gp1);\n        assertTrue(a1.equals(a2));\n\n        a1.setOutlinePaint(gp1);\n        assertFalse(a1.equals(a2));\n        a2.setOutlinePaint(gp1);\n        assertTrue(a1.equals(a2));\n\n        a1.setOutlineStroke(new BasicStroke(1.2f));\n        assertFalse(a1.equals(a2));\n        a2.setOutlineStroke(new BasicStroke(1.2f));\n        assertTrue(a1.equals(a2));\n\n        a1.setOutlineVisible(!a1.isOutlineVisible());\n        assertFalse(a1.equals(a2));\n        a2.setOutlineVisible(a1.isOutlineVisible());\n        assertTrue(a1.equals(a2));\n\n    }\n","realPath":"src/test/java/org/jfree/chart/annotations/XYTextAnnotationTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testHashCode() {\n        XYTextAnnotation a1 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        XYTextAnnotation a2 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }\n","date":"2016-02-19 15:40:32","endLine":161,"groupId":"2139","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHashCode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/71/1d65cac4fe8eac5b12b9cad1f37b830246c29b.src","preCode":"    public void testHashCode() {\n        XYTextAnnotation a1 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        XYTextAnnotation a2 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }\n","realPath":"src/test/java/org/jfree/chart/annotations/XYTextAnnotationTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"}],"commitId":"1b18adfb8102c34c9287ece406b9dde5751b90b5","commitMessage":"@@@Move test files to standard Maven location.","date":"2016-02-19 15:40:32","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2017-05-06 13:49:04","commitOrder":2,"curCode":"    public void testEquals() {\n        XYTextAnnotation a1 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        XYTextAnnotation a2 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1 = new XYTextAnnotation(\"ABC\", 10.0, 20.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1 = new XYTextAnnotation(\"ABC\", 11.0, 20.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 11.0, 20.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1 = new XYTextAnnotation(\"ABC\", 11.0, 22.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 11.0, 22.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setFont(new Font(\"Serif\", Font.PLAIN, 23));\n        assertFalse(a1.equals(a2));\n        a2.setFont(new Font(\"Serif\", Font.PLAIN, 23));\n        assertTrue(a1.equals(a2));\n\n        \r\n        GradientPaint gp1 = new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f,\n                4.0f, Color.YELLOW);\n        GradientPaint gp2 = new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f,\n                4.0f, Color.YELLOW);\n        a1.setPaint(gp1);\n        assertFalse(a1.equals(a2));\n        a2.setPaint(gp2);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setRotationAnchor(TextAnchor.BASELINE_RIGHT);\n        assertFalse(a1.equals(a2));\n        a2.setRotationAnchor(TextAnchor.BASELINE_RIGHT);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setRotationAngle(12.3);\n        assertFalse(a1.equals(a2));\n        a2.setRotationAngle(12.3);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setTextAnchor(TextAnchor.BASELINE_RIGHT);\n        assertFalse(a1.equals(a2));\n        a2.setTextAnchor(TextAnchor.BASELINE_RIGHT);\n        assertTrue(a1.equals(a2));\n\n        a1.setBackgroundPaint(gp1);\n        assertFalse(a1.equals(a2));\n        a2.setBackgroundPaint(gp1);\n        assertTrue(a1.equals(a2));\n\n        a1.setOutlinePaint(gp1);\n        assertFalse(a1.equals(a2));\n        a2.setOutlinePaint(gp1);\n        assertTrue(a1.equals(a2));\n\n        a1.setOutlineStroke(new BasicStroke(1.2f));\n        assertFalse(a1.equals(a2));\n        a2.setOutlineStroke(new BasicStroke(1.2f));\n        assertTrue(a1.equals(a2));\n\n        a1.setOutlineVisible(!a1.isOutlineVisible());\n        assertFalse(a1.equals(a2));\n        a2.setOutlineVisible(a1.isOutlineVisible());\n        assertTrue(a1.equals(a2));\n\n    }\n","date":"2017-05-06 13:49:04","endLine":148,"groupId":"1064","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/cf/9feac734c76c9b1c7b604cb1a3bbeb6878c54b.src","preCode":"    public void testEquals() {\n        XYTextAnnotation a1 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        XYTextAnnotation a2 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1 = new XYTextAnnotation(\"ABC\", 10.0, 20.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1 = new XYTextAnnotation(\"ABC\", 11.0, 20.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 11.0, 20.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1 = new XYTextAnnotation(\"ABC\", 11.0, 22.0);\n        assertFalse(a1.equals(a2));\n        a2 = new XYTextAnnotation(\"ABC\", 11.0, 22.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setFont(new Font(\"Serif\", Font.PLAIN, 23));\n        assertFalse(a1.equals(a2));\n        a2.setFont(new Font(\"Serif\", Font.PLAIN, 23));\n        assertTrue(a1.equals(a2));\n\n        \r\n        GradientPaint gp1 = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,\n                4.0f, Color.yellow);\n        GradientPaint gp2 = new GradientPaint(1.0f, 2.0f, Color.red, 3.0f,\n                4.0f, Color.yellow);\n        a1.setPaint(gp1);\n        assertFalse(a1.equals(a2));\n        a2.setPaint(gp2);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setRotationAnchor(TextAnchor.BASELINE_RIGHT);\n        assertFalse(a1.equals(a2));\n        a2.setRotationAnchor(TextAnchor.BASELINE_RIGHT);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setRotationAngle(12.3);\n        assertFalse(a1.equals(a2));\n        a2.setRotationAngle(12.3);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setTextAnchor(TextAnchor.BASELINE_RIGHT);\n        assertFalse(a1.equals(a2));\n        a2.setTextAnchor(TextAnchor.BASELINE_RIGHT);\n        assertTrue(a1.equals(a2));\n\n        a1.setBackgroundPaint(gp1);\n        assertFalse(a1.equals(a2));\n        a2.setBackgroundPaint(gp1);\n        assertTrue(a1.equals(a2));\n\n        a1.setOutlinePaint(gp1);\n        assertFalse(a1.equals(a2));\n        a2.setOutlinePaint(gp1);\n        assertTrue(a1.equals(a2));\n\n        a1.setOutlineStroke(new BasicStroke(1.2f));\n        assertFalse(a1.equals(a2));\n        a2.setOutlineStroke(new BasicStroke(1.2f));\n        assertTrue(a1.equals(a2));\n\n        a1.setOutlineVisible(!a1.isOutlineVisible());\n        assertFalse(a1.equals(a2));\n        a2.setOutlineVisible(a1.isOutlineVisible());\n        assertTrue(a1.equals(a2));\n\n    }\n","realPath":"src/test/java/org/jfree/chart/annotations/XYTextAnnotationTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2016-02-19 15:40:32","commitOrder":2,"curCode":"    public void testHashCode() {\n        XYTextAnnotation a1 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        XYTextAnnotation a2 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }\n","date":"2016-02-19 15:40:32","endLine":161,"groupId":"1064","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHashCode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/71/1d65cac4fe8eac5b12b9cad1f37b830246c29b.src","preCode":"    public void testHashCode() {\n        XYTextAnnotation a1 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        XYTextAnnotation a2 = new XYTextAnnotation(\"Text\", 10.0, 20.0);\n        assertTrue(a1.equals(a2));\n        int h1 = a1.hashCode();\n        int h2 = a2.hashCode();\n        assertEquals(h1, h2);\n    }\n","realPath":"src/test/java/org/jfree/chart/annotations/XYTextAnnotationTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"}],"commitId":"20617d5b4ff1e14897eeb8d1cbcea11bb4656ab1","commitMessage":"@@@Update constants.","date":"2017-05-06 13:49:04","modifiedFileCount":"73","status":"M","submitter":"David Gilbert"}]
