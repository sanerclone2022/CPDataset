[{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testEquals() {\n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        \r\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(11, new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePosition(CategoryAnchor.END);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePosition(CategoryAnchor.END);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAnchorValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAnchorValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedDomainAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedDomainAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedRangeAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedRangeAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedLegendItems(new LegendItemCollection());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedLegendItems(new LegendItemCollection());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setCrosshairDatasetIndex(99);\n        assertFalse(plot1.equals(plot2));\n        plot2.setCrosshairDatasetIndex(99);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairColumnKey(\"A\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairColumnKey(\"A\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairRowKey(\"B\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairRowKey(\"B\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.red, 3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineVisible(!plot1.isRangeZeroBaselineVisible());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineVisible(!plot2.isRangeZeroBaselineVisible());\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.red, 3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setShadowGenerator(new DefaultShadowGenerator(5, Color.gray,\n                0.6f, 4, -Math.PI / 4));\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(new DefaultShadowGenerator(5, Color.gray,\n                0.6f, 4, -Math.PI / 4));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setShadowGenerator(null);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(null);\n        assertTrue(plot1.equals(plot2));\n    }\n","date":"2016-02-19 15:40:32","endLine":484,"groupId":"2237","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/70/cba9d9a58f027f9c66ccb715d416e7e51d4048.src","preCode":"    public void testEquals() {\n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        \r\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(11, new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePosition(CategoryAnchor.END);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePosition(CategoryAnchor.END);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAnchorValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAnchorValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedDomainAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedDomainAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedRangeAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedRangeAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedLegendItems(new LegendItemCollection());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedLegendItems(new LegendItemCollection());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setCrosshairDatasetIndex(99);\n        assertFalse(plot1.equals(plot2));\n        plot2.setCrosshairDatasetIndex(99);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairColumnKey(\"A\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairColumnKey(\"A\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairRowKey(\"B\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairRowKey(\"B\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.red, 3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineVisible(!plot1.isRangeZeroBaselineVisible());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineVisible(!plot2.isRangeZeroBaselineVisible());\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.red, 3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setShadowGenerator(new DefaultShadowGenerator(5, Color.gray,\n                0.6f, 4, -Math.PI / 4));\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(new DefaultShadowGenerator(5, Color.gray,\n                0.6f, 4, -Math.PI / 4));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setShadowGenerator(null);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(null);\n        assertTrue(plot1.equals(plot2));\n    }\n","realPath":"src/test/java/org/jfree/chart/plot/CategoryPlotTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"},{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testEquals() {\n\n        FastScatterPlot plot1 = new FastScatterPlot();\n        FastScatterPlot plot2 = new FastScatterPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        plot1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s = new BasicStroke(1.5f);\n        plot1.setDomainGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s2 = new BasicStroke(1.5f);\n        plot1.setRangeGridlineStroke(s2);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(s2);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainPannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainPannable(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangePannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangePannable(true);\n        assertTrue(plot1.equals(plot2));\n\n    }\n","date":"2016-02-19 15:40:32","endLine":130,"groupId":"2555","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/9a/fff7ed58e77f05f58be2ddd899204551808e1e.src","preCode":"    public void testEquals() {\n\n        FastScatterPlot plot1 = new FastScatterPlot();\n        FastScatterPlot plot2 = new FastScatterPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        plot1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s = new BasicStroke(1.5f);\n        plot1.setDomainGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s2 = new BasicStroke(1.5f);\n        plot1.setRangeGridlineStroke(s2);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(s2);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainPannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainPannable(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangePannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangePannable(true);\n        assertTrue(plot1.equals(plot2));\n\n    }\n","realPath":"src/test/java/org/jfree/chart/plot/FastScatterPlotTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"}],"commitId":"1b18adfb8102c34c9287ece406b9dde5751b90b5","commitMessage":"@@@Move test files to standard Maven location.","date":"2016-02-19 15:40:32","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2017-05-06 02:03:44","commitOrder":2,"curCode":"    public void testEquals() {\n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        \r\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(11, new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePosition(CategoryAnchor.END);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePosition(CategoryAnchor.END);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAnchorValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAnchorValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.WHITE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.WHITE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedDomainAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedDomainAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedRangeAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedRangeAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedLegendItems(new LegendItemCollection());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedLegendItems(new LegendItemCollection());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setCrosshairDatasetIndex(99);\n        assertFalse(plot1.equals(plot2));\n        plot2.setCrosshairDatasetIndex(99);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairColumnKey(\"A\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairColumnKey(\"A\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairRowKey(\"B\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairRowKey(\"B\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.RED, 3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineVisible(!plot1.isRangeZeroBaselineVisible());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineVisible(!plot2.isRangeZeroBaselineVisible());\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.RED, 3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setShadowGenerator(new DefaultShadowGenerator(5, Color.GRAY,\n                0.6f, 4, -Math.PI / 4));\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(new DefaultShadowGenerator(5, Color.GRAY,\n                0.6f, 4, -Math.PI / 4));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setShadowGenerator(null);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(null);\n        assertTrue(plot1.equals(plot2));\n    }\n","date":"2017-05-06 02:03:44","endLine":484,"groupId":"2237","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/81/2e36c7cc99b3c51252ffc661851fc1fa6d8e8b.src","preCode":"    public void testEquals() {\n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        \r\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(11, new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePosition(CategoryAnchor.END);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePosition(CategoryAnchor.END);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAnchorValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAnchorValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedDomainAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedDomainAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedRangeAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedRangeAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedLegendItems(new LegendItemCollection());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedLegendItems(new LegendItemCollection());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setCrosshairDatasetIndex(99);\n        assertFalse(plot1.equals(plot2));\n        plot2.setCrosshairDatasetIndex(99);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairColumnKey(\"A\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairColumnKey(\"A\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairRowKey(\"B\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairRowKey(\"B\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.red, 3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineVisible(!plot1.isRangeZeroBaselineVisible());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineVisible(!plot2.isRangeZeroBaselineVisible());\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.red, 3.0f, 4.0f, Color.blue));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.blue));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setShadowGenerator(new DefaultShadowGenerator(5, Color.gray,\n                0.6f, 4, -Math.PI / 4));\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(new DefaultShadowGenerator(5, Color.gray,\n                0.6f, 4, -Math.PI / 4));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setShadowGenerator(null);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(null);\n        assertTrue(plot1.equals(plot2));\n    }\n","realPath":"src/test/java/org/jfree/chart/plot/CategoryPlotTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2016-02-19 15:40:32","commitOrder":2,"curCode":"    public void testEquals() {\n\n        FastScatterPlot plot1 = new FastScatterPlot();\n        FastScatterPlot plot2 = new FastScatterPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        plot1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s = new BasicStroke(1.5f);\n        plot1.setDomainGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s2 = new BasicStroke(1.5f);\n        plot1.setRangeGridlineStroke(s2);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(s2);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainPannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainPannable(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangePannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangePannable(true);\n        assertTrue(plot1.equals(plot2));\n\n    }\n","date":"2016-02-19 15:40:32","endLine":130,"groupId":"2555","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/9a/fff7ed58e77f05f58be2ddd899204551808e1e.src","preCode":"    public void testEquals() {\n\n        FastScatterPlot plot1 = new FastScatterPlot();\n        FastScatterPlot plot2 = new FastScatterPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        plot1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s = new BasicStroke(1.5f);\n        plot1.setDomainGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s2 = new BasicStroke(1.5f);\n        plot1.setRangeGridlineStroke(s2);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(s2);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainPannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainPannable(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangePannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangePannable(true);\n        assertTrue(plot1.equals(plot2));\n\n    }\n","realPath":"src/test/java/org/jfree/chart/plot/FastScatterPlotTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"}],"commitId":"05102ab02f12fb52d08a85f873bc990861193f8b","commitMessage":"@@@Update constants.","date":"2017-05-06 02:03:44","modifiedFileCount":"2","status":"M","submitter":"David Gilbert"},{"authorTime":"2017-05-06 13:49:04","codes":[{"authorDate":"2017-05-06 02:03:44","commitOrder":3,"curCode":"    public void testEquals() {\n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        \r\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(11, new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePosition(CategoryAnchor.END);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePosition(CategoryAnchor.END);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAnchorValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAnchorValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.WHITE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.WHITE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedDomainAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedDomainAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedRangeAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedRangeAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedLegendItems(new LegendItemCollection());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedLegendItems(new LegendItemCollection());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setCrosshairDatasetIndex(99);\n        assertFalse(plot1.equals(plot2));\n        plot2.setCrosshairDatasetIndex(99);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairColumnKey(\"A\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairColumnKey(\"A\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairRowKey(\"B\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairRowKey(\"B\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.RED, 3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineVisible(!plot1.isRangeZeroBaselineVisible());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineVisible(!plot2.isRangeZeroBaselineVisible());\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.RED, 3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setShadowGenerator(new DefaultShadowGenerator(5, Color.GRAY,\n                0.6f, 4, -Math.PI / 4));\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(new DefaultShadowGenerator(5, Color.GRAY,\n                0.6f, 4, -Math.PI / 4));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setShadowGenerator(null);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(null);\n        assertTrue(plot1.equals(plot2));\n    }\n","date":"2017-05-06 02:03:44","endLine":484,"groupId":"2237","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/81/2e36c7cc99b3c51252ffc661851fc1fa6d8e8b.src","preCode":"    public void testEquals() {\n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        \r\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(11, new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePosition(CategoryAnchor.END);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePosition(CategoryAnchor.END);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAnchorValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAnchorValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.WHITE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.WHITE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedDomainAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedDomainAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedRangeAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedRangeAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedLegendItems(new LegendItemCollection());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedLegendItems(new LegendItemCollection());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setCrosshairDatasetIndex(99);\n        assertFalse(plot1.equals(plot2));\n        plot2.setCrosshairDatasetIndex(99);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairColumnKey(\"A\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairColumnKey(\"A\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairRowKey(\"B\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairRowKey(\"B\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.RED, 3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineVisible(!plot1.isRangeZeroBaselineVisible());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineVisible(!plot2.isRangeZeroBaselineVisible());\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.RED, 3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setShadowGenerator(new DefaultShadowGenerator(5, Color.GRAY,\n                0.6f, 4, -Math.PI / 4));\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(new DefaultShadowGenerator(5, Color.GRAY,\n                0.6f, 4, -Math.PI / 4));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setShadowGenerator(null);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(null);\n        assertTrue(plot1.equals(plot2));\n    }\n","realPath":"src/test/java/org/jfree/chart/plot/CategoryPlotTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"N"},{"authorDate":"2017-05-06 13:49:04","commitOrder":3,"curCode":"    public void testEquals() {\n\n        FastScatterPlot plot1 = new FastScatterPlot();\n        FastScatterPlot plot2 = new FastScatterPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        plot1.setPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s = new BasicStroke(1.5f);\n        plot1.setDomainGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s2 = new BasicStroke(1.5f);\n        plot1.setRangeGridlineStroke(s2);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(s2);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainPannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainPannable(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangePannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangePannable(true);\n        assertTrue(plot1.equals(plot2));\n\n    }\n","date":"2017-05-06 13:49:04","endLine":130,"groupId":"2555","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/77/b740a4b95516a9cbb8f87f23f8dd2139ea4ec3.src","preCode":"    public void testEquals() {\n\n        FastScatterPlot plot1 = new FastScatterPlot();\n        FastScatterPlot plot2 = new FastScatterPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        plot1.setPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s = new BasicStroke(1.5f);\n        plot1.setDomainGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s2 = new BasicStroke(1.5f);\n        plot1.setRangeGridlineStroke(s2);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(s2);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainPannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainPannable(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangePannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangePannable(true);\n        assertTrue(plot1.equals(plot2));\n\n    }\n","realPath":"src/test/java/org/jfree/chart/plot/FastScatterPlotTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"20617d5b4ff1e14897eeb8d1cbcea11bb4656ab1","commitMessage":"@@@Update constants.","date":"2017-05-06 13:49:04","modifiedFileCount":"73","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-02-25 22:29:50","codes":[{"authorDate":"2017-05-06 02:03:44","commitOrder":4,"curCode":"    public void testEquals() {\n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        \r\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(11, new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePosition(CategoryAnchor.END);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePosition(CategoryAnchor.END);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAnchorValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAnchorValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.WHITE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.WHITE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedDomainAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedDomainAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedRangeAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedRangeAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedLegendItems(new LegendItemCollection());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedLegendItems(new LegendItemCollection());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setCrosshairDatasetIndex(99);\n        assertFalse(plot1.equals(plot2));\n        plot2.setCrosshairDatasetIndex(99);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairColumnKey(\"A\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairColumnKey(\"A\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairRowKey(\"B\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairRowKey(\"B\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.RED, 3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineVisible(!plot1.isRangeZeroBaselineVisible());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineVisible(!plot2.isRangeZeroBaselineVisible());\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.RED, 3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setShadowGenerator(new DefaultShadowGenerator(5, Color.GRAY,\n                0.6f, 4, -Math.PI / 4));\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(new DefaultShadowGenerator(5, Color.GRAY,\n                0.6f, 4, -Math.PI / 4));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setShadowGenerator(null);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(null);\n        assertTrue(plot1.equals(plot2));\n    }\n","date":"2017-05-06 02:03:44","endLine":484,"groupId":"2237","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/81/2e36c7cc99b3c51252ffc661851fc1fa6d8e8b.src","preCode":"    public void testEquals() {\n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        \r\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(11, new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePosition(CategoryAnchor.END);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePosition(CategoryAnchor.END);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAnchorValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAnchorValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.WHITE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.WHITE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedDomainAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedDomainAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedRangeAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedRangeAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedLegendItems(new LegendItemCollection());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedLegendItems(new LegendItemCollection());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setCrosshairDatasetIndex(99);\n        assertFalse(plot1.equals(plot2));\n        plot2.setCrosshairDatasetIndex(99);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairColumnKey(\"A\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairColumnKey(\"A\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairRowKey(\"B\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairRowKey(\"B\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.RED, 3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineVisible(!plot1.isRangeZeroBaselineVisible());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineVisible(!plot2.isRangeZeroBaselineVisible());\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.RED, 3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setShadowGenerator(new DefaultShadowGenerator(5, Color.GRAY,\n                0.6f, 4, -Math.PI / 4));\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(new DefaultShadowGenerator(5, Color.GRAY,\n                0.6f, 4, -Math.PI / 4));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setShadowGenerator(null);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(null);\n        assertTrue(plot1.equals(plot2));\n    }\n","realPath":"src/test/java/org/jfree/chart/plot/CategoryPlotTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"N"},{"authorDate":"2020-02-25 22:29:50","commitOrder":4,"curCode":"    public void testEquals() {\n\n        FastScatterPlot plot1 = new FastScatterPlot();\n        FastScatterPlot plot2 = new FastScatterPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        plot1.setPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s = new BasicStroke(1.5f);\n        plot1.setDomainGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s2 = new BasicStroke(1.5f);\n        plot1.setRangeGridlineStroke(s2);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(s2);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainPannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainPannable(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangePannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangePannable(true);\n        assertTrue(plot1.equals(plot2));\n\n    }\n","date":"2020-02-25 22:29:50","endLine":130,"groupId":"2555","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/05/88a673be490133ebfabdf51c5b853d09e35014.src","preCode":"    public void testEquals() {\n\n        FastScatterPlot plot1 = new FastScatterPlot();\n        FastScatterPlot plot2 = new FastScatterPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        plot1.setPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s = new BasicStroke(1.5f);\n        plot1.setDomainGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s2 = new BasicStroke(1.5f);\n        plot1.setRangeGridlineStroke(s2);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(s2);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainPannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainPannable(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangePannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangePannable(true);\n        assertTrue(plot1.equals(plot2));\n\n    }\n","realPath":"src/test/java/org/jfree/chart/plot/FastScatterPlotTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"0ef26bf09d0f2fc511d7f03a874024a70c133595","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-02-25 22:29:50","modifiedFileCount":"12","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-02-25 22:29:50","codes":[{"authorDate":"2020-03-29 18:04:41","commitOrder":5,"curCode":"    public void testEquals() {\n        CategoryPlot<String, String> plot1 = new CategoryPlot<>();\n        CategoryPlot<String, String> plot2 = new CategoryPlot<>();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        \r\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(11, new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePosition(CategoryAnchor.END);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePosition(CategoryAnchor.END);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAnchorValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAnchorValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.WHITE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.WHITE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedDomainAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedDomainAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedRangeAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedRangeAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedLegendItems(new LegendItemCollection());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedLegendItems(new LegendItemCollection());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setCrosshairDatasetIndex(99);\n        assertFalse(plot1.equals(plot2));\n        plot2.setCrosshairDatasetIndex(99);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairColumnKey(\"A\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairColumnKey(\"A\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairRowKey(\"B\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairRowKey(\"B\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.RED, 3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineVisible(!plot1.isRangeZeroBaselineVisible());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineVisible(!plot2.isRangeZeroBaselineVisible());\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.RED, 3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setShadowGenerator(new DefaultShadowGenerator(5, Color.GRAY,\n                0.6f, 4, -Math.PI / 4));\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(new DefaultShadowGenerator(5, Color.GRAY,\n                0.6f, 4, -Math.PI / 4));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setShadowGenerator(null);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(null);\n        assertTrue(plot1.equals(plot2));\n    }\n","date":"2020-03-29 18:04:41","endLine":472,"groupId":"10152","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/ba/8529e409c89353734b00991461a30b6d9a0254.src","preCode":"    public void testEquals() {\n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        \r\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRenderer(11, new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePosition(CategoryAnchor.END);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePosition(CategoryAnchor.END);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setAnchorValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAnchorValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.WHITE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.WHITE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C1\"), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addDomainMarker(new CategoryMarker(\"C2\"), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertFalse(plot1.equals(plot2));\n        plot2.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\",\n                43.0));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedDomainAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedDomainAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedRangeAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedRangeAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setFixedLegendItems(new LegendItemCollection());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedLegendItems(new LegendItemCollection());\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setCrosshairDatasetIndex(99);\n        assertFalse(plot1.equals(plot2));\n        plot2.setCrosshairDatasetIndex(99);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairColumnKey(\"A\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairColumnKey(\"A\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairRowKey(\"B\");\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairRowKey(\"B\");\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainCrosshairStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.RED, 3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeMinorGridlineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineVisible(!plot1.isRangeZeroBaselineVisible());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineVisible(!plot2.isRangeZeroBaselineVisible());\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f,\n                Color.RED, 3.0f, 4.0f, Color.BLUE));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.BLUE));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeZeroBaselineStroke(new BasicStroke(1.23f));\n        assertTrue(plot1.equals(plot2));\n\n        \r\n        plot1.setShadowGenerator(new DefaultShadowGenerator(5, Color.GRAY,\n                0.6f, 4, -Math.PI / 4));\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(new DefaultShadowGenerator(5, Color.GRAY,\n                0.6f, 4, -Math.PI / 4));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setShadowGenerator(null);\n        assertFalse(plot1.equals(plot2));\n        plot2.setShadowGenerator(null);\n        assertTrue(plot1.equals(plot2));\n    }\n","realPath":"src/test/java/org/jfree/chart/plot/CategoryPlotTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2020-02-25 22:29:50","commitOrder":5,"curCode":"    public void testEquals() {\n\n        FastScatterPlot plot1 = new FastScatterPlot();\n        FastScatterPlot plot2 = new FastScatterPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        plot1.setPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s = new BasicStroke(1.5f);\n        plot1.setDomainGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s2 = new BasicStroke(1.5f);\n        plot1.setRangeGridlineStroke(s2);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(s2);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainPannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainPannable(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangePannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangePannable(true);\n        assertTrue(plot1.equals(plot2));\n\n    }\n","date":"2020-02-25 22:29:50","endLine":130,"groupId":"10152","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/05/88a673be490133ebfabdf51c5b853d09e35014.src","preCode":"    public void testEquals() {\n\n        FastScatterPlot plot1 = new FastScatterPlot();\n        FastScatterPlot plot2 = new FastScatterPlot();\n        assertTrue(plot1.equals(plot2));\n        assertTrue(plot2.equals(plot1));\n\n        plot1.setPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s = new BasicStroke(1.5f);\n        plot1.setDomainGridlineStroke(s);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(s);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.GREEN,\n                3.0f, 4.0f, Color.YELLOW));\n        assertTrue(plot1.equals(plot2));\n\n        Stroke s2 = new BasicStroke(1.5f);\n        plot1.setRangeGridlineStroke(s2);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(s2);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setDomainPannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainPannable(true);\n        assertTrue(plot1.equals(plot2));\n\n        plot1.setRangePannable(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangePannable(true);\n        assertTrue(plot1.equals(plot2));\n\n    }\n","realPath":"src/test/java/org/jfree/chart/plot/FastScatterPlotTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"}],"commitId":"e23eafd99eb9c5627dd100f927caa3ba7bbb036e","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-29 18:04:41","modifiedFileCount":"4","status":"M","submitter":"David Gilbert"}]
