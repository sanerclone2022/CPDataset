[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    protected AxisState drawLabel(String label, Graphics2D g2,\n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge,\n            AxisState state) {\n\n        \r\n        ParamChecks.nullNotPermitted(state, \"state\");\n\n        if ((label == null) || (label.equals(\"\"))) {\n            return state;\n        }\n\n        Font font = getLabelFont();\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(font);\n        g2.setPaint(getLabelPaint());\n        FontMetrics fm = g2.getFontMetrics();\n        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n\n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor() - insets.getBottom()\n                            - labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            TextUtilities.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor()\n                            + insets.getTop() + labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            TextUtilities.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            - insets.getRight() - labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            TextUtilities.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() - Math.PI / 2.0, \n                    anchor);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0,\n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            + insets.getLeft() + labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            TextUtilities.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() + Math.PI / 2.0, \n                    anchor);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n\n        return state;\n\n    }\n","date":"2016-02-19 16:24:22","endLine":1425,"groupId":"3081","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"drawLabel","params":"(Stringlabel@Graphics2Dg2@Rectangle2DplotArea@Rectangle2DdataArea@RectangleEdgeedge@AxisStatestate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/54/8d8ebf8e93ad64664cef5516758938ba894da1.src","preCode":"    protected AxisState drawLabel(String label, Graphics2D g2,\n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge,\n            AxisState state) {\n\n        \r\n        ParamChecks.nullNotPermitted(state, \"state\");\n\n        if ((label == null) || (label.equals(\"\"))) {\n            return state;\n        }\n\n        Font font = getLabelFont();\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(font);\n        g2.setPaint(getLabelPaint());\n        FontMetrics fm = g2.getFontMetrics();\n        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n\n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor() - insets.getBottom()\n                            - labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            TextUtilities.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor()\n                            + insets.getTop() + labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            TextUtilities.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            - insets.getRight() - labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            TextUtilities.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() - Math.PI / 2.0, \n                    anchor);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0,\n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            + insets.getLeft() + labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            TextUtilities.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() + Math.PI / 2.0, \n                    anchor);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n\n        return state;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/Axis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1342,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    protected AxisState drawAttributedLabel(AttributedString label, \n            Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, \n            RectangleEdge edge, AxisState state) {\n\n        \r\n        ParamChecks.nullNotPermitted(state, \"state\");\n\n        if (label == null) {\n            return state;\n        }\n\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(getLabelFont());\n        g2.setPaint(getLabelPaint());\n        TextLayout layout = new TextLayout(this.attributedLabel.getIterator(),\n                g2.getFontRenderContext());\n        Rectangle2D labelBounds = layout.getBounds();\n\n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor() - insets.getBottom()\n                            - labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor()\n                            + insets.getTop() + labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            - insets.getRight() - labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() - Math.PI / 2.0, \n                    anchor);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0,\n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            + insets.getLeft() + labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() + Math.PI / 2.0, \n                    anchor);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        return state;\n    }\n","date":"2016-02-19 16:24:22","endLine":1522,"groupId":"3081","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"drawAttributedLabel","params":"(AttributedStringlabel@Graphics2Dg2@Rectangle2DplotArea@Rectangle2DdataArea@RectangleEdgeedge@AxisStatestate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/54/8d8ebf8e93ad64664cef5516758938ba894da1.src","preCode":"    protected AxisState drawAttributedLabel(AttributedString label, \n            Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, \n            RectangleEdge edge, AxisState state) {\n\n        \r\n        ParamChecks.nullNotPermitted(state, \"state\");\n\n        if (label == null) {\n            return state;\n        }\n\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(getLabelFont());\n        g2.setPaint(getLabelPaint());\n        TextLayout layout = new TextLayout(this.attributedLabel.getIterator(),\n                g2.getFontRenderContext());\n        Rectangle2D labelBounds = layout.getBounds();\n\n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor() - insets.getBottom()\n                            - labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor()\n                            + insets.getTop() + labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            - insets.getRight() - labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() - Math.PI / 2.0, \n                    anchor);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0,\n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            + insets.getLeft() + labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() + Math.PI / 2.0, \n                    anchor);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        return state;\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/Axis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1441,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2017-05-06 13:04:03","commitOrder":2,"curCode":"    protected AxisState drawLabel(String label, Graphics2D g2,\n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge,\n            AxisState state) {\n\n        \r\n        ParamChecks.nullNotPermitted(state, \"state\");\n\n        if ((label == null) || (label.equals(\"\"))) {\n            return state;\n        }\n\n        Font font = getLabelFont();\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(font);\n        g2.setPaint(getLabelPaint());\n        FontMetrics fm = g2.getFontMetrics();\n        Rectangle2D labelBounds = TextUtils.getTextBounds(label, g2, fm);\n\n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor() - insets.getBottom()\n                            - labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            TextUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor()\n                            + insets.getTop() + labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            TextUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            - insets.getRight() - labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            TextUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() - Math.PI / 2.0, \n                    anchor);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0,\n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            + insets.getLeft() + labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            TextUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() + Math.PI / 2.0, \n                    anchor);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n\n        return state;\n\n    }\n","date":"2017-05-06 13:04:03","endLine":1425,"groupId":"3081","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"drawLabel","params":"(Stringlabel@Graphics2Dg2@Rectangle2DplotArea@Rectangle2DdataArea@RectangleEdgeedge@AxisStatestate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/de/5576be62f351bf3cdcf73c085e3e748d193f20.src","preCode":"    protected AxisState drawLabel(String label, Graphics2D g2,\n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge,\n            AxisState state) {\n\n        \r\n        ParamChecks.nullNotPermitted(state, \"state\");\n\n        if ((label == null) || (label.equals(\"\"))) {\n            return state;\n        }\n\n        Font font = getLabelFont();\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(font);\n        g2.setPaint(getLabelPaint());\n        FontMetrics fm = g2.getFontMetrics();\n        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n\n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor() - insets.getBottom()\n                            - labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            TextUtilities.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor()\n                            + insets.getTop() + labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            TextUtilities.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            - insets.getRight() - labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            TextUtilities.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() - Math.PI / 2.0, \n                    anchor);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0,\n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            + insets.getLeft() + labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            TextUtilities.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() + Math.PI / 2.0, \n                    anchor);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n\n        return state;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/Axis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1342,"status":"M"},{"authorDate":"2016-02-19 16:24:22","commitOrder":2,"curCode":"    protected AxisState drawAttributedLabel(AttributedString label, \n            Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, \n            RectangleEdge edge, AxisState state) {\n\n        \r\n        ParamChecks.nullNotPermitted(state, \"state\");\n\n        if (label == null) {\n            return state;\n        }\n\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(getLabelFont());\n        g2.setPaint(getLabelPaint());\n        TextLayout layout = new TextLayout(this.attributedLabel.getIterator(),\n                g2.getFontRenderContext());\n        Rectangle2D labelBounds = layout.getBounds();\n\n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor() - insets.getBottom()\n                            - labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor()\n                            + insets.getTop() + labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            - insets.getRight() - labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() - Math.PI / 2.0, \n                    anchor);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0,\n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            + insets.getLeft() + labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() + Math.PI / 2.0, \n                    anchor);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        return state;\n    }\n","date":"2016-02-19 16:24:22","endLine":1522,"groupId":"3081","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"drawAttributedLabel","params":"(AttributedStringlabel@Graphics2Dg2@Rectangle2DplotArea@Rectangle2DdataArea@RectangleEdgeedge@AxisStatestate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/54/8d8ebf8e93ad64664cef5516758938ba894da1.src","preCode":"    protected AxisState drawAttributedLabel(AttributedString label, \n            Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, \n            RectangleEdge edge, AxisState state) {\n\n        \r\n        ParamChecks.nullNotPermitted(state, \"state\");\n\n        if (label == null) {\n            return state;\n        }\n\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(getLabelFont());\n        g2.setPaint(getLabelPaint());\n        TextLayout layout = new TextLayout(this.attributedLabel.getIterator(),\n                g2.getFontRenderContext());\n        Rectangle2D labelBounds = layout.getBounds();\n\n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor() - insets.getBottom()\n                            - labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor()\n                            + insets.getTop() + labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            - insets.getRight() - labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() - Math.PI / 2.0, \n                    anchor);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0,\n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            + insets.getLeft() + labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() + Math.PI / 2.0, \n                    anchor);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        return state;\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/Axis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1441,"status":"N"}],"commitId":"ea1b09dba6931ba20e0ce2e1e8e528793a7fbae3","commitMessage":"@@@Rename TextUtilities -> TextUtils.","date":"2017-05-06 13:04:03","modifiedFileCount":"32","status":"M","submitter":"David Gilbert"},{"authorTime":"2017-05-12 05:28:15","codes":[{"authorDate":"2017-05-12 05:28:15","commitOrder":3,"curCode":"    protected AxisState drawLabel(String label, Graphics2D g2,\n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge,\n            AxisState state) {\n\n        \r\n        Args.nullNotPermitted(state, \"state\");\n\n        if ((label == null) || (label.equals(\"\"))) {\n            return state;\n        }\n\n        Font font = getLabelFont();\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(font);\n        g2.setPaint(getLabelPaint());\n        FontMetrics fm = g2.getFontMetrics();\n        Rectangle2D labelBounds = TextUtils.getTextBounds(label, g2, fm);\n\n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor() - insets.getBottom()\n                            - labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            TextUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor()\n                            + insets.getTop() + labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            TextUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            - insets.getRight() - labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            TextUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() - Math.PI / 2.0, \n                    anchor);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0,\n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            + insets.getLeft() + labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            TextUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() + Math.PI / 2.0, \n                    anchor);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n\n        return state;\n\n    }\n","date":"2017-05-12 05:28:15","endLine":1425,"groupId":"101859","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"drawLabel","params":"(Stringlabel@Graphics2Dg2@Rectangle2DplotArea@Rectangle2DdataArea@RectangleEdgeedge@AxisStatestate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/a7/c4fda47924e04c0badbba4a32dda15a1ea4101.src","preCode":"    protected AxisState drawLabel(String label, Graphics2D g2,\n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge,\n            AxisState state) {\n\n        \r\n        ParamChecks.nullNotPermitted(state, \"state\");\n\n        if ((label == null) || (label.equals(\"\"))) {\n            return state;\n        }\n\n        Font font = getLabelFont();\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(font);\n        g2.setPaint(getLabelPaint());\n        FontMetrics fm = g2.getFontMetrics();\n        Rectangle2D labelBounds = TextUtils.getTextBounds(label, g2, fm);\n\n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor() - insets.getBottom()\n                            - labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            TextUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor()\n                            + insets.getTop() + labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            TextUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            - insets.getRight() - labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            TextUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() - Math.PI / 2.0, \n                    anchor);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0,\n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            + insets.getLeft() + labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            TextUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() + Math.PI / 2.0, \n                    anchor);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n\n        return state;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/Axis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1342,"status":"M"},{"authorDate":"2017-05-12 05:28:15","commitOrder":3,"curCode":"    protected AxisState drawAttributedLabel(AttributedString label, \n            Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, \n            RectangleEdge edge, AxisState state) {\n\n        \r\n        Args.nullNotPermitted(state, \"state\");\n\n        if (label == null) {\n            return state;\n        }\n\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(getLabelFont());\n        g2.setPaint(getLabelPaint());\n        TextLayout layout = new TextLayout(this.attributedLabel.getIterator(),\n                g2.getFontRenderContext());\n        Rectangle2D labelBounds = layout.getBounds();\n\n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor() - insets.getBottom()\n                            - labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor()\n                            + insets.getTop() + labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            - insets.getRight() - labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() - Math.PI / 2.0, \n                    anchor);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0,\n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            + insets.getLeft() + labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() + Math.PI / 2.0, \n                    anchor);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        return state;\n    }\n","date":"2017-05-12 05:28:15","endLine":1522,"groupId":"101859","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"drawAttributedLabel","params":"(AttributedStringlabel@Graphics2Dg2@Rectangle2DplotArea@Rectangle2DdataArea@RectangleEdgeedge@AxisStatestate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/a7/c4fda47924e04c0badbba4a32dda15a1ea4101.src","preCode":"    protected AxisState drawAttributedLabel(AttributedString label, \n            Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, \n            RectangleEdge edge, AxisState state) {\n\n        \r\n        ParamChecks.nullNotPermitted(state, \"state\");\n\n        if (label == null) {\n            return state;\n        }\n\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(getLabelFont());\n        g2.setPaint(getLabelPaint());\n        TextLayout layout = new TextLayout(this.attributedLabel.getIterator(),\n                g2.getFontRenderContext());\n        Rectangle2D labelBounds = layout.getBounds();\n\n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor() - insets.getBottom()\n                            - labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = labelLocationX(this.labelLocation, dataArea);\n            double labely = state.getCursor()\n                            + insets.getTop() + labelBounds.getHeight() / 2.0;\n            TextAnchor anchor = labelAnchorH(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight()\n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),\n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            - insets.getRight() - labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() - Math.PI / 2.0, \n                    anchor);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0,\n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            double labelx = state.getCursor()\n                            + insets.getLeft() + labelBounds.getWidth() / 2.0;\n            double labely = labelLocationY(this.labelLocation, dataArea);\n            TextAnchor anchor = labelAnchorV(this.labelLocation);\n            AttrStringUtils.drawRotatedString(label, g2, (float) labelx,\n                    (float) labely, anchor, getLabelAngle() + Math.PI / 2.0, \n                    anchor);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth()\n                    + insets.getRight());\n        }\n        return state;\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/Axis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1441,"status":"M"}],"commitId":"22701c9ec4cd5bd88f8a7f17ae11c18099dd1ec7","commitMessage":"@@@Rename ParamChecks --> Args.","date":"2017-05-12 05:28:15","modifiedFileCount":"216","status":"M","submitter":"David Gilbert"}]
