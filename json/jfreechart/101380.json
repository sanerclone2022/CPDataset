[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState state,\n                     PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        drawChipGrid(g2, area);\n        drawWaferEdge(g2, area);\n\n    }\n","date":"2016-02-19 16:24:22","endLine":258,"groupId":"2282","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"draw","params":"(Graphics2Dg2@Rectangle2Darea@Point2Danchor@PlotStatestate@PlotRenderingInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/e1/595294e3928b9be8dba0508c0e1d16e5e80b0f.src","preCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState state,\n                     PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        drawChipGrid(g2, area);\n        drawWaferEdge(g2, area);\n\n    }\n","realPath":"src/main/java/org/jfree/chart/plot/WaferMapPlot.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n            PlotState parentState, PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        AxisSpace space = calculateAxisSpace(g2, area);\n        Rectangle2D dataArea = space.shrink(area, null);\n        this.axisOffset.trim(dataArea);\n\n        dataArea = integerise(dataArea);\n        if (dataArea.isEmpty()) {\n            return;\n        }\n        createAndAddEntity((Rectangle2D) dataArea.clone(), info, null, null);\n        if (info != null) {\n            info.setDataArea(dataArea);\n        }\n\n        \r\n        drawBackground(g2, dataArea);\n        Map axisStateMap = drawAxes(g2, area, dataArea, info);\n\n        PlotOrientation orient = getOrientation();\n\n        \r\n        \r\n        if (anchor != null && !dataArea.contains(anchor)) {\n            anchor = null;\n        }\n        CrosshairState crosshairState = new CrosshairState();\n        crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);\n        crosshairState.setAnchor(anchor);\n\n        crosshairState.setAnchorX(Double.NaN);\n        crosshairState.setAnchorY(Double.NaN);\n        if (anchor != null) {\n            ValueAxis domainAxis = getDomainAxis();\n            if (domainAxis != null) {\n                double x;\n                if (orient == PlotOrientation.VERTICAL) {\n                    x = domainAxis.java2DToValue(anchor.getX(), dataArea,\n                            getDomainAxisEdge());\n                }\n                else {\n                    x = domainAxis.java2DToValue(anchor.getY(), dataArea,\n                            getDomainAxisEdge());\n                }\n                crosshairState.setAnchorX(x);\n            }\n            ValueAxis rangeAxis = getRangeAxis();\n            if (rangeAxis != null) {\n                double y;\n                if (orient == PlotOrientation.VERTICAL) {\n                    y = rangeAxis.java2DToValue(anchor.getY(), dataArea,\n                            getRangeAxisEdge());\n                }\n                else {\n                    y = rangeAxis.java2DToValue(anchor.getX(), dataArea,\n                            getRangeAxisEdge());\n                }\n                crosshairState.setAnchorY(y);\n            }\n        }\n        crosshairState.setCrosshairX(getDomainCrosshairValue());\n        crosshairState.setCrosshairY(getRangeCrosshairValue());\n        Shape originalClip = g2.getClip();\n        Composite originalComposite = g2.getComposite();\n\n        g2.clip(dataArea);\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                getForegroundAlpha()));\n\n        AxisState domainAxisState = (AxisState) axisStateMap.get(\n                getDomainAxis());\n        if (domainAxisState == null) {\n            if (parentState != null) {\n                domainAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getDomainAxis());\n            }\n        }\n\n        AxisState rangeAxisState = (AxisState) axisStateMap.get(getRangeAxis());\n        if (rangeAxisState == null) {\n            if (parentState != null) {\n                rangeAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getRangeAxis());\n            }\n        }\n        if (domainAxisState != null) {\n            drawDomainTickBands(g2, dataArea, domainAxisState.getTicks());\n        }\n        if (rangeAxisState != null) {\n            drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks());\n        }\n        if (domainAxisState != null) {\n            drawDomainGridlines(g2, dataArea, domainAxisState.getTicks());\n            drawZeroDomainBaseline(g2, dataArea);\n        }\n        if (rangeAxisState != null) {\n            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());\n            drawZeroRangeBaseline(g2, dataArea);\n        }\n\n        Graphics2D savedG2 = g2;\n        BufferedImage dataImage = null;\n        boolean suppressShadow = Boolean.TRUE.equals(g2.getRenderingHint(\n                JFreeChart.KEY_SUPPRESS_SHADOW_GENERATION));\n        if (this.shadowGenerator != null && !suppressShadow) {\n            dataImage = new BufferedImage((int) dataArea.getWidth(),\n                    (int)dataArea.getHeight(), BufferedImage.TYPE_INT_ARGB);\n            g2 = dataImage.createGraphics();\n            g2.translate(-dataArea.getX(), -dataArea.getY());\n            g2.setRenderingHints(savedG2.getRenderingHints());\n        }\n\n        \r\n        for (XYDataset dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawDomainMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n        for (XYDataset dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawRangeMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n\n        \r\n        boolean foundData = false;\n        DatasetRenderingOrder order = getDatasetRenderingOrder();\n        List<Integer> rendererIndices = getRendererIndices(order);\n        List<Integer> datasetIndices = getDatasetIndices(order);\n            \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                            Layer.BACKGROUND, info);\n                }\n            }\n\n            \r\n        for (int datasetIndex : datasetIndices) {\n            XYDataset dataset = this.getDataset(datasetIndex);\n            foundData = render(g2, dataArea, datasetIndex, info, \n                    crosshairState) || foundData;\n            }\n\n            \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                            Layer.FOREGROUND, info);\n                }\n            }\n\n        \r\n        int datasetIndex = crosshairState.getDatasetIndex();\n        ValueAxis xAxis = this.getDomainAxisForDataset(datasetIndex);\n        RectangleEdge xAxisEdge = getDomainAxisEdge(getDomainAxisIndex(xAxis));\n        if (!this.domainCrosshairLockedOnData && anchor != null) {\n            double xx;\n            if (orient == PlotOrientation.VERTICAL) {\n                xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge);\n            }\n            else {\n                xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge);\n            }\n            crosshairState.setCrosshairX(xx);\n        }\n        setDomainCrosshairValue(crosshairState.getCrosshairX(), false);\n        if (isDomainCrosshairVisible()) {\n            double x = getDomainCrosshairValue();\n            Paint paint = getDomainCrosshairPaint();\n            Stroke stroke = getDomainCrosshairStroke();\n            drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint);\n        }\n\n        \r\n        ValueAxis yAxis = getRangeAxisForDataset(datasetIndex);\n        RectangleEdge yAxisEdge = getRangeAxisEdge(getRangeAxisIndex(yAxis));\n        if (!this.rangeCrosshairLockedOnData && anchor != null) {\n            double yy;\n            if (orient == PlotOrientation.VERTICAL) {\n                yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge);\n            } else {\n                yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge);\n            }\n            crosshairState.setCrosshairY(yy);\n        }\n        setRangeCrosshairValue(crosshairState.getCrosshairY(), false);\n        if (isRangeCrosshairVisible()) {\n            double y = getRangeCrosshairValue();\n            Paint paint = getRangeCrosshairPaint();\n            Stroke stroke = getRangeCrosshairStroke();\n            drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);\n        }\n\n        if (!foundData) {\n            drawNoDataMessage(g2, dataArea);\n        }\n\n        for (int i : rendererIndices) { \n            drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n        for (int i : rendererIndices) {\n            drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n\n        drawAnnotations(g2, dataArea, info);\n        if (this.shadowGenerator != null && !suppressShadow) {\n            BufferedImage shadowImage\n                    = this.shadowGenerator.createDropShadow(dataImage);\n            g2 = savedG2;\n            g2.drawImage(shadowImage, (int) dataArea.getX()\n                    + this.shadowGenerator.calculateOffsetX(),\n                    (int) dataArea.getY()\n                    + this.shadowGenerator.calculateOffsetY(), null);\n            g2.drawImage(dataImage, (int) dataArea.getX(),\n                    (int) dataArea.getY(), null);\n        }\n        g2.setClip(originalClip);\n        g2.setComposite(originalComposite);\n\n        drawOutline(g2, dataArea);\n\n    }\n","date":"2016-02-19 16:24:22","endLine":3356,"groupId":"417","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"draw","params":"(Graphics2Dg2@Rectangle2Darea@Point2Danchor@PlotStateparentState@PlotRenderingInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/14/7173f0ce47020b4b333c914a4add2ab5802f07.src","preCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n            PlotState parentState, PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        AxisSpace space = calculateAxisSpace(g2, area);\n        Rectangle2D dataArea = space.shrink(area, null);\n        this.axisOffset.trim(dataArea);\n\n        dataArea = integerise(dataArea);\n        if (dataArea.isEmpty()) {\n            return;\n        }\n        createAndAddEntity((Rectangle2D) dataArea.clone(), info, null, null);\n        if (info != null) {\n            info.setDataArea(dataArea);\n        }\n\n        \r\n        drawBackground(g2, dataArea);\n        Map axisStateMap = drawAxes(g2, area, dataArea, info);\n\n        PlotOrientation orient = getOrientation();\n\n        \r\n        \r\n        if (anchor != null && !dataArea.contains(anchor)) {\n            anchor = null;\n        }\n        CrosshairState crosshairState = new CrosshairState();\n        crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);\n        crosshairState.setAnchor(anchor);\n\n        crosshairState.setAnchorX(Double.NaN);\n        crosshairState.setAnchorY(Double.NaN);\n        if (anchor != null) {\n            ValueAxis domainAxis = getDomainAxis();\n            if (domainAxis != null) {\n                double x;\n                if (orient == PlotOrientation.VERTICAL) {\n                    x = domainAxis.java2DToValue(anchor.getX(), dataArea,\n                            getDomainAxisEdge());\n                }\n                else {\n                    x = domainAxis.java2DToValue(anchor.getY(), dataArea,\n                            getDomainAxisEdge());\n                }\n                crosshairState.setAnchorX(x);\n            }\n            ValueAxis rangeAxis = getRangeAxis();\n            if (rangeAxis != null) {\n                double y;\n                if (orient == PlotOrientation.VERTICAL) {\n                    y = rangeAxis.java2DToValue(anchor.getY(), dataArea,\n                            getRangeAxisEdge());\n                }\n                else {\n                    y = rangeAxis.java2DToValue(anchor.getX(), dataArea,\n                            getRangeAxisEdge());\n                }\n                crosshairState.setAnchorY(y);\n            }\n        }\n        crosshairState.setCrosshairX(getDomainCrosshairValue());\n        crosshairState.setCrosshairY(getRangeCrosshairValue());\n        Shape originalClip = g2.getClip();\n        Composite originalComposite = g2.getComposite();\n\n        g2.clip(dataArea);\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                getForegroundAlpha()));\n\n        AxisState domainAxisState = (AxisState) axisStateMap.get(\n                getDomainAxis());\n        if (domainAxisState == null) {\n            if (parentState != null) {\n                domainAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getDomainAxis());\n            }\n        }\n\n        AxisState rangeAxisState = (AxisState) axisStateMap.get(getRangeAxis());\n        if (rangeAxisState == null) {\n            if (parentState != null) {\n                rangeAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getRangeAxis());\n            }\n        }\n        if (domainAxisState != null) {\n            drawDomainTickBands(g2, dataArea, domainAxisState.getTicks());\n        }\n        if (rangeAxisState != null) {\n            drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks());\n        }\n        if (domainAxisState != null) {\n            drawDomainGridlines(g2, dataArea, domainAxisState.getTicks());\n            drawZeroDomainBaseline(g2, dataArea);\n        }\n        if (rangeAxisState != null) {\n            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());\n            drawZeroRangeBaseline(g2, dataArea);\n        }\n\n        Graphics2D savedG2 = g2;\n        BufferedImage dataImage = null;\n        boolean suppressShadow = Boolean.TRUE.equals(g2.getRenderingHint(\n                JFreeChart.KEY_SUPPRESS_SHADOW_GENERATION));\n        if (this.shadowGenerator != null && !suppressShadow) {\n            dataImage = new BufferedImage((int) dataArea.getWidth(),\n                    (int)dataArea.getHeight(), BufferedImage.TYPE_INT_ARGB);\n            g2 = dataImage.createGraphics();\n            g2.translate(-dataArea.getX(), -dataArea.getY());\n            g2.setRenderingHints(savedG2.getRenderingHints());\n        }\n\n        \r\n        for (XYDataset dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawDomainMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n        for (XYDataset dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawRangeMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n\n        \r\n        boolean foundData = false;\n        DatasetRenderingOrder order = getDatasetRenderingOrder();\n        List<Integer> rendererIndices = getRendererIndices(order);\n        List<Integer> datasetIndices = getDatasetIndices(order);\n            \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                            Layer.BACKGROUND, info);\n                }\n            }\n\n            \r\n        for (int datasetIndex : datasetIndices) {\n            XYDataset dataset = this.getDataset(datasetIndex);\n            foundData = render(g2, dataArea, datasetIndex, info, \n                    crosshairState) || foundData;\n            }\n\n            \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                            Layer.FOREGROUND, info);\n                }\n            }\n\n        \r\n        int datasetIndex = crosshairState.getDatasetIndex();\n        ValueAxis xAxis = this.getDomainAxisForDataset(datasetIndex);\n        RectangleEdge xAxisEdge = getDomainAxisEdge(getDomainAxisIndex(xAxis));\n        if (!this.domainCrosshairLockedOnData && anchor != null) {\n            double xx;\n            if (orient == PlotOrientation.VERTICAL) {\n                xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge);\n            }\n            else {\n                xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge);\n            }\n            crosshairState.setCrosshairX(xx);\n        }\n        setDomainCrosshairValue(crosshairState.getCrosshairX(), false);\n        if (isDomainCrosshairVisible()) {\n            double x = getDomainCrosshairValue();\n            Paint paint = getDomainCrosshairPaint();\n            Stroke stroke = getDomainCrosshairStroke();\n            drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint);\n        }\n\n        \r\n        ValueAxis yAxis = getRangeAxisForDataset(datasetIndex);\n        RectangleEdge yAxisEdge = getRangeAxisEdge(getRangeAxisIndex(yAxis));\n        if (!this.rangeCrosshairLockedOnData && anchor != null) {\n            double yy;\n            if (orient == PlotOrientation.VERTICAL) {\n                yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge);\n            } else {\n                yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge);\n            }\n            crosshairState.setCrosshairY(yy);\n        }\n        setRangeCrosshairValue(crosshairState.getCrosshairY(), false);\n        if (isRangeCrosshairVisible()) {\n            double y = getRangeCrosshairValue();\n            Paint paint = getRangeCrosshairPaint();\n            Stroke stroke = getRangeCrosshairStroke();\n            drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);\n        }\n\n        if (!foundData) {\n            drawNoDataMessage(g2, dataArea);\n        }\n\n        for (int i : rendererIndices) { \n            drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n        for (int i : rendererIndices) {\n            drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n\n        drawAnnotations(g2, dataArea, info);\n        if (this.shadowGenerator != null && !suppressShadow) {\n            BufferedImage shadowImage\n                    = this.shadowGenerator.createDropShadow(dataImage);\n            g2 = savedG2;\n            g2.drawImage(shadowImage, (int) dataArea.getX()\n                    + this.shadowGenerator.calculateOffsetX(),\n                    (int) dataArea.getY()\n                    + this.shadowGenerator.calculateOffsetY(), null);\n            g2.drawImage(dataImage, (int) dataArea.getX(),\n                    (int) dataArea.getY(), null);\n        }\n        g2.setClip(originalClip);\n        g2.setComposite(originalComposite);\n\n        drawOutline(g2, dataArea);\n\n    }\n","realPath":"src/main/java/org/jfree/chart/plot/XYPlot.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":3113,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2017-02-18 14:47:38","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":2,"curCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState state,\n                     PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        drawChipGrid(g2, area);\n        drawWaferEdge(g2, area);\n\n    }\n","date":"2016-02-19 16:24:22","endLine":258,"groupId":"2282","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"draw","params":"(Graphics2Dg2@Rectangle2Darea@Point2Danchor@PlotStatestate@PlotRenderingInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/e1/595294e3928b9be8dba0508c0e1d16e5e80b0f.src","preCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState state,\n                     PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        drawChipGrid(g2, area);\n        drawWaferEdge(g2, area);\n\n    }\n","realPath":"src/main/java/org/jfree/chart/plot/WaferMapPlot.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"},{"authorDate":"2017-02-18 14:47:38","commitOrder":2,"curCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n            PlotState parentState, PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        AxisSpace space = calculateAxisSpace(g2, area);\n        Rectangle2D dataArea = space.shrink(area, null);\n        this.axisOffset.trim(dataArea);\n\n        dataArea = integerise(dataArea);\n        if (dataArea.isEmpty()) {\n            return;\n        }\n        createAndAddEntity((Rectangle2D) dataArea.clone(), info, null, null);\n        if (info != null) {\n            info.setDataArea(dataArea);\n        }\n\n        \r\n        drawBackground(g2, dataArea);\n        Map axisStateMap = drawAxes(g2, area, dataArea, info);\n\n        PlotOrientation orient = getOrientation();\n\n        \r\n        \r\n        if (anchor != null && !dataArea.contains(anchor)) {\n            anchor = null;\n        }\n        CrosshairState crosshairState = new CrosshairState();\n        crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);\n        crosshairState.setAnchor(anchor);\n\n        crosshairState.setAnchorX(Double.NaN);\n        crosshairState.setAnchorY(Double.NaN);\n        if (anchor != null) {\n            ValueAxis domainAxis = getDomainAxis();\n            if (domainAxis != null) {\n                double x;\n                if (orient == PlotOrientation.VERTICAL) {\n                    x = domainAxis.java2DToValue(anchor.getX(), dataArea,\n                            getDomainAxisEdge());\n                }\n                else {\n                    x = domainAxis.java2DToValue(anchor.getY(), dataArea,\n                            getDomainAxisEdge());\n                }\n                crosshairState.setAnchorX(x);\n            }\n            ValueAxis rangeAxis = getRangeAxis();\n            if (rangeAxis != null) {\n                double y;\n                if (orient == PlotOrientation.VERTICAL) {\n                    y = rangeAxis.java2DToValue(anchor.getY(), dataArea,\n                            getRangeAxisEdge());\n                }\n                else {\n                    y = rangeAxis.java2DToValue(anchor.getX(), dataArea,\n                            getRangeAxisEdge());\n                }\n                crosshairState.setAnchorY(y);\n            }\n        }\n        crosshairState.setCrosshairX(getDomainCrosshairValue());\n        crosshairState.setCrosshairY(getRangeCrosshairValue());\n        Shape originalClip = g2.getClip();\n        Composite originalComposite = g2.getComposite();\n\n        g2.clip(dataArea);\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                getForegroundAlpha()));\n\n        AxisState domainAxisState = (AxisState) axisStateMap.get(\n                getDomainAxis());\n        if (domainAxisState == null) {\n            if (parentState != null) {\n                domainAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getDomainAxis());\n            }\n        }\n\n        AxisState rangeAxisState = (AxisState) axisStateMap.get(getRangeAxis());\n        if (rangeAxisState == null) {\n            if (parentState != null) {\n                rangeAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getRangeAxis());\n            }\n        }\n        if (domainAxisState != null) {\n            drawDomainTickBands(g2, dataArea, domainAxisState.getTicks());\n        }\n        if (rangeAxisState != null) {\n            drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks());\n        }\n        if (domainAxisState != null) {\n            drawDomainGridlines(g2, dataArea, domainAxisState.getTicks());\n            drawZeroDomainBaseline(g2, dataArea);\n        }\n        if (rangeAxisState != null) {\n            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());\n            drawZeroRangeBaseline(g2, dataArea);\n        }\n\n        Graphics2D savedG2 = g2;\n        BufferedImage dataImage = null;\n        boolean suppressShadow = Boolean.TRUE.equals(g2.getRenderingHint(\n                JFreeChart.KEY_SUPPRESS_SHADOW_GENERATION));\n        if (this.shadowGenerator != null && !suppressShadow) {\n            dataImage = new BufferedImage((int) dataArea.getWidth(),\n                    (int)dataArea.getHeight(), BufferedImage.TYPE_INT_ARGB);\n            g2 = dataImage.createGraphics();\n            g2.translate(-dataArea.getX(), -dataArea.getY());\n            g2.setRenderingHints(savedG2.getRenderingHints());\n        }\n\n        \r\n        for (XYDataset dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawDomainMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n        for (XYDataset dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawRangeMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n\n        \r\n        boolean foundData = false;\n        DatasetRenderingOrder order = getDatasetRenderingOrder();\n        List<Integer> rendererIndices = getRendererIndices(order);\n        List<Integer> datasetIndices = getDatasetIndices(order);\n\n        \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                ValueAxis domainAxis = getDomainAxisForDataset(i);\n                ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                        Layer.BACKGROUND, info);\n            }\n        }\n\n        \r\n        for (int datasetIndex : datasetIndices) {\n            XYDataset dataset = this.getDataset(datasetIndex);\n            foundData = render(g2, dataArea, datasetIndex, info, \n                    crosshairState) || foundData;\n        }\n\n        \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                            Layer.FOREGROUND, info);\n            }\n        }\n\n        \r\n        int datasetIndex = crosshairState.getDatasetIndex();\n        ValueAxis xAxis = getDomainAxisForDataset(datasetIndex);\n        RectangleEdge xAxisEdge = getDomainAxisEdge(getDomainAxisIndex(xAxis));\n        if (!this.domainCrosshairLockedOnData && anchor != null) {\n            double xx;\n            if (orient == PlotOrientation.VERTICAL) {\n                xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge);\n            }\n            else {\n                xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge);\n            }\n            crosshairState.setCrosshairX(xx);\n        }\n        setDomainCrosshairValue(crosshairState.getCrosshairX(), false);\n        if (isDomainCrosshairVisible()) {\n            double x = getDomainCrosshairValue();\n            Paint paint = getDomainCrosshairPaint();\n            Stroke stroke = getDomainCrosshairStroke();\n            drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint);\n        }\n\n        \r\n        ValueAxis yAxis = getRangeAxisForDataset(datasetIndex);\n        RectangleEdge yAxisEdge = getRangeAxisEdge(getRangeAxisIndex(yAxis));\n        if (!this.rangeCrosshairLockedOnData && anchor != null) {\n            double yy;\n            if (orient == PlotOrientation.VERTICAL) {\n                yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge);\n            } else {\n                yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge);\n            }\n            crosshairState.setCrosshairY(yy);\n        }\n        setRangeCrosshairValue(crosshairState.getCrosshairY(), false);\n        if (isRangeCrosshairVisible()) {\n            double y = getRangeCrosshairValue();\n            Paint paint = getRangeCrosshairPaint();\n            Stroke stroke = getRangeCrosshairStroke();\n            drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);\n        }\n\n        if (!foundData) {\n            drawNoDataMessage(g2, dataArea);\n        }\n\n        for (int i : rendererIndices) { \n            drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n        for (int i : rendererIndices) {\n            drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n\n        drawAnnotations(g2, dataArea, info);\n        if (this.shadowGenerator != null && !suppressShadow) {\n            BufferedImage shadowImage\n                    = this.shadowGenerator.createDropShadow(dataImage);\n            g2 = savedG2;\n            g2.drawImage(shadowImage, (int) dataArea.getX()\n                    + this.shadowGenerator.calculateOffsetX(),\n                    (int) dataArea.getY()\n                    + this.shadowGenerator.calculateOffsetY(), null);\n            g2.drawImage(dataImage, (int) dataArea.getX(),\n                    (int) dataArea.getY(), null);\n        }\n        g2.setClip(originalClip);\n        g2.setComposite(originalComposite);\n\n        drawOutline(g2, dataArea);\n\n    }\n","date":"2017-02-18 14:47:38","endLine":3357,"groupId":"756","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"draw","params":"(Graphics2Dg2@Rectangle2Darea@Point2Danchor@PlotStateparentState@PlotRenderingInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/68/6499fdce896a0e420b79e3affcbecbb3e787c4.src","preCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n            PlotState parentState, PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        AxisSpace space = calculateAxisSpace(g2, area);\n        Rectangle2D dataArea = space.shrink(area, null);\n        this.axisOffset.trim(dataArea);\n\n        dataArea = integerise(dataArea);\n        if (dataArea.isEmpty()) {\n            return;\n        }\n        createAndAddEntity((Rectangle2D) dataArea.clone(), info, null, null);\n        if (info != null) {\n            info.setDataArea(dataArea);\n        }\n\n        \r\n        drawBackground(g2, dataArea);\n        Map axisStateMap = drawAxes(g2, area, dataArea, info);\n\n        PlotOrientation orient = getOrientation();\n\n        \r\n        \r\n        if (anchor != null && !dataArea.contains(anchor)) {\n            anchor = null;\n        }\n        CrosshairState crosshairState = new CrosshairState();\n        crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);\n        crosshairState.setAnchor(anchor);\n\n        crosshairState.setAnchorX(Double.NaN);\n        crosshairState.setAnchorY(Double.NaN);\n        if (anchor != null) {\n            ValueAxis domainAxis = getDomainAxis();\n            if (domainAxis != null) {\n                double x;\n                if (orient == PlotOrientation.VERTICAL) {\n                    x = domainAxis.java2DToValue(anchor.getX(), dataArea,\n                            getDomainAxisEdge());\n                }\n                else {\n                    x = domainAxis.java2DToValue(anchor.getY(), dataArea,\n                            getDomainAxisEdge());\n                }\n                crosshairState.setAnchorX(x);\n            }\n            ValueAxis rangeAxis = getRangeAxis();\n            if (rangeAxis != null) {\n                double y;\n                if (orient == PlotOrientation.VERTICAL) {\n                    y = rangeAxis.java2DToValue(anchor.getY(), dataArea,\n                            getRangeAxisEdge());\n                }\n                else {\n                    y = rangeAxis.java2DToValue(anchor.getX(), dataArea,\n                            getRangeAxisEdge());\n                }\n                crosshairState.setAnchorY(y);\n            }\n        }\n        crosshairState.setCrosshairX(getDomainCrosshairValue());\n        crosshairState.setCrosshairY(getRangeCrosshairValue());\n        Shape originalClip = g2.getClip();\n        Composite originalComposite = g2.getComposite();\n\n        g2.clip(dataArea);\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                getForegroundAlpha()));\n\n        AxisState domainAxisState = (AxisState) axisStateMap.get(\n                getDomainAxis());\n        if (domainAxisState == null) {\n            if (parentState != null) {\n                domainAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getDomainAxis());\n            }\n        }\n\n        AxisState rangeAxisState = (AxisState) axisStateMap.get(getRangeAxis());\n        if (rangeAxisState == null) {\n            if (parentState != null) {\n                rangeAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getRangeAxis());\n            }\n        }\n        if (domainAxisState != null) {\n            drawDomainTickBands(g2, dataArea, domainAxisState.getTicks());\n        }\n        if (rangeAxisState != null) {\n            drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks());\n        }\n        if (domainAxisState != null) {\n            drawDomainGridlines(g2, dataArea, domainAxisState.getTicks());\n            drawZeroDomainBaseline(g2, dataArea);\n        }\n        if (rangeAxisState != null) {\n            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());\n            drawZeroRangeBaseline(g2, dataArea);\n        }\n\n        Graphics2D savedG2 = g2;\n        BufferedImage dataImage = null;\n        boolean suppressShadow = Boolean.TRUE.equals(g2.getRenderingHint(\n                JFreeChart.KEY_SUPPRESS_SHADOW_GENERATION));\n        if (this.shadowGenerator != null && !suppressShadow) {\n            dataImage = new BufferedImage((int) dataArea.getWidth(),\n                    (int)dataArea.getHeight(), BufferedImage.TYPE_INT_ARGB);\n            g2 = dataImage.createGraphics();\n            g2.translate(-dataArea.getX(), -dataArea.getY());\n            g2.setRenderingHints(savedG2.getRenderingHints());\n        }\n\n        \r\n        for (XYDataset dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawDomainMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n        for (XYDataset dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawRangeMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n\n        \r\n        boolean foundData = false;\n        DatasetRenderingOrder order = getDatasetRenderingOrder();\n        List<Integer> rendererIndices = getRendererIndices(order);\n        List<Integer> datasetIndices = getDatasetIndices(order);\n            \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                            Layer.BACKGROUND, info);\n                }\n            }\n\n            \r\n        for (int datasetIndex : datasetIndices) {\n            XYDataset dataset = this.getDataset(datasetIndex);\n            foundData = render(g2, dataArea, datasetIndex, info, \n                    crosshairState) || foundData;\n            }\n\n            \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                            Layer.FOREGROUND, info);\n                }\n            }\n\n        \r\n        int datasetIndex = crosshairState.getDatasetIndex();\n        ValueAxis xAxis = this.getDomainAxisForDataset(datasetIndex);\n        RectangleEdge xAxisEdge = getDomainAxisEdge(getDomainAxisIndex(xAxis));\n        if (!this.domainCrosshairLockedOnData && anchor != null) {\n            double xx;\n            if (orient == PlotOrientation.VERTICAL) {\n                xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge);\n            }\n            else {\n                xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge);\n            }\n            crosshairState.setCrosshairX(xx);\n        }\n        setDomainCrosshairValue(crosshairState.getCrosshairX(), false);\n        if (isDomainCrosshairVisible()) {\n            double x = getDomainCrosshairValue();\n            Paint paint = getDomainCrosshairPaint();\n            Stroke stroke = getDomainCrosshairStroke();\n            drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint);\n        }\n\n        \r\n        ValueAxis yAxis = getRangeAxisForDataset(datasetIndex);\n        RectangleEdge yAxisEdge = getRangeAxisEdge(getRangeAxisIndex(yAxis));\n        if (!this.rangeCrosshairLockedOnData && anchor != null) {\n            double yy;\n            if (orient == PlotOrientation.VERTICAL) {\n                yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge);\n            } else {\n                yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge);\n            }\n            crosshairState.setCrosshairY(yy);\n        }\n        setRangeCrosshairValue(crosshairState.getCrosshairY(), false);\n        if (isRangeCrosshairVisible()) {\n            double y = getRangeCrosshairValue();\n            Paint paint = getRangeCrosshairPaint();\n            Stroke stroke = getRangeCrosshairStroke();\n            drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);\n        }\n\n        if (!foundData) {\n            drawNoDataMessage(g2, dataArea);\n        }\n\n        for (int i : rendererIndices) { \n            drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n        for (int i : rendererIndices) {\n            drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n\n        drawAnnotations(g2, dataArea, info);\n        if (this.shadowGenerator != null && !suppressShadow) {\n            BufferedImage shadowImage\n                    = this.shadowGenerator.createDropShadow(dataImage);\n            g2 = savedG2;\n            g2.drawImage(shadowImage, (int) dataArea.getX()\n                    + this.shadowGenerator.calculateOffsetX(),\n                    (int) dataArea.getY()\n                    + this.shadowGenerator.calculateOffsetY(), null);\n            g2.drawImage(dataImage, (int) dataArea.getX(),\n                    (int) dataArea.getY(), null);\n        }\n        g2.setClip(originalClip);\n        g2.setComposite(originalComposite);\n\n        drawOutline(g2, dataArea);\n\n    }\n","realPath":"src/main/java/org/jfree/chart/plot/XYPlot.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":3113,"status":"M"}],"commitId":"34fae0b32e0c11cac42d1468a059885cad4c1a49","commitMessage":"@@@Minor source edit","date":"2017-02-18 14:47:38","modifiedFileCount":"1","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-01-09 05:47:42","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":3,"curCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState state,\n                     PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        drawChipGrid(g2, area);\n        drawWaferEdge(g2, area);\n\n    }\n","date":"2016-02-19 16:24:22","endLine":258,"groupId":"2282","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"draw","params":"(Graphics2Dg2@Rectangle2Darea@Point2Danchor@PlotStatestate@PlotRenderingInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/e1/595294e3928b9be8dba0508c0e1d16e5e80b0f.src","preCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState state,\n                     PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        drawChipGrid(g2, area);\n        drawWaferEdge(g2, area);\n\n    }\n","realPath":"src/main/java/org/jfree/chart/plot/WaferMapPlot.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"},{"authorDate":"2020-01-09 05:47:42","commitOrder":3,"curCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n            PlotState parentState, PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        AxisSpace space = calculateAxisSpace(g2, area);\n        Rectangle2D dataArea = space.shrink(area, null);\n        this.axisOffset.trim(dataArea);\n\n        dataArea = integerise(dataArea);\n        if (dataArea.isEmpty()) {\n            return;\n        }\n        createAndAddEntity((Rectangle2D) dataArea.clone(), info, null, null);\n        if (info != null) {\n            info.setDataArea(dataArea);\n        }\n\n        \r\n        drawBackground(g2, dataArea);\n        Map<Axis, AxisState> axisStateMap = drawAxes(g2, area, dataArea, info);\n\n        PlotOrientation orient = getOrientation();\n\n        \r\n        \r\n        if (anchor != null && !dataArea.contains(anchor)) {\n            anchor = null;\n        }\n        CrosshairState crosshairState = new CrosshairState();\n        crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);\n        crosshairState.setAnchor(anchor);\n\n        crosshairState.setAnchorX(Double.NaN);\n        crosshairState.setAnchorY(Double.NaN);\n        if (anchor != null) {\n            ValueAxis domainAxis = getDomainAxis();\n            if (domainAxis != null) {\n                double x;\n                if (orient == PlotOrientation.VERTICAL) {\n                    x = domainAxis.java2DToValue(anchor.getX(), dataArea,\n                            getDomainAxisEdge());\n                }\n                else {\n                    x = domainAxis.java2DToValue(anchor.getY(), dataArea,\n                            getDomainAxisEdge());\n                }\n                crosshairState.setAnchorX(x);\n            }\n            ValueAxis rangeAxis = getRangeAxis();\n            if (rangeAxis != null) {\n                double y;\n                if (orient == PlotOrientation.VERTICAL) {\n                    y = rangeAxis.java2DToValue(anchor.getY(), dataArea,\n                            getRangeAxisEdge());\n                }\n                else {\n                    y = rangeAxis.java2DToValue(anchor.getX(), dataArea,\n                            getRangeAxisEdge());\n                }\n                crosshairState.setAnchorY(y);\n            }\n        }\n        crosshairState.setCrosshairX(getDomainCrosshairValue());\n        crosshairState.setCrosshairY(getRangeCrosshairValue());\n        Shape originalClip = g2.getClip();\n        Composite originalComposite = g2.getComposite();\n\n        g2.clip(dataArea);\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                getForegroundAlpha()));\n\n        AxisState domainAxisState = axisStateMap.get(getDomainAxis());\n        if (domainAxisState == null) {\n            if (parentState != null) {\n                domainAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getDomainAxis());\n            }\n        }\n\n        AxisState rangeAxisState = axisStateMap.get(getRangeAxis());\n        if (rangeAxisState == null) {\n            if (parentState != null) {\n                rangeAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getRangeAxis());\n            }\n        }\n        if (domainAxisState != null) {\n            drawDomainTickBands(g2, dataArea, domainAxisState.getTicks());\n        }\n        if (rangeAxisState != null) {\n            drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks());\n        }\n        if (domainAxisState != null) {\n            drawDomainGridlines(g2, dataArea, domainAxisState.getTicks());\n            drawZeroDomainBaseline(g2, dataArea);\n        }\n        if (rangeAxisState != null) {\n            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());\n            drawZeroRangeBaseline(g2, dataArea);\n        }\n\n        Graphics2D savedG2 = g2;\n        BufferedImage dataImage = null;\n        boolean suppressShadow = Boolean.TRUE.equals(g2.getRenderingHint(\n                JFreeChart.KEY_SUPPRESS_SHADOW_GENERATION));\n        if (this.shadowGenerator != null && !suppressShadow) {\n            dataImage = new BufferedImage((int) dataArea.getWidth(),\n                    (int)dataArea.getHeight(), BufferedImage.TYPE_INT_ARGB);\n            g2 = dataImage.createGraphics();\n            g2.translate(-dataArea.getX(), -dataArea.getY());\n            g2.setRenderingHints(savedG2.getRenderingHints());\n        }\n\n        \r\n        for (XYDataset dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawDomainMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n        for (XYDataset dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawRangeMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n\n        \r\n        boolean foundData = false;\n        DatasetRenderingOrder order = getDatasetRenderingOrder();\n        List<Integer> rendererIndices = getRendererIndices(order);\n        List<Integer> datasetIndices = getDatasetIndices(order);\n\n        \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                ValueAxis domainAxis = getDomainAxisForDataset(i);\n                ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                        Layer.BACKGROUND, info);\n            }\n        }\n\n        \r\n        for (int datasetIndex : datasetIndices) {\n            XYDataset dataset = this.getDataset(datasetIndex);\n            foundData = render(g2, dataArea, datasetIndex, info, \n                    crosshairState) || foundData;\n        }\n\n        \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                            Layer.FOREGROUND, info);\n            }\n        }\n\n        \r\n        int datasetIndex = crosshairState.getDatasetIndex();\n        ValueAxis xAxis = getDomainAxisForDataset(datasetIndex);\n        RectangleEdge xAxisEdge = getDomainAxisEdge(getDomainAxisIndex(xAxis));\n        if (!this.domainCrosshairLockedOnData && anchor != null) {\n            double xx;\n            if (orient == PlotOrientation.VERTICAL) {\n                xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge);\n            }\n            else {\n                xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge);\n            }\n            crosshairState.setCrosshairX(xx);\n        }\n        setDomainCrosshairValue(crosshairState.getCrosshairX(), false);\n        if (isDomainCrosshairVisible()) {\n            double x = getDomainCrosshairValue();\n            Paint paint = getDomainCrosshairPaint();\n            Stroke stroke = getDomainCrosshairStroke();\n            drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint);\n        }\n\n        \r\n        ValueAxis yAxis = getRangeAxisForDataset(datasetIndex);\n        RectangleEdge yAxisEdge = getRangeAxisEdge(getRangeAxisIndex(yAxis));\n        if (!this.rangeCrosshairLockedOnData && anchor != null) {\n            double yy;\n            if (orient == PlotOrientation.VERTICAL) {\n                yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge);\n            } else {\n                yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge);\n            }\n            crosshairState.setCrosshairY(yy);\n        }\n        setRangeCrosshairValue(crosshairState.getCrosshairY(), false);\n        if (isRangeCrosshairVisible()) {\n            double y = getRangeCrosshairValue();\n            Paint paint = getRangeCrosshairPaint();\n            Stroke stroke = getRangeCrosshairStroke();\n            drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);\n        }\n\n        if (!foundData) {\n            drawNoDataMessage(g2, dataArea);\n        }\n\n        for (int i : rendererIndices) { \n            drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n        for (int i : rendererIndices) {\n            drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n\n        drawAnnotations(g2, dataArea, info);\n        if (this.shadowGenerator != null && !suppressShadow) {\n            BufferedImage shadowImage\n                    = this.shadowGenerator.createDropShadow(dataImage);\n            g2 = savedG2;\n            g2.drawImage(shadowImage, (int) dataArea.getX()\n                    + this.shadowGenerator.calculateOffsetX(),\n                    (int) dataArea.getY()\n                    + this.shadowGenerator.calculateOffsetY(), null);\n            g2.drawImage(dataImage, (int) dataArea.getX(),\n                    (int) dataArea.getY(), null);\n        }\n        g2.setClip(originalClip);\n        g2.setComposite(originalComposite);\n\n        drawOutline(g2, dataArea);\n\n    }\n","date":"2020-01-09 05:47:42","endLine":3136,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"draw","params":"(Graphics2Dg2@Rectangle2Darea@Point2Danchor@PlotStateparentState@PlotRenderingInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/26/43b783724d2f8b5edfe6ba033c11a7733319d0.src","preCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n            PlotState parentState, PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        AxisSpace space = calculateAxisSpace(g2, area);\n        Rectangle2D dataArea = space.shrink(area, null);\n        this.axisOffset.trim(dataArea);\n\n        dataArea = integerise(dataArea);\n        if (dataArea.isEmpty()) {\n            return;\n        }\n        createAndAddEntity((Rectangle2D) dataArea.clone(), info, null, null);\n        if (info != null) {\n            info.setDataArea(dataArea);\n        }\n\n        \r\n        drawBackground(g2, dataArea);\n        Map axisStateMap = drawAxes(g2, area, dataArea, info);\n\n        PlotOrientation orient = getOrientation();\n\n        \r\n        \r\n        if (anchor != null && !dataArea.contains(anchor)) {\n            anchor = null;\n        }\n        CrosshairState crosshairState = new CrosshairState();\n        crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);\n        crosshairState.setAnchor(anchor);\n\n        crosshairState.setAnchorX(Double.NaN);\n        crosshairState.setAnchorY(Double.NaN);\n        if (anchor != null) {\n            ValueAxis domainAxis = getDomainAxis();\n            if (domainAxis != null) {\n                double x;\n                if (orient == PlotOrientation.VERTICAL) {\n                    x = domainAxis.java2DToValue(anchor.getX(), dataArea,\n                            getDomainAxisEdge());\n                }\n                else {\n                    x = domainAxis.java2DToValue(anchor.getY(), dataArea,\n                            getDomainAxisEdge());\n                }\n                crosshairState.setAnchorX(x);\n            }\n            ValueAxis rangeAxis = getRangeAxis();\n            if (rangeAxis != null) {\n                double y;\n                if (orient == PlotOrientation.VERTICAL) {\n                    y = rangeAxis.java2DToValue(anchor.getY(), dataArea,\n                            getRangeAxisEdge());\n                }\n                else {\n                    y = rangeAxis.java2DToValue(anchor.getX(), dataArea,\n                            getRangeAxisEdge());\n                }\n                crosshairState.setAnchorY(y);\n            }\n        }\n        crosshairState.setCrosshairX(getDomainCrosshairValue());\n        crosshairState.setCrosshairY(getRangeCrosshairValue());\n        Shape originalClip = g2.getClip();\n        Composite originalComposite = g2.getComposite();\n\n        g2.clip(dataArea);\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                getForegroundAlpha()));\n\n        AxisState domainAxisState = (AxisState) axisStateMap.get(\n                getDomainAxis());\n        if (domainAxisState == null) {\n            if (parentState != null) {\n                domainAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getDomainAxis());\n            }\n        }\n\n        AxisState rangeAxisState = (AxisState) axisStateMap.get(getRangeAxis());\n        if (rangeAxisState == null) {\n            if (parentState != null) {\n                rangeAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getRangeAxis());\n            }\n        }\n        if (domainAxisState != null) {\n            drawDomainTickBands(g2, dataArea, domainAxisState.getTicks());\n        }\n        if (rangeAxisState != null) {\n            drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks());\n        }\n        if (domainAxisState != null) {\n            drawDomainGridlines(g2, dataArea, domainAxisState.getTicks());\n            drawZeroDomainBaseline(g2, dataArea);\n        }\n        if (rangeAxisState != null) {\n            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());\n            drawZeroRangeBaseline(g2, dataArea);\n        }\n\n        Graphics2D savedG2 = g2;\n        BufferedImage dataImage = null;\n        boolean suppressShadow = Boolean.TRUE.equals(g2.getRenderingHint(\n                JFreeChart.KEY_SUPPRESS_SHADOW_GENERATION));\n        if (this.shadowGenerator != null && !suppressShadow) {\n            dataImage = new BufferedImage((int) dataArea.getWidth(),\n                    (int)dataArea.getHeight(), BufferedImage.TYPE_INT_ARGB);\n            g2 = dataImage.createGraphics();\n            g2.translate(-dataArea.getX(), -dataArea.getY());\n            g2.setRenderingHints(savedG2.getRenderingHints());\n        }\n\n        \r\n        for (XYDataset dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawDomainMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n        for (XYDataset dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawRangeMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n\n        \r\n        boolean foundData = false;\n        DatasetRenderingOrder order = getDatasetRenderingOrder();\n        List<Integer> rendererIndices = getRendererIndices(order);\n        List<Integer> datasetIndices = getDatasetIndices(order);\n\n        \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                ValueAxis domainAxis = getDomainAxisForDataset(i);\n                ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                        Layer.BACKGROUND, info);\n            }\n        }\n\n        \r\n        for (int datasetIndex : datasetIndices) {\n            XYDataset dataset = this.getDataset(datasetIndex);\n            foundData = render(g2, dataArea, datasetIndex, info, \n                    crosshairState) || foundData;\n        }\n\n        \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                            Layer.FOREGROUND, info);\n            }\n        }\n\n        \r\n        int datasetIndex = crosshairState.getDatasetIndex();\n        ValueAxis xAxis = getDomainAxisForDataset(datasetIndex);\n        RectangleEdge xAxisEdge = getDomainAxisEdge(getDomainAxisIndex(xAxis));\n        if (!this.domainCrosshairLockedOnData && anchor != null) {\n            double xx;\n            if (orient == PlotOrientation.VERTICAL) {\n                xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge);\n            }\n            else {\n                xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge);\n            }\n            crosshairState.setCrosshairX(xx);\n        }\n        setDomainCrosshairValue(crosshairState.getCrosshairX(), false);\n        if (isDomainCrosshairVisible()) {\n            double x = getDomainCrosshairValue();\n            Paint paint = getDomainCrosshairPaint();\n            Stroke stroke = getDomainCrosshairStroke();\n            drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint);\n        }\n\n        \r\n        ValueAxis yAxis = getRangeAxisForDataset(datasetIndex);\n        RectangleEdge yAxisEdge = getRangeAxisEdge(getRangeAxisIndex(yAxis));\n        if (!this.rangeCrosshairLockedOnData && anchor != null) {\n            double yy;\n            if (orient == PlotOrientation.VERTICAL) {\n                yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge);\n            } else {\n                yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge);\n            }\n            crosshairState.setCrosshairY(yy);\n        }\n        setRangeCrosshairValue(crosshairState.getCrosshairY(), false);\n        if (isRangeCrosshairVisible()) {\n            double y = getRangeCrosshairValue();\n            Paint paint = getRangeCrosshairPaint();\n            Stroke stroke = getRangeCrosshairStroke();\n            drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);\n        }\n\n        if (!foundData) {\n            drawNoDataMessage(g2, dataArea);\n        }\n\n        for (int i : rendererIndices) { \n            drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n        for (int i : rendererIndices) {\n            drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n\n        drawAnnotations(g2, dataArea, info);\n        if (this.shadowGenerator != null && !suppressShadow) {\n            BufferedImage shadowImage\n                    = this.shadowGenerator.createDropShadow(dataImage);\n            g2 = savedG2;\n            g2.drawImage(shadowImage, (int) dataArea.getX()\n                    + this.shadowGenerator.calculateOffsetX(),\n                    (int) dataArea.getY()\n                    + this.shadowGenerator.calculateOffsetY(), null);\n            g2.drawImage(dataImage, (int) dataArea.getX(),\n                    (int) dataArea.getY(), null);\n        }\n        g2.setClip(originalClip);\n        g2.setComposite(originalComposite);\n\n        drawOutline(g2, dataArea);\n\n    }\n","realPath":"src/main/java/org/jfree/chart/plot/XYPlot.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2893,"status":"M"}],"commitId":"3b75f318b1df03ef72738ae8c2e35fc779720691","commitMessage":"@@@Fix compiler warnings.\n","date":"2020-01-09 05:47:42","modifiedFileCount":"9","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-29 19:31:49","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":4,"curCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState state,\n                     PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        drawChipGrid(g2, area);\n        drawWaferEdge(g2, area);\n\n    }\n","date":"2016-02-19 16:24:22","endLine":258,"groupId":"101380","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"draw","params":"(Graphics2Dg2@Rectangle2Darea@Point2Danchor@PlotStatestate@PlotRenderingInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/e1/595294e3928b9be8dba0508c0e1d16e5e80b0f.src","preCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n                     PlotState state,\n                     PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        drawChipGrid(g2, area);\n        drawWaferEdge(g2, area);\n\n    }\n","realPath":"src/main/java/org/jfree/chart/plot/WaferMapPlot.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"},{"authorDate":"2020-03-29 19:31:49","commitOrder":4,"curCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n            PlotState parentState, PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        AxisSpace space = calculateAxisSpace(g2, area);\n        Rectangle2D dataArea = space.shrink(area, null);\n        this.axisOffset.trim(dataArea);\n\n        dataArea = integerise(dataArea);\n        if (dataArea.isEmpty()) {\n            return;\n        }\n        createAndAddEntity((Rectangle2D) dataArea.clone(), info, null, null);\n        if (info != null) {\n            info.setDataArea(dataArea);\n        }\n\n        \r\n        drawBackground(g2, dataArea);\n        Map<Axis, AxisState> axisStateMap = drawAxes(g2, area, dataArea, info);\n\n        PlotOrientation orient = getOrientation();\n\n        \r\n        \r\n        if (anchor != null && !dataArea.contains(anchor)) {\n            anchor = null;\n        }\n        CrosshairState crosshairState = new CrosshairState();\n        crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);\n        crosshairState.setAnchor(anchor);\n\n        crosshairState.setAnchorX(Double.NaN);\n        crosshairState.setAnchorY(Double.NaN);\n        if (anchor != null) {\n            ValueAxis domainAxis = getDomainAxis();\n            if (domainAxis != null) {\n                double x;\n                if (orient == PlotOrientation.VERTICAL) {\n                    x = domainAxis.java2DToValue(anchor.getX(), dataArea,\n                            getDomainAxisEdge());\n                }\n                else {\n                    x = domainAxis.java2DToValue(anchor.getY(), dataArea,\n                            getDomainAxisEdge());\n                }\n                crosshairState.setAnchorX(x);\n            }\n            ValueAxis rangeAxis = getRangeAxis();\n            if (rangeAxis != null) {\n                double y;\n                if (orient == PlotOrientation.VERTICAL) {\n                    y = rangeAxis.java2DToValue(anchor.getY(), dataArea,\n                            getRangeAxisEdge());\n                }\n                else {\n                    y = rangeAxis.java2DToValue(anchor.getX(), dataArea,\n                            getRangeAxisEdge());\n                }\n                crosshairState.setAnchorY(y);\n            }\n        }\n        crosshairState.setCrosshairX(getDomainCrosshairValue());\n        crosshairState.setCrosshairY(getRangeCrosshairValue());\n        Shape originalClip = g2.getClip();\n        Composite originalComposite = g2.getComposite();\n\n        g2.clip(dataArea);\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                getForegroundAlpha()));\n\n        AxisState domainAxisState = axisStateMap.get(getDomainAxis());\n        if (domainAxisState == null) {\n            if (parentState != null) {\n                domainAxisState = parentState.getSharedAxisStates()\n                        .get(getDomainAxis());\n            }\n        }\n\n        AxisState rangeAxisState = axisStateMap.get(getRangeAxis());\n        if (rangeAxisState == null) {\n            if (parentState != null) {\n                rangeAxisState = parentState.getSharedAxisStates()\n                        .get(getRangeAxis());\n            }\n        }\n        if (domainAxisState != null) {\n            drawDomainTickBands(g2, dataArea, domainAxisState.getTicks());\n        }\n        if (rangeAxisState != null) {\n            drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks());\n        }\n        if (domainAxisState != null) {\n            drawDomainGridlines(g2, dataArea, domainAxisState.getTicks());\n            drawZeroDomainBaseline(g2, dataArea);\n        }\n        if (rangeAxisState != null) {\n            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());\n            drawZeroRangeBaseline(g2, dataArea);\n        }\n\n        Graphics2D savedG2 = g2;\n        BufferedImage dataImage = null;\n        boolean suppressShadow = Boolean.TRUE.equals(g2.getRenderingHint(\n                JFreeChart.KEY_SUPPRESS_SHADOW_GENERATION));\n        if (this.shadowGenerator != null && !suppressShadow) {\n            dataImage = new BufferedImage((int) dataArea.getWidth(),\n                    (int)dataArea.getHeight(), BufferedImage.TYPE_INT_ARGB);\n            g2 = dataImage.createGraphics();\n            g2.translate(-dataArea.getX(), -dataArea.getY());\n            g2.setRenderingHints(savedG2.getRenderingHints());\n        }\n\n        \r\n        for (XYDataset<S> dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawDomainMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n        for (XYDataset<S> dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawRangeMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n\n        \r\n        boolean foundData = false;\n        DatasetRenderingOrder order = getDatasetRenderingOrder();\n        List<Integer> rendererIndices = getRendererIndices(order);\n        List<Integer> datasetIndices = getDatasetIndices(order);\n\n        \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                ValueAxis domainAxis = getDomainAxisForDataset(i);\n                ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                        Layer.BACKGROUND, info);\n            }\n        }\n\n        \r\n        for (int datasetIndex : datasetIndices) {\n            foundData = render(g2, dataArea, datasetIndex, info, \n                    crosshairState) || foundData;\n        }\n\n        \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                            Layer.FOREGROUND, info);\n            }\n        }\n\n        \r\n        int datasetIndex = crosshairState.getDatasetIndex();\n        ValueAxis xAxis = getDomainAxisForDataset(datasetIndex);\n        RectangleEdge xAxisEdge = getDomainAxisEdge(getDomainAxisIndex(xAxis));\n        if (!this.domainCrosshairLockedOnData && anchor != null) {\n            double xx;\n            if (orient == PlotOrientation.VERTICAL) {\n                xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge);\n            }\n            else {\n                xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge);\n            }\n            crosshairState.setCrosshairX(xx);\n        }\n        setDomainCrosshairValue(crosshairState.getCrosshairX(), false);\n        if (isDomainCrosshairVisible()) {\n            double x = getDomainCrosshairValue();\n            Paint paint = getDomainCrosshairPaint();\n            Stroke stroke = getDomainCrosshairStroke();\n            drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint);\n        }\n\n        \r\n        ValueAxis yAxis = getRangeAxisForDataset(datasetIndex);\n        RectangleEdge yAxisEdge = getRangeAxisEdge(getRangeAxisIndex(yAxis));\n        if (!this.rangeCrosshairLockedOnData && anchor != null) {\n            double yy;\n            if (orient == PlotOrientation.VERTICAL) {\n                yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge);\n            } else {\n                yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge);\n            }\n            crosshairState.setCrosshairY(yy);\n        }\n        setRangeCrosshairValue(crosshairState.getCrosshairY(), false);\n        if (isRangeCrosshairVisible()) {\n            double y = getRangeCrosshairValue();\n            Paint paint = getRangeCrosshairPaint();\n            Stroke stroke = getRangeCrosshairStroke();\n            drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);\n        }\n\n        if (!foundData) {\n            drawNoDataMessage(g2, dataArea);\n        }\n\n        for (int i : rendererIndices) { \n            drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n        for (int i : rendererIndices) {\n            drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n\n        drawAnnotations(g2, dataArea, info);\n        if (this.shadowGenerator != null && !suppressShadow) {\n            BufferedImage shadowImage\n                    = this.shadowGenerator.createDropShadow(dataImage);\n            g2 = savedG2;\n            g2.drawImage(shadowImage, (int) dataArea.getX()\n                    + this.shadowGenerator.calculateOffsetX(),\n                    (int) dataArea.getY()\n                    + this.shadowGenerator.calculateOffsetY(), null);\n            g2.drawImage(dataImage, (int) dataArea.getX(),\n                    (int) dataArea.getY(), null);\n        }\n        g2.setClip(originalClip);\n        g2.setComposite(originalComposite);\n\n        drawOutline(g2, dataArea);\n\n    }\n","date":"2020-03-29 19:31:49","endLine":3138,"groupId":"101380","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"draw","params":"(Graphics2Dg2@Rectangle2Darea@Point2Danchor@PlotStateparentState@PlotRenderingInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/7b/8139ed21abb7d847625ed3ad80b577a5121ec4.src","preCode":"    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n            PlotState parentState, PlotRenderingInfo info) {\n\n        \r\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        \r\n        if (info != null) {\n            info.setPlotArea(area);\n        }\n\n        \r\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        AxisSpace space = calculateAxisSpace(g2, area);\n        Rectangle2D dataArea = space.shrink(area, null);\n        this.axisOffset.trim(dataArea);\n\n        dataArea = integerise(dataArea);\n        if (dataArea.isEmpty()) {\n            return;\n        }\n        createAndAddEntity((Rectangle2D) dataArea.clone(), info, null, null);\n        if (info != null) {\n            info.setDataArea(dataArea);\n        }\n\n        \r\n        drawBackground(g2, dataArea);\n        Map<Axis, AxisState> axisStateMap = drawAxes(g2, area, dataArea, info);\n\n        PlotOrientation orient = getOrientation();\n\n        \r\n        \r\n        if (anchor != null && !dataArea.contains(anchor)) {\n            anchor = null;\n        }\n        CrosshairState crosshairState = new CrosshairState();\n        crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);\n        crosshairState.setAnchor(anchor);\n\n        crosshairState.setAnchorX(Double.NaN);\n        crosshairState.setAnchorY(Double.NaN);\n        if (anchor != null) {\n            ValueAxis domainAxis = getDomainAxis();\n            if (domainAxis != null) {\n                double x;\n                if (orient == PlotOrientation.VERTICAL) {\n                    x = domainAxis.java2DToValue(anchor.getX(), dataArea,\n                            getDomainAxisEdge());\n                }\n                else {\n                    x = domainAxis.java2DToValue(anchor.getY(), dataArea,\n                            getDomainAxisEdge());\n                }\n                crosshairState.setAnchorX(x);\n            }\n            ValueAxis rangeAxis = getRangeAxis();\n            if (rangeAxis != null) {\n                double y;\n                if (orient == PlotOrientation.VERTICAL) {\n                    y = rangeAxis.java2DToValue(anchor.getY(), dataArea,\n                            getRangeAxisEdge());\n                }\n                else {\n                    y = rangeAxis.java2DToValue(anchor.getX(), dataArea,\n                            getRangeAxisEdge());\n                }\n                crosshairState.setAnchorY(y);\n            }\n        }\n        crosshairState.setCrosshairX(getDomainCrosshairValue());\n        crosshairState.setCrosshairY(getRangeCrosshairValue());\n        Shape originalClip = g2.getClip();\n        Composite originalComposite = g2.getComposite();\n\n        g2.clip(dataArea);\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                getForegroundAlpha()));\n\n        AxisState domainAxisState = axisStateMap.get(getDomainAxis());\n        if (domainAxisState == null) {\n            if (parentState != null) {\n                domainAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getDomainAxis());\n            }\n        }\n\n        AxisState rangeAxisState = axisStateMap.get(getRangeAxis());\n        if (rangeAxisState == null) {\n            if (parentState != null) {\n                rangeAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getRangeAxis());\n            }\n        }\n        if (domainAxisState != null) {\n            drawDomainTickBands(g2, dataArea, domainAxisState.getTicks());\n        }\n        if (rangeAxisState != null) {\n            drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks());\n        }\n        if (domainAxisState != null) {\n            drawDomainGridlines(g2, dataArea, domainAxisState.getTicks());\n            drawZeroDomainBaseline(g2, dataArea);\n        }\n        if (rangeAxisState != null) {\n            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());\n            drawZeroRangeBaseline(g2, dataArea);\n        }\n\n        Graphics2D savedG2 = g2;\n        BufferedImage dataImage = null;\n        boolean suppressShadow = Boolean.TRUE.equals(g2.getRenderingHint(\n                JFreeChart.KEY_SUPPRESS_SHADOW_GENERATION));\n        if (this.shadowGenerator != null && !suppressShadow) {\n            dataImage = new BufferedImage((int) dataArea.getWidth(),\n                    (int)dataArea.getHeight(), BufferedImage.TYPE_INT_ARGB);\n            g2 = dataImage.createGraphics();\n            g2.translate(-dataArea.getX(), -dataArea.getY());\n            g2.setRenderingHints(savedG2.getRenderingHints());\n        }\n\n        \r\n        for (XYDataset dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawDomainMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n        for (XYDataset dataset: this.datasets.values()) {\n            int datasetIndex = indexOf(dataset);\n            drawRangeMarkers(g2, dataArea, datasetIndex, Layer.BACKGROUND);\n        }\n\n        \r\n        boolean foundData = false;\n        DatasetRenderingOrder order = getDatasetRenderingOrder();\n        List<Integer> rendererIndices = getRendererIndices(order);\n        List<Integer> datasetIndices = getDatasetIndices(order);\n\n        \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                ValueAxis domainAxis = getDomainAxisForDataset(i);\n                ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                        Layer.BACKGROUND, info);\n            }\n        }\n\n        \r\n        for (int datasetIndex : datasetIndices) {\n            XYDataset dataset = this.getDataset(datasetIndex);\n            foundData = render(g2, dataArea, datasetIndex, info, \n                    crosshairState) || foundData;\n        }\n\n        \r\n        for (int i : rendererIndices) {\n            XYItemRenderer renderer = getRenderer(i);\n            if (renderer != null) {\n                    ValueAxis domainAxis = getDomainAxisForDataset(i);\n                    ValueAxis rangeAxis = getRangeAxisForDataset(i);\n                renderer.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, \n                            Layer.FOREGROUND, info);\n            }\n        }\n\n        \r\n        int datasetIndex = crosshairState.getDatasetIndex();\n        ValueAxis xAxis = getDomainAxisForDataset(datasetIndex);\n        RectangleEdge xAxisEdge = getDomainAxisEdge(getDomainAxisIndex(xAxis));\n        if (!this.domainCrosshairLockedOnData && anchor != null) {\n            double xx;\n            if (orient == PlotOrientation.VERTICAL) {\n                xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge);\n            }\n            else {\n                xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge);\n            }\n            crosshairState.setCrosshairX(xx);\n        }\n        setDomainCrosshairValue(crosshairState.getCrosshairX(), false);\n        if (isDomainCrosshairVisible()) {\n            double x = getDomainCrosshairValue();\n            Paint paint = getDomainCrosshairPaint();\n            Stroke stroke = getDomainCrosshairStroke();\n            drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint);\n        }\n\n        \r\n        ValueAxis yAxis = getRangeAxisForDataset(datasetIndex);\n        RectangleEdge yAxisEdge = getRangeAxisEdge(getRangeAxisIndex(yAxis));\n        if (!this.rangeCrosshairLockedOnData && anchor != null) {\n            double yy;\n            if (orient == PlotOrientation.VERTICAL) {\n                yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge);\n            } else {\n                yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge);\n            }\n            crosshairState.setCrosshairY(yy);\n        }\n        setRangeCrosshairValue(crosshairState.getCrosshairY(), false);\n        if (isRangeCrosshairVisible()) {\n            double y = getRangeCrosshairValue();\n            Paint paint = getRangeCrosshairPaint();\n            Stroke stroke = getRangeCrosshairStroke();\n            drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);\n        }\n\n        if (!foundData) {\n            drawNoDataMessage(g2, dataArea);\n        }\n\n        for (int i : rendererIndices) { \n            drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n        for (int i : rendererIndices) {\n            drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n\n        drawAnnotations(g2, dataArea, info);\n        if (this.shadowGenerator != null && !suppressShadow) {\n            BufferedImage shadowImage\n                    = this.shadowGenerator.createDropShadow(dataImage);\n            g2 = savedG2;\n            g2.drawImage(shadowImage, (int) dataArea.getX()\n                    + this.shadowGenerator.calculateOffsetX(),\n                    (int) dataArea.getY()\n                    + this.shadowGenerator.calculateOffsetY(), null);\n            g2.drawImage(dataImage, (int) dataArea.getX(),\n                    (int) dataArea.getY(), null);\n        }\n        g2.setClip(originalClip);\n        g2.setComposite(originalComposite);\n\n        drawOutline(g2, dataArea);\n\n    }\n","realPath":"src/main/java/org/jfree/chart/plot/XYPlot.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2896,"status":"M"}],"commitId":"de82cc1d6c0c13f7882bf9c3dd566cf12a59a01e","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-29 19:31:49","modifiedFileCount":"8","status":"M","submitter":"David Gilbert"}]
