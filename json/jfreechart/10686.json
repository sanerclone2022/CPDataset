[{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testCalculateMean_Array() {\n\n        \r\n        boolean pass = false;\n        try {\n            Statistics.calculateMean((Number[]) null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            Statistics.calculateMean((Number[]) null, false);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        \r\n        assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0])));\n        assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0],\n                false)));\n\n        \r\n        Number[] values = new Number[] {new Double(1.0)};\n        assertEquals(1.0, Statistics.calculateMean(values), EPSILON);\n        assertEquals(1.0, Statistics.calculateMean(values, true), EPSILON);\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values = new Number[] {new Double(1.0), null};\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values = new Number[] {new Double(1.0), new Double(Double.NaN)};\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n    }\n","date":"2016-02-19 15:40:32","endLine":106,"groupId":"1680","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCalculateMean_Array","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/fc/2495a1ccfb4967684c83d506830abd12f595d7.src","preCode":"    public void testCalculateMean_Array() {\n\n        \r\n        boolean pass = false;\n        try {\n            Statistics.calculateMean((Number[]) null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            Statistics.calculateMean((Number[]) null, false);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        \r\n        assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0])));\n        assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0],\n                false)));\n\n        \r\n        Number[] values = new Number[] {new Double(1.0)};\n        assertEquals(1.0, Statistics.calculateMean(values), EPSILON);\n        assertEquals(1.0, Statistics.calculateMean(values, true), EPSILON);\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values = new Number[] {new Double(1.0), null};\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values = new Number[] {new Double(1.0), new Double(Double.NaN)};\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n    }\n","realPath":"src/test/java/org/jfree/data/statistics/StatisticsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testCalculateMean_Collection() {\n\n        \r\n        boolean pass = false;\n        try {\n            Statistics.calculateMean((Collection) null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            Statistics.calculateMean((Collection) null, false);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        \r\n        List values = new ArrayList();\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, false)));\n\n        \r\n        values.add(new Double(9.0));\n        assertEquals(9.0, Statistics.calculateMean(values), EPSILON);\n        assertEquals(9.0, Statistics.calculateMean(values, true), EPSILON);\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values.add(null);\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values.clear();\n        values.add(new Double(9.0));\n        values.add(new Double(Double.NaN));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values = new ArrayList();\n        values.add(new Double(9.0));\n        values.add(new Double(3.0));\n        values.add(new Double(2.0));\n        values.add(new Double(2.0));\n        double mean = Statistics.calculateMean(values);\n        assertEquals(4.0, mean, EPSILON);\n\n        \r\n        values.add(new Double(Double.NaN));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n    }\n","date":"2016-02-19 15:40:32","endLine":172,"groupId":"1230","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCalculateMean_Collection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/fc/2495a1ccfb4967684c83d506830abd12f595d7.src","preCode":"    public void testCalculateMean_Collection() {\n\n        \r\n        boolean pass = false;\n        try {\n            Statistics.calculateMean((Collection) null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            Statistics.calculateMean((Collection) null, false);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        \r\n        List values = new ArrayList();\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, false)));\n\n        \r\n        values.add(new Double(9.0));\n        assertEquals(9.0, Statistics.calculateMean(values), EPSILON);\n        assertEquals(9.0, Statistics.calculateMean(values, true), EPSILON);\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values.add(null);\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values.clear();\n        values.add(new Double(9.0));\n        values.add(new Double(Double.NaN));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values = new ArrayList();\n        values.add(new Double(9.0));\n        values.add(new Double(3.0));\n        values.add(new Double(2.0));\n        values.add(new Double(2.0));\n        double mean = Statistics.calculateMean(values);\n        assertEquals(4.0, mean, EPSILON);\n\n        \r\n        values.add(new Double(Double.NaN));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n    }\n","realPath":"src/test/java/org/jfree/data/statistics/StatisticsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"1b18adfb8102c34c9287ece406b9dde5751b90b5","commitMessage":"@@@Move test files to standard Maven location.","date":"2016-02-19 15:40:32","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2020-01-02 22:51:31","codes":[{"authorDate":"2020-01-02 22:51:31","commitOrder":2,"curCode":"    public void testCalculateMean_Array() {\n\n        \r\n        boolean pass = false;\n        try {\n            Statistics.calculateMean((Number[]) null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            Statistics.calculateMean((Number[]) null, false);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        \r\n        assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0])));\n        assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0],\n                false)));\n\n        \r\n        Number[] values = new Number[] {1.0};\n        assertEquals(1.0, Statistics.calculateMean(values), EPSILON);\n        assertEquals(1.0, Statistics.calculateMean(values, true), EPSILON);\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values = new Number[] {1.0, null};\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values = new Number[] {1.0, Double.NaN};\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n    }\n","date":"2020-01-02 22:51:31","endLine":106,"groupId":"10686","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCalculateMean_Array","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/1d/ad0c0f4fba2cc478c1352a8ca9a8b93ccc9e02.src","preCode":"    public void testCalculateMean_Array() {\n\n        \r\n        boolean pass = false;\n        try {\n            Statistics.calculateMean((Number[]) null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            Statistics.calculateMean((Number[]) null, false);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        \r\n        assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0])));\n        assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0],\n                false)));\n\n        \r\n        Number[] values = new Number[] {new Double(1.0)};\n        assertEquals(1.0, Statistics.calculateMean(values), EPSILON);\n        assertEquals(1.0, Statistics.calculateMean(values, true), EPSILON);\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values = new Number[] {new Double(1.0), null};\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values = new Number[] {new Double(1.0), new Double(Double.NaN)};\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(1.0, Statistics.calculateMean(values, false), EPSILON);\n    }\n","realPath":"src/test/java/org/jfree/data/statistics/StatisticsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2020-01-02 22:51:31","commitOrder":2,"curCode":"    public void testCalculateMean_Collection() {\n\n        \r\n        boolean pass = false;\n        try {\n            Statistics.calculateMean((Collection) null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            Statistics.calculateMean((Collection) null, false);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        \r\n        List<Double> values = new ArrayList<>();\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, false)));\n\n        \r\n        values.add(9.0);\n        assertEquals(9.0, Statistics.calculateMean(values), EPSILON);\n        assertEquals(9.0, Statistics.calculateMean(values, true), EPSILON);\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values.add(null);\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values.clear();\n        values.add(9.0);\n        values.add(Double.NaN);\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values = new ArrayList<>();\n        values.add(9.0);\n        values.add(3.0);\n        values.add(2.0);\n        values.add(2.0);\n        double mean = Statistics.calculateMean(values);\n        assertEquals(4.0, mean, EPSILON);\n\n        \r\n        values.add(Double.NaN);\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n    }\n","date":"2020-01-02 22:51:31","endLine":172,"groupId":"10686","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCalculateMean_Collection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/1d/ad0c0f4fba2cc478c1352a8ca9a8b93ccc9e02.src","preCode":"    public void testCalculateMean_Collection() {\n\n        \r\n        boolean pass = false;\n        try {\n            Statistics.calculateMean((Collection) null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            Statistics.calculateMean((Collection) null, false);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        \r\n        List values = new ArrayList();\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, false)));\n\n        \r\n        values.add(new Double(9.0));\n        assertEquals(9.0, Statistics.calculateMean(values), EPSILON);\n        assertEquals(9.0, Statistics.calculateMean(values, true), EPSILON);\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values.add(null);\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values.clear();\n        values.add(new Double(9.0));\n        values.add(new Double(Double.NaN));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values, true)));\n        assertEquals(9.0, Statistics.calculateMean(values, false), EPSILON);\n\n        \r\n        values = new ArrayList();\n        values.add(new Double(9.0));\n        values.add(new Double(3.0));\n        values.add(new Double(2.0));\n        values.add(new Double(2.0));\n        double mean = Statistics.calculateMean(values);\n        assertEquals(4.0, mean, EPSILON);\n\n        \r\n        values.add(new Double(Double.NaN));\n        assertTrue(Double.isNaN(Statistics.calculateMean(values)));\n    }\n","realPath":"src/test/java/org/jfree/data/statistics/StatisticsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"074c717f60bfabb44669be23706328a00abc7bcd","commitMessage":"@@@Fix compiler warnings.","date":"2020-01-02 22:51:31","modifiedFileCount":"2","status":"M","submitter":"David Gilbert"}]
