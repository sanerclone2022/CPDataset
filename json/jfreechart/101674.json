[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    protected void drawPrimaryLineAsPath(XYItemRendererState state,\n            Graphics2D g2, XYPlot plot, XYDataset dataset, int pass,\n            int series, int item, ValueAxis domainAxis, ValueAxis rangeAxis,\n            Rectangle2D dataArea) {\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation);\n\n        State s = (State) state;\n        \r\n        if (!Double.isNaN(transX1) && !Double.isNaN(transY1)) {\n            float x = (float) transX1;\n            float y = (float) transY1;\n            PlotOrientation orientation = plot.getOrientation();\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                x = (float) transY1;\n                y = (float) transX1;\n            }\n            if (s.isLastPointGood()) {\n                s.seriesPath.lineTo(x, y);\n            }\n            else {\n                s.seriesPath.moveTo(x, y);\n            }\n            s.setLastPointGood(true);\n        } else {\n            s.setLastPointGood(false);\n        }\n        \r\n        if (item == s.getLastItemIndex()) {\n            \r\n            drawFirstPassShape(g2, pass, series, item, s.seriesPath);\n        }\n    }\n","date":"2016-02-19 16:24:22","endLine":1091,"groupId":"3652","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"drawPrimaryLineAsPath","params":"(XYItemRendererStatestate@Graphics2Dg2@XYPlotplot@XYDatasetdataset@intpass@intseries@intitem@ValueAxisdomainAxis@ValueAxisrangeAxis@Rectangle2DdataArea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/72/a29a957863c08877ed1a617b071b6f1754f774.src","preCode":"    protected void drawPrimaryLineAsPath(XYItemRendererState state,\n            Graphics2D g2, XYPlot plot, XYDataset dataset, int pass,\n            int series, int item, ValueAxis domainAxis, ValueAxis rangeAxis,\n            Rectangle2D dataArea) {\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation);\n\n        State s = (State) state;\n        \r\n        if (!Double.isNaN(transX1) && !Double.isNaN(transY1)) {\n            float x = (float) transX1;\n            float y = (float) transY1;\n            PlotOrientation orientation = plot.getOrientation();\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                x = (float) transY1;\n                y = (float) transX1;\n            }\n            if (s.isLastPointGood()) {\n                s.seriesPath.lineTo(x, y);\n            }\n            else {\n                s.seriesPath.moveTo(x, y);\n            }\n            s.setLastPointGood(true);\n        } else {\n            s.setLastPointGood(false);\n        }\n        \r\n        if (item == s.getLastItemIndex()) {\n            \r\n            drawFirstPassShape(g2, pass, series, item, s.seriesPath);\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1052,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state, \n            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n            int series, int item, CrosshairState crosshairState, int pass) {\n\n        \r\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation);\n\n        State s = (State) state;\n        \r\n        if (!Double.isNaN(transX1) && !Double.isNaN(transY1)) {\n            float x = (float) transX1;\n            float y = (float) transY1;\n            PlotOrientation orientation = plot.getOrientation();\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                x = (float) transY1;\n                y = (float) transX1;\n            }\n            if (s.lastPointGood) {\n                if ((Math.abs(x - s.lastX) > s.dX)) {\n                    s.seriesPath.lineTo(x, y);\n                    if (s.lowY < s.highY) {\n                        s.intervalPath.moveTo((float) s.lastX, (float) s.lowY);\n                        s.intervalPath.lineTo((float) s.lastX, (float) s.highY);\n                    }\n                    s.lastX = x;\n                    s.openY = y;\n                    s.highY = y;\n                    s.lowY = y;\n                    s.closeY = y;\n                }\n                else {\n                    s.highY = Math.max(s.highY, y);\n                    s.lowY = Math.min(s.lowY, y);\n                    s.closeY = y;\n                }\n            }\n            else {\n                s.seriesPath.moveTo(x, y);\n                s.lastX = x;\n                s.openY = y;\n                s.highY = y;\n                s.lowY = y;\n                s.closeY = y;\n            }\n            s.lastPointGood = true;\n        }\n        else {\n            s.lastPointGood = false;\n        }\n        \r\n        if (item == s.getLastItemIndex()) {\n            \r\n            PathIterator pi = s.seriesPath.getPathIterator(null);\n            int count = 0;\n            while (!pi.isDone()) {\n                count++;\n                pi.next();\n            }\n            g2.setStroke(getItemStroke(series, item));\n            g2.setPaint(getItemPaint(series, item));\n            g2.draw(s.seriesPath);\n            g2.draw(s.intervalPath);\n        }\n    }\n","date":"2016-02-19 16:24:22","endLine":339,"groupId":"2058","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"drawItem","params":"(Graphics2Dg2@XYItemRendererStatestate@Rectangle2DdataArea@PlotRenderingInfoinfo@XYPlotplot@ValueAxisdomainAxis@ValueAxisrangeAxis@XYDatasetdataset@intseries@intitem@CrosshairStatecrosshairState@intpass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/14/cb746ee0f233ce41a3d65bf19f75db3b00def0.src","preCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state, \n            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n            int series, int item, CrosshairState crosshairState, int pass) {\n\n        \r\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation);\n\n        State s = (State) state;\n        \r\n        if (!Double.isNaN(transX1) && !Double.isNaN(transY1)) {\n            float x = (float) transX1;\n            float y = (float) transY1;\n            PlotOrientation orientation = plot.getOrientation();\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                x = (float) transY1;\n                y = (float) transX1;\n            }\n            if (s.lastPointGood) {\n                if ((Math.abs(x - s.lastX) > s.dX)) {\n                    s.seriesPath.lineTo(x, y);\n                    if (s.lowY < s.highY) {\n                        s.intervalPath.moveTo((float) s.lastX, (float) s.lowY);\n                        s.intervalPath.lineTo((float) s.lastX, (float) s.highY);\n                    }\n                    s.lastX = x;\n                    s.openY = y;\n                    s.highY = y;\n                    s.lowY = y;\n                    s.closeY = y;\n                }\n                else {\n                    s.highY = Math.max(s.highY, y);\n                    s.lowY = Math.min(s.lowY, y);\n                    s.closeY = y;\n                }\n            }\n            else {\n                s.seriesPath.moveTo(x, y);\n                s.lastX = x;\n                s.openY = y;\n                s.highY = y;\n                s.lowY = y;\n                s.closeY = y;\n            }\n            s.lastPointGood = true;\n        }\n        else {\n            s.lastPointGood = false;\n        }\n        \r\n        if (item == s.getLastItemIndex()) {\n            \r\n            PathIterator pi = s.seriesPath.getPathIterator(null);\n            int count = 0;\n            while (!pi.isDone()) {\n                count++;\n                pi.next();\n            }\n            g2.setStroke(getItemStroke(series, item));\n            g2.setPaint(getItemPaint(series, item));\n            g2.draw(s.seriesPath);\n            g2.draw(s.intervalPath);\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/xy/SamplingXYLineRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2018-11-26 02:49:00","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":2,"curCode":"    protected void drawPrimaryLineAsPath(XYItemRendererState state,\n            Graphics2D g2, XYPlot plot, XYDataset dataset, int pass,\n            int series, int item, ValueAxis domainAxis, ValueAxis rangeAxis,\n            Rectangle2D dataArea) {\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation);\n\n        State s = (State) state;\n        \r\n        if (!Double.isNaN(transX1) && !Double.isNaN(transY1)) {\n            float x = (float) transX1;\n            float y = (float) transY1;\n            PlotOrientation orientation = plot.getOrientation();\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                x = (float) transY1;\n                y = (float) transX1;\n            }\n            if (s.isLastPointGood()) {\n                s.seriesPath.lineTo(x, y);\n            }\n            else {\n                s.seriesPath.moveTo(x, y);\n            }\n            s.setLastPointGood(true);\n        } else {\n            s.setLastPointGood(false);\n        }\n        \r\n        if (item == s.getLastItemIndex()) {\n            \r\n            drawFirstPassShape(g2, pass, series, item, s.seriesPath);\n        }\n    }\n","date":"2016-02-19 16:24:22","endLine":1091,"groupId":"101674","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"drawPrimaryLineAsPath","params":"(XYItemRendererStatestate@Graphics2Dg2@XYPlotplot@XYDatasetdataset@intpass@intseries@intitem@ValueAxisdomainAxis@ValueAxisrangeAxis@Rectangle2DdataArea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/72/a29a957863c08877ed1a617b071b6f1754f774.src","preCode":"    protected void drawPrimaryLineAsPath(XYItemRendererState state,\n            Graphics2D g2, XYPlot plot, XYDataset dataset, int pass,\n            int series, int item, ValueAxis domainAxis, ValueAxis rangeAxis,\n            Rectangle2D dataArea) {\n\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation);\n\n        State s = (State) state;\n        \r\n        if (!Double.isNaN(transX1) && !Double.isNaN(transY1)) {\n            float x = (float) transX1;\n            float y = (float) transY1;\n            PlotOrientation orientation = plot.getOrientation();\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                x = (float) transY1;\n                y = (float) transX1;\n            }\n            if (s.isLastPointGood()) {\n                s.seriesPath.lineTo(x, y);\n            }\n            else {\n                s.seriesPath.moveTo(x, y);\n            }\n            s.setLastPointGood(true);\n        } else {\n            s.setLastPointGood(false);\n        }\n        \r\n        if (item == s.getLastItemIndex()) {\n            \r\n            drawFirstPassShape(g2, pass, series, item, s.seriesPath);\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1052,"status":"N"},{"authorDate":"2018-11-26 02:49:00","commitOrder":2,"curCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state, \n            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n            int series, int item, CrosshairState crosshairState, int pass) {\n\n        \r\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation);\n\n        State s = (State) state;\n        \r\n        if (!Double.isNaN(transX1) && !Double.isNaN(transY1)) {\n            float x = (float) transX1;\n            float y = (float) transY1;\n            PlotOrientation orientation = plot.getOrientation();\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                x = (float) transY1;\n                y = (float) transX1;\n            }\n            if (s.lastPointGood) {\n                if ((Math.abs(x - s.lastX) > s.dX)) {\n                    if (s.lowY < s.highY) {\n                        s.intervalPath.moveTo((float) s.lastX, (float) s.lowY);\n                        s.intervalPath.lineTo((float) s.lastX, (float) s.highY);\n\n                        s.seriesPath.moveTo((float) s.lastX, (float) s.closeY);\n                    }\n                    s.seriesPath.lineTo(x, y);\n                    s.lastX = x;\n                    s.openY = y;\n                    s.highY = y;\n                    s.lowY = y;\n                    s.closeY = y;\n                }\n                else {\n                    s.highY = Math.max(s.highY, y);\n                    s.lowY = Math.min(s.lowY, y);\n                    s.closeY = y;\n                }\n            }\n            else {\n                s.seriesPath.moveTo(x, y);\n                s.lastX = x;\n                s.openY = y;\n                s.highY = y;\n                s.lowY = y;\n                s.closeY = y;\n            }\n            s.lastPointGood = true;\n        }\n        else {\n            s.lastPointGood = false;\n        }\n        \r\n        if (item == s.getLastItemIndex()) {\n            \r\n            PathIterator pi = s.seriesPath.getPathIterator(null);\n            int count = 0;\n            while (!pi.isDone()) {\n                count++;\n                pi.next();\n            }\n            g2.setStroke(getItemStroke(series, item));\n            g2.setPaint(getItemPaint(series, item));\n            g2.draw(s.seriesPath);\n            g2.draw(s.intervalPath);\n        }\n    }\n","date":"2018-11-26 02:49:00","endLine":310,"groupId":"101674","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"drawItem","params":"(Graphics2Dg2@XYItemRendererStatestate@Rectangle2DdataArea@PlotRenderingInfoinfo@XYPlotplot@ValueAxisdomainAxis@ValueAxisrangeAxis@XYDatasetdataset@intseries@intitem@CrosshairStatecrosshairState@intpass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/31/7c111861cbfb28d60c8127ca2513e496372324.src","preCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state, \n            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n            int series, int item, CrosshairState crosshairState, int pass) {\n\n        \r\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation);\n\n        State s = (State) state;\n        \r\n        if (!Double.isNaN(transX1) && !Double.isNaN(transY1)) {\n            float x = (float) transX1;\n            float y = (float) transY1;\n            PlotOrientation orientation = plot.getOrientation();\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                x = (float) transY1;\n                y = (float) transX1;\n            }\n            if (s.lastPointGood) {\n                if ((Math.abs(x - s.lastX) > s.dX)) {\n                    s.seriesPath.lineTo(x, y);\n                    if (s.lowY < s.highY) {\n                        s.intervalPath.moveTo((float) s.lastX, (float) s.lowY);\n                        s.intervalPath.lineTo((float) s.lastX, (float) s.highY);\n                    }\n                    s.lastX = x;\n                    s.openY = y;\n                    s.highY = y;\n                    s.lowY = y;\n                    s.closeY = y;\n                }\n                else {\n                    s.highY = Math.max(s.highY, y);\n                    s.lowY = Math.min(s.lowY, y);\n                    s.closeY = y;\n                }\n            }\n            else {\n                s.seriesPath.moveTo(x, y);\n                s.lastX = x;\n                s.openY = y;\n                s.highY = y;\n                s.lowY = y;\n                s.closeY = y;\n            }\n            s.lastPointGood = true;\n        }\n        else {\n            s.lastPointGood = false;\n        }\n        \r\n        if (item == s.getLastItemIndex()) {\n            \r\n            PathIterator pi = s.seriesPath.getPathIterator(null);\n            int count = 0;\n            while (!pi.isDone()) {\n                count++;\n                pi.next();\n            }\n            g2.setStroke(getItemStroke(series, item));\n            g2.setPaint(getItemPaint(series, item));\n            g2.draw(s.seriesPath);\n            g2.draw(s.intervalPath);\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/xy/SamplingXYLineRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"}],"commitId":"e41734ff40be4efcfd32f74e31ea1bef360e3470","commitMessage":"@@@Merge pull request #91 from bambo1543/master\n\nfixed SamplingXYLineRenderer to draw seriesPath from s.closeY instead of from last drawn y","date":"2018-11-26 02:49:00","modifiedFileCount":"1","status":"M","submitter":"David Gilbert"}]
