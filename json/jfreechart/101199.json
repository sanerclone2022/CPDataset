[{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testFindValueRange2() {\n        TimeZone tzone = TimeZone.getTimeZone(\"Europe/London\");\n        Calendar calendar = new GregorianCalendar(tzone, Locale.UK);\n        calendar.clear();\n        calendar.set(2014, Calendar.FEBRUARY, 23, 6, 0);\n        long start = calendar.getTimeInMillis();\n        calendar.clear();\n        calendar.set(2014, Calendar.FEBRUARY, 24, 18, 0);\n        long end = calendar.getTimeInMillis();\n        Range range = new Range(start, end);\n        \n        TimeSeries ts = new TimeSeries(\"Time Series\");\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(23, 2, 2014), 5.0);\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.START, tzone).isNaNRange());\n        assertEquals(new Range(5.0, 5.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(5.0, 5.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(24, 2, 2014), 6.0);\n        assertEquals(new Range(6.0, 6.0), \n                ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertEquals(new Range(5.0, 6.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(5.0, 5.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.clear();\n        ts.add(new Day(24, 2, 2014), null);\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.START, tzone).isNaNRange());\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone).isNaNRange());\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.END, tzone).isNaNRange());\n    }\n","date":"2016-02-19 15:40:32","endLine":1215,"groupId":"1239","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindValueRange2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/84/35a22af8ec31b47679df84f67a6546dd39ace8.src","preCode":"    public void testFindValueRange2() {\n        TimeZone tzone = TimeZone.getTimeZone(\"Europe/London\");\n        Calendar calendar = new GregorianCalendar(tzone, Locale.UK);\n        calendar.clear();\n        calendar.set(2014, Calendar.FEBRUARY, 23, 6, 0);\n        long start = calendar.getTimeInMillis();\n        calendar.clear();\n        calendar.set(2014, Calendar.FEBRUARY, 24, 18, 0);\n        long end = calendar.getTimeInMillis();\n        Range range = new Range(start, end);\n        \n        TimeSeries ts = new TimeSeries(\"Time Series\");\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(23, 2, 2014), 5.0);\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.START, tzone).isNaNRange());\n        assertEquals(new Range(5.0, 5.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(5.0, 5.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(24, 2, 2014), 6.0);\n        assertEquals(new Range(6.0, 6.0), \n                ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertEquals(new Range(5.0, 6.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(5.0, 5.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.clear();\n        ts.add(new Day(24, 2, 2014), null);\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.START, tzone).isNaNRange());\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone).isNaNRange());\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.END, tzone).isNaNRange());\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1179,"status":"B"},{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testFindValueRange3() {\n        TimeZone tzone = TimeZone.getTimeZone(\"Europe/London\");\n        Calendar calendar = new GregorianCalendar(tzone, Locale.UK);\n        calendar.clear();\n        calendar.set(2015, Calendar.SEPTEMBER, 1, 6, 0);\n        long start = calendar.getTimeInMillis();\n        calendar.clear();\n        calendar.set(2015, Calendar.SEPTEMBER, 30, 18, 0);\n        long end = calendar.getTimeInMillis();\n        Range range = new Range(start, end);\n        \n        TimeSeries ts = new TimeSeries(\"Time Series\");\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(1, 9, 2015), 1.0);\n        ts.add(new Day(2, 9, 2015), 99.0);\n        ts.add(new Day(30, 9, 2015), 2.0);\n\n        assertEquals(new Range(2.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(10, 9, 2015), Double.NaN);\n        assertEquals(new Range(2.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n\n    }\n","date":"2016-02-19 15:40:32","endLine":1256,"groupId":"1240","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindValueRange3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/84/35a22af8ec31b47679df84f67a6546dd39ace8.src","preCode":"    public void testFindValueRange3() {\n        TimeZone tzone = TimeZone.getTimeZone(\"Europe/London\");\n        Calendar calendar = new GregorianCalendar(tzone, Locale.UK);\n        calendar.clear();\n        calendar.set(2015, Calendar.SEPTEMBER, 1, 6, 0);\n        long start = calendar.getTimeInMillis();\n        calendar.clear();\n        calendar.set(2015, Calendar.SEPTEMBER, 30, 18, 0);\n        long end = calendar.getTimeInMillis();\n        Range range = new Range(start, end);\n        \n        TimeSeries ts = new TimeSeries(\"Time Series\");\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(1, 9, 2015), 1.0);\n        ts.add(new Day(2, 9, 2015), 99.0);\n        ts.add(new Day(30, 9, 2015), 2.0);\n\n        assertEquals(new Range(2.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(10, 9, 2015), Double.NaN);\n        assertEquals(new Range(2.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1221,"status":"B"}],"commitId":"1b18adfb8102c34c9287ece406b9dde5751b90b5","commitMessage":"@@@Move test files to standard Maven location.","date":"2016-02-19 15:40:32","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2020-03-22 19:36:23","codes":[{"authorDate":"2020-03-22 19:36:23","commitOrder":2,"curCode":"    public void testFindValueRange2() {\n        TimeZone tzone = TimeZone.getTimeZone(\"Europe/London\");\n        Calendar calendar = new GregorianCalendar(tzone, Locale.UK);\n        calendar.clear();\n        calendar.set(2014, Calendar.FEBRUARY, 23, 6, 0);\n        long start = calendar.getTimeInMillis();\n        calendar.clear();\n        calendar.set(2014, Calendar.FEBRUARY, 24, 18, 0);\n        long end = calendar.getTimeInMillis();\n        Range range = new Range(start, end);\n        \n        TimeSeries<String> ts = new TimeSeries<>(\"Time Series\");\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(23, 2, 2014), 5.0);\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.START, tzone).isNaNRange());\n        assertEquals(new Range(5.0, 5.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(5.0, 5.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(24, 2, 2014), 6.0);\n        assertEquals(new Range(6.0, 6.0), \n                ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertEquals(new Range(5.0, 6.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(5.0, 5.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.clear();\n        ts.add(new Day(24, 2, 2014), null);\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.START, tzone).isNaNRange());\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone).isNaNRange());\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.END, tzone).isNaNRange());\n    }\n","date":"2020-03-22 19:36:23","endLine":1188,"groupId":"101199","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindValueRange2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/8f/ca912ea4098491100ee4064656b72adc694bba.src","preCode":"    public void testFindValueRange2() {\n        TimeZone tzone = TimeZone.getTimeZone(\"Europe/London\");\n        Calendar calendar = new GregorianCalendar(tzone, Locale.UK);\n        calendar.clear();\n        calendar.set(2014, Calendar.FEBRUARY, 23, 6, 0);\n        long start = calendar.getTimeInMillis();\n        calendar.clear();\n        calendar.set(2014, Calendar.FEBRUARY, 24, 18, 0);\n        long end = calendar.getTimeInMillis();\n        Range range = new Range(start, end);\n        \n        TimeSeries ts = new TimeSeries(\"Time Series\");\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(23, 2, 2014), 5.0);\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.START, tzone).isNaNRange());\n        assertEquals(new Range(5.0, 5.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(5.0, 5.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(24, 2, 2014), 6.0);\n        assertEquals(new Range(6.0, 6.0), \n                ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertEquals(new Range(5.0, 6.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(5.0, 5.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.clear();\n        ts.add(new Day(24, 2, 2014), null);\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.START, tzone).isNaNRange());\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone).isNaNRange());\n        assertTrue(ts.findValueRange(range, TimePeriodAnchor.END, tzone).isNaNRange());\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1152,"status":"M"},{"authorDate":"2020-03-22 19:36:23","commitOrder":2,"curCode":"    public void testFindValueRange3() {\n        TimeZone tzone = TimeZone.getTimeZone(\"Europe/London\");\n        Calendar calendar = new GregorianCalendar(tzone, Locale.UK);\n        calendar.clear();\n        calendar.set(2015, Calendar.SEPTEMBER, 1, 6, 0);\n        long start = calendar.getTimeInMillis();\n        calendar.clear();\n        calendar.set(2015, Calendar.SEPTEMBER, 30, 18, 0);\n        long end = calendar.getTimeInMillis();\n        Range range = new Range(start, end);\n        \n        TimeSeries<String> ts = new TimeSeries<>(\"Time Series\");\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(1, 9, 2015), 1.0);\n        ts.add(new Day(2, 9, 2015), 99.0);\n        ts.add(new Day(30, 9, 2015), 2.0);\n\n        assertEquals(new Range(2.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(10, 9, 2015), Double.NaN);\n        assertEquals(new Range(2.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n\n    }\n","date":"2020-03-22 19:36:23","endLine":1229,"groupId":"101199","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindValueRange3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/8f/ca912ea4098491100ee4064656b72adc694bba.src","preCode":"    public void testFindValueRange3() {\n        TimeZone tzone = TimeZone.getTimeZone(\"Europe/London\");\n        Calendar calendar = new GregorianCalendar(tzone, Locale.UK);\n        calendar.clear();\n        calendar.set(2015, Calendar.SEPTEMBER, 1, 6, 0);\n        long start = calendar.getTimeInMillis();\n        calendar.clear();\n        calendar.set(2015, Calendar.SEPTEMBER, 30, 18, 0);\n        long end = calendar.getTimeInMillis();\n        Range range = new Range(start, end);\n        \n        TimeSeries ts = new TimeSeries(\"Time Series\");\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertNull(ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(1, 9, 2015), 1.0);\n        ts.add(new Day(2, 9, 2015), 99.0);\n        ts.add(new Day(30, 9, 2015), 2.0);\n\n        assertEquals(new Range(2.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n        \n        ts.add(new Day(10, 9, 2015), Double.NaN);\n        assertEquals(new Range(2.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.START, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));\n        assertEquals(new Range(1.0, 99.0), \n                ts.findValueRange(range, TimePeriodAnchor.END, tzone));\n\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1194,"status":"M"}],"commitId":"f7ded380c87f815662e1c023e0aa68a1a27496c4","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-22 19:36:23","modifiedFileCount":"45","status":"M","submitter":"David Gilbert"}]
