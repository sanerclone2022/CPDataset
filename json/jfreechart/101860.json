[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Axis)) {\n            return false;\n        }\n        Axis that = (Axis) obj;\n        if (this.visible != that.visible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.label, that.label)) {\n            return false;\n        }\n        if (!AttributedStringUtilities.equal(this.attributedLabel, \n                that.attributedLabel)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelInsets, that.labelInsets)) {\n            return false;\n        }\n        if (this.labelAngle != that.labelAngle) {\n            return false;\n        }\n        if (!this.labelLocation.equals(that.labelLocation)) {\n            return false;\n        }\n        if (this.axisLineVisible != that.axisLineVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.axisLineStroke, that.axisLineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.axisLinePaint, that.axisLinePaint)) {\n            return false;\n        }\n        if (this.tickLabelsVisible != that.tickLabelsVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickLabelFont, that.tickLabelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(\n            this.tickLabelInsets, that.tickLabelInsets\n        )) {\n            return false;\n        }\n        if (this.tickMarksVisible != that.tickMarksVisible) {\n            return false;\n        }\n        if (this.tickMarkInsideLength != that.tickMarkInsideLength) {\n            return false;\n        }\n        if (this.tickMarkOutsideLength != that.tickMarkOutsideLength) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.tickMarkPaint, that.tickMarkPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickMarkStroke, that.tickMarkStroke)) {\n            return false;\n        }\n        if (this.minorTickMarksVisible != that.minorTickMarksVisible) {\n            return false;\n        }\n        if (this.minorTickMarkInsideLength != that.minorTickMarkInsideLength) {\n            return false;\n        }\n        if (this.minorTickMarkOutsideLength\n                != that.minorTickMarkOutsideLength) {\n            return false;\n        }\n        if (this.fixedDimension != that.fixedDimension) {\n            return false;\n        }\n        return true;\n    }\n","date":"2016-02-19 16:24:22","endLine":1665,"groupId":"140","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/54/8d8ebf8e93ad64664cef5516758938ba894da1.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Axis)) {\n            return false;\n        }\n        Axis that = (Axis) obj;\n        if (this.visible != that.visible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.label, that.label)) {\n            return false;\n        }\n        if (!AttributedStringUtilities.equal(this.attributedLabel, \n                that.attributedLabel)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelInsets, that.labelInsets)) {\n            return false;\n        }\n        if (this.labelAngle != that.labelAngle) {\n            return false;\n        }\n        if (!this.labelLocation.equals(that.labelLocation)) {\n            return false;\n        }\n        if (this.axisLineVisible != that.axisLineVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.axisLineStroke, that.axisLineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.axisLinePaint, that.axisLinePaint)) {\n            return false;\n        }\n        if (this.tickLabelsVisible != that.tickLabelsVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickLabelFont, that.tickLabelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(\n            this.tickLabelInsets, that.tickLabelInsets\n        )) {\n            return false;\n        }\n        if (this.tickMarksVisible != that.tickMarksVisible) {\n            return false;\n        }\n        if (this.tickMarkInsideLength != that.tickMarkInsideLength) {\n            return false;\n        }\n        if (this.tickMarkOutsideLength != that.tickMarkOutsideLength) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.tickMarkPaint, that.tickMarkPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickMarkStroke, that.tickMarkStroke)) {\n            return false;\n        }\n        if (this.minorTickMarksVisible != that.minorTickMarksVisible) {\n            return false;\n        }\n        if (this.minorTickMarkInsideLength != that.minorTickMarkInsideLength) {\n            return false;\n        }\n        if (this.minorTickMarkOutsideLength\n                != that.minorTickMarkOutsideLength) {\n            return false;\n        }\n        if (this.fixedDimension != that.fixedDimension) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/Axis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1580,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof CyclicNumberAxis)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        CyclicNumberAxis that = (CyclicNumberAxis) obj;\n        if (this.period != that.period) {\n            return false;\n        }\n        if (this.offset != that.offset) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.advanceLinePaint,\n                that.advanceLinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.advanceLineStroke,\n                that.advanceLineStroke)) {\n            return false;\n        }\n        if (this.advanceLineVisible != that.advanceLineVisible) {\n            return false;\n        }\n        if (this.boundMappedToLastCycle != that.boundMappedToLastCycle) {\n            return false;\n        }\n        return true;\n    }\n","date":"2016-02-19 16:24:22","endLine":1184,"groupId":"4281","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/bc/245c7e9b15316276a37b611a25a5e42a6999f2.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof CyclicNumberAxis)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        CyclicNumberAxis that = (CyclicNumberAxis) obj;\n        if (this.period != that.period) {\n            return false;\n        }\n        if (this.offset != that.offset) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.advanceLinePaint,\n                that.advanceLinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.advanceLineStroke,\n                that.advanceLineStroke)) {\n            return false;\n        }\n        if (this.advanceLineVisible != that.advanceLineVisible) {\n            return false;\n        }\n        if (this.boundMappedToLastCycle != that.boundMappedToLastCycle) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/CyclicNumberAxis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1152,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2017-03-08 01:39:11","codes":[{"authorDate":"2017-03-08 01:39:11","commitOrder":2,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Axis)) {\n            return false;\n        }\n        Axis that = (Axis) obj;\n        if (this.visible != that.visible) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.label, that.label)) {\n            return false;\n        }\n        if (!AttributedStringUtils.equal(this.attributedLabel, \n                that.attributedLabel)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.labelInsets, that.labelInsets)) {\n            return false;\n        }\n        if (this.labelAngle != that.labelAngle) {\n            return false;\n        }\n        if (!this.labelLocation.equals(that.labelLocation)) {\n            return false;\n        }\n        if (this.axisLineVisible != that.axisLineVisible) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.axisLineStroke, that.axisLineStroke)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.axisLinePaint, that.axisLinePaint)) {\n            return false;\n        }\n        if (this.tickLabelsVisible != that.tickLabelsVisible) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.tickLabelFont, that.tickLabelFont)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.tickLabelPaint, that.tickLabelPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(\n            this.tickLabelInsets, that.tickLabelInsets\n        )) {\n            return false;\n        }\n        if (this.tickMarksVisible != that.tickMarksVisible) {\n            return false;\n        }\n        if (this.tickMarkInsideLength != that.tickMarkInsideLength) {\n            return false;\n        }\n        if (this.tickMarkOutsideLength != that.tickMarkOutsideLength) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.tickMarkPaint, that.tickMarkPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.tickMarkStroke, that.tickMarkStroke)) {\n            return false;\n        }\n        if (this.minorTickMarksVisible != that.minorTickMarksVisible) {\n            return false;\n        }\n        if (this.minorTickMarkInsideLength != that.minorTickMarkInsideLength) {\n            return false;\n        }\n        if (this.minorTickMarkOutsideLength\n                != that.minorTickMarkOutsideLength) {\n            return false;\n        }\n        if (this.fixedDimension != that.fixedDimension) {\n            return false;\n        }\n        return true;\n    }\n","date":"2017-03-08 01:39:11","endLine":1665,"groupId":"2211","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/30/9bb9365be8f313600b8f74a2f0276d5f9263e7.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Axis)) {\n            return false;\n        }\n        Axis that = (Axis) obj;\n        if (this.visible != that.visible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.label, that.label)) {\n            return false;\n        }\n        if (!AttributedStringUtilities.equal(this.attributedLabel, \n                that.attributedLabel)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelInsets, that.labelInsets)) {\n            return false;\n        }\n        if (this.labelAngle != that.labelAngle) {\n            return false;\n        }\n        if (!this.labelLocation.equals(that.labelLocation)) {\n            return false;\n        }\n        if (this.axisLineVisible != that.axisLineVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.axisLineStroke, that.axisLineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.axisLinePaint, that.axisLinePaint)) {\n            return false;\n        }\n        if (this.tickLabelsVisible != that.tickLabelsVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickLabelFont, that.tickLabelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(\n            this.tickLabelInsets, that.tickLabelInsets\n        )) {\n            return false;\n        }\n        if (this.tickMarksVisible != that.tickMarksVisible) {\n            return false;\n        }\n        if (this.tickMarkInsideLength != that.tickMarkInsideLength) {\n            return false;\n        }\n        if (this.tickMarkOutsideLength != that.tickMarkOutsideLength) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.tickMarkPaint, that.tickMarkPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickMarkStroke, that.tickMarkStroke)) {\n            return false;\n        }\n        if (this.minorTickMarksVisible != that.minorTickMarksVisible) {\n            return false;\n        }\n        if (this.minorTickMarkInsideLength != that.minorTickMarkInsideLength) {\n            return false;\n        }\n        if (this.minorTickMarkOutsideLength\n                != that.minorTickMarkOutsideLength) {\n            return false;\n        }\n        if (this.fixedDimension != that.fixedDimension) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/Axis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1580,"status":"M"},{"authorDate":"2017-03-08 01:39:11","commitOrder":2,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof CyclicNumberAxis)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        CyclicNumberAxis that = (CyclicNumberAxis) obj;\n        if (this.period != that.period) {\n            return false;\n        }\n        if (this.offset != that.offset) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.advanceLinePaint,\n                that.advanceLinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.advanceLineStroke,\n                that.advanceLineStroke)) {\n            return false;\n        }\n        if (this.advanceLineVisible != that.advanceLineVisible) {\n            return false;\n        }\n        if (this.boundMappedToLastCycle != that.boundMappedToLastCycle) {\n            return false;\n        }\n        return true;\n    }\n","date":"2017-03-08 01:39:11","endLine":1183,"groupId":"1524","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/a0/711e410eeadb46a0a53dcafcf37872009702e1.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof CyclicNumberAxis)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        CyclicNumberAxis that = (CyclicNumberAxis) obj;\n        if (this.period != that.period) {\n            return false;\n        }\n        if (this.offset != that.offset) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.advanceLinePaint,\n                that.advanceLinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.advanceLineStroke,\n                that.advanceLineStroke)) {\n            return false;\n        }\n        if (this.advanceLineVisible != that.advanceLineVisible) {\n            return false;\n        }\n        if (this.boundMappedToLastCycle != that.boundMappedToLastCycle) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/CyclicNumberAxis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1151,"status":"M"}],"commitId":"949365da759b3ea009185090fb4b27e75d768793","commitMessage":"@@@Incorporate required JCommon classes directly.","date":"2017-03-08 01:39:11","modifiedFileCount":"462","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-07-01 12:16:46","codes":[{"authorDate":"2020-07-01 12:16:46","commitOrder":3,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Axis)) {\n            return false;\n        }\n        Axis that = (Axis) obj;\n        if (this.visible != that.visible) {\n            return false;\n        }\n        if (!Objects.equals(this.label, that.label)) {\n            return false;\n        }\n        if (!AttributedStringUtils.equal(this.attributedLabel, \n                that.attributedLabel)) {\n            return false;\n        }\n        if (!Objects.equals(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.labelInsets, that.labelInsets)) {\n            return false;\n        }\n        if (this.labelAngle != that.labelAngle) {\n            return false;\n        }\n        if (!this.labelLocation.equals(that.labelLocation)) {\n            return false;\n        }\n        if (this.axisLineVisible != that.axisLineVisible) {\n            return false;\n        }\n        if (!Objects.equals(this.axisLineStroke, that.axisLineStroke)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.axisLinePaint, that.axisLinePaint)) {\n            return false;\n        }\n        if (this.tickLabelsVisible != that.tickLabelsVisible) {\n            return false;\n        }\n        if (!Objects.equals(this.tickLabelFont, that.tickLabelFont)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.tickLabelPaint, that.tickLabelPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.tickLabelInsets, that.tickLabelInsets)) {\n            return false;\n        }\n        if (this.tickMarksVisible != that.tickMarksVisible) {\n            return false;\n        }\n        if (this.tickMarkInsideLength != that.tickMarkInsideLength) {\n            return false;\n        }\n        if (this.tickMarkOutsideLength != that.tickMarkOutsideLength) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.tickMarkPaint, that.tickMarkPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.tickMarkStroke, that.tickMarkStroke)) {\n            return false;\n        }\n        if (this.minorTickMarksVisible != that.minorTickMarksVisible) {\n            return false;\n        }\n        if (this.minorTickMarkInsideLength != that.minorTickMarkInsideLength) {\n            return false;\n        }\n        if (this.minorTickMarkOutsideLength\n                != that.minorTickMarkOutsideLength) {\n            return false;\n        }\n        if (this.fixedDimension != that.fixedDimension) {\n            return false;\n        }\n        return true;\n    }\n","date":"2020-07-01 12:16:46","endLine":1648,"groupId":"101860","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/6a/dd4f4a453bb58a59d4726b3e49031aab84afa1.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Axis)) {\n            return false;\n        }\n        Axis that = (Axis) obj;\n        if (this.visible != that.visible) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.label, that.label)) {\n            return false;\n        }\n        if (!AttributedStringUtils.equal(this.attributedLabel, \n                that.attributedLabel)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.labelInsets, that.labelInsets)) {\n            return false;\n        }\n        if (this.labelAngle != that.labelAngle) {\n            return false;\n        }\n        if (!this.labelLocation.equals(that.labelLocation)) {\n            return false;\n        }\n        if (this.axisLineVisible != that.axisLineVisible) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.axisLineStroke, that.axisLineStroke)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.axisLinePaint, that.axisLinePaint)) {\n            return false;\n        }\n        if (this.tickLabelsVisible != that.tickLabelsVisible) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.tickLabelFont, that.tickLabelFont)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.tickLabelPaint, that.tickLabelPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(\n            this.tickLabelInsets, that.tickLabelInsets\n        )) {\n            return false;\n        }\n        if (this.tickMarksVisible != that.tickMarksVisible) {\n            return false;\n        }\n        if (this.tickMarkInsideLength != that.tickMarkInsideLength) {\n            return false;\n        }\n        if (this.tickMarkOutsideLength != that.tickMarkOutsideLength) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.tickMarkPaint, that.tickMarkPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.tickMarkStroke, that.tickMarkStroke)) {\n            return false;\n        }\n        if (this.minorTickMarksVisible != that.minorTickMarksVisible) {\n            return false;\n        }\n        if (this.minorTickMarkInsideLength != that.minorTickMarkInsideLength) {\n            return false;\n        }\n        if (this.minorTickMarkOutsideLength\n                != that.minorTickMarkOutsideLength) {\n            return false;\n        }\n        if (this.fixedDimension != that.fixedDimension) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/Axis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1565,"status":"M"},{"authorDate":"2020-07-01 12:16:46","commitOrder":3,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof CyclicNumberAxis)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        CyclicNumberAxis that = (CyclicNumberAxis) obj;\n        if (this.period != that.period) {\n            return false;\n        }\n        if (this.offset != that.offset) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.advanceLinePaint,\n                that.advanceLinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.advanceLineStroke, that.advanceLineStroke)) {\n            return false;\n        }\n        if (this.advanceLineVisible != that.advanceLineVisible) {\n            return false;\n        }\n        if (this.boundMappedToLastCycle != that.boundMappedToLastCycle) {\n            return false;\n        }\n        return true;\n    }\n","date":"2020-07-01 12:16:46","endLine":1164,"groupId":"101860","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/33/2cef0a92a5a84c3d245b98d225f39893bf3751.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof CyclicNumberAxis)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        CyclicNumberAxis that = (CyclicNumberAxis) obj;\n        if (this.period != that.period) {\n            return false;\n        }\n        if (this.offset != that.offset) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.advanceLinePaint,\n                that.advanceLinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.advanceLineStroke,\n                that.advanceLineStroke)) {\n            return false;\n        }\n        if (this.advanceLineVisible != that.advanceLineVisible) {\n            return false;\n        }\n        if (this.boundMappedToLastCycle != that.boundMappedToLastCycle) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/CyclicNumberAxis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1133,"status":"M"}],"commitId":"1955cc38345a5ea52879eb186f09cf2e930bd9e6","commitMessage":"@@@Merge pull request #163 from simon04/use-Objects\n\nUse Objects.hashCode.  Objects.equals.  CloneUtils.clone.  CloneUtils.cloneList.  remove ObjectUtils","date":"2020-07-01 12:16:46","modifiedFileCount":"130","status":"M","submitter":"David Gilbert"}]
