[{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.white));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.white));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n        r1.setStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPositiveItemLabelPosition(new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setPositiveItemLabelPosition(new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setCreateEntities(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setCreateEntities(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n    }\n","date":"2016-02-19 15:40:32","endLine":430,"groupId":"1021","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/3b/2dfd5a614592a080f2744c67b4b81c674d356e.src","preCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.white));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.white));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n        r1.setStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPositiveItemLabelPosition(new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setPositiveItemLabelPosition(new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setCreateEntities(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setCreateEntities(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D shape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setShape(shape);\n        r1.setBaseShape(baseShape);\n        r1.setBaseLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setBaseLegendTextPaint(new Color(1, 2, 3));\n\n        LineAndShapeRenderer r2 = (LineAndShapeRenderer) r1.clone();\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.black);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.black);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.yellow);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.yellow);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.yellow);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.yellow);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        shape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.red);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.red);\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextPaint(Color.green);\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(Color.green);\n        assertTrue(r1.equals(r2));\n    }\n","date":"2016-02-19 15:40:32","endLine":621,"groupId":"3230","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/3b/2dfd5a614592a080f2744c67b4b81c674d356e.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D shape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setShape(shape);\n        r1.setBaseShape(baseShape);\n        r1.setBaseLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setBaseLegendTextPaint(new Color(1, 2, 3));\n\n        LineAndShapeRenderer r2 = (LineAndShapeRenderer) r1.clone();\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.black);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.black);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.yellow);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.yellow);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.yellow);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.yellow);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        shape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.red);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.red);\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextPaint(Color.green);\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(Color.green);\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":502,"status":"B"}],"commitId":"1b18adfb8102c34c9287ece406b9dde5751b90b5","commitMessage":"@@@Move test files to standard Maven location.","date":"2016-02-19 15:40:32","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2016-04-25 23:33:48","codes":[{"authorDate":"2016-04-25 23:33:48","commitOrder":2,"curCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n        r1.setStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPositiveItemLabelPosition(new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setPositiveItemLabelPosition(new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setCreateEntities(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setCreateEntities(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n    }\n","date":"2016-04-25 23:33:48","endLine":431,"groupId":"1021","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/8c/61dd279913f1c38df620885037af19fcd0267e.src","preCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.white));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.white));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n        r1.setStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.red,\n                3.0f, 4.0f, Color.gray));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPositiveItemLabelPosition(new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setPositiveItemLabelPosition(new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setCreateEntities(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setCreateEntities(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.blue,\n                3.0f, 4.0f, Color.red));\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2016-04-25 23:33:48","commitOrder":2,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D shape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setShape(shape);\n        r1.setBaseShape(baseShape);\n        r1.setBaseLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setBaseLegendTextPaint(new Color(1, 2, 3));\n        r1.setSeriesItemLabelFont(0, new Font(Font.MONOSPACED, Font.BOLD, 13));\n        r1.setLegendTextFont(0, new Font(Font.MONOSPACED, Font.BOLD, 14));\n        \n        LineAndShapeRenderer r2 = (LineAndShapeRenderer) r1.clone();\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.BLACK);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.BLACK);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        shape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.RED);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.RED);\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextPaint(Color.GREEN);\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(Color.GREEN);\n        assertTrue(r1.equals(r2));\n    }\n","date":"2016-04-25 23:33:48","endLine":630,"groupId":"3230","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/8c/61dd279913f1c38df620885037af19fcd0267e.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D shape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setShape(shape);\n        r1.setBaseShape(baseShape);\n        r1.setBaseLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setBaseLegendTextPaint(new Color(1, 2, 3));\n\n        LineAndShapeRenderer r2 = (LineAndShapeRenderer) r1.clone();\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.black);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.black);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.yellow);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.yellow);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.yellow);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.yellow);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        shape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.red);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.red);\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextPaint(Color.green);\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(Color.green);\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":509,"status":"M"}],"commitId":"86129e001ba438bfff7484eb7b70c1667482fe2b","commitMessage":"@@@Update clone test and capitalise Color constants.","date":"2016-04-25 23:33:48","modifiedFileCount":"1","status":"M","submitter":"David Gilbert"},{"authorTime":"2016-04-28 04:04:36","codes":[{"authorDate":"2016-04-25 23:33:48","commitOrder":3,"curCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n        r1.setStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPositiveItemLabelPosition(new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setPositiveItemLabelPosition(new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setCreateEntities(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setCreateEntities(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n    }\n","date":"2016-04-25 23:33:48","endLine":431,"groupId":"1021","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/8c/61dd279913f1c38df620885037af19fcd0267e.src","preCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n        r1.setStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPositiveItemLabelPosition(new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setPositiveItemLabelPosition(new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setCreateEntities(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setCreateEntities(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"},{"authorDate":"2016-04-28 04:04:36","commitOrder":3,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D shape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setShape(shape);\n        r1.setBaseShape(baseShape);\n        r1.setBaseLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setBaseLegendTextPaint(new Color(1, 2, 3));\n        r1.setSeriesItemLabelFont(0, new Font(Font.MONOSPACED, Font.BOLD, 13));\n        r1.setLegendTextFont(0, new Font(Font.MONOSPACED, Font.BOLD, 14));\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.TOP_LEFT));\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        \n        LineAndShapeRenderer r2 = (LineAndShapeRenderer) r1.clone();\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.BLACK);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.BLACK);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        shape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.RED);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.RED);\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextPaint(Color.GREEN);\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(Color.GREEN);\n        assertTrue(r1.equals(r2));\n    }\n","date":"2016-04-28 04:04:36","endLine":634,"groupId":"3230","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/3c/5a9a216ff815ed69021744fefb6eaa34627870.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D shape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setShape(shape);\n        r1.setBaseShape(baseShape);\n        r1.setBaseLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setBaseLegendTextPaint(new Color(1, 2, 3));\n        r1.setSeriesItemLabelFont(0, new Font(Font.MONOSPACED, Font.BOLD, 13));\n        r1.setLegendTextFont(0, new Font(Font.MONOSPACED, Font.BOLD, 14));\n        \n        LineAndShapeRenderer r2 = (LineAndShapeRenderer) r1.clone();\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.BLACK);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.BLACK);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        shape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.RED);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.RED);\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextPaint(Color.GREEN);\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(Color.GREEN);\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":509,"status":"M"}],"commitId":"8841a7e256b32cf2ef31efece9c5110df657e043","commitMessage":"@@@Update test for cloning failure.","date":"2016-04-28 04:04:36","modifiedFileCount":"1","status":"M","submitter":"David Gilbert"},{"authorTime":"2017-03-10 23:59:03","codes":[{"authorDate":"2017-03-10 23:59:03","commitOrder":4,"curCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n    }\n","date":"2017-03-10 23:59:03","endLine":339,"groupId":"470","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/a9/dda2ef64d222b0dd5d32f705f745866c00921a.src","preCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n        r1.setStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPositiveItemLabelPosition(new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setPositiveItemLabelPosition(new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setCreateEntities(Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setCreateEntities(Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2017-03-10 23:59:03","commitOrder":4,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D shape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setBaseShape(baseShape);\n        r1.setBaseLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setBaseLegendTextPaint(new Color(1, 2, 3));\n        r1.setSeriesItemLabelFont(0, new Font(Font.MONOSPACED, Font.BOLD, 13));\n        r1.setLegendTextFont(0, new Font(Font.MONOSPACED, Font.BOLD, 14));\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.TOP_LEFT));\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        \n        LineAndShapeRenderer r2 = (LineAndShapeRenderer) r1.clone();\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.BLACK);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.BLACK);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.RED);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.RED);\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextPaint(Color.GREEN);\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(Color.GREEN);\n        assertTrue(r1.equals(r2));\n    }\n","date":"2017-03-10 23:59:03","endLine":536,"groupId":"473","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/a9/dda2ef64d222b0dd5d32f705f745866c00921a.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D shape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setShape(shape);\n        r1.setBaseShape(baseShape);\n        r1.setBaseLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setBaseLegendTextPaint(new Color(1, 2, 3));\n        r1.setSeriesItemLabelFont(0, new Font(Font.MONOSPACED, Font.BOLD, 13));\n        r1.setLegendTextFont(0, new Font(Font.MONOSPACED, Font.BOLD, 14));\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.TOP_LEFT));\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        \n        LineAndShapeRenderer r2 = (LineAndShapeRenderer) r1.clone();\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.BLACK);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.BLACK);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        shape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.RED);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.RED);\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextPaint(Color.GREEN);\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(Color.GREEN);\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"M"}],"commitId":"61220d6f207fdee783a87ad7428baa0d61c7ad79","commitMessage":"@@@Remove deprecated code","date":"2017-03-10 23:59:03","modifiedFileCount":"18","status":"M","submitter":"David Gilbert"},{"authorTime":"2017-03-13 17:42:58","codes":[{"authorDate":"2017-03-13 17:42:58","commitOrder":5,"curCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n    }\n","date":"2017-03-13 17:42:58","endLine":339,"groupId":"470","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/ca/8e413ef2b295bca26c33ca9df7899f05651e1c.src","preCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setBaseOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBasePositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setBaseNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setBaseCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2017-03-13 17:42:58","commitOrder":5,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D shape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setDefaultShape(baseShape);\n        r1.setDefaultLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setDefaultLegendTextPaint(new Color(1, 2, 3));\n        r1.setSeriesItemLabelFont(0, new Font(Font.MONOSPACED, Font.BOLD, 13));\n        r1.setLegendTextFont(0, new Font(Font.MONOSPACED, Font.BOLD, 14));\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.TOP_LEFT));\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        \n        LineAndShapeRenderer r2 = (LineAndShapeRenderer) r1.clone();\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.BLACK);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.BLACK);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.RED);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.RED);\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendTextPaint(Color.GREEN);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextPaint(Color.GREEN);\n        assertTrue(r1.equals(r2));\n    }\n","date":"2017-03-13 17:42:58","endLine":536,"groupId":"473","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/ca/8e413ef2b295bca26c33ca9df7899f05651e1c.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D shape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setBaseShape(baseShape);\n        r1.setBaseLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setBaseLegendTextPaint(new Color(1, 2, 3));\n        r1.setSeriesItemLabelFont(0, new Font(Font.MONOSPACED, Font.BOLD, 13));\n        r1.setLegendTextFont(0, new Font(Font.MONOSPACED, Font.BOLD, 14));\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.TOP_LEFT));\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        \n        LineAndShapeRenderer r2 = (LineAndShapeRenderer) r1.clone();\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.BLACK);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.BLACK);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setBaseShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.RED);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.RED);\n        assertTrue(r1.equals(r2));\n\n        r1.setBaseLegendTextPaint(Color.GREEN);\n        assertFalse(r1.equals(r2));\n        r2.setBaseLegendTextPaint(Color.GREEN);\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"M"}],"commitId":"6a67a2027cb181c8d00b88145a1b4b0116c38805","commitMessage":"@@@Change 'base' to 'default' for renderer attributes.","date":"2017-03-13 17:42:58","modifiedFileCount":"35","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-20 19:52:38","codes":[{"authorDate":"2017-03-13 17:42:58","commitOrder":6,"curCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n    }\n","date":"2017-03-13 17:42:58","endLine":339,"groupId":"470","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/ca/8e413ef2b295bca26c33ca9df7899f05651e1c.src","preCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"},{"authorDate":"2020-03-20 19:52:38","commitOrder":6,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D shape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setDefaultShape(baseShape);\n        r1.setDefaultLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setDefaultLegendTextPaint(new Color(1, 2, 3));\n        r1.setSeriesItemLabelFont(0, new Font(Font.MONOSPACED, Font.BOLD, 13));\n        r1.setLegendTextFont(0, new Font(Font.MONOSPACED, Font.BOLD, 14));\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.TOP_LEFT));\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        \n        LineAndShapeRenderer r2 = CloneUtils.clone(r1);\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.BLACK);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.BLACK);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.RED);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.RED);\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendTextPaint(Color.GREEN);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextPaint(Color.GREEN);\n        assertTrue(r1.equals(r2));\n    }\n","date":"2020-03-20 19:52:38","endLine":525,"groupId":"473","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/92/9ebcf36d6b8a99a73b0c7db3e98c137491d11d.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D shape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setDefaultShape(baseShape);\n        r1.setDefaultLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setDefaultLegendTextPaint(new Color(1, 2, 3));\n        r1.setSeriesItemLabelFont(0, new Font(Font.MONOSPACED, Font.BOLD, 13));\n        r1.setLegendTextFont(0, new Font(Font.MONOSPACED, Font.BOLD, 14));\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.TOP_LEFT));\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        \n        LineAndShapeRenderer r2 = (LineAndShapeRenderer) r1.clone();\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.BLACK);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.BLACK);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.RED);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.RED);\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendTextPaint(Color.GREEN);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextPaint(Color.GREEN);\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"M"}],"commitId":"d09d2ba0eb391a301783d95ce120fb206d3589f6","commitMessage":"@@@Fix compiler warnings.","date":"2020-03-20 19:52:38","modifiedFileCount":"12","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-22 14:51:49","codes":[{"authorDate":"2017-03-13 17:42:58","commitOrder":7,"curCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n    }\n","date":"2017-03-13 17:42:58","endLine":339,"groupId":"470","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/ca/8e413ef2b295bca26c33ca9df7899f05651e1c.src","preCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"},{"authorDate":"2020-03-22 14:51:49","commitOrder":7,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setDefaultShape(baseShape);\n        r1.setDefaultLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setDefaultLegendTextPaint(new Color(1, 2, 3));\n        r1.setSeriesItemLabelFont(0, new Font(Font.MONOSPACED, Font.BOLD, 13));\n        r1.setLegendTextFont(0, new Font(Font.MONOSPACED, Font.BOLD, 14));\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.TOP_LEFT));\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        \n        LineAndShapeRenderer r2 = CloneUtils.clone(r1);\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.BLACK);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.BLACK);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.RED);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.RED);\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendTextPaint(Color.GREEN);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextPaint(Color.GREEN);\n        assertTrue(r1.equals(r2));\n    }\n","date":"2020-03-22 14:51:49","endLine":525,"groupId":"473","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/35/b2613cdb0cb8c2c6f83ade411e96f7189e8991.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D shape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setDefaultShape(baseShape);\n        r1.setDefaultLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setDefaultLegendTextPaint(new Color(1, 2, 3));\n        r1.setSeriesItemLabelFont(0, new Font(Font.MONOSPACED, Font.BOLD, 13));\n        r1.setLegendTextFont(0, new Font(Font.MONOSPACED, Font.BOLD, 14));\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.TOP_LEFT));\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        \n        LineAndShapeRenderer r2 = CloneUtils.clone(r1);\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.BLACK);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.BLACK);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.RED);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.RED);\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendTextPaint(Color.GREEN);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextPaint(Color.GREEN);\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"M"}],"commitId":"b60dbc369429414fce1d8625fd2798ec3394c390","commitMessage":"@@@Fix compiler warnings.","date":"2020-03-22 14:51:49","modifiedFileCount":"6","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-22 14:51:49","codes":[{"authorDate":"2021-03-05 13:21:35","commitOrder":8,"curCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setAutoPopulateSeriesPaint(!r1.getAutoPopulateSeriesPaint());\n        assertFalse(r1.equals(r2));\n        r2.setAutoPopulateSeriesPaint(r1.getAutoPopulateSeriesPaint());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setAutoPopulateSeriesFillPaint(!r1.getAutoPopulateSeriesFillPaint());\n        assertFalse(r1.equals(r2));\n        r2.setAutoPopulateSeriesFillPaint(r1.getAutoPopulateSeriesFillPaint());\n        assertTrue(r1.equals(r2));\n        \n        \r\n        r1.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n        \n        \r\n        r1.setAutoPopulateSeriesOutlinePaint(!r1.getAutoPopulateSeriesOutlinePaint());\n        assertFalse(r1.equals(r2));\n        r2.setAutoPopulateSeriesOutlinePaint(r1.getAutoPopulateSeriesOutlinePaint());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setAutoPopulateSeriesStroke(!r1.getAutoPopulateSeriesStroke());\n        assertFalse(r1.equals(r2));\n        r2.setAutoPopulateSeriesStroke(r1.getAutoPopulateSeriesStroke());\n        assertTrue(r1.equals(r2));\n        \n        \r\n        r1.setDefaultStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setAutoPopulateSeriesOutlineStroke(!r1.getAutoPopulateSeriesOutlineStroke());\n        assertFalse(r1.equals(r2));\n        r2.setAutoPopulateSeriesOutlineStroke(r1.getAutoPopulateSeriesOutlineStroke());\n        assertTrue(r1.equals(r2));\n        \n        \r\n        r1.setDefaultOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setAutoPopulateSeriesShape(!r1.getAutoPopulateSeriesShape());\n        assertFalse(r1.equals(r2));\n        r2.setAutoPopulateSeriesShape(r1.getAutoPopulateSeriesShape());\n        assertTrue(r1.equals(r2));\n        \n        \r\n        r1.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n    }\n","date":"2021-03-05 13:21:35","endLine":364,"groupId":"10434","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/9c/bac52f7dff12d5d80234d71f6f6309f28f3a03.src","preCode":"    public void testEquals() {\n        \r\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setSeriesVisible(2, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(2, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultSeriesVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultSeriesVisible(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultSeriesVisibleInLegend(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultSeriesVisibleInLegend(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.WHITE));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        Stroke s = new BasicStroke(3.21f);\n\n        \r\n        r1.setSeriesStroke(1, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(1, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesOutlineStroke(0, s);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultOutlineStroke(s);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultOutlineStroke(s);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(1, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelsVisible(true);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelsVisible(true);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelFont(1, new Font(\"Serif\", Font.BOLD, 9));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelFont(new Font(\"Serif\", Font.PLAIN, 10));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,\n                3.0f, 4.0f, Color.GRAY));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(1, new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemLabelAnchorOffset(3.0);\n        assertFalse(r1.equals(r2));\n        r2.setItemLabelAnchorOffset(3.0);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultCreateEntities(false);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultCreateEntities(false);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Ellipse2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(0, new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 7));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(0, new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,\n                3.0f, 4.0f, Color.RED));\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2020-03-22 14:51:49","commitOrder":8,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setDefaultShape(baseShape);\n        r1.setDefaultLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setDefaultLegendTextPaint(new Color(1, 2, 3));\n        r1.setSeriesItemLabelFont(0, new Font(Font.MONOSPACED, Font.BOLD, 13));\n        r1.setLegendTextFont(0, new Font(Font.MONOSPACED, Font.BOLD, 14));\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.TOP_LEFT));\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        \n        LineAndShapeRenderer r2 = CloneUtils.clone(r1);\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.BLACK);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.BLACK);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.RED);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.RED);\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendTextPaint(Color.GREEN);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextPaint(Color.GREEN);\n        assertTrue(r1.equals(r2));\n    }\n","date":"2020-03-22 14:51:49","endLine":525,"groupId":"10434","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/35/b2613cdb0cb8c2c6f83ade411e96f7189e8991.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        LineAndShapeRenderer r1 = new LineAndShapeRenderer();\n        Rectangle2D baseShape = new Rectangle2D.Double(11.0, 12.0, 13.0, 14.0);\n        r1.setDefaultShape(baseShape);\n        r1.setDefaultLegendShape(new Rectangle(4, 3, 2, 1));\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 3));\n        r1.setDefaultLegendTextPaint(new Color(1, 2, 3));\n        r1.setSeriesItemLabelFont(0, new Font(Font.MONOSPACED, Font.BOLD, 13));\n        r1.setLegendTextFont(0, new Font(Font.MONOSPACED, Font.BOLD, 14));\n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.TOP_LEFT));\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition(\n                ItemLabelAnchor.CENTER, TextAnchor.CENTER));\n        \n        LineAndShapeRenderer r2 = CloneUtils.clone(r1);\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisible(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisible(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesPaint(0, Color.BLACK);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPaint(0, Color.BLACK);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesFillPaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesFillPaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlinePaint(0, Color.YELLOW);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesOutlineStroke(0, new BasicStroke(2.2f));\n        assertTrue(r1.equals(r2));\n\n        baseShape.setRect(4.0, 3.0, 2.0, 1.0);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultShape(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertFalse(r1.equals(r2));\n        r2.setSeriesShape(0, new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelsVisible(0, Boolean.TRUE);\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesItemLabelPaint(0, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelPaint(0, Color.RED);\n        assertTrue(r1.equals(r2));\n        \n        r1.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesNegativeItemLabelPosition(0, new ItemLabelPosition());\n        assertTrue(r1.equals(r2));\n\n        r1.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertFalse(r1.equals(r2));\n        r2.setSeriesCreateEntities(0, Boolean.FALSE);\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertFalse(r1.equals(r2));\n        r2.setLegendShape(0, new Rectangle(9, 7, 3, 4));\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendShape(new Rectangle(3, 4, 1, 5));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendShape(new Rectangle(3, 4, 1, 5));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextFont(1, new Font(\"Dialog\", Font.PLAIN, 33));\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextFont(new Font(\"Dialog\", Font.PLAIN, 11));\n        assertTrue(r1.equals(r2));\n\n        r1.setLegendTextPaint(3, Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setLegendTextPaint(3, Color.RED);\n        assertTrue(r1.equals(r2));\n\n        r1.setDefaultLegendTextPaint(Color.GREEN);\n        assertFalse(r1.equals(r2));\n        r2.setDefaultLegendTextPaint(Color.GREEN);\n        assertTrue(r1.equals(r2));\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/AbstractRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"N"}],"commitId":"666738a016bbc4c8fc6cce2ae4a2821b07d5e67d","commitMessage":"@@@Clean up renderer attribute maps.","date":"2021-03-05 13:21:35","modifiedFileCount":"31","status":"M","submitter":"David Gilbert"}]
