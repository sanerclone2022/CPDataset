[{"authorTime":"2021-02-15 00:42:28","codes":[{"authorDate":"2021-02-15 00:42:28","commitOrder":1,"curCode":"    public static Shape readShape(ObjectInputStream stream)\n        throws IOException, ClassNotFoundException {\n\n        if (stream == null) {\n            throw new IllegalArgumentException(\"Null 'stream' argument.\");\n        }\n        Shape result = null;\n        boolean isNull = stream.readBoolean();\n        if (!isNull) {\n            Class c = (Class) stream.readObject();\n            if (c.equals(Line2D.class)) {\n                double x1 = stream.readDouble();\n                double y1 = stream.readDouble();\n                double x2 = stream.readDouble();\n                double y2 = stream.readDouble();\n                result = new Line2D.Double(x1, y1, x2, y2);\n            }\n            else if (c.equals(Rectangle2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                result = new Rectangle2D.Double(x, y, w, h);\n            }\n            else if (c.equals(Ellipse2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                result = new Ellipse2D.Double(x, y, w, h);\n            }\n            else if (c.equals(Arc2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                double as = stream.readDouble(); \r\n                double ae = stream.readDouble(); \r\n                int at = stream.readInt();       \r\n                result = new Arc2D.Double(x, y, w, h, as, ae, at);\n            }\n            else if (c.equals(GeneralPath.class)) {\n                GeneralPath gp = new GeneralPath();\n                float[] args = new float[6];\n                boolean hasNext = stream.readBoolean();\n                while (!hasNext) {\n                    int type = stream.readInt();\n                    for (int i = 0; i < 6; i++) {\n                        args[i] = stream.readFloat();\n                    }\n                    switch (type) {\n                        case PathIterator.SEG_MOVETO :\n                            gp.moveTo(args[0], args[1]);\n                            break;\n                        case PathIterator.SEG_LINETO :\n                            gp.lineTo(args[0], args[1]);\n                            break;\n                        case PathIterator.SEG_CUBICTO :\n                            gp.curveTo(args[0], args[1], args[2],\n                                    args[3], args[4], args[5]);\n                            break;\n                        case PathIterator.SEG_QUADTO :\n                            gp.quadTo(args[0], args[1], args[2], args[3]);\n                            break;\n                        case PathIterator.SEG_CLOSE :\n                            gp.closePath();\n                            break;\n                        default :\n                            throw new RuntimeException(\n                                    \"JFreeChart - No path exists\");\n                    }\n                    gp.setWindingRule(stream.readInt());\n                    hasNext = stream.readBoolean();\n                }\n                result = gp;\n            }\n            else {\n                result = (Shape) stream.readObject();\n            }\n        }\n        return result;\n\n    }\n","date":"2021-02-15 00:42:28","endLine":400,"groupId":"4352","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"readShape","params":"(ObjectInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/9b/5320eacac4ca89fa24159c9e2b8432e5fc7be4.src","preCode":"    public static Shape readShape(ObjectInputStream stream)\n        throws IOException, ClassNotFoundException {\n\n        if (stream == null) {\n            throw new IllegalArgumentException(\"Null 'stream' argument.\");\n        }\n        Shape result = null;\n        boolean isNull = stream.readBoolean();\n        if (!isNull) {\n            Class c = (Class) stream.readObject();\n            if (c.equals(Line2D.class)) {\n                double x1 = stream.readDouble();\n                double y1 = stream.readDouble();\n                double x2 = stream.readDouble();\n                double y2 = stream.readDouble();\n                result = new Line2D.Double(x1, y1, x2, y2);\n            }\n            else if (c.equals(Rectangle2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                result = new Rectangle2D.Double(x, y, w, h);\n            }\n            else if (c.equals(Ellipse2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                result = new Ellipse2D.Double(x, y, w, h);\n            }\n            else if (c.equals(Arc2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                double as = stream.readDouble(); \r\n                double ae = stream.readDouble(); \r\n                int at = stream.readInt();       \r\n                result = new Arc2D.Double(x, y, w, h, as, ae, at);\n            }\n            else if (c.equals(GeneralPath.class)) {\n                GeneralPath gp = new GeneralPath();\n                float[] args = new float[6];\n                boolean hasNext = stream.readBoolean();\n                while (!hasNext) {\n                    int type = stream.readInt();\n                    for (int i = 0; i < 6; i++) {\n                        args[i] = stream.readFloat();\n                    }\n                    switch (type) {\n                        case PathIterator.SEG_MOVETO :\n                            gp.moveTo(args[0], args[1]);\n                            break;\n                        case PathIterator.SEG_LINETO :\n                            gp.lineTo(args[0], args[1]);\n                            break;\n                        case PathIterator.SEG_CUBICTO :\n                            gp.curveTo(args[0], args[1], args[2],\n                                    args[3], args[4], args[5]);\n                            break;\n                        case PathIterator.SEG_QUADTO :\n                            gp.quadTo(args[0], args[1], args[2], args[3]);\n                            break;\n                        case PathIterator.SEG_CLOSE :\n                            gp.closePath();\n                            break;\n                        default :\n                            throw new RuntimeException(\n                                    \"JFreeChart - No path exists\");\n                    }\n                    gp.setWindingRule(stream.readInt());\n                    hasNext = stream.readBoolean();\n                }\n                result = gp;\n            }\n            else {\n                result = (Shape) stream.readObject();\n            }\n        }\n        return result;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/internal/SerialUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"B"},{"authorDate":"2021-02-15 00:42:28","commitOrder":1,"curCode":"    public static Point2D readPoint2D(ObjectInputStream stream)\n            throws IOException {\n\n        if (stream == null) {\n            throw new IllegalArgumentException(\"Null 'stream' argument.\");\n        }\n        Point2D result = null;\n        boolean isNull = stream.readBoolean();\n        if (!isNull) {\n            double x = stream.readDouble();\n            double y = stream.readDouble();\n            result = new Point2D.Double(x, y);\n        }\n        return result;\n\n    }\n","date":"2021-02-15 00:42:28","endLine":506,"groupId":"4356","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"readPoint2D","params":"(ObjectInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/9b/5320eacac4ca89fa24159c9e2b8432e5fc7be4.src","preCode":"    public static Point2D readPoint2D(ObjectInputStream stream)\n            throws IOException {\n\n        if (stream == null) {\n            throw new IllegalArgumentException(\"Null 'stream' argument.\");\n        }\n        Point2D result = null;\n        boolean isNull = stream.readBoolean();\n        if (!isNull) {\n            double x = stream.readDouble();\n            double y = stream.readDouble();\n            result = new Point2D.Double(x, y);\n        }\n        return result;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/internal/SerialUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":491,"status":"B"}],"commitId":"ac5ff834c6f5aa54abf44a70d27780a4bee84589","commitMessage":"@@@Refactor classes to internal package","date":"2021-02-15 00:42:28","modifiedFileCount":"394","status":"B","submitter":"David Gilbert"},{"authorTime":"2021-03-05 02:08:47","codes":[{"authorDate":"2021-03-05 02:08:47","commitOrder":2,"curCode":"    public static Shape readShape(ObjectInputStream stream)\n            throws IOException, ClassNotFoundException {\n\n        Args.nullNotPermitted(stream, \"stream\");\n        Shape result = null;\n        boolean isNull = stream.readBoolean();\n        if (!isNull) {\n            Class c = (Class) stream.readObject();\n            if (c.equals(Line2D.class)) {\n                double x1 = stream.readDouble();\n                double y1 = stream.readDouble();\n                double x2 = stream.readDouble();\n                double y2 = stream.readDouble();\n                result = new Line2D.Double(x1, y1, x2, y2);\n            } else if (c.equals(Rectangle2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                result = new Rectangle2D.Double(x, y, w, h);\n            } else if (c.equals(Ellipse2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                result = new Ellipse2D.Double(x, y, w, h);\n            } else if (c.equals(Arc2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                double as = stream.readDouble(); \r\n                double ae = stream.readDouble(); \r\n                int at = stream.readInt();       \r\n                result = new Arc2D.Double(x, y, w, h, as, ae, at);\n            } else if (c.equals(GeneralPath.class)) {\n                GeneralPath gp = new GeneralPath();\n                float[] args = new float[6];\n                boolean hasNext = stream.readBoolean();\n                while (!hasNext) {\n                    int type = stream.readInt();\n                    for (int i = 0; i < 6; i++) {\n                        args[i] = stream.readFloat();\n                    }\n                    switch (type) {\n                        case PathIterator.SEG_MOVETO :\n                            gp.moveTo(args[0], args[1]);\n                            break;\n                        case PathIterator.SEG_LINETO :\n                            gp.lineTo(args[0], args[1]);\n                            break;\n                        case PathIterator.SEG_CUBICTO :\n                            gp.curveTo(args[0], args[1], args[2],\n                                    args[3], args[4], args[5]);\n                            break;\n                        case PathIterator.SEG_QUADTO :\n                            gp.quadTo(args[0], args[1], args[2], args[3]);\n                            break;\n                        case PathIterator.SEG_CLOSE :\n                            gp.closePath();\n                            break;\n                        default :\n                            throw new RuntimeException(\n                                    \"JFreeChart - No path exists\");\n                    }\n                    gp.setWindingRule(stream.readInt());\n                    hasNext = stream.readBoolean();\n                }\n                result = gp;\n            } else {\n                result = (Shape) stream.readObject();\n            }\n        }\n        return result;\n\n    }\n","date":"2021-03-05 02:08:47","endLine":367,"groupId":"101592","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"readShape","params":"(ObjectInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/2f/c75af5a04403292a893b0cd74ab078c2765a6d.src","preCode":"    public static Shape readShape(ObjectInputStream stream)\n        throws IOException, ClassNotFoundException {\n\n        if (stream == null) {\n            throw new IllegalArgumentException(\"Null 'stream' argument.\");\n        }\n        Shape result = null;\n        boolean isNull = stream.readBoolean();\n        if (!isNull) {\n            Class c = (Class) stream.readObject();\n            if (c.equals(Line2D.class)) {\n                double x1 = stream.readDouble();\n                double y1 = stream.readDouble();\n                double x2 = stream.readDouble();\n                double y2 = stream.readDouble();\n                result = new Line2D.Double(x1, y1, x2, y2);\n            }\n            else if (c.equals(Rectangle2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                result = new Rectangle2D.Double(x, y, w, h);\n            }\n            else if (c.equals(Ellipse2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                result = new Ellipse2D.Double(x, y, w, h);\n            }\n            else if (c.equals(Arc2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                double as = stream.readDouble(); \r\n                double ae = stream.readDouble(); \r\n                int at = stream.readInt();       \r\n                result = new Arc2D.Double(x, y, w, h, as, ae, at);\n            }\n            else if (c.equals(GeneralPath.class)) {\n                GeneralPath gp = new GeneralPath();\n                float[] args = new float[6];\n                boolean hasNext = stream.readBoolean();\n                while (!hasNext) {\n                    int type = stream.readInt();\n                    for (int i = 0; i < 6; i++) {\n                        args[i] = stream.readFloat();\n                    }\n                    switch (type) {\n                        case PathIterator.SEG_MOVETO :\n                            gp.moveTo(args[0], args[1]);\n                            break;\n                        case PathIterator.SEG_LINETO :\n                            gp.lineTo(args[0], args[1]);\n                            break;\n                        case PathIterator.SEG_CUBICTO :\n                            gp.curveTo(args[0], args[1], args[2],\n                                    args[3], args[4], args[5]);\n                            break;\n                        case PathIterator.SEG_QUADTO :\n                            gp.quadTo(args[0], args[1], args[2], args[3]);\n                            break;\n                        case PathIterator.SEG_CLOSE :\n                            gp.closePath();\n                            break;\n                        default :\n                            throw new RuntimeException(\n                                    \"JFreeChart - No path exists\");\n                    }\n                    gp.setWindingRule(stream.readInt());\n                    hasNext = stream.readBoolean();\n                }\n                result = gp;\n            }\n            else {\n                result = (Shape) stream.readObject();\n            }\n        }\n        return result;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/internal/SerialUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"},{"authorDate":"2021-03-05 02:08:47","commitOrder":2,"curCode":"    public static Point2D readPoint2D(ObjectInputStream stream)\n            throws IOException {\n        Args.nullNotPermitted(stream, \"stream\");\n        Point2D result = null;\n        boolean isNull = stream.readBoolean();\n        if (!isNull) {\n            double x = stream.readDouble();\n            double y = stream.readDouble();\n            result = new Point2D.Double(x, y);\n        }\n        return result;\n    }\n","date":"2021-03-05 02:08:47","endLine":461,"groupId":"101592","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"readPoint2D","params":"(ObjectInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/2f/c75af5a04403292a893b0cd74ab078c2765a6d.src","preCode":"    public static Point2D readPoint2D(ObjectInputStream stream)\n            throws IOException {\n\n        if (stream == null) {\n            throw new IllegalArgumentException(\"Null 'stream' argument.\");\n        }\n        Point2D result = null;\n        boolean isNull = stream.readBoolean();\n        if (!isNull) {\n            double x = stream.readDouble();\n            double y = stream.readDouble();\n            result = new Point2D.Double(x, y);\n        }\n        return result;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/internal/SerialUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"M"}],"commitId":"23f2266614cdb362870069a124af4e4335cc54a6","commitMessage":"@@@Delete PaintList class (replace with Map<Integer.  Paint>)","date":"2021-03-05 02:08:47","modifiedFileCount":"8","status":"M","submitter":"David Gilbert"}]
