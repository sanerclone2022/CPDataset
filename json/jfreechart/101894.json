[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public void add(Number mean, Number standardDeviation,\n                    Comparable rowKey, Comparable columnKey) {\n        MeanAndStandardDeviation item = new MeanAndStandardDeviation(\n                mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n\n        double m = Double.NaN;\n        double sd = Double.NaN;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();\n        }\n\n        \r\n        int r = this.data.getColumnIndex(columnKey);\n        int c = this.data.getRowIndex(rowKey);\n        if ((r == this.maximumRangeValueRow && c\n                == this.maximumRangeValueColumn) || (r\n                == this.maximumRangeValueIncStdDevRow && c\n                == this.maximumRangeValueIncStdDevColumn) || (r\n                == this.minimumRangeValueRow && c\n                == this.minimumRangeValueColumn) || (r\n                == this.minimumRangeValueIncStdDevRow && c\n                == this.minimumRangeValueIncStdDevColumn)) {\n\n            \r\n            updateBounds();\n        }\n        else {\n            if (!Double.isNaN(m)) {\n                if (Double.isNaN(this.maximumRangeValue)\n                        || m > this.maximumRangeValue) {\n                    this.maximumRangeValue = m;\n                    this.maximumRangeValueRow = r;\n                    this.maximumRangeValueColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m + sd)) {\n                if (Double.isNaN(this.maximumRangeValueIncStdDev)\n                        || (m + sd) > this.maximumRangeValueIncStdDev) {\n                    this.maximumRangeValueIncStdDev = m + sd;\n                    this.maximumRangeValueIncStdDevRow = r;\n                    this.maximumRangeValueIncStdDevColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m)) {\n                if (Double.isNaN(this.minimumRangeValue)\n                        || m < this.minimumRangeValue) {\n                    this.minimumRangeValue = m;\n                    this.minimumRangeValueRow = r;\n                    this.minimumRangeValueColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m - sd)) {\n                if (Double.isNaN(this.minimumRangeValueIncStdDev)\n                        || (m - sd) < this.minimumRangeValueIncStdDev) {\n                    this.minimumRangeValueIncStdDev = m - sd;\n                    this.minimumRangeValueIncStdDevRow = r;\n                    this.minimumRangeValueIncStdDevColumn = c;\n                }\n            }\n        }\n        fireDatasetChanged();\n    }\n","date":"2016-02-19 16:24:22","endLine":433,"groupId":"3804","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"add","params":"(Numbermean@NumberstandardDeviation@ComparablerowKey@ComparablecolumnKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/db/9232f1987fc9b3ce9d66e0421025042d7d125e.src","preCode":"    public void add(Number mean, Number standardDeviation,\n                    Comparable rowKey, Comparable columnKey) {\n        MeanAndStandardDeviation item = new MeanAndStandardDeviation(\n                mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n\n        double m = Double.NaN;\n        double sd = Double.NaN;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();\n        }\n\n        \r\n        int r = this.data.getColumnIndex(columnKey);\n        int c = this.data.getRowIndex(rowKey);\n        if ((r == this.maximumRangeValueRow && c\n                == this.maximumRangeValueColumn) || (r\n                == this.maximumRangeValueIncStdDevRow && c\n                == this.maximumRangeValueIncStdDevColumn) || (r\n                == this.minimumRangeValueRow && c\n                == this.minimumRangeValueColumn) || (r\n                == this.minimumRangeValueIncStdDevRow && c\n                == this.minimumRangeValueIncStdDevColumn)) {\n\n            \r\n            updateBounds();\n        }\n        else {\n            if (!Double.isNaN(m)) {\n                if (Double.isNaN(this.maximumRangeValue)\n                        || m > this.maximumRangeValue) {\n                    this.maximumRangeValue = m;\n                    this.maximumRangeValueRow = r;\n                    this.maximumRangeValueColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m + sd)) {\n                if (Double.isNaN(this.maximumRangeValueIncStdDev)\n                        || (m + sd) > this.maximumRangeValueIncStdDev) {\n                    this.maximumRangeValueIncStdDev = m + sd;\n                    this.maximumRangeValueIncStdDevRow = r;\n                    this.maximumRangeValueIncStdDevColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m)) {\n                if (Double.isNaN(this.minimumRangeValue)\n                        || m < this.minimumRangeValue) {\n                    this.minimumRangeValue = m;\n                    this.minimumRangeValueRow = r;\n                    this.minimumRangeValueColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m - sd)) {\n                if (Double.isNaN(this.minimumRangeValueIncStdDev)\n                        || (m - sd) < this.minimumRangeValueIncStdDev) {\n                    this.minimumRangeValueIncStdDev = m - sd;\n                    this.minimumRangeValueIncStdDevRow = r;\n                    this.minimumRangeValueIncStdDevColumn = c;\n                }\n            }\n        }\n        fireDatasetChanged();\n    }\n","realPath":"src/main/java/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public void remove(Comparable rowKey, Comparable columnKey) {\n        \r\n        int r = getRowIndex(rowKey);\n        int c = getColumnIndex(columnKey);\n        this.data.removeObject(rowKey, columnKey);\n\n        \r\n        \r\n        if ((r == this.maximumRangeValueRow && c\n                == this.maximumRangeValueColumn) || (r\n                == this.maximumRangeValueIncStdDevRow && c\n                == this.maximumRangeValueIncStdDevColumn) || (r\n                == this.minimumRangeValueRow && c\n                == this.minimumRangeValueColumn) || (r\n                == this.minimumRangeValueIncStdDevRow && c\n                == this.minimumRangeValueIncStdDevColumn)) {\n\n            \r\n            updateBounds();\n        }\n\n        fireDatasetChanged();\n    }\n","date":"2016-02-19 16:24:22","endLine":468,"groupId":"3804","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"remove","params":"(ComparablerowKey@ComparablecolumnKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/db/9232f1987fc9b3ce9d66e0421025042d7d125e.src","preCode":"    public void remove(Comparable rowKey, Comparable columnKey) {\n        \r\n        int r = getRowIndex(rowKey);\n        int c = getColumnIndex(columnKey);\n        this.data.removeObject(rowKey, columnKey);\n\n        \r\n        \r\n        if ((r == this.maximumRangeValueRow && c\n                == this.maximumRangeValueColumn) || (r\n                == this.maximumRangeValueIncStdDevRow && c\n                == this.maximumRangeValueIncStdDevColumn) || (r\n                == this.minimumRangeValueRow && c\n                == this.minimumRangeValueColumn) || (r\n                == this.minimumRangeValueIncStdDevRow && c\n                == this.minimumRangeValueIncStdDevColumn)) {\n\n            \r\n            updateBounds();\n        }\n\n        fireDatasetChanged();\n    }\n","realPath":"src/main/java/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":446,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2020-03-21 13:31:32","codes":[{"authorDate":"2020-03-21 13:31:32","commitOrder":2,"curCode":"    public void add(Number mean, Number standardDeviation,\n                    R rowKey, C columnKey) {\n        MeanAndStandardDeviation item = new MeanAndStandardDeviation(\n                mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n\n        double m = Double.NaN;\n        double sd = Double.NaN;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();\n        }\n\n        \r\n        int r = this.data.getColumnIndex(columnKey);\n        int c = this.data.getRowIndex(rowKey);\n        if ((r == this.maximumRangeValueRow && c\n                == this.maximumRangeValueColumn) || (r\n                == this.maximumRangeValueIncStdDevRow && c\n                == this.maximumRangeValueIncStdDevColumn) || (r\n                == this.minimumRangeValueRow && c\n                == this.minimumRangeValueColumn) || (r\n                == this.minimumRangeValueIncStdDevRow && c\n                == this.minimumRangeValueIncStdDevColumn)) {\n\n            \r\n            updateBounds();\n        }\n        else {\n            if (!Double.isNaN(m)) {\n                if (Double.isNaN(this.maximumRangeValue)\n                        || m > this.maximumRangeValue) {\n                    this.maximumRangeValue = m;\n                    this.maximumRangeValueRow = r;\n                    this.maximumRangeValueColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m + sd)) {\n                if (Double.isNaN(this.maximumRangeValueIncStdDev)\n                        || (m + sd) > this.maximumRangeValueIncStdDev) {\n                    this.maximumRangeValueIncStdDev = m + sd;\n                    this.maximumRangeValueIncStdDevRow = r;\n                    this.maximumRangeValueIncStdDevColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m)) {\n                if (Double.isNaN(this.minimumRangeValue)\n                        || m < this.minimumRangeValue) {\n                    this.minimumRangeValue = m;\n                    this.minimumRangeValueRow = r;\n                    this.minimumRangeValueColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m - sd)) {\n                if (Double.isNaN(this.minimumRangeValueIncStdDev)\n                        || (m - sd) < this.minimumRangeValueIncStdDev) {\n                    this.minimumRangeValueIncStdDev = m - sd;\n                    this.minimumRangeValueIncStdDevRow = r;\n                    this.minimumRangeValueIncStdDevColumn = c;\n                }\n            }\n        }\n        fireDatasetChanged();\n    }\n","date":"2020-03-21 13:31:32","endLine":438,"groupId":"101894","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"add","params":"(Numbermean@NumberstandardDeviation@RrowKey@CcolumnKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/04/7e09b11f2e497aa8c759a7092039d707f70cc3.src","preCode":"    public void add(Number mean, Number standardDeviation,\n                    Comparable rowKey, Comparable columnKey) {\n        MeanAndStandardDeviation item = new MeanAndStandardDeviation(\n                mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n\n        double m = Double.NaN;\n        double sd = Double.NaN;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();\n        }\n\n        \r\n        int r = this.data.getColumnIndex(columnKey);\n        int c = this.data.getRowIndex(rowKey);\n        if ((r == this.maximumRangeValueRow && c\n                == this.maximumRangeValueColumn) || (r\n                == this.maximumRangeValueIncStdDevRow && c\n                == this.maximumRangeValueIncStdDevColumn) || (r\n                == this.minimumRangeValueRow && c\n                == this.minimumRangeValueColumn) || (r\n                == this.minimumRangeValueIncStdDevRow && c\n                == this.minimumRangeValueIncStdDevColumn)) {\n\n            \r\n            updateBounds();\n        }\n        else {\n            if (!Double.isNaN(m)) {\n                if (Double.isNaN(this.maximumRangeValue)\n                        || m > this.maximumRangeValue) {\n                    this.maximumRangeValue = m;\n                    this.maximumRangeValueRow = r;\n                    this.maximumRangeValueColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m + sd)) {\n                if (Double.isNaN(this.maximumRangeValueIncStdDev)\n                        || (m + sd) > this.maximumRangeValueIncStdDev) {\n                    this.maximumRangeValueIncStdDev = m + sd;\n                    this.maximumRangeValueIncStdDevRow = r;\n                    this.maximumRangeValueIncStdDevColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m)) {\n                if (Double.isNaN(this.minimumRangeValue)\n                        || m < this.minimumRangeValue) {\n                    this.minimumRangeValue = m;\n                    this.minimumRangeValueRow = r;\n                    this.minimumRangeValueColumn = c;\n                }\n            }\n\n            if (!Double.isNaN(m - sd)) {\n                if (Double.isNaN(this.minimumRangeValueIncStdDev)\n                        || (m - sd) < this.minimumRangeValueIncStdDev) {\n                    this.minimumRangeValueIncStdDev = m - sd;\n                    this.minimumRangeValueIncStdDevRow = r;\n                    this.minimumRangeValueIncStdDevColumn = c;\n                }\n            }\n        }\n        fireDatasetChanged();\n    }\n","realPath":"src/main/java/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"M"},{"authorDate":"2020-03-21 13:31:32","commitOrder":2,"curCode":"    public void remove(R rowKey, C columnKey) {\n        \r\n        int r = getRowIndex(rowKey);\n        int c = getColumnIndex(columnKey);\n        this.data.removeObject(rowKey, columnKey);\n\n        \r\n        \r\n        if ((r == this.maximumRangeValueRow && c\n                == this.maximumRangeValueColumn) || (r\n                == this.maximumRangeValueIncStdDevRow && c\n                == this.maximumRangeValueIncStdDevColumn) || (r\n                == this.minimumRangeValueRow && c\n                == this.minimumRangeValueColumn) || (r\n                == this.minimumRangeValueIncStdDevRow && c\n                == this.minimumRangeValueIncStdDevColumn)) {\n\n            \r\n            updateBounds();\n        }\n\n        fireDatasetChanged();\n    }\n","date":"2020-03-21 13:31:32","endLine":473,"groupId":"101894","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"remove","params":"(RrowKey@CcolumnKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/04/7e09b11f2e497aa8c759a7092039d707f70cc3.src","preCode":"    public void remove(Comparable rowKey, Comparable columnKey) {\n        \r\n        int r = getRowIndex(rowKey);\n        int c = getColumnIndex(columnKey);\n        this.data.removeObject(rowKey, columnKey);\n\n        \r\n        \r\n        if ((r == this.maximumRangeValueRow && c\n                == this.maximumRangeValueColumn) || (r\n                == this.maximumRangeValueIncStdDevRow && c\n                == this.maximumRangeValueIncStdDevColumn) || (r\n                == this.minimumRangeValueRow && c\n                == this.minimumRangeValueColumn) || (r\n                == this.minimumRangeValueIncStdDevRow && c\n                == this.minimumRangeValueIncStdDevColumn)) {\n\n            \r\n            updateBounds();\n        }\n\n        fireDatasetChanged();\n    }\n","realPath":"src/main/java/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"}],"commitId":"eb812431e7ef6f5acdd5d9be3c9369ef5513a176","commitMessage":"@@@Add generics.","date":"2020-03-21 13:31:32","modifiedFileCount":"4","status":"M","submitter":"David Gilbert"}]
