[{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testRemoveSeries() {\n        XIntervalSeriesCollection c = new XIntervalSeriesCollection();\n        XIntervalSeries s1 = new XIntervalSeries(\"s1\");\n        c.addSeries(s1);\n        c.removeSeries(0);\n        assertEquals(0, c.getSeriesCount());\n        c.addSeries(s1);\n\n        boolean pass = false;\n        try {\n            c.removeSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            c.removeSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2016-02-19 15:40:32","endLine":155,"groupId":"537","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoveSeries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/d1/5cf5e5bf9fa340f9995dd42f2f0a43c8876ee1.src","preCode":"    public void testRemoveSeries() {\n        XIntervalSeriesCollection c = new XIntervalSeriesCollection();\n        XIntervalSeries s1 = new XIntervalSeries(\"s1\");\n        c.addSeries(s1);\n        c.removeSeries(0);\n        assertEquals(0, c.getSeriesCount());\n        c.addSeries(s1);\n\n        boolean pass = false;\n        try {\n            c.removeSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            c.removeSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/xy/XIntervalSeriesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"B"},{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testRemoveSeries() {\n        XYIntervalSeriesCollection c = new XYIntervalSeriesCollection();\n        XYIntervalSeries s1 = new XYIntervalSeries(\"s1\");\n        c.addSeries(s1);\n        c.removeSeries(0);\n        assertEquals(0, c.getSeriesCount());\n        c.addSeries(s1);\n\n        boolean pass = false;\n        try {\n            c.removeSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            c.removeSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2016-02-19 15:40:32","endLine":163,"groupId":"537","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveSeries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/14/e72dc000ed3f965f81e774e122e1a471ff44d4.src","preCode":"    public void testRemoveSeries() {\n        XYIntervalSeriesCollection c = new XYIntervalSeriesCollection();\n        XYIntervalSeries s1 = new XYIntervalSeries(\"s1\");\n        c.addSeries(s1);\n        c.removeSeries(0);\n        assertEquals(0, c.getSeriesCount());\n        c.addSeries(s1);\n\n        boolean pass = false;\n        try {\n            c.removeSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            c.removeSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/xy/XYIntervalSeriesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"}],"commitId":"1b18adfb8102c34c9287ece406b9dde5751b90b5","commitMessage":"@@@Move test files to standard Maven location.","date":"2016-02-19 15:40:32","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2020-03-22 19:36:23","codes":[{"authorDate":"2020-03-22 19:36:23","commitOrder":2,"curCode":"    public void testRemoveSeries() {\n        XIntervalSeriesCollection<String> c = new XIntervalSeriesCollection<>();\n        XIntervalSeries<String> s1 = new XIntervalSeries<>(\"s1\");\n        c.addSeries(s1);\n        c.removeSeries(0);\n        assertEquals(0, c.getSeriesCount());\n        c.addSeries(s1);\n\n        boolean pass = false;\n        try {\n            c.removeSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            c.removeSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2020-03-22 19:36:23","endLine":149,"groupId":"10914","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoveSeries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/5d/ded441f0ac45d5bacbdac0a1afa5b7b97160be.src","preCode":"    public void testRemoveSeries() {\n        XIntervalSeriesCollection c = new XIntervalSeriesCollection();\n        XIntervalSeries s1 = new XIntervalSeries(\"s1\");\n        c.addSeries(s1);\n        c.removeSeries(0);\n        assertEquals(0, c.getSeriesCount());\n        c.addSeries(s1);\n\n        boolean pass = false;\n        try {\n            c.removeSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            c.removeSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/xy/XIntervalSeriesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2020-03-22 19:36:23","commitOrder":2,"curCode":"    public void testRemoveSeries() {\n        XYIntervalSeriesCollection<String> c = new XYIntervalSeriesCollection<>();\n        XYIntervalSeries<String> s1 = new XYIntervalSeries<>(\"s1\");\n        c.addSeries(s1);\n        c.removeSeries(0);\n        assertEquals(0, c.getSeriesCount());\n        c.addSeries(s1);\n\n        boolean pass = false;\n        try {\n            c.removeSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            c.removeSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2020-03-22 19:36:23","endLine":156,"groupId":"10914","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveSeries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/d8/ef64a7860f7f546eef94794879571761225ce6.src","preCode":"    public void testRemoveSeries() {\n        XYIntervalSeriesCollection c = new XYIntervalSeriesCollection();\n        XYIntervalSeries s1 = new XYIntervalSeries(\"s1\");\n        c.addSeries(s1);\n        c.removeSeries(0);\n        assertEquals(0, c.getSeriesCount());\n        c.addSeries(s1);\n\n        boolean pass = false;\n        try {\n            c.removeSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            c.removeSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/xy/XYIntervalSeriesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"f7ded380c87f815662e1c023e0aa68a1a27496c4","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-22 19:36:23","modifiedFileCount":"45","status":"M","submitter":"David Gilbert"}]
