[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public DefaultStatisticalCategoryDataset() {\n        this.data = new KeyedObjects2D();\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        this.minimumRangeValueIncStdDev = Double.NaN;\n        this.minimumRangeValueIncStdDevRow = -1;\n        this.minimumRangeValueIncStdDevColumn = -1;\n        this.maximumRangeValueIncStdDev = Double.NaN;\n        this.maximumRangeValueIncStdDevRow = -1;\n        this.maximumRangeValueIncStdDevColumn = -1;\n    }\n","date":"2016-02-19 16:24:22","endLine":144,"groupId":"1497","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"DefaultStatisticalCategoryDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/db/9232f1987fc9b3ce9d66e0421025042d7d125e.src","preCode":"    public DefaultStatisticalCategoryDataset() {\n        this.data = new KeyedObjects2D();\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        this.minimumRangeValueIncStdDev = Double.NaN;\n        this.minimumRangeValueIncStdDevRow = -1;\n        this.minimumRangeValueIncStdDevColumn = -1;\n        this.maximumRangeValueIncStdDev = Double.NaN;\n        this.maximumRangeValueIncStdDevRow = -1;\n        this.maximumRangeValueIncStdDevColumn = -1;\n    }\n","realPath":"src/main/java/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    private void updateBounds() {\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValueIncStdDev = Double.NaN;\n        this.maximumRangeValueIncStdDevRow = -1;\n        this.maximumRangeValueIncStdDevColumn = -1;\n        this.minimumRangeValueIncStdDev = Double.NaN;\n        this.minimumRangeValueIncStdDevRow = -1;\n        this.minimumRangeValueIncStdDevColumn = -1;\n\n        int rowCount = this.data.getRowCount();\n        int columnCount = this.data.getColumnCount();\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < columnCount; c++) {\n                MeanAndStandardDeviation masd = (MeanAndStandardDeviation)\n                        this.data.getObject(r, c);\n                if (masd == null) {\n                    continue;\n                }\n                double m = masd.getMeanValue();\n                double sd = masd.getStandardDeviationValue();\n\n                if (!Double.isNaN(m)) {\n\n                    \r\n                    if (Double.isNaN(this.maximumRangeValue)) {\n                        this.maximumRangeValue = m;\n                        this.maximumRangeValueRow = r;\n                        this.maximumRangeValueColumn = c;\n                    }\n                    else {\n                        if (m > this.maximumRangeValue) {\n                            this.maximumRangeValue = m;\n                            this.maximumRangeValueRow = r;\n                            this.maximumRangeValueColumn = c;\n                        }\n                    }\n\n                    \r\n                    if (Double.isNaN(this.minimumRangeValue)) {\n                        this.minimumRangeValue = m;\n                        this.minimumRangeValueRow = r;\n                        this.minimumRangeValueColumn = c;\n                    }\n                    else {\n                        if (m < this.minimumRangeValue) {\n                            this.minimumRangeValue = m;\n                            this.minimumRangeValueRow = r;\n                            this.minimumRangeValueColumn = c;\n                        }\n                    }\n\n                    if (!Double.isNaN(sd)) {\n                        \r\n                        if (Double.isNaN(this.maximumRangeValueIncStdDev)) {\n                            this.maximumRangeValueIncStdDev = m + sd;\n                            this.maximumRangeValueIncStdDevRow = r;\n                            this.maximumRangeValueIncStdDevColumn = c;\n                        }\n                        else {\n                            if (m + sd > this.maximumRangeValueIncStdDev) {\n                                this.maximumRangeValueIncStdDev = m + sd;\n                                this.maximumRangeValueIncStdDevRow = r;\n                                this.maximumRangeValueIncStdDevColumn = c;\n                            }\n                        }\n\n                        \r\n                        if (Double.isNaN(this.minimumRangeValueIncStdDev)) {\n                            this.minimumRangeValueIncStdDev = m - sd;\n                            this.minimumRangeValueIncStdDevRow = r;\n                            this.minimumRangeValueIncStdDevColumn = c;\n                        }\n                        else {\n                            if (m - sd < this.minimumRangeValueIncStdDev) {\n                                this.minimumRangeValueIncStdDev = m - sd;\n                                this.minimumRangeValueIncStdDevRow = r;\n                                this.minimumRangeValueIncStdDevColumn = c;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","date":"2016-02-19 16:24:22","endLine":638,"groupId":"986","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"updateBounds","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/db/9232f1987fc9b3ce9d66e0421025042d7d125e.src","preCode":"    private void updateBounds() {\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValueIncStdDev = Double.NaN;\n        this.maximumRangeValueIncStdDevRow = -1;\n        this.maximumRangeValueIncStdDevColumn = -1;\n        this.minimumRangeValueIncStdDev = Double.NaN;\n        this.minimumRangeValueIncStdDevRow = -1;\n        this.minimumRangeValueIncStdDevColumn = -1;\n\n        int rowCount = this.data.getRowCount();\n        int columnCount = this.data.getColumnCount();\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < columnCount; c++) {\n                MeanAndStandardDeviation masd = (MeanAndStandardDeviation)\n                        this.data.getObject(r, c);\n                if (masd == null) {\n                    continue;\n                }\n                double m = masd.getMeanValue();\n                double sd = masd.getStandardDeviationValue();\n\n                if (!Double.isNaN(m)) {\n\n                    \r\n                    if (Double.isNaN(this.maximumRangeValue)) {\n                        this.maximumRangeValue = m;\n                        this.maximumRangeValueRow = r;\n                        this.maximumRangeValueColumn = c;\n                    }\n                    else {\n                        if (m > this.maximumRangeValue) {\n                            this.maximumRangeValue = m;\n                            this.maximumRangeValueRow = r;\n                            this.maximumRangeValueColumn = c;\n                        }\n                    }\n\n                    \r\n                    if (Double.isNaN(this.minimumRangeValue)) {\n                        this.minimumRangeValue = m;\n                        this.minimumRangeValueRow = r;\n                        this.minimumRangeValueColumn = c;\n                    }\n                    else {\n                        if (m < this.minimumRangeValue) {\n                            this.minimumRangeValue = m;\n                            this.minimumRangeValueRow = r;\n                            this.minimumRangeValueColumn = c;\n                        }\n                    }\n\n                    if (!Double.isNaN(sd)) {\n                        \r\n                        if (Double.isNaN(this.maximumRangeValueIncStdDev)) {\n                            this.maximumRangeValueIncStdDev = m + sd;\n                            this.maximumRangeValueIncStdDevRow = r;\n                            this.maximumRangeValueIncStdDevColumn = c;\n                        }\n                        else {\n                            if (m + sd > this.maximumRangeValueIncStdDev) {\n                                this.maximumRangeValueIncStdDev = m + sd;\n                                this.maximumRangeValueIncStdDevRow = r;\n                                this.maximumRangeValueIncStdDevColumn = c;\n                            }\n                        }\n\n                        \r\n                        if (Double.isNaN(this.minimumRangeValueIncStdDev)) {\n                            this.minimumRangeValueIncStdDev = m - sd;\n                            this.minimumRangeValueIncStdDevRow = r;\n                            this.minimumRangeValueIncStdDevColumn = c;\n                        }\n                        else {\n                            if (m - sd < this.minimumRangeValueIncStdDev) {\n                                this.minimumRangeValueIncStdDev = m - sd;\n                                this.minimumRangeValueIncStdDevRow = r;\n                                this.minimumRangeValueIncStdDevColumn = c;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/java/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2020-03-21 13:31:32","commitOrder":2,"curCode":"    public DefaultStatisticalCategoryDataset() {\n        this.data = new KeyedObjects2D<R, C>();\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        this.minimumRangeValueIncStdDev = Double.NaN;\n        this.minimumRangeValueIncStdDevRow = -1;\n        this.minimumRangeValueIncStdDevColumn = -1;\n        this.maximumRangeValueIncStdDev = Double.NaN;\n        this.maximumRangeValueIncStdDevRow = -1;\n        this.maximumRangeValueIncStdDevColumn = -1;\n    }\n","date":"2020-03-21 13:31:32","endLine":148,"groupId":"101903","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"DefaultStatisticalCategoryDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/04/7e09b11f2e497aa8c759a7092039d707f70cc3.src","preCode":"    public DefaultStatisticalCategoryDataset() {\n        this.data = new KeyedObjects2D();\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        this.minimumRangeValueIncStdDev = Double.NaN;\n        this.minimumRangeValueIncStdDevRow = -1;\n        this.minimumRangeValueIncStdDevColumn = -1;\n        this.maximumRangeValueIncStdDev = Double.NaN;\n        this.maximumRangeValueIncStdDevRow = -1;\n        this.maximumRangeValueIncStdDevColumn = -1;\n    }\n","realPath":"src/main/java/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2016-02-19 16:24:22","commitOrder":2,"curCode":"    private void updateBounds() {\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValueIncStdDev = Double.NaN;\n        this.maximumRangeValueIncStdDevRow = -1;\n        this.maximumRangeValueIncStdDevColumn = -1;\n        this.minimumRangeValueIncStdDev = Double.NaN;\n        this.minimumRangeValueIncStdDevRow = -1;\n        this.minimumRangeValueIncStdDevColumn = -1;\n\n        int rowCount = this.data.getRowCount();\n        int columnCount = this.data.getColumnCount();\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < columnCount; c++) {\n                MeanAndStandardDeviation masd = (MeanAndStandardDeviation)\n                        this.data.getObject(r, c);\n                if (masd == null) {\n                    continue;\n                }\n                double m = masd.getMeanValue();\n                double sd = masd.getStandardDeviationValue();\n\n                if (!Double.isNaN(m)) {\n\n                    \r\n                    if (Double.isNaN(this.maximumRangeValue)) {\n                        this.maximumRangeValue = m;\n                        this.maximumRangeValueRow = r;\n                        this.maximumRangeValueColumn = c;\n                    }\n                    else {\n                        if (m > this.maximumRangeValue) {\n                            this.maximumRangeValue = m;\n                            this.maximumRangeValueRow = r;\n                            this.maximumRangeValueColumn = c;\n                        }\n                    }\n\n                    \r\n                    if (Double.isNaN(this.minimumRangeValue)) {\n                        this.minimumRangeValue = m;\n                        this.minimumRangeValueRow = r;\n                        this.minimumRangeValueColumn = c;\n                    }\n                    else {\n                        if (m < this.minimumRangeValue) {\n                            this.minimumRangeValue = m;\n                            this.minimumRangeValueRow = r;\n                            this.minimumRangeValueColumn = c;\n                        }\n                    }\n\n                    if (!Double.isNaN(sd)) {\n                        \r\n                        if (Double.isNaN(this.maximumRangeValueIncStdDev)) {\n                            this.maximumRangeValueIncStdDev = m + sd;\n                            this.maximumRangeValueIncStdDevRow = r;\n                            this.maximumRangeValueIncStdDevColumn = c;\n                        }\n                        else {\n                            if (m + sd > this.maximumRangeValueIncStdDev) {\n                                this.maximumRangeValueIncStdDev = m + sd;\n                                this.maximumRangeValueIncStdDevRow = r;\n                                this.maximumRangeValueIncStdDevColumn = c;\n                            }\n                        }\n\n                        \r\n                        if (Double.isNaN(this.minimumRangeValueIncStdDev)) {\n                            this.minimumRangeValueIncStdDev = m - sd;\n                            this.minimumRangeValueIncStdDevRow = r;\n                            this.minimumRangeValueIncStdDevColumn = c;\n                        }\n                        else {\n                            if (m - sd < this.minimumRangeValueIncStdDev) {\n                                this.minimumRangeValueIncStdDev = m - sd;\n                                this.minimumRangeValueIncStdDevRow = r;\n                                this.minimumRangeValueIncStdDevColumn = c;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","date":"2016-02-19 16:24:22","endLine":638,"groupId":"101903","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"updateBounds","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/db/9232f1987fc9b3ce9d66e0421025042d7d125e.src","preCode":"    private void updateBounds() {\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValueIncStdDev = Double.NaN;\n        this.maximumRangeValueIncStdDevRow = -1;\n        this.maximumRangeValueIncStdDevColumn = -1;\n        this.minimumRangeValueIncStdDev = Double.NaN;\n        this.minimumRangeValueIncStdDevRow = -1;\n        this.minimumRangeValueIncStdDevColumn = -1;\n\n        int rowCount = this.data.getRowCount();\n        int columnCount = this.data.getColumnCount();\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < columnCount; c++) {\n                MeanAndStandardDeviation masd = (MeanAndStandardDeviation)\n                        this.data.getObject(r, c);\n                if (masd == null) {\n                    continue;\n                }\n                double m = masd.getMeanValue();\n                double sd = masd.getStandardDeviationValue();\n\n                if (!Double.isNaN(m)) {\n\n                    \r\n                    if (Double.isNaN(this.maximumRangeValue)) {\n                        this.maximumRangeValue = m;\n                        this.maximumRangeValueRow = r;\n                        this.maximumRangeValueColumn = c;\n                    }\n                    else {\n                        if (m > this.maximumRangeValue) {\n                            this.maximumRangeValue = m;\n                            this.maximumRangeValueRow = r;\n                            this.maximumRangeValueColumn = c;\n                        }\n                    }\n\n                    \r\n                    if (Double.isNaN(this.minimumRangeValue)) {\n                        this.minimumRangeValue = m;\n                        this.minimumRangeValueRow = r;\n                        this.minimumRangeValueColumn = c;\n                    }\n                    else {\n                        if (m < this.minimumRangeValue) {\n                            this.minimumRangeValue = m;\n                            this.minimumRangeValueRow = r;\n                            this.minimumRangeValueColumn = c;\n                        }\n                    }\n\n                    if (!Double.isNaN(sd)) {\n                        \r\n                        if (Double.isNaN(this.maximumRangeValueIncStdDev)) {\n                            this.maximumRangeValueIncStdDev = m + sd;\n                            this.maximumRangeValueIncStdDevRow = r;\n                            this.maximumRangeValueIncStdDevColumn = c;\n                        }\n                        else {\n                            if (m + sd > this.maximumRangeValueIncStdDev) {\n                                this.maximumRangeValueIncStdDev = m + sd;\n                                this.maximumRangeValueIncStdDevRow = r;\n                                this.maximumRangeValueIncStdDevColumn = c;\n                            }\n                        }\n\n                        \r\n                        if (Double.isNaN(this.minimumRangeValueIncStdDev)) {\n                            this.minimumRangeValueIncStdDev = m - sd;\n                            this.minimumRangeValueIncStdDevRow = r;\n                            this.minimumRangeValueIncStdDevColumn = c;\n                        }\n                        else {\n                            if (m - sd < this.minimumRangeValueIncStdDev) {\n                                this.minimumRangeValueIncStdDev = m - sd;\n                                this.minimumRangeValueIncStdDevRow = r;\n                                this.minimumRangeValueIncStdDevColumn = c;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/java/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"N"}],"commitId":"eb812431e7ef6f5acdd5d9be3c9369ef5513a176","commitMessage":"@@@Add generics.","date":"2020-03-21 13:31:32","modifiedFileCount":"4","status":"M","submitter":"David Gilbert"}]
