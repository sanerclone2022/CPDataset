[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n            int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        XYAreaRendererState areaState = (XYAreaRendererState) state;\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        int itemCount = dataset.getItemCount(series);\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n\n        if (item == 0) {  \r\n            areaState.area = new GeneralPath();\n            \r\n            double zero = rangeAxis.valueToJava2D(0.0, dataArea,\n                    plot.getRangeAxisEdge());\n            if (plot.getOrientation().isVertical()) {\n                moveTo(areaState.area, transX1, zero);\n            } else if (plot.getOrientation().isHorizontal()) {\n                moveTo(areaState.area, zero, transX1);\n            }\n        }\n\n        \r\n        if (plot.getOrientation().isVertical()) {\n            lineTo(areaState.area, transX1, transY1);\n        } else if (plot.getOrientation().isHorizontal()) {\n            lineTo(areaState.area, transY1, transX1);\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        Shape shape;\n        if (getPlotShapes()) {\n            shape = getItemShape(series, item);\n            if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, transX1,\n                        transY1);\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, transY1,\n                        transX1);\n            }\n            g2.draw(shape);\n        }\n\n        if (getPlotLines()) {\n            if (item > 0) {\n                if (plot.getOrientation() == PlotOrientation.VERTICAL) {\n                    areaState.line.setLine(transX0, transY0, transX1, transY1);\n                } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                    areaState.line.setLine(transY0, transX0, transY1, transX1);\n                }\n                g2.draw(areaState.line);\n            }\n        }\n\n        \r\n        \r\n        if (getPlotArea() && item > 0 && item == (itemCount - 1)) {\n\n            if (orientation == PlotOrientation.VERTICAL) {\n                \r\n                lineTo(areaState.area, transX1, transZero);\n                areaState.area.closePath();\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                \r\n                lineTo(areaState.area, transZero, transX1);\n                areaState.area.closePath();\n            }\n\n            if (this.useFillPaint) {\n                paint = lookupSeriesFillPaint(series);\n            }\n            if (paint instanceof GradientPaint) {\n                GradientPaint gp = (GradientPaint) paint;\n                GradientPaint adjGP = this.gradientTransformer.transform(gp,\n                        dataArea);\n                g2.setPaint(adjGP);\n            }\n            g2.fill(areaState.area);\n\n            \r\n            if (isOutline()) {\n                Shape area = areaState.area;\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n                if (outlineStroke instanceof BasicStroke) {\n                    BasicStroke bs = (BasicStroke) outlineStroke;\n                    if (bs.getDashArray() != null) {\n                        Area poly = new Area(areaState.area);\n                        \r\n                        \r\n                        \r\n                        Area clip = new Area(new Rectangle2D.Double(\n                                dataArea.getX() - 5.0, dataArea.getY() - 5.0,\n                                dataArea.getWidth() + 10.0,\n                                dataArea.getHeight() + 10.0));\n                        poly.intersect(clip);\n                        area = poly;\n                    }\n                } \r\n\n                g2.setStroke(outlineStroke);\n                g2.setPaint(lookupSeriesOutlinePaint(series));\n                g2.draw(area);\n            }\n        }\n\n        int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n        int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n        updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                rangeAxisIndex, transX1, transY1, orientation);\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            GeneralPath hotspot = new GeneralPath();\n            if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, ((transY0 + transY1) / 2.0), ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, transY1, transX1);\n                lineTo(hotspot, ((transY1 + transY2) / 2.0), ((transX1 + transX2) / 2.0));\n                lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n            } else { \r\n                moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n                lineTo(hotspot, ((transX0 + transX1) / 2.0), ((transY0 + transY1) / 2.0));\n                lineTo(hotspot, transX1, transY1);\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), ((transY1 + transY2) / 2.0));\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n            }\n            hotspot.closePath();\n\n            \r\n            Area dataAreaHotspot = new Area(hotspot);\n            dataAreaHotspot.intersect(new Area(dataArea));\n\n            if (dataAreaHotspot.isEmpty() == false) {\n                addEntity(entities, dataAreaHotspot, dataset, series, item, 0.0, 0.0);\n            }\n        }\n\n    }\n","date":"2016-02-19 16:24:22","endLine":679,"groupId":"4050","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"drawItem","params":"(Graphics2Dg2@XYItemRendererStatestate@Rectangle2DdataArea@PlotRenderingInfoinfo@XYPlotplot@ValueAxisdomainAxis@ValueAxisrangeAxis@XYDatasetdataset@intseries@intitem@CrosshairStatecrosshairState@intpass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/1a/1f41f612695121d2c3cfe6ebdc3b10211808e2.src","preCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n            int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        XYAreaRendererState areaState = (XYAreaRendererState) state;\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        int itemCount = dataset.getItemCount(series);\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n\n        if (item == 0) {  \r\n            areaState.area = new GeneralPath();\n            \r\n            double zero = rangeAxis.valueToJava2D(0.0, dataArea,\n                    plot.getRangeAxisEdge());\n            if (plot.getOrientation().isVertical()) {\n                moveTo(areaState.area, transX1, zero);\n            } else if (plot.getOrientation().isHorizontal()) {\n                moveTo(areaState.area, zero, transX1);\n            }\n        }\n\n        \r\n        if (plot.getOrientation().isVertical()) {\n            lineTo(areaState.area, transX1, transY1);\n        } else if (plot.getOrientation().isHorizontal()) {\n            lineTo(areaState.area, transY1, transX1);\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        Shape shape;\n        if (getPlotShapes()) {\n            shape = getItemShape(series, item);\n            if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, transX1,\n                        transY1);\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, transY1,\n                        transX1);\n            }\n            g2.draw(shape);\n        }\n\n        if (getPlotLines()) {\n            if (item > 0) {\n                if (plot.getOrientation() == PlotOrientation.VERTICAL) {\n                    areaState.line.setLine(transX0, transY0, transX1, transY1);\n                } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                    areaState.line.setLine(transY0, transX0, transY1, transX1);\n                }\n                g2.draw(areaState.line);\n            }\n        }\n\n        \r\n        \r\n        if (getPlotArea() && item > 0 && item == (itemCount - 1)) {\n\n            if (orientation == PlotOrientation.VERTICAL) {\n                \r\n                lineTo(areaState.area, transX1, transZero);\n                areaState.area.closePath();\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                \r\n                lineTo(areaState.area, transZero, transX1);\n                areaState.area.closePath();\n            }\n\n            if (this.useFillPaint) {\n                paint = lookupSeriesFillPaint(series);\n            }\n            if (paint instanceof GradientPaint) {\n                GradientPaint gp = (GradientPaint) paint;\n                GradientPaint adjGP = this.gradientTransformer.transform(gp,\n                        dataArea);\n                g2.setPaint(adjGP);\n            }\n            g2.fill(areaState.area);\n\n            \r\n            if (isOutline()) {\n                Shape area = areaState.area;\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n                if (outlineStroke instanceof BasicStroke) {\n                    BasicStroke bs = (BasicStroke) outlineStroke;\n                    if (bs.getDashArray() != null) {\n                        Area poly = new Area(areaState.area);\n                        \r\n                        \r\n                        \r\n                        Area clip = new Area(new Rectangle2D.Double(\n                                dataArea.getX() - 5.0, dataArea.getY() - 5.0,\n                                dataArea.getWidth() + 10.0,\n                                dataArea.getHeight() + 10.0));\n                        poly.intersect(clip);\n                        area = poly;\n                    }\n                } \r\n\n                g2.setStroke(outlineStroke);\n                g2.setPaint(lookupSeriesOutlinePaint(series));\n                g2.draw(area);\n            }\n        }\n\n        int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n        int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n        updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                rangeAxisIndex, transX1, transY1, orientation);\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            GeneralPath hotspot = new GeneralPath();\n            if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, ((transY0 + transY1) / 2.0), ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, transY1, transX1);\n                lineTo(hotspot, ((transY1 + transY2) / 2.0), ((transX1 + transX2) / 2.0));\n                lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n            } else { \r\n                moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n                lineTo(hotspot, ((transX0 + transX1) / 2.0), ((transY0 + transY1) / 2.0));\n                lineTo(hotspot, transX1, transY1);\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), ((transY1 + transY2) / 2.0));\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n            }\n            hotspot.closePath();\n\n            \r\n            Area dataAreaHotspot = new Area(hotspot);\n            dataAreaHotspot.intersect(new Area(dataArea));\n\n            if (dataAreaHotspot.isEmpty() == false) {\n                addEntity(entities, dataAreaHotspot, dataset, series, item, 0.0, 0.0);\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":491,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n         Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n         ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n         int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        int itemCount = dataset.getItemCount(series);\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n        GeneralPath hotspot = new GeneralPath();\n        if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n            moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, ((transY0 + transY1) / 2.0),\n                            ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, transY1, transX1);\n            lineTo(hotspot, ((transY1 + transY2) / 2.0),\n                            ((transX1 + transX2) / 2.0));\n            lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n        }\n        else {  \r\n            moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n            lineTo(hotspot, ((transX0 + transX1) / 2.0),\n                            ((transY0 + transY1) / 2.0));\n            lineTo(hotspot, transX1, transY1);\n            lineTo(hotspot, ((transX1 + transX2) / 2.0),\n                            ((transY1 + transY2) / 2.0));\n            lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n        }\n        hotspot.closePath();\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        \r\n        \r\n        g2.fill(hotspot);\n\n        \r\n        if (isOutline()) {\n            g2.setStroke(lookupSeriesOutlineStroke(series));\n            g2.setPaint(lookupSeriesOutlinePaint(series));\n            g2.draw(hotspot);\n        }\n        int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n        int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n        updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                rangeAxisIndex, transX1, transY1, orientation);\n\n        \r\n        if (state.getInfo() != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                \r\n                Area dataAreaHotspot = new Area(hotspot);\n                dataAreaHotspot.intersect(new Area(dataArea));\n                if (!dataAreaHotspot.isEmpty()) {\n                    String tip = null;\n                    XYToolTipGenerator generator = getToolTipGenerator(series,\n                         item);\n                    if (generator != null) {\n                        tip = generator.generateToolTip(dataset, series, item);\n                    }\n                    String url = null;\n                    if (getURLGenerator() != null) {\n                        url = getURLGenerator().generateURL(dataset, series, \n                                item);\n                    }\n                    XYItemEntity entity = new XYItemEntity(dataAreaHotspot, \n                            dataset, series, item, tip, url);\n                    entities.add(entity);\n                }\n            }\n        }\n\n    }\n","date":"2016-02-19 16:24:22","endLine":414,"groupId":"2742","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"drawItem","params":"(Graphics2Dg2@XYItemRendererStatestate@Rectangle2DdataArea@PlotRenderingInfoinfo@XYPlotplot@ValueAxisdomainAxis@ValueAxisrangeAxis@XYDatasetdataset@intseries@intitem@CrosshairStatecrosshairState@intpass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/fa/990b6f06c1710dc8c8a5a9509892fcad7f9df9.src","preCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n         Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n         ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n         int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        int itemCount = dataset.getItemCount(series);\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n        GeneralPath hotspot = new GeneralPath();\n        if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n            moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, ((transY0 + transY1) / 2.0),\n                            ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, transY1, transX1);\n            lineTo(hotspot, ((transY1 + transY2) / 2.0),\n                            ((transX1 + transX2) / 2.0));\n            lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n        }\n        else {  \r\n            moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n            lineTo(hotspot, ((transX0 + transX1) / 2.0),\n                            ((transY0 + transY1) / 2.0));\n            lineTo(hotspot, transX1, transY1);\n            lineTo(hotspot, ((transX1 + transX2) / 2.0),\n                            ((transY1 + transY2) / 2.0));\n            lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n        }\n        hotspot.closePath();\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        \r\n        \r\n        g2.fill(hotspot);\n\n        \r\n        if (isOutline()) {\n            g2.setStroke(lookupSeriesOutlineStroke(series));\n            g2.setPaint(lookupSeriesOutlinePaint(series));\n            g2.draw(hotspot);\n        }\n        int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n        int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n        updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                rangeAxisIndex, transX1, transY1, orientation);\n\n        \r\n        if (state.getInfo() != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                \r\n                Area dataAreaHotspot = new Area(hotspot);\n                dataAreaHotspot.intersect(new Area(dataArea));\n                if (!dataAreaHotspot.isEmpty()) {\n                    String tip = null;\n                    XYToolTipGenerator generator = getToolTipGenerator(series,\n                         item);\n                    if (generator != null) {\n                        tip = generator.generateToolTip(dataset, series, item);\n                    }\n                    String url = null;\n                    if (getURLGenerator() != null) {\n                        url = getURLGenerator().generateURL(dataset, series, \n                                item);\n                    }\n                    XYItemEntity entity = new XYItemEntity(dataAreaHotspot, \n                            dataset, series, item, tip, url);\n                    entities.add(entity);\n                }\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer2.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2017-02-18 15:09:41","codes":[{"authorDate":"2017-02-18 15:09:41","commitOrder":2,"curCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n            int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        XYAreaRendererState areaState = (XYAreaRendererState) state;\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        int itemCount = dataset.getItemCount(series);\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n\n        if (item == 0) {  \r\n            areaState.area = new GeneralPath();\n            \r\n            double zero = rangeAxis.valueToJava2D(0.0, dataArea,\n                    plot.getRangeAxisEdge());\n            if (plot.getOrientation().isVertical()) {\n                moveTo(areaState.area, transX1, zero);\n            } else if (plot.getOrientation().isHorizontal()) {\n                moveTo(areaState.area, zero, transX1);\n            }\n        }\n\n        \r\n        if (plot.getOrientation().isVertical()) {\n            lineTo(areaState.area, transX1, transY1);\n        } else if (plot.getOrientation().isHorizontal()) {\n            lineTo(areaState.area, transY1, transX1);\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        Shape shape;\n        if (getPlotShapes()) {\n            shape = getItemShape(series, item);\n            if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, transX1,\n                        transY1);\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, transY1,\n                        transX1);\n            }\n            g2.draw(shape);\n        }\n\n        if (getPlotLines()) {\n            if (item > 0) {\n                if (plot.getOrientation() == PlotOrientation.VERTICAL) {\n                    areaState.line.setLine(transX0, transY0, transX1, transY1);\n                } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                    areaState.line.setLine(transY0, transX0, transY1, transX1);\n                }\n                g2.draw(areaState.line);\n            }\n        }\n\n        \r\n        \r\n        if (getPlotArea() && item > 0 && item == (itemCount - 1)) {\n\n            if (orientation == PlotOrientation.VERTICAL) {\n                \r\n                lineTo(areaState.area, transX1, transZero);\n                areaState.area.closePath();\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                \r\n                lineTo(areaState.area, transZero, transX1);\n                areaState.area.closePath();\n            }\n\n            if (this.useFillPaint) {\n                paint = lookupSeriesFillPaint(series);\n            }\n            if (paint instanceof GradientPaint) {\n                GradientPaint gp = (GradientPaint) paint;\n                GradientPaint adjGP = this.gradientTransformer.transform(gp,\n                        dataArea);\n                g2.setPaint(adjGP);\n            }\n            g2.fill(areaState.area);\n\n            \r\n            if (isOutline()) {\n                Shape area = areaState.area;\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n                if (outlineStroke instanceof BasicStroke) {\n                    BasicStroke bs = (BasicStroke) outlineStroke;\n                    if (bs.getDashArray() != null) {\n                        Area poly = new Area(areaState.area);\n                        \r\n                        \r\n                        \r\n                        Area clip = new Area(new Rectangle2D.Double(\n                                dataArea.getX() - 5.0, dataArea.getY() - 5.0,\n                                dataArea.getWidth() + 10.0,\n                                dataArea.getHeight() + 10.0));\n                        poly.intersect(clip);\n                        area = poly;\n                    }\n                } \r\n\n                g2.setStroke(outlineStroke);\n                g2.setPaint(lookupSeriesOutlinePaint(series));\n                g2.draw(area);\n            }\n        }\n\n        int datasetIndex = plot.indexOf(dataset);\n        updateCrosshairValues(crosshairState, x1, y1, datasetIndex,\n                transX1, transY1, orientation);\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            GeneralPath hotspot = new GeneralPath();\n            if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, ((transY0 + transY1) / 2.0), ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, transY1, transX1);\n                lineTo(hotspot, ((transY1 + transY2) / 2.0), ((transX1 + transX2) / 2.0));\n                lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n            } else { \r\n                moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n                lineTo(hotspot, ((transX0 + transX1) / 2.0), ((transY0 + transY1) / 2.0));\n                lineTo(hotspot, transX1, transY1);\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), ((transY1 + transY2) / 2.0));\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n            }\n            hotspot.closePath();\n\n            \r\n            Area dataAreaHotspot = new Area(hotspot);\n            dataAreaHotspot.intersect(new Area(dataArea));\n\n            if (dataAreaHotspot.isEmpty() == false) {\n                addEntity(entities, dataAreaHotspot, dataset, series, item, 0.0, 0.0);\n            }\n        }\n\n    }\n","date":"2017-02-18 15:09:41","endLine":680,"groupId":"4050","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"drawItem","params":"(Graphics2Dg2@XYItemRendererStatestate@Rectangle2DdataArea@PlotRenderingInfoinfo@XYPlotplot@ValueAxisdomainAxis@ValueAxisrangeAxis@XYDatasetdataset@intseries@intitem@CrosshairStatecrosshairState@intpass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/05/d918dd63a031e7181f5d7a20f6916f788983cd.src","preCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n            int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        XYAreaRendererState areaState = (XYAreaRendererState) state;\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        int itemCount = dataset.getItemCount(series);\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n\n        if (item == 0) {  \r\n            areaState.area = new GeneralPath();\n            \r\n            double zero = rangeAxis.valueToJava2D(0.0, dataArea,\n                    plot.getRangeAxisEdge());\n            if (plot.getOrientation().isVertical()) {\n                moveTo(areaState.area, transX1, zero);\n            } else if (plot.getOrientation().isHorizontal()) {\n                moveTo(areaState.area, zero, transX1);\n            }\n        }\n\n        \r\n        if (plot.getOrientation().isVertical()) {\n            lineTo(areaState.area, transX1, transY1);\n        } else if (plot.getOrientation().isHorizontal()) {\n            lineTo(areaState.area, transY1, transX1);\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        Shape shape;\n        if (getPlotShapes()) {\n            shape = getItemShape(series, item);\n            if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, transX1,\n                        transY1);\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, transY1,\n                        transX1);\n            }\n            g2.draw(shape);\n        }\n\n        if (getPlotLines()) {\n            if (item > 0) {\n                if (plot.getOrientation() == PlotOrientation.VERTICAL) {\n                    areaState.line.setLine(transX0, transY0, transX1, transY1);\n                } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                    areaState.line.setLine(transY0, transX0, transY1, transX1);\n                }\n                g2.draw(areaState.line);\n            }\n        }\n\n        \r\n        \r\n        if (getPlotArea() && item > 0 && item == (itemCount - 1)) {\n\n            if (orientation == PlotOrientation.VERTICAL) {\n                \r\n                lineTo(areaState.area, transX1, transZero);\n                areaState.area.closePath();\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                \r\n                lineTo(areaState.area, transZero, transX1);\n                areaState.area.closePath();\n            }\n\n            if (this.useFillPaint) {\n                paint = lookupSeriesFillPaint(series);\n            }\n            if (paint instanceof GradientPaint) {\n                GradientPaint gp = (GradientPaint) paint;\n                GradientPaint adjGP = this.gradientTransformer.transform(gp,\n                        dataArea);\n                g2.setPaint(adjGP);\n            }\n            g2.fill(areaState.area);\n\n            \r\n            if (isOutline()) {\n                Shape area = areaState.area;\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n                if (outlineStroke instanceof BasicStroke) {\n                    BasicStroke bs = (BasicStroke) outlineStroke;\n                    if (bs.getDashArray() != null) {\n                        Area poly = new Area(areaState.area);\n                        \r\n                        \r\n                        \r\n                        Area clip = new Area(new Rectangle2D.Double(\n                                dataArea.getX() - 5.0, dataArea.getY() - 5.0,\n                                dataArea.getWidth() + 10.0,\n                                dataArea.getHeight() + 10.0));\n                        poly.intersect(clip);\n                        area = poly;\n                    }\n                } \r\n\n                g2.setStroke(outlineStroke);\n                g2.setPaint(lookupSeriesOutlinePaint(series));\n                g2.draw(area);\n            }\n        }\n\n        int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n        int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n        updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                rangeAxisIndex, transX1, transY1, orientation);\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            GeneralPath hotspot = new GeneralPath();\n            if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, ((transY0 + transY1) / 2.0), ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, transY1, transX1);\n                lineTo(hotspot, ((transY1 + transY2) / 2.0), ((transX1 + transX2) / 2.0));\n                lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n            } else { \r\n                moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n                lineTo(hotspot, ((transX0 + transX1) / 2.0), ((transY0 + transY1) / 2.0));\n                lineTo(hotspot, transX1, transY1);\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), ((transY1 + transY2) / 2.0));\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n            }\n            hotspot.closePath();\n\n            \r\n            Area dataAreaHotspot = new Area(hotspot);\n            dataAreaHotspot.intersect(new Area(dataArea));\n\n            if (dataAreaHotspot.isEmpty() == false) {\n                addEntity(entities, dataAreaHotspot, dataset, series, item, 0.0, 0.0);\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"M"},{"authorDate":"2017-02-18 15:09:41","commitOrder":2,"curCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n         Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n         ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n         int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        int itemCount = dataset.getItemCount(series);\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n        GeneralPath hotspot = new GeneralPath();\n        if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n            moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, ((transY0 + transY1) / 2.0),\n                            ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, transY1, transX1);\n            lineTo(hotspot, ((transY1 + transY2) / 2.0),\n                            ((transX1 + transX2) / 2.0));\n            lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n        }\n        else {  \r\n            moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n            lineTo(hotspot, ((transX0 + transX1) / 2.0),\n                            ((transY0 + transY1) / 2.0));\n            lineTo(hotspot, transX1, transY1);\n            lineTo(hotspot, ((transX1 + transX2) / 2.0),\n                            ((transY1 + transY2) / 2.0));\n            lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n        }\n        hotspot.closePath();\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        \r\n        \r\n        g2.fill(hotspot);\n\n        \r\n        if (isOutline()) {\n            g2.setStroke(lookupSeriesOutlineStroke(series));\n            g2.setPaint(lookupSeriesOutlinePaint(series));\n            g2.draw(hotspot);\n        }\n        int datasetIndex = plot.indexOf(dataset);\n        updateCrosshairValues(crosshairState, x1, y1, datasetIndex,\n                transX1, transY1, orientation);\n\n        \r\n        if (state.getInfo() != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                \r\n                Area dataAreaHotspot = new Area(hotspot);\n                dataAreaHotspot.intersect(new Area(dataArea));\n                if (!dataAreaHotspot.isEmpty()) {\n                    String tip = null;\n                    XYToolTipGenerator generator = getToolTipGenerator(series,\n                         item);\n                    if (generator != null) {\n                        tip = generator.generateToolTip(dataset, series, item);\n                    }\n                    String url = null;\n                    if (getURLGenerator() != null) {\n                        url = getURLGenerator().generateURL(dataset, series, \n                                item);\n                    }\n                    XYItemEntity entity = new XYItemEntity(dataAreaHotspot, \n                            dataset, series, item, tip, url);\n                    entities.add(entity);\n                }\n            }\n        }\n\n    }\n","date":"2017-02-18 15:09:41","endLine":414,"groupId":"2742","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"drawItem","params":"(Graphics2Dg2@XYItemRendererStatestate@Rectangle2DdataArea@PlotRenderingInfoinfo@XYPlotplot@ValueAxisdomainAxis@ValueAxisrangeAxis@XYDatasetdataset@intseries@intitem@CrosshairStatecrosshairState@intpass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/d6/ec054cec1a47f8740b685baa21fe2eaec3c861.src","preCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n         Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n         ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n         int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        int itemCount = dataset.getItemCount(series);\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n        GeneralPath hotspot = new GeneralPath();\n        if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n            moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, ((transY0 + transY1) / 2.0),\n                            ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, transY1, transX1);\n            lineTo(hotspot, ((transY1 + transY2) / 2.0),\n                            ((transX1 + transX2) / 2.0));\n            lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n        }\n        else {  \r\n            moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n            lineTo(hotspot, ((transX0 + transX1) / 2.0),\n                            ((transY0 + transY1) / 2.0));\n            lineTo(hotspot, transX1, transY1);\n            lineTo(hotspot, ((transX1 + transX2) / 2.0),\n                            ((transY1 + transY2) / 2.0));\n            lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n        }\n        hotspot.closePath();\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        \r\n        \r\n        g2.fill(hotspot);\n\n        \r\n        if (isOutline()) {\n            g2.setStroke(lookupSeriesOutlineStroke(series));\n            g2.setPaint(lookupSeriesOutlinePaint(series));\n            g2.draw(hotspot);\n        }\n        int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);\n        int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);\n        updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,\n                rangeAxisIndex, transX1, transY1, orientation);\n\n        \r\n        if (state.getInfo() != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                \r\n                Area dataAreaHotspot = new Area(hotspot);\n                dataAreaHotspot.intersect(new Area(dataArea));\n                if (!dataAreaHotspot.isEmpty()) {\n                    String tip = null;\n                    XYToolTipGenerator generator = getToolTipGenerator(series,\n                         item);\n                    if (generator != null) {\n                        tip = generator.generateToolTip(dataset, series, item);\n                    }\n                    String url = null;\n                    if (getURLGenerator() != null) {\n                        url = getURLGenerator().generateURL(dataset, series, \n                                item);\n                    }\n                    XYItemEntity entity = new XYItemEntity(dataAreaHotspot, \n                            dataset, series, item, tip, url);\n                    entities.add(entity);\n                }\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer2.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"}],"commitId":"dba06bc3986222e84542124368815233092d7642","commitMessage":"@@@Fix for bug #36","date":"2017-02-18 15:09:41","modifiedFileCount":"15","status":"M","submitter":"David Gilbert"},{"authorTime":"2017-02-18 15:09:41","codes":[{"authorDate":"2017-03-08 01:39:11","commitOrder":3,"curCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n            int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        XYAreaRendererState areaState = (XYAreaRendererState) state;\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        int itemCount = dataset.getItemCount(series);\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n\n        if (item == 0) {  \r\n            areaState.area = new GeneralPath();\n            \r\n            double zero = rangeAxis.valueToJava2D(0.0, dataArea,\n                    plot.getRangeAxisEdge());\n            if (plot.getOrientation().isVertical()) {\n                moveTo(areaState.area, transX1, zero);\n            } else if (plot.getOrientation().isHorizontal()) {\n                moveTo(areaState.area, zero, transX1);\n            }\n        }\n\n        \r\n        if (plot.getOrientation().isVertical()) {\n            lineTo(areaState.area, transX1, transY1);\n        } else if (plot.getOrientation().isHorizontal()) {\n            lineTo(areaState.area, transY1, transX1);\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        Shape shape;\n        if (getPlotShapes()) {\n            shape = getItemShape(series, item);\n            if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtils.createTranslatedShape(shape, transX1,\n                        transY1);\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtils.createTranslatedShape(shape, transY1,\n                        transX1);\n            }\n            g2.draw(shape);\n        }\n\n        if (getPlotLines()) {\n            if (item > 0) {\n                if (plot.getOrientation() == PlotOrientation.VERTICAL) {\n                    areaState.line.setLine(transX0, transY0, transX1, transY1);\n                } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                    areaState.line.setLine(transY0, transX0, transY1, transX1);\n                }\n                g2.draw(areaState.line);\n            }\n        }\n\n        \r\n        \r\n        if (getPlotArea() && item > 0 && item == (itemCount - 1)) {\n\n            if (orientation == PlotOrientation.VERTICAL) {\n                \r\n                lineTo(areaState.area, transX1, transZero);\n                areaState.area.closePath();\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                \r\n                lineTo(areaState.area, transZero, transX1);\n                areaState.area.closePath();\n            }\n\n            if (this.useFillPaint) {\n                paint = lookupSeriesFillPaint(series);\n            }\n            if (paint instanceof GradientPaint) {\n                GradientPaint gp = (GradientPaint) paint;\n                GradientPaint adjGP = this.gradientTransformer.transform(gp,\n                        dataArea);\n                g2.setPaint(adjGP);\n            }\n            g2.fill(areaState.area);\n\n            \r\n            if (isOutline()) {\n                Shape area = areaState.area;\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n                if (outlineStroke instanceof BasicStroke) {\n                    BasicStroke bs = (BasicStroke) outlineStroke;\n                    if (bs.getDashArray() != null) {\n                        Area poly = new Area(areaState.area);\n                        \r\n                        \r\n                        \r\n                        Area clip = new Area(new Rectangle2D.Double(\n                                dataArea.getX() - 5.0, dataArea.getY() - 5.0,\n                                dataArea.getWidth() + 10.0,\n                                dataArea.getHeight() + 10.0));\n                        poly.intersect(clip);\n                        area = poly;\n                    }\n                } \r\n\n                g2.setStroke(outlineStroke);\n                g2.setPaint(lookupSeriesOutlinePaint(series));\n                g2.draw(area);\n            }\n        }\n\n        int datasetIndex = plot.indexOf(dataset);\n        updateCrosshairValues(crosshairState, x1, y1, datasetIndex,\n                transX1, transY1, orientation);\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            GeneralPath hotspot = new GeneralPath();\n            if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, ((transY0 + transY1) / 2.0), ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, transY1, transX1);\n                lineTo(hotspot, ((transY1 + transY2) / 2.0), ((transX1 + transX2) / 2.0));\n                lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n            } else { \r\n                moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n                lineTo(hotspot, ((transX0 + transX1) / 2.0), ((transY0 + transY1) / 2.0));\n                lineTo(hotspot, transX1, transY1);\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), ((transY1 + transY2) / 2.0));\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n            }\n            hotspot.closePath();\n\n            \r\n            Area dataAreaHotspot = new Area(hotspot);\n            dataAreaHotspot.intersect(new Area(dataArea));\n\n            if (dataAreaHotspot.isEmpty() == false) {\n                addEntity(entities, dataAreaHotspot, dataset, series, item, 0.0, 0.0);\n            }\n        }\n\n    }\n","date":"2017-03-08 01:39:11","endLine":680,"groupId":"2463","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"drawItem","params":"(Graphics2Dg2@XYItemRendererStatestate@Rectangle2DdataArea@PlotRenderingInfoinfo@XYPlotplot@ValueAxisdomainAxis@ValueAxisrangeAxis@XYDatasetdataset@intseries@intitem@CrosshairStatecrosshairState@intpass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/2d/e1d9ea73438e54529a3581d05f2ae871c067fa.src","preCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n            int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        XYAreaRendererState areaState = (XYAreaRendererState) state;\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        int itemCount = dataset.getItemCount(series);\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n\n        if (item == 0) {  \r\n            areaState.area = new GeneralPath();\n            \r\n            double zero = rangeAxis.valueToJava2D(0.0, dataArea,\n                    plot.getRangeAxisEdge());\n            if (plot.getOrientation().isVertical()) {\n                moveTo(areaState.area, transX1, zero);\n            } else if (plot.getOrientation().isHorizontal()) {\n                moveTo(areaState.area, zero, transX1);\n            }\n        }\n\n        \r\n        if (plot.getOrientation().isVertical()) {\n            lineTo(areaState.area, transX1, transY1);\n        } else if (plot.getOrientation().isHorizontal()) {\n            lineTo(areaState.area, transY1, transX1);\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        Shape shape;\n        if (getPlotShapes()) {\n            shape = getItemShape(series, item);\n            if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, transX1,\n                        transY1);\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtilities.createTranslatedShape(shape, transY1,\n                        transX1);\n            }\n            g2.draw(shape);\n        }\n\n        if (getPlotLines()) {\n            if (item > 0) {\n                if (plot.getOrientation() == PlotOrientation.VERTICAL) {\n                    areaState.line.setLine(transX0, transY0, transX1, transY1);\n                } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                    areaState.line.setLine(transY0, transX0, transY1, transX1);\n                }\n                g2.draw(areaState.line);\n            }\n        }\n\n        \r\n        \r\n        if (getPlotArea() && item > 0 && item == (itemCount - 1)) {\n\n            if (orientation == PlotOrientation.VERTICAL) {\n                \r\n                lineTo(areaState.area, transX1, transZero);\n                areaState.area.closePath();\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                \r\n                lineTo(areaState.area, transZero, transX1);\n                areaState.area.closePath();\n            }\n\n            if (this.useFillPaint) {\n                paint = lookupSeriesFillPaint(series);\n            }\n            if (paint instanceof GradientPaint) {\n                GradientPaint gp = (GradientPaint) paint;\n                GradientPaint adjGP = this.gradientTransformer.transform(gp,\n                        dataArea);\n                g2.setPaint(adjGP);\n            }\n            g2.fill(areaState.area);\n\n            \r\n            if (isOutline()) {\n                Shape area = areaState.area;\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n                if (outlineStroke instanceof BasicStroke) {\n                    BasicStroke bs = (BasicStroke) outlineStroke;\n                    if (bs.getDashArray() != null) {\n                        Area poly = new Area(areaState.area);\n                        \r\n                        \r\n                        \r\n                        Area clip = new Area(new Rectangle2D.Double(\n                                dataArea.getX() - 5.0, dataArea.getY() - 5.0,\n                                dataArea.getWidth() + 10.0,\n                                dataArea.getHeight() + 10.0));\n                        poly.intersect(clip);\n                        area = poly;\n                    }\n                } \r\n\n                g2.setStroke(outlineStroke);\n                g2.setPaint(lookupSeriesOutlinePaint(series));\n                g2.draw(area);\n            }\n        }\n\n        int datasetIndex = plot.indexOf(dataset);\n        updateCrosshairValues(crosshairState, x1, y1, datasetIndex,\n                transX1, transY1, orientation);\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            GeneralPath hotspot = new GeneralPath();\n            if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, ((transY0 + transY1) / 2.0), ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, transY1, transX1);\n                lineTo(hotspot, ((transY1 + transY2) / 2.0), ((transX1 + transX2) / 2.0));\n                lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n            } else { \r\n                moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n                lineTo(hotspot, ((transX0 + transX1) / 2.0), ((transY0 + transY1) / 2.0));\n                lineTo(hotspot, transX1, transY1);\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), ((transY1 + transY2) / 2.0));\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n            }\n            hotspot.closePath();\n\n            \r\n            Area dataAreaHotspot = new Area(hotspot);\n            dataAreaHotspot.intersect(new Area(dataArea));\n\n            if (dataAreaHotspot.isEmpty() == false) {\n                addEntity(entities, dataAreaHotspot, dataset, series, item, 0.0, 0.0);\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"M"},{"authorDate":"2017-02-18 15:09:41","commitOrder":3,"curCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n         Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n         ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n         int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        int itemCount = dataset.getItemCount(series);\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n        GeneralPath hotspot = new GeneralPath();\n        if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n            moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, ((transY0 + transY1) / 2.0),\n                            ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, transY1, transX1);\n            lineTo(hotspot, ((transY1 + transY2) / 2.0),\n                            ((transX1 + transX2) / 2.0));\n            lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n        }\n        else {  \r\n            moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n            lineTo(hotspot, ((transX0 + transX1) / 2.0),\n                            ((transY0 + transY1) / 2.0));\n            lineTo(hotspot, transX1, transY1);\n            lineTo(hotspot, ((transX1 + transX2) / 2.0),\n                            ((transY1 + transY2) / 2.0));\n            lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n        }\n        hotspot.closePath();\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        \r\n        \r\n        g2.fill(hotspot);\n\n        \r\n        if (isOutline()) {\n            g2.setStroke(lookupSeriesOutlineStroke(series));\n            g2.setPaint(lookupSeriesOutlinePaint(series));\n            g2.draw(hotspot);\n        }\n        int datasetIndex = plot.indexOf(dataset);\n        updateCrosshairValues(crosshairState, x1, y1, datasetIndex,\n                transX1, transY1, orientation);\n\n        \r\n        if (state.getInfo() != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                \r\n                Area dataAreaHotspot = new Area(hotspot);\n                dataAreaHotspot.intersect(new Area(dataArea));\n                if (!dataAreaHotspot.isEmpty()) {\n                    String tip = null;\n                    XYToolTipGenerator generator = getToolTipGenerator(series,\n                         item);\n                    if (generator != null) {\n                        tip = generator.generateToolTip(dataset, series, item);\n                    }\n                    String url = null;\n                    if (getURLGenerator() != null) {\n                        url = getURLGenerator().generateURL(dataset, series, \n                                item);\n                    }\n                    XYItemEntity entity = new XYItemEntity(dataAreaHotspot, \n                            dataset, series, item, tip, url);\n                    entities.add(entity);\n                }\n            }\n        }\n\n    }\n","date":"2017-02-18 15:09:41","endLine":414,"groupId":"2742","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"drawItem","params":"(Graphics2Dg2@XYItemRendererStatestate@Rectangle2DdataArea@PlotRenderingInfoinfo@XYPlotplot@ValueAxisdomainAxis@ValueAxisrangeAxis@XYDatasetdataset@intseries@intitem@CrosshairStatecrosshairState@intpass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/d6/ec054cec1a47f8740b685baa21fe2eaec3c861.src","preCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n         Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n         ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n         int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        int itemCount = dataset.getItemCount(series);\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n        GeneralPath hotspot = new GeneralPath();\n        if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n            moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, ((transY0 + transY1) / 2.0),\n                            ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, transY1, transX1);\n            lineTo(hotspot, ((transY1 + transY2) / 2.0),\n                            ((transX1 + transX2) / 2.0));\n            lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n        }\n        else {  \r\n            moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n            lineTo(hotspot, ((transX0 + transX1) / 2.0),\n                            ((transY0 + transY1) / 2.0));\n            lineTo(hotspot, transX1, transY1);\n            lineTo(hotspot, ((transX1 + transX2) / 2.0),\n                            ((transY1 + transY2) / 2.0));\n            lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n        }\n        hotspot.closePath();\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        \r\n        \r\n        g2.fill(hotspot);\n\n        \r\n        if (isOutline()) {\n            g2.setStroke(lookupSeriesOutlineStroke(series));\n            g2.setPaint(lookupSeriesOutlinePaint(series));\n            g2.draw(hotspot);\n        }\n        int datasetIndex = plot.indexOf(dataset);\n        updateCrosshairValues(crosshairState, x1, y1, datasetIndex,\n                transX1, transY1, orientation);\n\n        \r\n        if (state.getInfo() != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                \r\n                Area dataAreaHotspot = new Area(hotspot);\n                dataAreaHotspot.intersect(new Area(dataArea));\n                if (!dataAreaHotspot.isEmpty()) {\n                    String tip = null;\n                    XYToolTipGenerator generator = getToolTipGenerator(series,\n                         item);\n                    if (generator != null) {\n                        tip = generator.generateToolTip(dataset, series, item);\n                    }\n                    String url = null;\n                    if (getURLGenerator() != null) {\n                        url = getURLGenerator().generateURL(dataset, series, \n                                item);\n                    }\n                    XYItemEntity entity = new XYItemEntity(dataAreaHotspot, \n                            dataset, series, item, tip, url);\n                    entities.add(entity);\n                }\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer2.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"N"}],"commitId":"949365da759b3ea009185090fb4b27e75d768793","commitMessage":"@@@Incorporate required JCommon classes directly.","date":"2017-03-08 01:39:11","modifiedFileCount":"462","status":"M","submitter":"David Gilbert"},{"authorTime":"2017-02-18 15:09:41","codes":[{"authorDate":"2020-02-24 07:21:10","commitOrder":4,"curCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n            int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        XYAreaRendererState areaState = (XYAreaRendererState) state;\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        int itemCount = dataset.getItemCount(series);\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n\n        if (item == 0) {  \r\n            areaState.area = new GeneralPath();\n            \r\n            double zero = rangeAxis.valueToJava2D(0.0, dataArea,\n                    plot.getRangeAxisEdge());\n            if (plot.getOrientation().isVertical()) {\n                moveTo(areaState.area, transX1, zero);\n            } else if (plot.getOrientation().isHorizontal()) {\n                moveTo(areaState.area, zero, transX1);\n            }\n        }\n\n        \r\n        if (plot.getOrientation().isVertical()) {\n            lineTo(areaState.area, transX1, transY1);\n        } else if (plot.getOrientation().isHorizontal()) {\n            lineTo(areaState.area, transY1, transX1);\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        Shape shape;\n        if (getPlotShapes()) {\n            shape = getItemShape(series, item);\n            if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtils.createTranslatedShape(shape, transX1,\n                        transY1);\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtils.createTranslatedShape(shape, transY1,\n                        transX1);\n            }\n            g2.draw(shape);\n        }\n\n        if (getPlotLines()) {\n            if (item > 0) {\n                if (plot.getOrientation() == PlotOrientation.VERTICAL) {\n                    areaState.line.setLine(transX0, transY0, transX1, transY1);\n                } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                    areaState.line.setLine(transY0, transX0, transY1, transX1);\n                }\n                g2.draw(areaState.line);\n            }\n        }\n\n        \r\n        \r\n        if (getPlotArea() && item > 0 && item == (itemCount - 1)) {\n\n            if (orientation == PlotOrientation.VERTICAL) {\n                \r\n                lineTo(areaState.area, transX1, transZero);\n                areaState.area.closePath();\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                \r\n                lineTo(areaState.area, transZero, transX1);\n                areaState.area.closePath();\n            }\n\n            if (this.useFillPaint) {\n                paint = lookupSeriesFillPaint(series);\n                g2.setPaint(paint);\n            }\n            if (paint instanceof GradientPaint) {\n                GradientPaint gp = (GradientPaint) paint;\n                GradientPaint adjGP = this.gradientTransformer.transform(gp,\n                        dataArea);\n                g2.setPaint(adjGP);\n            }\n            g2.fill(areaState.area);\n\n            \r\n            if (isOutline()) {\n                Shape area = areaState.area;\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n                if (outlineStroke instanceof BasicStroke) {\n                    BasicStroke bs = (BasicStroke) outlineStroke;\n                    if (bs.getDashArray() != null) {\n                        Area poly = new Area(areaState.area);\n                        \r\n                        \r\n                        \r\n                        Area clip = new Area(new Rectangle2D.Double(\n                                dataArea.getX() - 5.0, dataArea.getY() - 5.0,\n                                dataArea.getWidth() + 10.0,\n                                dataArea.getHeight() + 10.0));\n                        poly.intersect(clip);\n                        area = poly;\n                    }\n                } \r\n\n                g2.setStroke(outlineStroke);\n                g2.setPaint(lookupSeriesOutlinePaint(series));\n                g2.draw(area);\n            }\n        }\n\n        int datasetIndex = plot.indexOf(dataset);\n        updateCrosshairValues(crosshairState, x1, y1, datasetIndex,\n                transX1, transY1, orientation);\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            GeneralPath hotspot = new GeneralPath();\n            if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, ((transY0 + transY1) / 2.0), ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, transY1, transX1);\n                lineTo(hotspot, ((transY1 + transY2) / 2.0), ((transX1 + transX2) / 2.0));\n                lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n            } else { \r\n                moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n                lineTo(hotspot, ((transX0 + transX1) / 2.0), ((transY0 + transY1) / 2.0));\n                lineTo(hotspot, transX1, transY1);\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), ((transY1 + transY2) / 2.0));\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n            }\n            hotspot.closePath();\n\n            \r\n            Area dataAreaHotspot = new Area(hotspot);\n            dataAreaHotspot.intersect(new Area(dataArea));\n\n            if (dataAreaHotspot.isEmpty() == false) {\n                addEntity(entities, dataAreaHotspot, dataset, series, item, \n                        0.0, 0.0);\n            }\n        }\n\n    }\n","date":"2020-02-24 07:21:10","endLine":682,"groupId":"101672","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"drawItem","params":"(Graphics2Dg2@XYItemRendererStatestate@Rectangle2DdataArea@PlotRenderingInfoinfo@XYPlotplot@ValueAxisdomainAxis@ValueAxisrangeAxis@XYDatasetdataset@intseries@intitem@CrosshairStatecrosshairState@intpass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/09/d1aba9af6ff3663f4b97eb7921dd8b0c1b36c5.src","preCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n            int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        XYAreaRendererState areaState = (XYAreaRendererState) state;\n\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        int itemCount = dataset.getItemCount(series);\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n\n        if (item == 0) {  \r\n            areaState.area = new GeneralPath();\n            \r\n            double zero = rangeAxis.valueToJava2D(0.0, dataArea,\n                    plot.getRangeAxisEdge());\n            if (plot.getOrientation().isVertical()) {\n                moveTo(areaState.area, transX1, zero);\n            } else if (plot.getOrientation().isHorizontal()) {\n                moveTo(areaState.area, zero, transX1);\n            }\n        }\n\n        \r\n        if (plot.getOrientation().isVertical()) {\n            lineTo(areaState.area, transX1, transY1);\n        } else if (plot.getOrientation().isHorizontal()) {\n            lineTo(areaState.area, transY1, transX1);\n        }\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        Shape shape;\n        if (getPlotShapes()) {\n            shape = getItemShape(series, item);\n            if (orientation == PlotOrientation.VERTICAL) {\n                shape = ShapeUtils.createTranslatedShape(shape, transX1,\n                        transY1);\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                shape = ShapeUtils.createTranslatedShape(shape, transY1,\n                        transX1);\n            }\n            g2.draw(shape);\n        }\n\n        if (getPlotLines()) {\n            if (item > 0) {\n                if (plot.getOrientation() == PlotOrientation.VERTICAL) {\n                    areaState.line.setLine(transX0, transY0, transX1, transY1);\n                } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                    areaState.line.setLine(transY0, transX0, transY1, transX1);\n                }\n                g2.draw(areaState.line);\n            }\n        }\n\n        \r\n        \r\n        if (getPlotArea() && item > 0 && item == (itemCount - 1)) {\n\n            if (orientation == PlotOrientation.VERTICAL) {\n                \r\n                lineTo(areaState.area, transX1, transZero);\n                areaState.area.closePath();\n            } else if (orientation == PlotOrientation.HORIZONTAL) {\n                \r\n                lineTo(areaState.area, transZero, transX1);\n                areaState.area.closePath();\n            }\n\n            if (this.useFillPaint) {\n                paint = lookupSeriesFillPaint(series);\n            }\n            if (paint instanceof GradientPaint) {\n                GradientPaint gp = (GradientPaint) paint;\n                GradientPaint adjGP = this.gradientTransformer.transform(gp,\n                        dataArea);\n                g2.setPaint(adjGP);\n            }\n            g2.fill(areaState.area);\n\n            \r\n            if (isOutline()) {\n                Shape area = areaState.area;\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n                if (outlineStroke instanceof BasicStroke) {\n                    BasicStroke bs = (BasicStroke) outlineStroke;\n                    if (bs.getDashArray() != null) {\n                        Area poly = new Area(areaState.area);\n                        \r\n                        \r\n                        \r\n                        Area clip = new Area(new Rectangle2D.Double(\n                                dataArea.getX() - 5.0, dataArea.getY() - 5.0,\n                                dataArea.getWidth() + 10.0,\n                                dataArea.getHeight() + 10.0));\n                        poly.intersect(clip);\n                        area = poly;\n                    }\n                } \r\n\n                g2.setStroke(outlineStroke);\n                g2.setPaint(lookupSeriesOutlinePaint(series));\n                g2.draw(area);\n            }\n        }\n\n        int datasetIndex = plot.indexOf(dataset);\n        updateCrosshairValues(crosshairState, x1, y1, datasetIndex,\n                transX1, transY1, orientation);\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            GeneralPath hotspot = new GeneralPath();\n            if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n                moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, ((transY0 + transY1) / 2.0), ((transX0 + transX1) / 2.0));\n                lineTo(hotspot, transY1, transX1);\n                lineTo(hotspot, ((transY1 + transY2) / 2.0), ((transX1 + transX2) / 2.0));\n                lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n            } else { \r\n                moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n                lineTo(hotspot, ((transX0 + transX1) / 2.0), ((transY0 + transY1) / 2.0));\n                lineTo(hotspot, transX1, transY1);\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), ((transY1 + transY2) / 2.0));\n                lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n            }\n            hotspot.closePath();\n\n            \r\n            Area dataAreaHotspot = new Area(hotspot);\n            dataAreaHotspot.intersect(new Area(dataArea));\n\n            if (dataAreaHotspot.isEmpty() == false) {\n                addEntity(entities, dataAreaHotspot, dataset, series, item, \n                        0.0, 0.0);\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"M"},{"authorDate":"2017-02-18 15:09:41","commitOrder":4,"curCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n         Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n         ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n         int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        int itemCount = dataset.getItemCount(series);\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n        GeneralPath hotspot = new GeneralPath();\n        if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n            moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, ((transY0 + transY1) / 2.0),\n                            ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, transY1, transX1);\n            lineTo(hotspot, ((transY1 + transY2) / 2.0),\n                            ((transX1 + transX2) / 2.0));\n            lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n        }\n        else {  \r\n            moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n            lineTo(hotspot, ((transX0 + transX1) / 2.0),\n                            ((transY0 + transY1) / 2.0));\n            lineTo(hotspot, transX1, transY1);\n            lineTo(hotspot, ((transX1 + transX2) / 2.0),\n                            ((transY1 + transY2) / 2.0));\n            lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n        }\n        hotspot.closePath();\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        \r\n        \r\n        g2.fill(hotspot);\n\n        \r\n        if (isOutline()) {\n            g2.setStroke(lookupSeriesOutlineStroke(series));\n            g2.setPaint(lookupSeriesOutlinePaint(series));\n            g2.draw(hotspot);\n        }\n        int datasetIndex = plot.indexOf(dataset);\n        updateCrosshairValues(crosshairState, x1, y1, datasetIndex,\n                transX1, transY1, orientation);\n\n        \r\n        if (state.getInfo() != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                \r\n                Area dataAreaHotspot = new Area(hotspot);\n                dataAreaHotspot.intersect(new Area(dataArea));\n                if (!dataAreaHotspot.isEmpty()) {\n                    String tip = null;\n                    XYToolTipGenerator generator = getToolTipGenerator(series,\n                         item);\n                    if (generator != null) {\n                        tip = generator.generateToolTip(dataset, series, item);\n                    }\n                    String url = null;\n                    if (getURLGenerator() != null) {\n                        url = getURLGenerator().generateURL(dataset, series, \n                                item);\n                    }\n                    XYItemEntity entity = new XYItemEntity(dataAreaHotspot, \n                            dataset, series, item, tip, url);\n                    entities.add(entity);\n                }\n            }\n        }\n\n    }\n","date":"2017-02-18 15:09:41","endLine":414,"groupId":"101672","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"drawItem","params":"(Graphics2Dg2@XYItemRendererStatestate@Rectangle2DdataArea@PlotRenderingInfoinfo@XYPlotplot@ValueAxisdomainAxis@ValueAxisrangeAxis@XYDatasetdataset@intseries@intitem@CrosshairStatecrosshairState@intpass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/d6/ec054cec1a47f8740b685baa21fe2eaec3c861.src","preCode":"    public void drawItem(Graphics2D g2, XYItemRendererState state,\n         Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,\n         ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,\n         int series, int item, CrosshairState crosshairState, int pass) {\n\n        if (!getItemVisible(series, item)) {\n            return;\n        }\n        \r\n        double x1 = dataset.getXValue(series, item);\n        double y1 = dataset.getYValue(series, item);\n        if (Double.isNaN(y1)) {\n            y1 = 0.0;\n        }\n\n        double transX1 = domainAxis.valueToJava2D(x1, dataArea,\n                plot.getDomainAxisEdge());\n        double transY1 = rangeAxis.valueToJava2D(y1, dataArea,\n                plot.getRangeAxisEdge());\n\n        \r\n        \r\n        double x0 = dataset.getXValue(series, Math.max(item - 1, 0));\n        double y0 = dataset.getYValue(series, Math.max(item - 1, 0));\n        if (Double.isNaN(y0)) {\n            y0 = 0.0;\n        }\n        double transX0 = domainAxis.valueToJava2D(x0, dataArea,\n                plot.getDomainAxisEdge());\n        double transY0 = rangeAxis.valueToJava2D(y0, dataArea,\n                plot.getRangeAxisEdge());\n\n        int itemCount = dataset.getItemCount(series);\n        double x2 = dataset.getXValue(series, Math.min(item + 1,\n                itemCount - 1));\n        double y2 = dataset.getYValue(series, Math.min(item + 1,\n                itemCount - 1));\n        if (Double.isNaN(y2)) {\n            y2 = 0.0;\n        }\n        double transX2 = domainAxis.valueToJava2D(x2, dataArea,\n                plot.getDomainAxisEdge());\n        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,\n                plot.getRangeAxisEdge());\n\n        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,\n                plot.getRangeAxisEdge());\n        GeneralPath hotspot = new GeneralPath();\n        if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {\n            moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, ((transY0 + transY1) / 2.0),\n                            ((transX0 + transX1) / 2.0));\n            lineTo(hotspot, transY1, transX1);\n            lineTo(hotspot, ((transY1 + transY2) / 2.0),\n                            ((transX1 + transX2) / 2.0));\n            lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));\n        }\n        else {  \r\n            moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);\n            lineTo(hotspot, ((transX0 + transX1) / 2.0),\n                            ((transY0 + transY1) / 2.0));\n            lineTo(hotspot, transX1, transY1);\n            lineTo(hotspot, ((transX1 + transX2) / 2.0),\n                            ((transY1 + transY2) / 2.0));\n            lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);\n        }\n        hotspot.closePath();\n\n        PlotOrientation orientation = plot.getOrientation();\n        Paint paint = getItemPaint(series, item);\n        Stroke stroke = getItemStroke(series, item);\n        g2.setPaint(paint);\n        g2.setStroke(stroke);\n\n        \r\n        \r\n        g2.fill(hotspot);\n\n        \r\n        if (isOutline()) {\n            g2.setStroke(lookupSeriesOutlineStroke(series));\n            g2.setPaint(lookupSeriesOutlinePaint(series));\n            g2.draw(hotspot);\n        }\n        int datasetIndex = plot.indexOf(dataset);\n        updateCrosshairValues(crosshairState, x1, y1, datasetIndex,\n                transX1, transY1, orientation);\n\n        \r\n        if (state.getInfo() != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                \r\n                Area dataAreaHotspot = new Area(hotspot);\n                dataAreaHotspot.intersect(new Area(dataArea));\n                if (!dataAreaHotspot.isEmpty()) {\n                    String tip = null;\n                    XYToolTipGenerator generator = getToolTipGenerator(series,\n                         item);\n                    if (generator != null) {\n                        tip = generator.generateToolTip(dataset, series, item);\n                    }\n                    String url = null;\n                    if (getURLGenerator() != null) {\n                        url = getURLGenerator().generateURL(dataset, series, \n                                item);\n                    }\n                    XYItemEntity entity = new XYItemEntity(dataAreaHotspot, \n                            dataset, series, item, tip, url);\n                    entities.add(entity);\n                }\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer2.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"N"}],"commitId":"4280d3823c60c321a9d576be8f3b1c38c9766de7","commitMessage":"@@@Merge pull request #121 from henryju/patch-1\n\nFix XYAreaRenderer to use SeriesFillPaint when not a Gradient","date":"2020-02-24 07:21:10","modifiedFileCount":"1","status":"M","submitter":"tracylynne99"}]
