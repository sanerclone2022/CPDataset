[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    protected void drawHorizontalItem(Graphics2D g2,\n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        \r\n        Number dataValue = dataset.getValue(row, column);\n        if (dataValue == null) {\n            return;\n        }\n\n        \r\n        double value = dataValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n        if (uclip <= 0.0) {  \r\n            if (value >= uclip) {\n                return; \r\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        } else if (lclip <= 0.0) { \r\n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        } else { \r\n            if (value <= lclip) {\n                return; \r\n            }\n            base = lclip;\n            if (value >= uclip) {\n                value = uclip;\n            }\n        }\n\n        RectangleEdge edge = plot.getRangeAxisEdge();\n        double transX1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n        double transX2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n        double rectX = Math.min(transX1, transX2);\n        double rectWidth = Math.abs(transX2 - transX1);\n\n        \r\n        double rectY = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n\n        int seriesCount = getRowCount();\n\n        \r\n        double shift = 0.0;\n        double rectHeight;\n        double widthFactor = 1.0;\n        double seriesBarWidth = getSeriesBarWidth(row);\n        if (!Double.isNaN(seriesBarWidth)) {\n            widthFactor = seriesBarWidth;\n        }\n        rectHeight = widthFactor * state.getBarWidth();\n        rectY = rectY + (1 - widthFactor) * state.getBarWidth() / 2.0;\n        if (seriesCount > 1) {\n            shift = rectHeight * 0.20 / (seriesCount - 1);\n        }\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX,\n                (rectY + ((seriesCount - 1 - row) * shift)), rectWidth,\n                (rectHeight - (seriesCount - 1 - row) * shift * 2));\n\n        if (state.getElementHinting()) {\n            beginElementGroup(g2, dataset.getRowKey(row), \n                    dataset.getColumnKey(column));\n        }\n        \n        Paint itemPaint = getItemPaint(row, column);\n        GradientPaintTransformer t = getGradientPaintTransformer();\n        if (t != null && itemPaint instanceof GradientPaint) {\n            itemPaint = t.transform((GradientPaint) itemPaint, bar);\n        }\n        g2.setPaint(itemPaint);\n        g2.fill(bar);\n\n        \r\n        if (isDrawBarOutline()\n                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            Stroke stroke = getItemOutlineStroke(row, column);\n            Paint paint = getItemOutlinePaint(row, column);\n            if (stroke != null && paint != null) {\n                g2.setStroke(stroke);\n                g2.setPaint(paint);\n                g2.draw(bar);\n            }\n        }\n\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    (transX1 > transX2));\n        }\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n","date":"2016-02-19 16:24:22","endLine":328,"groupId":"2952","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"drawHorizontalItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/ee/2a94d89e7f5162af601d75de7a5fded8ca004a.src","preCode":"    protected void drawHorizontalItem(Graphics2D g2,\n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        \r\n        Number dataValue = dataset.getValue(row, column);\n        if (dataValue == null) {\n            return;\n        }\n\n        \r\n        double value = dataValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n        if (uclip <= 0.0) {  \r\n            if (value >= uclip) {\n                return; \r\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        } else if (lclip <= 0.0) { \r\n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        } else { \r\n            if (value <= lclip) {\n                return; \r\n            }\n            base = lclip;\n            if (value >= uclip) {\n                value = uclip;\n            }\n        }\n\n        RectangleEdge edge = plot.getRangeAxisEdge();\n        double transX1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n        double transX2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n        double rectX = Math.min(transX1, transX2);\n        double rectWidth = Math.abs(transX2 - transX1);\n\n        \r\n        double rectY = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n\n        int seriesCount = getRowCount();\n\n        \r\n        double shift = 0.0;\n        double rectHeight;\n        double widthFactor = 1.0;\n        double seriesBarWidth = getSeriesBarWidth(row);\n        if (!Double.isNaN(seriesBarWidth)) {\n            widthFactor = seriesBarWidth;\n        }\n        rectHeight = widthFactor * state.getBarWidth();\n        rectY = rectY + (1 - widthFactor) * state.getBarWidth() / 2.0;\n        if (seriesCount > 1) {\n            shift = rectHeight * 0.20 / (seriesCount - 1);\n        }\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX,\n                (rectY + ((seriesCount - 1 - row) * shift)), rectWidth,\n                (rectHeight - (seriesCount - 1 - row) * shift * 2));\n\n        if (state.getElementHinting()) {\n            beginElementGroup(g2, dataset.getRowKey(row), \n                    dataset.getColumnKey(column));\n        }\n        \n        Paint itemPaint = getItemPaint(row, column);\n        GradientPaintTransformer t = getGradientPaintTransformer();\n        if (t != null && itemPaint instanceof GradientPaint) {\n            itemPaint = t.transform((GradientPaint) itemPaint, bar);\n        }\n        g2.setPaint(itemPaint);\n        g2.fill(bar);\n\n        \r\n        if (isDrawBarOutline()\n                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            Stroke stroke = getItemOutlineStroke(row, column);\n            Paint paint = getItemOutlinePaint(row, column);\n            if (stroke != null && paint != null) {\n                g2.setStroke(stroke);\n                g2.setPaint(paint);\n                g2.draw(bar);\n            }\n        }\n\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    (transX1 > transX2));\n        }\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/LayeredBarRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    protected void drawVerticalItem(Graphics2D g2,\n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        \r\n        Number dataValue = dataset.getValue(row, column);\n        if (dataValue == null) {\n            return;\n        }\n\n        \r\n        double rectX = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n\n        int seriesCount = getRowCount();\n\n        \r\n        double value = dataValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  \r\n            if (value >= uclip) {\n                return; \r\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        } else if (lclip <= 0.0) { \r\n            if (value >= uclip) {\n                value = uclip;\n            } else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        } else { \r\n            if (value <= lclip) {\n                return; \r\n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge edge = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n        double rectY = Math.min(transY2, transY1);\n\n        double rectWidth;\n        double rectHeight = Math.abs(transY2 - transY1);\n\n        \r\n        double shift = 0.0;\n        double widthFactor = 1.0;\n        double seriesBarWidth = getSeriesBarWidth(row);\n        if (!Double.isNaN(seriesBarWidth)) {\n            widthFactor = seriesBarWidth;\n        }\n        rectWidth = widthFactor * state.getBarWidth();\n        rectX = rectX + (1 - widthFactor) * state.getBarWidth() / 2.0;\n        if (seriesCount > 1) {\n            \r\n            shift = rectWidth * 0.20 / (seriesCount - 1);\n        }\n\n        Rectangle2D bar = new Rectangle2D.Double(\n            (rectX + ((seriesCount - 1 - row) * shift)), rectY,\n            (rectWidth - (seriesCount - 1 - row) * shift * 2), rectHeight);\n\n        if (state.getElementHinting()) {\n            beginElementGroup(g2, dataset.getRowKey(row), \n                    dataset.getColumnKey(column));\n        }\n\n        Paint itemPaint = getItemPaint(row, column);\n        GradientPaintTransformer t = getGradientPaintTransformer();\n        if (t != null && itemPaint instanceof GradientPaint) {\n            itemPaint = t.transform((GradientPaint) itemPaint, bar);\n        }\n        g2.setPaint(itemPaint);\n        g2.fill(bar);\n\n        if (isDrawBarOutline() && state.getBarWidth() \n                > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        if (state.getElementHinting()) {\n            endElementGroup(g2);\n        }\n\n        \r\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            double transX1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n            double transX2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    (transX1 > transX2));\n        }\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n","date":"2016-02-19 16:24:22","endLine":457,"groupId":"1518","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"drawVerticalItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/ee/2a94d89e7f5162af601d75de7a5fded8ca004a.src","preCode":"    protected void drawVerticalItem(Graphics2D g2,\n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        \r\n        Number dataValue = dataset.getValue(row, column);\n        if (dataValue == null) {\n            return;\n        }\n\n        \r\n        double rectX = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n\n        int seriesCount = getRowCount();\n\n        \r\n        double value = dataValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  \r\n            if (value >= uclip) {\n                return; \r\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        } else if (lclip <= 0.0) { \r\n            if (value >= uclip) {\n                value = uclip;\n            } else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        } else { \r\n            if (value <= lclip) {\n                return; \r\n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge edge = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n        double rectY = Math.min(transY2, transY1);\n\n        double rectWidth;\n        double rectHeight = Math.abs(transY2 - transY1);\n\n        \r\n        double shift = 0.0;\n        double widthFactor = 1.0;\n        double seriesBarWidth = getSeriesBarWidth(row);\n        if (!Double.isNaN(seriesBarWidth)) {\n            widthFactor = seriesBarWidth;\n        }\n        rectWidth = widthFactor * state.getBarWidth();\n        rectX = rectX + (1 - widthFactor) * state.getBarWidth() / 2.0;\n        if (seriesCount > 1) {\n            \r\n            shift = rectWidth * 0.20 / (seriesCount - 1);\n        }\n\n        Rectangle2D bar = new Rectangle2D.Double(\n            (rectX + ((seriesCount - 1 - row) * shift)), rectY,\n            (rectWidth - (seriesCount - 1 - row) * shift * 2), rectHeight);\n\n        if (state.getElementHinting()) {\n            beginElementGroup(g2, dataset.getRowKey(row), \n                    dataset.getColumnKey(column));\n        }\n\n        Paint itemPaint = getItemPaint(row, column);\n        GradientPaintTransformer t = getGradientPaintTransformer();\n        if (t != null && itemPaint instanceof GradientPaint) {\n            itemPaint = t.transform((GradientPaint) itemPaint, bar);\n        }\n        g2.setPaint(itemPaint);\n        g2.fill(bar);\n\n        if (isDrawBarOutline() && state.getBarWidth() \n                > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        if (state.getElementHinting()) {\n            endElementGroup(g2);\n        }\n\n        \r\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            double transX1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n            double transX2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    (transX1 > transX2));\n        }\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/LayeredBarRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2020-09-26 13:25:10","codes":[{"authorDate":"2020-09-26 13:25:10","commitOrder":2,"curCode":"    protected void drawHorizontalItem(Graphics2D g2,\n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        \r\n        Number dataValue = dataset.getValue(row, column);\n        if (dataValue == null) {\n            return;\n        }\n\n        \r\n        double value = dataValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n        if (uclip <= 0.0) {  \r\n            if (value >= uclip) {\n                return; \r\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        } else if (lclip <= 0.0) { \r\n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        } else { \r\n            if (value <= lclip) {\n                return; \r\n            }\n            base = lclip;\n            if (value >= uclip) {\n                value = uclip;\n            }\n        }\n\n        RectangleEdge edge = plot.getRangeAxisEdge();\n        double transX1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n        double transX2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n        double rectX = Math.min(transX1, transX2);\n        double rectWidth = Math.abs(transX2 - transX1);\n\n        \r\n        double rectY = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n\n        int seriesCount = getRowCount();\n\n        \r\n        double shift = 0.0;\n        double rectHeight;\n        double widthFactor = 1.0;\n        double seriesBarWidth = getSeriesBarWidth(row);\n        if (!Double.isNaN(seriesBarWidth)) {\n            widthFactor = seriesBarWidth;\n        }\n        rectHeight = widthFactor * state.getBarWidth();\n        rectY = rectY + (1 - widthFactor) * state.getBarWidth() / 2.0;\n        if (seriesCount > 1) {\n            shift = rectHeight * 0.20 / (seriesCount - 1);\n        }\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX,\n                (rectY + ((seriesCount - 1 - row) * shift)), rectWidth,\n                (rectHeight - (seriesCount - 1 - row) * shift * 2));\n\n        if (state.getElementHinting()) {\n            beginElementGroup(g2, dataset.getRowKey(row), \n                    dataset.getColumnKey(column));\n        }\n        \n        Paint itemPaint = getItemPaint(row, column);\n        GradientPaintTransformer t = getGradientPaintTransformer();\n        if (t != null && itemPaint instanceof GradientPaint) {\n            itemPaint = t.transform((GradientPaint) itemPaint, bar);\n        }\n        g2.setPaint(itemPaint);\n        g2.fill(bar);\n\n        \r\n        if (isDrawBarOutline()\n                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            Stroke stroke = getItemOutlineStroke(row, column);\n            Paint paint = getItemOutlinePaint(row, column);\n            if (stroke != null && paint != null) {\n                g2.setStroke(stroke);\n                g2.setPaint(paint);\n                g2.draw(bar);\n            }\n        }\n\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    value < base);\n        }\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n","date":"2020-09-26 13:25:10","endLine":311,"groupId":"2952","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"drawHorizontalItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/88/9c1fdaa04d10f2d8db91ff02e5d76dc2471d8a.src","preCode":"    protected void drawHorizontalItem(Graphics2D g2,\n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        \r\n        Number dataValue = dataset.getValue(row, column);\n        if (dataValue == null) {\n            return;\n        }\n\n        \r\n        double value = dataValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n        if (uclip <= 0.0) {  \r\n            if (value >= uclip) {\n                return; \r\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        } else if (lclip <= 0.0) { \r\n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        } else { \r\n            if (value <= lclip) {\n                return; \r\n            }\n            base = lclip;\n            if (value >= uclip) {\n                value = uclip;\n            }\n        }\n\n        RectangleEdge edge = plot.getRangeAxisEdge();\n        double transX1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n        double transX2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n        double rectX = Math.min(transX1, transX2);\n        double rectWidth = Math.abs(transX2 - transX1);\n\n        \r\n        double rectY = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n\n        int seriesCount = getRowCount();\n\n        \r\n        double shift = 0.0;\n        double rectHeight;\n        double widthFactor = 1.0;\n        double seriesBarWidth = getSeriesBarWidth(row);\n        if (!Double.isNaN(seriesBarWidth)) {\n            widthFactor = seriesBarWidth;\n        }\n        rectHeight = widthFactor * state.getBarWidth();\n        rectY = rectY + (1 - widthFactor) * state.getBarWidth() / 2.0;\n        if (seriesCount > 1) {\n            shift = rectHeight * 0.20 / (seriesCount - 1);\n        }\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX,\n                (rectY + ((seriesCount - 1 - row) * shift)), rectWidth,\n                (rectHeight - (seriesCount - 1 - row) * shift * 2));\n\n        if (state.getElementHinting()) {\n            beginElementGroup(g2, dataset.getRowKey(row), \n                    dataset.getColumnKey(column));\n        }\n        \n        Paint itemPaint = getItemPaint(row, column);\n        GradientPaintTransformer t = getGradientPaintTransformer();\n        if (t != null && itemPaint instanceof GradientPaint) {\n            itemPaint = t.transform((GradientPaint) itemPaint, bar);\n        }\n        g2.setPaint(itemPaint);\n        g2.fill(bar);\n\n        \r\n        if (isDrawBarOutline()\n                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            Stroke stroke = getItemOutlineStroke(row, column);\n            Paint paint = getItemOutlinePaint(row, column);\n            if (stroke != null && paint != null) {\n                g2.setStroke(stroke);\n                g2.setPaint(paint);\n                g2.draw(bar);\n            }\n        }\n\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    (transX1 > transX2));\n        }\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/LayeredBarRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2020-09-26 13:25:10","commitOrder":2,"curCode":"    protected void drawVerticalItem(Graphics2D g2,\n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        \r\n        Number dataValue = dataset.getValue(row, column);\n        if (dataValue == null) {\n            return;\n        }\n\n        \r\n        double rectX = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n\n        int seriesCount = getRowCount();\n\n        \r\n        double value = dataValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  \r\n            if (value >= uclip) {\n                return; \r\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        } else if (lclip <= 0.0) { \r\n            if (value >= uclip) {\n                value = uclip;\n            } else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        } else { \r\n            if (value <= lclip) {\n                return; \r\n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge edge = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n        double rectY = Math.min(transY2, transY1);\n\n        double rectWidth;\n        double rectHeight = Math.abs(transY2 - transY1);\n\n        \r\n        double shift = 0.0;\n        double widthFactor = 1.0;\n        double seriesBarWidth = getSeriesBarWidth(row);\n        if (!Double.isNaN(seriesBarWidth)) {\n            widthFactor = seriesBarWidth;\n        }\n        rectWidth = widthFactor * state.getBarWidth();\n        rectX = rectX + (1 - widthFactor) * state.getBarWidth() / 2.0;\n        if (seriesCount > 1) {\n            \r\n            shift = rectWidth * 0.20 / (seriesCount - 1);\n        }\n\n        Rectangle2D bar = new Rectangle2D.Double(\n            (rectX + ((seriesCount - 1 - row) * shift)), rectY,\n            (rectWidth - (seriesCount - 1 - row) * shift * 2), rectHeight);\n\n        if (state.getElementHinting()) {\n            beginElementGroup(g2, dataset.getRowKey(row), \n                    dataset.getColumnKey(column));\n        }\n\n        Paint itemPaint = getItemPaint(row, column);\n        GradientPaintTransformer t = getGradientPaintTransformer();\n        if (t != null && itemPaint instanceof GradientPaint) {\n            itemPaint = t.transform((GradientPaint) itemPaint, bar);\n        }\n        g2.setPaint(itemPaint);\n        g2.fill(bar);\n\n        if (isDrawBarOutline() && state.getBarWidth() \n                > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        if (state.getElementHinting()) {\n            endElementGroup(g2);\n        }\n\n        \r\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    value < base);\n        }\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n","date":"2020-09-26 13:25:10","endLine":438,"groupId":"1518","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"drawVerticalItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/88/9c1fdaa04d10f2d8db91ff02e5d76dc2471d8a.src","preCode":"    protected void drawVerticalItem(Graphics2D g2,\n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        \r\n        Number dataValue = dataset.getValue(row, column);\n        if (dataValue == null) {\n            return;\n        }\n\n        \r\n        double rectX = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n\n        int seriesCount = getRowCount();\n\n        \r\n        double value = dataValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  \r\n            if (value >= uclip) {\n                return; \r\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        } else if (lclip <= 0.0) { \r\n            if (value >= uclip) {\n                value = uclip;\n            } else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        } else { \r\n            if (value <= lclip) {\n                return; \r\n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge edge = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n        double rectY = Math.min(transY2, transY1);\n\n        double rectWidth;\n        double rectHeight = Math.abs(transY2 - transY1);\n\n        \r\n        double shift = 0.0;\n        double widthFactor = 1.0;\n        double seriesBarWidth = getSeriesBarWidth(row);\n        if (!Double.isNaN(seriesBarWidth)) {\n            widthFactor = seriesBarWidth;\n        }\n        rectWidth = widthFactor * state.getBarWidth();\n        rectX = rectX + (1 - widthFactor) * state.getBarWidth() / 2.0;\n        if (seriesCount > 1) {\n            \r\n            shift = rectWidth * 0.20 / (seriesCount - 1);\n        }\n\n        Rectangle2D bar = new Rectangle2D.Double(\n            (rectX + ((seriesCount - 1 - row) * shift)), rectY,\n            (rectWidth - (seriesCount - 1 - row) * shift * 2), rectHeight);\n\n        if (state.getElementHinting()) {\n            beginElementGroup(g2, dataset.getRowKey(row), \n                    dataset.getColumnKey(column));\n        }\n\n        Paint itemPaint = getItemPaint(row, column);\n        GradientPaintTransformer t = getGradientPaintTransformer();\n        if (t != null && itemPaint instanceof GradientPaint) {\n            itemPaint = t.transform((GradientPaint) itemPaint, bar);\n        }\n        g2.setPaint(itemPaint);\n        g2.fill(bar);\n\n        if (isDrawBarOutline() && state.getBarWidth() \n                > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        if (state.getElementHinting()) {\n            endElementGroup(g2);\n        }\n\n        \r\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            double transX1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n            double transX2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    (transX1 > transX2));\n        }\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/LayeredBarRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"9af9d08788f57a482a94531ff7d550e843615f2c","commitMessage":"@@@Fix for LayeredBarRenderer bug#169","date":"2020-09-26 13:25:10","modifiedFileCount":"1","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-09-26 13:49:49","codes":[{"authorDate":"2020-09-26 13:49:49","commitOrder":3,"curCode":"    protected void drawHorizontalItem(Graphics2D g2,\n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        \r\n        Number dataValue = dataset.getValue(row, column);\n        if (dataValue == null) {\n            return;\n        }\n\n        \r\n        double value = dataValue.doubleValue();\n        double base = getBase();\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n        if (uclip <= 0.0) {  \r\n            if (value >= uclip) {\n                return; \r\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        } else if (lclip <= 0.0) { \r\n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        } else { \r\n            if (value <= lclip) {\n                return; \r\n            }\n            base = lclip;\n            if (value >= uclip) {\n                value = uclip;\n            }\n        }\n\n        RectangleEdge edge = plot.getRangeAxisEdge();\n        double transX1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n        double transX2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n        double rectX = Math.min(transX1, transX2);\n        double rectWidth = Math.abs(transX2 - transX1);\n\n        \r\n        double rectY = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n\n        int seriesCount = getRowCount();\n\n        \r\n        double shift = 0.0;\n        double rectHeight;\n        double widthFactor = 1.0;\n        double seriesBarWidth = getSeriesBarWidth(row);\n        if (!Double.isNaN(seriesBarWidth)) {\n            widthFactor = seriesBarWidth;\n        }\n        rectHeight = widthFactor * state.getBarWidth();\n        rectY = rectY + (1 - widthFactor) * state.getBarWidth() / 2.0;\n        if (seriesCount > 1) {\n            shift = rectHeight * 0.20 / (seriesCount - 1);\n        }\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX,\n                (rectY + ((seriesCount - 1 - row) * shift)), rectWidth,\n                (rectHeight - (seriesCount - 1 - row) * shift * 2));\n\n        if (state.getElementHinting()) {\n            beginElementGroup(g2, dataset.getRowKey(row), \n                    dataset.getColumnKey(column));\n        }\n        \n        Paint itemPaint = getItemPaint(row, column);\n        GradientPaintTransformer t = getGradientPaintTransformer();\n        if (t != null && itemPaint instanceof GradientPaint) {\n            itemPaint = t.transform((GradientPaint) itemPaint, bar);\n        }\n        g2.setPaint(itemPaint);\n        g2.fill(bar);\n\n        \r\n        if (isDrawBarOutline()\n                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            Stroke stroke = getItemOutlineStroke(row, column);\n            Paint paint = getItemOutlinePaint(row, column);\n            if (stroke != null && paint != null) {\n                g2.setStroke(stroke);\n                g2.setPaint(paint);\n                g2.draw(bar);\n            }\n        }\n\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    value < base);\n        }\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n","date":"2020-09-26 13:49:49","endLine":311,"groupId":"101602","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"drawHorizontalItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/61/8a6638c6effe521b699f66bbdd897678724ce7.src","preCode":"    protected void drawHorizontalItem(Graphics2D g2,\n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        \r\n        Number dataValue = dataset.getValue(row, column);\n        if (dataValue == null) {\n            return;\n        }\n\n        \r\n        double value = dataValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n        if (uclip <= 0.0) {  \r\n            if (value >= uclip) {\n                return; \r\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        } else if (lclip <= 0.0) { \r\n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        } else { \r\n            if (value <= lclip) {\n                return; \r\n            }\n            base = lclip;\n            if (value >= uclip) {\n                value = uclip;\n            }\n        }\n\n        RectangleEdge edge = plot.getRangeAxisEdge();\n        double transX1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n        double transX2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n        double rectX = Math.min(transX1, transX2);\n        double rectWidth = Math.abs(transX2 - transX1);\n\n        \r\n        double rectY = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n\n        int seriesCount = getRowCount();\n\n        \r\n        double shift = 0.0;\n        double rectHeight;\n        double widthFactor = 1.0;\n        double seriesBarWidth = getSeriesBarWidth(row);\n        if (!Double.isNaN(seriesBarWidth)) {\n            widthFactor = seriesBarWidth;\n        }\n        rectHeight = widthFactor * state.getBarWidth();\n        rectY = rectY + (1 - widthFactor) * state.getBarWidth() / 2.0;\n        if (seriesCount > 1) {\n            shift = rectHeight * 0.20 / (seriesCount - 1);\n        }\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX,\n                (rectY + ((seriesCount - 1 - row) * shift)), rectWidth,\n                (rectHeight - (seriesCount - 1 - row) * shift * 2));\n\n        if (state.getElementHinting()) {\n            beginElementGroup(g2, dataset.getRowKey(row), \n                    dataset.getColumnKey(column));\n        }\n        \n        Paint itemPaint = getItemPaint(row, column);\n        GradientPaintTransformer t = getGradientPaintTransformer();\n        if (t != null && itemPaint instanceof GradientPaint) {\n            itemPaint = t.transform((GradientPaint) itemPaint, bar);\n        }\n        g2.setPaint(itemPaint);\n        g2.fill(bar);\n\n        \r\n        if (isDrawBarOutline()\n                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            Stroke stroke = getItemOutlineStroke(row, column);\n            Paint paint = getItemOutlinePaint(row, column);\n            if (stroke != null && paint != null) {\n                g2.setStroke(stroke);\n                g2.setPaint(paint);\n                g2.draw(bar);\n            }\n        }\n\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    value < base);\n        }\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/LayeredBarRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2020-09-26 13:49:49","commitOrder":3,"curCode":"    protected void drawVerticalItem(Graphics2D g2,\n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        \r\n        Number dataValue = dataset.getValue(row, column);\n        if (dataValue == null) {\n            return;\n        }\n\n        \r\n        double rectX = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n\n        int seriesCount = getRowCount();\n\n        \r\n        double value = dataValue.doubleValue();\n        double base = getBase();\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  \r\n            if (value >= uclip) {\n                return; \r\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        } else if (lclip <= 0.0) { \r\n            if (value >= uclip) {\n                value = uclip;\n            } else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        } else { \r\n            if (value <= lclip) {\n                return; \r\n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge edge = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n        double rectY = Math.min(transY2, transY1);\n\n        double rectWidth;\n        double rectHeight = Math.abs(transY2 - transY1);\n\n        \r\n        double shift = 0.0;\n        double widthFactor = 1.0;\n        double seriesBarWidth = getSeriesBarWidth(row);\n        if (!Double.isNaN(seriesBarWidth)) {\n            widthFactor = seriesBarWidth;\n        }\n        rectWidth = widthFactor * state.getBarWidth();\n        rectX = rectX + (1 - widthFactor) * state.getBarWidth() / 2.0;\n        if (seriesCount > 1) {\n            \r\n            shift = rectWidth * 0.20 / (seriesCount - 1);\n        }\n\n        Rectangle2D bar = new Rectangle2D.Double(\n            (rectX + ((seriesCount - 1 - row) * shift)), rectY,\n            (rectWidth - (seriesCount - 1 - row) * shift * 2), rectHeight);\n\n        if (state.getElementHinting()) {\n            beginElementGroup(g2, dataset.getRowKey(row), \n                    dataset.getColumnKey(column));\n        }\n\n        Paint itemPaint = getItemPaint(row, column);\n        GradientPaintTransformer t = getGradientPaintTransformer();\n        if (t != null && itemPaint instanceof GradientPaint) {\n            itemPaint = t.transform((GradientPaint) itemPaint, bar);\n        }\n        g2.setPaint(itemPaint);\n        g2.fill(bar);\n\n        if (isDrawBarOutline() && state.getBarWidth() \n                > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        if (state.getElementHinting()) {\n            endElementGroup(g2);\n        }\n\n        \r\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    value < base);\n        }\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n","date":"2020-09-26 13:49:49","endLine":438,"groupId":"101602","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"drawVerticalItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/61/8a6638c6effe521b699f66bbdd897678724ce7.src","preCode":"    protected void drawVerticalItem(Graphics2D g2,\n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        \r\n        Number dataValue = dataset.getValue(row, column);\n        if (dataValue == null) {\n            return;\n        }\n\n        \r\n        double rectX = domainAxis.getCategoryMiddle(column, getColumnCount(),\n                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n\n        int seriesCount = getRowCount();\n\n        \r\n        double value = dataValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  \r\n            if (value >= uclip) {\n                return; \r\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        } else if (lclip <= 0.0) { \r\n            if (value >= uclip) {\n                value = uclip;\n            } else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        } else { \r\n            if (value <= lclip) {\n                return; \r\n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge edge = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, edge);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, edge);\n        double rectY = Math.min(transY2, transY1);\n\n        double rectWidth;\n        double rectHeight = Math.abs(transY2 - transY1);\n\n        \r\n        double shift = 0.0;\n        double widthFactor = 1.0;\n        double seriesBarWidth = getSeriesBarWidth(row);\n        if (!Double.isNaN(seriesBarWidth)) {\n            widthFactor = seriesBarWidth;\n        }\n        rectWidth = widthFactor * state.getBarWidth();\n        rectX = rectX + (1 - widthFactor) * state.getBarWidth() / 2.0;\n        if (seriesCount > 1) {\n            \r\n            shift = rectWidth * 0.20 / (seriesCount - 1);\n        }\n\n        Rectangle2D bar = new Rectangle2D.Double(\n            (rectX + ((seriesCount - 1 - row) * shift)), rectY,\n            (rectWidth - (seriesCount - 1 - row) * shift * 2), rectHeight);\n\n        if (state.getElementHinting()) {\n            beginElementGroup(g2, dataset.getRowKey(row), \n                    dataset.getColumnKey(column));\n        }\n\n        Paint itemPaint = getItemPaint(row, column);\n        GradientPaintTransformer t = getGradientPaintTransformer();\n        if (t != null && itemPaint instanceof GradientPaint) {\n            itemPaint = t.transform((GradientPaint) itemPaint, bar);\n        }\n        g2.setPaint(itemPaint);\n        g2.fill(bar);\n\n        if (isDrawBarOutline() && state.getBarWidth() \n                > BAR_OUTLINE_WIDTH_THRESHOLD) {\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        if (state.getElementHinting()) {\n            endElementGroup(g2);\n        }\n\n        \r\n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar,\n                    value < base);\n        }\n\n        \r\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/LayeredBarRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"3e3e79c7d85f5c9e98117c4ed5b32241cb9b8ce2","commitMessage":"@@@Fix for LayeredBarRenderer bug #175 setBase() should be respected","date":"2020-09-26 13:49:49","modifiedFileCount":"1","status":"M","submitter":"David Gilbert"}]
