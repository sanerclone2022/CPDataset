[{"authorTime":"2017-05-06 16:37:24","codes":[{"authorDate":"2017-05-06 16:37:24","commitOrder":1,"curCode":"    public static Range iterateToFindDomainBounds(XYDataset dataset,\n            List visibleSeriesKeys, boolean includeInterval) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        ParamChecks.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            \r\n            IntervalXYDataset ixyd = (IntervalXYDataset) dataset;\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double xvalue = ixyd.getXValue(series, item);\n                    double lvalue = ixyd.getStartXValue(series, item);\n                    double uvalue = ixyd.getEndXValue(series, item);\n                    if (!Double.isNaN(xvalue)) {\n                        minimum = Math.min(minimum, xvalue);\n                        maximum = Math.max(maximum, xvalue);\n                    }\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        } else {\n            \r\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double x = dataset.getXValue(series, item);\n                    if (!Double.isNaN(x)) {\n                        minimum = Math.min(minimum, x);\n                        maximum = Math.max(maximum, x);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","date":"2017-05-06 16:37:24","endLine":1413,"groupId":"2794","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"iterateToFindDomainBounds","params":"(XYDatasetdataset@ListvisibleSeriesKeys@booleanincludeInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/dc/8b6a0ddbf3de1c88397f2cde6fc21c654ede9f.src","preCode":"    public static Range iterateToFindDomainBounds(XYDataset dataset,\n            List visibleSeriesKeys, boolean includeInterval) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        ParamChecks.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            \r\n            IntervalXYDataset ixyd = (IntervalXYDataset) dataset;\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double xvalue = ixyd.getXValue(series, item);\n                    double lvalue = ixyd.getStartXValue(series, item);\n                    double uvalue = ixyd.getEndXValue(series, item);\n                    if (!Double.isNaN(xvalue)) {\n                        minimum = Math.min(minimum, xvalue);\n                        maximum = Math.max(maximum, xvalue);\n                    }\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        } else {\n            \r\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double x = dataset.getXValue(series, item);\n                    if (!Double.isNaN(x)) {\n                        minimum = Math.min(minimum, x);\n                        maximum = Math.max(maximum, x);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1359,"status":"B"},{"authorDate":"2017-05-06 16:37:24","commitOrder":1,"curCode":"    public static Range iterateToFindZBounds(XYZDataset dataset,\n            List visibleSeriesKeys, Range xRange, boolean includeInterval) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        ParamChecks.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n        ParamChecks.nullNotPermitted(xRange, \"xRange\");\n    \n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n    \n        Iterator iterator = visibleSeriesKeys.iterator();\n        while (iterator.hasNext()) {\n            Comparable seriesKey = (Comparable) iterator.next();\n            int series = dataset.indexOf(seriesKey);\n            int itemCount = dataset.getItemCount(series);\n            for (int item = 0; item < itemCount; item++) {\n                double x = dataset.getXValue(series, item);\n                double z = dataset.getZValue(series, item);\n                if (xRange.contains(x)) {\n                    if (!Double.isNaN(z)) {\n                        minimum = Math.min(minimum, z);\n                        maximum = Math.max(maximum, z);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","date":"2017-05-06 16:37:24","endLine":1588,"groupId":"55","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"iterateToFindZBounds","params":"(XYZDatasetdataset@ListvisibleSeriesKeys@RangexRange@booleanincludeInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/dc/8b6a0ddbf3de1c88397f2cde6fc21c654ede9f.src","preCode":"    public static Range iterateToFindZBounds(XYZDataset dataset,\n            List visibleSeriesKeys, Range xRange, boolean includeInterval) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        ParamChecks.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n        ParamChecks.nullNotPermitted(xRange, \"xRange\");\n    \n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n    \n        Iterator iterator = visibleSeriesKeys.iterator();\n        while (iterator.hasNext()) {\n            Comparable seriesKey = (Comparable) iterator.next();\n            int series = dataset.indexOf(seriesKey);\n            int itemCount = dataset.getItemCount(series);\n            for (int item = 0; item < itemCount; item++) {\n                double x = dataset.getXValue(series, item);\n                double z = dataset.getZValue(series, item);\n                if (xRange.contains(x)) {\n                    if (!Double.isNaN(z)) {\n                        minimum = Math.min(minimum, z);\n                        maximum = Math.max(maximum, z);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1557,"status":"B"}],"commitId":"434bac1e228cbbbebe7653d55064fb67e8c62962","commitMessage":"@@@Rename DatasetUtilities --> DatasetUtils.","date":"2017-05-06 16:37:24","modifiedFileCount":"31","status":"B","submitter":"David Gilbert"},{"authorTime":"2017-05-12 05:28:15","codes":[{"authorDate":"2017-05-12 05:28:15","commitOrder":2,"curCode":"    public static Range iterateToFindDomainBounds(XYDataset dataset,\n            List visibleSeriesKeys, boolean includeInterval) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Args.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            \r\n            IntervalXYDataset ixyd = (IntervalXYDataset) dataset;\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double xvalue = ixyd.getXValue(series, item);\n                    double lvalue = ixyd.getStartXValue(series, item);\n                    double uvalue = ixyd.getEndXValue(series, item);\n                    if (!Double.isNaN(xvalue)) {\n                        minimum = Math.min(minimum, xvalue);\n                        maximum = Math.max(maximum, xvalue);\n                    }\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        } else {\n            \r\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double x = dataset.getXValue(series, item);\n                    if (!Double.isNaN(x)) {\n                        minimum = Math.min(minimum, x);\n                        maximum = Math.max(maximum, x);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","date":"2017-05-12 05:28:15","endLine":1413,"groupId":"2794","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"iterateToFindDomainBounds","params":"(XYDatasetdataset@ListvisibleSeriesKeys@booleanincludeInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/57/fedbdb6f2ba5f9f0c0c73cd2e21515625fcee8.src","preCode":"    public static Range iterateToFindDomainBounds(XYDataset dataset,\n            List visibleSeriesKeys, boolean includeInterval) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        ParamChecks.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            \r\n            IntervalXYDataset ixyd = (IntervalXYDataset) dataset;\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double xvalue = ixyd.getXValue(series, item);\n                    double lvalue = ixyd.getStartXValue(series, item);\n                    double uvalue = ixyd.getEndXValue(series, item);\n                    if (!Double.isNaN(xvalue)) {\n                        minimum = Math.min(minimum, xvalue);\n                        maximum = Math.max(maximum, xvalue);\n                    }\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        } else {\n            \r\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double x = dataset.getXValue(series, item);\n                    if (!Double.isNaN(x)) {\n                        minimum = Math.min(minimum, x);\n                        maximum = Math.max(maximum, x);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1359,"status":"M"},{"authorDate":"2017-05-12 05:28:15","commitOrder":2,"curCode":"    public static Range iterateToFindZBounds(XYZDataset dataset,\n            List visibleSeriesKeys, Range xRange, boolean includeInterval) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Args.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n        Args.nullNotPermitted(xRange, \"xRange\");\n    \n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n    \n        Iterator iterator = visibleSeriesKeys.iterator();\n        while (iterator.hasNext()) {\n            Comparable seriesKey = (Comparable) iterator.next();\n            int series = dataset.indexOf(seriesKey);\n            int itemCount = dataset.getItemCount(series);\n            for (int item = 0; item < itemCount; item++) {\n                double x = dataset.getXValue(series, item);\n                double z = dataset.getZValue(series, item);\n                if (xRange.contains(x)) {\n                    if (!Double.isNaN(z)) {\n                        minimum = Math.min(minimum, z);\n                        maximum = Math.max(maximum, z);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","date":"2017-05-12 05:28:15","endLine":1588,"groupId":"55","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"iterateToFindZBounds","params":"(XYZDatasetdataset@ListvisibleSeriesKeys@RangexRange@booleanincludeInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/57/fedbdb6f2ba5f9f0c0c73cd2e21515625fcee8.src","preCode":"    public static Range iterateToFindZBounds(XYZDataset dataset,\n            List visibleSeriesKeys, Range xRange, boolean includeInterval) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        ParamChecks.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n        ParamChecks.nullNotPermitted(xRange, \"xRange\");\n    \n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n    \n        Iterator iterator = visibleSeriesKeys.iterator();\n        while (iterator.hasNext()) {\n            Comparable seriesKey = (Comparable) iterator.next();\n            int series = dataset.indexOf(seriesKey);\n            int itemCount = dataset.getItemCount(series);\n            for (int item = 0; item < itemCount; item++) {\n                double x = dataset.getXValue(series, item);\n                double z = dataset.getZValue(series, item);\n                if (xRange.contains(x)) {\n                    if (!Double.isNaN(z)) {\n                        minimum = Math.min(minimum, z);\n                        maximum = Math.max(maximum, z);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1557,"status":"M"}],"commitId":"22701c9ec4cd5bd88f8a7f17ae11c18099dd1ec7","commitMessage":"@@@Rename ParamChecks --> Args.","date":"2017-05-12 05:28:15","modifiedFileCount":"216","status":"M","submitter":"David Gilbert"},{"authorTime":"2017-05-12 05:28:15","codes":[{"authorDate":"2020-03-15 15:36:15","commitOrder":3,"curCode":"    public static <S extends Comparable<S>> Range iterateToFindDomainBounds(\n            XYDataset dataset, List<S> visibleSeriesKeys, boolean includeInterval) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Args.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            \r\n            IntervalXYDataset ixyd = (IntervalXYDataset) dataset;\n            for (S seriesKey : visibleSeriesKeys) {\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double xvalue = ixyd.getXValue(series, item);\n                    double lvalue = ixyd.getStartXValue(series, item);\n                    double uvalue = ixyd.getEndXValue(series, item);\n                    if (!Double.isNaN(xvalue)) {\n                        minimum = Math.min(minimum, xvalue);\n                        maximum = Math.max(maximum, xvalue);\n                    }\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        } else {\n            \r\n            for (S seriesKey : visibleSeriesKeys) {\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double x = dataset.getXValue(series, item);\n                    if (!Double.isNaN(x)) {\n                        minimum = Math.min(minimum, x);\n                        maximum = Math.max(maximum, x);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","date":"2020-03-15 15:36:15","endLine":1340,"groupId":"1070","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"iterateToFindDomainBounds","params":"(XYDatasetdataset@List<S>visibleSeriesKeys@booleanincludeInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/2b/f55a95d2f3a0fda94e483fcdd44f8c0c38f24c.src","preCode":"    public static Range iterateToFindDomainBounds(XYDataset dataset,\n            List visibleSeriesKeys, boolean includeInterval) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Args.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            \r\n            IntervalXYDataset ixyd = (IntervalXYDataset) dataset;\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double xvalue = ixyd.getXValue(series, item);\n                    double lvalue = ixyd.getStartXValue(series, item);\n                    double uvalue = ixyd.getEndXValue(series, item);\n                    if (!Double.isNaN(xvalue)) {\n                        minimum = Math.min(minimum, xvalue);\n                        maximum = Math.max(maximum, xvalue);\n                    }\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        } else {\n            \r\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double x = dataset.getXValue(series, item);\n                    if (!Double.isNaN(x)) {\n                        minimum = Math.min(minimum, x);\n                        maximum = Math.max(maximum, x);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1290,"status":"M"},{"authorDate":"2017-05-12 05:28:15","commitOrder":3,"curCode":"    public static Range iterateToFindZBounds(XYZDataset dataset,\n            List visibleSeriesKeys, Range xRange, boolean includeInterval) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Args.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n        Args.nullNotPermitted(xRange, \"xRange\");\n    \n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n    \n        Iterator iterator = visibleSeriesKeys.iterator();\n        while (iterator.hasNext()) {\n            Comparable seriesKey = (Comparable) iterator.next();\n            int series = dataset.indexOf(seriesKey);\n            int itemCount = dataset.getItemCount(series);\n            for (int item = 0; item < itemCount; item++) {\n                double x = dataset.getXValue(series, item);\n                double z = dataset.getZValue(series, item);\n                if (xRange.contains(x)) {\n                    if (!Double.isNaN(z)) {\n                        minimum = Math.min(minimum, z);\n                        maximum = Math.max(maximum, z);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","date":"2017-05-12 05:28:15","endLine":1588,"groupId":"55","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"iterateToFindZBounds","params":"(XYZDatasetdataset@ListvisibleSeriesKeys@RangexRange@booleanincludeInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/57/fedbdb6f2ba5f9f0c0c73cd2e21515625fcee8.src","preCode":"    public static Range iterateToFindZBounds(XYZDataset dataset,\n            List visibleSeriesKeys, Range xRange, boolean includeInterval) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Args.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n        Args.nullNotPermitted(xRange, \"xRange\");\n    \n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n    \n        Iterator iterator = visibleSeriesKeys.iterator();\n        while (iterator.hasNext()) {\n            Comparable seriesKey = (Comparable) iterator.next();\n            int series = dataset.indexOf(seriesKey);\n            int itemCount = dataset.getItemCount(series);\n            for (int item = 0; item < itemCount; item++) {\n                double x = dataset.getXValue(series, item);\n                double z = dataset.getZValue(series, item);\n                if (xRange.contains(x)) {\n                    if (!Double.isNaN(z)) {\n                        minimum = Math.min(minimum, z);\n                        maximum = Math.max(maximum, z);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1557,"status":"N"}],"commitId":"3e13a50e8b025d15b978faffb0843080be20d4b3","commitMessage":"@@@Fix NetBeans warnings.","date":"2020-03-15 15:36:15","modifiedFileCount":"18","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-29 16:37:24","codes":[{"authorDate":"2020-03-29 16:37:24","commitOrder":4,"curCode":"    public static <S extends Comparable<S>> Range iterateToFindDomainBounds(\n            XYDataset<S> dataset, List<S> visibleSeriesKeys, \n            boolean includeInterval) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Args.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            \r\n            @SuppressWarnings(\"unchecked\")\n            IntervalXYDataset<S> ixyd = (IntervalXYDataset) dataset;\n            for (S seriesKey : visibleSeriesKeys) {\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double xvalue = ixyd.getXValue(series, item);\n                    double lvalue = ixyd.getStartXValue(series, item);\n                    double uvalue = ixyd.getEndXValue(series, item);\n                    if (!Double.isNaN(xvalue)) {\n                        minimum = Math.min(minimum, xvalue);\n                        maximum = Math.max(maximum, xvalue);\n                    }\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        } else {\n            \r\n            for (S seriesKey : visibleSeriesKeys) {\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double x = dataset.getXValue(series, item);\n                    if (!Double.isNaN(x)) {\n                        minimum = Math.min(minimum, x);\n                        maximum = Math.max(maximum, x);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","date":"2020-03-29 16:37:24","endLine":1346,"groupId":"102068","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"iterateToFindDomainBounds","params":"(XYDataset<S>dataset@List<S>visibleSeriesKeys@booleanincludeInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/5b/c5866b92930fd53a8a92248e13bc02bdaa2334.src","preCode":"    public static <S extends Comparable<S>> Range iterateToFindDomainBounds(\n            XYDataset dataset, List<S> visibleSeriesKeys, boolean includeInterval) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Args.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            \r\n            IntervalXYDataset ixyd = (IntervalXYDataset) dataset;\n            for (S seriesKey : visibleSeriesKeys) {\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double xvalue = ixyd.getXValue(series, item);\n                    double lvalue = ixyd.getStartXValue(series, item);\n                    double uvalue = ixyd.getEndXValue(series, item);\n                    if (!Double.isNaN(xvalue)) {\n                        minimum = Math.min(minimum, xvalue);\n                        maximum = Math.max(maximum, xvalue);\n                    }\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        } else {\n            \r\n            for (S seriesKey : visibleSeriesKeys) {\n                int series = dataset.indexOf(seriesKey);\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double x = dataset.getXValue(series, item);\n                    if (!Double.isNaN(x)) {\n                        minimum = Math.min(minimum, x);\n                        maximum = Math.max(maximum, x);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1294,"status":"M"},{"authorDate":"2020-03-29 16:37:24","commitOrder":4,"curCode":"    public static <S extends Comparable<S>> Range iterateToFindZBounds(\n            XYZDataset<S> dataset, List<S> visibleSeriesKeys, Range xRange, \n            boolean includeInterval) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Args.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n        Args.nullNotPermitted(xRange, \"xRange\");\n    \n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n    \n        for (S seriesKey : visibleSeriesKeys) {\n            int series = dataset.indexOf(seriesKey);\n            int itemCount = dataset.getItemCount(series);\n            for (int item = 0; item < itemCount; item++) {\n                double x = dataset.getXValue(series, item);\n                double z = dataset.getZValue(series, item);\n                if (xRange.contains(x)) {\n                    if (!Double.isNaN(z)) {\n                        minimum = Math.min(minimum, z);\n                        maximum = Math.max(maximum, z);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","date":"2020-03-29 16:37:24","endLine":1515,"groupId":"102068","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"iterateToFindZBounds","params":"(XYZDataset<S>dataset@List<S>visibleSeriesKeys@RangexRange@booleanincludeInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/5b/c5866b92930fd53a8a92248e13bc02bdaa2334.src","preCode":"    public static Range iterateToFindZBounds(XYZDataset dataset,\n            List visibleSeriesKeys, Range xRange, boolean includeInterval) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Args.nullNotPermitted(visibleSeriesKeys, \"visibleSeriesKeys\");\n        Args.nullNotPermitted(xRange, \"xRange\");\n    \n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n    \n        Iterator iterator = visibleSeriesKeys.iterator();\n        while (iterator.hasNext()) {\n            Comparable seriesKey = (Comparable) iterator.next();\n            int series = dataset.indexOf(seriesKey);\n            int itemCount = dataset.getItemCount(series);\n            for (int item = 0; item < itemCount; item++) {\n                double x = dataset.getXValue(series, item);\n                double z = dataset.getZValue(series, item);\n                if (xRange.contains(x)) {\n                    if (!Double.isNaN(z)) {\n                        minimum = Math.min(minimum, z);\n                        maximum = Math.max(maximum, z);\n                    }\n                }\n            }\n        }\n\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        } else {\n            return new Range(minimum, maximum);\n        }\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1485,"status":"M"}],"commitId":"e21c4225a7fb294665bc97a40f5738a5449a0824","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-29 16:37:24","modifiedFileCount":"8","status":"M","submitter":"David Gilbert"}]
