[{"authorTime":"2017-03-08 01:39:11","codes":[{"authorDate":"2017-03-08 01:39:11","commitOrder":2,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.seriesVisible, that.seriesVisible)) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.baseSeriesVisible != that.baseSeriesVisible) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.seriesVisibleInLegend,\n                that.seriesVisibleInLegend)) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.baseSeriesVisibleInLegend != that.baseSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.paint, that.paint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.basePaint, that.basePaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.fillPaint, that.fillPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseFillPaint, that.baseFillPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlinePaintList,\n                that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseOutlinePaint,\n                that.baseOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.stroke, that.stroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseStroke, that.baseStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStrokeList,\n                that.outlineStrokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(\n            this.baseOutlineStroke, that.baseOutlineStroke)\n        ) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.shape, that.shape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shapeList, that.shapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.baseShape, that.baseShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelsVisible,\n                that.itemLabelsVisible)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelsVisibleList,\n                that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseItemLabelsVisible,\n                that.baseItemLabelsVisible)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelFont, that.itemLabelFont)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelFontMap,\n                that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseItemLabelFont,\n                that.baseItemLabelFont)) {\n            return false;\n        }\n\n        if (!PaintUtils.equal(this.itemLabelPaint, that.itemLabelPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelPaintList,\n                that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseItemLabelPaint,\n                that.baseItemLabelPaint)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.positiveItemLabelPosition,\n                that.positiveItemLabelPosition)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.positiveItemLabelPositionMap,\n                that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.basePositiveItemLabelPosition,\n                that.basePositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.negativeItemLabelPosition,\n                that.negativeItemLabelPosition)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.negativeItemLabelPositionMap,\n                that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseNegativeItemLabelPosition,\n                that.baseNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.createEntities, that.createEntities)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.createEntitiesList,\n                that.createEntitiesList)) {\n            return false;\n        }\n        if (this.baseCreateEntities != that.baseCreateEntities) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendShapeList,\n                that.legendShapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.baseLegendShape,\n                that.baseLegendShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextFontMap, \n                that.legendTextFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseLegendTextFont,\n                that.baseLegendTextFont)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextPaint,\n                that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseLegendTextPaint,\n                that.baseLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","date":"2017-03-08 01:39:11","endLine":3177,"groupId":"2300","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/bd/4359671d3132b8e66c8e64cf5b6cf9b9ebc783.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.seriesVisible, that.seriesVisible)) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.baseSeriesVisible != that.baseSeriesVisible) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.seriesVisibleInLegend,\n                that.seriesVisibleInLegend)) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.baseSeriesVisibleInLegend != that.baseSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.paint, that.paint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.basePaint, that.basePaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.fillPaint, that.fillPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseFillPaint, that.baseFillPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlinePaintList,\n                that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseOutlinePaint,\n                that.baseOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.stroke, that.stroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseStroke, that.baseStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStrokeList,\n                that.outlineStrokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(\n            this.baseOutlineStroke, that.baseOutlineStroke)\n        ) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.shape, that.shape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shapeList, that.shapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.baseShape, that.baseShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelsVisible,\n                that.itemLabelsVisible)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelsVisibleList,\n                that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseItemLabelsVisible,\n                that.baseItemLabelsVisible)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelFont, that.itemLabelFont)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelFontMap,\n                that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseItemLabelFont,\n                that.baseItemLabelFont)) {\n            return false;\n        }\n\n        if (!PaintUtils.equal(this.itemLabelPaint, that.itemLabelPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelPaintList,\n                that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseItemLabelPaint,\n                that.baseItemLabelPaint)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.positiveItemLabelPosition,\n                that.positiveItemLabelPosition)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.positiveItemLabelPositionMap,\n                that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.basePositiveItemLabelPosition,\n                that.basePositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.negativeItemLabelPosition,\n                that.negativeItemLabelPosition)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.negativeItemLabelPositionMap,\n                that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseNegativeItemLabelPosition,\n                that.baseNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.createEntities, that.createEntities)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.createEntitiesList,\n                that.createEntitiesList)) {\n            return false;\n        }\n        if (this.baseCreateEntities != that.baseCreateEntities) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendShapeList,\n                that.legendShapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.baseLegendShape,\n                that.baseLegendShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextFontMap, \n                that.legendTextFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseLegendTextFont,\n                that.baseLegendTextFont)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextPaint,\n                that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseLegendTextPaint,\n                that.baseLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/AbstractRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2981,"status":"MB"},{"authorDate":"2017-03-08 01:39:11","commitOrder":2,"curCode":"    public boolean equals(final Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!ObjectUtils.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.backgroundPaint,\n                that.backgroundPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","date":"2017-03-08 01:39:11","endLine":334,"groupId":"268","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(finalObjectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/04/03f4519948889f951ef972afc208e72942e3d5.src","preCode":"    public boolean equals(final Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!ObjectUtils.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.backgroundPaint,\n                that.backgroundPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/text/TextBox.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"B"}],"commitId":"949365da759b3ea009185090fb4b27e75d768793","commitMessage":"@@@Incorporate required JCommon classes directly.","date":"2017-03-08 01:39:11","modifiedFileCount":"462","status":"M","submitter":"David Gilbert"},{"authorTime":"2017-03-08 01:39:11","codes":[{"authorDate":"2017-03-10 23:59:03","commitOrder":3,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.baseSeriesVisible != that.baseSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.baseSeriesVisibleInLegend != that.baseSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.basePaint, that.basePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseFillPaint, that.baseFillPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlinePaintList,\n                that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseOutlinePaint,\n                that.baseOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseStroke, that.baseStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStrokeList,\n                that.outlineStrokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(\n            this.baseOutlineStroke, that.baseOutlineStroke)\n        ) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shapeList, that.shapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.baseShape, that.baseShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelsVisibleList,\n                that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseItemLabelsVisible,\n                that.baseItemLabelsVisible)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelFontMap,\n                that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseItemLabelFont,\n                that.baseItemLabelFont)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.itemLabelPaintList,\n                that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseItemLabelPaint,\n                that.baseItemLabelPaint)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.positiveItemLabelPositionMap,\n                that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.basePositiveItemLabelPosition,\n                that.basePositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.negativeItemLabelPositionMap,\n                that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseNegativeItemLabelPosition,\n                that.baseNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.createEntitiesList,\n                that.createEntitiesList)) {\n            return false;\n        }\n        if (this.baseCreateEntities != that.baseCreateEntities) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendShapeList,\n                that.legendShapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.baseLegendShape,\n                that.baseLegendShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextFontMap, \n                that.legendTextFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseLegendTextFont,\n                that.baseLegendTextFont)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextPaint,\n                that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseLegendTextPaint,\n                that.baseLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","date":"2017-03-10 23:59:03","endLine":3052,"groupId":"2300","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/9e/0819b188bddd7739be9298f6806c733325088d.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.seriesVisible, that.seriesVisible)) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.baseSeriesVisible != that.baseSeriesVisible) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.seriesVisibleInLegend,\n                that.seriesVisibleInLegend)) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.baseSeriesVisibleInLegend != that.baseSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.paint, that.paint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.basePaint, that.basePaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.fillPaint, that.fillPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseFillPaint, that.baseFillPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlinePaintList,\n                that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseOutlinePaint,\n                that.baseOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.stroke, that.stroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseStroke, that.baseStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStrokeList,\n                that.outlineStrokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(\n            this.baseOutlineStroke, that.baseOutlineStroke)\n        ) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.shape, that.shape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shapeList, that.shapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.baseShape, that.baseShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelsVisible,\n                that.itemLabelsVisible)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelsVisibleList,\n                that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseItemLabelsVisible,\n                that.baseItemLabelsVisible)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelFont, that.itemLabelFont)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelFontMap,\n                that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseItemLabelFont,\n                that.baseItemLabelFont)) {\n            return false;\n        }\n\n        if (!PaintUtils.equal(this.itemLabelPaint, that.itemLabelPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelPaintList,\n                that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseItemLabelPaint,\n                that.baseItemLabelPaint)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.positiveItemLabelPosition,\n                that.positiveItemLabelPosition)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.positiveItemLabelPositionMap,\n                that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.basePositiveItemLabelPosition,\n                that.basePositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.negativeItemLabelPosition,\n                that.negativeItemLabelPosition)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.negativeItemLabelPositionMap,\n                that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseNegativeItemLabelPosition,\n                that.baseNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.createEntities, that.createEntities)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.createEntitiesList,\n                that.createEntitiesList)) {\n            return false;\n        }\n        if (this.baseCreateEntities != that.baseCreateEntities) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendShapeList,\n                that.legendShapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.baseLegendShape,\n                that.baseLegendShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextFontMap, \n                that.legendTextFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseLegendTextFont,\n                that.baseLegendTextFont)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextPaint,\n                that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseLegendTextPaint,\n                that.baseLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/AbstractRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2902,"status":"M"},{"authorDate":"2017-03-08 01:39:11","commitOrder":3,"curCode":"    public boolean equals(final Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!ObjectUtils.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.backgroundPaint,\n                that.backgroundPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","date":"2017-03-08 01:39:11","endLine":334,"groupId":"268","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(finalObjectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/04/03f4519948889f951ef972afc208e72942e3d5.src","preCode":"    public boolean equals(final Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!ObjectUtils.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.backgroundPaint,\n                that.backgroundPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/text/TextBox.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"N"}],"commitId":"61220d6f207fdee783a87ad7428baa0d61c7ad79","commitMessage":"@@@Remove deprecated code","date":"2017-03-10 23:59:03","modifiedFileCount":"18","status":"M","submitter":"David Gilbert"},{"authorTime":"2017-03-08 01:39:11","codes":[{"authorDate":"2017-03-13 17:42:58","commitOrder":4,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint,\n                that.defaultFillPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlinePaintList,\n                that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint,\n                that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStrokeList,\n                that.outlineStrokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultOutlineStroke,\n                that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shapeList, that.shapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelsVisibleList,\n                that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultItemLabelsVisible,\n                that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelFontMap,\n                that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultItemLabelFont,\n                that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.itemLabelPaintList,\n                that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.positiveItemLabelPositionMap,\n                that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultPositiveItemLabelPosition,\n                that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.negativeItemLabelPositionMap,\n                that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultNegativeItemLabelPosition,\n                that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.createEntitiesList,\n                that.createEntitiesList)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendShapeList,\n                that.legendShapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape,\n                that.defaultLegendShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextFontMap, \n                that.legendTextFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultLegendTextFont,\n                that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextPaint,\n                that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","date":"2017-03-13 17:42:58","endLine":3033,"groupId":"2300","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/7e/fcfedd34566fe900a68d0341fdd93ee6c1fc1c.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.baseSeriesVisible != that.baseSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.baseSeriesVisibleInLegend != that.baseSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.basePaint, that.basePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseFillPaint, that.baseFillPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlinePaintList,\n                that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseOutlinePaint,\n                that.baseOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseStroke, that.baseStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStrokeList,\n                that.outlineStrokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(\n            this.baseOutlineStroke, that.baseOutlineStroke)\n        ) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shapeList, that.shapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.baseShape, that.baseShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelsVisibleList,\n                that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseItemLabelsVisible,\n                that.baseItemLabelsVisible)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelFontMap,\n                that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseItemLabelFont,\n                that.baseItemLabelFont)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.itemLabelPaintList,\n                that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseItemLabelPaint,\n                that.baseItemLabelPaint)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.positiveItemLabelPositionMap,\n                that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.basePositiveItemLabelPosition,\n                that.basePositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.negativeItemLabelPositionMap,\n                that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseNegativeItemLabelPosition,\n                that.baseNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.createEntitiesList,\n                that.createEntitiesList)) {\n            return false;\n        }\n        if (this.baseCreateEntities != that.baseCreateEntities) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendShapeList,\n                that.legendShapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.baseLegendShape,\n                that.baseLegendShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextFontMap, \n                that.legendTextFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.baseLegendTextFont,\n                that.baseLegendTextFont)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextPaint,\n                that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.baseLegendTextPaint,\n                that.baseLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/AbstractRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2882,"status":"M"},{"authorDate":"2017-03-08 01:39:11","commitOrder":4,"curCode":"    public boolean equals(final Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!ObjectUtils.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.backgroundPaint,\n                that.backgroundPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","date":"2017-03-08 01:39:11","endLine":334,"groupId":"268","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(finalObjectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/04/03f4519948889f951ef972afc208e72942e3d5.src","preCode":"    public boolean equals(final Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!ObjectUtils.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.backgroundPaint,\n                that.backgroundPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/text/TextBox.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"N"}],"commitId":"6a67a2027cb181c8d00b88145a1b4b0116c38805","commitMessage":"@@@Change 'base' to 'default' for renderer attributes.","date":"2017-03-13 17:42:58","modifiedFileCount":"35","status":"M","submitter":"David Gilbert"},{"authorTime":"2017-05-06 12:51:33","codes":[{"authorDate":"2017-03-13 17:42:58","commitOrder":5,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint,\n                that.defaultFillPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlinePaintList,\n                that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint,\n                that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStrokeList,\n                that.outlineStrokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultOutlineStroke,\n                that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shapeList, that.shapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelsVisibleList,\n                that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultItemLabelsVisible,\n                that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelFontMap,\n                that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultItemLabelFont,\n                that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.itemLabelPaintList,\n                that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.positiveItemLabelPositionMap,\n                that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultPositiveItemLabelPosition,\n                that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.negativeItemLabelPositionMap,\n                that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultNegativeItemLabelPosition,\n                that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.createEntitiesList,\n                that.createEntitiesList)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendShapeList,\n                that.legendShapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape,\n                that.defaultLegendShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextFontMap, \n                that.legendTextFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultLegendTextFont,\n                that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextPaint,\n                that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","date":"2017-03-13 17:42:58","endLine":3033,"groupId":"2300","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/7e/fcfedd34566fe900a68d0341fdd93ee6c1fc1c.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint,\n                that.defaultFillPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlinePaintList,\n                that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint,\n                that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStrokeList,\n                that.outlineStrokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultOutlineStroke,\n                that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shapeList, that.shapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelsVisibleList,\n                that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultItemLabelsVisible,\n                that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelFontMap,\n                that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultItemLabelFont,\n                that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.itemLabelPaintList,\n                that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.positiveItemLabelPositionMap,\n                that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultPositiveItemLabelPosition,\n                that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.negativeItemLabelPositionMap,\n                that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultNegativeItemLabelPosition,\n                that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.createEntitiesList,\n                that.createEntitiesList)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendShapeList,\n                that.legendShapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape,\n                that.defaultLegendShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextFontMap, \n                that.legendTextFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultLegendTextFont,\n                that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextPaint,\n                that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/AbstractRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2882,"status":"N"},{"authorDate":"2017-05-06 12:51:33","commitOrder":5,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!ObjectUtils.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.backgroundPaint,\n                that.backgroundPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","date":"2017-05-06 12:51:33","endLine":358,"groupId":"268","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/70/b2e4a8ba60973250a25e4c6aceca95fdddff45.src","preCode":"    public boolean equals(final Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!ObjectUtils.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.backgroundPaint,\n                that.backgroundPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/text/TextBox.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"075427ba093833c9e79b9d2dc1c31fdbcd9613b6","commitMessage":"@@@Cleanup","date":"2017-05-06 12:51:33","modifiedFileCount":"1","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-07-01 12:16:46","codes":[{"authorDate":"2020-07-01 12:16:46","commitOrder":6,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!Objects.equals(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint,\n                that.defaultFillPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlinePaintList, that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint,\n                that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStrokeList, that.outlineStrokeList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultOutlineStroke, that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.shapeList, that.shapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelsVisibleList, that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelsVisible, that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelFontMap, that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelFont, that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.itemLabelPaintList, that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.positiveItemLabelPositionMap, that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultPositiveItemLabelPosition, that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.negativeItemLabelPositionMap, that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultNegativeItemLabelPosition, that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.createEntitiesList, that.createEntitiesList)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!Objects.equals(this.legendShapeList, that.legendShapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape,\n                that.defaultLegendShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextFontMap, that.legendTextFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultLegendTextFont, that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextPaint, that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","date":"2020-07-01 12:16:46","endLine":2959,"groupId":"3928","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/44/12f6f3d664585e8dc7fde667561e8c34108712.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint,\n                that.defaultFillPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlinePaintList,\n                that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint,\n                that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStrokeList,\n                that.outlineStrokeList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultOutlineStroke,\n                that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shapeList, that.shapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelsVisibleList,\n                that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultItemLabelsVisible,\n                that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.itemLabelFontMap,\n                that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultItemLabelFont,\n                that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.itemLabelPaintList,\n                that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.positiveItemLabelPositionMap,\n                that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultPositiveItemLabelPosition,\n                that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!ObjectUtils.equal(this.negativeItemLabelPositionMap,\n                that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultNegativeItemLabelPosition,\n                that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.createEntitiesList,\n                that.createEntitiesList)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendShapeList,\n                that.legendShapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape,\n                that.defaultLegendShape)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextFontMap, \n                that.legendTextFontMap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.defaultLegendTextFont,\n                that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.legendTextPaint,\n                that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/AbstractRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2825,"status":"M"},{"authorDate":"2020-07-01 12:16:46","commitOrder":6,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!Objects.equals(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!Objects.equals(this.backgroundPaint, that.backgroundPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","date":"2020-07-01 12:16:46","endLine":359,"groupId":"2444","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/35/3975375242d434d2a02f4e597da636bceea2b8.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!ObjectUtils.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.backgroundPaint,\n                that.backgroundPaint)) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!ObjectUtils.equal(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/text/TextBox.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"}],"commitId":"1955cc38345a5ea52879eb186f09cf2e930bd9e6","commitMessage":"@@@Merge pull request #163 from simon04/use-Objects\n\nUse Objects.hashCode.  Objects.equals.  CloneUtils.clone.  CloneUtils.cloneList.  remove ObjectUtils","date":"2020-07-01 12:16:46","modifiedFileCount":"130","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-07-01 12:16:46","codes":[{"authorDate":"2021-03-02 02:56:49","commitOrder":7,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!Objects.equals(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint,\n                that.defaultFillPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlinePaintList, that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint,\n                that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStrokeList, that.outlineStrokeList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultOutlineStroke, that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesShapes, that.seriesShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelsVisibleList, that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelsVisible, that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelFontMap, that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelFont, that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.itemLabelPaintList, that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.positiveItemLabelPositionMap, that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultPositiveItemLabelPosition, that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.negativeItemLabelPositionMap, that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultNegativeItemLabelPosition, that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.createEntitiesList, that.createEntitiesList)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesLegendShapes, that.seriesLegendShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape,\n                that.defaultLegendShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextFontMap, that.legendTextFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultLegendTextFont, that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextPaint, that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","date":"2021-03-02 02:56:49","endLine":2832,"groupId":"3928","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/58/b9a03b4e32b5ba7b788249307494b1769f0812.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!Objects.equals(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint,\n                that.defaultFillPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlinePaintList, that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint,\n                that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStrokeList, that.outlineStrokeList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultOutlineStroke, that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.shapeList, that.shapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelsVisibleList, that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelsVisible, that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelFontMap, that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelFont, that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.itemLabelPaintList, that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.positiveItemLabelPositionMap, that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultPositiveItemLabelPosition, that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.negativeItemLabelPositionMap, that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultNegativeItemLabelPosition, that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.createEntitiesList, that.createEntitiesList)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!Objects.equals(this.legendShapeList, that.legendShapeList)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape,\n                that.defaultLegendShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextFontMap, that.legendTextFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultLegendTextFont, that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextPaint, that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/AbstractRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2698,"status":"M"},{"authorDate":"2020-07-01 12:16:46","commitOrder":7,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!Objects.equals(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!Objects.equals(this.backgroundPaint, that.backgroundPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","date":"2020-07-01 12:16:46","endLine":359,"groupId":"2444","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/35/3975375242d434d2a02f4e597da636bceea2b8.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!Objects.equals(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!Objects.equals(this.backgroundPaint, that.backgroundPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/text/TextBox.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"N"}],"commitId":"3a4712f32f7bde9142dc0805c40976c8d11e312d","commitMessage":"@@@Delete ShapeList class and replace with Map<Integer.  Shape>","date":"2021-03-02 02:56:49","modifiedFileCount":"2","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-07-01 12:16:46","codes":[{"authorDate":"2021-03-02 13:48:34","commitOrder":8,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!Objects.equals(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint,\n                that.defaultFillPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlinePaintList, that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint,\n                that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesStrokes, that.seriesStrokes)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesOutlineStrokes, that.seriesOutlineStrokes)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultOutlineStroke, that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesShapes, that.seriesShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelsVisibleList, that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelsVisible, that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelFontMap, that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelFont, that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.itemLabelPaintList, that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.positiveItemLabelPositionMap, that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultPositiveItemLabelPosition, that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.negativeItemLabelPositionMap, that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultNegativeItemLabelPosition, that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.createEntitiesList, that.createEntitiesList)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesLegendShapes, that.seriesLegendShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape,\n                that.defaultLegendShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextFontMap, that.legendTextFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultLegendTextFont, that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextPaint, that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","date":"2021-03-02 13:48:34","endLine":2832,"groupId":"3928","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/2d/f17f53965345587e505786e1c360a02c883bcd.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!Objects.equals(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint,\n                that.defaultFillPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlinePaintList, that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint,\n                that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStrokeList, that.outlineStrokeList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultOutlineStroke, that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesShapes, that.seriesShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelsVisibleList, that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelsVisible, that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelFontMap, that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelFont, that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.itemLabelPaintList, that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.positiveItemLabelPositionMap, that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultPositiveItemLabelPosition, that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.negativeItemLabelPositionMap, that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultNegativeItemLabelPosition, that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.createEntitiesList, that.createEntitiesList)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesLegendShapes, that.seriesLegendShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape,\n                that.defaultLegendShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextFontMap, that.legendTextFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultLegendTextFont, that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextPaint, that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/AbstractRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2698,"status":"M"},{"authorDate":"2020-07-01 12:16:46","commitOrder":8,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!Objects.equals(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!Objects.equals(this.backgroundPaint, that.backgroundPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","date":"2020-07-01 12:16:46","endLine":359,"groupId":"2444","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/35/3975375242d434d2a02f4e597da636bceea2b8.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!Objects.equals(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!Objects.equals(this.backgroundPaint, that.backgroundPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/text/TextBox.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"N"}],"commitId":"8f80ac68c27cadf3e8046e2840f896f0088e8d81","commitMessage":"@@@Delete StrokeList class (replace with Map<Integer.  Stroke>)","date":"2021-03-02 13:48:34","modifiedFileCount":"3","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-07-01 12:16:46","codes":[{"authorDate":"2021-03-05 02:08:47","commitOrder":9,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.seriesPaints, that.seriesPaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.seriesFillPaints, that.seriesFillPaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint,\n                that.defaultFillPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.outlinePaints, that.outlinePaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint,\n                that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesStrokes, that.seriesStrokes)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesOutlineStrokes, that.seriesOutlineStrokes)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultOutlineStroke, that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesShapes, that.seriesShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelsVisibleList, that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelsVisible, that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelFontMap, that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelFont, that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!PaintUtils.equal(this.itemLabelPaints, that.itemLabelPaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.positiveItemLabelPositionMap, that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultPositiveItemLabelPosition, that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.negativeItemLabelPositionMap, that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultNegativeItemLabelPosition, that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.createEntitiesList, that.createEntitiesList)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesLegendShapes, that.seriesLegendShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape,\n                that.defaultLegendShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextFontMap, that.legendTextFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultLegendTextFont, that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.legendTextPaints, that.legendTextPaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","date":"2021-03-05 02:08:47","endLine":2835,"groupId":"2229","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/21/e4df42adfc381abfc6349c5909f5ab42509668.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!Objects.equals(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint,\n                that.defaultFillPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlinePaintList, that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint,\n                that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesStrokes, that.seriesStrokes)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesOutlineStrokes, that.seriesOutlineStrokes)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultOutlineStroke, that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesShapes, that.seriesShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelsVisibleList, that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelsVisible, that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelFontMap, that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelFont, that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.itemLabelPaintList, that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.positiveItemLabelPositionMap, that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultPositiveItemLabelPosition, that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.negativeItemLabelPositionMap, that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultNegativeItemLabelPosition, that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.createEntitiesList, that.createEntitiesList)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesLegendShapes, that.seriesLegendShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape,\n                that.defaultLegendShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextFontMap, that.legendTextFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultLegendTextFont, that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextPaint, that.legendTextPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/AbstractRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2701,"status":"M"},{"authorDate":"2020-07-01 12:16:46","commitOrder":9,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!Objects.equals(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!Objects.equals(this.backgroundPaint, that.backgroundPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","date":"2020-07-01 12:16:46","endLine":359,"groupId":"2444","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/35/3975375242d434d2a02f4e597da636bceea2b8.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!Objects.equals(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!Objects.equals(this.backgroundPaint, that.backgroundPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/text/TextBox.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"N"}],"commitId":"23f2266614cdb362870069a124af4e4335cc54a6","commitMessage":"@@@Delete PaintList class (replace with Map<Integer.  Paint>)","date":"2021-03-05 02:08:47","modifiedFileCount":"8","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-07-01 12:16:46","codes":[{"authorDate":"2021-03-05 13:21:35","commitOrder":10,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.seriesPaintMap, that.seriesPaintMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesPaint != that.autoPopulateSeriesPaint) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.seriesFillPaintMap, that.seriesFillPaintMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesFillPaint != that.autoPopulateSeriesFillPaint) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint, that.defaultFillPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.seriesOutlinePaintMap, that.seriesOutlinePaintMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesOutlinePaint != that.autoPopulateSeriesOutlinePaint) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint, that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesStrokeMap, that.seriesStrokeMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesStroke != that.autoPopulateSeriesStroke) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesOutlineStrokeMap, that.seriesOutlineStrokeMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesOutlineStroke != that.autoPopulateSeriesOutlineStroke) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultOutlineStroke, that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesShapeMap, that.seriesShapeMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesShape != that.autoPopulateSeriesShape) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelsVisibleList, that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelsVisible, that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelFontMap, that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelFont, that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!PaintUtils.equal(this.itemLabelPaints, that.itemLabelPaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.positiveItemLabelPositionMap, that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultPositiveItemLabelPosition, that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.negativeItemLabelPositionMap, that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultNegativeItemLabelPosition, that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.createEntitiesList, that.createEntitiesList)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesLegendShapes, that.seriesLegendShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape, that.defaultLegendShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextFontMap, that.legendTextFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultLegendTextFont, that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.legendTextPaints, that.legendTextPaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","date":"2021-03-05 13:21:35","endLine":2850,"groupId":"2229","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/41/d80c89650bf3a6443ae990da7369737b6a81fb.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.seriesPaints, that.seriesPaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.seriesFillPaints, that.seriesFillPaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint,\n                that.defaultFillPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.outlinePaints, that.outlinePaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint,\n                that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesStrokes, that.seriesStrokes)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesOutlineStrokes, that.seriesOutlineStrokes)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultOutlineStroke, that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesShapes, that.seriesShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelsVisibleList, that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelsVisible, that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelFontMap, that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelFont, that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!PaintUtils.equal(this.itemLabelPaints, that.itemLabelPaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.positiveItemLabelPositionMap, that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultPositiveItemLabelPosition, that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.negativeItemLabelPositionMap, that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultNegativeItemLabelPosition, that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.createEntitiesList, that.createEntitiesList)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesLegendShapes, that.seriesLegendShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape,\n                that.defaultLegendShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextFontMap, that.legendTextFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultLegendTextFont, that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.legendTextPaints, that.legendTextPaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/AbstractRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2701,"status":"M"},{"authorDate":"2020-07-01 12:16:46","commitOrder":10,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!Objects.equals(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!Objects.equals(this.backgroundPaint, that.backgroundPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","date":"2020-07-01 12:16:46","endLine":359,"groupId":"2444","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/35/3975375242d434d2a02f4e597da636bceea2b8.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!Objects.equals(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!Objects.equals(this.backgroundPaint, that.backgroundPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/text/TextBox.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"N"}],"commitId":"666738a016bbc4c8fc6cce2ae4a2821b07d5e67d","commitMessage":"@@@Clean up renderer attribute maps.","date":"2021-03-05 13:21:35","modifiedFileCount":"31","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-07-01 12:16:46","codes":[{"authorDate":"2021-03-05 13:51:37","commitOrder":11,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleMap.equals(that.seriesVisibleMap)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendMap.equals(that.seriesVisibleInLegendMap)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.seriesPaintMap, that.seriesPaintMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesPaint != that.autoPopulateSeriesPaint) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.seriesFillPaintMap, that.seriesFillPaintMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesFillPaint != that.autoPopulateSeriesFillPaint) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint, that.defaultFillPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.seriesOutlinePaintMap, that.seriesOutlinePaintMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesOutlinePaint != that.autoPopulateSeriesOutlinePaint) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint, that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesStrokeMap, that.seriesStrokeMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesStroke != that.autoPopulateSeriesStroke) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesOutlineStrokeMap, that.seriesOutlineStrokeMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesOutlineStroke != that.autoPopulateSeriesOutlineStroke) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultOutlineStroke, that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesShapeMap, that.seriesShapeMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesShape != that.autoPopulateSeriesShape) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesItemLabelsVisibleMap, that.seriesItemLabelsVisibleMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelsVisible, that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelFontMap, that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelFont, that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!PaintUtils.equal(this.itemLabelPaints, that.itemLabelPaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.positiveItemLabelPositionMap, that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultPositiveItemLabelPosition, that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.negativeItemLabelPositionMap, that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultNegativeItemLabelPosition, that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesCreateEntitiesMap, that.seriesCreateEntitiesMap)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesLegendShapes, that.seriesLegendShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape, that.defaultLegendShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextFontMap, that.legendTextFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultLegendTextFont, that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.legendTextPaints, that.legendTextPaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","date":"2021-03-05 13:51:37","endLine":2846,"groupId":"101710","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/26/1f0b697cb250df0dcde0169cd1e0db835163f0.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (this.dataBoundsIncludesVisibleSeriesOnly\n                != that.dataBoundsIncludesVisibleSeriesOnly) {\n            return false;\n        }\n        if (this.treatLegendShapeAsLine != that.treatLegendShapeAsLine) {\n            return false;\n        }\n        if (this.defaultEntityRadius != that.defaultEntityRadius) {\n            return false;\n        }\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisible != that.defaultSeriesVisible) {\n            return false;\n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;\n        }\n        if (this.defaultSeriesVisibleInLegend\n                != that.defaultSeriesVisibleInLegend) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.seriesPaintMap, that.seriesPaintMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesPaint != that.autoPopulateSeriesPaint) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultPaint, that.defaultPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.seriesFillPaintMap, that.seriesFillPaintMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesFillPaint != that.autoPopulateSeriesFillPaint) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultFillPaint, that.defaultFillPaint)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.seriesOutlinePaintMap, that.seriesOutlinePaintMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesOutlinePaint != that.autoPopulateSeriesOutlinePaint) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultOutlinePaint, that.defaultOutlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesStrokeMap, that.seriesStrokeMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesStroke != that.autoPopulateSeriesStroke) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultStroke, that.defaultStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.seriesOutlineStrokeMap, that.seriesOutlineStrokeMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesOutlineStroke != that.autoPopulateSeriesOutlineStroke) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultOutlineStroke, that.defaultOutlineStroke)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesShapeMap, that.seriesShapeMap)) {\n            return false;\n        }\n        if (this.autoPopulateSeriesShape != that.autoPopulateSeriesShape) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultShape, that.defaultShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelsVisibleList, that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelsVisible, that.defaultItemLabelsVisible)) {\n            return false;\n        }\n        if (!Objects.equals(this.itemLabelFontMap, that.itemLabelFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultItemLabelFont, that.defaultItemLabelFont)) {\n            return false;\n        }\n\n        if (!PaintUtils.equal(this.itemLabelPaints, that.itemLabelPaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultItemLabelPaint,\n                that.defaultItemLabelPaint)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.positiveItemLabelPositionMap, that.positiveItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultPositiveItemLabelPosition, that.defaultPositiveItemLabelPosition)) {\n            return false;\n        }\n\n        if (!Objects.equals(this.negativeItemLabelPositionMap, that.negativeItemLabelPositionMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultNegativeItemLabelPosition, that.defaultNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.createEntitiesList, that.createEntitiesList)) {\n            return false;\n        }\n        if (this.defaultCreateEntities != that.defaultCreateEntities) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.seriesLegendShapes, that.seriesLegendShapes)) {\n            return false;\n        }\n        if (!ShapeUtils.equal(this.defaultLegendShape, that.defaultLegendShape)) {\n            return false;\n        }\n        if (!Objects.equals(this.legendTextFontMap, that.legendTextFontMap)) {\n            return false;\n        }\n        if (!Objects.equals(this.defaultLegendTextFont, that.defaultLegendTextFont)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.legendTextPaints, that.legendTextPaints)) {\n            return false;\n        }\n        if (!PaintUtils.equal(this.defaultLegendTextPaint,\n                that.defaultLegendTextPaint)) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/AbstractRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2698,"status":"M"},{"authorDate":"2020-07-01 12:16:46","commitOrder":11,"curCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!Objects.equals(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!Objects.equals(this.backgroundPaint, that.backgroundPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","date":"2020-07-01 12:16:46","endLine":359,"groupId":"101710","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objectobj)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/35/3975375242d434d2a02f4e597da636bceea2b8.src","preCode":"    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextBox)) {\n            return false;\n        }\n        final TextBox that = (TextBox) obj;\n        if (!Objects.equals(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!Objects.equals(this.interiorGap, that.interiorGap)) {\n            return false;\n        }\n        if (!Objects.equals(this.backgroundPaint, that.backgroundPaint)) {\n            return false;\n        }\n        if (!Objects.equals(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (this.shadowXOffset != that.shadowXOffset) {\n            return false;\n        }\n        if (this.shadowYOffset != that.shadowYOffset) {\n            return false;\n        }\n        if (!Objects.equals(this.textBlock, that.textBlock)) {\n            return false;\n        }\n\n        return true;\n    }\n","realPath":"src/main/java/org/jfree/chart/text/TextBox.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"N"}],"commitId":"84888b4c5326a51cbfec517f6ee7f64a5e36f00f","commitMessage":"@@@Replace usage of BooleanList with Map<Integer.  Boolean>","date":"2021-03-05 13:51:37","modifiedFileCount":"7","status":"M","submitter":"David Gilbert"}]
