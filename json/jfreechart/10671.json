[{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testAdd() {\n        DefaultBoxAndWhiskerCategoryDataset dataset\n                = new DefaultBoxAndWhiskerCategoryDataset();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0,\n                5.0, 6.0, 7.0, 8.0, new ArrayList());\n        dataset.add(item1, \"R1\", \"C1\");\n\n        assertEquals(2.0, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.0, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(2.0, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(3.0, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(4.0, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(5.0, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(6.0, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.0, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(8.0, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(new Range(7.0, 8.0), dataset.getRangeBounds(false));\n    }\n","date":"2016-02-19 15:40:32","endLine":180,"groupId":"1408","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAdd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/3c/273cd09f3e42a84783ab53029113557b3ff5b4.src","preCode":"    public void testAdd() {\n        DefaultBoxAndWhiskerCategoryDataset dataset\n                = new DefaultBoxAndWhiskerCategoryDataset();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0,\n                5.0, 6.0, 7.0, 8.0, new ArrayList());\n        dataset.add(item1, \"R1\", \"C1\");\n\n        assertEquals(2.0, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.0, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(2.0, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(3.0, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(4.0, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(5.0, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(6.0, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.0, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(8.0, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(new Range(7.0, 8.0), dataset.getRangeBounds(false));\n    }\n","realPath":"src/test/java/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDatasetTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"B"},{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testAddUpdatesCachedRange() {\n        DefaultBoxAndWhiskerCategoryDataset dataset\n                = new DefaultBoxAndWhiskerCategoryDataset();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0,\n                5.0, 6.0, 7.0, 8.0, new ArrayList());\n        dataset.add(item1, \"R1\", \"C1\");\n\n        \r\n        BoxAndWhiskerItem item2 = new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5,\n                5.5, 6.5, 7.5, 8.5, new ArrayList());\n        dataset.add(item2, \"R1\", \"C1\");\n\n        assertEquals(2.5, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.5, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(2.5, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(3.5, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(4.5, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(5.5, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(6.5, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.5, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(8.5, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(new Range(7.5, 8.5), dataset.getRangeBounds(false));\n    }\n","date":"2016-02-19 15:40:32","endLine":216,"groupId":"1408","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddUpdatesCachedRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/3c/273cd09f3e42a84783ab53029113557b3ff5b4.src","preCode":"    public void testAddUpdatesCachedRange() {\n        DefaultBoxAndWhiskerCategoryDataset dataset\n                = new DefaultBoxAndWhiskerCategoryDataset();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0,\n                5.0, 6.0, 7.0, 8.0, new ArrayList());\n        dataset.add(item1, \"R1\", \"C1\");\n\n        \r\n        BoxAndWhiskerItem item2 = new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5,\n                5.5, 6.5, 7.5, 8.5, new ArrayList());\n        dataset.add(item2, \"R1\", \"C1\");\n\n        assertEquals(2.5, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.5, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(2.5, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(3.5, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(4.5, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(5.5, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(6.5, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.5, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(8.5, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(new Range(7.5, 8.5), dataset.getRangeBounds(false));\n    }\n","realPath":"src/test/java/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDatasetTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"B"}],"commitId":"1b18adfb8102c34c9287ece406b9dde5751b90b5","commitMessage":"@@@Move test files to standard Maven location.","date":"2016-02-19 15:40:32","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2020-02-25 11:46:26","codes":[{"authorDate":"2020-02-25 11:46:26","commitOrder":2,"curCode":"    public void testAdd() {\n        DefaultBoxAndWhiskerCategoryDataset dataset\n                = new DefaultBoxAndWhiskerCategoryDataset();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0,\n                5.0, 6.0, 7.0, 8.0, new ArrayList<>());\n        dataset.add(item1, \"R1\", \"C1\");\n\n        assertEquals(2.0, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.0, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(2.0, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(3.0, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(4.0, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(5.0, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(6.0, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.0, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(8.0, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(new Range(7.0, 8.0), dataset.getRangeBounds(false));\n    }\n","date":"2020-02-25 11:46:26","endLine":169,"groupId":"1408","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAdd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/86/1f66ae831723d87b24164d6c71790a79fcf2c4.src","preCode":"    public void testAdd() {\n        DefaultBoxAndWhiskerCategoryDataset dataset\n                = new DefaultBoxAndWhiskerCategoryDataset();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0,\n                5.0, 6.0, 7.0, 8.0, new ArrayList());\n        dataset.add(item1, \"R1\", \"C1\");\n\n        assertEquals(2.0, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.0, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(2.0, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(3.0, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(4.0, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(5.0, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(6.0, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.0, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(8.0, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(new Range(7.0, 8.0), dataset.getRangeBounds(false));\n    }\n","realPath":"src/test/java/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDatasetTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2020-02-25 11:46:26","commitOrder":2,"curCode":"    public void testAddUpdatesCachedRange() {\n        DefaultBoxAndWhiskerCategoryDataset dataset\n                = new DefaultBoxAndWhiskerCategoryDataset();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0,\n                5.0, 6.0, 7.0, 8.0, new ArrayList<>());\n        dataset.add(item1, \"R1\", \"C1\");\n\n        \r\n        BoxAndWhiskerItem item2 = new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5,\n                5.5, 6.5, 7.5, 8.5, new ArrayList<>());\n        dataset.add(item2, \"R1\", \"C1\");\n\n        assertEquals(2.5, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.5, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(2.5, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(3.5, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(4.5, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(5.5, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(6.5, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.5, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(8.5, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(new Range(7.5, 8.5), dataset.getRangeBounds(false));\n    }\n","date":"2020-02-25 11:46:26","endLine":205,"groupId":"1408","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddUpdatesCachedRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/86/1f66ae831723d87b24164d6c71790a79fcf2c4.src","preCode":"    public void testAddUpdatesCachedRange() {\n        DefaultBoxAndWhiskerCategoryDataset dataset\n                = new DefaultBoxAndWhiskerCategoryDataset();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0,\n                5.0, 6.0, 7.0, 8.0, new ArrayList());\n        dataset.add(item1, \"R1\", \"C1\");\n\n        \r\n        BoxAndWhiskerItem item2 = new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5,\n                5.5, 6.5, 7.5, 8.5, new ArrayList());\n        dataset.add(item2, \"R1\", \"C1\");\n\n        assertEquals(2.5, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.5, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(2.5, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(3.5, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(4.5, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(5.5, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(6.5, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.5, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(8.5, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(new Range(7.5, 8.5), dataset.getRangeBounds(false));\n    }\n","realPath":"src/test/java/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDatasetTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"fc43f0bd633d91b12f72d4638f74fe9db9f1ec0a","commitMessage":"@@@Fix deprecations and compiler warnings.","date":"2020-02-25 11:46:26","modifiedFileCount":"6","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-21 13:20:24","codes":[{"authorDate":"2020-03-21 13:20:24","commitOrder":3,"curCode":"    public void testAdd() {\n        DefaultBoxAndWhiskerCategoryDataset<String, String> dataset\n                = new DefaultBoxAndWhiskerCategoryDataset<>();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0,\n                5.0, 6.0, 7.0, 8.0, new ArrayList<>());\n        dataset.add(item1, \"R1\", \"C1\");\n\n        assertEquals(2.0, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.0, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(2.0, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(3.0, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(4.0, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(5.0, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(6.0, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.0, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(8.0, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(new Range(7.0, 8.0), dataset.getRangeBounds(false));\n    }\n","date":"2020-03-21 13:20:24","endLine":159,"groupId":"10671","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAdd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/1d/094668ab9e9a6273072e44347dd463c0ffbe0e.src","preCode":"    public void testAdd() {\n        DefaultBoxAndWhiskerCategoryDataset dataset\n                = new DefaultBoxAndWhiskerCategoryDataset();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0,\n                5.0, 6.0, 7.0, 8.0, new ArrayList<>());\n        dataset.add(item1, \"R1\", \"C1\");\n\n        assertEquals(2.0, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.0, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(2.0, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(3.0, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(4.0, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(5.0, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(6.0, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.0, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(8.0, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(new Range(7.0, 8.0), dataset.getRangeBounds(false));\n    }\n","realPath":"src/test/java/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDatasetTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2020-03-21 13:20:24","commitOrder":3,"curCode":"    public void testAddUpdatesCachedRange() {\n        DefaultBoxAndWhiskerCategoryDataset<String, String> dataset\n                = new DefaultBoxAndWhiskerCategoryDataset<>();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0,\n                5.0, 6.0, 7.0, 8.0, new ArrayList<>());\n        dataset.add(item1, \"R1\", \"C1\");\n\n        \r\n        BoxAndWhiskerItem item2 = new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5,\n                5.5, 6.5, 7.5, 8.5, new ArrayList<>());\n        dataset.add(item2, \"R1\", \"C1\");\n\n        assertEquals(2.5, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.5, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(2.5, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(3.5, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(4.5, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(5.5, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(6.5, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.5, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(8.5, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(new Range(7.5, 8.5), dataset.getRangeBounds(false));\n    }\n","date":"2020-03-21 13:20:24","endLine":195,"groupId":"10671","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddUpdatesCachedRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/1d/094668ab9e9a6273072e44347dd463c0ffbe0e.src","preCode":"    public void testAddUpdatesCachedRange() {\n        DefaultBoxAndWhiskerCategoryDataset dataset\n                = new DefaultBoxAndWhiskerCategoryDataset();\n        BoxAndWhiskerItem item1 = new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0,\n                5.0, 6.0, 7.0, 8.0, new ArrayList<>());\n        dataset.add(item1, \"R1\", \"C1\");\n\n        \r\n        BoxAndWhiskerItem item2 = new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5,\n                5.5, 6.5, 7.5, 8.5, new ArrayList<>());\n        dataset.add(item2, \"R1\", \"C1\");\n\n        assertEquals(2.5, dataset.getValue(\"R1\", \"C1\").doubleValue(), EPSILON);\n        assertEquals(1.5, dataset.getMeanValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(2.5, dataset.getMedianValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(3.5, dataset.getQ1Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(4.5, dataset.getQ3Value(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(5.5, dataset.getMinRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(6.5, dataset.getMaxRegularValue(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(7.5, dataset.getMinOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(8.5, dataset.getMaxOutlier(\"R1\", \"C1\").doubleValue(),\n                EPSILON);\n        assertEquals(new Range(7.5, 8.5), dataset.getRangeBounds(false));\n    }\n","realPath":"src/test/java/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDatasetTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"d9ff717a669366c8ea7d76474a94b8c1919daaeb","commitMessage":"@@@Add generics.","date":"2020-03-21 13:20:24","modifiedFileCount":"3","status":"M","submitter":"David Gilbert"}]
