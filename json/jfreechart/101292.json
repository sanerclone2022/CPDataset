[{"authorTime":"2017-05-06 16:37:24","codes":[{"authorDate":"2017-05-06 16:37:24","commitOrder":1,"curCode":"    public void testIterateToFindRangeBounds_MultiValueCategoryDataset() {\n        DefaultMultiValueCategoryDataset dataset\n                = new DefaultMultiValueCategoryDataset();\n        List visibleSeriesKeys = new ArrayList();\n        assertNull(DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        List values = Arrays.asList(new Double[] {new Double(1.0)});\n        dataset.add(values, \"R1\", \"C1\");\n        visibleSeriesKeys.add(\"R1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {new Double(2.0), new Double(3.0)});\n        dataset.add(values, \"R1\", \"C2\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {new Double(-1.0),\n                new Double(-2.0)});\n        dataset.add(values, \"R2\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        visibleSeriesKeys.add(\"R2\");\n        assertEquals(new Range(-2.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n    }\n","date":"2017-05-06 16:37:24","endLine":1300,"groupId":"318","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIterateToFindRangeBounds_MultiValueCategoryDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/b4/9a4c927d13fac132c4abb71492c916c5875ffb.src","preCode":"    public void testIterateToFindRangeBounds_MultiValueCategoryDataset() {\n        DefaultMultiValueCategoryDataset dataset\n                = new DefaultMultiValueCategoryDataset();\n        List visibleSeriesKeys = new ArrayList();\n        assertNull(DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        List values = Arrays.asList(new Double[] {new Double(1.0)});\n        dataset.add(values, \"R1\", \"C1\");\n        visibleSeriesKeys.add(\"R1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {new Double(2.0), new Double(3.0)});\n        dataset.add(values, \"R1\", \"C2\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {new Double(-1.0),\n                new Double(-2.0)});\n        dataset.add(values, \"R2\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        visibleSeriesKeys.add(\"R2\");\n        assertEquals(new Range(-2.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n    }\n","realPath":"src/test/java/org/jfree/data/general/DatasetUtilsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1271,"status":"B"},{"authorDate":"2017-05-06 16:37:24","commitOrder":1,"curCode":"    public void testIterateRangeBounds_IntervalCategoryDataset() {\n        TestIntervalCategoryDataset d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(2.5, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(4.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 4.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, new Double(2.0), new Double(3.0), \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        \r\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, null, \"R1\", \"C1\");\n        assertNull(DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(new Double(1.0), null, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, new Double(1.0), null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, new Double(1.0), \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n    }\n","date":"2017-05-06 16:37:24","endLine":1347,"groupId":"3161","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIterateRangeBounds_IntervalCategoryDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/b4/9a4c927d13fac132c4abb71492c916c5875ffb.src","preCode":"    public void testIterateRangeBounds_IntervalCategoryDataset() {\n        TestIntervalCategoryDataset d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(2.5, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(4.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 4.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, new Double(2.0), new Double(3.0), \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        \r\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, null, \"R1\", \"C1\");\n        assertNull(DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(new Double(1.0), null, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, new Double(1.0), null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, new Double(1.0), \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n    }\n","realPath":"src/test/java/org/jfree/data/general/DatasetUtilsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1307,"status":"B"}],"commitId":"434bac1e228cbbbebe7653d55064fb67e8c62962","commitMessage":"@@@Rename DatasetUtilities --> DatasetUtils.","date":"2017-05-06 16:37:24","modifiedFileCount":"31","status":"B","submitter":"David Gilbert"},{"authorTime":"2020-02-15 12:18:10","codes":[{"authorDate":"2020-02-15 12:18:10","commitOrder":2,"curCode":"    public void testIterateToFindRangeBounds_MultiValueCategoryDataset() {\n        DefaultMultiValueCategoryDataset dataset\n                = new DefaultMultiValueCategoryDataset();\n        List<String> visibleSeriesKeys = new ArrayList();\n        assertNull(DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        List<Double> values = Arrays.asList(new Double[] {1.0});\n        dataset.add(values, \"R1\", \"C1\");\n        visibleSeriesKeys.add(\"R1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {2.0, 3.0});\n        dataset.add(values, \"R1\", \"C2\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {-1.0, -2.0});\n        dataset.add(values, \"R2\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        visibleSeriesKeys.add(\"R2\");\n        assertEquals(new Range(-2.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n    }\n","date":"2020-02-15 12:18:10","endLine":1284,"groupId":"318","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIterateToFindRangeBounds_MultiValueCategoryDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/54/5d34a33ec76f66b4437c5adc828710c8907579.src","preCode":"    public void testIterateToFindRangeBounds_MultiValueCategoryDataset() {\n        DefaultMultiValueCategoryDataset dataset\n                = new DefaultMultiValueCategoryDataset();\n        List visibleSeriesKeys = new ArrayList();\n        assertNull(DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        List values = Arrays.asList(new Double[] {new Double(1.0)});\n        dataset.add(values, \"R1\", \"C1\");\n        visibleSeriesKeys.add(\"R1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {new Double(2.0), new Double(3.0)});\n        dataset.add(values, \"R1\", \"C2\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {new Double(-1.0),\n                new Double(-2.0)});\n        dataset.add(values, \"R2\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        visibleSeriesKeys.add(\"R2\");\n        assertEquals(new Range(-2.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n    }\n","realPath":"src/test/java/org/jfree/data/general/DatasetUtilsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1256,"status":"M"},{"authorDate":"2020-02-15 12:18:10","commitOrder":2,"curCode":"    public void testIterateRangeBounds_IntervalCategoryDataset() {\n        TestIntervalCategoryDataset d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(2.5, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(4.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 4.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        \r\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, null, \"R1\", \"C1\");\n        assertNull(DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, null, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 1.0, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, 1.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n    }\n","date":"2020-02-15 12:18:10","endLine":1331,"groupId":"3161","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIterateRangeBounds_IntervalCategoryDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/54/5d34a33ec76f66b4437c5adc828710c8907579.src","preCode":"    public void testIterateRangeBounds_IntervalCategoryDataset() {\n        TestIntervalCategoryDataset d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(2.5, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(4.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 4.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, new Double(2.0), new Double(3.0), \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        \r\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, null, \"R1\", \"C1\");\n        assertNull(DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(new Double(1.0), null, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, new Double(1.0), null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, new Double(1.0), \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n    }\n","realPath":"src/test/java/org/jfree/data/general/DatasetUtilsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1291,"status":"M"}],"commitId":"6597144e4cc722e70daa6843b396a50999f6f622","commitMessage":"@@@Add test case and fix for bug #141","date":"2020-02-15 12:18:10","modifiedFileCount":"2","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-02-15 12:18:10","codes":[{"authorDate":"2020-02-25 13:16:00","commitOrder":3,"curCode":"    public void testIterateToFindRangeBounds_MultiValueCategoryDataset() {\n        DefaultMultiValueCategoryDataset dataset\n                = new DefaultMultiValueCategoryDataset();\n        List<String> visibleSeriesKeys = new ArrayList<>();\n        assertNull(DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        List<Double> values = Arrays.asList(new Double[] {1.0});\n        dataset.add(values, \"R1\", \"C1\");\n        visibleSeriesKeys.add(\"R1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {2.0, 3.0});\n        dataset.add(values, \"R1\", \"C2\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {-1.0, -2.0});\n        dataset.add(values, \"R2\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        visibleSeriesKeys.add(\"R2\");\n        assertEquals(new Range(-2.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n    }\n","date":"2020-02-25 13:16:00","endLine":1284,"groupId":"318","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIterateToFindRangeBounds_MultiValueCategoryDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/07/b1e373cd91e52418599e344ae3d64c6782139e.src","preCode":"    public void testIterateToFindRangeBounds_MultiValueCategoryDataset() {\n        DefaultMultiValueCategoryDataset dataset\n                = new DefaultMultiValueCategoryDataset();\n        List<String> visibleSeriesKeys = new ArrayList();\n        assertNull(DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        List<Double> values = Arrays.asList(new Double[] {1.0});\n        dataset.add(values, \"R1\", \"C1\");\n        visibleSeriesKeys.add(\"R1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {2.0, 3.0});\n        dataset.add(values, \"R1\", \"C2\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {-1.0, -2.0});\n        dataset.add(values, \"R2\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        visibleSeriesKeys.add(\"R2\");\n        assertEquals(new Range(-2.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n    }\n","realPath":"src/test/java/org/jfree/data/general/DatasetUtilsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1256,"status":"M"},{"authorDate":"2020-02-15 12:18:10","commitOrder":3,"curCode":"    public void testIterateRangeBounds_IntervalCategoryDataset() {\n        TestIntervalCategoryDataset d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(2.5, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(4.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 4.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        \r\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, null, \"R1\", \"C1\");\n        assertNull(DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, null, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 1.0, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, 1.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n    }\n","date":"2020-02-15 12:18:10","endLine":1331,"groupId":"3161","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIterateRangeBounds_IntervalCategoryDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/54/5d34a33ec76f66b4437c5adc828710c8907579.src","preCode":"    public void testIterateRangeBounds_IntervalCategoryDataset() {\n        TestIntervalCategoryDataset d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(2.5, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(4.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 4.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        \r\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, null, \"R1\", \"C1\");\n        assertNull(DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, null, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 1.0, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, 1.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n    }\n","realPath":"src/test/java/org/jfree/data/general/DatasetUtilsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1291,"status":"N"}],"commitId":"ac35d446add4fd4035c6fcc651df9d1d4e57e24a","commitMessage":"@@@Fix deprecations and compiler warnings.","date":"2020-02-25 13:16:00","modifiedFileCount":"12","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-02-15 12:18:10","codes":[{"authorDate":"2020-03-09 11:01:25","commitOrder":4,"curCode":"    public void testIterateToFindRangeBounds_MultiValueCategoryDataset() {\n        DefaultMultiValueCategoryDataset dataset\n                = new DefaultMultiValueCategoryDataset();\n        List<String> visibleSeriesKeys = new ArrayList<>();\n        assertNull(DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        List<Double> values = Arrays.asList(new Double[] {1.0});\n        dataset.add(values, \"R1\", \"C1\");\n        visibleSeriesKeys.add(\"R1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {2.0, 3.0});\n        dataset.add(values, \"R1\", \"C2\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {-1.0, -2.0});\n        dataset.add(values, \"R2\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        visibleSeriesKeys.add(\"R2\");\n        assertEquals(new Range(-2.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n    }\n","date":"2020-03-09 11:01:25","endLine":1288,"groupId":"318","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testIterateToFindRangeBounds_MultiValueCategoryDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/f8/d711e8fc55b20664f8b8d0bc17e794ba0a3d8d.src","preCode":"    public void testIterateToFindRangeBounds_MultiValueCategoryDataset() {\n        DefaultMultiValueCategoryDataset dataset\n                = new DefaultMultiValueCategoryDataset();\n        List<String> visibleSeriesKeys = new ArrayList<>();\n        assertNull(DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        List<Double> values = Arrays.asList(new Double[] {1.0});\n        dataset.add(values, \"R1\", \"C1\");\n        visibleSeriesKeys.add(\"R1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {2.0, 3.0});\n        dataset.add(values, \"R1\", \"C2\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {-1.0, -2.0});\n        dataset.add(values, \"R2\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        visibleSeriesKeys.add(\"R2\");\n        assertEquals(new Range(-2.0, 3.0),\n                DatasetUtils.iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n    }\n","realPath":"src/test/java/org/jfree/data/general/DatasetUtilsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1260,"status":"M"},{"authorDate":"2020-02-15 12:18:10","commitOrder":4,"curCode":"    public void testIterateRangeBounds_IntervalCategoryDataset() {\n        TestIntervalCategoryDataset d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(2.5, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(4.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 4.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        \r\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, null, \"R1\", \"C1\");\n        assertNull(DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, null, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 1.0, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, 1.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n    }\n","date":"2020-02-15 12:18:10","endLine":1331,"groupId":"3161","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testIterateRangeBounds_IntervalCategoryDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/54/5d34a33ec76f66b4437c5adc828710c8907579.src","preCode":"    public void testIterateRangeBounds_IntervalCategoryDataset() {\n        TestIntervalCategoryDataset d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(2.5, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(4.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 4.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        \r\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, null, \"R1\", \"C1\");\n        assertNull(DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, null, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 1.0, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, 1.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n    }\n","realPath":"src/test/java/org/jfree/data/general/DatasetUtilsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1291,"status":"N"}],"commitId":"156d2f017215afd500475c72ac2d95595994282c","commitMessage":"@@@Generics / warning fixes.","date":"2020-03-09 11:01:25","modifiedFileCount":"20","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-02-15 12:18:10","codes":[{"authorDate":"2020-03-09 11:24:15","commitOrder":5,"curCode":"    public void testIterateToFindRangeBounds_MultiValueCategoryDataset() {\n        DefaultMultiValueCategoryDataset<String, String> dataset\n                = new DefaultMultiValueCategoryDataset<>();\n        List<String> visibleSeriesKeys = new ArrayList<>();\n        assertNull(DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        List<Double> values = Arrays.asList(new Double[] {1.0});\n        dataset.add(values, \"R1\", \"C1\");\n        visibleSeriesKeys.add(\"R1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {2.0, 3.0});\n        dataset.add(values, \"R1\", \"C2\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {-1.0, -2.0});\n        dataset.add(values, \"R2\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        visibleSeriesKeys.add(\"R2\");\n        assertEquals(new Range(-2.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n    }\n","date":"2020-03-09 11:24:15","endLine":1288,"groupId":"318","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testIterateToFindRangeBounds_MultiValueCategoryDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/0d/14527ccd9ef9c5c428d606142018c7de619bd7.src","preCode":"    public void testIterateToFindRangeBounds_MultiValueCategoryDataset() {\n        DefaultMultiValueCategoryDataset dataset\n                = new DefaultMultiValueCategoryDataset();\n        List<String> visibleSeriesKeys = new ArrayList<>();\n        assertNull(DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        List<Double> values = Arrays.asList(new Double[] {1.0});\n        dataset.add(values, \"R1\", \"C1\");\n        visibleSeriesKeys.add(\"R1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {2.0, 3.0});\n        dataset.add(values, \"R1\", \"C2\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {-1.0, -2.0});\n        dataset.add(values, \"R2\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        visibleSeriesKeys.add(\"R2\");\n        assertEquals(new Range(-2.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n    }\n","realPath":"src/test/java/org/jfree/data/general/DatasetUtilsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1260,"status":"M"},{"authorDate":"2020-02-15 12:18:10","commitOrder":5,"curCode":"    public void testIterateRangeBounds_IntervalCategoryDataset() {\n        TestIntervalCategoryDataset d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(2.5, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(4.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 4.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        \r\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, null, \"R1\", \"C1\");\n        assertNull(DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, null, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 1.0, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, 1.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n    }\n","date":"2020-02-15 12:18:10","endLine":1331,"groupId":"3161","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testIterateRangeBounds_IntervalCategoryDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/54/5d34a33ec76f66b4437c5adc828710c8907579.src","preCode":"    public void testIterateRangeBounds_IntervalCategoryDataset() {\n        TestIntervalCategoryDataset d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(2.5, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(4.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 4.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        \r\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, null, \"R1\", \"C1\");\n        assertNull(DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, null, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 1.0, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, 1.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n    }\n","realPath":"src/test/java/org/jfree/data/general/DatasetUtilsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1291,"status":"N"}],"commitId":"14f6ae88edbedc0579f8133bf02d3b52db86fa7d","commitMessage":"@@@Generics / warning fixes.","date":"2020-03-09 11:24:15","modifiedFileCount":"11","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-24 19:47:03","codes":[{"authorDate":"2020-03-09 11:24:15","commitOrder":6,"curCode":"    public void testIterateToFindRangeBounds_MultiValueCategoryDataset() {\n        DefaultMultiValueCategoryDataset<String, String> dataset\n                = new DefaultMultiValueCategoryDataset<>();\n        List<String> visibleSeriesKeys = new ArrayList<>();\n        assertNull(DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        List<Double> values = Arrays.asList(new Double[] {1.0});\n        dataset.add(values, \"R1\", \"C1\");\n        visibleSeriesKeys.add(\"R1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {2.0, 3.0});\n        dataset.add(values, \"R1\", \"C2\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {-1.0, -2.0});\n        dataset.add(values, \"R2\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        visibleSeriesKeys.add(\"R2\");\n        assertEquals(new Range(-2.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n    }\n","date":"2020-03-09 11:24:15","endLine":1288,"groupId":"101292","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testIterateToFindRangeBounds_MultiValueCategoryDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/0d/14527ccd9ef9c5c428d606142018c7de619bd7.src","preCode":"    public void testIterateToFindRangeBounds_MultiValueCategoryDataset() {\n        DefaultMultiValueCategoryDataset<String, String> dataset\n                = new DefaultMultiValueCategoryDataset<>();\n        List<String> visibleSeriesKeys = new ArrayList<>();\n        assertNull(DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        List<Double> values = Arrays.asList(new Double[] {1.0});\n        dataset.add(values, \"R1\", \"C1\");\n        visibleSeriesKeys.add(\"R1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {2.0, 3.0});\n        dataset.add(values, \"R1\", \"C2\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n\n        values = Arrays.asList(new Double[] {-1.0, -2.0});\n        dataset.add(values, \"R2\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n        visibleSeriesKeys.add(\"R2\");\n        assertEquals(new Range(-2.0, 3.0),\n                DatasetUtils.<String, String>iterateToFindRangeBounds(dataset,\n                visibleSeriesKeys, true));\n    }\n","realPath":"src/test/java/org/jfree/data/general/DatasetUtilsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1260,"status":"N"},{"authorDate":"2020-03-24 19:47:03","commitOrder":6,"curCode":"    public void testIterateRangeBounds_IntervalCategoryDataset() {\n        TestIntervalCategoryDataset<String, String> d \n                = new TestIntervalCategoryDataset<>();\n        d.addItem(1.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 3.0), DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset<>();\n        d.addItem(2.5, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0), DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset<>();\n        d.addItem(4.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 4.0), DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset<>();\n        d.addItem(null, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0), DatasetUtils.iterateRangeBounds(d));\n\n        \r\n        d = new TestIntervalCategoryDataset<>();\n        d.addItem(null, null, null, \"R1\", \"C1\");\n        assertNull(DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset<>();\n        d.addItem(1.0, null, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0), DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset<>();\n        d.addItem(null, 1.0, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0), DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset<>();\n        d.addItem(null, null, 1.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0), DatasetUtils.iterateRangeBounds(d));\n    }\n","date":"2020-03-24 19:47:03","endLine":1329,"groupId":"101292","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testIterateRangeBounds_IntervalCategoryDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/ec/31c890007e5dbe773016a5cf11145ded7e9659.src","preCode":"    public void testIterateRangeBounds_IntervalCategoryDataset() {\n        TestIntervalCategoryDataset d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(2.5, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(4.0, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 4.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 2.0, 3.0, \"R1\", \"C1\");\n        assertEquals(new Range(2.0, 3.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        \r\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, null, \"R1\", \"C1\");\n        assertNull(DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(1.0, null, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, 1.0, null, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n\n        d = new TestIntervalCategoryDataset();\n        d.addItem(null, null, 1.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0),\n                DatasetUtils.iterateRangeBounds(d));\n    }\n","realPath":"src/test/java/org/jfree/data/general/DatasetUtilsTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1295,"status":"M"}],"commitId":"768ee10eb77abd31a62f6f26d6e0153c05a415c9","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-24 19:47:03","modifiedFileCount":"23","status":"M","submitter":"David Gilbert"}]
