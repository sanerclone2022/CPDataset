[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    protected List refreshTicksHorizontal(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        if (isAutoTickUnitSelection()) {\n            selectAutoTickUnit(g2, dataArea, edge);\n        }\n\n        TickUnit tu = getTickUnit();\n        double size = tu.getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            int minorTickSpaces = getMinorTickCount();\n            if (minorTickSpaces <= 0) {\n                minorTickSpaces = tu.getMinorTickCount();\n            }\n            for (int minorTick = 1; minorTick < minorTickSpaces; minorTick++) {\n                double minorTickValue = lowestTickValue \n                        - size * minorTick / minorTickSpaces;\n                if (getRange().contains(minorTickValue)) {\n                    result.add(new NumberTick(TickType.MINOR, minorTickValue,\n                            \"\", TextAnchor.TOP_CENTER, TextAnchor.CENTER,\n                            0.0));\n                }\n            }\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = getTickUnit().valueToString(currentTickValue);\n                }\n                TextAnchor anchor, rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.CENTER_RIGHT;\n                    rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    if (edge == RectangleEdge.TOP) {\n                        angle = Math.PI / 2.0;\n                    }\n                    else {\n                        angle = -Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.TOP) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    }\n                    else {\n                        anchor = TextAnchor.TOP_CENTER;\n                        rotationAnchor = TextAnchor.TOP_CENTER;\n                    }\n                }\n\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                result.add(tick);\n                double nextTickValue = lowestTickValue + ((i + 1) * size);\n                for (int minorTick = 1; minorTick < minorTickSpaces;\n                        minorTick++) {\n                    double minorTickValue = currentTickValue\n                            + (nextTickValue - currentTickValue)\n                            * minorTick / minorTickSpaces;\n                    if (getRange().contains(minorTickValue)) {\n                        result.add(new NumberTick(TickType.MINOR,\n                                minorTickValue, \"\", TextAnchor.TOP_CENTER,\n                                TextAnchor.CENTER, 0.0));\n                    }\n                }\n            }\n        }\n        return result;\n\n    }\n","date":"2016-02-19 16:24:22","endLine":1028,"groupId":"300","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"refreshTicksHorizontal","params":"(Graphics2Dg2@Rectangle2DdataArea@RectangleEdgeedge)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/48/e7b96dc8cc56536f417f98041ddc3ebc901628.src","preCode":"    protected List refreshTicksHorizontal(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        if (isAutoTickUnitSelection()) {\n            selectAutoTickUnit(g2, dataArea, edge);\n        }\n\n        TickUnit tu = getTickUnit();\n        double size = tu.getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            int minorTickSpaces = getMinorTickCount();\n            if (minorTickSpaces <= 0) {\n                minorTickSpaces = tu.getMinorTickCount();\n            }\n            for (int minorTick = 1; minorTick < minorTickSpaces; minorTick++) {\n                double minorTickValue = lowestTickValue \n                        - size * minorTick / minorTickSpaces;\n                if (getRange().contains(minorTickValue)) {\n                    result.add(new NumberTick(TickType.MINOR, minorTickValue,\n                            \"\", TextAnchor.TOP_CENTER, TextAnchor.CENTER,\n                            0.0));\n                }\n            }\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = getTickUnit().valueToString(currentTickValue);\n                }\n                TextAnchor anchor, rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.CENTER_RIGHT;\n                    rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    if (edge == RectangleEdge.TOP) {\n                        angle = Math.PI / 2.0;\n                    }\n                    else {\n                        angle = -Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.TOP) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    }\n                    else {\n                        anchor = TextAnchor.TOP_CENTER;\n                        rotationAnchor = TextAnchor.TOP_CENTER;\n                    }\n                }\n\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                result.add(tick);\n                double nextTickValue = lowestTickValue + ((i + 1) * size);\n                for (int minorTick = 1; minorTick < minorTickSpaces;\n                        minorTick++) {\n                    double minorTickValue = currentTickValue\n                            + (nextTickValue - currentTickValue)\n                            * minorTick / minorTickSpaces;\n                    if (getRange().contains(minorTickValue)) {\n                        result.add(new NumberTick(TickType.MINOR,\n                                minorTickValue, \"\", TextAnchor.TOP_CENTER,\n                                TextAnchor.CENTER, 0.0));\n                    }\n                }\n            }\n        }\n        return result;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/NumberAxis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":945,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    protected List refreshTicksVertical(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n        result.clear();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n        if (isAutoTickUnitSelection()) {\n            selectAutoTickUnit(g2, dataArea, edge);\n        }\n\n        TickUnit tu = getTickUnit();\n        double size = tu.getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            int minorTickSpaces = getMinorTickCount();\n            if (minorTickSpaces <= 0) {\n                minorTickSpaces = tu.getMinorTickCount();\n            }\n            for (int minorTick = 1; minorTick < minorTickSpaces; minorTick++) {\n                double minorTickValue = lowestTickValue\n                        - size * minorTick / minorTickSpaces;\n                if (getRange().contains(minorTickValue)) {\n                    result.add(new NumberTick(TickType.MINOR, minorTickValue,\n                            \"\", TextAnchor.TOP_CENTER, TextAnchor.CENTER,\n                            0.0));\n                }\n            }\n\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = getTickUnit().valueToString(currentTickValue);\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                        angle = -Math.PI / 2.0;\n                    }\n                    else {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                        angle = Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.CENTER_RIGHT;\n                        rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    }\n                    else {\n                        anchor = TextAnchor.CENTER_LEFT;\n                        rotationAnchor = TextAnchor.CENTER_LEFT;\n                    }\n                }\n\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                result.add(tick);\n\n                double nextTickValue = lowestTickValue + ((i + 1) * size);\n                for (int minorTick = 1; minorTick < minorTickSpaces;\n                        minorTick++) {\n                    double minorTickValue = currentTickValue\n                            + (nextTickValue - currentTickValue)\n                            * minorTick / minorTickSpaces;\n                    if (getRange().contains(minorTickValue)) {\n                        result.add(new NumberTick(TickType.MINOR,\n                                minorTickValue, \"\", TextAnchor.TOP_CENTER,\n                                TextAnchor.CENTER, 0.0));\n                    }\n                }\n            }\n        }\n        return result;\n\n    }\n","date":"2016-02-19 16:24:22","endLine":1129,"groupId":"2843","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"refreshTicksVertical","params":"(Graphics2Dg2@Rectangle2DdataArea@RectangleEdgeedge)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/48/e7b96dc8cc56536f417f98041ddc3ebc901628.src","preCode":"    protected List refreshTicksVertical(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n        result.clear();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n        if (isAutoTickUnitSelection()) {\n            selectAutoTickUnit(g2, dataArea, edge);\n        }\n\n        TickUnit tu = getTickUnit();\n        double size = tu.getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            int minorTickSpaces = getMinorTickCount();\n            if (minorTickSpaces <= 0) {\n                minorTickSpaces = tu.getMinorTickCount();\n            }\n            for (int minorTick = 1; minorTick < minorTickSpaces; minorTick++) {\n                double minorTickValue = lowestTickValue\n                        - size * minorTick / minorTickSpaces;\n                if (getRange().contains(minorTickValue)) {\n                    result.add(new NumberTick(TickType.MINOR, minorTickValue,\n                            \"\", TextAnchor.TOP_CENTER, TextAnchor.CENTER,\n                            0.0));\n                }\n            }\n\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = getTickUnit().valueToString(currentTickValue);\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                        angle = -Math.PI / 2.0;\n                    }\n                    else {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                        angle = Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.CENTER_RIGHT;\n                        rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    }\n                    else {\n                        anchor = TextAnchor.CENTER_LEFT;\n                        rotationAnchor = TextAnchor.CENTER_LEFT;\n                    }\n                }\n\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                result.add(tick);\n\n                double nextTickValue = lowestTickValue + ((i + 1) * size);\n                for (int minorTick = 1; minorTick < minorTickSpaces;\n                        minorTick++) {\n                    double minorTickValue = currentTickValue\n                            + (nextTickValue - currentTickValue)\n                            * minorTick / minorTickSpaces;\n                    if (getRange().contains(minorTickValue)) {\n                        result.add(new NumberTick(TickType.MINOR,\n                                minorTickValue, \"\", TextAnchor.TOP_CENTER,\n                                TextAnchor.CENTER, 0.0));\n                    }\n                }\n            }\n        }\n        return result;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/NumberAxis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1040,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2020-03-16 00:09:59","codes":[{"authorDate":"2020-03-16 00:09:59","commitOrder":2,"curCode":"    protected List refreshTicksHorizontal(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        if (isAutoTickUnitSelection()) {\n            selectAutoTickUnit(g2, dataArea, edge);\n        }\n\n        TickUnit tu = getTickUnit();\n        double size = tu.getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            int minorTickSpaces = getMinorTickCount();\n            if (minorTickSpaces <= 0) {\n                minorTickSpaces = tu.getMinorTickCount();\n            }\n            for (int minorTick = 1; minorTick < minorTickSpaces; minorTick++) {\n                double minorTickValue = lowestTickValue \n                        - size * minorTick / minorTickSpaces;\n                if (getRange().contains(minorTickValue)) {\n                    result.add(new NumberTick(TickType.MINOR, minorTickValue,\n                            \"\", TextAnchor.TOP_CENTER, TextAnchor.CENTER,\n                            0.0));\n                }\n            }\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = getTickUnit().valueToString(currentTickValue);\n                }\n                TextAnchor anchor, rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.CENTER_RIGHT;\n                    rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    if (edge == RectangleEdge.TOP) {\n                        angle = Math.PI / 2.0;\n                    }\n                    else {\n                        angle = -Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.TOP) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    }\n                    else {\n                        anchor = TextAnchor.TOP_CENTER;\n                        rotationAnchor = TextAnchor.TOP_CENTER;\n                    }\n                }\n\n                Tick tick = new NumberTick(currentTickValue,\n                        tickLabel, anchor, rotationAnchor, angle);\n                result.add(tick);\n                double nextTickValue = lowestTickValue + ((i + 1) * size);\n                for (int minorTick = 1; minorTick < minorTickSpaces;\n                        minorTick++) {\n                    double minorTickValue = currentTickValue\n                            + (nextTickValue - currentTickValue)\n                            * minorTick / minorTickSpaces;\n                    if (getRange().contains(minorTickValue)) {\n                        result.add(new NumberTick(TickType.MINOR,\n                                minorTickValue, \"\", TextAnchor.TOP_CENTER,\n                                TextAnchor.CENTER, 0.0));\n                    }\n                }\n            }\n        }\n        return result;\n\n    }\n","date":"2020-03-16 00:09:59","endLine":960,"groupId":"101850","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"refreshTicksHorizontal","params":"(Graphics2Dg2@Rectangle2DdataArea@RectangleEdgeedge)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/96/9d59fe438497a9510596e5d75995c9b520dd37.src","preCode":"    protected List refreshTicksHorizontal(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        if (isAutoTickUnitSelection()) {\n            selectAutoTickUnit(g2, dataArea, edge);\n        }\n\n        TickUnit tu = getTickUnit();\n        double size = tu.getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            int minorTickSpaces = getMinorTickCount();\n            if (minorTickSpaces <= 0) {\n                minorTickSpaces = tu.getMinorTickCount();\n            }\n            for (int minorTick = 1; minorTick < minorTickSpaces; minorTick++) {\n                double minorTickValue = lowestTickValue \n                        - size * minorTick / minorTickSpaces;\n                if (getRange().contains(minorTickValue)) {\n                    result.add(new NumberTick(TickType.MINOR, minorTickValue,\n                            \"\", TextAnchor.TOP_CENTER, TextAnchor.CENTER,\n                            0.0));\n                }\n            }\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = getTickUnit().valueToString(currentTickValue);\n                }\n                TextAnchor anchor, rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.CENTER_RIGHT;\n                    rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    if (edge == RectangleEdge.TOP) {\n                        angle = Math.PI / 2.0;\n                    }\n                    else {\n                        angle = -Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.TOP) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    }\n                    else {\n                        anchor = TextAnchor.TOP_CENTER;\n                        rotationAnchor = TextAnchor.TOP_CENTER;\n                    }\n                }\n\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                result.add(tick);\n                double nextTickValue = lowestTickValue + ((i + 1) * size);\n                for (int minorTick = 1; minorTick < minorTickSpaces;\n                        minorTick++) {\n                    double minorTickValue = currentTickValue\n                            + (nextTickValue - currentTickValue)\n                            * minorTick / minorTickSpaces;\n                    if (getRange().contains(minorTickValue)) {\n                        result.add(new NumberTick(TickType.MINOR,\n                                minorTickValue, \"\", TextAnchor.TOP_CENTER,\n                                TextAnchor.CENTER, 0.0));\n                    }\n                }\n            }\n        }\n        return result;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/NumberAxis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":877,"status":"M"},{"authorDate":"2020-03-16 00:09:59","commitOrder":2,"curCode":"    protected List refreshTicksVertical(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n        result.clear();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n        if (isAutoTickUnitSelection()) {\n            selectAutoTickUnit(g2, dataArea, edge);\n        }\n\n        TickUnit tu = getTickUnit();\n        double size = tu.getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            int minorTickSpaces = getMinorTickCount();\n            if (minorTickSpaces <= 0) {\n                minorTickSpaces = tu.getMinorTickCount();\n            }\n            for (int minorTick = 1; minorTick < minorTickSpaces; minorTick++) {\n                double minorTickValue = lowestTickValue\n                        - size * minorTick / minorTickSpaces;\n                if (getRange().contains(minorTickValue)) {\n                    result.add(new NumberTick(TickType.MINOR, minorTickValue,\n                            \"\", TextAnchor.TOP_CENTER, TextAnchor.CENTER,\n                            0.0));\n                }\n            }\n\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = getTickUnit().valueToString(currentTickValue);\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                        angle = -Math.PI / 2.0;\n                    }\n                    else {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                        angle = Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.CENTER_RIGHT;\n                        rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    }\n                    else {\n                        anchor = TextAnchor.CENTER_LEFT;\n                        rotationAnchor = TextAnchor.CENTER_LEFT;\n                    }\n                }\n\n                Tick tick = new NumberTick(currentTickValue, tickLabel, anchor, \n                        rotationAnchor, angle);\n                result.add(tick);\n\n                double nextTickValue = lowestTickValue + ((i + 1) * size);\n                for (int minorTick = 1; minorTick < minorTickSpaces;\n                        minorTick++) {\n                    double minorTickValue = currentTickValue\n                            + (nextTickValue - currentTickValue)\n                            * minorTick / minorTickSpaces;\n                    if (getRange().contains(minorTickValue)) {\n                        result.add(new NumberTick(TickType.MINOR,\n                                minorTickValue, \"\", TextAnchor.TOP_CENTER,\n                                TextAnchor.CENTER, 0.0));\n                    }\n                }\n            }\n        }\n        return result;\n\n    }\n","date":"2020-03-16 00:09:59","endLine":1061,"groupId":"101850","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"refreshTicksVertical","params":"(Graphics2Dg2@Rectangle2DdataArea@RectangleEdgeedge)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/96/9d59fe438497a9510596e5d75995c9b520dd37.src","preCode":"    protected List refreshTicksVertical(Graphics2D g2,\n            Rectangle2D dataArea, RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n        result.clear();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n        if (isAutoTickUnitSelection()) {\n            selectAutoTickUnit(g2, dataArea, edge);\n        }\n\n        TickUnit tu = getTickUnit();\n        double size = tu.getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            int minorTickSpaces = getMinorTickCount();\n            if (minorTickSpaces <= 0) {\n                minorTickSpaces = tu.getMinorTickCount();\n            }\n            for (int minorTick = 1; minorTick < minorTickSpaces; minorTick++) {\n                double minorTickValue = lowestTickValue\n                        - size * minorTick / minorTickSpaces;\n                if (getRange().contains(minorTickValue)) {\n                    result.add(new NumberTick(TickType.MINOR, minorTickValue,\n                            \"\", TextAnchor.TOP_CENTER, TextAnchor.CENTER,\n                            0.0));\n                }\n            }\n\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = getTickUnit().valueToString(currentTickValue);\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                        angle = -Math.PI / 2.0;\n                    }\n                    else {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                        angle = Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.CENTER_RIGHT;\n                        rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    }\n                    else {\n                        anchor = TextAnchor.CENTER_LEFT;\n                        rotationAnchor = TextAnchor.CENTER_LEFT;\n                    }\n                }\n\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                result.add(tick);\n\n                double nextTickValue = lowestTickValue + ((i + 1) * size);\n                for (int minorTick = 1; minorTick < minorTickSpaces;\n                        minorTick++) {\n                    double minorTickValue = currentTickValue\n                            + (nextTickValue - currentTickValue)\n                            * minorTick / minorTickSpaces;\n                    if (getRange().contains(minorTickValue)) {\n                        result.add(new NumberTick(TickType.MINOR,\n                                minorTickValue, \"\", TextAnchor.TOP_CENTER,\n                                TextAnchor.CENTER, 0.0));\n                    }\n                }\n            }\n        }\n        return result;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/NumberAxis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":972,"status":"M"}],"commitId":"d4df77cb15186a303747e89ab8eb4d23c78aa86a","commitMessage":"@@@Fix NetBeans warnings.","date":"2020-03-16 00:09:59","modifiedFileCount":"20","status":"M","submitter":"David Gilbert"}]
