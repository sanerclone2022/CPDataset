[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public static JFreeChart createPieChart(String title, PieDataset dataset,\n            boolean legend, boolean tooltips, Locale locale) {\n\n        PiePlot plot = new PiePlot(dataset);\n        plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));\n        plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));\n        if (tooltips) {\n            plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));\n        }\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }\n","date":"2016-02-19 16:24:22","endLine":307,"groupId":"1144","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createPieChart","params":"(Stringtitle@PieDatasetdataset@booleanlegend@booleantooltips@Localelocale)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/a7/7f02e9e4e22cbfe9402c923184667376f6e47d.src","preCode":"    public static JFreeChart createPieChart(String title, PieDataset dataset,\n            boolean legend, boolean tooltips, Locale locale) {\n\n        PiePlot plot = new PiePlot(dataset);\n        plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));\n        plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));\n        if (tooltips) {\n            plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));\n        }\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/ChartFactory.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public static JFreeChart createPieChart(String title, PieDataset dataset,\n            PieDataset previousDataset, int percentDiffForMaxScale,\n            boolean greenForIncrease, boolean legend, boolean tooltips,\n            Locale locale, boolean subTitle, boolean showDifference) {\n\n        PiePlot plot = new PiePlot(dataset);\n        plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));\n        plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));\n\n        if (tooltips) {\n            plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));\n        }\n\n        List keys = dataset.getKeys();\n        DefaultPieDataset series = null;\n        if (showDifference) {\n            series = new DefaultPieDataset();\n        }\n\n        double colorPerPercent = 255.0 / percentDiffForMaxScale;\n        for (Iterator it = keys.iterator(); it.hasNext();) {\n            Comparable key = (Comparable) it.next();\n            Number newValue = dataset.getValue(key);\n            Number oldValue = previousDataset.getValue(key);\n\n            if (oldValue == null) {\n                if (greenForIncrease) {\n                    plot.setSectionPaint(key, Color.green);\n                }\n                else {\n                    plot.setSectionPaint(key, Color.red);\n                }\n                if (showDifference) {\n                    assert series != null; \r\n                    series.setValue(key + \" (+100%)\", newValue);\n                }\n            }\n            else {\n                double percentChange = (newValue.doubleValue()\n                        / oldValue.doubleValue() - 1.0) * 100.0;\n                double shade\n                    = (Math.abs(percentChange) >= percentDiffForMaxScale ? 255\n                    : Math.abs(percentChange) * colorPerPercent);\n                if (greenForIncrease\n                        && newValue.doubleValue() > oldValue.doubleValue()\n                        || !greenForIncrease && newValue.doubleValue()\n                        < oldValue.doubleValue()) {\n                    plot.setSectionPaint(key, new Color(0, (int) shade, 0));\n                }\n                else {\n                    plot.setSectionPaint(key, new Color((int) shade, 0, 0));\n                }\n                if (showDifference) {\n                    assert series != null; \r\n                    series.setValue(key + \" (\" + (percentChange >= 0 ? \"+\" : \"\")\n                            + NumberFormat.getPercentInstance().format(\n                            percentChange / 100.0) + \")\", newValue);\n                }\n            }\n        }\n\n        if (showDifference) {\n            plot.setDataset(series);\n        }\n\n        JFreeChart chart =  new JFreeChart(title,\n                JFreeChart.DEFAULT_TITLE_FONT, plot, legend);\n\n        if (subTitle) {\n            TextTitle subtitle = new TextTitle(\"Bright \" + (greenForIncrease \n                    ? \"red\" : \"green\") + \"=change >=-\" + percentDiffForMaxScale\n                    + \"%, Bright \" + (!greenForIncrease ? \"red\" : \"green\")\n                    + \"=change >=+\" + percentDiffForMaxScale + \"%\",\n                    new Font(\"SansSerif\", Font.PLAIN, 10));\n            chart.addSubtitle(subtitle);\n        }\n        currentTheme.apply(chart);\n        return chart;\n    }\n","date":"2016-02-19 16:24:22","endLine":476,"groupId":"1144","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createPieChart","params":"(Stringtitle@PieDatasetdataset@PieDatasetpreviousDataset@intpercentDiffForMaxScale@booleangreenForIncrease@booleanlegend@booleantooltips@Localelocale@booleansubTitle@booleanshowDifference)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/a7/7f02e9e4e22cbfe9402c923184667376f6e47d.src","preCode":"    public static JFreeChart createPieChart(String title, PieDataset dataset,\n            PieDataset previousDataset, int percentDiffForMaxScale,\n            boolean greenForIncrease, boolean legend, boolean tooltips,\n            Locale locale, boolean subTitle, boolean showDifference) {\n\n        PiePlot plot = new PiePlot(dataset);\n        plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));\n        plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));\n\n        if (tooltips) {\n            plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));\n        }\n\n        List keys = dataset.getKeys();\n        DefaultPieDataset series = null;\n        if (showDifference) {\n            series = new DefaultPieDataset();\n        }\n\n        double colorPerPercent = 255.0 / percentDiffForMaxScale;\n        for (Iterator it = keys.iterator(); it.hasNext();) {\n            Comparable key = (Comparable) it.next();\n            Number newValue = dataset.getValue(key);\n            Number oldValue = previousDataset.getValue(key);\n\n            if (oldValue == null) {\n                if (greenForIncrease) {\n                    plot.setSectionPaint(key, Color.green);\n                }\n                else {\n                    plot.setSectionPaint(key, Color.red);\n                }\n                if (showDifference) {\n                    assert series != null; \r\n                    series.setValue(key + \" (+100%)\", newValue);\n                }\n            }\n            else {\n                double percentChange = (newValue.doubleValue()\n                        / oldValue.doubleValue() - 1.0) * 100.0;\n                double shade\n                    = (Math.abs(percentChange) >= percentDiffForMaxScale ? 255\n                    : Math.abs(percentChange) * colorPerPercent);\n                if (greenForIncrease\n                        && newValue.doubleValue() > oldValue.doubleValue()\n                        || !greenForIncrease && newValue.doubleValue()\n                        < oldValue.doubleValue()) {\n                    plot.setSectionPaint(key, new Color(0, (int) shade, 0));\n                }\n                else {\n                    plot.setSectionPaint(key, new Color((int) shade, 0, 0));\n                }\n                if (showDifference) {\n                    assert series != null; \r\n                    series.setValue(key + \" (\" + (percentChange >= 0 ? \"+\" : \"\")\n                            + NumberFormat.getPercentInstance().format(\n                            percentChange / 100.0) + \")\", newValue);\n                }\n            }\n        }\n\n        if (showDifference) {\n            plot.setDataset(series);\n        }\n\n        JFreeChart chart =  new JFreeChart(title,\n                JFreeChart.DEFAULT_TITLE_FONT, plot, legend);\n\n        if (subTitle) {\n            TextTitle subtitle = new TextTitle(\"Bright \" + (greenForIncrease \n                    ? \"red\" : \"green\") + \"=change >=-\" + percentDiffForMaxScale\n                    + \"%, Bright \" + (!greenForIncrease ? \"red\" : \"green\")\n                    + \"=change >=+\" + percentDiffForMaxScale + \"%\",\n                    new Font(\"SansSerif\", Font.PLAIN, 10));\n            chart.addSubtitle(subtitle);\n        }\n        currentTheme.apply(chart);\n        return chart;\n    }\n","realPath":"src/main/java/org/jfree/chart/ChartFactory.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":398,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2017-05-06 02:22:05","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":2,"curCode":"    public static JFreeChart createPieChart(String title, PieDataset dataset,\n            boolean legend, boolean tooltips, Locale locale) {\n\n        PiePlot plot = new PiePlot(dataset);\n        plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));\n        plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));\n        if (tooltips) {\n            plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));\n        }\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }\n","date":"2016-02-19 16:24:22","endLine":307,"groupId":"111765","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createPieChart","params":"(Stringtitle@PieDatasetdataset@booleanlegend@booleantooltips@Localelocale)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/a7/7f02e9e4e22cbfe9402c923184667376f6e47d.src","preCode":"    public static JFreeChart createPieChart(String title, PieDataset dataset,\n            boolean legend, boolean tooltips, Locale locale) {\n\n        PiePlot plot = new PiePlot(dataset);\n        plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));\n        plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));\n        if (tooltips) {\n            plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));\n        }\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n        currentTheme.apply(chart);\n        return chart;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/ChartFactory.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"N"},{"authorDate":"2017-05-06 02:22:05","commitOrder":2,"curCode":"    public static JFreeChart createPieChart(String title, PieDataset dataset,\n            PieDataset previousDataset, int percentDiffForMaxScale,\n            boolean greenForIncrease, boolean legend, boolean tooltips,\n            Locale locale, boolean subTitle, boolean showDifference) {\n\n        PiePlot plot = new PiePlot(dataset);\n        plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));\n        plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));\n\n        if (tooltips) {\n            plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));\n        }\n\n        List keys = dataset.getKeys();\n        DefaultPieDataset series = null;\n        if (showDifference) {\n            series = new DefaultPieDataset();\n        }\n\n        double colorPerPercent = 255.0 / percentDiffForMaxScale;\n        for (Iterator it = keys.iterator(); it.hasNext();) {\n            Comparable key = (Comparable) it.next();\n            Number newValue = dataset.getValue(key);\n            Number oldValue = previousDataset.getValue(key);\n\n            if (oldValue == null) {\n                if (greenForIncrease) {\n                    plot.setSectionPaint(key, Color.GREEN);\n                }\n                else {\n                    plot.setSectionPaint(key, Color.RED);\n                }\n                if (showDifference) {\n                    assert series != null; \r\n                    series.setValue(key + \" (+100%)\", newValue);\n                }\n            }\n            else {\n                double percentChange = (newValue.doubleValue()\n                        / oldValue.doubleValue() - 1.0) * 100.0;\n                double shade\n                    = (Math.abs(percentChange) >= percentDiffForMaxScale ? 255\n                    : Math.abs(percentChange) * colorPerPercent);\n                if (greenForIncrease\n                        && newValue.doubleValue() > oldValue.doubleValue()\n                        || !greenForIncrease && newValue.doubleValue()\n                        < oldValue.doubleValue()) {\n                    plot.setSectionPaint(key, new Color(0, (int) shade, 0));\n                }\n                else {\n                    plot.setSectionPaint(key, new Color((int) shade, 0, 0));\n                }\n                if (showDifference) {\n                    assert series != null; \r\n                    series.setValue(key + \" (\" + (percentChange >= 0 ? \"+\" : \"\")\n                            + NumberFormat.getPercentInstance().format(\n                            percentChange / 100.0) + \")\", newValue);\n                }\n            }\n        }\n\n        if (showDifference) {\n            plot.setDataset(series);\n        }\n\n        JFreeChart chart =  new JFreeChart(title,\n                JFreeChart.DEFAULT_TITLE_FONT, plot, legend);\n\n        if (subTitle) {\n            TextTitle subtitle = new TextTitle(\"Bright \" + (greenForIncrease \n                    ? \"red\" : \"green\") + \"=change >=-\" + percentDiffForMaxScale\n                    + \"%, Bright \" + (!greenForIncrease ? \"red\" : \"green\")\n                    + \"=change >=+\" + percentDiffForMaxScale + \"%\",\n                    new Font(\"SansSerif\", Font.PLAIN, 10));\n            chart.addSubtitle(subtitle);\n        }\n        currentTheme.apply(chart);\n        return chart;\n    }\n","date":"2017-05-06 02:22:05","endLine":471,"groupId":"111765","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createPieChart","params":"(Stringtitle@PieDatasetdataset@PieDatasetpreviousDataset@intpercentDiffForMaxScale@booleangreenForIncrease@booleanlegend@booleantooltips@Localelocale@booleansubTitle@booleanshowDifference)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/0a/1330211195c6e8c8b7a8ad55f4b36468ad3d57.src","preCode":"    public static JFreeChart createPieChart(String title, PieDataset dataset,\n            PieDataset previousDataset, int percentDiffForMaxScale,\n            boolean greenForIncrease, boolean legend, boolean tooltips,\n            Locale locale, boolean subTitle, boolean showDifference) {\n\n        PiePlot plot = new PiePlot(dataset);\n        plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));\n        plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));\n\n        if (tooltips) {\n            plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));\n        }\n\n        List keys = dataset.getKeys();\n        DefaultPieDataset series = null;\n        if (showDifference) {\n            series = new DefaultPieDataset();\n        }\n\n        double colorPerPercent = 255.0 / percentDiffForMaxScale;\n        for (Iterator it = keys.iterator(); it.hasNext();) {\n            Comparable key = (Comparable) it.next();\n            Number newValue = dataset.getValue(key);\n            Number oldValue = previousDataset.getValue(key);\n\n            if (oldValue == null) {\n                if (greenForIncrease) {\n                    plot.setSectionPaint(key, Color.green);\n                }\n                else {\n                    plot.setSectionPaint(key, Color.red);\n                }\n                if (showDifference) {\n                    assert series != null; \r\n                    series.setValue(key + \" (+100%)\", newValue);\n                }\n            }\n            else {\n                double percentChange = (newValue.doubleValue()\n                        / oldValue.doubleValue() - 1.0) * 100.0;\n                double shade\n                    = (Math.abs(percentChange) >= percentDiffForMaxScale ? 255\n                    : Math.abs(percentChange) * colorPerPercent);\n                if (greenForIncrease\n                        && newValue.doubleValue() > oldValue.doubleValue()\n                        || !greenForIncrease && newValue.doubleValue()\n                        < oldValue.doubleValue()) {\n                    plot.setSectionPaint(key, new Color(0, (int) shade, 0));\n                }\n                else {\n                    plot.setSectionPaint(key, new Color((int) shade, 0, 0));\n                }\n                if (showDifference) {\n                    assert series != null; \r\n                    series.setValue(key + \" (\" + (percentChange >= 0 ? \"+\" : \"\")\n                            + NumberFormat.getPercentInstance().format(\n                            percentChange / 100.0) + \")\", newValue);\n                }\n            }\n        }\n\n        if (showDifference) {\n            plot.setDataset(series);\n        }\n\n        JFreeChart chart =  new JFreeChart(title,\n                JFreeChart.DEFAULT_TITLE_FONT, plot, legend);\n\n        if (subTitle) {\n            TextTitle subtitle = new TextTitle(\"Bright \" + (greenForIncrease \n                    ? \"red\" : \"green\") + \"=change >=-\" + percentDiffForMaxScale\n                    + \"%, Bright \" + (!greenForIncrease ? \"red\" : \"green\")\n                    + \"=change >=+\" + percentDiffForMaxScale + \"%\",\n                    new Font(\"SansSerif\", Font.PLAIN, 10));\n            chart.addSubtitle(subtitle);\n        }\n        currentTheme.apply(chart);\n        return chart;\n    }\n","realPath":"src/main/java/org/jfree/chart/ChartFactory.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"M"}],"commitId":"7748f28f6d021e8aa191e28015520cc0dac9aaa4","commitMessage":"@@@Update constants.","date":"2017-05-06 02:22:05","modifiedFileCount":"3","status":"M","submitter":"David Gilbert"}]
