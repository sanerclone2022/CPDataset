[{"authorTime":"2017-05-06 16:37:24","codes":[{"authorDate":"2017-05-06 16:37:24","commitOrder":1,"curCode":"    public static Number findMinimumDomainValue(XYDataset dataset) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return new Double(info.getDomainLowerBound(true));\n        }\n        else {\n            double minimum = Double.POSITIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getStartXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                    }\n\n                }\n            }\n            if (minimum == Double.POSITIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = new Double(minimum);\n            }\n        }\n\n        return result;\n    }\n","date":"2017-05-06 16:37:24","endLine":1642,"groupId":"1677","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"findMinimumDomainValue","params":"(XYDatasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/dc/8b6a0ddbf3de1c88397f2cde6fc21c654ede9f.src","preCode":"    public static Number findMinimumDomainValue(XYDataset dataset) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return new Double(info.getDomainLowerBound(true));\n        }\n        else {\n            double minimum = Double.POSITIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getStartXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                    }\n\n                }\n            }\n            if (minimum == Double.POSITIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = new Double(minimum);\n            }\n        }\n\n        return result;\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1603,"status":"B"},{"authorDate":"2017-05-06 16:37:24","commitOrder":1,"curCode":"    public static Number findMaximumDomainValue(XYDataset dataset) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return new Double(info.getDomainUpperBound(true));\n        }\n\n        \r\n        else {\n            double maximum = Double.NEGATIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getEndXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        maximum = Math.max(maximum, value);\n                    }\n                }\n            }\n            if (maximum == Double.NEGATIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = new Double(maximum);\n            }\n\n        }\n\n        return result;\n    }\n","date":"2017-05-06 16:37:24","endLine":1697,"groupId":"1677","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"findMaximumDomainValue","params":"(XYDatasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/dc/8b6a0ddbf3de1c88397f2cde6fc21c654ede9f.src","preCode":"    public static Number findMaximumDomainValue(XYDataset dataset) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return new Double(info.getDomainUpperBound(true));\n        }\n\n        \r\n        else {\n            double maximum = Double.NEGATIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getEndXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        maximum = Math.max(maximum, value);\n                    }\n                }\n            }\n            if (maximum == Double.NEGATIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = new Double(maximum);\n            }\n\n        }\n\n        return result;\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1656,"status":"B"}],"commitId":"434bac1e228cbbbebe7653d55064fb67e8c62962","commitMessage":"@@@Rename DatasetUtilities --> DatasetUtils.","date":"2017-05-06 16:37:24","modifiedFileCount":"31","status":"B","submitter":"David Gilbert"},{"authorTime":"2017-05-12 05:28:15","codes":[{"authorDate":"2017-05-12 05:28:15","commitOrder":2,"curCode":"    public static Number findMinimumDomainValue(XYDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return new Double(info.getDomainLowerBound(true));\n        }\n        else {\n            double minimum = Double.POSITIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getStartXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                    }\n\n                }\n            }\n            if (minimum == Double.POSITIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = new Double(minimum);\n            }\n        }\n\n        return result;\n    }\n","date":"2017-05-12 05:28:15","endLine":1642,"groupId":"1677","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"findMinimumDomainValue","params":"(XYDatasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/57/fedbdb6f2ba5f9f0c0c73cd2e21515625fcee8.src","preCode":"    public static Number findMinimumDomainValue(XYDataset dataset) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return new Double(info.getDomainLowerBound(true));\n        }\n        else {\n            double minimum = Double.POSITIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getStartXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                    }\n\n                }\n            }\n            if (minimum == Double.POSITIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = new Double(minimum);\n            }\n        }\n\n        return result;\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1603,"status":"M"},{"authorDate":"2017-05-12 05:28:15","commitOrder":2,"curCode":"    public static Number findMaximumDomainValue(XYDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return new Double(info.getDomainUpperBound(true));\n        }\n\n        \r\n        else {\n            double maximum = Double.NEGATIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getEndXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        maximum = Math.max(maximum, value);\n                    }\n                }\n            }\n            if (maximum == Double.NEGATIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = new Double(maximum);\n            }\n\n        }\n\n        return result;\n    }\n","date":"2017-05-12 05:28:15","endLine":1697,"groupId":"1677","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"findMaximumDomainValue","params":"(XYDatasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/57/fedbdb6f2ba5f9f0c0c73cd2e21515625fcee8.src","preCode":"    public static Number findMaximumDomainValue(XYDataset dataset) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return new Double(info.getDomainUpperBound(true));\n        }\n\n        \r\n        else {\n            double maximum = Double.NEGATIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getEndXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        maximum = Math.max(maximum, value);\n                    }\n                }\n            }\n            if (maximum == Double.NEGATIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = new Double(maximum);\n            }\n\n        }\n\n        return result;\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1656,"status":"M"}],"commitId":"22701c9ec4cd5bd88f8a7f17ae11c18099dd1ec7","commitMessage":"@@@Rename ParamChecks --> Args.","date":"2017-05-12 05:28:15","modifiedFileCount":"216","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-09 01:06:45","codes":[{"authorDate":"2020-03-09 01:06:45","commitOrder":3,"curCode":"    public static Number findMinimumDomainValue(XYDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return info.getDomainLowerBound(true);\n        }\n        else {\n            double minimum = Double.POSITIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getStartXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                    }\n\n                }\n            }\n            if (minimum == Double.POSITIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = minimum;\n            }\n        }\n\n        return result;\n    }\n","date":"2020-03-09 01:06:45","endLine":1581,"groupId":"1677","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"findMinimumDomainValue","params":"(XYDatasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/56/42a62fd1a4e0eac1d35feceeaa1dd62a89d240.src","preCode":"    public static Number findMinimumDomainValue(XYDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return new Double(info.getDomainLowerBound(true));\n        }\n        else {\n            double minimum = Double.POSITIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getStartXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                    }\n\n                }\n            }\n            if (minimum == Double.POSITIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = new Double(minimum);\n            }\n        }\n\n        return result;\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1542,"status":"M"},{"authorDate":"2020-03-09 01:06:45","commitOrder":3,"curCode":"    public static Number findMaximumDomainValue(XYDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return info.getDomainUpperBound(true);\n        }\n\n        \r\n        else {\n            double maximum = Double.NEGATIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getEndXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        maximum = Math.max(maximum, value);\n                    }\n                }\n            }\n            if (maximum == Double.NEGATIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = new Double(maximum);\n            }\n\n        }\n\n        return result;\n    }\n","date":"2020-03-09 01:06:45","endLine":1636,"groupId":"1677","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"findMaximumDomainValue","params":"(XYDatasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/56/42a62fd1a4e0eac1d35feceeaa1dd62a89d240.src","preCode":"    public static Number findMaximumDomainValue(XYDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return new Double(info.getDomainUpperBound(true));\n        }\n\n        \r\n        else {\n            double maximum = Double.NEGATIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getEndXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        maximum = Math.max(maximum, value);\n                    }\n                }\n            }\n            if (maximum == Double.NEGATIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = new Double(maximum);\n            }\n\n        }\n\n        return result;\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1595,"status":"M"}],"commitId":"c7921a8d2369a1c7a8c42a4b840c31ea6c5d01b0","commitMessage":"@@@Add generics.","date":"2020-03-09 01:06:45","modifiedFileCount":"37","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-09 01:46:13","codes":[{"authorDate":"2020-03-09 01:06:45","commitOrder":4,"curCode":"    public static Number findMinimumDomainValue(XYDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return info.getDomainLowerBound(true);\n        }\n        else {\n            double minimum = Double.POSITIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getStartXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                    }\n\n                }\n            }\n            if (minimum == Double.POSITIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = minimum;\n            }\n        }\n\n        return result;\n    }\n","date":"2020-03-09 01:06:45","endLine":1581,"groupId":"1677","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"findMinimumDomainValue","params":"(XYDatasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/56/42a62fd1a4e0eac1d35feceeaa1dd62a89d240.src","preCode":"    public static Number findMinimumDomainValue(XYDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return info.getDomainLowerBound(true);\n        }\n        else {\n            double minimum = Double.POSITIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getStartXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                    }\n\n                }\n            }\n            if (minimum == Double.POSITIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = minimum;\n            }\n        }\n\n        return result;\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1542,"status":"N"},{"authorDate":"2020-03-09 01:46:13","commitOrder":4,"curCode":"    public static Number findMaximumDomainValue(XYDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return info.getDomainUpperBound(true);\n        }\n\n        \r\n        else {\n            double maximum = Double.NEGATIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getEndXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        maximum = Math.max(maximum, value);\n                    }\n                }\n            }\n            if (maximum == Double.NEGATIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = maximum;\n            }\n\n        }\n\n        return result;\n    }\n","date":"2020-03-09 01:46:13","endLine":1628,"groupId":"1677","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"findMaximumDomainValue","params":"(XYDatasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/01/78052d40d36de5ee678cfefd3ad4ba9cb9076e.src","preCode":"    public static Number findMaximumDomainValue(XYDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return info.getDomainUpperBound(true);\n        }\n\n        \r\n        else {\n            double maximum = Double.NEGATIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getEndXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        maximum = Math.max(maximum, value);\n                    }\n                }\n            }\n            if (maximum == Double.NEGATIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = new Double(maximum);\n            }\n\n        }\n\n        return result;\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1587,"status":"M"}],"commitId":"e2787e5cc06d8cdd82c08e988e8fbe95361829a2","commitMessage":"@@@Fix warnings.","date":"2020-03-09 01:46:13","modifiedFileCount":"11","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-29 16:37:24","codes":[{"authorDate":"2020-03-29 16:37:24","commitOrder":5,"curCode":"    public static <S extends Comparable<S>> Number findMinimumDomainValue(\n            XYDataset<S> dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return info.getDomainLowerBound(true);\n        }\n        else {\n            double minimum = Double.POSITIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        @SuppressWarnings(\"unchecked\")\n                        IntervalXYDataset<S> intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getStartXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                    }\n\n                }\n            }\n            if (minimum == Double.POSITIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = minimum;\n            }\n        }\n\n        return result;\n    }\n","date":"2020-03-29 16:37:24","endLine":1571,"groupId":"102071","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"findMinimumDomainValue","params":"(XYDataset<S>dataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/5b/c5866b92930fd53a8a92248e13bc02bdaa2334.src","preCode":"    public static Number findMinimumDomainValue(XYDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return info.getDomainLowerBound(true);\n        }\n        else {\n            double minimum = Double.POSITIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getStartXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                    }\n\n                }\n            }\n            if (minimum == Double.POSITIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = minimum;\n            }\n        }\n\n        return result;\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1530,"status":"M"},{"authorDate":"2020-03-29 16:37:24","commitOrder":5,"curCode":"    public static <S extends Comparable<S>> Number findMaximumDomainValue(\n            XYDataset<S> dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return info.getDomainUpperBound(true);\n        }\n\n        \r\n        else {\n            double maximum = Double.NEGATIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        @SuppressWarnings(\"unchecked\")\n                        IntervalXYDataset<S> intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getEndXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        maximum = Math.max(maximum, value);\n                    }\n                }\n            }\n            if (maximum == Double.NEGATIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = maximum;\n            }\n        }\n        return result;\n    }\n","date":"2020-03-29 16:37:24","endLine":1626,"groupId":"102071","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"findMaximumDomainValue","params":"(XYDataset<S>dataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/5b/c5866b92930fd53a8a92248e13bc02bdaa2334.src","preCode":"    public static Number findMaximumDomainValue(XYDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        Number result;\n        \r\n        if (dataset instanceof DomainInfo) {\n            DomainInfo info = (DomainInfo) dataset;\n            return info.getDomainUpperBound(true);\n        }\n\n        \r\n        else {\n            double maximum = Double.NEGATIVE_INFINITY;\n            int seriesCount = dataset.getSeriesCount();\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n\n                    double value;\n                    if (dataset instanceof IntervalXYDataset) {\n                        IntervalXYDataset intervalXYData\n                            = (IntervalXYDataset) dataset;\n                        value = intervalXYData.getEndXValue(series, item);\n                    }\n                    else {\n                        value = dataset.getXValue(series, item);\n                    }\n                    if (!Double.isNaN(value)) {\n                        maximum = Math.max(maximum, value);\n                    }\n                }\n            }\n            if (maximum == Double.NEGATIVE_INFINITY) {\n                result = null;\n            }\n            else {\n                result = maximum;\n            }\n\n        }\n\n        return result;\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1585,"status":"M"}],"commitId":"e21c4225a7fb294665bc97a40f5738a5449a0824","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-29 16:37:24","modifiedFileCount":"8","status":"M","submitter":"David Gilbert"}]
