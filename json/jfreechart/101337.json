[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public void draw(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea,\n            CategoryAxis domainAxis, ValueAxis rangeAxis) {\n\n        PlotOrientation orientation = plot.getOrientation();\n        RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(\n                plot.getDomainAxisLocation(), orientation);\n        RectangleEdge rangeEdge = Plot.resolveRangeAxisLocation(\n                plot.getRangeAxisLocation(), orientation);\n        CategoryDataset dataset = plot.getDataset();\n        int catIndex = dataset.getColumnIndex(getCategory());\n        int catCount = dataset.getColumnCount();\n        double j2DX = domainAxis.getCategoryMiddle(catIndex, catCount,\n                dataArea, domainEdge);\n        double j2DY = rangeAxis.valueToJava2D(getValue(), dataArea, rangeEdge);\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            double temp = j2DX;\n            j2DX = j2DY;\n            j2DY = temp;\n        }\n        double startX = j2DX + Math.cos(this.angle) * this.baseRadius;\n        double startY = j2DY + Math.sin(this.angle) * this.baseRadius;\n\n        double endX = j2DX + Math.cos(this.angle) * this.tipRadius;\n        double endY = j2DY + Math.sin(this.angle) * this.tipRadius;\n\n        double arrowBaseX = endX + Math.cos(this.angle) * this.arrowLength;\n        double arrowBaseY = endY + Math.sin(this.angle) * this.arrowLength;\n\n        double arrowLeftX = arrowBaseX\n            + Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowLeftY = arrowBaseY\n            + Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        double arrowRightX = arrowBaseX\n            - Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowRightY = arrowBaseY\n            - Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        GeneralPath arrow = new GeneralPath();\n        arrow.moveTo((float) endX, (float) endY);\n        arrow.lineTo((float) arrowLeftX, (float) arrowLeftY);\n        arrow.lineTo((float) arrowRightX, (float) arrowRightY);\n        arrow.closePath();\n\n        g2.setStroke(this.arrowStroke);\n        g2.setPaint(this.arrowPaint);\n        Line2D line = new Line2D.Double(startX, startY, arrowBaseX, arrowBaseY);\n        g2.draw(line);\n        g2.fill(arrow);\n\n        \r\n        g2.setFont(getFont());\n        g2.setPaint(getPaint());\n        double labelX = j2DX\n            + Math.cos(this.angle) * (this.baseRadius + this.labelOffset);\n        double labelY = j2DY\n            + Math.sin(this.angle) * (this.baseRadius + this.labelOffset);\n         TextUtilities.drawAlignedString(getText(),\n                g2, (float) labelX, (float) labelY, getTextAnchor());\n        \r\n\n    }\n","date":"2016-02-19 16:24:22","endLine":430,"groupId":"5","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"draw","params":"(Graphics2Dg2@CategoryPlotplot@Rectangle2DdataArea@CategoryAxisdomainAxis@ValueAxisrangeAxis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/56/58c505fbf2e53d173ff282be30bdc6a07fd3ba.src","preCode":"    public void draw(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea,\n            CategoryAxis domainAxis, ValueAxis rangeAxis) {\n\n        PlotOrientation orientation = plot.getOrientation();\n        RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(\n                plot.getDomainAxisLocation(), orientation);\n        RectangleEdge rangeEdge = Plot.resolveRangeAxisLocation(\n                plot.getRangeAxisLocation(), orientation);\n        CategoryDataset dataset = plot.getDataset();\n        int catIndex = dataset.getColumnIndex(getCategory());\n        int catCount = dataset.getColumnCount();\n        double j2DX = domainAxis.getCategoryMiddle(catIndex, catCount,\n                dataArea, domainEdge);\n        double j2DY = rangeAxis.valueToJava2D(getValue(), dataArea, rangeEdge);\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            double temp = j2DX;\n            j2DX = j2DY;\n            j2DY = temp;\n        }\n        double startX = j2DX + Math.cos(this.angle) * this.baseRadius;\n        double startY = j2DY + Math.sin(this.angle) * this.baseRadius;\n\n        double endX = j2DX + Math.cos(this.angle) * this.tipRadius;\n        double endY = j2DY + Math.sin(this.angle) * this.tipRadius;\n\n        double arrowBaseX = endX + Math.cos(this.angle) * this.arrowLength;\n        double arrowBaseY = endY + Math.sin(this.angle) * this.arrowLength;\n\n        double arrowLeftX = arrowBaseX\n            + Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowLeftY = arrowBaseY\n            + Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        double arrowRightX = arrowBaseX\n            - Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowRightY = arrowBaseY\n            - Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        GeneralPath arrow = new GeneralPath();\n        arrow.moveTo((float) endX, (float) endY);\n        arrow.lineTo((float) arrowLeftX, (float) arrowLeftY);\n        arrow.lineTo((float) arrowRightX, (float) arrowRightY);\n        arrow.closePath();\n\n        g2.setStroke(this.arrowStroke);\n        g2.setPaint(this.arrowPaint);\n        Line2D line = new Line2D.Double(startX, startY, arrowBaseX, arrowBaseY);\n        g2.draw(line);\n        g2.fill(arrow);\n\n        \r\n        g2.setFont(getFont());\n        g2.setPaint(getPaint());\n        double labelX = j2DX\n            + Math.cos(this.angle) * (this.baseRadius + this.labelOffset);\n        double labelY = j2DY\n            + Math.sin(this.angle) * (this.baseRadius + this.labelOffset);\n         TextUtilities.drawAlignedString(getText(),\n                g2, (float) labelX, (float) labelY, getTextAnchor());\n        \r\n\n    }\n","realPath":"src/main/java/org/jfree/chart/annotations/CategoryPointerAnnotation.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public void draw(Graphics2D g2, XYPlot plot, Rectangle2D dataArea,\n            ValueAxis domainAxis, ValueAxis rangeAxis, int rendererIndex, \n            PlotRenderingInfo info) {\n\n        PlotOrientation orientation = plot.getOrientation();\n        RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(\n                plot.getDomainAxisLocation(), orientation);\n        RectangleEdge rangeEdge = Plot.resolveRangeAxisLocation(\n                plot.getRangeAxisLocation(), orientation);\n        double j2DX = domainAxis.valueToJava2D(getX(), dataArea, domainEdge);\n        double j2DY = rangeAxis.valueToJava2D(getY(), dataArea, rangeEdge);\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            double temp = j2DX;\n            j2DX = j2DY;\n            j2DY = temp;\n        }\n        double startX = j2DX + Math.cos(this.angle) * this.baseRadius;\n        double startY = j2DY + Math.sin(this.angle) * this.baseRadius;\n\n        double endX = j2DX + Math.cos(this.angle) * this.tipRadius;\n        double endY = j2DY + Math.sin(this.angle) * this.tipRadius;\n\n        double arrowBaseX = endX + Math.cos(this.angle) * this.arrowLength;\n        double arrowBaseY = endY + Math.sin(this.angle) * this.arrowLength;\n\n        double arrowLeftX = arrowBaseX\n                + Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowLeftY = arrowBaseY\n                + Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        double arrowRightX = arrowBaseX\n                - Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowRightY = arrowBaseY\n                - Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        GeneralPath arrow = new GeneralPath();\n        arrow.moveTo((float) endX, (float) endY);\n        arrow.lineTo((float) arrowLeftX, (float) arrowLeftY);\n        arrow.lineTo((float) arrowRightX, (float) arrowRightY);\n        arrow.closePath();\n\n        g2.setStroke(this.arrowStroke);\n        g2.setPaint(this.arrowPaint);\n        Line2D line = new Line2D.Double(startX, startY, arrowBaseX, arrowBaseY);\n        g2.draw(line);\n        g2.fill(arrow);\n\n        \r\n        double labelX = j2DX + Math.cos(this.angle) * (this.baseRadius\n                + this.labelOffset);\n        double labelY = j2DY + Math.sin(this.angle) * (this.baseRadius\n                + this.labelOffset);\n        g2.setFont(getFont());\n        Shape hotspot = TextUtilities.calculateRotatedStringBounds(\n                getText(), g2, (float) labelX, (float) labelY, getTextAnchor(),\n                getRotationAngle(), getRotationAnchor());\n        if (getBackgroundPaint() != null) {\n            g2.setPaint(getBackgroundPaint());\n            g2.fill(hotspot);\n        }\n        g2.setPaint(getPaint());\n        TextUtilities.drawRotatedString(getText(), g2, (float) labelX,\n                (float) labelY, getTextAnchor(), getRotationAngle(),\n                getRotationAnchor());\n        if (isOutlineVisible()) {\n            g2.setStroke(getOutlineStroke());\n            g2.setPaint(getOutlinePaint());\n            g2.draw(hotspot);\n        }\n\n        String toolTip = getToolTipText();\n        String url = getURL();\n        if (toolTip != null || url != null) {\n            addEntity(info, hotspot, rendererIndex, toolTip, url);\n        }\n\n    }\n","date":"2016-02-19 16:24:22","endLine":454,"groupId":"5","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"draw","params":"(Graphics2Dg2@XYPlotplot@Rectangle2DdataArea@ValueAxisdomainAxis@ValueAxisrangeAxis@intrendererIndex@PlotRenderingInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/f0/962f65a824e34af0a0eb63a5c1ce0077862a41.src","preCode":"    public void draw(Graphics2D g2, XYPlot plot, Rectangle2D dataArea,\n            ValueAxis domainAxis, ValueAxis rangeAxis, int rendererIndex, \n            PlotRenderingInfo info) {\n\n        PlotOrientation orientation = plot.getOrientation();\n        RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(\n                plot.getDomainAxisLocation(), orientation);\n        RectangleEdge rangeEdge = Plot.resolveRangeAxisLocation(\n                plot.getRangeAxisLocation(), orientation);\n        double j2DX = domainAxis.valueToJava2D(getX(), dataArea, domainEdge);\n        double j2DY = rangeAxis.valueToJava2D(getY(), dataArea, rangeEdge);\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            double temp = j2DX;\n            j2DX = j2DY;\n            j2DY = temp;\n        }\n        double startX = j2DX + Math.cos(this.angle) * this.baseRadius;\n        double startY = j2DY + Math.sin(this.angle) * this.baseRadius;\n\n        double endX = j2DX + Math.cos(this.angle) * this.tipRadius;\n        double endY = j2DY + Math.sin(this.angle) * this.tipRadius;\n\n        double arrowBaseX = endX + Math.cos(this.angle) * this.arrowLength;\n        double arrowBaseY = endY + Math.sin(this.angle) * this.arrowLength;\n\n        double arrowLeftX = arrowBaseX\n                + Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowLeftY = arrowBaseY\n                + Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        double arrowRightX = arrowBaseX\n                - Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowRightY = arrowBaseY\n                - Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        GeneralPath arrow = new GeneralPath();\n        arrow.moveTo((float) endX, (float) endY);\n        arrow.lineTo((float) arrowLeftX, (float) arrowLeftY);\n        arrow.lineTo((float) arrowRightX, (float) arrowRightY);\n        arrow.closePath();\n\n        g2.setStroke(this.arrowStroke);\n        g2.setPaint(this.arrowPaint);\n        Line2D line = new Line2D.Double(startX, startY, arrowBaseX, arrowBaseY);\n        g2.draw(line);\n        g2.fill(arrow);\n\n        \r\n        double labelX = j2DX + Math.cos(this.angle) * (this.baseRadius\n                + this.labelOffset);\n        double labelY = j2DY + Math.sin(this.angle) * (this.baseRadius\n                + this.labelOffset);\n        g2.setFont(getFont());\n        Shape hotspot = TextUtilities.calculateRotatedStringBounds(\n                getText(), g2, (float) labelX, (float) labelY, getTextAnchor(),\n                getRotationAngle(), getRotationAnchor());\n        if (getBackgroundPaint() != null) {\n            g2.setPaint(getBackgroundPaint());\n            g2.fill(hotspot);\n        }\n        g2.setPaint(getPaint());\n        TextUtilities.drawRotatedString(getText(), g2, (float) labelX,\n                (float) labelY, getTextAnchor(), getRotationAngle(),\n                getRotationAnchor());\n        if (isOutlineVisible()) {\n            g2.setStroke(getOutlineStroke());\n            g2.setPaint(getOutlinePaint());\n            g2.draw(hotspot);\n        }\n\n        String toolTip = getToolTipText();\n        String url = getURL();\n        if (toolTip != null || url != null) {\n            addEntity(info, hotspot, rendererIndex, toolTip, url);\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/annotations/XYPointerAnnotation.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2017-05-06 13:04:03","codes":[{"authorDate":"2017-05-06 13:04:03","commitOrder":2,"curCode":"    public void draw(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea,\n            CategoryAxis domainAxis, ValueAxis rangeAxis) {\n\n        PlotOrientation orientation = plot.getOrientation();\n        RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(\n                plot.getDomainAxisLocation(), orientation);\n        RectangleEdge rangeEdge = Plot.resolveRangeAxisLocation(\n                plot.getRangeAxisLocation(), orientation);\n        CategoryDataset dataset = plot.getDataset();\n        int catIndex = dataset.getColumnIndex(getCategory());\n        int catCount = dataset.getColumnCount();\n        double j2DX = domainAxis.getCategoryMiddle(catIndex, catCount,\n                dataArea, domainEdge);\n        double j2DY = rangeAxis.valueToJava2D(getValue(), dataArea, rangeEdge);\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            double temp = j2DX;\n            j2DX = j2DY;\n            j2DY = temp;\n        }\n        double startX = j2DX + Math.cos(this.angle) * this.baseRadius;\n        double startY = j2DY + Math.sin(this.angle) * this.baseRadius;\n\n        double endX = j2DX + Math.cos(this.angle) * this.tipRadius;\n        double endY = j2DY + Math.sin(this.angle) * this.tipRadius;\n\n        double arrowBaseX = endX + Math.cos(this.angle) * this.arrowLength;\n        double arrowBaseY = endY + Math.sin(this.angle) * this.arrowLength;\n\n        double arrowLeftX = arrowBaseX\n            + Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowLeftY = arrowBaseY\n            + Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        double arrowRightX = arrowBaseX\n            - Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowRightY = arrowBaseY\n            - Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        GeneralPath arrow = new GeneralPath();\n        arrow.moveTo((float) endX, (float) endY);\n        arrow.lineTo((float) arrowLeftX, (float) arrowLeftY);\n        arrow.lineTo((float) arrowRightX, (float) arrowRightY);\n        arrow.closePath();\n\n        g2.setStroke(this.arrowStroke);\n        g2.setPaint(this.arrowPaint);\n        Line2D line = new Line2D.Double(startX, startY, arrowBaseX, arrowBaseY);\n        g2.draw(line);\n        g2.fill(arrow);\n\n        \r\n        g2.setFont(getFont());\n        g2.setPaint(getPaint());\n        double labelX = j2DX\n            + Math.cos(this.angle) * (this.baseRadius + this.labelOffset);\n        double labelY = j2DY\n            + Math.sin(this.angle) * (this.baseRadius + this.labelOffset);\n         TextUtils.drawAlignedString(getText(),\n                g2, (float) labelX, (float) labelY, getTextAnchor());\n        \r\n\n    }\n","date":"2017-05-06 13:04:03","endLine":430,"groupId":"101337","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"draw","params":"(Graphics2Dg2@CategoryPlotplot@Rectangle2DdataArea@CategoryAxisdomainAxis@ValueAxisrangeAxis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/ff/3bb33122cc632f52335bd750453bad307e1bd7.src","preCode":"    public void draw(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea,\n            CategoryAxis domainAxis, ValueAxis rangeAxis) {\n\n        PlotOrientation orientation = plot.getOrientation();\n        RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(\n                plot.getDomainAxisLocation(), orientation);\n        RectangleEdge rangeEdge = Plot.resolveRangeAxisLocation(\n                plot.getRangeAxisLocation(), orientation);\n        CategoryDataset dataset = plot.getDataset();\n        int catIndex = dataset.getColumnIndex(getCategory());\n        int catCount = dataset.getColumnCount();\n        double j2DX = domainAxis.getCategoryMiddle(catIndex, catCount,\n                dataArea, domainEdge);\n        double j2DY = rangeAxis.valueToJava2D(getValue(), dataArea, rangeEdge);\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            double temp = j2DX;\n            j2DX = j2DY;\n            j2DY = temp;\n        }\n        double startX = j2DX + Math.cos(this.angle) * this.baseRadius;\n        double startY = j2DY + Math.sin(this.angle) * this.baseRadius;\n\n        double endX = j2DX + Math.cos(this.angle) * this.tipRadius;\n        double endY = j2DY + Math.sin(this.angle) * this.tipRadius;\n\n        double arrowBaseX = endX + Math.cos(this.angle) * this.arrowLength;\n        double arrowBaseY = endY + Math.sin(this.angle) * this.arrowLength;\n\n        double arrowLeftX = arrowBaseX\n            + Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowLeftY = arrowBaseY\n            + Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        double arrowRightX = arrowBaseX\n            - Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowRightY = arrowBaseY\n            - Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        GeneralPath arrow = new GeneralPath();\n        arrow.moveTo((float) endX, (float) endY);\n        arrow.lineTo((float) arrowLeftX, (float) arrowLeftY);\n        arrow.lineTo((float) arrowRightX, (float) arrowRightY);\n        arrow.closePath();\n\n        g2.setStroke(this.arrowStroke);\n        g2.setPaint(this.arrowPaint);\n        Line2D line = new Line2D.Double(startX, startY, arrowBaseX, arrowBaseY);\n        g2.draw(line);\n        g2.fill(arrow);\n\n        \r\n        g2.setFont(getFont());\n        g2.setPaint(getPaint());\n        double labelX = j2DX\n            + Math.cos(this.angle) * (this.baseRadius + this.labelOffset);\n        double labelY = j2DY\n            + Math.sin(this.angle) * (this.baseRadius + this.labelOffset);\n         TextUtilities.drawAlignedString(getText(),\n                g2, (float) labelX, (float) labelY, getTextAnchor());\n        \r\n\n    }\n","realPath":"src/main/java/org/jfree/chart/annotations/CategoryPointerAnnotation.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"M"},{"authorDate":"2017-05-06 13:04:03","commitOrder":2,"curCode":"    public void draw(Graphics2D g2, XYPlot plot, Rectangle2D dataArea,\n            ValueAxis domainAxis, ValueAxis rangeAxis, int rendererIndex, \n            PlotRenderingInfo info) {\n\n        PlotOrientation orientation = plot.getOrientation();\n        RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(\n                plot.getDomainAxisLocation(), orientation);\n        RectangleEdge rangeEdge = Plot.resolveRangeAxisLocation(\n                plot.getRangeAxisLocation(), orientation);\n        double j2DX = domainAxis.valueToJava2D(getX(), dataArea, domainEdge);\n        double j2DY = rangeAxis.valueToJava2D(getY(), dataArea, rangeEdge);\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            double temp = j2DX;\n            j2DX = j2DY;\n            j2DY = temp;\n        }\n        double startX = j2DX + Math.cos(this.angle) * this.baseRadius;\n        double startY = j2DY + Math.sin(this.angle) * this.baseRadius;\n\n        double endX = j2DX + Math.cos(this.angle) * this.tipRadius;\n        double endY = j2DY + Math.sin(this.angle) * this.tipRadius;\n\n        double arrowBaseX = endX + Math.cos(this.angle) * this.arrowLength;\n        double arrowBaseY = endY + Math.sin(this.angle) * this.arrowLength;\n\n        double arrowLeftX = arrowBaseX\n                + Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowLeftY = arrowBaseY\n                + Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        double arrowRightX = arrowBaseX\n                - Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowRightY = arrowBaseY\n                - Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        GeneralPath arrow = new GeneralPath();\n        arrow.moveTo((float) endX, (float) endY);\n        arrow.lineTo((float) arrowLeftX, (float) arrowLeftY);\n        arrow.lineTo((float) arrowRightX, (float) arrowRightY);\n        arrow.closePath();\n\n        g2.setStroke(this.arrowStroke);\n        g2.setPaint(this.arrowPaint);\n        Line2D line = new Line2D.Double(startX, startY, arrowBaseX, arrowBaseY);\n        g2.draw(line);\n        g2.fill(arrow);\n\n        \r\n        double labelX = j2DX + Math.cos(this.angle) * (this.baseRadius\n                + this.labelOffset);\n        double labelY = j2DY + Math.sin(this.angle) * (this.baseRadius\n                + this.labelOffset);\n        g2.setFont(getFont());\n        Shape hotspot = TextUtils.calculateRotatedStringBounds(\n                getText(), g2, (float) labelX, (float) labelY, getTextAnchor(),\n                getRotationAngle(), getRotationAnchor());\n        if (getBackgroundPaint() != null) {\n            g2.setPaint(getBackgroundPaint());\n            g2.fill(hotspot);\n        }\n        g2.setPaint(getPaint());\n        TextUtils.drawRotatedString(getText(), g2, (float) labelX,\n                (float) labelY, getTextAnchor(), getRotationAngle(),\n                getRotationAnchor());\n        if (isOutlineVisible()) {\n            g2.setStroke(getOutlineStroke());\n            g2.setPaint(getOutlinePaint());\n            g2.draw(hotspot);\n        }\n\n        String toolTip = getToolTipText();\n        String url = getURL();\n        if (toolTip != null || url != null) {\n            addEntity(info, hotspot, rendererIndex, toolTip, url);\n        }\n\n    }\n","date":"2017-05-06 13:04:03","endLine":454,"groupId":"101337","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"draw","params":"(Graphics2Dg2@XYPlotplot@Rectangle2DdataArea@ValueAxisdomainAxis@ValueAxisrangeAxis@intrendererIndex@PlotRenderingInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/c8/d75a42bfd64720be5a851c46ec6507c15b2c8c.src","preCode":"    public void draw(Graphics2D g2, XYPlot plot, Rectangle2D dataArea,\n            ValueAxis domainAxis, ValueAxis rangeAxis, int rendererIndex, \n            PlotRenderingInfo info) {\n\n        PlotOrientation orientation = plot.getOrientation();\n        RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(\n                plot.getDomainAxisLocation(), orientation);\n        RectangleEdge rangeEdge = Plot.resolveRangeAxisLocation(\n                plot.getRangeAxisLocation(), orientation);\n        double j2DX = domainAxis.valueToJava2D(getX(), dataArea, domainEdge);\n        double j2DY = rangeAxis.valueToJava2D(getY(), dataArea, rangeEdge);\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            double temp = j2DX;\n            j2DX = j2DY;\n            j2DY = temp;\n        }\n        double startX = j2DX + Math.cos(this.angle) * this.baseRadius;\n        double startY = j2DY + Math.sin(this.angle) * this.baseRadius;\n\n        double endX = j2DX + Math.cos(this.angle) * this.tipRadius;\n        double endY = j2DY + Math.sin(this.angle) * this.tipRadius;\n\n        double arrowBaseX = endX + Math.cos(this.angle) * this.arrowLength;\n        double arrowBaseY = endY + Math.sin(this.angle) * this.arrowLength;\n\n        double arrowLeftX = arrowBaseX\n                + Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowLeftY = arrowBaseY\n                + Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        double arrowRightX = arrowBaseX\n                - Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;\n        double arrowRightY = arrowBaseY\n                - Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;\n\n        GeneralPath arrow = new GeneralPath();\n        arrow.moveTo((float) endX, (float) endY);\n        arrow.lineTo((float) arrowLeftX, (float) arrowLeftY);\n        arrow.lineTo((float) arrowRightX, (float) arrowRightY);\n        arrow.closePath();\n\n        g2.setStroke(this.arrowStroke);\n        g2.setPaint(this.arrowPaint);\n        Line2D line = new Line2D.Double(startX, startY, arrowBaseX, arrowBaseY);\n        g2.draw(line);\n        g2.fill(arrow);\n\n        \r\n        double labelX = j2DX + Math.cos(this.angle) * (this.baseRadius\n                + this.labelOffset);\n        double labelY = j2DY + Math.sin(this.angle) * (this.baseRadius\n                + this.labelOffset);\n        g2.setFont(getFont());\n        Shape hotspot = TextUtilities.calculateRotatedStringBounds(\n                getText(), g2, (float) labelX, (float) labelY, getTextAnchor(),\n                getRotationAngle(), getRotationAnchor());\n        if (getBackgroundPaint() != null) {\n            g2.setPaint(getBackgroundPaint());\n            g2.fill(hotspot);\n        }\n        g2.setPaint(getPaint());\n        TextUtilities.drawRotatedString(getText(), g2, (float) labelX,\n                (float) labelY, getTextAnchor(), getRotationAngle(),\n                getRotationAnchor());\n        if (isOutlineVisible()) {\n            g2.setStroke(getOutlineStroke());\n            g2.setPaint(getOutlinePaint());\n            g2.draw(hotspot);\n        }\n\n        String toolTip = getToolTipText();\n        String url = getURL();\n        if (toolTip != null || url != null) {\n            addEntity(info, hotspot, rendererIndex, toolTip, url);\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/annotations/XYPointerAnnotation.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"M"}],"commitId":"ea1b09dba6931ba20e0ce2e1e8e528793a7fbae3","commitMessage":"@@@Rename TextUtilities -> TextUtils.","date":"2017-05-06 13:04:03","modifiedFileCount":"32","status":"M","submitter":"David Gilbert"}]
