[{"authorTime":"2017-05-06 16:37:24","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":2,"curCode":"    public Range findRangeBounds(CategoryDataset dataset) {\n        if (dataset == null) {\n            return null;\n        }\n        boolean allItemsNull = true; \r\n                                     \r\n        double minimum = 0.0;\n        double maximum = 0.0;\n        int columnCount = dataset.getColumnCount();\n        for (int row = 0; row < dataset.getRowCount(); row++) {\n            double runningTotal = 0.0;\n            for (int column = 0; column <= columnCount - 1; column++) {\n                Number n = dataset.getValue(row, column);\n                if (n != null) {\n                    allItemsNull = false;\n                    double value = n.doubleValue();\n                    if (column == columnCount - 1) {\n                        \r\n                        runningTotal = value;\n                    }\n                    else {\n                        runningTotal = runningTotal + value;\n                    }\n                    minimum = Math.min(minimum, runningTotal);\n                    maximum = Math.max(maximum, runningTotal);\n                }\n            }\n\n        }\n        if (!allItemsNull) {\n            return new Range(minimum, maximum);\n        }\n        else {\n            return null;\n        }\n\n    }\n","date":"2016-02-19 16:24:22","endLine":295,"groupId":"3718","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"findRangeBounds","params":"(CategoryDatasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/88/04c802142c55f16028a330992cba43a352c234.src","preCode":"    public Range findRangeBounds(CategoryDataset dataset) {\n        if (dataset == null) {\n            return null;\n        }\n        boolean allItemsNull = true; \r\n                                     \r\n        double minimum = 0.0;\n        double maximum = 0.0;\n        int columnCount = dataset.getColumnCount();\n        for (int row = 0; row < dataset.getRowCount(); row++) {\n            double runningTotal = 0.0;\n            for (int column = 0; column <= columnCount - 1; column++) {\n                Number n = dataset.getValue(row, column);\n                if (n != null) {\n                    allItemsNull = false;\n                    double value = n.doubleValue();\n                    if (column == columnCount - 1) {\n                        \r\n                        runningTotal = value;\n                    }\n                    else {\n                        runningTotal = runningTotal + value;\n                    }\n                    minimum = Math.min(minimum, runningTotal);\n                    maximum = Math.max(maximum, runningTotal);\n                }\n            }\n\n        }\n        if (!allItemsNull) {\n            return new Range(minimum, maximum);\n        }\n        else {\n            return null;\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/WaterfallBarRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"NB"},{"authorDate":"2017-05-06 16:37:24","commitOrder":2,"curCode":"    public static Range findCumulativeRangeBounds(CategoryDataset dataset) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        boolean allItemsNull = true; \r\n                                     \r\n        double minimum = 0.0;\n        double maximum = 0.0;\n        for (int row = 0; row < dataset.getRowCount(); row++) {\n            double runningTotal = 0.0;\n            for (int column = 0; column <= dataset.getColumnCount() - 1;\n                 column++) {\n                Number n = dataset.getValue(row, column);\n                if (n != null) {\n                    allItemsNull = false;\n                    double value = n.doubleValue();\n                    if (!Double.isNaN(value)) {\n                        runningTotal = runningTotal + value;\n                        minimum = Math.min(minimum, runningTotal);\n                        maximum = Math.max(maximum, runningTotal);\n                    }\n                }\n            }\n        }\n        if (!allItemsNull) {\n            return new Range(minimum, maximum);\n        }\n        else {\n            return null;\n        }\n    }\n","date":"2017-05-06 16:37:24","endLine":2231,"groupId":"1469","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"findCumulativeRangeBounds","params":"(CategoryDatasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/dc/8b6a0ddbf3de1c88397f2cde6fc21c654ede9f.src","preCode":"    public static Range findCumulativeRangeBounds(CategoryDataset dataset) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        boolean allItemsNull = true; \r\n                                     \r\n        double minimum = 0.0;\n        double maximum = 0.0;\n        for (int row = 0; row < dataset.getRowCount(); row++) {\n            double runningTotal = 0.0;\n            for (int column = 0; column <= dataset.getColumnCount() - 1;\n                 column++) {\n                Number n = dataset.getValue(row, column);\n                if (n != null) {\n                    allItemsNull = false;\n                    double value = n.doubleValue();\n                    if (!Double.isNaN(value)) {\n                        runningTotal = runningTotal + value;\n                        minimum = Math.min(minimum, runningTotal);\n                        maximum = Math.max(maximum, runningTotal);\n                    }\n                }\n            }\n        }\n        if (!allItemsNull) {\n            return new Range(minimum, maximum);\n        }\n        else {\n            return null;\n        }\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2203,"status":"B"}],"commitId":"434bac1e228cbbbebe7653d55064fb67e8c62962","commitMessage":"@@@Rename DatasetUtilities --> DatasetUtils.","date":"2017-05-06 16:37:24","modifiedFileCount":"31","status":"M","submitter":"David Gilbert"},{"authorTime":"2017-05-12 05:28:15","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":3,"curCode":"    public Range findRangeBounds(CategoryDataset dataset) {\n        if (dataset == null) {\n            return null;\n        }\n        boolean allItemsNull = true; \r\n                                     \r\n        double minimum = 0.0;\n        double maximum = 0.0;\n        int columnCount = dataset.getColumnCount();\n        for (int row = 0; row < dataset.getRowCount(); row++) {\n            double runningTotal = 0.0;\n            for (int column = 0; column <= columnCount - 1; column++) {\n                Number n = dataset.getValue(row, column);\n                if (n != null) {\n                    allItemsNull = false;\n                    double value = n.doubleValue();\n                    if (column == columnCount - 1) {\n                        \r\n                        runningTotal = value;\n                    }\n                    else {\n                        runningTotal = runningTotal + value;\n                    }\n                    minimum = Math.min(minimum, runningTotal);\n                    maximum = Math.max(maximum, runningTotal);\n                }\n            }\n\n        }\n        if (!allItemsNull) {\n            return new Range(minimum, maximum);\n        }\n        else {\n            return null;\n        }\n\n    }\n","date":"2016-02-19 16:24:22","endLine":295,"groupId":"3718","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"findRangeBounds","params":"(CategoryDatasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/88/04c802142c55f16028a330992cba43a352c234.src","preCode":"    public Range findRangeBounds(CategoryDataset dataset) {\n        if (dataset == null) {\n            return null;\n        }\n        boolean allItemsNull = true; \r\n                                     \r\n        double minimum = 0.0;\n        double maximum = 0.0;\n        int columnCount = dataset.getColumnCount();\n        for (int row = 0; row < dataset.getRowCount(); row++) {\n            double runningTotal = 0.0;\n            for (int column = 0; column <= columnCount - 1; column++) {\n                Number n = dataset.getValue(row, column);\n                if (n != null) {\n                    allItemsNull = false;\n                    double value = n.doubleValue();\n                    if (column == columnCount - 1) {\n                        \r\n                        runningTotal = value;\n                    }\n                    else {\n                        runningTotal = runningTotal + value;\n                    }\n                    minimum = Math.min(minimum, runningTotal);\n                    maximum = Math.max(maximum, runningTotal);\n                }\n            }\n\n        }\n        if (!allItemsNull) {\n            return new Range(minimum, maximum);\n        }\n        else {\n            return null;\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/WaterfallBarRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"},{"authorDate":"2017-05-12 05:28:15","commitOrder":3,"curCode":"    public static Range findCumulativeRangeBounds(CategoryDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        boolean allItemsNull = true; \r\n                                     \r\n        double minimum = 0.0;\n        double maximum = 0.0;\n        for (int row = 0; row < dataset.getRowCount(); row++) {\n            double runningTotal = 0.0;\n            for (int column = 0; column <= dataset.getColumnCount() - 1;\n                 column++) {\n                Number n = dataset.getValue(row, column);\n                if (n != null) {\n                    allItemsNull = false;\n                    double value = n.doubleValue();\n                    if (!Double.isNaN(value)) {\n                        runningTotal = runningTotal + value;\n                        minimum = Math.min(minimum, runningTotal);\n                        maximum = Math.max(maximum, runningTotal);\n                    }\n                }\n            }\n        }\n        if (!allItemsNull) {\n            return new Range(minimum, maximum);\n        }\n        else {\n            return null;\n        }\n    }\n","date":"2017-05-12 05:28:15","endLine":2231,"groupId":"1469","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"findCumulativeRangeBounds","params":"(CategoryDatasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/57/fedbdb6f2ba5f9f0c0c73cd2e21515625fcee8.src","preCode":"    public static Range findCumulativeRangeBounds(CategoryDataset dataset) {\n        ParamChecks.nullNotPermitted(dataset, \"dataset\");\n        boolean allItemsNull = true; \r\n                                     \r\n        double minimum = 0.0;\n        double maximum = 0.0;\n        for (int row = 0; row < dataset.getRowCount(); row++) {\n            double runningTotal = 0.0;\n            for (int column = 0; column <= dataset.getColumnCount() - 1;\n                 column++) {\n                Number n = dataset.getValue(row, column);\n                if (n != null) {\n                    allItemsNull = false;\n                    double value = n.doubleValue();\n                    if (!Double.isNaN(value)) {\n                        runningTotal = runningTotal + value;\n                        minimum = Math.min(minimum, runningTotal);\n                        maximum = Math.max(maximum, runningTotal);\n                    }\n                }\n            }\n        }\n        if (!allItemsNull) {\n            return new Range(minimum, maximum);\n        }\n        else {\n            return null;\n        }\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2203,"status":"M"}],"commitId":"22701c9ec4cd5bd88f8a7f17ae11c18099dd1ec7","commitMessage":"@@@Rename ParamChecks --> Args.","date":"2017-05-12 05:28:15","modifiedFileCount":"216","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-15 15:36:15","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":4,"curCode":"    public Range findRangeBounds(CategoryDataset dataset) {\n        if (dataset == null) {\n            return null;\n        }\n        boolean allItemsNull = true; \r\n                                     \r\n        double minimum = 0.0;\n        double maximum = 0.0;\n        int columnCount = dataset.getColumnCount();\n        for (int row = 0; row < dataset.getRowCount(); row++) {\n            double runningTotal = 0.0;\n            for (int column = 0; column <= columnCount - 1; column++) {\n                Number n = dataset.getValue(row, column);\n                if (n != null) {\n                    allItemsNull = false;\n                    double value = n.doubleValue();\n                    if (column == columnCount - 1) {\n                        \r\n                        runningTotal = value;\n                    }\n                    else {\n                        runningTotal = runningTotal + value;\n                    }\n                    minimum = Math.min(minimum, runningTotal);\n                    maximum = Math.max(maximum, runningTotal);\n                }\n            }\n\n        }\n        if (!allItemsNull) {\n            return new Range(minimum, maximum);\n        }\n        else {\n            return null;\n        }\n\n    }\n","date":"2016-02-19 16:24:22","endLine":295,"groupId":"101625","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"findRangeBounds","params":"(CategoryDatasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/88/04c802142c55f16028a330992cba43a352c234.src","preCode":"    public Range findRangeBounds(CategoryDataset dataset) {\n        if (dataset == null) {\n            return null;\n        }\n        boolean allItemsNull = true; \r\n                                     \r\n        double minimum = 0.0;\n        double maximum = 0.0;\n        int columnCount = dataset.getColumnCount();\n        for (int row = 0; row < dataset.getRowCount(); row++) {\n            double runningTotal = 0.0;\n            for (int column = 0; column <= columnCount - 1; column++) {\n                Number n = dataset.getValue(row, column);\n                if (n != null) {\n                    allItemsNull = false;\n                    double value = n.doubleValue();\n                    if (column == columnCount - 1) {\n                        \r\n                        runningTotal = value;\n                    }\n                    else {\n                        runningTotal = runningTotal + value;\n                    }\n                    minimum = Math.min(minimum, runningTotal);\n                    maximum = Math.max(maximum, runningTotal);\n                }\n            }\n\n        }\n        if (!allItemsNull) {\n            return new Range(minimum, maximum);\n        }\n        else {\n            return null;\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/WaterfallBarRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"},{"authorDate":"2020-03-15 15:36:15","commitOrder":4,"curCode":"        findCumulativeRangeBounds(CategoryDataset<R, C> dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        boolean allItemsNull = true; \r\n                                     \r\n        double minimum = 0.0;\n        double maximum = 0.0;\n        for (int row = 0; row < dataset.getRowCount(); row++) {\n            double runningTotal = 0.0;\n            for (int column = 0; column <= dataset.getColumnCount() - 1;\n                 column++) {\n                Number n = dataset.getValue(row, column);\n                if (n != null) {\n                    allItemsNull = false;\n                    double value = n.doubleValue();\n                    if (!Double.isNaN(value)) {\n                        runningTotal = runningTotal + value;\n                        minimum = Math.min(minimum, runningTotal);\n                        maximum = Math.max(maximum, runningTotal);\n                    }\n                }\n            }\n        }\n        if (!allItemsNull) {\n            return new Range(minimum, maximum);\n        }\n        else {\n            return null;\n        }\n    }\n","date":"2020-03-15 15:36:15","endLine":2160,"groupId":"101625","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"findCumulativeRangeBounds","params":"(CategoryDataset<R@C>dataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/2b/f55a95d2f3a0fda94e483fcdd44f8c0c38f24c.src","preCode":"    public static Range findCumulativeRangeBounds(CategoryDataset dataset) {\n        Args.nullNotPermitted(dataset, \"dataset\");\n        boolean allItemsNull = true; \r\n                                     \r\n        double minimum = 0.0;\n        double maximum = 0.0;\n        for (int row = 0; row < dataset.getRowCount(); row++) {\n            double runningTotal = 0.0;\n            for (int column = 0; column <= dataset.getColumnCount() - 1;\n                 column++) {\n                Number n = dataset.getValue(row, column);\n                if (n != null) {\n                    allItemsNull = false;\n                    double value = n.doubleValue();\n                    if (!Double.isNaN(value)) {\n                        runningTotal = runningTotal + value;\n                        minimum = Math.min(minimum, runningTotal);\n                        maximum = Math.max(maximum, runningTotal);\n                    }\n                }\n            }\n        }\n        if (!allItemsNull) {\n            return new Range(minimum, maximum);\n        }\n        else {\n            return null;\n        }\n    }\n","realPath":"src/main/java/org/jfree/data/general/DatasetUtils.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":2132,"status":"M"}],"commitId":"3e13a50e8b025d15b978faffb0843080be20d4b3","commitMessage":"@@@Fix NetBeans warnings.","date":"2020-03-15 15:36:15","modifiedFileCount":"18","status":"M","submitter":"David Gilbert"}]
