[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    protected void applyToXYPlot(XYPlot plot) {\n        plot.setAxisOffset(this.axisOffset);\n        plot.setDomainZeroBaselinePaint(this.baselinePaint);\n        plot.setRangeZeroBaselinePaint(this.baselinePaint);\n        plot.setDomainGridlinePaint(this.domainGridlinePaint);\n        plot.setRangeGridlinePaint(this.rangeGridlinePaint);\n        plot.setDomainCrosshairPaint(this.crosshairPaint);\n        plot.setRangeCrosshairPaint(this.crosshairPaint);\n        plot.setShadowGenerator(this.shadowGenerator);\n\n        \r\n        int domainAxisCount = plot.getDomainAxisCount();\n        for (int i = 0; i < domainAxisCount; i++) {\n            ValueAxis axis = plot.getDomainAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rangeAxisCount = plot.getRangeAxisCount();\n        for (int i = 0; i < rangeAxisCount; i++) {\n            ValueAxis axis = plot.getRangeAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rendererCount = plot.getRendererCount();\n        for (int i = 0; i < rendererCount; i++) {\n            XYItemRenderer r = plot.getRenderer(i);\n            if (r != null) {\n                applyToXYItemRenderer(r);\n            }\n        }\n\n        \r\n        Iterator iter = plot.getAnnotations().iterator();\n        while (iter.hasNext()) {\n            XYAnnotation a = (XYAnnotation) iter.next();\n            applyToXYAnnotation(a);\n        }\n\n        if (plot instanceof CombinedDomainXYPlot) {\n            CombinedDomainXYPlot cp = (CombinedDomainXYPlot) plot;\n            Iterator iterator = cp.getSubplots().iterator();\n            while (iterator.hasNext()) {\n                XYPlot subplot = (XYPlot) iterator.next();\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n        if (plot instanceof CombinedRangeXYPlot) {\n            CombinedRangeXYPlot cp = (CombinedRangeXYPlot) plot;\n            Iterator iterator = cp.getSubplots().iterator();\n            while (iterator.hasNext()) {\n                XYPlot subplot = (XYPlot) iterator.next();\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n    }\n","date":"2016-02-19 16:24:22","endLine":1410,"groupId":"10","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"applyToXYPlot","params":"(XYPlotplot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/fd/8d2c5675e4abbcd31e07e5b8268f1a6d56d42a.src","preCode":"    protected void applyToXYPlot(XYPlot plot) {\n        plot.setAxisOffset(this.axisOffset);\n        plot.setDomainZeroBaselinePaint(this.baselinePaint);\n        plot.setRangeZeroBaselinePaint(this.baselinePaint);\n        plot.setDomainGridlinePaint(this.domainGridlinePaint);\n        plot.setRangeGridlinePaint(this.rangeGridlinePaint);\n        plot.setDomainCrosshairPaint(this.crosshairPaint);\n        plot.setRangeCrosshairPaint(this.crosshairPaint);\n        plot.setShadowGenerator(this.shadowGenerator);\n\n        \r\n        int domainAxisCount = plot.getDomainAxisCount();\n        for (int i = 0; i < domainAxisCount; i++) {\n            ValueAxis axis = plot.getDomainAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rangeAxisCount = plot.getRangeAxisCount();\n        for (int i = 0; i < rangeAxisCount; i++) {\n            ValueAxis axis = plot.getRangeAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rendererCount = plot.getRendererCount();\n        for (int i = 0; i < rendererCount; i++) {\n            XYItemRenderer r = plot.getRenderer(i);\n            if (r != null) {\n                applyToXYItemRenderer(r);\n            }\n        }\n\n        \r\n        Iterator iter = plot.getAnnotations().iterator();\n        while (iter.hasNext()) {\n            XYAnnotation a = (XYAnnotation) iter.next();\n            applyToXYAnnotation(a);\n        }\n\n        if (plot instanceof CombinedDomainXYPlot) {\n            CombinedDomainXYPlot cp = (CombinedDomainXYPlot) plot;\n            Iterator iterator = cp.getSubplots().iterator();\n            while (iterator.hasNext()) {\n                XYPlot subplot = (XYPlot) iterator.next();\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n        if (plot instanceof CombinedRangeXYPlot) {\n            CombinedRangeXYPlot cp = (CombinedRangeXYPlot) plot;\n            Iterator iterator = cp.getSubplots().iterator();\n            while (iterator.hasNext()) {\n                XYPlot subplot = (XYPlot) iterator.next();\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/StandardChartTheme.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1346,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    protected void applyToMeterPlot(MeterPlot plot) {\n        plot.setDialBackgroundPaint(this.plotBackgroundPaint);\n        plot.setValueFont(this.largeFont);\n        plot.setValuePaint(this.axisLabelPaint);\n        plot.setDialOutlinePaint(this.plotOutlinePaint);\n        plot.setNeedlePaint(this.thermometerPaint);\n        plot.setTickLabelFont(this.regularFont);\n        plot.setTickLabelPaint(this.tickLabelPaint);\n    }\n","date":"2016-02-19 16:24:22","endLine":1472,"groupId":"10","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"applyToMeterPlot","params":"(MeterPlotplot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/fd/8d2c5675e4abbcd31e07e5b8268f1a6d56d42a.src","preCode":"    protected void applyToMeterPlot(MeterPlot plot) {\n        plot.setDialBackgroundPaint(this.plotBackgroundPaint);\n        plot.setValueFont(this.largeFont);\n        plot.setValuePaint(this.axisLabelPaint);\n        plot.setDialOutlinePaint(this.plotOutlinePaint);\n        plot.setNeedlePaint(this.thermometerPaint);\n        plot.setTickLabelFont(this.regularFont);\n        plot.setTickLabelPaint(this.tickLabelPaint);\n    }\n","realPath":"src/main/java/org/jfree/chart/StandardChartTheme.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1464,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2020-03-11 13:44:18","commitOrder":2,"curCode":"    protected void applyToXYPlot(XYPlot plot) {\n        plot.setAxisOffset(this.axisOffset);\n        plot.setDomainZeroBaselinePaint(this.baselinePaint);\n        plot.setRangeZeroBaselinePaint(this.baselinePaint);\n        plot.setDomainGridlinePaint(this.domainGridlinePaint);\n        plot.setRangeGridlinePaint(this.rangeGridlinePaint);\n        plot.setDomainCrosshairPaint(this.crosshairPaint);\n        plot.setRangeCrosshairPaint(this.crosshairPaint);\n        plot.setShadowGenerator(this.shadowGenerator);\n\n        \r\n        int domainAxisCount = plot.getDomainAxisCount();\n        for (int i = 0; i < domainAxisCount; i++) {\n            ValueAxis axis = plot.getDomainAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rangeAxisCount = plot.getRangeAxisCount();\n        for (int i = 0; i < rangeAxisCount; i++) {\n            ValueAxis axis = plot.getRangeAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rendererCount = plot.getRendererCount();\n        for (int i = 0; i < rendererCount; i++) {\n            XYItemRenderer r = plot.getRenderer(i);\n            if (r != null) {\n                applyToXYItemRenderer(r);\n            }\n        }\n        \r\n\n        for (XYAnnotation a : plot.getAnnotations()) {\n            applyToXYAnnotation(a);\n        }\n\n        if (plot instanceof CombinedDomainXYPlot) {\n            CombinedDomainXYPlot cp = (CombinedDomainXYPlot) plot;\n            for (XYPlot subplot : cp.getSubplots()) {\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n        if (plot instanceof CombinedRangeXYPlot) {\n            CombinedRangeXYPlot cp = (CombinedRangeXYPlot) plot;\n            for (XYPlot subplot : cp.getSubplots()) {\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n    }\n","date":"2020-03-11 13:44:18","endLine":1363,"groupId":"10","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"applyToXYPlot","params":"(XYPlotplot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/9c/4e633464464c8b35cdd8361be9bb1093caf492.src","preCode":"    protected void applyToXYPlot(XYPlot plot) {\n        plot.setAxisOffset(this.axisOffset);\n        plot.setDomainZeroBaselinePaint(this.baselinePaint);\n        plot.setRangeZeroBaselinePaint(this.baselinePaint);\n        plot.setDomainGridlinePaint(this.domainGridlinePaint);\n        plot.setRangeGridlinePaint(this.rangeGridlinePaint);\n        plot.setDomainCrosshairPaint(this.crosshairPaint);\n        plot.setRangeCrosshairPaint(this.crosshairPaint);\n        plot.setShadowGenerator(this.shadowGenerator);\n\n        \r\n        int domainAxisCount = plot.getDomainAxisCount();\n        for (int i = 0; i < domainAxisCount; i++) {\n            ValueAxis axis = plot.getDomainAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rangeAxisCount = plot.getRangeAxisCount();\n        for (int i = 0; i < rangeAxisCount; i++) {\n            ValueAxis axis = plot.getRangeAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rendererCount = plot.getRendererCount();\n        for (int i = 0; i < rendererCount; i++) {\n            XYItemRenderer r = plot.getRenderer(i);\n            if (r != null) {\n                applyToXYItemRenderer(r);\n            }\n        }\n\n        \r\n        Iterator iter = plot.getAnnotations().iterator();\n        while (iter.hasNext()) {\n            XYAnnotation a = (XYAnnotation) iter.next();\n            applyToXYAnnotation(a);\n        }\n\n        if (plot instanceof CombinedDomainXYPlot) {\n            CombinedDomainXYPlot cp = (CombinedDomainXYPlot) plot;\n            Iterator iterator = cp.getSubplots().iterator();\n            while (iterator.hasNext()) {\n                XYPlot subplot = (XYPlot) iterator.next();\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n        if (plot instanceof CombinedRangeXYPlot) {\n            CombinedRangeXYPlot cp = (CombinedRangeXYPlot) plot;\n            Iterator iterator = cp.getSubplots().iterator();\n            while (iterator.hasNext()) {\n                XYPlot subplot = (XYPlot) iterator.next();\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/StandardChartTheme.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1305,"status":"M"},{"authorDate":"2016-02-19 16:24:22","commitOrder":2,"curCode":"    protected void applyToMeterPlot(MeterPlot plot) {\n        plot.setDialBackgroundPaint(this.plotBackgroundPaint);\n        plot.setValueFont(this.largeFont);\n        plot.setValuePaint(this.axisLabelPaint);\n        plot.setDialOutlinePaint(this.plotOutlinePaint);\n        plot.setNeedlePaint(this.thermometerPaint);\n        plot.setTickLabelFont(this.regularFont);\n        plot.setTickLabelPaint(this.tickLabelPaint);\n    }\n","date":"2016-02-19 16:24:22","endLine":1472,"groupId":"10","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"applyToMeterPlot","params":"(MeterPlotplot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/fd/8d2c5675e4abbcd31e07e5b8268f1a6d56d42a.src","preCode":"    protected void applyToMeterPlot(MeterPlot plot) {\n        plot.setDialBackgroundPaint(this.plotBackgroundPaint);\n        plot.setValueFont(this.largeFont);\n        plot.setValuePaint(this.axisLabelPaint);\n        plot.setDialOutlinePaint(this.plotOutlinePaint);\n        plot.setNeedlePaint(this.thermometerPaint);\n        plot.setTickLabelFont(this.regularFont);\n        plot.setTickLabelPaint(this.tickLabelPaint);\n    }\n","realPath":"src/main/java/org/jfree/chart/StandardChartTheme.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1464,"status":"N"}],"commitId":"7b721dd91af50e2f1e22d31b7a2a391869f0685d","commitMessage":"@@@Use for-loop","date":"2020-03-11 13:44:18","modifiedFileCount":"1","status":"M","submitter":"David Gilbert"},{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2020-03-29 19:31:49","commitOrder":3,"curCode":"    protected <S extends Comparable<S>> void  applyToXYPlot(XYPlot<S> plot) {\n        plot.setAxisOffset(this.axisOffset);\n        plot.setDomainZeroBaselinePaint(this.baselinePaint);\n        plot.setRangeZeroBaselinePaint(this.baselinePaint);\n        plot.setDomainGridlinePaint(this.domainGridlinePaint);\n        plot.setRangeGridlinePaint(this.rangeGridlinePaint);\n        plot.setDomainCrosshairPaint(this.crosshairPaint);\n        plot.setRangeCrosshairPaint(this.crosshairPaint);\n        plot.setShadowGenerator(this.shadowGenerator);\n\n        \r\n        int domainAxisCount = plot.getDomainAxisCount();\n        for (int i = 0; i < domainAxisCount; i++) {\n            ValueAxis axis = plot.getDomainAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rangeAxisCount = plot.getRangeAxisCount();\n        for (int i = 0; i < rangeAxisCount; i++) {\n            ValueAxis axis = plot.getRangeAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rendererCount = plot.getRendererCount();\n        for (int i = 0; i < rendererCount; i++) {\n            XYItemRenderer r = plot.getRenderer(i);\n            if (r != null) {\n                applyToXYItemRenderer(r);\n            }\n        }\n        \r\n\n        for (XYAnnotation a : plot.getAnnotations()) {\n            applyToXYAnnotation(a);\n        }\n\n        if (plot instanceof CombinedDomainXYPlot) {\n            CombinedDomainXYPlot cp = (CombinedDomainXYPlot) plot;\n            for (XYPlot subplot : cp.getSubplots()) {\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n        if (plot instanceof CombinedRangeXYPlot) {\n            CombinedRangeXYPlot cp = (CombinedRangeXYPlot) plot;\n            for (XYPlot subplot : cp.getSubplots()) {\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n    }\n","date":"2020-03-29 19:31:49","endLine":1363,"groupId":"10","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"applyToXYPlot","params":"(XYPlot<S>plot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/d7/16e76ab08277a6f98345a10e171d9ac0e2fd59.src","preCode":"    protected void applyToXYPlot(XYPlot plot) {\n        plot.setAxisOffset(this.axisOffset);\n        plot.setDomainZeroBaselinePaint(this.baselinePaint);\n        plot.setRangeZeroBaselinePaint(this.baselinePaint);\n        plot.setDomainGridlinePaint(this.domainGridlinePaint);\n        plot.setRangeGridlinePaint(this.rangeGridlinePaint);\n        plot.setDomainCrosshairPaint(this.crosshairPaint);\n        plot.setRangeCrosshairPaint(this.crosshairPaint);\n        plot.setShadowGenerator(this.shadowGenerator);\n\n        \r\n        int domainAxisCount = plot.getDomainAxisCount();\n        for (int i = 0; i < domainAxisCount; i++) {\n            ValueAxis axis = plot.getDomainAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rangeAxisCount = plot.getRangeAxisCount();\n        for (int i = 0; i < rangeAxisCount; i++) {\n            ValueAxis axis = plot.getRangeAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rendererCount = plot.getRendererCount();\n        for (int i = 0; i < rendererCount; i++) {\n            XYItemRenderer r = plot.getRenderer(i);\n            if (r != null) {\n                applyToXYItemRenderer(r);\n            }\n        }\n        \r\n\n        for (XYAnnotation a : plot.getAnnotations()) {\n            applyToXYAnnotation(a);\n        }\n\n        if (plot instanceof CombinedDomainXYPlot) {\n            CombinedDomainXYPlot cp = (CombinedDomainXYPlot) plot;\n            for (XYPlot subplot : cp.getSubplots()) {\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n        if (plot instanceof CombinedRangeXYPlot) {\n            CombinedRangeXYPlot cp = (CombinedRangeXYPlot) plot;\n            for (XYPlot subplot : cp.getSubplots()) {\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/StandardChartTheme.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1305,"status":"M"},{"authorDate":"2016-02-19 16:24:22","commitOrder":3,"curCode":"    protected void applyToMeterPlot(MeterPlot plot) {\n        plot.setDialBackgroundPaint(this.plotBackgroundPaint);\n        plot.setValueFont(this.largeFont);\n        plot.setValuePaint(this.axisLabelPaint);\n        plot.setDialOutlinePaint(this.plotOutlinePaint);\n        plot.setNeedlePaint(this.thermometerPaint);\n        plot.setTickLabelFont(this.regularFont);\n        plot.setTickLabelPaint(this.tickLabelPaint);\n    }\n","date":"2016-02-19 16:24:22","endLine":1472,"groupId":"10","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"applyToMeterPlot","params":"(MeterPlotplot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/fd/8d2c5675e4abbcd31e07e5b8268f1a6d56d42a.src","preCode":"    protected void applyToMeterPlot(MeterPlot plot) {\n        plot.setDialBackgroundPaint(this.plotBackgroundPaint);\n        plot.setValueFont(this.largeFont);\n        plot.setValuePaint(this.axisLabelPaint);\n        plot.setDialOutlinePaint(this.plotOutlinePaint);\n        plot.setNeedlePaint(this.thermometerPaint);\n        plot.setTickLabelFont(this.regularFont);\n        plot.setTickLabelPaint(this.tickLabelPaint);\n    }\n","realPath":"src/main/java/org/jfree/chart/StandardChartTheme.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1464,"status":"N"}],"commitId":"de82cc1d6c0c13f7882bf9c3dd566cf12a59a01e","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-29 19:31:49","modifiedFileCount":"8","status":"M","submitter":"David Gilbert"},{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2020-05-02 14:05:54","commitOrder":4,"curCode":"    protected <S extends Comparable<S>> void applyToXYPlot(XYPlot<S> plot) {\n        plot.setAxisOffset(this.axisOffset);\n        plot.setDomainZeroBaselinePaint(this.baselinePaint);\n        plot.setRangeZeroBaselinePaint(this.baselinePaint);\n        plot.setDomainGridlinePaint(this.domainGridlinePaint);\n        plot.setRangeGridlinePaint(this.rangeGridlinePaint);\n        plot.setDomainCrosshairPaint(this.crosshairPaint);\n        plot.setRangeCrosshairPaint(this.crosshairPaint);\n        plot.setShadowGenerator(this.shadowGenerator);\n\n        \r\n        int domainAxisCount = plot.getDomainAxisCount();\n        for (int i = 0; i < domainAxisCount; i++) {\n            ValueAxis axis = plot.getDomainAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rangeAxisCount = plot.getRangeAxisCount();\n        for (int i = 0; i < rangeAxisCount; i++) {\n            ValueAxis axis = plot.getRangeAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rendererCount = plot.getRendererCount();\n        for (int i = 0; i < rendererCount; i++) {\n            XYItemRenderer r = plot.getRenderer(i);\n            if (r != null) {\n                applyToXYItemRenderer(r);\n            }\n        }\n        \r\n\n        for (XYAnnotation a : plot.getAnnotations()) {\n            applyToXYAnnotation(a);\n        }\n\n        if (plot instanceof CombinedDomainXYPlot) {\n            CombinedDomainXYPlot cp = (CombinedDomainXYPlot) plot;\n            for (XYPlot<S> subplot : cp.getSubplots()) {\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n        if (plot instanceof CombinedRangeXYPlot) {\n            CombinedRangeXYPlot cp = (CombinedRangeXYPlot) plot;\n            for (XYPlot subplot : cp.getSubplots()) {\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n    }\n","date":"2020-05-02 14:05:54","endLine":1353,"groupId":"10","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"applyToXYPlot","params":"(XYPlot<S>plot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/d2/323bc4248027fa97f7311d49033464d379bcae.src","preCode":"    protected <S extends Comparable<S>> void  applyToXYPlot(XYPlot<S> plot) {\n        plot.setAxisOffset(this.axisOffset);\n        plot.setDomainZeroBaselinePaint(this.baselinePaint);\n        plot.setRangeZeroBaselinePaint(this.baselinePaint);\n        plot.setDomainGridlinePaint(this.domainGridlinePaint);\n        plot.setRangeGridlinePaint(this.rangeGridlinePaint);\n        plot.setDomainCrosshairPaint(this.crosshairPaint);\n        plot.setRangeCrosshairPaint(this.crosshairPaint);\n        plot.setShadowGenerator(this.shadowGenerator);\n\n        \r\n        int domainAxisCount = plot.getDomainAxisCount();\n        for (int i = 0; i < domainAxisCount; i++) {\n            ValueAxis axis = plot.getDomainAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rangeAxisCount = plot.getRangeAxisCount();\n        for (int i = 0; i < rangeAxisCount; i++) {\n            ValueAxis axis = plot.getRangeAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rendererCount = plot.getRendererCount();\n        for (int i = 0; i < rendererCount; i++) {\n            XYItemRenderer r = plot.getRenderer(i);\n            if (r != null) {\n                applyToXYItemRenderer(r);\n            }\n        }\n        \r\n\n        for (XYAnnotation a : plot.getAnnotations()) {\n            applyToXYAnnotation(a);\n        }\n\n        if (plot instanceof CombinedDomainXYPlot) {\n            CombinedDomainXYPlot cp = (CombinedDomainXYPlot) plot;\n            for (XYPlot subplot : cp.getSubplots()) {\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n        if (plot instanceof CombinedRangeXYPlot) {\n            CombinedRangeXYPlot cp = (CombinedRangeXYPlot) plot;\n            for (XYPlot subplot : cp.getSubplots()) {\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/StandardChartTheme.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1295,"status":"M"},{"authorDate":"2016-02-19 16:24:22","commitOrder":4,"curCode":"    protected void applyToMeterPlot(MeterPlot plot) {\n        plot.setDialBackgroundPaint(this.plotBackgroundPaint);\n        plot.setValueFont(this.largeFont);\n        plot.setValuePaint(this.axisLabelPaint);\n        plot.setDialOutlinePaint(this.plotOutlinePaint);\n        plot.setNeedlePaint(this.thermometerPaint);\n        plot.setTickLabelFont(this.regularFont);\n        plot.setTickLabelPaint(this.tickLabelPaint);\n    }\n","date":"2016-02-19 16:24:22","endLine":1472,"groupId":"10","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"applyToMeterPlot","params":"(MeterPlotplot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/fd/8d2c5675e4abbcd31e07e5b8268f1a6d56d42a.src","preCode":"    protected void applyToMeterPlot(MeterPlot plot) {\n        plot.setDialBackgroundPaint(this.plotBackgroundPaint);\n        plot.setValueFont(this.largeFont);\n        plot.setValuePaint(this.axisLabelPaint);\n        plot.setDialOutlinePaint(this.plotOutlinePaint);\n        plot.setNeedlePaint(this.thermometerPaint);\n        plot.setTickLabelFont(this.regularFont);\n        plot.setTickLabelPaint(this.tickLabelPaint);\n    }\n","realPath":"src/main/java/org/jfree/chart/StandardChartTheme.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1464,"status":"N"}],"commitId":"3de16b9b26160b2158f6d121fe6c6f687cc1d3a8","commitMessage":"@@@Add some generics.  fix compiler warnings.","date":"2020-05-02 14:05:54","modifiedFileCount":"6","status":"M","submitter":"David Gilbert"},{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2020-09-27 01:37:13","commitOrder":5,"curCode":"    protected <S extends Comparable<S>> void applyToXYPlot(XYPlot<S> plot) {\n        plot.setAxisOffset(this.axisOffset);\n        plot.setDomainZeroBaselinePaint(this.baselinePaint);\n        plot.setRangeZeroBaselinePaint(this.baselinePaint);\n        plot.setDomainGridlinePaint(this.domainGridlinePaint);\n        plot.setRangeGridlinePaint(this.rangeGridlinePaint);\n        plot.setDomainCrosshairPaint(this.crosshairPaint);\n        plot.setRangeCrosshairPaint(this.crosshairPaint);\n        plot.setShadowGenerator(this.shadowGenerator);\n\n        \r\n        int domainAxisCount = plot.getDomainAxisCount();\n        for (int i = 0; i < domainAxisCount; i++) {\n            ValueAxis axis = plot.getDomainAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rangeAxisCount = plot.getRangeAxisCount();\n        for (int i = 0; i < rangeAxisCount; i++) {\n            ValueAxis axis = plot.getRangeAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rendererCount = plot.getRendererCount();\n        for (int i = 0; i < rendererCount; i++) {\n            XYItemRenderer r = plot.getRenderer(i);\n            if (r != null) {\n                applyToXYItemRenderer(r);\n            }\n        }\n        \r\n\n        for (XYAnnotation a : plot.getAnnotations()) {\n            applyToXYAnnotation(a);\n        }\n\n        if (plot instanceof CombinedDomainXYPlot) {\n            CombinedDomainXYPlot<S> cp = (CombinedDomainXYPlot) plot;\n            for (XYPlot<S> subplot : cp.getSubplots()) {\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n        if (plot instanceof CombinedRangeXYPlot) {\n            CombinedRangeXYPlot<S> cp = (CombinedRangeXYPlot) plot;\n            for (XYPlot subplot : cp.getSubplots()) {\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n    }\n","date":"2020-09-27 01:37:13","endLine":1353,"groupId":"101890","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"applyToXYPlot","params":"(XYPlot<S>plot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/0a/f4660784ca436861175068197e0981ddfbe1d0.src","preCode":"    protected <S extends Comparable<S>> void applyToXYPlot(XYPlot<S> plot) {\n        plot.setAxisOffset(this.axisOffset);\n        plot.setDomainZeroBaselinePaint(this.baselinePaint);\n        plot.setRangeZeroBaselinePaint(this.baselinePaint);\n        plot.setDomainGridlinePaint(this.domainGridlinePaint);\n        plot.setRangeGridlinePaint(this.rangeGridlinePaint);\n        plot.setDomainCrosshairPaint(this.crosshairPaint);\n        plot.setRangeCrosshairPaint(this.crosshairPaint);\n        plot.setShadowGenerator(this.shadowGenerator);\n\n        \r\n        int domainAxisCount = plot.getDomainAxisCount();\n        for (int i = 0; i < domainAxisCount; i++) {\n            ValueAxis axis = plot.getDomainAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rangeAxisCount = plot.getRangeAxisCount();\n        for (int i = 0; i < rangeAxisCount; i++) {\n            ValueAxis axis = plot.getRangeAxis(i);\n            if (axis != null) {\n                applyToValueAxis(axis);\n            }\n        }\n\n        \r\n        int rendererCount = plot.getRendererCount();\n        for (int i = 0; i < rendererCount; i++) {\n            XYItemRenderer r = plot.getRenderer(i);\n            if (r != null) {\n                applyToXYItemRenderer(r);\n            }\n        }\n        \r\n\n        for (XYAnnotation a : plot.getAnnotations()) {\n            applyToXYAnnotation(a);\n        }\n\n        if (plot instanceof CombinedDomainXYPlot) {\n            CombinedDomainXYPlot cp = (CombinedDomainXYPlot) plot;\n            for (XYPlot<S> subplot : cp.getSubplots()) {\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n        if (plot instanceof CombinedRangeXYPlot) {\n            CombinedRangeXYPlot cp = (CombinedRangeXYPlot) plot;\n            for (XYPlot subplot : cp.getSubplots()) {\n                if (subplot != null) {\n                    applyToPlot(subplot);\n                }\n            }\n        }\n    }\n","realPath":"src/main/java/org/jfree/chart/StandardChartTheme.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1295,"status":"M"},{"authorDate":"2016-02-19 16:24:22","commitOrder":5,"curCode":"    protected void applyToMeterPlot(MeterPlot plot) {\n        plot.setDialBackgroundPaint(this.plotBackgroundPaint);\n        plot.setValueFont(this.largeFont);\n        plot.setValuePaint(this.axisLabelPaint);\n        plot.setDialOutlinePaint(this.plotOutlinePaint);\n        plot.setNeedlePaint(this.thermometerPaint);\n        plot.setTickLabelFont(this.regularFont);\n        plot.setTickLabelPaint(this.tickLabelPaint);\n    }\n","date":"2016-02-19 16:24:22","endLine":1472,"groupId":"101890","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"applyToMeterPlot","params":"(MeterPlotplot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/fd/8d2c5675e4abbcd31e07e5b8268f1a6d56d42a.src","preCode":"    protected void applyToMeterPlot(MeterPlot plot) {\n        plot.setDialBackgroundPaint(this.plotBackgroundPaint);\n        plot.setValueFont(this.largeFont);\n        plot.setValuePaint(this.axisLabelPaint);\n        plot.setDialOutlinePaint(this.plotOutlinePaint);\n        plot.setNeedlePaint(this.thermometerPaint);\n        plot.setTickLabelFont(this.regularFont);\n        plot.setTickLabelPaint(this.tickLabelPaint);\n    }\n","realPath":"src/main/java/org/jfree/chart/StandardChartTheme.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":1464,"status":"N"}],"commitId":"3aa693810cbe8b23183662616e2e33ad3dfbba88","commitMessage":"@@@Update generics.","date":"2020-09-27 01:37:13","modifiedFileCount":"3","status":"M","submitter":"David Gilbert"}]
