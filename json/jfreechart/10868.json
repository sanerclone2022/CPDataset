[{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        MatrixSeries s1 = new MatrixSeries(\"Series\", 2, 3);\n        s1.update(0, 0, 1.1);\n        MatrixSeriesCollection c1 = new MatrixSeriesCollection();\n        c1.addSeries(s1);\n        MatrixSeriesCollection c2 = (MatrixSeriesCollection) c1.clone();\n\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }\n","date":"2016-02-19 15:40:32","endLine":99,"groupId":"3413","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/1d/2d97583310884cdc18fe716e9c1a129d180959.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        MatrixSeries s1 = new MatrixSeries(\"Series\", 2, 3);\n        s1.update(0, 0, 1.1);\n        MatrixSeriesCollection c1 = new MatrixSeriesCollection();\n        c1.addSeries(s1);\n        MatrixSeriesCollection c2 = (MatrixSeriesCollection) c1.clone();\n\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }\n","realPath":"src/test/java/org/jfree/data/xy/MatrixSeriesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        TimeSeries s1 = new TimeSeries(\"Series\");\n        s1.add(new Year(2009), 1.1);\n        TimeSeriesCollection c1 = new TimeSeriesCollection();\n        c1.addSeries(s1);\n        TimeSeriesCollection c2 = (TimeSeriesCollection) c1.clone();\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n        c2.getSeries(0).setDescription(\"XYZ\");\n        assertTrue(c1.equals(c2));\n    }\n","date":"2016-02-19 15:40:32","endLine":369,"groupId":"3413","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/ba/8ff3fa504763e787e5110a87e475ca9802fe95.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        TimeSeries s1 = new TimeSeries(\"Series\");\n        s1.add(new Year(2009), 1.1);\n        TimeSeriesCollection c1 = new TimeSeriesCollection();\n        c1.addSeries(s1);\n        TimeSeriesCollection c2 = (TimeSeriesCollection) c1.clone();\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n        c2.getSeries(0).setDescription(\"XYZ\");\n        assertTrue(c1.equals(c2));\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"B"}],"commitId":"1b18adfb8102c34c9287ece406b9dde5751b90b5","commitMessage":"@@@Move test files to standard Maven location.","date":"2016-02-19 15:40:32","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2020-03-21 14:29:39","commitOrder":2,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        MatrixSeries s1 = new MatrixSeries(\"Series\", 2, 3);\n        s1.update(0, 0, 1.1);\n        MatrixSeriesCollection c1 = new MatrixSeriesCollection();\n        c1.addSeries(s1);\n        MatrixSeriesCollection c2 = CloneUtils.clone(c1);\n\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }\n","date":"2020-03-21 14:29:39","endLine":95,"groupId":"2413","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/08/17f16892d7e77d9041eeaa68fd4d3ca81a9808.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        MatrixSeries s1 = new MatrixSeries(\"Series\", 2, 3);\n        s1.update(0, 0, 1.1);\n        MatrixSeriesCollection c1 = new MatrixSeriesCollection();\n        c1.addSeries(s1);\n        MatrixSeriesCollection c2 = (MatrixSeriesCollection) c1.clone();\n\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }\n","realPath":"src/test/java/org/jfree/data/xy/MatrixSeriesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2016-02-19 15:40:32","commitOrder":2,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        TimeSeries s1 = new TimeSeries(\"Series\");\n        s1.add(new Year(2009), 1.1);\n        TimeSeriesCollection c1 = new TimeSeriesCollection();\n        c1.addSeries(s1);\n        TimeSeriesCollection c2 = (TimeSeriesCollection) c1.clone();\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n        c2.getSeries(0).setDescription(\"XYZ\");\n        assertTrue(c1.equals(c2));\n    }\n","date":"2016-02-19 15:40:32","endLine":369,"groupId":"3413","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/ba/8ff3fa504763e787e5110a87e475ca9802fe95.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        TimeSeries s1 = new TimeSeries(\"Series\");\n        s1.add(new Year(2009), 1.1);\n        TimeSeriesCollection c1 = new TimeSeriesCollection();\n        c1.addSeries(s1);\n        TimeSeriesCollection c2 = (TimeSeriesCollection) c1.clone();\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n        c2.getSeries(0).setDescription(\"XYZ\");\n        assertTrue(c1.equals(c2));\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"N"}],"commitId":"78934f592e88ac392a78291a732867e497d97a9a","commitMessage":"@@@Fix compiler warnings.","date":"2020-03-21 14:29:39","modifiedFileCount":"6","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-22 15:56:21","codes":[{"authorDate":"2020-03-21 14:29:39","commitOrder":3,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        MatrixSeries s1 = new MatrixSeries(\"Series\", 2, 3);\n        s1.update(0, 0, 1.1);\n        MatrixSeriesCollection c1 = new MatrixSeriesCollection();\n        c1.addSeries(s1);\n        MatrixSeriesCollection c2 = CloneUtils.clone(c1);\n\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }\n","date":"2020-03-21 14:29:39","endLine":95,"groupId":"2413","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/08/17f16892d7e77d9041eeaa68fd4d3ca81a9808.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        MatrixSeries s1 = new MatrixSeries(\"Series\", 2, 3);\n        s1.update(0, 0, 1.1);\n        MatrixSeriesCollection c1 = new MatrixSeriesCollection();\n        c1.addSeries(s1);\n        MatrixSeriesCollection c2 = CloneUtils.clone(c1);\n\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }\n","realPath":"src/test/java/org/jfree/data/xy/MatrixSeriesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"N"},{"authorDate":"2020-03-22 15:56:21","commitOrder":3,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        TimeSeries s1 = new TimeSeries(\"Series\");\n        s1.add(new Year(2009), 1.1);\n        TimeSeriesCollection c1 = new TimeSeriesCollection();\n        c1.addSeries(s1);\n        TimeSeriesCollection c2 = CloneUtils.clone(c1);\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n        c2.getSeries(0).setDescription(\"XYZ\");\n        assertTrue(c1.equals(c2));\n    }\n","date":"2020-03-22 15:56:21","endLine":360,"groupId":"2413","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/4f/4bcdb735126dc17203a4afc197f1e1e1d245db.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        TimeSeries s1 = new TimeSeries(\"Series\");\n        s1.add(new Year(2009), 1.1);\n        TimeSeriesCollection c1 = new TimeSeriesCollection();\n        c1.addSeries(s1);\n        TimeSeriesCollection c2 = (TimeSeriesCollection) c1.clone();\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n        c2.getSeries(0).setDescription(\"XYZ\");\n        assertTrue(c1.equals(c2));\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"M"}],"commitId":"03131749227eb6546e6fe4cbf70e6d18e669ccb0","commitMessage":"@@@Fix compiler warnings.","date":"2020-03-22 15:56:21","modifiedFileCount":"16","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-22 15:56:21","codes":[{"authorDate":"2020-03-22 19:36:23","commitOrder":4,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        MatrixSeries<String> s1 = new MatrixSeries<>(\"Series\", 2, 3);\n        s1.update(0, 0, 1.1);\n        MatrixSeriesCollection<String> c1 = new MatrixSeriesCollection<>();\n        c1.addSeries(s1);\n        MatrixSeriesCollection<String> c2 = CloneUtils.clone(c1);\n\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }\n","date":"2020-03-22 19:36:23","endLine":95,"groupId":"3413","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/86/48d956b0f08b55b9706d3b0e5d674d2176c6a3.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        MatrixSeries s1 = new MatrixSeries(\"Series\", 2, 3);\n        s1.update(0, 0, 1.1);\n        MatrixSeriesCollection c1 = new MatrixSeriesCollection();\n        c1.addSeries(s1);\n        MatrixSeriesCollection c2 = CloneUtils.clone(c1);\n\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }\n","realPath":"src/test/java/org/jfree/data/xy/MatrixSeriesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2020-03-22 15:56:21","commitOrder":4,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        TimeSeries s1 = new TimeSeries(\"Series\");\n        s1.add(new Year(2009), 1.1);\n        TimeSeriesCollection c1 = new TimeSeriesCollection();\n        c1.addSeries(s1);\n        TimeSeriesCollection c2 = CloneUtils.clone(c1);\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n        c2.getSeries(0).setDescription(\"XYZ\");\n        assertTrue(c1.equals(c2));\n    }\n","date":"2020-03-22 15:56:21","endLine":360,"groupId":"2413","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/4f/4bcdb735126dc17203a4afc197f1e1e1d245db.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        TimeSeries s1 = new TimeSeries(\"Series\");\n        s1.add(new Year(2009), 1.1);\n        TimeSeriesCollection c1 = new TimeSeriesCollection();\n        c1.addSeries(s1);\n        TimeSeriesCollection c2 = CloneUtils.clone(c1);\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n        c2.getSeries(0).setDescription(\"XYZ\");\n        assertTrue(c1.equals(c2));\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"N"}],"commitId":"f7ded380c87f815662e1c023e0aa68a1a27496c4","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-22 19:36:23","modifiedFileCount":"45","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-22 23:07:02","codes":[{"authorDate":"2020-03-22 19:36:23","commitOrder":5,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        MatrixSeries<String> s1 = new MatrixSeries<>(\"Series\", 2, 3);\n        s1.update(0, 0, 1.1);\n        MatrixSeriesCollection<String> c1 = new MatrixSeriesCollection<>();\n        c1.addSeries(s1);\n        MatrixSeriesCollection<String> c2 = CloneUtils.clone(c1);\n\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }\n","date":"2020-03-22 19:36:23","endLine":95,"groupId":"10868","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/86/48d956b0f08b55b9706d3b0e5d674d2176c6a3.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        MatrixSeries<String> s1 = new MatrixSeries<>(\"Series\", 2, 3);\n        s1.update(0, 0, 1.1);\n        MatrixSeriesCollection<String> c1 = new MatrixSeriesCollection<>();\n        c1.addSeries(s1);\n        MatrixSeriesCollection<String> c2 = CloneUtils.clone(c1);\n\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n    }\n","realPath":"src/test/java/org/jfree/data/xy/MatrixSeriesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"N"},{"authorDate":"2020-03-22 23:07:02","commitOrder":5,"curCode":"    public void testCloning() throws CloneNotSupportedException {\n        TimeSeries<String> s1 = new TimeSeries<>(\"Series\");\n        s1.add(new Year(2009), 1.1);\n        TimeSeriesCollection<String> c1 = new TimeSeriesCollection<>();\n        c1.addSeries(s1);\n        TimeSeriesCollection<String> c2 = CloneUtils.clone(c1);\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n        c2.getSeries(0).setDescription(\"XYZ\");\n        assertTrue(c1.equals(c2));\n    }\n","date":"2020-03-22 23:07:02","endLine":360,"groupId":"10868","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/bc/13f64ca61b53eb282f5c158754fb1d2e085b67.src","preCode":"    public void testCloning() throws CloneNotSupportedException {\n        TimeSeries s1 = new TimeSeries(\"Series\");\n        s1.add(new Year(2009), 1.1);\n        TimeSeriesCollection c1 = new TimeSeriesCollection();\n        c1.addSeries(s1);\n        TimeSeriesCollection c2 = CloneUtils.clone(c1);\n        assertTrue(c1 != c2);\n        assertTrue(c1.getClass() == c2.getClass());\n        assertTrue(c1.equals(c2));\n\n        \r\n        s1.setDescription(\"XYZ\");\n        assertFalse(c1.equals(c2));\n        c2.getSeries(0).setDescription(\"XYZ\");\n        assertTrue(c1.equals(c2));\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"M"}],"commitId":"65e1b052b3694b30d707b5b7ed88e1f73c68b003","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-22 23:07:02","modifiedFileCount":"5","status":"M","submitter":"David Gilbert"}]
