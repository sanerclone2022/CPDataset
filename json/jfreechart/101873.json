[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    protected List refreshTicksHorizontal(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge) {\n\n        List ticks = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        double previousDrawnTickLabelPos = 0.0;\n        double previousDrawnTickLabelLength = 0.0;\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                double xx = valueToJava2D(currentTickValue, dataArea, edge);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = valueToString(currentTickValue);\n                }\n\n                \r\n                Rectangle2D bounds = TextUtilities.getTextBounds(tickLabel, g2,\n                        g2.getFontMetrics());\n                double tickLabelLength = isVerticalTickLabels()\n                        ? bounds.getHeight() : bounds.getWidth();\n                boolean tickLabelsOverlapping = false;\n                if (i > 0) {\n                    double avgTickLabelLength = (previousDrawnTickLabelLength\n                            + tickLabelLength) / 2.0;\n                    if (Math.abs(xx - previousDrawnTickLabelPos)\n                            < avgTickLabelLength) {\n                        tickLabelsOverlapping = true;\n                    }\n                }\n                if (tickLabelsOverlapping) {\n                    tickLabel = \"\"; \r\n                }\n                else {\n                    \r\n                    previousDrawnTickLabelPos = xx;\n                    previousDrawnTickLabelLength = tickLabelLength;\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.CENTER_RIGHT;\n                    rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    if (edge == RectangleEdge.TOP) {\n                        angle = Math.PI / 2.0;\n                    }\n                    else {\n                        angle = -Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.TOP) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    }\n                    else {\n                        anchor = TextAnchor.TOP_CENTER;\n                        rotationAnchor = TextAnchor.TOP_CENTER;\n                    }\n                }\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                ticks.add(tick);\n            }\n        }\n        return ticks;\n\n    }\n","date":"2016-02-19 16:24:22","endLine":625,"groupId":"4270","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"refreshTicksHorizontal","params":"(Graphics2Dg2@Rectangle2DdataArea@RectangleEdgeedge)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/6f/d95127a1fcf70b67c931e1beceaf427d6461b4.src","preCode":"    protected List refreshTicksHorizontal(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge) {\n\n        List ticks = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        double previousDrawnTickLabelPos = 0.0;\n        double previousDrawnTickLabelLength = 0.0;\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                double xx = valueToJava2D(currentTickValue, dataArea, edge);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = valueToString(currentTickValue);\n                }\n\n                \r\n                Rectangle2D bounds = TextUtilities.getTextBounds(tickLabel, g2,\n                        g2.getFontMetrics());\n                double tickLabelLength = isVerticalTickLabels()\n                        ? bounds.getHeight() : bounds.getWidth();\n                boolean tickLabelsOverlapping = false;\n                if (i > 0) {\n                    double avgTickLabelLength = (previousDrawnTickLabelLength\n                            + tickLabelLength) / 2.0;\n                    if (Math.abs(xx - previousDrawnTickLabelPos)\n                            < avgTickLabelLength) {\n                        tickLabelsOverlapping = true;\n                    }\n                }\n                if (tickLabelsOverlapping) {\n                    tickLabel = \"\"; \r\n                }\n                else {\n                    \r\n                    previousDrawnTickLabelPos = xx;\n                    previousDrawnTickLabelLength = tickLabelLength;\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.CENTER_RIGHT;\n                    rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    if (edge == RectangleEdge.TOP) {\n                        angle = Math.PI / 2.0;\n                    }\n                    else {\n                        angle = -Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.TOP) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    }\n                    else {\n                        anchor = TextAnchor.TOP_CENTER;\n                        rotationAnchor = TextAnchor.TOP_CENTER;\n                    }\n                }\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                ticks.add(tick);\n            }\n        }\n        return ticks;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/SymbolAxis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":544,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    protected List refreshTicksVertical(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge) {\n\n        List ticks = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        double previousDrawnTickLabelPos = 0.0;\n        double previousDrawnTickLabelLength = 0.0;\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                double yy = valueToJava2D(currentTickValue, dataArea, edge);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = valueToString(currentTickValue);\n                }\n\n                \r\n                Rectangle2D bounds = TextUtilities.getTextBounds(tickLabel, g2,\n                        g2.getFontMetrics());\n                double tickLabelLength = isVerticalTickLabels()\n                    ? bounds.getWidth() : bounds.getHeight();\n                boolean tickLabelsOverlapping = false;\n                if (i > 0) {\n                    double avgTickLabelLength = (previousDrawnTickLabelLength\n                            + tickLabelLength) / 2.0;\n                    if (Math.abs(yy - previousDrawnTickLabelPos)\n                            < avgTickLabelLength) {\n                        tickLabelsOverlapping = true;\n                    }\n                }\n                if (tickLabelsOverlapping) {\n                    tickLabel = \"\"; \r\n                }\n                else {\n                    \r\n                    previousDrawnTickLabelPos = yy;\n                    previousDrawnTickLabelLength = tickLabelLength;\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.BOTTOM_CENTER;\n                    rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    if (edge == RectangleEdge.LEFT) {\n                        angle = -Math.PI / 2.0;\n                    }\n                    else {\n                        angle = Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.CENTER_RIGHT;\n                        rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    }\n                    else {\n                        anchor = TextAnchor.CENTER_LEFT;\n                        rotationAnchor = TextAnchor.CENTER_LEFT;\n                    }\n                }\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                ticks.add(tick);\n            }\n        }\n        return ticks;\n\n    }\n","date":"2016-02-19 16:24:22","endLine":719,"groupId":"2592","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"refreshTicksVertical","params":"(Graphics2Dg2@Rectangle2DdataArea@RectangleEdgeedge)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/6f/d95127a1fcf70b67c931e1beceaf427d6461b4.src","preCode":"    protected List refreshTicksVertical(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge) {\n\n        List ticks = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        double previousDrawnTickLabelPos = 0.0;\n        double previousDrawnTickLabelLength = 0.0;\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                double yy = valueToJava2D(currentTickValue, dataArea, edge);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = valueToString(currentTickValue);\n                }\n\n                \r\n                Rectangle2D bounds = TextUtilities.getTextBounds(tickLabel, g2,\n                        g2.getFontMetrics());\n                double tickLabelLength = isVerticalTickLabels()\n                    ? bounds.getWidth() : bounds.getHeight();\n                boolean tickLabelsOverlapping = false;\n                if (i > 0) {\n                    double avgTickLabelLength = (previousDrawnTickLabelLength\n                            + tickLabelLength) / 2.0;\n                    if (Math.abs(yy - previousDrawnTickLabelPos)\n                            < avgTickLabelLength) {\n                        tickLabelsOverlapping = true;\n                    }\n                }\n                if (tickLabelsOverlapping) {\n                    tickLabel = \"\"; \r\n                }\n                else {\n                    \r\n                    previousDrawnTickLabelPos = yy;\n                    previousDrawnTickLabelLength = tickLabelLength;\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.BOTTOM_CENTER;\n                    rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    if (edge == RectangleEdge.LEFT) {\n                        angle = -Math.PI / 2.0;\n                    }\n                    else {\n                        angle = Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.CENTER_RIGHT;\n                        rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    }\n                    else {\n                        anchor = TextAnchor.CENTER_LEFT;\n                        rotationAnchor = TextAnchor.CENTER_LEFT;\n                    }\n                }\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                ticks.add(tick);\n            }\n        }\n        return ticks;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/SymbolAxis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":638,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2017-05-06 13:04:03","codes":[{"authorDate":"2017-05-06 13:04:03","commitOrder":2,"curCode":"    protected List refreshTicksHorizontal(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge) {\n\n        List ticks = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        double previousDrawnTickLabelPos = 0.0;\n        double previousDrawnTickLabelLength = 0.0;\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                double xx = valueToJava2D(currentTickValue, dataArea, edge);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = valueToString(currentTickValue);\n                }\n\n                \r\n                Rectangle2D bounds = TextUtils.getTextBounds(tickLabel, g2,\n                        g2.getFontMetrics());\n                double tickLabelLength = isVerticalTickLabels()\n                        ? bounds.getHeight() : bounds.getWidth();\n                boolean tickLabelsOverlapping = false;\n                if (i > 0) {\n                    double avgTickLabelLength = (previousDrawnTickLabelLength\n                            + tickLabelLength) / 2.0;\n                    if (Math.abs(xx - previousDrawnTickLabelPos)\n                            < avgTickLabelLength) {\n                        tickLabelsOverlapping = true;\n                    }\n                }\n                if (tickLabelsOverlapping) {\n                    tickLabel = \"\"; \r\n                }\n                else {\n                    \r\n                    previousDrawnTickLabelPos = xx;\n                    previousDrawnTickLabelLength = tickLabelLength;\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.CENTER_RIGHT;\n                    rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    if (edge == RectangleEdge.TOP) {\n                        angle = Math.PI / 2.0;\n                    }\n                    else {\n                        angle = -Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.TOP) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    }\n                    else {\n                        anchor = TextAnchor.TOP_CENTER;\n                        rotationAnchor = TextAnchor.TOP_CENTER;\n                    }\n                }\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                ticks.add(tick);\n            }\n        }\n        return ticks;\n\n    }\n","date":"2017-05-06 13:04:03","endLine":624,"groupId":"3833","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"refreshTicksHorizontal","params":"(Graphics2Dg2@Rectangle2DdataArea@RectangleEdgeedge)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/75/6bebbf01fb097f6e01116a0c7110cecfc28b19.src","preCode":"    protected List refreshTicksHorizontal(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge) {\n\n        List ticks = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        double previousDrawnTickLabelPos = 0.0;\n        double previousDrawnTickLabelLength = 0.0;\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                double xx = valueToJava2D(currentTickValue, dataArea, edge);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = valueToString(currentTickValue);\n                }\n\n                \r\n                Rectangle2D bounds = TextUtilities.getTextBounds(tickLabel, g2,\n                        g2.getFontMetrics());\n                double tickLabelLength = isVerticalTickLabels()\n                        ? bounds.getHeight() : bounds.getWidth();\n                boolean tickLabelsOverlapping = false;\n                if (i > 0) {\n                    double avgTickLabelLength = (previousDrawnTickLabelLength\n                            + tickLabelLength) / 2.0;\n                    if (Math.abs(xx - previousDrawnTickLabelPos)\n                            < avgTickLabelLength) {\n                        tickLabelsOverlapping = true;\n                    }\n                }\n                if (tickLabelsOverlapping) {\n                    tickLabel = \"\"; \r\n                }\n                else {\n                    \r\n                    previousDrawnTickLabelPos = xx;\n                    previousDrawnTickLabelLength = tickLabelLength;\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.CENTER_RIGHT;\n                    rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    if (edge == RectangleEdge.TOP) {\n                        angle = Math.PI / 2.0;\n                    }\n                    else {\n                        angle = -Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.TOP) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    }\n                    else {\n                        anchor = TextAnchor.TOP_CENTER;\n                        rotationAnchor = TextAnchor.TOP_CENTER;\n                    }\n                }\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                ticks.add(tick);\n            }\n        }\n        return ticks;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/SymbolAxis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":543,"status":"M"},{"authorDate":"2017-05-06 13:04:03","commitOrder":2,"curCode":"    protected List refreshTicksVertical(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge) {\n\n        List ticks = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        double previousDrawnTickLabelPos = 0.0;\n        double previousDrawnTickLabelLength = 0.0;\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                double yy = valueToJava2D(currentTickValue, dataArea, edge);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = valueToString(currentTickValue);\n                }\n\n                \r\n                Rectangle2D bounds = TextUtils.getTextBounds(tickLabel, g2,\n                        g2.getFontMetrics());\n                double tickLabelLength = isVerticalTickLabels()\n                    ? bounds.getWidth() : bounds.getHeight();\n                boolean tickLabelsOverlapping = false;\n                if (i > 0) {\n                    double avgTickLabelLength = (previousDrawnTickLabelLength\n                            + tickLabelLength) / 2.0;\n                    if (Math.abs(yy - previousDrawnTickLabelPos)\n                            < avgTickLabelLength) {\n                        tickLabelsOverlapping = true;\n                    }\n                }\n                if (tickLabelsOverlapping) {\n                    tickLabel = \"\"; \r\n                }\n                else {\n                    \r\n                    previousDrawnTickLabelPos = yy;\n                    previousDrawnTickLabelLength = tickLabelLength;\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.BOTTOM_CENTER;\n                    rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    if (edge == RectangleEdge.LEFT) {\n                        angle = -Math.PI / 2.0;\n                    }\n                    else {\n                        angle = Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.CENTER_RIGHT;\n                        rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    }\n                    else {\n                        anchor = TextAnchor.CENTER_LEFT;\n                        rotationAnchor = TextAnchor.CENTER_LEFT;\n                    }\n                }\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                ticks.add(tick);\n            }\n        }\n        return ticks;\n\n    }\n","date":"2017-05-06 13:04:03","endLine":718,"groupId":"3191","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"refreshTicksVertical","params":"(Graphics2Dg2@Rectangle2DdataArea@RectangleEdgeedge)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/75/6bebbf01fb097f6e01116a0c7110cecfc28b19.src","preCode":"    protected List refreshTicksVertical(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge) {\n\n        List ticks = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        double previousDrawnTickLabelPos = 0.0;\n        double previousDrawnTickLabelLength = 0.0;\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                double yy = valueToJava2D(currentTickValue, dataArea, edge);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = valueToString(currentTickValue);\n                }\n\n                \r\n                Rectangle2D bounds = TextUtilities.getTextBounds(tickLabel, g2,\n                        g2.getFontMetrics());\n                double tickLabelLength = isVerticalTickLabels()\n                    ? bounds.getWidth() : bounds.getHeight();\n                boolean tickLabelsOverlapping = false;\n                if (i > 0) {\n                    double avgTickLabelLength = (previousDrawnTickLabelLength\n                            + tickLabelLength) / 2.0;\n                    if (Math.abs(yy - previousDrawnTickLabelPos)\n                            < avgTickLabelLength) {\n                        tickLabelsOverlapping = true;\n                    }\n                }\n                if (tickLabelsOverlapping) {\n                    tickLabel = \"\"; \r\n                }\n                else {\n                    \r\n                    previousDrawnTickLabelPos = yy;\n                    previousDrawnTickLabelLength = tickLabelLength;\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.BOTTOM_CENTER;\n                    rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    if (edge == RectangleEdge.LEFT) {\n                        angle = -Math.PI / 2.0;\n                    }\n                    else {\n                        angle = Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.CENTER_RIGHT;\n                        rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    }\n                    else {\n                        anchor = TextAnchor.CENTER_LEFT;\n                        rotationAnchor = TextAnchor.CENTER_LEFT;\n                    }\n                }\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                ticks.add(tick);\n            }\n        }\n        return ticks;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/SymbolAxis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":637,"status":"M"}],"commitId":"ea1b09dba6931ba20e0ce2e1e8e528793a7fbae3","commitMessage":"@@@Rename TextUtilities -> TextUtils.","date":"2017-05-06 13:04:03","modifiedFileCount":"32","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-16 00:09:59","codes":[{"authorDate":"2020-03-16 00:09:59","commitOrder":3,"curCode":"    protected List refreshTicksHorizontal(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge) {\n\n        List ticks = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        double previousDrawnTickLabelPos = 0.0;\n        double previousDrawnTickLabelLength = 0.0;\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                double xx = valueToJava2D(currentTickValue, dataArea, edge);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = valueToString(currentTickValue);\n                }\n\n                \r\n                Rectangle2D bounds = TextUtils.getTextBounds(tickLabel, g2,\n                        g2.getFontMetrics());\n                double tickLabelLength = isVerticalTickLabels()\n                        ? bounds.getHeight() : bounds.getWidth();\n                boolean tickLabelsOverlapping = false;\n                if (i > 0) {\n                    double avgTickLabelLength = (previousDrawnTickLabelLength\n                            + tickLabelLength) / 2.0;\n                    if (Math.abs(xx - previousDrawnTickLabelPos)\n                            < avgTickLabelLength) {\n                        tickLabelsOverlapping = true;\n                    }\n                }\n                if (tickLabelsOverlapping) {\n                    tickLabel = \"\"; \r\n                }\n                else {\n                    \r\n                    previousDrawnTickLabelPos = xx;\n                    previousDrawnTickLabelLength = tickLabelLength;\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.CENTER_RIGHT;\n                    rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    if (edge == RectangleEdge.TOP) {\n                        angle = Math.PI / 2.0;\n                    }\n                    else {\n                        angle = -Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.TOP) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    }\n                    else {\n                        anchor = TextAnchor.TOP_CENTER;\n                        rotationAnchor = TextAnchor.TOP_CENTER;\n                    }\n                }\n                Tick tick = new NumberTick(currentTickValue, tickLabel, anchor, \n                        rotationAnchor, angle);\n                ticks.add(tick);\n            }\n        }\n        return ticks;\n\n    }\n","date":"2020-03-16 00:09:59","endLine":577,"groupId":"101873","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"refreshTicksHorizontal","params":"(Graphics2Dg2@Rectangle2DdataArea@RectangleEdgeedge)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/73/805e783cfd480394f9aa6a182ccc940a509fbf.src","preCode":"    protected List refreshTicksHorizontal(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge) {\n\n        List ticks = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        double previousDrawnTickLabelPos = 0.0;\n        double previousDrawnTickLabelLength = 0.0;\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                double xx = valueToJava2D(currentTickValue, dataArea, edge);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = valueToString(currentTickValue);\n                }\n\n                \r\n                Rectangle2D bounds = TextUtils.getTextBounds(tickLabel, g2,\n                        g2.getFontMetrics());\n                double tickLabelLength = isVerticalTickLabels()\n                        ? bounds.getHeight() : bounds.getWidth();\n                boolean tickLabelsOverlapping = false;\n                if (i > 0) {\n                    double avgTickLabelLength = (previousDrawnTickLabelLength\n                            + tickLabelLength) / 2.0;\n                    if (Math.abs(xx - previousDrawnTickLabelPos)\n                            < avgTickLabelLength) {\n                        tickLabelsOverlapping = true;\n                    }\n                }\n                if (tickLabelsOverlapping) {\n                    tickLabel = \"\"; \r\n                }\n                else {\n                    \r\n                    previousDrawnTickLabelPos = xx;\n                    previousDrawnTickLabelLength = tickLabelLength;\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.CENTER_RIGHT;\n                    rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    if (edge == RectangleEdge.TOP) {\n                        angle = Math.PI / 2.0;\n                    }\n                    else {\n                        angle = -Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.TOP) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    }\n                    else {\n                        anchor = TextAnchor.TOP_CENTER;\n                        rotationAnchor = TextAnchor.TOP_CENTER;\n                    }\n                }\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                ticks.add(tick);\n            }\n        }\n        return ticks;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/SymbolAxis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":496,"status":"M"},{"authorDate":"2020-03-16 00:09:59","commitOrder":3,"curCode":"    protected List refreshTicksVertical(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge) {\n\n        List ticks = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        double previousDrawnTickLabelPos = 0.0;\n        double previousDrawnTickLabelLength = 0.0;\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                double yy = valueToJava2D(currentTickValue, dataArea, edge);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = valueToString(currentTickValue);\n                }\n\n                \r\n                Rectangle2D bounds = TextUtils.getTextBounds(tickLabel, g2,\n                        g2.getFontMetrics());\n                double tickLabelLength = isVerticalTickLabels()\n                    ? bounds.getWidth() : bounds.getHeight();\n                boolean tickLabelsOverlapping = false;\n                if (i > 0) {\n                    double avgTickLabelLength = (previousDrawnTickLabelLength\n                            + tickLabelLength) / 2.0;\n                    if (Math.abs(yy - previousDrawnTickLabelPos)\n                            < avgTickLabelLength) {\n                        tickLabelsOverlapping = true;\n                    }\n                }\n                if (tickLabelsOverlapping) {\n                    tickLabel = \"\"; \r\n                }\n                else {\n                    \r\n                    previousDrawnTickLabelPos = yy;\n                    previousDrawnTickLabelLength = tickLabelLength;\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.BOTTOM_CENTER;\n                    rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    if (edge == RectangleEdge.LEFT) {\n                        angle = -Math.PI / 2.0;\n                    }\n                    else {\n                        angle = Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.CENTER_RIGHT;\n                        rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    }\n                    else {\n                        anchor = TextAnchor.CENTER_LEFT;\n                        rotationAnchor = TextAnchor.CENTER_LEFT;\n                    }\n                }\n                Tick tick = new NumberTick(currentTickValue, tickLabel, anchor, \n                        rotationAnchor, angle);\n                ticks.add(tick);\n            }\n        }\n        return ticks;\n\n    }\n","date":"2020-03-16 00:09:59","endLine":671,"groupId":"101873","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"refreshTicksVertical","params":"(Graphics2Dg2@Rectangle2DdataArea@RectangleEdgeedge)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/73/805e783cfd480394f9aa6a182ccc940a509fbf.src","preCode":"    protected List refreshTicksVertical(Graphics2D g2, Rectangle2D dataArea,\n            RectangleEdge edge) {\n\n        List ticks = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        double previousDrawnTickLabelPos = 0.0;\n        double previousDrawnTickLabelLength = 0.0;\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                double yy = valueToJava2D(currentTickValue, dataArea, edge);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = valueToString(currentTickValue);\n                }\n\n                \r\n                Rectangle2D bounds = TextUtils.getTextBounds(tickLabel, g2,\n                        g2.getFontMetrics());\n                double tickLabelLength = isVerticalTickLabels()\n                    ? bounds.getWidth() : bounds.getHeight();\n                boolean tickLabelsOverlapping = false;\n                if (i > 0) {\n                    double avgTickLabelLength = (previousDrawnTickLabelLength\n                            + tickLabelLength) / 2.0;\n                    if (Math.abs(yy - previousDrawnTickLabelPos)\n                            < avgTickLabelLength) {\n                        tickLabelsOverlapping = true;\n                    }\n                }\n                if (tickLabelsOverlapping) {\n                    tickLabel = \"\"; \r\n                }\n                else {\n                    \r\n                    previousDrawnTickLabelPos = yy;\n                    previousDrawnTickLabelLength = tickLabelLength;\n                }\n\n                TextAnchor anchor;\n                TextAnchor rotationAnchor;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.BOTTOM_CENTER;\n                    rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    if (edge == RectangleEdge.LEFT) {\n                        angle = -Math.PI / 2.0;\n                    }\n                    else {\n                        angle = Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.CENTER_RIGHT;\n                        rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    }\n                    else {\n                        anchor = TextAnchor.CENTER_LEFT;\n                        rotationAnchor = TextAnchor.CENTER_LEFT;\n                    }\n                }\n                Tick tick = new NumberTick(new Double(currentTickValue),\n                        tickLabel, anchor, rotationAnchor, angle);\n                ticks.add(tick);\n            }\n        }\n        return ticks;\n\n    }\n","realPath":"src/main/java/org/jfree/chart/axis/SymbolAxis.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":590,"status":"M"}],"commitId":"d4df77cb15186a303747e89ab8eb4d23c78aa86a","commitMessage":"@@@Fix NetBeans warnings.","date":"2020-03-16 00:09:59","modifiedFileCount":"20","status":"M","submitter":"David Gilbert"}]
