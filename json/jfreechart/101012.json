[{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testGetSeries() {\n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n        d1.addSeries(s1);\n        assertEquals(\"Series 1\", d1.getSeries(0).getKey());\n\n        boolean pass = false;\n        try {\n            d1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            d1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2016-02-19 15:40:32","endLine":205,"groupId":"593","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetSeries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/f7/e224635faafc56693faec79251d94131f6ae21.src","preCode":"    public void testGetSeries() {\n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n        d1.addSeries(s1);\n        assertEquals(\"Series 1\", d1.getSeries(0).getKey());\n\n        boolean pass = false;\n        try {\n            d1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            d1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/xy/DefaultTableXYDatasetTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"B"},{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testGetSeries() {\n        TimePeriodValuesCollection c1 = new TimePeriodValuesCollection();\n        TimePeriodValues s1 = new TimePeriodValues(\"Series 1\");\n        c1.addSeries(s1);\n        assertEquals(\"Series 1\", c1.getSeries(0).getKey());\n        \n        boolean pass = false;\n        try {\n            c1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            c1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2016-02-19 15:40:32","endLine":152,"groupId":"1499","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetSeries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/9c/b5b2dcb35b96af57ef2bc5d6c42621f3db7b97.src","preCode":"    public void testGetSeries() {\n        TimePeriodValuesCollection c1 = new TimePeriodValuesCollection();\n        TimePeriodValues s1 = new TimePeriodValues(\"Series 1\");\n        c1.addSeries(s1);\n        assertEquals(\"Series 1\", c1.getSeries(0).getKey());\n        \n        boolean pass = false;\n        try {\n            c1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            c1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimePeriodValuesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"}],"commitId":"1b18adfb8102c34c9287ece406b9dde5751b90b5","commitMessage":"@@@Move test files to standard Maven location.","date":"2016-02-19 15:40:32","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2020-03-22 19:36:23","commitOrder":2,"curCode":"    public void testGetSeries() {\n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        XYSeries<String> s1 = new XYSeries<>(\"Series 1\", true, false);\n        d1.addSeries(s1);\n        assertEquals(\"Series 1\", d1.getSeries(0).getKey());\n\n        boolean pass = false;\n        try {\n            d1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            d1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2020-03-22 19:36:23","endLine":198,"groupId":"593","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetSeries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/7a/0cdb80b22a47a4370579e3be647a90412f7d48.src","preCode":"    public void testGetSeries() {\n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        XYSeries s1 = new XYSeries(\"Series 1\", true, false);\n        d1.addSeries(s1);\n        assertEquals(\"Series 1\", d1.getSeries(0).getKey());\n\n        boolean pass = false;\n        try {\n            d1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            d1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/xy/DefaultTableXYDatasetTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2016-02-19 15:40:32","commitOrder":2,"curCode":"    public void testGetSeries() {\n        TimePeriodValuesCollection c1 = new TimePeriodValuesCollection();\n        TimePeriodValues s1 = new TimePeriodValues(\"Series 1\");\n        c1.addSeries(s1);\n        assertEquals(\"Series 1\", c1.getSeries(0).getKey());\n        \n        boolean pass = false;\n        try {\n            c1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            c1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2016-02-19 15:40:32","endLine":152,"groupId":"1499","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetSeries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/9c/b5b2dcb35b96af57ef2bc5d6c42621f3db7b97.src","preCode":"    public void testGetSeries() {\n        TimePeriodValuesCollection c1 = new TimePeriodValuesCollection();\n        TimePeriodValues s1 = new TimePeriodValues(\"Series 1\");\n        c1.addSeries(s1);\n        assertEquals(\"Series 1\", c1.getSeries(0).getKey());\n        \n        boolean pass = false;\n        try {\n            c1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            c1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimePeriodValuesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"}],"commitId":"f7ded380c87f815662e1c023e0aa68a1a27496c4","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-22 19:36:23","modifiedFileCount":"45","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-23 02:27:15","codes":[{"authorDate":"2020-03-22 19:36:23","commitOrder":3,"curCode":"    public void testGetSeries() {\n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        XYSeries<String> s1 = new XYSeries<>(\"Series 1\", true, false);\n        d1.addSeries(s1);\n        assertEquals(\"Series 1\", d1.getSeries(0).getKey());\n\n        boolean pass = false;\n        try {\n            d1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            d1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2020-03-22 19:36:23","endLine":198,"groupId":"593","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetSeries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/7a/0cdb80b22a47a4370579e3be647a90412f7d48.src","preCode":"    public void testGetSeries() {\n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        XYSeries<String> s1 = new XYSeries<>(\"Series 1\", true, false);\n        d1.addSeries(s1);\n        assertEquals(\"Series 1\", d1.getSeries(0).getKey());\n\n        boolean pass = false;\n        try {\n            d1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            d1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/xy/DefaultTableXYDatasetTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"N"},{"authorDate":"2020-03-23 02:27:15","commitOrder":3,"curCode":"    public void testGetSeries() {\n        TimePeriodValuesCollection c1 = new TimePeriodValuesCollection();\n        TimePeriodValues<String> s1 = new TimePeriodValues<>(\"Series 1\");\n        c1.addSeries(s1);\n        assertEquals(\"Series 1\", c1.getSeries(0).getKey());\n        \n        boolean pass = false;\n        try {\n            c1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            c1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2020-03-23 02:27:15","endLine":137,"groupId":"1499","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetSeries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/e2/ef135ece5d23f221cf96d80e2250954fee1bb0.src","preCode":"    public void testGetSeries() {\n        TimePeriodValuesCollection c1 = new TimePeriodValuesCollection();\n        TimePeriodValues s1 = new TimePeriodValues(\"Series 1\");\n        c1.addSeries(s1);\n        assertEquals(\"Series 1\", c1.getSeries(0).getKey());\n        \n        boolean pass = false;\n        try {\n            c1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            c1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimePeriodValuesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"a203a3eded68ef89d52b8f746cd203922bc602a0","commitMessage":"@@@Fix compiler warnings.","date":"2020-03-23 02:27:15","modifiedFileCount":"7","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-23 02:27:15","codes":[{"authorDate":"2020-03-24 19:47:03","commitOrder":4,"curCode":"    public void testGetSeries() {\n        DefaultTableXYDataset<String> d1 = new DefaultTableXYDataset<>();\n        XYSeries<String> s1 = new XYSeries<>(\"Series 1\", true, false);\n        d1.addSeries(s1);\n        assertEquals(\"Series 1\", d1.getSeries(0).getKey());\n\n        boolean pass = false;\n        try {\n            d1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            d1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2020-03-24 19:47:03","endLine":198,"groupId":"101012","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetSeries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/91/aaf803bfd5c3a9f1811464ad05458bd62d1ce8.src","preCode":"    public void testGetSeries() {\n        DefaultTableXYDataset d1 = new DefaultTableXYDataset();\n        XYSeries<String> s1 = new XYSeries<>(\"Series 1\", true, false);\n        d1.addSeries(s1);\n        assertEquals(\"Series 1\", d1.getSeries(0).getKey());\n\n        boolean pass = false;\n        try {\n            d1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            d1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/xy/DefaultTableXYDatasetTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2020-03-23 02:27:15","commitOrder":4,"curCode":"    public void testGetSeries() {\n        TimePeriodValuesCollection c1 = new TimePeriodValuesCollection();\n        TimePeriodValues<String> s1 = new TimePeriodValues<>(\"Series 1\");\n        c1.addSeries(s1);\n        assertEquals(\"Series 1\", c1.getSeries(0).getKey());\n        \n        boolean pass = false;\n        try {\n            c1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            c1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2020-03-23 02:27:15","endLine":137,"groupId":"101012","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetSeries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/e2/ef135ece5d23f221cf96d80e2250954fee1bb0.src","preCode":"    public void testGetSeries() {\n        TimePeriodValuesCollection c1 = new TimePeriodValuesCollection();\n        TimePeriodValues<String> s1 = new TimePeriodValues<>(\"Series 1\");\n        c1.addSeries(s1);\n        assertEquals(\"Series 1\", c1.getSeries(0).getKey());\n        \n        boolean pass = false;\n        try {\n            c1.getSeries(-1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            c1.getSeries(1);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimePeriodValuesCollectionTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"N"}],"commitId":"768ee10eb77abd31a62f6f26d6e0153c05a415c9","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-24 19:47:03","modifiedFileCount":"23","status":"M","submitter":"David Gilbert"}]
