[{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testEquals() {\n        LevelRenderer r1 = new LevelRenderer();\n        LevelRenderer r2 = new LevelRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        r1.setItemMargin(0.123);\n        assertFalse(r1.equals(r2));\n        r2.setItemMargin(0.123);\n        assertTrue(r1.equals(r2));\n\n        r1.setMaximumItemWidth(0.234);\n        assertFalse(r1.equals(r2));\n        r2.setMaximumItemWidth(0.234);\n        assertTrue(r1.equals(r2));\n\n    }\n","date":"2016-02-19 15:40:32","endLine":84,"groupId":"1675","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/e0/184b801ba88289cd3659c475e1af063a1fad3b.src","preCode":"    public void testEquals() {\n        LevelRenderer r1 = new LevelRenderer();\n        LevelRenderer r2 = new LevelRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        r1.setItemMargin(0.123);\n        assertFalse(r1.equals(r2));\n        r2.setItemMargin(0.123);\n        assertTrue(r1.equals(r2));\n\n        r1.setMaximumItemWidth(0.234);\n        assertFalse(r1.equals(r2));\n        r2.setMaximumItemWidth(0.234);\n        assertTrue(r1.equals(r2));\n\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/category/LevelRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"},{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testEquals() {\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setBase(0.123);\n        assertFalse(r1.equals(r2));\n        r2.setBase(0.123);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemMargin(0.22);\n        assertFalse(r1.equals(r2));\n        r2.setItemMargin(0.22);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDrawBarOutline(!r1.isDrawBarOutline());\n        assertFalse(r1.equals(r2));\n        r2.setDrawBarOutline(!r2.isDrawBarOutline());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setMaximumBarWidth(0.11);\n        assertFalse(r1.equals(r2));\n        r2.setMaximumBarWidth(0.11);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setMinimumBarLength(0.04);\n        assertFalse(r1.equals(r2));\n        r2.setMinimumBarLength(0.04);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        assertFalse(r1.equals(r2));\n        r2.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPositiveItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertFalse(r1.equals(r2));\n        r2.setPositiveItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setNegativeItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertFalse(r1.equals(r2));\n        r2.setNegativeItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBarPainter(new GradientBarPainter(0.1, 0.2, 0.3));\n        assertFalse(r1.equals(r2));\n        r2.setBarPainter(new GradientBarPainter(0.1, 0.2, 0.3));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShadowVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setShadowVisible(false);\n        assertTrue(r1.equals(r2));\n\n        r1.setShadowPaint(Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setShadowPaint(Color.red);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShadowXOffset(3.3);\n        assertFalse(r1.equals(r2));\n        r2.setShadowXOffset(3.3);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShadowYOffset(3.3);\n        assertFalse(r1.equals(r2));\n        r2.setShadowYOffset(3.3);\n        assertTrue(r1.equals(r2));\n\n    }\n","date":"2016-02-19 15:40:32","endLine":175,"groupId":"28","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/be/1053c4c2febd8185545b84d77f1ccdd2f97d85.src","preCode":"    public void testEquals() {\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setBase(0.123);\n        assertFalse(r1.equals(r2));\n        r2.setBase(0.123);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemMargin(0.22);\n        assertFalse(r1.equals(r2));\n        r2.setItemMargin(0.22);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDrawBarOutline(!r1.isDrawBarOutline());\n        assertFalse(r1.equals(r2));\n        r2.setDrawBarOutline(!r2.isDrawBarOutline());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setMaximumBarWidth(0.11);\n        assertFalse(r1.equals(r2));\n        r2.setMaximumBarWidth(0.11);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setMinimumBarLength(0.04);\n        assertFalse(r1.equals(r2));\n        r2.setMinimumBarLength(0.04);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        assertFalse(r1.equals(r2));\n        r2.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPositiveItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertFalse(r1.equals(r2));\n        r2.setPositiveItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setNegativeItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertFalse(r1.equals(r2));\n        r2.setNegativeItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBarPainter(new GradientBarPainter(0.1, 0.2, 0.3));\n        assertFalse(r1.equals(r2));\n        r2.setBarPainter(new GradientBarPainter(0.1, 0.2, 0.3));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShadowVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setShadowVisible(false);\n        assertTrue(r1.equals(r2));\n\n        r1.setShadowPaint(Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setShadowPaint(Color.red);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShadowXOffset(3.3);\n        assertFalse(r1.equals(r2));\n        r2.setShadowXOffset(3.3);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShadowYOffset(3.3);\n        assertFalse(r1.equals(r2));\n        r2.setShadowYOffset(3.3);\n        assertTrue(r1.equals(r2));\n\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/category/BarRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"1b18adfb8102c34c9287ece406b9dde5751b90b5","commitMessage":"@@@Move test files to standard Maven location.","date":"2016-02-19 15:40:32","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2017-05-06 13:49:04","codes":[{"authorDate":"2016-02-19 15:40:32","commitOrder":2,"curCode":"    public void testEquals() {\n        LevelRenderer r1 = new LevelRenderer();\n        LevelRenderer r2 = new LevelRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        r1.setItemMargin(0.123);\n        assertFalse(r1.equals(r2));\n        r2.setItemMargin(0.123);\n        assertTrue(r1.equals(r2));\n\n        r1.setMaximumItemWidth(0.234);\n        assertFalse(r1.equals(r2));\n        r2.setMaximumItemWidth(0.234);\n        assertTrue(r1.equals(r2));\n\n    }\n","date":"2016-02-19 15:40:32","endLine":84,"groupId":"10382","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/e0/184b801ba88289cd3659c475e1af063a1fad3b.src","preCode":"    public void testEquals() {\n        LevelRenderer r1 = new LevelRenderer();\n        LevelRenderer r2 = new LevelRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        r1.setItemMargin(0.123);\n        assertFalse(r1.equals(r2));\n        r2.setItemMargin(0.123);\n        assertTrue(r1.equals(r2));\n\n        r1.setMaximumItemWidth(0.234);\n        assertFalse(r1.equals(r2));\n        r2.setMaximumItemWidth(0.234);\n        assertTrue(r1.equals(r2));\n\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/category/LevelRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2017-05-06 13:49:04","commitOrder":2,"curCode":"    public void testEquals() {\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setBase(0.123);\n        assertFalse(r1.equals(r2));\n        r2.setBase(0.123);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemMargin(0.22);\n        assertFalse(r1.equals(r2));\n        r2.setItemMargin(0.22);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDrawBarOutline(!r1.isDrawBarOutline());\n        assertFalse(r1.equals(r2));\n        r2.setDrawBarOutline(!r2.isDrawBarOutline());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setMaximumBarWidth(0.11);\n        assertFalse(r1.equals(r2));\n        r2.setMaximumBarWidth(0.11);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setMinimumBarLength(0.04);\n        assertFalse(r1.equals(r2));\n        r2.setMinimumBarLength(0.04);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        assertFalse(r1.equals(r2));\n        r2.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPositiveItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertFalse(r1.equals(r2));\n        r2.setPositiveItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setNegativeItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertFalse(r1.equals(r2));\n        r2.setNegativeItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBarPainter(new GradientBarPainter(0.1, 0.2, 0.3));\n        assertFalse(r1.equals(r2));\n        r2.setBarPainter(new GradientBarPainter(0.1, 0.2, 0.3));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShadowVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setShadowVisible(false);\n        assertTrue(r1.equals(r2));\n\n        r1.setShadowPaint(Color.RED);\n        assertFalse(r1.equals(r2));\n        r2.setShadowPaint(Color.RED);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShadowXOffset(3.3);\n        assertFalse(r1.equals(r2));\n        r2.setShadowXOffset(3.3);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShadowYOffset(3.3);\n        assertFalse(r1.equals(r2));\n        r2.setShadowYOffset(3.3);\n        assertTrue(r1.equals(r2));\n\n    }\n","date":"2017-05-06 13:49:04","endLine":175,"groupId":"10382","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/0d/23a00d0b1ebe7de686e7c5c4a7164531f2fded.src","preCode":"    public void testEquals() {\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n\n        \r\n        r1.setBase(0.123);\n        assertFalse(r1.equals(r2));\n        r2.setBase(0.123);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setItemMargin(0.22);\n        assertFalse(r1.equals(r2));\n        r2.setItemMargin(0.22);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setDrawBarOutline(!r1.isDrawBarOutline());\n        assertFalse(r1.equals(r2));\n        r2.setDrawBarOutline(!r2.isDrawBarOutline());\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setMaximumBarWidth(0.11);\n        assertFalse(r1.equals(r2));\n        r2.setMaximumBarWidth(0.11);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setMinimumBarLength(0.04);\n        assertFalse(r1.equals(r2));\n        r2.setMinimumBarLength(0.04);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        assertFalse(r1.equals(r2));\n        r2.setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setPositiveItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertFalse(r1.equals(r2));\n        r2.setPositiveItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setNegativeItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertFalse(r1.equals(r2));\n        r2.setNegativeItemLabelPositionFallback(new ItemLabelPosition(\n                ItemLabelAnchor.INSIDE1, TextAnchor.CENTER));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setBarPainter(new GradientBarPainter(0.1, 0.2, 0.3));\n        assertFalse(r1.equals(r2));\n        r2.setBarPainter(new GradientBarPainter(0.1, 0.2, 0.3));\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShadowVisible(false);\n        assertFalse(r1.equals(r2));\n        r2.setShadowVisible(false);\n        assertTrue(r1.equals(r2));\n\n        r1.setShadowPaint(Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setShadowPaint(Color.red);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShadowXOffset(3.3);\n        assertFalse(r1.equals(r2));\n        r2.setShadowXOffset(3.3);\n        assertTrue(r1.equals(r2));\n\n        \r\n        r1.setShadowYOffset(3.3);\n        assertFalse(r1.equals(r2));\n        r2.setShadowYOffset(3.3);\n        assertTrue(r1.equals(r2));\n\n    }\n","realPath":"src/test/java/org/jfree/chart/renderer/category/BarRendererTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"20617d5b4ff1e14897eeb8d1cbcea11bb4656ab1","commitMessage":"@@@Update constants.","date":"2017-05-06 13:49:04","modifiedFileCount":"73","status":"M","submitter":"David Gilbert"}]
