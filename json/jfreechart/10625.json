[{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testEquals() {\n\n        NumberAxis a1 = new NumberAxis(\"Test\");\n        NumberAxis a2 = new NumberAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAxisLineVisible(false);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLineVisible(false);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setPositiveArrowVisible(true);\n        assertFalse(a1.equals(a2));\n        a2.setPositiveArrowVisible(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setNegativeArrowVisible(true);\n        assertFalse(a1.equals(a2));\n        a2.setNegativeArrowVisible(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n\n        \r\n\n        \r\n\n        \r\n\n        \r\n        a1.setAxisLinePaint(Color.blue);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLinePaint(Color.blue);\n        assertTrue(a1.equals(a2));\n\n        \r\n        Stroke stroke = new BasicStroke(2.0f);\n        a1.setAxisLineStroke(stroke);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLineStroke(stroke);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setInverted(true);\n        assertFalse(a1.equals(a2));\n        a2.setInverted(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setRange(new Range(50.0, 75.0));\n        assertFalse(a1.equals(a2));\n        a2.setRange(new Range(50.0, 75.0));\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAutoRange(true);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRange(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAutoRangeMinimumSize(3.33);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRangeMinimumSize(3.33);\n        assertTrue(a1.equals(a2));\n\n        a1.setDefaultAutoRange(new Range(1.2, 3.4));\n        assertFalse(a1.equals(a2));\n        a2.setDefaultAutoRange(new Range(1.2, 3.4));\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setUpperMargin(0.09);\n        assertFalse(a1.equals(a2));\n        a2.setUpperMargin(0.09);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setLowerMargin(0.09);\n        assertFalse(a1.equals(a2));\n        a2.setLowerMargin(0.09);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setFixedAutoRange(50.0);\n        assertFalse(a1.equals(a2));\n        a2.setFixedAutoRange(50.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAutoTickUnitSelection(false);\n        assertFalse(a1.equals(a2));\n        a2.setAutoTickUnitSelection(false);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        assertFalse(a1.equals(a2));\n        a2.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setVerticalTickLabels(true);\n        assertFalse(a1.equals(a2));\n        a2.setVerticalTickLabels(true);\n        assertTrue(a1.equals(a2));\n\n\n        \r\n        \r\n        \r\n\n    }\n","date":"2016-02-19 15:40:32","endLine":207,"groupId":"1992","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/dc/f9a6941468b6ec5ff54ae8970c2716b1ee23f2.src","preCode":"    public void testEquals() {\n\n        NumberAxis a1 = new NumberAxis(\"Test\");\n        NumberAxis a2 = new NumberAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAxisLineVisible(false);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLineVisible(false);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setPositiveArrowVisible(true);\n        assertFalse(a1.equals(a2));\n        a2.setPositiveArrowVisible(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setNegativeArrowVisible(true);\n        assertFalse(a1.equals(a2));\n        a2.setNegativeArrowVisible(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n\n        \r\n\n        \r\n\n        \r\n\n        \r\n        a1.setAxisLinePaint(Color.blue);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLinePaint(Color.blue);\n        assertTrue(a1.equals(a2));\n\n        \r\n        Stroke stroke = new BasicStroke(2.0f);\n        a1.setAxisLineStroke(stroke);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLineStroke(stroke);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setInverted(true);\n        assertFalse(a1.equals(a2));\n        a2.setInverted(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setRange(new Range(50.0, 75.0));\n        assertFalse(a1.equals(a2));\n        a2.setRange(new Range(50.0, 75.0));\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAutoRange(true);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRange(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAutoRangeMinimumSize(3.33);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRangeMinimumSize(3.33);\n        assertTrue(a1.equals(a2));\n\n        a1.setDefaultAutoRange(new Range(1.2, 3.4));\n        assertFalse(a1.equals(a2));\n        a2.setDefaultAutoRange(new Range(1.2, 3.4));\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setUpperMargin(0.09);\n        assertFalse(a1.equals(a2));\n        a2.setUpperMargin(0.09);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setLowerMargin(0.09);\n        assertFalse(a1.equals(a2));\n        a2.setLowerMargin(0.09);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setFixedAutoRange(50.0);\n        assertFalse(a1.equals(a2));\n        a2.setFixedAutoRange(50.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAutoTickUnitSelection(false);\n        assertFalse(a1.equals(a2));\n        a2.setAutoTickUnitSelection(false);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        assertFalse(a1.equals(a2));\n        a2.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setVerticalTickLabels(true);\n        assertFalse(a1.equals(a2));\n        a2.setVerticalTickLabels(true);\n        assertTrue(a1.equals(a2));\n\n\n        \r\n        \r\n        \r\n\n    }\n","realPath":"src/test/java/org/jfree/chart/axis/ValueAxisTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"},{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testEquals() {\n        ModuloAxis a1 = new ModuloAxis(\"Test\", new Range(0.0, 1.0));\n        ModuloAxis a2 = new ModuloAxis(\"Test\", new Range(0.0, 1.0));\n        assertTrue(a1.equals(a2));\n\n        a1.setDisplayRange(0.1, 1.1);\n        assertFalse(a1.equals(a2));\n        a2.setDisplayRange(0.1, 1.1);\n        assertTrue(a1.equals(a2));\n    }\n","date":"2016-02-19 15:40:32","endLine":82,"groupId":"1662","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/30/baa71d4d5bbe749754709fdff58c03d85f7d41.src","preCode":"    public void testEquals() {\n        ModuloAxis a1 = new ModuloAxis(\"Test\", new Range(0.0, 1.0));\n        ModuloAxis a2 = new ModuloAxis(\"Test\", new Range(0.0, 1.0));\n        assertTrue(a1.equals(a2));\n\n        a1.setDisplayRange(0.1, 1.1);\n        assertFalse(a1.equals(a2));\n        a2.setDisplayRange(0.1, 1.1);\n        assertTrue(a1.equals(a2));\n    }\n","realPath":"src/test/java/org/jfree/chart/axis/ModuloAxisTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"}],"commitId":"1b18adfb8102c34c9287ece406b9dde5751b90b5","commitMessage":"@@@Move test files to standard Maven location.","date":"2016-02-19 15:40:32","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2017-05-06 13:49:04","commitOrder":2,"curCode":"    public void testEquals() {\n\n        NumberAxis a1 = new NumberAxis(\"Test\");\n        NumberAxis a2 = new NumberAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAxisLineVisible(false);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLineVisible(false);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setPositiveArrowVisible(true);\n        assertFalse(a1.equals(a2));\n        a2.setPositiveArrowVisible(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setNegativeArrowVisible(true);\n        assertFalse(a1.equals(a2));\n        a2.setNegativeArrowVisible(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n\n        \r\n\n        \r\n\n        \r\n\n        \r\n        a1.setAxisLinePaint(Color.BLUE);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLinePaint(Color.BLUE);\n        assertTrue(a1.equals(a2));\n\n        \r\n        Stroke stroke = new BasicStroke(2.0f);\n        a1.setAxisLineStroke(stroke);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLineStroke(stroke);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setInverted(true);\n        assertFalse(a1.equals(a2));\n        a2.setInverted(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setRange(new Range(50.0, 75.0));\n        assertFalse(a1.equals(a2));\n        a2.setRange(new Range(50.0, 75.0));\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAutoRange(true);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRange(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAutoRangeMinimumSize(3.33);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRangeMinimumSize(3.33);\n        assertTrue(a1.equals(a2));\n\n        a1.setDefaultAutoRange(new Range(1.2, 3.4));\n        assertFalse(a1.equals(a2));\n        a2.setDefaultAutoRange(new Range(1.2, 3.4));\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setUpperMargin(0.09);\n        assertFalse(a1.equals(a2));\n        a2.setUpperMargin(0.09);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setLowerMargin(0.09);\n        assertFalse(a1.equals(a2));\n        a2.setLowerMargin(0.09);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setFixedAutoRange(50.0);\n        assertFalse(a1.equals(a2));\n        a2.setFixedAutoRange(50.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAutoTickUnitSelection(false);\n        assertFalse(a1.equals(a2));\n        a2.setAutoTickUnitSelection(false);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        assertFalse(a1.equals(a2));\n        a2.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setVerticalTickLabels(true);\n        assertFalse(a1.equals(a2));\n        a2.setVerticalTickLabels(true);\n        assertTrue(a1.equals(a2));\n\n\n        \r\n        \r\n        \r\n\n    }\n","date":"2017-05-06 13:49:04","endLine":207,"groupId":"10625","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/e7/6c988d419dbf83d3416c9462d278a40bd33d86.src","preCode":"    public void testEquals() {\n\n        NumberAxis a1 = new NumberAxis(\"Test\");\n        NumberAxis a2 = new NumberAxis(\"Test\");\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAxisLineVisible(false);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLineVisible(false);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setPositiveArrowVisible(true);\n        assertFalse(a1.equals(a2));\n        a2.setPositiveArrowVisible(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setNegativeArrowVisible(true);\n        assertFalse(a1.equals(a2));\n        a2.setNegativeArrowVisible(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n\n        \r\n\n        \r\n\n        \r\n\n        \r\n        a1.setAxisLinePaint(Color.blue);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLinePaint(Color.blue);\n        assertTrue(a1.equals(a2));\n\n        \r\n        Stroke stroke = new BasicStroke(2.0f);\n        a1.setAxisLineStroke(stroke);\n        assertFalse(a1.equals(a2));\n        a2.setAxisLineStroke(stroke);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setInverted(true);\n        assertFalse(a1.equals(a2));\n        a2.setInverted(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setRange(new Range(50.0, 75.0));\n        assertFalse(a1.equals(a2));\n        a2.setRange(new Range(50.0, 75.0));\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAutoRange(true);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRange(true);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAutoRangeMinimumSize(3.33);\n        assertFalse(a1.equals(a2));\n        a2.setAutoRangeMinimumSize(3.33);\n        assertTrue(a1.equals(a2));\n\n        a1.setDefaultAutoRange(new Range(1.2, 3.4));\n        assertFalse(a1.equals(a2));\n        a2.setDefaultAutoRange(new Range(1.2, 3.4));\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setUpperMargin(0.09);\n        assertFalse(a1.equals(a2));\n        a2.setUpperMargin(0.09);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setLowerMargin(0.09);\n        assertFalse(a1.equals(a2));\n        a2.setLowerMargin(0.09);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setFixedAutoRange(50.0);\n        assertFalse(a1.equals(a2));\n        a2.setFixedAutoRange(50.0);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setAutoTickUnitSelection(false);\n        assertFalse(a1.equals(a2));\n        a2.setAutoTickUnitSelection(false);\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        assertFalse(a1.equals(a2));\n        a2.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n        assertTrue(a1.equals(a2));\n\n        \r\n        a1.setVerticalTickLabels(true);\n        assertFalse(a1.equals(a2));\n        a2.setVerticalTickLabels(true);\n        assertTrue(a1.equals(a2));\n\n\n        \r\n        \r\n        \r\n\n    }\n","realPath":"src/test/java/org/jfree/chart/axis/ValueAxisTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2016-02-19 15:40:32","commitOrder":2,"curCode":"    public void testEquals() {\n        ModuloAxis a1 = new ModuloAxis(\"Test\", new Range(0.0, 1.0));\n        ModuloAxis a2 = new ModuloAxis(\"Test\", new Range(0.0, 1.0));\n        assertTrue(a1.equals(a2));\n\n        a1.setDisplayRange(0.1, 1.1);\n        assertFalse(a1.equals(a2));\n        a2.setDisplayRange(0.1, 1.1);\n        assertTrue(a1.equals(a2));\n    }\n","date":"2016-02-19 15:40:32","endLine":82,"groupId":"10625","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/30/baa71d4d5bbe749754709fdff58c03d85f7d41.src","preCode":"    public void testEquals() {\n        ModuloAxis a1 = new ModuloAxis(\"Test\", new Range(0.0, 1.0));\n        ModuloAxis a2 = new ModuloAxis(\"Test\", new Range(0.0, 1.0));\n        assertTrue(a1.equals(a2));\n\n        a1.setDisplayRange(0.1, 1.1);\n        assertFalse(a1.equals(a2));\n        a2.setDisplayRange(0.1, 1.1);\n        assertTrue(a1.equals(a2));\n    }\n","realPath":"src/test/java/org/jfree/chart/axis/ModuloAxisTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"20617d5b4ff1e14897eeb8d1cbcea11bb4656ab1","commitMessage":"@@@Update constants.","date":"2017-05-06 13:49:04","modifiedFileCount":"73","status":"M","submitter":"David Gilbert"}]
