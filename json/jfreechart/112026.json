[{"authorTime":"2020-03-22 19:36:23","codes":[{"authorDate":"2020-03-22 19:36:23","commitOrder":1,"curCode":"    public Range getDomainBounds(boolean includeInterval) {\n        Range result = null;\n        for (TimeSeries<S> series : this.data) {\n            int count = series.getItemCount();\n            if (count > 0) {\n                RegularTimePeriod start = series.getTimePeriod(0);\n                RegularTimePeriod end = series.getTimePeriod(count - 1);\n                Range temp;\n                if (!includeInterval) {\n                    temp = new Range(getX(start), getX(end));\n                }\n                else {\n                    temp = new Range(\n                            start.getFirstMillisecond(this.workingCalendar),\n                            end.getLastMillisecond(this.workingCalendar));\n                }\n                result = Range.combine(result, temp);\n            }\n        }\n        return result;\n    }\n","date":"2020-03-22 19:36:23","endLine":557,"groupId":"3091","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getDomainBounds","params":"(booleanincludeInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/91/633efa93f364125a2681164d81174f45a5b662.src","preCode":"    public Range getDomainBounds(boolean includeInterval) {\n        Range result = null;\n        for (TimeSeries<S> series : this.data) {\n            int count = series.getItemCount();\n            if (count > 0) {\n                RegularTimePeriod start = series.getTimePeriod(0);\n                RegularTimePeriod end = series.getTimePeriod(count - 1);\n                Range temp;\n                if (!includeInterval) {\n                    temp = new Range(getX(start), getX(end));\n                }\n                else {\n                    temp = new Range(\n                            start.getFirstMillisecond(this.workingCalendar),\n                            end.getLastMillisecond(this.workingCalendar));\n                }\n                result = Range.combine(result, temp);\n            }\n        }\n        return result;\n    }\n","realPath":"src/main/java/org/jfree/data/time/TimeSeriesCollection.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":537,"status":"B"},{"authorDate":"2020-03-22 19:36:23","commitOrder":1,"curCode":"    public Range getDomainBounds(List visibleSeriesKeys,\n            boolean includeInterval) {\n        Range result = null;\n        Iterator iterator = visibleSeriesKeys.iterator();\n        while (iterator.hasNext()) {\n            Comparable seriesKey = (Comparable) iterator.next();\n            TimeSeries<S> series = getSeries((S) seriesKey);\n            int count = series.getItemCount();\n            if (count > 0) {\n                RegularTimePeriod start = series.getTimePeriod(0);\n                RegularTimePeriod end = series.getTimePeriod(count - 1);\n                Range temp;\n                if (!includeInterval) {\n                    temp = new Range(getX(start), getX(end));\n                }\n                else {\n                    temp = new Range(\n                            start.getFirstMillisecond(this.workingCalendar),\n                            end.getLastMillisecond(this.workingCalendar));\n                }\n                result = Range.combine(result, temp);\n            }\n        }\n        return result;\n    }\n","date":"2020-03-22 19:36:23","endLine":594,"groupId":"3091","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDomainBounds","params":"(ListvisibleSeriesKeys@booleanincludeInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/91/633efa93f364125a2681164d81174f45a5b662.src","preCode":"    public Range getDomainBounds(List visibleSeriesKeys,\n            boolean includeInterval) {\n        Range result = null;\n        Iterator iterator = visibleSeriesKeys.iterator();\n        while (iterator.hasNext()) {\n            Comparable seriesKey = (Comparable) iterator.next();\n            TimeSeries<S> series = getSeries((S) seriesKey);\n            int count = series.getItemCount();\n            if (count > 0) {\n                RegularTimePeriod start = series.getTimePeriod(0);\n                RegularTimePeriod end = series.getTimePeriod(count - 1);\n                Range temp;\n                if (!includeInterval) {\n                    temp = new Range(getX(start), getX(end));\n                }\n                else {\n                    temp = new Range(\n                            start.getFirstMillisecond(this.workingCalendar),\n                            end.getLastMillisecond(this.workingCalendar));\n                }\n                result = Range.combine(result, temp);\n            }\n        }\n        return result;\n    }\n","realPath":"src/main/java/org/jfree/data/time/TimeSeriesCollection.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"B"}],"commitId":"f7ded380c87f815662e1c023e0aa68a1a27496c4","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-22 19:36:23","modifiedFileCount":"45","status":"B","submitter":"David Gilbert"},{"authorTime":"2020-10-17 13:05:27","codes":[{"authorDate":"2020-03-22 19:36:23","commitOrder":2,"curCode":"    public Range getDomainBounds(boolean includeInterval) {\n        Range result = null;\n        for (TimeSeries<S> series : this.data) {\n            int count = series.getItemCount();\n            if (count > 0) {\n                RegularTimePeriod start = series.getTimePeriod(0);\n                RegularTimePeriod end = series.getTimePeriod(count - 1);\n                Range temp;\n                if (!includeInterval) {\n                    temp = new Range(getX(start), getX(end));\n                }\n                else {\n                    temp = new Range(\n                            start.getFirstMillisecond(this.workingCalendar),\n                            end.getLastMillisecond(this.workingCalendar));\n                }\n                result = Range.combine(result, temp);\n            }\n        }\n        return result;\n    }\n","date":"2020-03-22 19:36:23","endLine":557,"groupId":"112026","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getDomainBounds","params":"(booleanincludeInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/91/633efa93f364125a2681164d81174f45a5b662.src","preCode":"    public Range getDomainBounds(boolean includeInterval) {\n        Range result = null;\n        for (TimeSeries<S> series : this.data) {\n            int count = series.getItemCount();\n            if (count > 0) {\n                RegularTimePeriod start = series.getTimePeriod(0);\n                RegularTimePeriod end = series.getTimePeriod(count - 1);\n                Range temp;\n                if (!includeInterval) {\n                    temp = new Range(getX(start), getX(end));\n                }\n                else {\n                    temp = new Range(\n                            start.getFirstMillisecond(this.workingCalendar),\n                            end.getLastMillisecond(this.workingCalendar));\n                }\n                result = Range.combine(result, temp);\n            }\n        }\n        return result;\n    }\n","realPath":"src/main/java/org/jfree/data/time/TimeSeriesCollection.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":537,"status":"N"},{"authorDate":"2020-10-17 13:05:27","commitOrder":2,"curCode":"    public Range getDomainBounds(List visibleSeriesKeys,\n            boolean includeInterval) {\n        Range result = null;\n        for (Object visibleSeriesKey : visibleSeriesKeys) {\n            Comparable seriesKey = (Comparable) visibleSeriesKey;\n            TimeSeries<S> series = getSeries((S) seriesKey);\n            int count = series.getItemCount();\n            if (count > 0) {\n                RegularTimePeriod start = series.getTimePeriod(0);\n                RegularTimePeriod end = series.getTimePeriod(count - 1);\n                Range temp;\n                if (!includeInterval) {\n                    temp = new Range(getX(start), getX(end));\n                }\n                else {\n                    temp = new Range(\n                            start.getFirstMillisecond(this.workingCalendar),\n                            end.getLastMillisecond(this.workingCalendar));\n                }\n                result = Range.combine(result, temp);\n            }\n        }\n        return result;\n    }\n","date":"2020-10-17 13:05:27","endLine":595,"groupId":"112026","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getDomainBounds","params":"(ListvisibleSeriesKeys@booleanincludeInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/ce/7e7df1cffabe0c62c76e73e5737f80ef7a0488.src","preCode":"    public Range getDomainBounds(List visibleSeriesKeys,\n            boolean includeInterval) {\n        Range result = null;\n        Iterator iterator = visibleSeriesKeys.iterator();\n        while (iterator.hasNext()) {\n            Comparable seriesKey = (Comparable) iterator.next();\n            TimeSeries<S> series = getSeries((S) seriesKey);\n            int count = series.getItemCount();\n            if (count > 0) {\n                RegularTimePeriod start = series.getTimePeriod(0);\n                RegularTimePeriod end = series.getTimePeriod(count - 1);\n                Range temp;\n                if (!includeInterval) {\n                    temp = new Range(getX(start), getX(end));\n                }\n                else {\n                    temp = new Range(\n                            start.getFirstMillisecond(this.workingCalendar),\n                            end.getLastMillisecond(this.workingCalendar));\n                }\n                result = Range.combine(result, temp);\n            }\n        }\n        return result;\n    }\n","realPath":"src/main/java/org/jfree/data/time/TimeSeriesCollection.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"M"}],"commitId":"61f3b48e99ddd733daf435eee2ea1c643c4f6a21","commitMessage":"@@@Merge pull request #178 from simon04/for-loop\n\nReplace while loop with enhanced for loop","date":"2020-10-17 13:05:27","modifiedFileCount":"32","status":"M","submitter":"David Gilbert"}]
