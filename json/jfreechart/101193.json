[{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testGetDataItem1() {\n        TimeSeries series = new TimeSeries(\"S\", Year.class);\n\n        \r\n        boolean pass = false;\n        try {\n             series.getDataItem(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        series.add(new Year(2006), 100.0);\n        TimeSeriesDataItem item = series.getDataItem(0);\n        assertEquals(new Year(2006), item.getPeriod());\n        pass = false;\n        try {\n            series.getDataItem(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            series.getDataItem(1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2016-02-19 15:40:32","endLine":737,"groupId":"3457","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDataItem1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/84/35a22af8ec31b47679df84f67a6546dd39ace8.src","preCode":"    public void testGetDataItem1() {\n        TimeSeries series = new TimeSeries(\"S\", Year.class);\n\n        \r\n        boolean pass = false;\n        try {\n             series.getDataItem(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        series.add(new Year(2006), 100.0);\n        TimeSeriesDataItem item = series.getDataItem(0);\n        assertEquals(new Year(2006), item.getPeriod());\n        pass = false;\n        try {\n            series.getDataItem(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            series.getDataItem(1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"B"},{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testGetDataItem2() {\n        TimeSeries series = new TimeSeries(\"S\", Year.class);\n        assertNull(series.getDataItem(new Year(2006)));\n\n        \r\n        boolean pass = false;\n        try {\n             series.getDataItem(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2016-02-19 15:40:32","endLine":756,"groupId":"4091","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetDataItem2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/84/35a22af8ec31b47679df84f67a6546dd39ace8.src","preCode":"    public void testGetDataItem2() {\n        TimeSeries series = new TimeSeries(\"S\", Year.class);\n        assertNull(series.getDataItem(new Year(2006)));\n\n        \r\n        boolean pass = false;\n        try {\n             series.getDataItem(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"B"}],"commitId":"1b18adfb8102c34c9287ece406b9dde5751b90b5","commitMessage":"@@@Move test files to standard Maven location.","date":"2016-02-19 15:40:32","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2017-03-09 17:48:20","codes":[{"authorDate":"2017-03-09 17:48:20","commitOrder":2,"curCode":"    public void testGetDataItem1() {\n        TimeSeries series = new TimeSeries(\"S\");\n\n        \r\n        boolean pass = false;\n        try {\n             series.getDataItem(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        series.add(new Year(2006), 100.0);\n        TimeSeriesDataItem item = series.getDataItem(0);\n        assertEquals(new Year(2006), item.getPeriod());\n        pass = false;\n        try {\n            series.getDataItem(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            series.getDataItem(1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2017-03-09 17:48:20","endLine":727,"groupId":"3457","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDataItem1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/04/db446e60785689e78acf1782ebd165aab3c879.src","preCode":"    public void testGetDataItem1() {\n        TimeSeries series = new TimeSeries(\"S\", Year.class);\n\n        \r\n        boolean pass = false;\n        try {\n             series.getDataItem(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        series.add(new Year(2006), 100.0);\n        TimeSeriesDataItem item = series.getDataItem(0);\n        assertEquals(new Year(2006), item.getPeriod());\n        pass = false;\n        try {\n            series.getDataItem(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            series.getDataItem(1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":694,"status":"M"},{"authorDate":"2017-03-09 17:48:20","commitOrder":2,"curCode":"    public void testGetDataItem2() {\n        TimeSeries series = new TimeSeries(\"S\");\n        assertNull(series.getDataItem(new Year(2006)));\n\n        \r\n        boolean pass = false;\n        try {\n             series.getDataItem(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2017-03-09 17:48:20","endLine":746,"groupId":"4091","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetDataItem2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/04/db446e60785689e78acf1782ebd165aab3c879.src","preCode":"    public void testGetDataItem2() {\n        TimeSeries series = new TimeSeries(\"S\", Year.class);\n        assertNull(series.getDataItem(new Year(2006)));\n\n        \r\n        boolean pass = false;\n        try {\n             series.getDataItem(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":733,"status":"M"}],"commitId":"e4e04e10a80308f2dd5784956d684376faf5b608","commitMessage":"@@@Remove deprecated code and update tests.","date":"2017-03-09 17:48:20","modifiedFileCount":"18","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-03-22 19:36:23","codes":[{"authorDate":"2020-03-22 19:36:23","commitOrder":3,"curCode":"    public void testGetDataItem1() {\n        TimeSeries<String> series = new TimeSeries<>(\"S\");\n\n        \r\n        boolean pass = false;\n        try {\n             series.getDataItem(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        series.add(new Year(2006), 100.0);\n        TimeSeriesDataItem item = series.getDataItem(0);\n        assertEquals(new Year(2006), item.getPeriod());\n        pass = false;\n        try {\n            series.getDataItem(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            series.getDataItem(1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2020-03-22 19:36:23","endLine":710,"groupId":"101193","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDataItem1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/8f/ca912ea4098491100ee4064656b72adc694bba.src","preCode":"    public void testGetDataItem1() {\n        TimeSeries series = new TimeSeries(\"S\");\n\n        \r\n        boolean pass = false;\n        try {\n             series.getDataItem(0);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        series.add(new Year(2006), 100.0);\n        TimeSeriesDataItem item = series.getDataItem(0);\n        assertEquals(new Year(2006), item.getPeriod());\n        pass = false;\n        try {\n            series.getDataItem(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            series.getDataItem(1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":677,"status":"M"},{"authorDate":"2020-03-22 19:36:23","commitOrder":3,"curCode":"    public void testGetDataItem2() {\n        TimeSeries<String> series = new TimeSeries<>(\"S\");\n        assertNull(series.getDataItem(new Year(2006)));\n\n        \r\n        boolean pass = false;\n        try {\n             series.getDataItem(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","date":"2020-03-22 19:36:23","endLine":729,"groupId":"101193","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetDataItem2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/8f/ca912ea4098491100ee4064656b72adc694bba.src","preCode":"    public void testGetDataItem2() {\n        TimeSeries series = new TimeSeries(\"S\");\n        assertNull(series.getDataItem(new Year(2006)));\n\n        \r\n        boolean pass = false;\n        try {\n             series.getDataItem(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":716,"status":"M"}],"commitId":"f7ded380c87f815662e1c023e0aa68a1a27496c4","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-22 19:36:23","modifiedFileCount":"45","status":"M","submitter":"David Gilbert"}]
