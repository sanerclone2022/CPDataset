[{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public void drawHorizontalItem(Graphics2D g2, \n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        BoxAndWhiskerCategoryDataset bawDataset\n                = (BoxAndWhiskerCategoryDataset) dataset;\n\n        double categoryEnd = domainAxis.getCategoryEnd(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryStart = domainAxis.getCategoryStart(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryWidth = Math.abs(categoryEnd - categoryStart);\n\n        double yy = categoryStart;\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getHeight() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            double usedWidth = (state.getBarWidth() * seriesCount)\n                               + (seriesGap * (seriesCount - 1));\n            \r\n            \r\n            double offset = (categoryWidth - usedWidth) / 2;\n            yy = yy + offset + (row * (state.getBarWidth() + seriesGap));\n        }\n        else {\n            \r\n            \r\n            double offset = (categoryWidth - state.getBarWidth()) / 2;\n            yy = yy + offset;\n        }\n\n        g2.setPaint(getItemPaint(row, column));\n        Stroke s = getItemStroke(row, column);\n        g2.setStroke(s);\n\n        RectangleEdge location = plot.getRangeAxisEdge();\n\n        Number xQ1 = bawDataset.getQ1Value(row, column);\n        Number xQ3 = bawDataset.getQ3Value(row, column);\n        Number xMax = bawDataset.getMaxRegularValue(row, column);\n        Number xMin = bawDataset.getMinRegularValue(row, column);\n\n        Shape box = null;\n        if (xQ1 != null && xQ3 != null && xMax != null && xMin != null) {\n\n            double xxQ1 = rangeAxis.valueToJava2D(xQ1.doubleValue(), dataArea,\n                    location);\n            double xxQ3 = rangeAxis.valueToJava2D(xQ3.doubleValue(), dataArea,\n                    location);\n            double xxMax = rangeAxis.valueToJava2D(xMax.doubleValue(), dataArea,\n                    location);\n            double xxMin = rangeAxis.valueToJava2D(xMin.doubleValue(), dataArea,\n                    location);\n            double yymid = yy + state.getBarWidth() / 2.0;\n            double halfW = (state.getBarWidth() / 2.0) * this.whiskerWidth;\n\n            \r\n            box = new Rectangle2D.Double(Math.min(xxQ1, xxQ3), yy,\n                    Math.abs(xxQ1 - xxQ3), state.getBarWidth());\n            if (this.fillBox) {\n                g2.fill(box);\n            }\n\n            Paint outlinePaint = getItemOutlinePaint(row, column);\n            if (this.useOutlinePaintForWhiskers) {\n                g2.setPaint(outlinePaint);\n            }\n            \r\n            g2.draw(new Line2D.Double(xxMax, yymid, xxQ3, yymid));\n            g2.draw(new Line2D.Double(xxMax, yymid - halfW, xxMax,\n                    yymid + halfW));\n\n            \r\n            g2.draw(new Line2D.Double(xxMin, yymid, xxQ1, yymid));\n            g2.draw(new Line2D.Double(xxMin, yymid - halfW, xxMin,\n                    yy + halfW));\n\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(outlinePaint);\n            g2.draw(box);\n        }\n\n        \r\n        g2.setPaint(this.artifactPaint);\n        double aRadius;                 \r\n        if (this.meanVisible) {\n            Number xMean = bawDataset.getMeanValue(row, column);\n            if (xMean != null) {\n                double xxMean = rangeAxis.valueToJava2D(xMean.doubleValue(),\n                        dataArea, location);\n                aRadius = state.getBarWidth() / 4;\n                \r\n                \r\n                if ((xxMean > (dataArea.getMinX() - aRadius))\n                        && (xxMean < (dataArea.getMaxX() + aRadius))) {\n                    Ellipse2D.Double avgEllipse = new Ellipse2D.Double(xxMean\n                            - aRadius, yy + aRadius, aRadius * 2, aRadius * 2);\n                    g2.fill(avgEllipse);\n                    g2.draw(avgEllipse);\n                }\n            }\n        }\n\n        \r\n        if (this.medianVisible) {\n            Number xMedian = bawDataset.getMedianValue(row, column);\n            if (xMedian != null) {\n                double xxMedian = rangeAxis.valueToJava2D(xMedian.doubleValue(),\n                        dataArea, location);\n                g2.draw(new Line2D.Double(xxMedian, yy, xxMedian,\n                        yy + state.getBarWidth()));\n            }\n        }\n\n        \r\n        if (state.getInfo() != null && box != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, box);\n            }\n        }\n\n    }\n","date":"2016-02-19 16:24:22","endLine":754,"groupId":"2222","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"drawHorizontalItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/0c/33f55a82b28ea1e81dcdfc7af660745333fbed.src","preCode":"    public void drawHorizontalItem(Graphics2D g2, \n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        BoxAndWhiskerCategoryDataset bawDataset\n                = (BoxAndWhiskerCategoryDataset) dataset;\n\n        double categoryEnd = domainAxis.getCategoryEnd(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryStart = domainAxis.getCategoryStart(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryWidth = Math.abs(categoryEnd - categoryStart);\n\n        double yy = categoryStart;\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getHeight() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            double usedWidth = (state.getBarWidth() * seriesCount)\n                               + (seriesGap * (seriesCount - 1));\n            \r\n            \r\n            double offset = (categoryWidth - usedWidth) / 2;\n            yy = yy + offset + (row * (state.getBarWidth() + seriesGap));\n        }\n        else {\n            \r\n            \r\n            double offset = (categoryWidth - state.getBarWidth()) / 2;\n            yy = yy + offset;\n        }\n\n        g2.setPaint(getItemPaint(row, column));\n        Stroke s = getItemStroke(row, column);\n        g2.setStroke(s);\n\n        RectangleEdge location = plot.getRangeAxisEdge();\n\n        Number xQ1 = bawDataset.getQ1Value(row, column);\n        Number xQ3 = bawDataset.getQ3Value(row, column);\n        Number xMax = bawDataset.getMaxRegularValue(row, column);\n        Number xMin = bawDataset.getMinRegularValue(row, column);\n\n        Shape box = null;\n        if (xQ1 != null && xQ3 != null && xMax != null && xMin != null) {\n\n            double xxQ1 = rangeAxis.valueToJava2D(xQ1.doubleValue(), dataArea,\n                    location);\n            double xxQ3 = rangeAxis.valueToJava2D(xQ3.doubleValue(), dataArea,\n                    location);\n            double xxMax = rangeAxis.valueToJava2D(xMax.doubleValue(), dataArea,\n                    location);\n            double xxMin = rangeAxis.valueToJava2D(xMin.doubleValue(), dataArea,\n                    location);\n            double yymid = yy + state.getBarWidth() / 2.0;\n            double halfW = (state.getBarWidth() / 2.0) * this.whiskerWidth;\n\n            \r\n            box = new Rectangle2D.Double(Math.min(xxQ1, xxQ3), yy,\n                    Math.abs(xxQ1 - xxQ3), state.getBarWidth());\n            if (this.fillBox) {\n                g2.fill(box);\n            }\n\n            Paint outlinePaint = getItemOutlinePaint(row, column);\n            if (this.useOutlinePaintForWhiskers) {\n                g2.setPaint(outlinePaint);\n            }\n            \r\n            g2.draw(new Line2D.Double(xxMax, yymid, xxQ3, yymid));\n            g2.draw(new Line2D.Double(xxMax, yymid - halfW, xxMax,\n                    yymid + halfW));\n\n            \r\n            g2.draw(new Line2D.Double(xxMin, yymid, xxQ1, yymid));\n            g2.draw(new Line2D.Double(xxMin, yymid - halfW, xxMin,\n                    yy + halfW));\n\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(outlinePaint);\n            g2.draw(box);\n        }\n\n        \r\n        g2.setPaint(this.artifactPaint);\n        double aRadius;                 \r\n        if (this.meanVisible) {\n            Number xMean = bawDataset.getMeanValue(row, column);\n            if (xMean != null) {\n                double xxMean = rangeAxis.valueToJava2D(xMean.doubleValue(),\n                        dataArea, location);\n                aRadius = state.getBarWidth() / 4;\n                \r\n                \r\n                if ((xxMean > (dataArea.getMinX() - aRadius))\n                        && (xxMean < (dataArea.getMaxX() + aRadius))) {\n                    Ellipse2D.Double avgEllipse = new Ellipse2D.Double(xxMean\n                            - aRadius, yy + aRadius, aRadius * 2, aRadius * 2);\n                    g2.fill(avgEllipse);\n                    g2.draw(avgEllipse);\n                }\n            }\n        }\n\n        \r\n        if (this.medianVisible) {\n            Number xMedian = bawDataset.getMedianValue(row, column);\n            if (xMedian != null) {\n                double xxMedian = rangeAxis.valueToJava2D(xMedian.doubleValue(),\n                        dataArea, location);\n                g2.draw(new Line2D.Double(xxMedian, yy, xxMedian,\n                        yy + state.getBarWidth()));\n            }\n        }\n\n        \r\n        if (state.getInfo() != null && box != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, box);\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":628,"status":"B"},{"authorDate":"2016-02-19 16:24:22","commitOrder":1,"curCode":"    public void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state,\n        Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n        ValueAxis rangeAxis, CategoryDataset dataset, int row, int column) {\n\n        BoxAndWhiskerCategoryDataset bawDataset\n                = (BoxAndWhiskerCategoryDataset) dataset;\n\n        double categoryEnd = domainAxis.getCategoryEnd(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryStart = domainAxis.getCategoryStart(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryWidth = categoryEnd - categoryStart;\n\n        double xx = categoryStart;\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getWidth() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            double usedWidth = (state.getBarWidth() * seriesCount)\n                               + (seriesGap * (seriesCount - 1));\n            \r\n            \r\n            double offset = (categoryWidth - usedWidth) / 2;\n            xx = xx + offset + (row * (state.getBarWidth() + seriesGap));\n        }\n        else {\n            \r\n            \r\n            double offset = (categoryWidth - state.getBarWidth()) / 2;\n            xx = xx + offset;\n        }\n\n        double yyAverage;\n        double yyOutlier;\n\n        Paint itemPaint = getItemPaint(row, column);\n        g2.setPaint(itemPaint);\n        Stroke s = getItemStroke(row, column);\n        g2.setStroke(s);\n\n        double aRadius = 0;                 \r\n\n        RectangleEdge location = plot.getRangeAxisEdge();\n\n        Number yQ1 = bawDataset.getQ1Value(row, column);\n        Number yQ3 = bawDataset.getQ3Value(row, column);\n        Number yMax = bawDataset.getMaxRegularValue(row, column);\n        Number yMin = bawDataset.getMinRegularValue(row, column);\n        Shape box = null;\n        if (yQ1 != null && yQ3 != null && yMax != null && yMin != null) {\n\n            double yyQ1 = rangeAxis.valueToJava2D(yQ1.doubleValue(), dataArea,\n                    location);\n            double yyQ3 = rangeAxis.valueToJava2D(yQ3.doubleValue(), dataArea,\n                    location);\n            double yyMax = rangeAxis.valueToJava2D(yMax.doubleValue(),\n                    dataArea, location);\n            double yyMin = rangeAxis.valueToJava2D(yMin.doubleValue(),\n                    dataArea, location);\n            double xxmid = xx + state.getBarWidth() / 2.0;\n            double halfW = (state.getBarWidth() / 2.0) * this.whiskerWidth;\n\n            \r\n            box = new Rectangle2D.Double(xx, Math.min(yyQ1, yyQ3),\n                    state.getBarWidth(), Math.abs(yyQ1 - yyQ3));\n            if (this.fillBox) {\n                g2.fill(box);\n            }\n\n            Paint outlinePaint = getItemOutlinePaint(row, column);\n            if (this.useOutlinePaintForWhiskers) {\n                g2.setPaint(outlinePaint);\n            }\n            \r\n            g2.draw(new Line2D.Double(xxmid, yyMax, xxmid, yyQ3));\n            g2.draw(new Line2D.Double(xxmid - halfW, yyMax, xxmid + halfW, yyMax));\n\n            \r\n            g2.draw(new Line2D.Double(xxmid, yyMin, xxmid, yyQ1));\n            g2.draw(new Line2D.Double(xxmid - halfW, yyMin, xxmid + halfW, yyMin));\n\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(outlinePaint);\n            g2.draw(box);\n        }\n\n        g2.setPaint(this.artifactPaint);\n\n        \r\n        if (this.meanVisible) {\n            Number yMean = bawDataset.getMeanValue(row, column);\n            if (yMean != null) {\n                yyAverage = rangeAxis.valueToJava2D(yMean.doubleValue(),\n                        dataArea, location);\n                aRadius = state.getBarWidth() / 4;\n                \r\n                \r\n                if ((yyAverage > (dataArea.getMinY() - aRadius))\n                        && (yyAverage < (dataArea.getMaxY() + aRadius))) {\n                    Ellipse2D.Double avgEllipse = new Ellipse2D.Double(\n                            xx + aRadius, yyAverage - aRadius, aRadius * 2,\n                            aRadius * 2);\n                    g2.fill(avgEllipse);\n                    g2.draw(avgEllipse);\n                }\n            }\n        }\n\n        \r\n        if (this.medianVisible) {\n            Number yMedian = bawDataset.getMedianValue(row, column);\n            if (yMedian != null) {\n                double yyMedian = rangeAxis.valueToJava2D(\n                        yMedian.doubleValue(), dataArea, location);\n                g2.draw(new Line2D.Double(xx, yyMedian, \n                        xx + state.getBarWidth(), yyMedian));\n            }\n        }\n\n        \r\n        double maxAxisValue = rangeAxis.valueToJava2D(\n                rangeAxis.getUpperBound(), dataArea, location) + aRadius;\n        double minAxisValue = rangeAxis.valueToJava2D(\n                rangeAxis.getLowerBound(), dataArea, location) - aRadius;\n\n        g2.setPaint(itemPaint);\n\n        \r\n        double oRadius = state.getBarWidth() / 3;    \r\n        List outliers = new ArrayList();\n        OutlierListCollection outlierListCollection\n                = new OutlierListCollection();\n\n        \r\n        \r\n        \r\n        List yOutliers = bawDataset.getOutliers(row, column);\n        if (yOutliers != null) {\n            for (int i = 0; i < yOutliers.size(); i++) {\n                double outlier = ((Number) yOutliers.get(i)).doubleValue();\n                Number minOutlier = bawDataset.getMinOutlier(row, column);\n                Number maxOutlier = bawDataset.getMaxOutlier(row, column);\n                Number minRegular = bawDataset.getMinRegularValue(row, column);\n                Number maxRegular = bawDataset.getMaxRegularValue(row, column);\n                if (outlier > maxOutlier.doubleValue()) {\n                    outlierListCollection.setHighFarOut(true);\n                }\n                else if (outlier < minOutlier.doubleValue()) {\n                    outlierListCollection.setLowFarOut(true);\n                }\n                else if (outlier > maxRegular.doubleValue()) {\n                    yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea,\n                            location);\n                    outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,\n                            yyOutlier, oRadius));\n                }\n                else if (outlier < minRegular.doubleValue()) {\n                    yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea,\n                            location);\n                    outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,\n                            yyOutlier, oRadius));\n                }\n                Collections.sort(outliers);\n            }\n\n            \r\n            \r\n            for (Iterator iterator = outliers.iterator(); iterator.hasNext();) {\n                Outlier outlier = (Outlier) iterator.next();\n                outlierListCollection.add(outlier);\n            }\n\n            for (Iterator iterator = outlierListCollection.iterator();\n                     iterator.hasNext();) {\n                OutlierList list = (OutlierList) iterator.next();\n                Outlier outlier = list.getAveragedOutlier();\n                Point2D point = outlier.getPoint();\n\n                if (list.isMultiple()) {\n                    drawMultipleEllipse(point, state.getBarWidth(), oRadius,\n                            g2);\n                }\n                else {\n                    drawEllipse(point, oRadius, g2);\n                }\n            }\n\n            \r\n            if (outlierListCollection.isHighFarOut()) {\n                drawHighFarOut(aRadius / 2.0, g2,\n                        xx + state.getBarWidth() / 2.0, maxAxisValue);\n            }\n\n            if (outlierListCollection.isLowFarOut()) {\n                drawLowFarOut(aRadius / 2.0, g2,\n                        xx + state.getBarWidth() / 2.0, minAxisValue);\n            }\n        }\n        \r\n        if (state.getInfo() != null && box != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, box);\n            }\n        }\n\n    }\n","date":"2016-02-19 16:24:22","endLine":980,"groupId":"2223","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"drawVerticalItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/0c/33f55a82b28ea1e81dcdfc7af660745333fbed.src","preCode":"    public void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state,\n        Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n        ValueAxis rangeAxis, CategoryDataset dataset, int row, int column) {\n\n        BoxAndWhiskerCategoryDataset bawDataset\n                = (BoxAndWhiskerCategoryDataset) dataset;\n\n        double categoryEnd = domainAxis.getCategoryEnd(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryStart = domainAxis.getCategoryStart(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryWidth = categoryEnd - categoryStart;\n\n        double xx = categoryStart;\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getWidth() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            double usedWidth = (state.getBarWidth() * seriesCount)\n                               + (seriesGap * (seriesCount - 1));\n            \r\n            \r\n            double offset = (categoryWidth - usedWidth) / 2;\n            xx = xx + offset + (row * (state.getBarWidth() + seriesGap));\n        }\n        else {\n            \r\n            \r\n            double offset = (categoryWidth - state.getBarWidth()) / 2;\n            xx = xx + offset;\n        }\n\n        double yyAverage;\n        double yyOutlier;\n\n        Paint itemPaint = getItemPaint(row, column);\n        g2.setPaint(itemPaint);\n        Stroke s = getItemStroke(row, column);\n        g2.setStroke(s);\n\n        double aRadius = 0;                 \r\n\n        RectangleEdge location = plot.getRangeAxisEdge();\n\n        Number yQ1 = bawDataset.getQ1Value(row, column);\n        Number yQ3 = bawDataset.getQ3Value(row, column);\n        Number yMax = bawDataset.getMaxRegularValue(row, column);\n        Number yMin = bawDataset.getMinRegularValue(row, column);\n        Shape box = null;\n        if (yQ1 != null && yQ3 != null && yMax != null && yMin != null) {\n\n            double yyQ1 = rangeAxis.valueToJava2D(yQ1.doubleValue(), dataArea,\n                    location);\n            double yyQ3 = rangeAxis.valueToJava2D(yQ3.doubleValue(), dataArea,\n                    location);\n            double yyMax = rangeAxis.valueToJava2D(yMax.doubleValue(),\n                    dataArea, location);\n            double yyMin = rangeAxis.valueToJava2D(yMin.doubleValue(),\n                    dataArea, location);\n            double xxmid = xx + state.getBarWidth() / 2.0;\n            double halfW = (state.getBarWidth() / 2.0) * this.whiskerWidth;\n\n            \r\n            box = new Rectangle2D.Double(xx, Math.min(yyQ1, yyQ3),\n                    state.getBarWidth(), Math.abs(yyQ1 - yyQ3));\n            if (this.fillBox) {\n                g2.fill(box);\n            }\n\n            Paint outlinePaint = getItemOutlinePaint(row, column);\n            if (this.useOutlinePaintForWhiskers) {\n                g2.setPaint(outlinePaint);\n            }\n            \r\n            g2.draw(new Line2D.Double(xxmid, yyMax, xxmid, yyQ3));\n            g2.draw(new Line2D.Double(xxmid - halfW, yyMax, xxmid + halfW, yyMax));\n\n            \r\n            g2.draw(new Line2D.Double(xxmid, yyMin, xxmid, yyQ1));\n            g2.draw(new Line2D.Double(xxmid - halfW, yyMin, xxmid + halfW, yyMin));\n\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(outlinePaint);\n            g2.draw(box);\n        }\n\n        g2.setPaint(this.artifactPaint);\n\n        \r\n        if (this.meanVisible) {\n            Number yMean = bawDataset.getMeanValue(row, column);\n            if (yMean != null) {\n                yyAverage = rangeAxis.valueToJava2D(yMean.doubleValue(),\n                        dataArea, location);\n                aRadius = state.getBarWidth() / 4;\n                \r\n                \r\n                if ((yyAverage > (dataArea.getMinY() - aRadius))\n                        && (yyAverage < (dataArea.getMaxY() + aRadius))) {\n                    Ellipse2D.Double avgEllipse = new Ellipse2D.Double(\n                            xx + aRadius, yyAverage - aRadius, aRadius * 2,\n                            aRadius * 2);\n                    g2.fill(avgEllipse);\n                    g2.draw(avgEllipse);\n                }\n            }\n        }\n\n        \r\n        if (this.medianVisible) {\n            Number yMedian = bawDataset.getMedianValue(row, column);\n            if (yMedian != null) {\n                double yyMedian = rangeAxis.valueToJava2D(\n                        yMedian.doubleValue(), dataArea, location);\n                g2.draw(new Line2D.Double(xx, yyMedian, \n                        xx + state.getBarWidth(), yyMedian));\n            }\n        }\n\n        \r\n        double maxAxisValue = rangeAxis.valueToJava2D(\n                rangeAxis.getUpperBound(), dataArea, location) + aRadius;\n        double minAxisValue = rangeAxis.valueToJava2D(\n                rangeAxis.getLowerBound(), dataArea, location) - aRadius;\n\n        g2.setPaint(itemPaint);\n\n        \r\n        double oRadius = state.getBarWidth() / 3;    \r\n        List outliers = new ArrayList();\n        OutlierListCollection outlierListCollection\n                = new OutlierListCollection();\n\n        \r\n        \r\n        \r\n        List yOutliers = bawDataset.getOutliers(row, column);\n        if (yOutliers != null) {\n            for (int i = 0; i < yOutliers.size(); i++) {\n                double outlier = ((Number) yOutliers.get(i)).doubleValue();\n                Number minOutlier = bawDataset.getMinOutlier(row, column);\n                Number maxOutlier = bawDataset.getMaxOutlier(row, column);\n                Number minRegular = bawDataset.getMinRegularValue(row, column);\n                Number maxRegular = bawDataset.getMaxRegularValue(row, column);\n                if (outlier > maxOutlier.doubleValue()) {\n                    outlierListCollection.setHighFarOut(true);\n                }\n                else if (outlier < minOutlier.doubleValue()) {\n                    outlierListCollection.setLowFarOut(true);\n                }\n                else if (outlier > maxRegular.doubleValue()) {\n                    yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea,\n                            location);\n                    outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,\n                            yyOutlier, oRadius));\n                }\n                else if (outlier < minRegular.doubleValue()) {\n                    yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea,\n                            location);\n                    outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,\n                            yyOutlier, oRadius));\n                }\n                Collections.sort(outliers);\n            }\n\n            \r\n            \r\n            for (Iterator iterator = outliers.iterator(); iterator.hasNext();) {\n                Outlier outlier = (Outlier) iterator.next();\n                outlierListCollection.add(outlier);\n            }\n\n            for (Iterator iterator = outlierListCollection.iterator();\n                     iterator.hasNext();) {\n                OutlierList list = (OutlierList) iterator.next();\n                Outlier outlier = list.getAveragedOutlier();\n                Point2D point = outlier.getPoint();\n\n                if (list.isMultiple()) {\n                    drawMultipleEllipse(point, state.getBarWidth(), oRadius,\n                            g2);\n                }\n                else {\n                    drawEllipse(point, oRadius, g2);\n                }\n            }\n\n            \r\n            if (outlierListCollection.isHighFarOut()) {\n                drawHighFarOut(aRadius / 2.0, g2,\n                        xx + state.getBarWidth() / 2.0, maxAxisValue);\n            }\n\n            if (outlierListCollection.isLowFarOut()) {\n                drawLowFarOut(aRadius / 2.0, g2,\n                        xx + state.getBarWidth() / 2.0, minAxisValue);\n            }\n        }\n        \r\n        if (state.getInfo() != null && box != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, box);\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":772,"status":"B"}],"commitId":"2228e7e92f418078706f2134d2ecce11888b1cb7","commitMessage":"@@@Move source files to standard Maven location.","date":"2016-02-19 16:24:22","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2016-02-19 16:24:22","codes":[{"authorDate":"2016-07-19 02:55:10","commitOrder":2,"curCode":"    public void drawHorizontalItem(Graphics2D g2, \n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        BoxAndWhiskerCategoryDataset bawDataset\n                = (BoxAndWhiskerCategoryDataset) dataset;\n\n        double categoryEnd = domainAxis.getCategoryEnd(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryStart = domainAxis.getCategoryStart(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryWidth = Math.abs(categoryEnd - categoryStart);\n\n        double yy = categoryStart;\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getHeight() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            double usedWidth = (state.getBarWidth() * seriesCount)\n                               + (seriesGap * (seriesCount - 1));\n            \r\n            \r\n            double offset = (categoryWidth - usedWidth) / 2;\n            yy = yy + offset + (row * (state.getBarWidth() + seriesGap));\n        }\n        else {\n            \r\n            \r\n            double offset = (categoryWidth - state.getBarWidth()) / 2;\n            yy = yy + offset;\n        }\n\n        g2.setPaint(getItemPaint(row, column));\n        Stroke s = getItemStroke(row, column);\n        g2.setStroke(s);\n\n        RectangleEdge location = plot.getRangeAxisEdge();\n\n        Number xQ1 = bawDataset.getQ1Value(row, column);\n        Number xQ3 = bawDataset.getQ3Value(row, column);\n        Number xMax = bawDataset.getMaxRegularValue(row, column);\n        Number xMin = bawDataset.getMinRegularValue(row, column);\n\n        Shape box = null;\n        if (xQ1 != null && xQ3 != null && xMax != null && xMin != null) {\n\n            double xxQ1 = rangeAxis.valueToJava2D(xQ1.doubleValue(), dataArea,\n                    location);\n            double xxQ3 = rangeAxis.valueToJava2D(xQ3.doubleValue(), dataArea,\n                    location);\n            double xxMax = rangeAxis.valueToJava2D(xMax.doubleValue(), dataArea,\n                    location);\n            double xxMin = rangeAxis.valueToJava2D(xMin.doubleValue(), dataArea,\n                    location);\n            double yymid = yy + state.getBarWidth() / 2.0;\n            double halfW = (state.getBarWidth() / 2.0) * this.whiskerWidth;\n\n            \r\n            box = new Rectangle2D.Double(Math.min(xxQ1, xxQ3), yy,\n                    Math.abs(xxQ1 - xxQ3), state.getBarWidth());\n            if (this.fillBox) {\n                g2.fill(box);\n            }\n\n            Paint outlinePaint = getItemOutlinePaint(row, column);\n            if (this.useOutlinePaintForWhiskers) {\n                g2.setPaint(outlinePaint);\n            }\n            \r\n            g2.draw(new Line2D.Double(xxMax, yymid, xxQ3, yymid));\n            g2.draw(new Line2D.Double(xxMax, yymid - halfW, xxMax,\n                    yymid + halfW));\n\n            \r\n            g2.draw(new Line2D.Double(xxMin, yymid, xxQ1, yymid));\n            g2.draw(new Line2D.Double(xxMin, yymid - halfW, xxMin,\n                    yymid + halfW));\n\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(outlinePaint);\n            g2.draw(box);\n        }\n\n        \r\n        g2.setPaint(this.artifactPaint);\n        double aRadius;                 \r\n        if (this.meanVisible) {\n            Number xMean = bawDataset.getMeanValue(row, column);\n            if (xMean != null) {\n                double xxMean = rangeAxis.valueToJava2D(xMean.doubleValue(),\n                        dataArea, location);\n                aRadius = state.getBarWidth() / 4;\n                \r\n                \r\n                if ((xxMean > (dataArea.getMinX() - aRadius))\n                        && (xxMean < (dataArea.getMaxX() + aRadius))) {\n                    Ellipse2D.Double avgEllipse = new Ellipse2D.Double(xxMean\n                            - aRadius, yy + aRadius, aRadius * 2, aRadius * 2);\n                    g2.fill(avgEllipse);\n                    g2.draw(avgEllipse);\n                }\n            }\n        }\n\n        \r\n        if (this.medianVisible) {\n            Number xMedian = bawDataset.getMedianValue(row, column);\n            if (xMedian != null) {\n                double xxMedian = rangeAxis.valueToJava2D(xMedian.doubleValue(),\n                        dataArea, location);\n                g2.draw(new Line2D.Double(xxMedian, yy, xxMedian,\n                        yy + state.getBarWidth()));\n            }\n        }\n\n        \r\n        if (state.getInfo() != null && box != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, box);\n            }\n        }\n\n    }\n","date":"2016-07-19 02:55:10","endLine":756,"groupId":"2222","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"drawHorizontalItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/b3/7002d04e6e620cd7b73d5c7acd1655d56bfd2b.src","preCode":"    public void drawHorizontalItem(Graphics2D g2, \n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        BoxAndWhiskerCategoryDataset bawDataset\n                = (BoxAndWhiskerCategoryDataset) dataset;\n\n        double categoryEnd = domainAxis.getCategoryEnd(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryStart = domainAxis.getCategoryStart(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryWidth = Math.abs(categoryEnd - categoryStart);\n\n        double yy = categoryStart;\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getHeight() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            double usedWidth = (state.getBarWidth() * seriesCount)\n                               + (seriesGap * (seriesCount - 1));\n            \r\n            \r\n            double offset = (categoryWidth - usedWidth) / 2;\n            yy = yy + offset + (row * (state.getBarWidth() + seriesGap));\n        }\n        else {\n            \r\n            \r\n            double offset = (categoryWidth - state.getBarWidth()) / 2;\n            yy = yy + offset;\n        }\n\n        g2.setPaint(getItemPaint(row, column));\n        Stroke s = getItemStroke(row, column);\n        g2.setStroke(s);\n\n        RectangleEdge location = plot.getRangeAxisEdge();\n\n        Number xQ1 = bawDataset.getQ1Value(row, column);\n        Number xQ3 = bawDataset.getQ3Value(row, column);\n        Number xMax = bawDataset.getMaxRegularValue(row, column);\n        Number xMin = bawDataset.getMinRegularValue(row, column);\n\n        Shape box = null;\n        if (xQ1 != null && xQ3 != null && xMax != null && xMin != null) {\n\n            double xxQ1 = rangeAxis.valueToJava2D(xQ1.doubleValue(), dataArea,\n                    location);\n            double xxQ3 = rangeAxis.valueToJava2D(xQ3.doubleValue(), dataArea,\n                    location);\n            double xxMax = rangeAxis.valueToJava2D(xMax.doubleValue(), dataArea,\n                    location);\n            double xxMin = rangeAxis.valueToJava2D(xMin.doubleValue(), dataArea,\n                    location);\n            double yymid = yy + state.getBarWidth() / 2.0;\n            double halfW = (state.getBarWidth() / 2.0) * this.whiskerWidth;\n\n            \r\n            box = new Rectangle2D.Double(Math.min(xxQ1, xxQ3), yy,\n                    Math.abs(xxQ1 - xxQ3), state.getBarWidth());\n            if (this.fillBox) {\n                g2.fill(box);\n            }\n\n            Paint outlinePaint = getItemOutlinePaint(row, column);\n            if (this.useOutlinePaintForWhiskers) {\n                g2.setPaint(outlinePaint);\n            }\n            \r\n            g2.draw(new Line2D.Double(xxMax, yymid, xxQ3, yymid));\n            g2.draw(new Line2D.Double(xxMax, yymid - halfW, xxMax,\n                    yymid + halfW));\n\n            \r\n            g2.draw(new Line2D.Double(xxMin, yymid, xxQ1, yymid));\n            g2.draw(new Line2D.Double(xxMin, yymid - halfW, xxMin,\n                    yy + halfW));\n\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(outlinePaint);\n            g2.draw(box);\n        }\n\n        \r\n        g2.setPaint(this.artifactPaint);\n        double aRadius;                 \r\n        if (this.meanVisible) {\n            Number xMean = bawDataset.getMeanValue(row, column);\n            if (xMean != null) {\n                double xxMean = rangeAxis.valueToJava2D(xMean.doubleValue(),\n                        dataArea, location);\n                aRadius = state.getBarWidth() / 4;\n                \r\n                \r\n                if ((xxMean > (dataArea.getMinX() - aRadius))\n                        && (xxMean < (dataArea.getMaxX() + aRadius))) {\n                    Ellipse2D.Double avgEllipse = new Ellipse2D.Double(xxMean\n                            - aRadius, yy + aRadius, aRadius * 2, aRadius * 2);\n                    g2.fill(avgEllipse);\n                    g2.draw(avgEllipse);\n                }\n            }\n        }\n\n        \r\n        if (this.medianVisible) {\n            Number xMedian = bawDataset.getMedianValue(row, column);\n            if (xMedian != null) {\n                double xxMedian = rangeAxis.valueToJava2D(xMedian.doubleValue(),\n                        dataArea, location);\n                g2.draw(new Line2D.Double(xxMedian, yy, xxMedian,\n                        yy + state.getBarWidth()));\n            }\n        }\n\n        \r\n        if (state.getInfo() != null && box != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, box);\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":630,"status":"M"},{"authorDate":"2016-02-19 16:24:22","commitOrder":2,"curCode":"    public void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state,\n        Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n        ValueAxis rangeAxis, CategoryDataset dataset, int row, int column) {\n\n        BoxAndWhiskerCategoryDataset bawDataset\n                = (BoxAndWhiskerCategoryDataset) dataset;\n\n        double categoryEnd = domainAxis.getCategoryEnd(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryStart = domainAxis.getCategoryStart(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryWidth = categoryEnd - categoryStart;\n\n        double xx = categoryStart;\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getWidth() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            double usedWidth = (state.getBarWidth() * seriesCount)\n                               + (seriesGap * (seriesCount - 1));\n            \r\n            \r\n            double offset = (categoryWidth - usedWidth) / 2;\n            xx = xx + offset + (row * (state.getBarWidth() + seriesGap));\n        }\n        else {\n            \r\n            \r\n            double offset = (categoryWidth - state.getBarWidth()) / 2;\n            xx = xx + offset;\n        }\n\n        double yyAverage;\n        double yyOutlier;\n\n        Paint itemPaint = getItemPaint(row, column);\n        g2.setPaint(itemPaint);\n        Stroke s = getItemStroke(row, column);\n        g2.setStroke(s);\n\n        double aRadius = 0;                 \r\n\n        RectangleEdge location = plot.getRangeAxisEdge();\n\n        Number yQ1 = bawDataset.getQ1Value(row, column);\n        Number yQ3 = bawDataset.getQ3Value(row, column);\n        Number yMax = bawDataset.getMaxRegularValue(row, column);\n        Number yMin = bawDataset.getMinRegularValue(row, column);\n        Shape box = null;\n        if (yQ1 != null && yQ3 != null && yMax != null && yMin != null) {\n\n            double yyQ1 = rangeAxis.valueToJava2D(yQ1.doubleValue(), dataArea,\n                    location);\n            double yyQ3 = rangeAxis.valueToJava2D(yQ3.doubleValue(), dataArea,\n                    location);\n            double yyMax = rangeAxis.valueToJava2D(yMax.doubleValue(),\n                    dataArea, location);\n            double yyMin = rangeAxis.valueToJava2D(yMin.doubleValue(),\n                    dataArea, location);\n            double xxmid = xx + state.getBarWidth() / 2.0;\n            double halfW = (state.getBarWidth() / 2.0) * this.whiskerWidth;\n\n            \r\n            box = new Rectangle2D.Double(xx, Math.min(yyQ1, yyQ3),\n                    state.getBarWidth(), Math.abs(yyQ1 - yyQ3));\n            if (this.fillBox) {\n                g2.fill(box);\n            }\n\n            Paint outlinePaint = getItemOutlinePaint(row, column);\n            if (this.useOutlinePaintForWhiskers) {\n                g2.setPaint(outlinePaint);\n            }\n            \r\n            g2.draw(new Line2D.Double(xxmid, yyMax, xxmid, yyQ3));\n            g2.draw(new Line2D.Double(xxmid - halfW, yyMax, xxmid + halfW, yyMax));\n\n            \r\n            g2.draw(new Line2D.Double(xxmid, yyMin, xxmid, yyQ1));\n            g2.draw(new Line2D.Double(xxmid - halfW, yyMin, xxmid + halfW, yyMin));\n\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(outlinePaint);\n            g2.draw(box);\n        }\n\n        g2.setPaint(this.artifactPaint);\n\n        \r\n        if (this.meanVisible) {\n            Number yMean = bawDataset.getMeanValue(row, column);\n            if (yMean != null) {\n                yyAverage = rangeAxis.valueToJava2D(yMean.doubleValue(),\n                        dataArea, location);\n                aRadius = state.getBarWidth() / 4;\n                \r\n                \r\n                if ((yyAverage > (dataArea.getMinY() - aRadius))\n                        && (yyAverage < (dataArea.getMaxY() + aRadius))) {\n                    Ellipse2D.Double avgEllipse = new Ellipse2D.Double(\n                            xx + aRadius, yyAverage - aRadius, aRadius * 2,\n                            aRadius * 2);\n                    g2.fill(avgEllipse);\n                    g2.draw(avgEllipse);\n                }\n            }\n        }\n\n        \r\n        if (this.medianVisible) {\n            Number yMedian = bawDataset.getMedianValue(row, column);\n            if (yMedian != null) {\n                double yyMedian = rangeAxis.valueToJava2D(\n                        yMedian.doubleValue(), dataArea, location);\n                g2.draw(new Line2D.Double(xx, yyMedian, \n                        xx + state.getBarWidth(), yyMedian));\n            }\n        }\n\n        \r\n        double maxAxisValue = rangeAxis.valueToJava2D(\n                rangeAxis.getUpperBound(), dataArea, location) + aRadius;\n        double minAxisValue = rangeAxis.valueToJava2D(\n                rangeAxis.getLowerBound(), dataArea, location) - aRadius;\n\n        g2.setPaint(itemPaint);\n\n        \r\n        double oRadius = state.getBarWidth() / 3;    \r\n        List outliers = new ArrayList();\n        OutlierListCollection outlierListCollection\n                = new OutlierListCollection();\n\n        \r\n        \r\n        \r\n        List yOutliers = bawDataset.getOutliers(row, column);\n        if (yOutliers != null) {\n            for (int i = 0; i < yOutliers.size(); i++) {\n                double outlier = ((Number) yOutliers.get(i)).doubleValue();\n                Number minOutlier = bawDataset.getMinOutlier(row, column);\n                Number maxOutlier = bawDataset.getMaxOutlier(row, column);\n                Number minRegular = bawDataset.getMinRegularValue(row, column);\n                Number maxRegular = bawDataset.getMaxRegularValue(row, column);\n                if (outlier > maxOutlier.doubleValue()) {\n                    outlierListCollection.setHighFarOut(true);\n                }\n                else if (outlier < minOutlier.doubleValue()) {\n                    outlierListCollection.setLowFarOut(true);\n                }\n                else if (outlier > maxRegular.doubleValue()) {\n                    yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea,\n                            location);\n                    outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,\n                            yyOutlier, oRadius));\n                }\n                else if (outlier < minRegular.doubleValue()) {\n                    yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea,\n                            location);\n                    outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,\n                            yyOutlier, oRadius));\n                }\n                Collections.sort(outliers);\n            }\n\n            \r\n            \r\n            for (Iterator iterator = outliers.iterator(); iterator.hasNext();) {\n                Outlier outlier = (Outlier) iterator.next();\n                outlierListCollection.add(outlier);\n            }\n\n            for (Iterator iterator = outlierListCollection.iterator();\n                     iterator.hasNext();) {\n                OutlierList list = (OutlierList) iterator.next();\n                Outlier outlier = list.getAveragedOutlier();\n                Point2D point = outlier.getPoint();\n\n                if (list.isMultiple()) {\n                    drawMultipleEllipse(point, state.getBarWidth(), oRadius,\n                            g2);\n                }\n                else {\n                    drawEllipse(point, oRadius, g2);\n                }\n            }\n\n            \r\n            if (outlierListCollection.isHighFarOut()) {\n                drawHighFarOut(aRadius / 2.0, g2,\n                        xx + state.getBarWidth() / 2.0, maxAxisValue);\n            }\n\n            if (outlierListCollection.isLowFarOut()) {\n                drawLowFarOut(aRadius / 2.0, g2,\n                        xx + state.getBarWidth() / 2.0, minAxisValue);\n            }\n        }\n        \r\n        if (state.getInfo() != null && box != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, box);\n            }\n        }\n\n    }\n","date":"2016-02-19 16:24:22","endLine":980,"groupId":"2223","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"drawVerticalItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/0c/33f55a82b28ea1e81dcdfc7af660745333fbed.src","preCode":"    public void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state,\n        Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n        ValueAxis rangeAxis, CategoryDataset dataset, int row, int column) {\n\n        BoxAndWhiskerCategoryDataset bawDataset\n                = (BoxAndWhiskerCategoryDataset) dataset;\n\n        double categoryEnd = domainAxis.getCategoryEnd(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryStart = domainAxis.getCategoryStart(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryWidth = categoryEnd - categoryStart;\n\n        double xx = categoryStart;\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getWidth() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            double usedWidth = (state.getBarWidth() * seriesCount)\n                               + (seriesGap * (seriesCount - 1));\n            \r\n            \r\n            double offset = (categoryWidth - usedWidth) / 2;\n            xx = xx + offset + (row * (state.getBarWidth() + seriesGap));\n        }\n        else {\n            \r\n            \r\n            double offset = (categoryWidth - state.getBarWidth()) / 2;\n            xx = xx + offset;\n        }\n\n        double yyAverage;\n        double yyOutlier;\n\n        Paint itemPaint = getItemPaint(row, column);\n        g2.setPaint(itemPaint);\n        Stroke s = getItemStroke(row, column);\n        g2.setStroke(s);\n\n        double aRadius = 0;                 \r\n\n        RectangleEdge location = plot.getRangeAxisEdge();\n\n        Number yQ1 = bawDataset.getQ1Value(row, column);\n        Number yQ3 = bawDataset.getQ3Value(row, column);\n        Number yMax = bawDataset.getMaxRegularValue(row, column);\n        Number yMin = bawDataset.getMinRegularValue(row, column);\n        Shape box = null;\n        if (yQ1 != null && yQ3 != null && yMax != null && yMin != null) {\n\n            double yyQ1 = rangeAxis.valueToJava2D(yQ1.doubleValue(), dataArea,\n                    location);\n            double yyQ3 = rangeAxis.valueToJava2D(yQ3.doubleValue(), dataArea,\n                    location);\n            double yyMax = rangeAxis.valueToJava2D(yMax.doubleValue(),\n                    dataArea, location);\n            double yyMin = rangeAxis.valueToJava2D(yMin.doubleValue(),\n                    dataArea, location);\n            double xxmid = xx + state.getBarWidth() / 2.0;\n            double halfW = (state.getBarWidth() / 2.0) * this.whiskerWidth;\n\n            \r\n            box = new Rectangle2D.Double(xx, Math.min(yyQ1, yyQ3),\n                    state.getBarWidth(), Math.abs(yyQ1 - yyQ3));\n            if (this.fillBox) {\n                g2.fill(box);\n            }\n\n            Paint outlinePaint = getItemOutlinePaint(row, column);\n            if (this.useOutlinePaintForWhiskers) {\n                g2.setPaint(outlinePaint);\n            }\n            \r\n            g2.draw(new Line2D.Double(xxmid, yyMax, xxmid, yyQ3));\n            g2.draw(new Line2D.Double(xxmid - halfW, yyMax, xxmid + halfW, yyMax));\n\n            \r\n            g2.draw(new Line2D.Double(xxmid, yyMin, xxmid, yyQ1));\n            g2.draw(new Line2D.Double(xxmid - halfW, yyMin, xxmid + halfW, yyMin));\n\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(outlinePaint);\n            g2.draw(box);\n        }\n\n        g2.setPaint(this.artifactPaint);\n\n        \r\n        if (this.meanVisible) {\n            Number yMean = bawDataset.getMeanValue(row, column);\n            if (yMean != null) {\n                yyAverage = rangeAxis.valueToJava2D(yMean.doubleValue(),\n                        dataArea, location);\n                aRadius = state.getBarWidth() / 4;\n                \r\n                \r\n                if ((yyAverage > (dataArea.getMinY() - aRadius))\n                        && (yyAverage < (dataArea.getMaxY() + aRadius))) {\n                    Ellipse2D.Double avgEllipse = new Ellipse2D.Double(\n                            xx + aRadius, yyAverage - aRadius, aRadius * 2,\n                            aRadius * 2);\n                    g2.fill(avgEllipse);\n                    g2.draw(avgEllipse);\n                }\n            }\n        }\n\n        \r\n        if (this.medianVisible) {\n            Number yMedian = bawDataset.getMedianValue(row, column);\n            if (yMedian != null) {\n                double yyMedian = rangeAxis.valueToJava2D(\n                        yMedian.doubleValue(), dataArea, location);\n                g2.draw(new Line2D.Double(xx, yyMedian, \n                        xx + state.getBarWidth(), yyMedian));\n            }\n        }\n\n        \r\n        double maxAxisValue = rangeAxis.valueToJava2D(\n                rangeAxis.getUpperBound(), dataArea, location) + aRadius;\n        double minAxisValue = rangeAxis.valueToJava2D(\n                rangeAxis.getLowerBound(), dataArea, location) - aRadius;\n\n        g2.setPaint(itemPaint);\n\n        \r\n        double oRadius = state.getBarWidth() / 3;    \r\n        List outliers = new ArrayList();\n        OutlierListCollection outlierListCollection\n                = new OutlierListCollection();\n\n        \r\n        \r\n        \r\n        List yOutliers = bawDataset.getOutliers(row, column);\n        if (yOutliers != null) {\n            for (int i = 0; i < yOutliers.size(); i++) {\n                double outlier = ((Number) yOutliers.get(i)).doubleValue();\n                Number minOutlier = bawDataset.getMinOutlier(row, column);\n                Number maxOutlier = bawDataset.getMaxOutlier(row, column);\n                Number minRegular = bawDataset.getMinRegularValue(row, column);\n                Number maxRegular = bawDataset.getMaxRegularValue(row, column);\n                if (outlier > maxOutlier.doubleValue()) {\n                    outlierListCollection.setHighFarOut(true);\n                }\n                else if (outlier < minOutlier.doubleValue()) {\n                    outlierListCollection.setLowFarOut(true);\n                }\n                else if (outlier > maxRegular.doubleValue()) {\n                    yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea,\n                            location);\n                    outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,\n                            yyOutlier, oRadius));\n                }\n                else if (outlier < minRegular.doubleValue()) {\n                    yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea,\n                            location);\n                    outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,\n                            yyOutlier, oRadius));\n                }\n                Collections.sort(outliers);\n            }\n\n            \r\n            \r\n            for (Iterator iterator = outliers.iterator(); iterator.hasNext();) {\n                Outlier outlier = (Outlier) iterator.next();\n                outlierListCollection.add(outlier);\n            }\n\n            for (Iterator iterator = outlierListCollection.iterator();\n                     iterator.hasNext();) {\n                OutlierList list = (OutlierList) iterator.next();\n                Outlier outlier = list.getAveragedOutlier();\n                Point2D point = outlier.getPoint();\n\n                if (list.isMultiple()) {\n                    drawMultipleEllipse(point, state.getBarWidth(), oRadius,\n                            g2);\n                }\n                else {\n                    drawEllipse(point, oRadius, g2);\n                }\n            }\n\n            \r\n            if (outlierListCollection.isHighFarOut()) {\n                drawHighFarOut(aRadius / 2.0, g2,\n                        xx + state.getBarWidth() / 2.0, maxAxisValue);\n            }\n\n            if (outlierListCollection.isLowFarOut()) {\n                drawLowFarOut(aRadius / 2.0, g2,\n                        xx + state.getBarWidth() / 2.0, minAxisValue);\n            }\n        }\n        \r\n        if (state.getInfo() != null && box != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, box);\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":772,"status":"N"}],"commitId":"726f7c4ace0e5dff6abe723c110fedd03b3dac52","commitMessage":"@@@Fix rendering issue for horizontal orientation.","date":"2016-07-19 02:55:10","modifiedFileCount":"1","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-11-15 19:22:35","codes":[{"authorDate":"2016-07-19 02:55:10","commitOrder":3,"curCode":"    public void drawHorizontalItem(Graphics2D g2, \n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        BoxAndWhiskerCategoryDataset bawDataset\n                = (BoxAndWhiskerCategoryDataset) dataset;\n\n        double categoryEnd = domainAxis.getCategoryEnd(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryStart = domainAxis.getCategoryStart(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryWidth = Math.abs(categoryEnd - categoryStart);\n\n        double yy = categoryStart;\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getHeight() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            double usedWidth = (state.getBarWidth() * seriesCount)\n                               + (seriesGap * (seriesCount - 1));\n            \r\n            \r\n            double offset = (categoryWidth - usedWidth) / 2;\n            yy = yy + offset + (row * (state.getBarWidth() + seriesGap));\n        }\n        else {\n            \r\n            \r\n            double offset = (categoryWidth - state.getBarWidth()) / 2;\n            yy = yy + offset;\n        }\n\n        g2.setPaint(getItemPaint(row, column));\n        Stroke s = getItemStroke(row, column);\n        g2.setStroke(s);\n\n        RectangleEdge location = plot.getRangeAxisEdge();\n\n        Number xQ1 = bawDataset.getQ1Value(row, column);\n        Number xQ3 = bawDataset.getQ3Value(row, column);\n        Number xMax = bawDataset.getMaxRegularValue(row, column);\n        Number xMin = bawDataset.getMinRegularValue(row, column);\n\n        Shape box = null;\n        if (xQ1 != null && xQ3 != null && xMax != null && xMin != null) {\n\n            double xxQ1 = rangeAxis.valueToJava2D(xQ1.doubleValue(), dataArea,\n                    location);\n            double xxQ3 = rangeAxis.valueToJava2D(xQ3.doubleValue(), dataArea,\n                    location);\n            double xxMax = rangeAxis.valueToJava2D(xMax.doubleValue(), dataArea,\n                    location);\n            double xxMin = rangeAxis.valueToJava2D(xMin.doubleValue(), dataArea,\n                    location);\n            double yymid = yy + state.getBarWidth() / 2.0;\n            double halfW = (state.getBarWidth() / 2.0) * this.whiskerWidth;\n\n            \r\n            box = new Rectangle2D.Double(Math.min(xxQ1, xxQ3), yy,\n                    Math.abs(xxQ1 - xxQ3), state.getBarWidth());\n            if (this.fillBox) {\n                g2.fill(box);\n            }\n\n            Paint outlinePaint = getItemOutlinePaint(row, column);\n            if (this.useOutlinePaintForWhiskers) {\n                g2.setPaint(outlinePaint);\n            }\n            \r\n            g2.draw(new Line2D.Double(xxMax, yymid, xxQ3, yymid));\n            g2.draw(new Line2D.Double(xxMax, yymid - halfW, xxMax,\n                    yymid + halfW));\n\n            \r\n            g2.draw(new Line2D.Double(xxMin, yymid, xxQ1, yymid));\n            g2.draw(new Line2D.Double(xxMin, yymid - halfW, xxMin,\n                    yymid + halfW));\n\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(outlinePaint);\n            g2.draw(box);\n        }\n\n        \r\n        g2.setPaint(this.artifactPaint);\n        double aRadius;                 \r\n        if (this.meanVisible) {\n            Number xMean = bawDataset.getMeanValue(row, column);\n            if (xMean != null) {\n                double xxMean = rangeAxis.valueToJava2D(xMean.doubleValue(),\n                        dataArea, location);\n                aRadius = state.getBarWidth() / 4;\n                \r\n                \r\n                if ((xxMean > (dataArea.getMinX() - aRadius))\n                        && (xxMean < (dataArea.getMaxX() + aRadius))) {\n                    Ellipse2D.Double avgEllipse = new Ellipse2D.Double(xxMean\n                            - aRadius, yy + aRadius, aRadius * 2, aRadius * 2);\n                    g2.fill(avgEllipse);\n                    g2.draw(avgEllipse);\n                }\n            }\n        }\n\n        \r\n        if (this.medianVisible) {\n            Number xMedian = bawDataset.getMedianValue(row, column);\n            if (xMedian != null) {\n                double xxMedian = rangeAxis.valueToJava2D(xMedian.doubleValue(),\n                        dataArea, location);\n                g2.draw(new Line2D.Double(xxMedian, yy, xxMedian,\n                        yy + state.getBarWidth()));\n            }\n        }\n\n        \r\n        if (state.getInfo() != null && box != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, box);\n            }\n        }\n\n    }\n","date":"2016-07-19 02:55:10","endLine":756,"groupId":"101660","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"drawHorizontalItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/b3/7002d04e6e620cd7b73d5c7acd1655d56bfd2b.src","preCode":"    public void drawHorizontalItem(Graphics2D g2, \n            CategoryItemRendererState state, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column) {\n\n        BoxAndWhiskerCategoryDataset bawDataset\n                = (BoxAndWhiskerCategoryDataset) dataset;\n\n        double categoryEnd = domainAxis.getCategoryEnd(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryStart = domainAxis.getCategoryStart(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryWidth = Math.abs(categoryEnd - categoryStart);\n\n        double yy = categoryStart;\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getHeight() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            double usedWidth = (state.getBarWidth() * seriesCount)\n                               + (seriesGap * (seriesCount - 1));\n            \r\n            \r\n            double offset = (categoryWidth - usedWidth) / 2;\n            yy = yy + offset + (row * (state.getBarWidth() + seriesGap));\n        }\n        else {\n            \r\n            \r\n            double offset = (categoryWidth - state.getBarWidth()) / 2;\n            yy = yy + offset;\n        }\n\n        g2.setPaint(getItemPaint(row, column));\n        Stroke s = getItemStroke(row, column);\n        g2.setStroke(s);\n\n        RectangleEdge location = plot.getRangeAxisEdge();\n\n        Number xQ1 = bawDataset.getQ1Value(row, column);\n        Number xQ3 = bawDataset.getQ3Value(row, column);\n        Number xMax = bawDataset.getMaxRegularValue(row, column);\n        Number xMin = bawDataset.getMinRegularValue(row, column);\n\n        Shape box = null;\n        if (xQ1 != null && xQ3 != null && xMax != null && xMin != null) {\n\n            double xxQ1 = rangeAxis.valueToJava2D(xQ1.doubleValue(), dataArea,\n                    location);\n            double xxQ3 = rangeAxis.valueToJava2D(xQ3.doubleValue(), dataArea,\n                    location);\n            double xxMax = rangeAxis.valueToJava2D(xMax.doubleValue(), dataArea,\n                    location);\n            double xxMin = rangeAxis.valueToJava2D(xMin.doubleValue(), dataArea,\n                    location);\n            double yymid = yy + state.getBarWidth() / 2.0;\n            double halfW = (state.getBarWidth() / 2.0) * this.whiskerWidth;\n\n            \r\n            box = new Rectangle2D.Double(Math.min(xxQ1, xxQ3), yy,\n                    Math.abs(xxQ1 - xxQ3), state.getBarWidth());\n            if (this.fillBox) {\n                g2.fill(box);\n            }\n\n            Paint outlinePaint = getItemOutlinePaint(row, column);\n            if (this.useOutlinePaintForWhiskers) {\n                g2.setPaint(outlinePaint);\n            }\n            \r\n            g2.draw(new Line2D.Double(xxMax, yymid, xxQ3, yymid));\n            g2.draw(new Line2D.Double(xxMax, yymid - halfW, xxMax,\n                    yymid + halfW));\n\n            \r\n            g2.draw(new Line2D.Double(xxMin, yymid, xxQ1, yymid));\n            g2.draw(new Line2D.Double(xxMin, yymid - halfW, xxMin,\n                    yymid + halfW));\n\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(outlinePaint);\n            g2.draw(box);\n        }\n\n        \r\n        g2.setPaint(this.artifactPaint);\n        double aRadius;                 \r\n        if (this.meanVisible) {\n            Number xMean = bawDataset.getMeanValue(row, column);\n            if (xMean != null) {\n                double xxMean = rangeAxis.valueToJava2D(xMean.doubleValue(),\n                        dataArea, location);\n                aRadius = state.getBarWidth() / 4;\n                \r\n                \r\n                if ((xxMean > (dataArea.getMinX() - aRadius))\n                        && (xxMean < (dataArea.getMaxX() + aRadius))) {\n                    Ellipse2D.Double avgEllipse = new Ellipse2D.Double(xxMean\n                            - aRadius, yy + aRadius, aRadius * 2, aRadius * 2);\n                    g2.fill(avgEllipse);\n                    g2.draw(avgEllipse);\n                }\n            }\n        }\n\n        \r\n        if (this.medianVisible) {\n            Number xMedian = bawDataset.getMedianValue(row, column);\n            if (xMedian != null) {\n                double xxMedian = rangeAxis.valueToJava2D(xMedian.doubleValue(),\n                        dataArea, location);\n                g2.draw(new Line2D.Double(xxMedian, yy, xxMedian,\n                        yy + state.getBarWidth()));\n            }\n        }\n\n        \r\n        if (state.getInfo() != null && box != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, box);\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":630,"status":"N"},{"authorDate":"2020-11-15 19:22:35","commitOrder":3,"curCode":"    public void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state,\n        Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n        ValueAxis rangeAxis, CategoryDataset dataset, int row, int column) {\n\n        BoxAndWhiskerCategoryDataset bawDataset\n                = (BoxAndWhiskerCategoryDataset) dataset;\n\n        double categoryEnd = domainAxis.getCategoryEnd(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryStart = domainAxis.getCategoryStart(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryWidth = categoryEnd - categoryStart;\n\n        double xx = categoryStart;\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getWidth() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            double usedWidth = (state.getBarWidth() * seriesCount)\n                               + (seriesGap * (seriesCount - 1));\n            \r\n            \r\n            double offset = (categoryWidth - usedWidth) / 2;\n            xx = xx + offset + (row * (state.getBarWidth() + seriesGap));\n        }\n        else {\n            \r\n            \r\n            double offset = (categoryWidth - state.getBarWidth()) / 2;\n            xx = xx + offset;\n        }\n\n        double yyAverage;\n        double yyOutlier;\n\n        Paint itemPaint = getItemPaint(row, column);\n        g2.setPaint(itemPaint);\n        Stroke s = getItemStroke(row, column);\n        g2.setStroke(s);\n\n        double aRadius = 0;                 \r\n\n        RectangleEdge location = plot.getRangeAxisEdge();\n\n        Number yQ1 = bawDataset.getQ1Value(row, column);\n        Number yQ3 = bawDataset.getQ3Value(row, column);\n        Number yMax = bawDataset.getMaxRegularValue(row, column);\n        Number yMin = bawDataset.getMinRegularValue(row, column);\n        Shape box = null;\n        if (yQ1 != null && yQ3 != null && yMax != null && yMin != null) {\n\n            double yyQ1 = rangeAxis.valueToJava2D(yQ1.doubleValue(), dataArea,\n                    location);\n            double yyQ3 = rangeAxis.valueToJava2D(yQ3.doubleValue(), dataArea,\n                    location);\n            double yyMax = rangeAxis.valueToJava2D(yMax.doubleValue(),\n                    dataArea, location);\n            double yyMin = rangeAxis.valueToJava2D(yMin.doubleValue(),\n                    dataArea, location);\n            double xxmid = xx + state.getBarWidth() / 2.0;\n            double halfW = (state.getBarWidth() / 2.0) * this.whiskerWidth;\n\n            \r\n            box = new Rectangle2D.Double(xx, Math.min(yyQ1, yyQ3),\n                    state.getBarWidth(), Math.abs(yyQ1 - yyQ3));\n            if (this.fillBox) {\n                g2.fill(box);\n            }\n\n            Paint outlinePaint = getItemOutlinePaint(row, column);\n            if (this.useOutlinePaintForWhiskers) {\n                g2.setPaint(outlinePaint);\n            }\n            \r\n            g2.draw(new Line2D.Double(xxmid, yyMax, xxmid, yyQ3));\n            g2.draw(new Line2D.Double(xxmid - halfW, yyMax, xxmid + halfW, yyMax));\n\n            \r\n            g2.draw(new Line2D.Double(xxmid, yyMin, xxmid, yyQ1));\n            g2.draw(new Line2D.Double(xxmid - halfW, yyMin, xxmid + halfW, yyMin));\n\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(outlinePaint);\n            g2.draw(box);\n        }\n\n        g2.setPaint(this.artifactPaint);\n\n        \r\n        if (this.meanVisible) {\n            Number yMean = bawDataset.getMeanValue(row, column);\n            if (yMean != null) {\n                yyAverage = rangeAxis.valueToJava2D(yMean.doubleValue(),\n                        dataArea, location);\n                aRadius = state.getBarWidth() / 4;\n                \r\n                \r\n                if ((yyAverage > (dataArea.getMinY() - aRadius))\n                        && (yyAverage < (dataArea.getMaxY() + aRadius))) {\n                    Ellipse2D.Double avgEllipse = new Ellipse2D.Double(\n                            xx + aRadius, yyAverage - aRadius, aRadius * 2,\n                            aRadius * 2);\n                    g2.fill(avgEllipse);\n                    g2.draw(avgEllipse);\n                }\n            }\n        }\n\n        \r\n        if (this.medianVisible) {\n            Number yMedian = bawDataset.getMedianValue(row, column);\n            if (yMedian != null) {\n                double yyMedian = rangeAxis.valueToJava2D(\n                        yMedian.doubleValue(), dataArea, location);\n                g2.draw(new Line2D.Double(xx, yyMedian, \n                        xx + state.getBarWidth(), yyMedian));\n            }\n        }\n\n        \r\n        double maxAxisValue = rangeAxis.valueToJava2D(\n                rangeAxis.getUpperBound(), dataArea, location) + aRadius;\n        double minAxisValue = rangeAxis.valueToJava2D(\n                rangeAxis.getLowerBound(), dataArea, location) - aRadius;\n\n        g2.setPaint(itemPaint);\n\n        \r\n        double oRadius = state.getBarWidth() / 3;    \r\n        List outliers = new ArrayList();\n        OutlierListCollection outlierListCollection\n                = new OutlierListCollection();\n\n        \r\n        \r\n        \r\n        List yOutliers = bawDataset.getOutliers(row, column);\n        if (yOutliers != null) {\n            for (int i = 0; i < yOutliers.size(); i++) {\n                double outlier = ((Number) yOutliers.get(i)).doubleValue();\n                Number minOutlier = bawDataset.getMinOutlier(row, column);\n                Number maxOutlier = bawDataset.getMaxOutlier(row, column);\n                Number minRegular = bawDataset.getMinRegularValue(row, column);\n                Number maxRegular = bawDataset.getMaxRegularValue(row, column);\n                if (outlier > maxOutlier.doubleValue()) {\n                    outlierListCollection.setHighFarOut(true);\n                } else if (outlier < minOutlier.doubleValue()) {\n                    outlierListCollection.setLowFarOut(true);\n                } else if (outlier > maxRegular.doubleValue()) {\n                    yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea,\n                            location);\n                    outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,\n                            yyOutlier, oRadius));\n                } else if (outlier < minRegular.doubleValue()) {\n                    yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea,\n                            location);\n                    outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,\n                            yyOutlier, oRadius));\n                }\n                Collections.sort(outliers);\n            }\n\n            \r\n            \r\n            for (Iterator iterator = outliers.iterator(); iterator.hasNext();) {\n                Outlier outlier = (Outlier) iterator.next();\n                outlierListCollection.add(outlier);\n            }\n\n            for (Iterator iterator = outlierListCollection.iterator();\n                     iterator.hasNext();) {\n                OutlierList list = (OutlierList) iterator.next();\n                Outlier outlier = list.getAveragedOutlier();\n                Point2D point = outlier.getPoint();\n\n                if (list.isMultiple()) {\n                    drawMultipleEllipse(point, state.getBarWidth(), oRadius,\n                            g2);\n                } else {\n                    drawEllipse(point, oRadius, g2);\n                }\n            }\n\n            \r\n            if (isMaxOutlierVisible() && outlierListCollection.isHighFarOut()) {\n                drawHighFarOut(aRadius / 2.0, g2,\n                        xx + state.getBarWidth() / 2.0, maxAxisValue);\n            }\n\n            if (isMinOutlierVisible() && outlierListCollection.isLowFarOut()) {\n                drawLowFarOut(aRadius / 2.0, g2,\n                        xx + state.getBarWidth() / 2.0, minAxisValue);\n            }\n        }\n        \r\n        if (state.getInfo() != null && box != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, box);\n            }\n        }\n\n    }\n","date":"2020-11-15 19:22:35","endLine":1006,"groupId":"101660","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"drawVerticalItem","params":"(Graphics2Dg2@CategoryItemRendererStatestate@Rectangle2DdataArea@CategoryPlotplot@CategoryAxisdomainAxis@ValueAxisrangeAxis@CategoryDatasetdataset@introw@intcolumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/6b/83050ee318e3b7ea035442dcd0e4dd0fdc94ef.src","preCode":"    public void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state,\n        Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n        ValueAxis rangeAxis, CategoryDataset dataset, int row, int column) {\n\n        BoxAndWhiskerCategoryDataset bawDataset\n                = (BoxAndWhiskerCategoryDataset) dataset;\n\n        double categoryEnd = domainAxis.getCategoryEnd(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryStart = domainAxis.getCategoryStart(column,\n                getColumnCount(), dataArea, plot.getDomainAxisEdge());\n        double categoryWidth = categoryEnd - categoryStart;\n\n        double xx = categoryStart;\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getWidth() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            double usedWidth = (state.getBarWidth() * seriesCount)\n                               + (seriesGap * (seriesCount - 1));\n            \r\n            \r\n            double offset = (categoryWidth - usedWidth) / 2;\n            xx = xx + offset + (row * (state.getBarWidth() + seriesGap));\n        }\n        else {\n            \r\n            \r\n            double offset = (categoryWidth - state.getBarWidth()) / 2;\n            xx = xx + offset;\n        }\n\n        double yyAverage;\n        double yyOutlier;\n\n        Paint itemPaint = getItemPaint(row, column);\n        g2.setPaint(itemPaint);\n        Stroke s = getItemStroke(row, column);\n        g2.setStroke(s);\n\n        double aRadius = 0;                 \r\n\n        RectangleEdge location = plot.getRangeAxisEdge();\n\n        Number yQ1 = bawDataset.getQ1Value(row, column);\n        Number yQ3 = bawDataset.getQ3Value(row, column);\n        Number yMax = bawDataset.getMaxRegularValue(row, column);\n        Number yMin = bawDataset.getMinRegularValue(row, column);\n        Shape box = null;\n        if (yQ1 != null && yQ3 != null && yMax != null && yMin != null) {\n\n            double yyQ1 = rangeAxis.valueToJava2D(yQ1.doubleValue(), dataArea,\n                    location);\n            double yyQ3 = rangeAxis.valueToJava2D(yQ3.doubleValue(), dataArea,\n                    location);\n            double yyMax = rangeAxis.valueToJava2D(yMax.doubleValue(),\n                    dataArea, location);\n            double yyMin = rangeAxis.valueToJava2D(yMin.doubleValue(),\n                    dataArea, location);\n            double xxmid = xx + state.getBarWidth() / 2.0;\n            double halfW = (state.getBarWidth() / 2.0) * this.whiskerWidth;\n\n            \r\n            box = new Rectangle2D.Double(xx, Math.min(yyQ1, yyQ3),\n                    state.getBarWidth(), Math.abs(yyQ1 - yyQ3));\n            if (this.fillBox) {\n                g2.fill(box);\n            }\n\n            Paint outlinePaint = getItemOutlinePaint(row, column);\n            if (this.useOutlinePaintForWhiskers) {\n                g2.setPaint(outlinePaint);\n            }\n            \r\n            g2.draw(new Line2D.Double(xxmid, yyMax, xxmid, yyQ3));\n            g2.draw(new Line2D.Double(xxmid - halfW, yyMax, xxmid + halfW, yyMax));\n\n            \r\n            g2.draw(new Line2D.Double(xxmid, yyMin, xxmid, yyQ1));\n            g2.draw(new Line2D.Double(xxmid - halfW, yyMin, xxmid + halfW, yyMin));\n\n            g2.setStroke(getItemOutlineStroke(row, column));\n            g2.setPaint(outlinePaint);\n            g2.draw(box);\n        }\n\n        g2.setPaint(this.artifactPaint);\n\n        \r\n        if (this.meanVisible) {\n            Number yMean = bawDataset.getMeanValue(row, column);\n            if (yMean != null) {\n                yyAverage = rangeAxis.valueToJava2D(yMean.doubleValue(),\n                        dataArea, location);\n                aRadius = state.getBarWidth() / 4;\n                \r\n                \r\n                if ((yyAverage > (dataArea.getMinY() - aRadius))\n                        && (yyAverage < (dataArea.getMaxY() + aRadius))) {\n                    Ellipse2D.Double avgEllipse = new Ellipse2D.Double(\n                            xx + aRadius, yyAverage - aRadius, aRadius * 2,\n                            aRadius * 2);\n                    g2.fill(avgEllipse);\n                    g2.draw(avgEllipse);\n                }\n            }\n        }\n\n        \r\n        if (this.medianVisible) {\n            Number yMedian = bawDataset.getMedianValue(row, column);\n            if (yMedian != null) {\n                double yyMedian = rangeAxis.valueToJava2D(\n                        yMedian.doubleValue(), dataArea, location);\n                g2.draw(new Line2D.Double(xx, yyMedian, \n                        xx + state.getBarWidth(), yyMedian));\n            }\n        }\n\n        \r\n        double maxAxisValue = rangeAxis.valueToJava2D(\n                rangeAxis.getUpperBound(), dataArea, location) + aRadius;\n        double minAxisValue = rangeAxis.valueToJava2D(\n                rangeAxis.getLowerBound(), dataArea, location) - aRadius;\n\n        g2.setPaint(itemPaint);\n\n        \r\n        double oRadius = state.getBarWidth() / 3;    \r\n        List outliers = new ArrayList();\n        OutlierListCollection outlierListCollection\n                = new OutlierListCollection();\n\n        \r\n        \r\n        \r\n        List yOutliers = bawDataset.getOutliers(row, column);\n        if (yOutliers != null) {\n            for (int i = 0; i < yOutliers.size(); i++) {\n                double outlier = ((Number) yOutliers.get(i)).doubleValue();\n                Number minOutlier = bawDataset.getMinOutlier(row, column);\n                Number maxOutlier = bawDataset.getMaxOutlier(row, column);\n                Number minRegular = bawDataset.getMinRegularValue(row, column);\n                Number maxRegular = bawDataset.getMaxRegularValue(row, column);\n                if (outlier > maxOutlier.doubleValue()) {\n                    outlierListCollection.setHighFarOut(true);\n                }\n                else if (outlier < minOutlier.doubleValue()) {\n                    outlierListCollection.setLowFarOut(true);\n                }\n                else if (outlier > maxRegular.doubleValue()) {\n                    yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea,\n                            location);\n                    outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,\n                            yyOutlier, oRadius));\n                }\n                else if (outlier < minRegular.doubleValue()) {\n                    yyOutlier = rangeAxis.valueToJava2D(outlier, dataArea,\n                            location);\n                    outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,\n                            yyOutlier, oRadius));\n                }\n                Collections.sort(outliers);\n            }\n\n            \r\n            \r\n            for (Iterator iterator = outliers.iterator(); iterator.hasNext();) {\n                Outlier outlier = (Outlier) iterator.next();\n                outlierListCollection.add(outlier);\n            }\n\n            for (Iterator iterator = outlierListCollection.iterator();\n                     iterator.hasNext();) {\n                OutlierList list = (OutlierList) iterator.next();\n                Outlier outlier = list.getAveragedOutlier();\n                Point2D point = outlier.getPoint();\n\n                if (list.isMultiple()) {\n                    drawMultipleEllipse(point, state.getBarWidth(), oRadius,\n                            g2);\n                }\n                else {\n                    drawEllipse(point, oRadius, g2);\n                }\n            }\n\n            \r\n            if (outlierListCollection.isHighFarOut()) {\n                drawHighFarOut(aRadius / 2.0, g2,\n                        xx + state.getBarWidth() / 2.0, maxAxisValue);\n            }\n\n            if (outlierListCollection.isLowFarOut()) {\n                drawLowFarOut(aRadius / 2.0, g2,\n                        xx + state.getBarWidth() / 2.0, minAxisValue);\n            }\n        }\n        \r\n        if (state.getInfo() != null && box != null) {\n            EntityCollection entities = state.getEntityCollection();\n            if (entities != null) {\n                addItemEntity(entities, dataset, row, column, box);\n            }\n        }\n\n    }\n","realPath":"src/main/java/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":802,"status":"M"}],"commitId":"c1a6c13526273a319319d2dc8979e5b5b2c97531","commitMessage":"@@@Add flags for min and max outliers as suggested in #79.","date":"2020-11-15 19:22:35","modifiedFileCount":"2","status":"M","submitter":"David Gilbert"}]
