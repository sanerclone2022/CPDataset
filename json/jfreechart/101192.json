[{"authorTime":"2016-02-19 15:40:32","codes":[{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testEquals() {\n        TimeSeries s1 = new TimeSeries(\"Time Series 1\");\n        TimeSeries s2 = new TimeSeries(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n        s1.setMaximumItemCount(100);\n        boolean b5 = s1.equals(s2);\n        assertFalse(\"b5\", b5);\n\n        s2.setMaximumItemCount(100);\n        boolean b6 = s1.equals(s2);\n        assertTrue(\"b6\", b6);\n\n        s1.setMaximumItemAge(100);\n        boolean b7 = s1.equals(s2);\n        assertFalse(\"b7\", b7);\n\n        s2.setMaximumItemAge(100);\n        boolean b8 = s1.equals(s2);\n        assertTrue(\"b8\", b8);\n    }\n","date":"2016-02-19 15:40:32","endLine":330,"groupId":"3452","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/84/35a22af8ec31b47679df84f67a6546dd39ace8.src","preCode":"    public void testEquals() {\n        TimeSeries s1 = new TimeSeries(\"Time Series 1\");\n        TimeSeries s2 = new TimeSeries(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n        s1.setMaximumItemCount(100);\n        boolean b5 = s1.equals(s2);\n        assertFalse(\"b5\", b5);\n\n        s2.setMaximumItemCount(100);\n        boolean b6 = s1.equals(s2);\n        assertTrue(\"b6\", b6);\n\n        s1.setMaximumItemAge(100);\n        boolean b7 = s1.equals(s2);\n        assertFalse(\"b7\", b7);\n\n        s2.setMaximumItemAge(100);\n        boolean b8 = s1.equals(s2);\n        assertTrue(\"b8\", b8);\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"B"},{"authorDate":"2016-02-19 15:40:32","commitOrder":1,"curCode":"    public void testEquals() {\n        TimePeriodValues s1 = new TimePeriodValues(\"Time Series 1\");\n        TimePeriodValues s2 = new TimePeriodValues(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        \r\n        s1.setDomainDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setDomainDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(null);\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setRangeDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setRangeDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(null);\n        assertTrue(s1.equals(s2));\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n    }\n","date":"2016-02-19 15:40:32","endLine":196,"groupId":"227","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/d5/ff7771f3053e32f16b6d1905caae1cef2f6551.src","preCode":"    public void testEquals() {\n        TimePeriodValues s1 = new TimePeriodValues(\"Time Series 1\");\n        TimePeriodValues s2 = new TimePeriodValues(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        \r\n        s1.setDomainDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setDomainDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(null);\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setRangeDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setRangeDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(null);\n        assertTrue(s1.equals(s2));\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimePeriodValuesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"}],"commitId":"1b18adfb8102c34c9287ece406b9dde5751b90b5","commitMessage":"@@@Move test files to standard Maven location.","date":"2016-02-19 15:40:32","modifiedFileCount":"0","status":"B","submitter":"David Gilbert"},{"authorTime":"2020-03-22 19:36:23","codes":[{"authorDate":"2020-03-22 19:36:23","commitOrder":2,"curCode":"    public void testEquals() {\n        TimeSeries<String> s1 = new TimeSeries<>(\"Time Series 1\");\n        TimeSeries<String> s2 = new TimeSeries<>(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n        s1.setMaximumItemCount(100);\n        boolean b5 = s1.equals(s2);\n        assertFalse(\"b5\", b5);\n\n        s2.setMaximumItemCount(100);\n        boolean b6 = s1.equals(s2);\n        assertTrue(\"b6\", b6);\n\n        s1.setMaximumItemAge(100);\n        boolean b7 = s1.equals(s2);\n        assertFalse(\"b7\", b7);\n\n        s2.setMaximumItemAge(100);\n        boolean b8 = s1.equals(s2);\n        assertTrue(\"b8\", b8);\n    }\n","date":"2020-03-22 19:36:23","endLine":312,"groupId":"3452","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/8f/ca912ea4098491100ee4064656b72adc694bba.src","preCode":"    public void testEquals() {\n        TimeSeries s1 = new TimeSeries(\"Time Series 1\");\n        TimeSeries s2 = new TimeSeries(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n        s1.setMaximumItemCount(100);\n        boolean b5 = s1.equals(s2);\n        assertFalse(\"b5\", b5);\n\n        s2.setMaximumItemCount(100);\n        boolean b6 = s1.equals(s2);\n        assertTrue(\"b6\", b6);\n\n        s1.setMaximumItemAge(100);\n        boolean b7 = s1.equals(s2);\n        assertFalse(\"b7\", b7);\n\n        s2.setMaximumItemAge(100);\n        boolean b8 = s1.equals(s2);\n        assertTrue(\"b8\", b8);\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"},{"authorDate":"2020-03-22 19:36:23","commitOrder":2,"curCode":"    public void testEquals() {\n        TimePeriodValues<String> s1 = new TimePeriodValues<>(\"Time Series 1\");\n        TimePeriodValues<String> s2 = new TimePeriodValues<>(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        \r\n        s1.setDomainDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setDomainDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(null);\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setRangeDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setRangeDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(null);\n        assertTrue(s1.equals(s2));\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n    }\n","date":"2020-03-22 19:36:23","endLine":190,"groupId":"227","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/50/f286946a039b240e9cfd9515217bbc3374b05c.src","preCode":"    public void testEquals() {\n        TimePeriodValues s1 = new TimePeriodValues(\"Time Series 1\");\n        TimePeriodValues s2 = new TimePeriodValues(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        \r\n        s1.setDomainDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setDomainDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(null);\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setRangeDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setRangeDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(null);\n        assertTrue(s1.equals(s2));\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimePeriodValuesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"f7ded380c87f815662e1c023e0aa68a1a27496c4","commitMessage":"@@@Add generics and fix compiler warnings.","date":"2020-03-22 19:36:23","modifiedFileCount":"45","status":"M","submitter":"David Gilbert"},{"authorTime":"2020-10-03 13:16:56","codes":[{"authorDate":"2020-10-03 13:16:56","commitOrder":3,"curCode":"    public void testEquals() {\n        TimeSeries<String> s1 = new TimeSeries<>(\"Time Series 1\");\n        TimeSeries<String> s2 = new TimeSeries<>(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(b1, \"b1\");\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(b2, \"b2\");\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(b3, \"b3\");\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(b4, \"b4\");\n\n        s1.setMaximumItemCount(100);\n        boolean b5 = s1.equals(s2);\n        assertFalse(b5, \"b5\");\n\n        s2.setMaximumItemCount(100);\n        boolean b6 = s1.equals(s2);\n        assertTrue(b6, \"b6\");\n\n        s1.setMaximumItemAge(100);\n        boolean b7 = s1.equals(s2);\n        assertFalse(b7, \"b7\");\n\n        s2.setMaximumItemAge(100);\n        boolean b8 = s1.equals(s2);\n        assertTrue(b8, \"b8\");\n    }\n","date":"2020-10-03 13:16:56","endLine":312,"groupId":"101192","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/99/c216a9c2b686ede46ffde0b795965a47140099.src","preCode":"    public void testEquals() {\n        TimeSeries<String> s1 = new TimeSeries<>(\"Time Series 1\");\n        TimeSeries<String> s2 = new TimeSeries<>(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n        s1.setMaximumItemCount(100);\n        boolean b5 = s1.equals(s2);\n        assertFalse(\"b5\", b5);\n\n        s2.setMaximumItemCount(100);\n        boolean b6 = s1.equals(s2);\n        assertTrue(\"b6\", b6);\n\n        s1.setMaximumItemAge(100);\n        boolean b7 = s1.equals(s2);\n        assertFalse(\"b7\", b7);\n\n        s2.setMaximumItemAge(100);\n        boolean b8 = s1.equals(s2);\n        assertTrue(\"b8\", b8);\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimeSeriesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"},{"authorDate":"2020-10-03 13:16:56","commitOrder":3,"curCode":"    public void testEquals() {\n        TimePeriodValues<String> s1 = new TimePeriodValues<>(\"Time Series 1\");\n        TimePeriodValues<String> s2 = new TimePeriodValues<>(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(b1, \"b1\");\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(b2, \"b2\");\n\n        \r\n        s1.setDomainDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setDomainDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(null);\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setRangeDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setRangeDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(null);\n        assertTrue(s1.equals(s2));\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(b3, \"b3\");\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(b4, \"b4\");\n\n    }\n","date":"2020-10-03 13:16:56","endLine":190,"groupId":"101192","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-jfreechart-10-0.7/blobInfo/CC_OUT/blobs/f9/9bcefa6534d3dee805915ee1ce3ea908b8a59a.src","preCode":"    public void testEquals() {\n        TimePeriodValues<String> s1 = new TimePeriodValues<>(\"Time Series 1\");\n        TimePeriodValues<String> s2 = new TimePeriodValues<>(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        \r\n        s1.setDomainDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setDomainDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(null);\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setRangeDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        \r\n        s1.setRangeDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(null);\n        assertTrue(s1.equals(s2));\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n    }\n","realPath":"src/test/java/org/jfree/data/time/TimePeriodValuesTest.java","repoName":"jfreechart","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"ac5baa65cf63c55e12b4f2fb526a6b467e7f9093","commitMessage":"@@@Migrate tests to JUnit 5","date":"2020-10-03 13:16:56","modifiedFileCount":"341","status":"M","submitter":"David Gilbert"}]
