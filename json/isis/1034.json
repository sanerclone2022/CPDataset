[{"authorTime":"2020-09-15 14:35:34","codes":[{"authorDate":"2020-09-15 14:35:34","commitOrder":1,"curCode":"                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n    \n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.ENABLED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n                        \n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n                    \n                }\n                \n                @Inject private ApplicationUserRepository<? extends ApplicationUser> applicationUserRepository;\n                @Inject private ApplicationRoleRepository<? extends ApplicationRole> applicationRoleRepository;\n                @Inject private SecurityModuleConfig securityConfig;\n\n            };\n        }    \n        \n        \n    },\n","date":"2020-09-15 14:35:34","endLine":129,"groupId":"18298","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"persist","params":"(inventory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/87/91556d11e81a58eb07040b70b692ed5aad3df1.src","preCode":"                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n    \n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.ENABLED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n                        \n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n                    \n                }\n                \n                @Inject private ApplicationUserRepository<? extends ApplicationUser> applicationUserRepository;\n                @Inject private ApplicationRoleRepository<? extends ApplicationRole> applicationRoleRepository;\n                @Inject private SecurityModuleConfig securityConfig;\n\n            };\n        }    \n        \n        \n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jdo/JdoTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"},{"authorDate":"2020-09-15 14:35:34","commitOrder":1,"curCode":"                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n    \n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.ENABLED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n                        \n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n                    \n                }\n                \n                @Inject private ApplicationUserRepository<? extends ApplicationUser> applicationUserRepository;\n                @Inject private ApplicationRoleRepository<? extends ApplicationRole> applicationRoleRepository;\n                @Inject private SecurityModuleConfig securityConfig;\n\n            };\n        }    \n        \n        \n    },\n","date":"2020-09-15 14:35:34","endLine":129,"groupId":"18298","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"persist","params":"(inventory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/9a/9b4730a949b1f70bd97b9c1fe8e8028ee124de.src","preCode":"                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n    \n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.ENABLED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n                        \n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n                    \n                }\n                \n                @Inject private ApplicationUserRepository<? extends ApplicationUser> applicationUserRepository;\n                @Inject private ApplicationRoleRepository<? extends ApplicationRole> applicationRoleRepository;\n                @Inject private SecurityModuleConfig securityConfig;\n\n            };\n        }    \n        \n        \n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jpa/JpaTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"14fe76bb4a31f4fc84385a6039b21a4d8b0c39d7","commitMessage":"@@@ISIS-2428: move smoketests -> regressiontests","date":"2020-09-15 14:35:34","modifiedFileCount":"0","status":"B","submitter":"Andi Huber"},{"authorTime":"2021-04-14 23:26:49","codes":[{"authorDate":"2021-04-14 23:26:49","commitOrder":2,"curCode":"                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n    \n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.ENABLED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n                        \n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n                    \n                }\n                \n                @Inject private ApplicationUserRepository<? extends ApplicationUser> applicationUserRepository;\n                @Inject private ApplicationRoleRepository<? extends ApplicationRole> applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }    \n        \n        \n    },\n","date":"2021-04-14 23:26:49","endLine":129,"groupId":"18298","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"persist","params":"(inventory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/c4/f8e638687275e673a224c8fae8e23993a8f3af.src","preCode":"                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n    \n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.ENABLED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n                        \n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n                    \n                }\n                \n                @Inject private ApplicationUserRepository<? extends ApplicationUser> applicationUserRepository;\n                @Inject private ApplicationRoleRepository<? extends ApplicationRole> applicationRoleRepository;\n                @Inject private SecurityModuleConfig securityConfig;\n\n            };\n        }    \n        \n        \n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jdo/JdoTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2021-04-14 23:26:49","commitOrder":2,"curCode":"                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n    \n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.ENABLED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n                        \n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n                    \n                }\n                \n                @Inject private ApplicationUserRepository<? extends ApplicationUser> applicationUserRepository;\n                @Inject private ApplicationRoleRepository<? extends ApplicationRole> applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }    \n        \n        \n    },\n","date":"2021-04-14 23:26:49","endLine":129,"groupId":"18298","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"persist","params":"(inventory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/17/c77a8507a887776b804d5f230bb10b79b23ca4.src","preCode":"                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n    \n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.ENABLED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n                        \n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n                    \n                }\n                \n                @Inject private ApplicationUserRepository<? extends ApplicationUser> applicationUserRepository;\n                @Inject private ApplicationRoleRepository<? extends ApplicationRole> applicationRoleRepository;\n                @Inject private SecurityModuleConfig securityConfig;\n\n            };\n        }    \n        \n        \n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jpa/JpaTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"75633e1f8ce37deb39e3c2e2644357af15365d05","commitMessage":"@@@Merge branch 'master' of https://github.com/apache/isis into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-14 23:26:49","modifiedFileCount":"1999","status":"M","submitter":"J?rg Rade"},{"authorTime":"2021-05-13 03:40:04","codes":[{"authorDate":"2021-05-13 03:40:04","commitOrder":3,"curCode":"                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.ENABLED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n\n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n\n                }\n\n                @Inject private ApplicationUserRepository applicationUserRepository;\n                @Inject private ApplicationRoleRepository applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }\n\n\n    },\n","date":"2021-05-13 03:40:04","endLine":129,"groupId":"18298","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"persist","params":"(inventory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/de/694c3bf3acb76943a8df5e34c2c08ce84af9a0.src","preCode":"                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n    \n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.ENABLED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n                        \n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n                    \n                }\n                \n                @Inject private ApplicationUserRepository<? extends ApplicationUser> applicationUserRepository;\n                @Inject private ApplicationRoleRepository<? extends ApplicationRole> applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }    \n        \n        \n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jdo/JdoTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2021-05-13 03:40:04","commitOrder":3,"curCode":"                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.ENABLED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n\n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n\n                }\n\n                @Inject private ApplicationUserRepository applicationUserRepository;\n                @Inject private ApplicationRoleRepository applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }\n\n\n    },\n","date":"2021-05-13 03:40:04","endLine":129,"groupId":"18298","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"persist","params":"(inventory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/44/112c1e9642cdeb33eb84226995c6f0a4821a42.src","preCode":"                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n    \n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.ENABLED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n                        \n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n                    \n                }\n                \n                @Inject private ApplicationUserRepository<? extends ApplicationUser> applicationUserRepository;\n                @Inject private ApplicationRoleRepository<? extends ApplicationRole> applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }    \n        \n        \n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jpa/JpaTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"a4143cb700207da13632283e0ac2c534b2fe93e4","commitMessage":"@@@Merge pull request #526 from apache/ISIS-2619\n\nIsis 2619 : tidying up secman","date":"2021-05-13 03:40:04","modifiedFileCount":"20","status":"M","submitter":"Dan Haywood"},{"authorTime":"2021-05-25 05:44:47","codes":[{"authorDate":"2021-05-25 05:44:47","commitOrder":4,"curCode":"                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.UNLOCKED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n\n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n\n                }\n\n                @Inject private ApplicationUserRepository applicationUserRepository;\n                @Inject private ApplicationRoleRepository applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }\n\n\n    },\n","date":"2021-05-25 05:44:47","endLine":128,"groupId":"18298","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"persist","params":"(inventory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/5b/5dfd40f613edf03828c5a0d4d8b05ef4665b1a.src","preCode":"                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.ENABLED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n\n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n\n                }\n\n                @Inject private ApplicationUserRepository applicationUserRepository;\n                @Inject private ApplicationRoleRepository applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }\n\n\n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jdo/JdoTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2021-05-25 05:44:47","commitOrder":4,"curCode":"                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.UNLOCKED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n\n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n\n                }\n\n                @Inject private ApplicationUserRepository applicationUserRepository;\n                @Inject private ApplicationRoleRepository applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }\n\n\n    },\n","date":"2021-05-25 05:44:47","endLine":128,"groupId":"18298","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"persist","params":"(inventory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/fb/1052445822c223c7b9de4113c57303e875246d.src","preCode":"                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.ENABLED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n\n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n\n                }\n\n                @Inject private ApplicationUserRepository applicationUserRepository;\n                @Inject private ApplicationRoleRepository applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }\n\n\n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jpa/JpaTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"6e02e7e5e19a8d3d763f8e49dd3794e687af7365","commitMessage":"@@@Merge pull request #556 from apache/ISIS-2614\n\nIsis 2614","date":"2021-05-25 05:44:47","modifiedFileCount":"47","status":"M","submitter":"Dan Haywood"},{"authorTime":"2021-07-23 23:25:16","codes":[{"authorDate":"2021-07-23 23:25:16","commitOrder":5,"curCode":"                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(final ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.UNLOCKED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n\n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n\n                }\n\n                @Inject private ApplicationUserRepository applicationUserRepository;\n                @Inject private ApplicationRoleRepository applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }\n\n\n    },\n","date":"2021-07-23 23:25:16","endLine":128,"groupId":"18298","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"persist","params":"(inventory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/24/b0c4b5a113362cc82a9e795dc8486ff35af28f.src","preCode":"                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.UNLOCKED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n\n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n\n                }\n\n                @Inject private ApplicationUserRepository applicationUserRepository;\n                @Inject private ApplicationRoleRepository applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }\n\n\n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jdo/JdoTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2021-07-23 23:25:16","commitOrder":5,"curCode":"                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(final ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.UNLOCKED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n\n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n\n                }\n\n                @Inject private ApplicationUserRepository applicationUserRepository;\n                @Inject private ApplicationRoleRepository applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }\n\n\n    },\n","date":"2021-07-23 23:25:16","endLine":128,"groupId":"18298","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"persist","params":"(inventory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/a3/79f4cd7f7893cbadbf96f2709a364bbd85ceec.src","preCode":"                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.UNLOCKED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n\n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n\n                }\n\n                @Inject private ApplicationUserRepository applicationUserRepository;\n                @Inject private ApplicationRoleRepository applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }\n\n\n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jpa/JpaTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"9d274b298f6f14a63524851f7d2a609e44ab00db","commitMessage":"@@@ISIS-2573: publishing tests: enhanced step tracing\n\nidea is to record all essential execution steps/events.  so that at the\nend of the tests.  we can verify that the expected steps had taken place","date":"2021-07-23 23:25:16","modifiedFileCount":"9","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-08-20 21:59:30","codes":[{"authorDate":"2021-08-20 21:59:30","commitOrder":6,"curCode":"                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(final ExecutionContext ec) {\n\n                    val regularUserRoleName = isisConfig.getExtensions().getSecman().getSeed().getRegularUser().getRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.UNLOCKED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n\n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n\n                }\n\n                @Inject private ApplicationUserRepository applicationUserRepository;\n                @Inject private ApplicationRoleRepository applicationRoleRepository;\n                @Inject private IsisConfiguration isisConfig;\n\n            };\n        }\n\n\n    },\n","date":"2021-08-20 21:59:30","endLine":127,"groupId":"1034","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"persist","params":"(inventory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/19/c7e844e69aa0612b47793f38ac020fb738b7df.src","preCode":"                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(final ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.UNLOCKED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n\n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n\n                }\n\n                @Inject private ApplicationUserRepository applicationUserRepository;\n                @Inject private ApplicationRoleRepository applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }\n\n\n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jdo/JdoTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2021-08-20 21:59:30","commitOrder":6,"curCode":"                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(final ExecutionContext ec) {\n\n                    val regularUserRoleName = isisConfig.getExtensions().getSecman().getSeed().getRegularUser().getRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.UNLOCKED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n\n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n\n                }\n\n                @Inject private ApplicationUserRepository applicationUserRepository;\n                @Inject private ApplicationRoleRepository applicationRoleRepository;\n                @Inject private IsisConfiguration isisConfig;\n\n            };\n        }\n\n\n    },\n","date":"2021-08-20 21:59:30","endLine":127,"groupId":"1034","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"persist","params":"(inventory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/49/e0a2a81388845f6f08707c4e08522c9c7c5e70.src","preCode":"                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    SvenApplicationUser {\n        @Override\n        public BuilderScriptAbstract<?> builder() {\n            return new BuilderScriptWithoutResult() {\n\n                @Override\n                protected void execute(final ExecutionContext ec) {\n\n                    val regularUserRoleName = securityConfig.getRegularUserRoleName();\n                    val regularUserRole = applicationRoleRepository.findByName(regularUserRoleName).orElse(null);\n                    val username = LdapConstants.SVEN_PRINCIPAL;\n                    ApplicationUser svenUser = applicationUserRepository.findByUsername(username).orElse(null);\n                    if(svenUser==null) {\n                        svenUser = applicationUserRepository\n                                .newDelegateUser(username, ApplicationUserStatus.UNLOCKED);\n                        applicationRoleRepository.addRoleToUser(regularUserRole, svenUser);\n\n                    } else {\n                        applicationUserRepository.enable(svenUser);\n                    }\n\n                }\n\n                @Inject private ApplicationUserRepository applicationUserRepository;\n                @Inject private ApplicationRoleRepository applicationRoleRepository;\n                @Inject private SecmanConfiguration securityConfig;\n\n            };\n        }\n\n\n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jpa/JpaTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"6c65c69bd464c37c8bf9daba546dba06bee85191","commitMessage":"@@@Merge branch 'master' of https://github.com/apache/isis\n","date":"2021-08-20 21:59:30","modifiedFileCount":"11","status":"M","submitter":"J?rg Rade"}]
