[{"authorTime":"2021-07-01 04:28:48","codes":[{"authorDate":"2021-06-30 21:32:30","commitOrder":3,"curCode":"    void mixinMemberNamedFacet_whenSharingSameAbstractMixin() {\n        val objectSpec = specificationLoader.specForType(Customer.class).get();\n\n        assertEquals(\n                2L,\n                objectSpec.streamRuntimeActions(MixedIn.INCLUDED)\n                .filter(ObjectAction::isMixedIn)\n                .peek(act->{\n                    \r\n                    val memberNamedFacet = act.getFacet(MemberNamedFacet.class);\n                    assertNotNull(memberNamedFacet);\n                    assertTrue(memberNamedFacet.getSpecialization().isLeft());\n                })\n                .count());\n    }\n","date":"2021-06-30 21:32:30","endLine":122,"groupId":"1936","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"mixinMemberNamedFacet_whenSharingSameAbstractMixin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/9a/bdce80f96e3ac245e968f221b8366b3ff6b70c.src","preCode":"    void mixinMemberNamedFacet_whenSharingSameAbstractMixin() {\n        val objectSpec = specificationLoader.specForType(Customer.class).get();\n\n        assertEquals(\n                2L,\n                objectSpec.streamRuntimeActions(MixedIn.INCLUDED)\n                .filter(ObjectAction::isMixedIn)\n                .peek(act->{\n                    \r\n                    val memberNamedFacet = act.getFacet(MemberNamedFacet.class);\n                    assertNotNull(memberNamedFacet);\n                    assertTrue(memberNamedFacet.getSpecialization().isLeft());\n                })\n                .count());\n    }\n","realPath":"regressiontests/stable-interact/src/test/java/org/apache/isis/testdomain/interact/WrapperInteractionTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"NB"},{"authorDate":"2021-07-01 04:28:48","commitOrder":3,"curCode":"    void mixinMemberNamedFacet_whenSharingSameAbstractMixin() {\n\n        val objectSpec1 = specificationLoader.specForType(Task.Succeeded.class).get();\n        val objectSpec2 = specificationLoader.specForType(Task.Failed.class).get();\n\n        assertTrue(objectSpec1.isMixin());\n        assertTrue(objectSpec2.isMixin());\n\n        assertEquals(\"Succeeded\", objectSpec1.getSingularName());\n        assertEquals(\"Failed\", objectSpec2.getSingularName());\n\n        val objectSpec = specificationLoader.specForType(Task.class).get();\n\n        assertEquals(\n                2L,\n                objectSpec.streamRuntimeActions(MixedIn.INCLUDED)\n                .filter(ObjectAction::isMixedIn)\n                .peek(act->{\n                    \r\n                    val memberNamedFacet = act.getFacet(MemberNamedFacet.class);\n                    assertNotNull(memberNamedFacet);\n                    assertTrue(memberNamedFacet.getSpecialization().isLeft());\n                })\n                .count());\n    }\n","date":"2021-07-01 04:28:48","endLine":145,"groupId":"1936","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mixinMemberNamedFacet_whenSharingSameAbstractMixin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/35/374036c731a5dd08c62880839fe4bda6e365ba.src","preCode":"    void mixinMemberNamedFacet_whenSharingSameAbstractMixin() {\n\n        val objectSpec1 = specificationLoader.specForType(Task.Succeeded.class).get();\n        val objectSpec2 = specificationLoader.specForType(Task.Failed.class).get();\n\n        assertTrue(objectSpec1.isMixin());\n        assertTrue(objectSpec2.isMixin());\n\n        assertEquals(\"Succeeded\", objectSpec1.getSingularName());\n        assertEquals(\"Failed\", objectSpec2.getSingularName());\n\n        val objectSpec = specificationLoader.specForType(Task.class).get();\n\n        assertEquals(\n                2L,\n                objectSpec.streamRuntimeActions(MixedIn.INCLUDED)\n                .filter(ObjectAction::isMixedIn)\n                .peek(act->{\n                    \r\n                    val memberNamedFacet = act.getFacet(MemberNamedFacet.class);\n                    assertNotNull(memberNamedFacet);\n                    assertTrue(memberNamedFacet.getSpecialization().isLeft());\n                })\n                .count());\n    }\n","realPath":"regressiontests/stable-interact/src/test/java/org/apache/isis/testdomain/interact/WrapperInteractionTest3.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"MB"}],"commitId":"7596734c0e0696f8a78bfbb3c3ee0ca21248a41c","commitMessage":"@@@ISIS-1720: disable yet failing test - mark as TODO","date":"2021-07-01 04:28:48","modifiedFileCount":"1","status":"M","submitter":"andi-huber"},{"authorTime":"2021-07-01 16:45:31","codes":[{"authorDate":"2021-06-30 21:32:30","commitOrder":4,"curCode":"    void mixinMemberNamedFacet_whenSharingSameAbstractMixin() {\n        val objectSpec = specificationLoader.specForType(Customer.class).get();\n\n        assertEquals(\n                2L,\n                objectSpec.streamRuntimeActions(MixedIn.INCLUDED)\n                .filter(ObjectAction::isMixedIn)\n                .peek(act->{\n                    \r\n                    val memberNamedFacet = act.getFacet(MemberNamedFacet.class);\n                    assertNotNull(memberNamedFacet);\n                    assertTrue(memberNamedFacet.getSpecialization().isLeft());\n                })\n                .count());\n    }\n","date":"2021-06-30 21:32:30","endLine":122,"groupId":"10112","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"mixinMemberNamedFacet_whenSharingSameAbstractMixin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/9a/bdce80f96e3ac245e968f221b8366b3ff6b70c.src","preCode":"    void mixinMemberNamedFacet_whenSharingSameAbstractMixin() {\n        val objectSpec = specificationLoader.specForType(Customer.class).get();\n\n        assertEquals(\n                2L,\n                objectSpec.streamRuntimeActions(MixedIn.INCLUDED)\n                .filter(ObjectAction::isMixedIn)\n                .peek(act->{\n                    \r\n                    val memberNamedFacet = act.getFacet(MemberNamedFacet.class);\n                    assertNotNull(memberNamedFacet);\n                    assertTrue(memberNamedFacet.getSpecialization().isLeft());\n                })\n                .count());\n    }\n","realPath":"regressiontests/stable-interact/src/test/java/org/apache/isis/testdomain/interact/WrapperInteractionTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"N"},{"authorDate":"2021-07-01 16:45:31","commitOrder":4,"curCode":"    void mixinMemberNamedFacet_whenSharingSameAbstractMixin() {\n\n        val objectSpec1 = specificationLoader.specForType(Task.Succeeded.class).get();\n        val objectSpec2 = specificationLoader.specForType(Task.Failed.class).get();\n\n        assertTrue(objectSpec1.isMixin());\n        assertTrue(objectSpec2.isMixin());\n\n        val objectSpec = specificationLoader.specForType(Task.class).get();\n\n        assertEquals(\n                2L,\n                objectSpec.streamRuntimeActions(MixedIn.INCLUDED)\n                .filter(ObjectAction::isMixedIn)\n                .peek(act->{\n                    \r\n                    val memberNamedFacet = act.getFacet(MemberNamedFacet.class);\n                    assertNotNull(memberNamedFacet);\n                    assertTrue(memberNamedFacet.getSpecialization().isLeft());\n                })\n                .count());\n    }\n","date":"2021-07-01 16:45:31","endLine":141,"groupId":"10112","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"mixinMemberNamedFacet_whenSharingSameAbstractMixin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/55/5ccce3c5351bece03bdc7bbbc0fceeca22e1a2.src","preCode":"    void mixinMemberNamedFacet_whenSharingSameAbstractMixin() {\n\n        val objectSpec1 = specificationLoader.specForType(Task.Succeeded.class).get();\n        val objectSpec2 = specificationLoader.specForType(Task.Failed.class).get();\n\n        assertTrue(objectSpec1.isMixin());\n        assertTrue(objectSpec2.isMixin());\n\n        assertEquals(\"Succeeded\", objectSpec1.getSingularName());\n        assertEquals(\"Failed\", objectSpec2.getSingularName());\n\n        val objectSpec = specificationLoader.specForType(Task.class).get();\n\n        assertEquals(\n                2L,\n                objectSpec.streamRuntimeActions(MixedIn.INCLUDED)\n                .filter(ObjectAction::isMixedIn)\n                .peek(act->{\n                    \r\n                    val memberNamedFacet = act.getFacet(MemberNamedFacet.class);\n                    assertNotNull(memberNamedFacet);\n                    assertTrue(memberNamedFacet.getSpecialization().isLeft());\n                })\n                .count());\n    }\n","realPath":"regressiontests/stable-interact/src/test/java/org/apache/isis/testdomain/interact/WrapperInteractionTest3.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"db72eda105f25a11dee009e1e7b4dca624c8a721","commitMessage":"@@@ISIS-1720: remove the requirement for Mixins to have a ObjectNamedFacet","date":"2021-07-01 16:45:31","modifiedFileCount":"3","status":"M","submitter":"andi-huber"}]
