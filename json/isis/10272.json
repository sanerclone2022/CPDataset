[{"authorTime":"2021-04-14 23:26:49","codes":[{"authorDate":"2021-04-14 23:26:49","commitOrder":1,"curCode":"        void user_and_roles_preserved_and_real_name_set() {\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            val userMemento2 = userMemento.withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento2.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getRealName()).isNull();\n        }\n","date":"2021-04-14 23:26:49","endLine":72,"groupId":"4026","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"user_and_roles_preserved_and_real_name_set","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/bd/411d089bfc167e51f667e2891d1b79d7e49faa.src","preCode":"        void user_and_roles_preserved_and_real_name_set() {\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            val userMemento2 = userMemento.withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento2.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getRealName()).isNull();\n        }\n","realPath":"api/applib/src/test/java/org/apache/isis/applib/services/user/UserMemento_Test.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2021-04-14 23:26:49","commitOrder":1,"curCode":"        void happy_case() throws MalformedURLException {\n\n            \r\n            val userMemento = UserMemento.ofName(\"fredflintstone\")\n                    .withRole(\"CAVEMAN\")\n                    .withRole(\"HUSBAND\")\n                    .withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))\n                    .withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\");\n        }\n","date":"2021-04-14 23:26:49","endLine":214,"groupId":"4026","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"happy_case","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/bd/411d089bfc167e51f667e2891d1b79d7e49faa.src","preCode":"        void happy_case() throws MalformedURLException {\n\n            \r\n            val userMemento = UserMemento.ofName(\"fredflintstone\")\n                    .withRole(\"CAVEMAN\")\n                    .withRole(\"HUSBAND\")\n                    .withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))\n                    .withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\");\n        }\n","realPath":"api/applib/src/test/java/org/apache/isis/applib/services/user/UserMemento_Test.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"B"}],"commitId":"75633e1f8ce37deb39e3c2e2644357af15365d05","commitMessage":"@@@Merge branch 'master' of https://github.com/apache/isis into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-14 23:26:49","modifiedFileCount":"1999","status":"B","submitter":"J?rg Rade"},{"authorTime":"2021-04-21 23:42:54","codes":[{"authorDate":"2021-04-14 23:26:49","commitOrder":2,"curCode":"        void user_and_roles_preserved_and_real_name_set() {\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            val userMemento2 = userMemento.withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento2.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getRealName()).isNull();\n        }\n","date":"2021-04-14 23:26:49","endLine":72,"groupId":"4026","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"user_and_roles_preserved_and_real_name_set","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/bd/411d089bfc167e51f667e2891d1b79d7e49faa.src","preCode":"        void user_and_roles_preserved_and_real_name_set() {\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            val userMemento2 = userMemento.withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento2.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getRealName()).isNull();\n        }\n","realPath":"api/applib/src/test/java/org/apache/isis/applib/services/user/UserMemento_Test.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2021-04-21 23:42:54","commitOrder":2,"curCode":"        void happy_case() throws MalformedURLException {\n\n            \r\n            val userMemento = UserMemento.ofName(\"fredflintstone\")\n                    .withRole(\"CAVEMAN\")\n                    .withRole(\"HUSBAND\")\n                    .withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))\n                    .withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento.isImpersonating()).isFalse();\n\n            \r\n            val userMemento2 = userMemento.withImpersonating();\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento2.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento2.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento2.isImpersonating()).isTrue();\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento.isImpersonating()).isFalse();\n\n        }\n","date":"2021-04-21 23:42:54","endLine":263,"groupId":"4026","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"happy_case","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/3d/df609972bce508003e36090669483d725e9531.src","preCode":"        void happy_case() throws MalformedURLException {\n\n            \r\n            val userMemento = UserMemento.ofName(\"fredflintstone\")\n                    .withRole(\"CAVEMAN\")\n                    .withRole(\"HUSBAND\")\n                    .withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))\n                    .withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\");\n        }\n","realPath":"api/applib/src/test/java/org/apache/isis/applib/services/user/UserMemento_Test.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"}],"commitId":"0348bc49be1ca70a98f195ecaa09e1372df645ec","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-21 23:42:54","modifiedFileCount":"188","status":"M","submitter":"J?rg Rade"},{"authorTime":"2021-06-10 18:42:21","codes":[{"authorDate":"2021-06-10 18:42:21","commitOrder":3,"curCode":"        void user_and_roles_preserved_and_real_name_set() {\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            val userMemento2 = userMemento.withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento2.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getRealName()).isNull();\n        }\n","date":"2021-06-10 18:42:21","endLine":72,"groupId":"4026","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"user_and_roles_preserved_and_real_name_set","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/50/4ac666ec6a25e4810f881ea0d732920fe789b3.src","preCode":"        void user_and_roles_preserved_and_real_name_set() {\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            val userMemento2 = userMemento.withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento2.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getRealName()).isNull();\n        }\n","realPath":"api/applib/src/test/java/org/apache/isis/applib/services/user/UserMemento_Test.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2021-06-10 18:42:21","commitOrder":3,"curCode":"        void happy_case() throws MalformedURLException {\n\n            \r\n            val userMemento = UserMemento.ofName(\"fredflintstone\")\n                    .withRoleAdded(\"CAVEMAN\")\n                    .withRoleAdded(\"HUSBAND\")\n                    .withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))\n                    .withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento.isImpersonating()).isFalse();\n\n            \r\n            val userMemento2 = userMemento.withImpersonating(true);\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento2.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento2.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento2.isImpersonating()).isTrue();\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento.isImpersonating()).isFalse();\n\n        }\n","date":"2021-06-10 18:42:21","endLine":263,"groupId":"4026","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"happy_case","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/50/4ac666ec6a25e4810f881ea0d732920fe789b3.src","preCode":"        void happy_case() throws MalformedURLException {\n\n            \r\n            val userMemento = UserMemento.ofName(\"fredflintstone\")\n                    .withRole(\"CAVEMAN\")\n                    .withRole(\"HUSBAND\")\n                    .withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))\n                    .withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento.isImpersonating()).isFalse();\n\n            \r\n            val userMemento2 = userMemento.withImpersonating();\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento2.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento2.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento2.isImpersonating()).isTrue();\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento.isImpersonating()).isFalse();\n\n        }\n","realPath":"api/applib/src/test/java/org/apache/isis/applib/services/user/UserMemento_Test.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"}],"commitId":"e93e59ddbffbc6337f62e90f1bdc17389cc4d24c","commitMessage":"@@@ISIS-2727: remove Authentication from 'security'\n\ninstead have UserMemento hold the authentication state\n\nalso adds some todos","date":"2021-06-10 18:42:21","modifiedFileCount":"63","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-08-06 06:56:38","codes":[{"authorDate":"2021-06-10 18:42:21","commitOrder":4,"curCode":"        void user_and_roles_preserved_and_real_name_set() {\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            val userMemento2 = userMemento.withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento2.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getRealName()).isNull();\n        }\n","date":"2021-06-10 18:42:21","endLine":72,"groupId":"10272","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"user_and_roles_preserved_and_real_name_set","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/50/4ac666ec6a25e4810f881ea0d732920fe789b3.src","preCode":"        void user_and_roles_preserved_and_real_name_set() {\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            val userMemento2 = userMemento.withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento2.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getRealName()).isNull();\n        }\n","realPath":"api/applib/src/test/java/org/apache/isis/applib/services/user/UserMemento_Test.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2021-08-06 06:56:38","commitOrder":4,"curCode":"        void happy_case() throws MalformedURLException {\n\n            \r\n            val userMemento = UserMemento.ofName(\"fredflintstone\")\n                    .withRoleAdded(\"CAVEMAN\")\n                    .withRoleAdded(\"HUSBAND\")\n                    .withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))\n                    .withRealName(\"Fred Flintstone\")\n                    .withMultiTenancyToken(\"/USA/Bedrock\")\n                    ;\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento.isImpersonating()).isFalse();\n\n            \r\n            val userMemento2 = userMemento.withImpersonating(true);\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento2.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento2.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento2.isImpersonating()).isTrue();\n            Assertions.assertThat(userMemento2.getMultiTenancyToken()).isEqualTo(\"/USA/Bedrock\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento.isImpersonating()).isFalse();\n            Assertions.assertThat(userMemento.getMultiTenancyToken()).isEqualTo(\"/USA/Bedrock\");\n\n        }\n","date":"2021-08-06 06:56:38","endLine":290,"groupId":"10272","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"happy_case","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/8c/ef9dfa4142f74bcec820861b61ffd387d577da.src","preCode":"        void happy_case() throws MalformedURLException {\n\n            \r\n            val userMemento = UserMemento.ofName(\"fredflintstone\")\n                    .withRoleAdded(\"CAVEMAN\")\n                    .withRoleAdded(\"HUSBAND\")\n                    .withAvatarUrl(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"))\n                    .withRealName(\"Fred Flintstone\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento.isImpersonating()).isFalse();\n\n            \r\n            val userMemento2 = userMemento.withImpersonating(true);\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento2.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento2.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento2.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento2.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento2.isImpersonating()).isTrue();\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getAvatarUrl()).isEqualTo(new java.net.URL(\"https://upload.wikimedia.org/wikipedia/en/a/ad/Fred_Flintstone.png\"));\n            Assertions.assertThat(userMemento.getRealName()).isEqualTo(\"Fred Flintstone\");\n            Assertions.assertThat(userMemento.isImpersonating()).isFalse();\n\n        }\n","realPath":"api/applib/src/test/java/org/apache/isis/applib/services/user/UserMemento_Test.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"}],"commitId":"63bde6a703099fd51855049406cfed827caab91a","commitMessage":"@@@Merge pull request #703 from apache/ISIS-2728\n\nIsis 2728","date":"2021-08-06 06:56:38","modifiedFileCount":"13","status":"M","submitter":"Dan Haywood"}]
