[{"authorTime":"2021-06-04 05:30:03","codes":[{"authorDate":"2021-06-04 05:30:03","commitOrder":1,"curCode":"    public EncoderDecoder<ComplexNumberJdo> getEncoderDecoder() {\n\r\n        \r\n\r\n        return new EncoderDecoder<ComplexNumberJdo>() {\n            @Override\n            public String toEncodedString(ComplexNumberJdo cn) {\n                if(cn==null) {\n                    return null;\n                }\n                val re = Double.doubleToLongBits(cn.getRe());\n                val im = Double.doubleToLongBits(cn.getIm());\n                return String.format(\"%s:%s\",\n                        Long.toHexString(re), Long.toHexString(im));\n            }\n            @Override\n            public ComplexNumberJdo fromEncodedString(String str) {\n                if(_NullSafe.isEmpty(str)) {\n                    return null;\n                }\n                val chunks = _Strings.splitThenStream(str, \":\")\n                    .limit(2)\n                    .collect(Collectors.toList());\n                if(chunks.size()<2) {\n                    throw new IllegalArgumentException(\"Invalid format \" + str);\n                }\n                val re = Double.longBitsToDouble(Long.parseLong(chunks.get(0), 16));\n                val im = Double.longBitsToDouble(Long.parseLong(chunks.get(1), 16));\n                return ComplexNumberJdo.of(re, im);\n            }\n        };\n    }\n","date":"2021-06-04 05:30:03","endLine":101,"groupId":"3321","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getEncoderDecoder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/a7/ca37faea7eff879605ab2ddb682d54e8885eb1.src","preCode":"    public EncoderDecoder<ComplexNumberJdo> getEncoderDecoder() {\n\r\n        \r\n\r\n        return new EncoderDecoder<ComplexNumberJdo>() {\n            @Override\n            public String toEncodedString(ComplexNumberJdo cn) {\n                if(cn==null) {\n                    return null;\n                }\n                val re = Double.doubleToLongBits(cn.getRe());\n                val im = Double.doubleToLongBits(cn.getIm());\n                return String.format(\"%s:%s\",\n                        Long.toHexString(re), Long.toHexString(im));\n            }\n            @Override\n            public ComplexNumberJdo fromEncodedString(String str) {\n                if(_NullSafe.isEmpty(str)) {\n                    return null;\n                }\n                val chunks = _Strings.splitThenStream(str, \":\")\n                    .limit(2)\n                    .collect(Collectors.toList());\n                if(chunks.size()<2) {\n                    throw new IllegalArgumentException(\"Invalid format \" + str);\n                }\n                val re = Double.longBitsToDouble(Long.parseLong(chunks.get(0), 16));\n                val im = Double.longBitsToDouble(Long.parseLong(chunks.get(1), 16));\n                return ComplexNumberJdo.of(re, im);\n            }\n        };\n    }\n","realPath":"examples/demo/domain/src/main/java/demoapp/dom/domain/objects/other/embedded/jdo/ComplexNumberJdoValueSemantics.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2021-06-04 05:30:03","commitOrder":1,"curCode":"    public EncoderDecoder<ComplexNumberJpa> getEncoderDecoder() {\n\r\n        \r\n\r\n        return new EncoderDecoder<ComplexNumberJpa>() {\n            @Override\n            public String toEncodedString(ComplexNumberJpa cn) {\n                if(cn==null) {\n                    return null;\n                }\n                val re = Double.doubleToLongBits(cn.getRe());\n                val im = Double.doubleToLongBits(cn.getIm());\n                return String.format(\"%s:%s\",\n                        Long.toHexString(re), Long.toHexString(im));\n            }\n            @Override\n            public ComplexNumberJpa fromEncodedString(String str) {\n                if(_NullSafe.isEmpty(str)) {\n                    return null;\n                }\n                val chunks = _Strings.splitThenStream(str, \":\")\n                    .limit(2)\n                    .collect(Collectors.toList());\n                if(chunks.size()<2) {\n                    throw new IllegalArgumentException(\"Invalid format \" + str);\n                }\n                val re = Double.longBitsToDouble(Long.parseLong(chunks.get(0), 16));\n                val im = Double.longBitsToDouble(Long.parseLong(chunks.get(1), 16));\n                return ComplexNumberJpa.of(re, im);\n            }\n        };\n    }\n","date":"2021-06-04 05:30:03","endLine":101,"groupId":"3321","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getEncoderDecoder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/76/47100ef6ed58d996a021ae18f82f4362560a37.src","preCode":"    public EncoderDecoder<ComplexNumberJpa> getEncoderDecoder() {\n\r\n        \r\n\r\n        return new EncoderDecoder<ComplexNumberJpa>() {\n            @Override\n            public String toEncodedString(ComplexNumberJpa cn) {\n                if(cn==null) {\n                    return null;\n                }\n                val re = Double.doubleToLongBits(cn.getRe());\n                val im = Double.doubleToLongBits(cn.getIm());\n                return String.format(\"%s:%s\",\n                        Long.toHexString(re), Long.toHexString(im));\n            }\n            @Override\n            public ComplexNumberJpa fromEncodedString(String str) {\n                if(_NullSafe.isEmpty(str)) {\n                    return null;\n                }\n                val chunks = _Strings.splitThenStream(str, \":\")\n                    .limit(2)\n                    .collect(Collectors.toList());\n                if(chunks.size()<2) {\n                    throw new IllegalArgumentException(\"Invalid format \" + str);\n                }\n                val re = Double.longBitsToDouble(Long.parseLong(chunks.get(0), 16));\n                val im = Double.longBitsToDouble(Long.parseLong(chunks.get(1), 16));\n                return ComplexNumberJpa.of(re, im);\n            }\n        };\n    }\n","realPath":"examples/demo/domain/src/main/java/demoapp/dom/domain/objects/other/embedded/jpa/ComplexNumberJpaValueSemantics.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"}],"commitId":"1334031e822851ca4877dd2265542e9d5ee2ec84","commitMessage":"@@@ISIS-2513: Demo: port embedded showcase to JPA","date":"2021-06-04 05:30:03","modifiedFileCount":"4","status":"B","submitter":"andi-huber"},{"authorTime":"2021-09-15 00:36:03","codes":[{"authorDate":"2021-09-15 00:36:03","commitOrder":2,"curCode":"    public EncoderDecoder<ComplexNumberJdo> getEncoderDecoder() {\n\r\n        \r\n\r\n        return new EncoderDecoder<ComplexNumberJdo>() {\n            @Override\n            public String toEncodedString(final ComplexNumberJdo cn) {\n                if(cn==null) {\n                    return null;\n                }\n                val re = Double.doubleToLongBits(cn.getRe());\n                val im = Double.doubleToLongBits(cn.getIm());\n                return String.format(\"%s:%s\",\n                        Long.toHexString(re), Long.toHexString(im));\n            }\n            @Override\n            public ComplexNumberJdo fromEncodedString(final String str) {\n                if(_NullSafe.isEmpty(str)) {\n                    return null;\n                }\n                val chunks = _Strings.splitThenStream(str, \":\")\n                    .limit(2)\n                    .collect(Collectors.toList());\n                if(chunks.size()<2) {\n                    throw new IllegalArgumentException(\"Invalid format \" + str);\n                }\n                val re = Double.longBitsToDouble(Long.parseLong(chunks.get(0), 16));\n                val im = Double.longBitsToDouble(Long.parseLong(chunks.get(1), 16));\n                return ComplexNumberJdo.of(re, im);\n            }\n        };\n    }\n","date":"2021-09-15 00:36:03","endLine":97,"groupId":"10605","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getEncoderDecoder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/94/d1294eab9304d8d7114c6c2eaa5d88dbe0aee0.src","preCode":"    public EncoderDecoder<ComplexNumberJdo> getEncoderDecoder() {\n\r\n        \r\n\r\n        return new EncoderDecoder<ComplexNumberJdo>() {\n            @Override\n            public String toEncodedString(ComplexNumberJdo cn) {\n                if(cn==null) {\n                    return null;\n                }\n                val re = Double.doubleToLongBits(cn.getRe());\n                val im = Double.doubleToLongBits(cn.getIm());\n                return String.format(\"%s:%s\",\n                        Long.toHexString(re), Long.toHexString(im));\n            }\n            @Override\n            public ComplexNumberJdo fromEncodedString(String str) {\n                if(_NullSafe.isEmpty(str)) {\n                    return null;\n                }\n                val chunks = _Strings.splitThenStream(str, \":\")\n                    .limit(2)\n                    .collect(Collectors.toList());\n                if(chunks.size()<2) {\n                    throw new IllegalArgumentException(\"Invalid format \" + str);\n                }\n                val re = Double.longBitsToDouble(Long.parseLong(chunks.get(0), 16));\n                val im = Double.longBitsToDouble(Long.parseLong(chunks.get(1), 16));\n                return ComplexNumberJdo.of(re, im);\n            }\n        };\n    }\n","realPath":"examples/demo/domain/src/main/java/demoapp/dom/domain/objects/other/embedded/jdo/ComplexNumberJdoValueSemantics.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2021-09-15 00:36:03","commitOrder":2,"curCode":"    public EncoderDecoder<ComplexNumberJpa> getEncoderDecoder() {\n\r\n        \r\n\r\n        return new EncoderDecoder<ComplexNumberJpa>() {\n            @Override\n            public String toEncodedString(final ComplexNumberJpa cn) {\n                if(cn==null) {\n                    return null;\n                }\n                val re = Double.doubleToLongBits(cn.getRe());\n                val im = Double.doubleToLongBits(cn.getIm());\n                return String.format(\"%s:%s\",\n                        Long.toHexString(re), Long.toHexString(im));\n            }\n            @Override\n            public ComplexNumberJpa fromEncodedString(final String str) {\n                if(_NullSafe.isEmpty(str)) {\n                    return null;\n                }\n                val chunks = _Strings.splitThenStream(str, \":\")\n                    .limit(2)\n                    .collect(Collectors.toList());\n                if(chunks.size()<2) {\n                    throw new IllegalArgumentException(\"Invalid format \" + str);\n                }\n                val re = Double.longBitsToDouble(Long.parseLong(chunks.get(0), 16));\n                val im = Double.longBitsToDouble(Long.parseLong(chunks.get(1), 16));\n                return ComplexNumberJpa.of(re, im);\n            }\n        };\n    }\n","date":"2021-09-15 00:36:03","endLine":97,"groupId":"10605","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getEncoderDecoder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/c0/60a0b7ccfbc3c5a9905af6f667463c34b9e879.src","preCode":"    public EncoderDecoder<ComplexNumberJpa> getEncoderDecoder() {\n\r\n        \r\n\r\n        return new EncoderDecoder<ComplexNumberJpa>() {\n            @Override\n            public String toEncodedString(ComplexNumberJpa cn) {\n                if(cn==null) {\n                    return null;\n                }\n                val re = Double.doubleToLongBits(cn.getRe());\n                val im = Double.doubleToLongBits(cn.getIm());\n                return String.format(\"%s:%s\",\n                        Long.toHexString(re), Long.toHexString(im));\n            }\n            @Override\n            public ComplexNumberJpa fromEncodedString(String str) {\n                if(_NullSafe.isEmpty(str)) {\n                    return null;\n                }\n                val chunks = _Strings.splitThenStream(str, \":\")\n                    .limit(2)\n                    .collect(Collectors.toList());\n                if(chunks.size()<2) {\n                    throw new IllegalArgumentException(\"Invalid format \" + str);\n                }\n                val re = Double.longBitsToDouble(Long.parseLong(chunks.get(0), 16));\n                val im = Double.longBitsToDouble(Long.parseLong(chunks.get(1), 16));\n                return ComplexNumberJpa.of(re, im);\n            }\n        };\n    }\n","realPath":"examples/demo/domain/src/main/java/demoapp/dom/domain/objects/other/embedded/jpa/ComplexNumberJpaValueSemantics.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"efabec3fb0ad4ed374c66b5ca2090db15ce52def","commitMessage":"@@@ISIS-2871: AsciiDoc value edit fixes","date":"2021-09-15 00:36:03","modifiedFileCount":"40","status":"M","submitter":"Andi Huber"}]
