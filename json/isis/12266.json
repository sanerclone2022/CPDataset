[{"authorTime":"2021-04-21 23:42:54","codes":[{"authorDate":"2021-04-14 23:26:49","commitOrder":2,"curCode":"        void name_and_roles() {\n\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getRealName()).isNull();\n            Assertions.assertThat(userMemento.getAvatarUrl()).isNull();\n        }\n","date":"2021-04-14 23:26:49","endLine":42,"groupId":"4026","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"name_and_roles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/bd/411d089bfc167e51f667e2891d1b79d7e49faa.src","preCode":"        void name_and_roles() {\n\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getRealName()).isNull();\n            Assertions.assertThat(userMemento.getAvatarUrl()).isNull();\n        }\n","realPath":"api/applib/src/test/java/org/apache/isis/applib/services/user/UserMemento_Test.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"NB"},{"authorDate":"2021-04-21 23:42:54","commitOrder":2,"curCode":"        void user_and_roles_preserved_and_impersonating_flag_set() throws MalformedURLException {\n\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            val userMemento2 = userMemento.withImpersonating();\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.isImpersonating()).isTrue();\n\n            \r\n            Assertions.assertThat(userMemento.isImpersonating()).isFalse();\n        }\n","date":"2021-04-21 23:42:54","endLine":214,"groupId":"16619","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"user_and_roles_preserved_and_impersonating_flag_set","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/3d/df609972bce508003e36090669483d725e9531.src","preCode":"        void user_and_roles_preserved_and_impersonating_flag_set() throws MalformedURLException {\n\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            val userMemento2 = userMemento.withImpersonating();\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.isImpersonating()).isTrue();\n\n            \r\n            Assertions.assertThat(userMemento.isImpersonating()).isFalse();\n        }\n","realPath":"api/applib/src/test/java/org/apache/isis/applib/services/user/UserMemento_Test.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"B"}],"commitId":"0348bc49be1ca70a98f195ecaa09e1372df645ec","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-21 23:42:54","modifiedFileCount":"188","status":"M","submitter":"J?rg Rade"},{"authorTime":"2021-06-10 18:42:21","codes":[{"authorDate":"2021-06-10 18:42:21","commitOrder":3,"curCode":"        void name_and_roles() {\n\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles().size()).isEqualTo(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getRealName()).isNull();\n            Assertions.assertThat(userMemento.getAvatarUrl()).isNull();\n        }\n","date":"2021-06-10 18:42:21","endLine":42,"groupId":"12266","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"name_and_roles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/50/4ac666ec6a25e4810f881ea0d732920fe789b3.src","preCode":"        void name_and_roles() {\n\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            Assertions.assertThat(userMemento.getName()).isEqualTo(\"fredflintstone\");\n            Assertions.assertThat(userMemento.getRoles()).hasSize(2);\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"CAVEMAN\"));\n            Assertions.assertThat(userMemento.streamRoleNames()).anyMatch(x -> x.equals(\"HUSBAND\"));\n            Assertions.assertThat(userMemento.getRealName()).isNull();\n            Assertions.assertThat(userMemento.getAvatarUrl()).isNull();\n        }\n","realPath":"api/applib/src/test/java/org/apache/isis/applib/services/user/UserMemento_Test.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"M"},{"authorDate":"2021-06-10 18:42:21","commitOrder":3,"curCode":"        void user_and_roles_preserved_and_impersonating_flag_set() throws MalformedURLException {\n\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            val userMemento2 = userMemento.withImpersonating(true);\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.isImpersonating()).isTrue();\n\n            \r\n            Assertions.assertThat(userMemento.isImpersonating()).isFalse();\n        }\n","date":"2021-06-10 18:42:21","endLine":214,"groupId":"12266","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"user_and_roles_preserved_and_impersonating_flag_set","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/50/4ac666ec6a25e4810f881ea0d732920fe789b3.src","preCode":"        void user_and_roles_preserved_and_impersonating_flag_set() throws MalformedURLException {\n\n            \r\n            val userMemento = UserMemento.ofNameAndRoleNames(\"fredflintstone\", \"CAVEMAN\", \"HUSBAND\");\n\n            \r\n            val userMemento2 = userMemento.withImpersonating();\n\n            \r\n            Assertions.assertThat(userMemento2).isNotSameAs(userMemento);\n\n            \r\n            Assertions.assertThat(userMemento2.isImpersonating()).isTrue();\n\n            \r\n            Assertions.assertThat(userMemento.isImpersonating()).isFalse();\n        }\n","realPath":"api/applib/src/test/java/org/apache/isis/applib/services/user/UserMemento_Test.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"e93e59ddbffbc6337f62e90f1bdc17389cc4d24c","commitMessage":"@@@ISIS-2727: remove Authentication from 'security'\n\ninstead have UserMemento hold the authentication state\n\nalso adds some todos","date":"2021-06-10 18:42:21","modifiedFileCount":"63","status":"M","submitter":"Andi Huber"}]
