[{"authorTime":"2020-01-10 21:59:03","codes":[{"authorDate":"2020-01-10 21:59:03","commitOrder":1,"curCode":"    public Response domainTypeIsSubtypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"supertype\") final String superTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n        init(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE);\n\n        final String supertype = domainTypeFor(superTypeStr, argsUrlEncoded, \"supertype\");\n\n        final ObjectSpecification domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        final ObjectSpecification supertypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(supertype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(getResourceContext(), null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSubtypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(getResourceContext(), Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(getResourceContext(), \"supertype\", supertypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = domainTypeSpec.isOfType(supertypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","date":"2020-01-10 21:59:03","endLine":283,"groupId":"14302","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"domainTypeIsSubtypeOf","params":"(@PathParam(\"domainType\")finalStringdomainType@@QueryParam(\"supertype\")finalStringsuperTypeStr@@QueryParam(\"args\")finalStringargsUrlEncoded)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/be/f50793ef027ae6f0e58d171586804abddd234d.src","preCode":"    public Response domainTypeIsSubtypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"supertype\") final String superTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n        init(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE);\n\n        final String supertype = domainTypeFor(superTypeStr, argsUrlEncoded, \"supertype\");\n\n        final ObjectSpecification domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        final ObjectSpecification supertypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(supertype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(getResourceContext(), null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSubtypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(getResourceContext(), Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(getResourceContext(), \"supertype\", supertypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = domainTypeSpec.isOfType(supertypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","realPath":"viewers/restfulobjects/viewer/src/main/java/org/apache/isis/viewer/restfulobjects/viewer/resources/DomainTypeResourceServerside.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"B"},{"authorDate":"2020-01-10 21:59:03","commitOrder":1,"curCode":"    public Response domainTypeIsSupertypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"subtype\") final String subTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n\n        init(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE);\n\n        final String subtype = domainTypeFor(subTypeStr, argsUrlEncoded, \"subtype\");\n\n        final ObjectSpecification domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        final ObjectSpecification subtypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(subtype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(getResourceContext(), null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSupertypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(getResourceContext(), Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(getResourceContext(), \"subtype\", subtypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = subtypeSpec.isOfType(domainTypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","date":"2020-01-10 21:59:03","endLine":314,"groupId":"14302","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"domainTypeIsSupertypeOf","params":"(@PathParam(\"domainType\")finalStringdomainType@@QueryParam(\"subtype\")finalStringsubTypeStr@@QueryParam(\"args\")finalStringargsUrlEncoded)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/be/f50793ef027ae6f0e58d171586804abddd234d.src","preCode":"    public Response domainTypeIsSupertypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"subtype\") final String subTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n\n        init(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE);\n\n        final String subtype = domainTypeFor(subTypeStr, argsUrlEncoded, \"subtype\");\n\n        final ObjectSpecification domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        final ObjectSpecification subtypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(subtype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(getResourceContext(), null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSupertypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(getResourceContext(), Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(getResourceContext(), \"subtype\", subtypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = subtypeSpec.isOfType(domainTypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","realPath":"viewers/restfulobjects/viewer/src/main/java/org/apache/isis/viewer/restfulobjects/viewer/resources/DomainTypeResourceServerside.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"B"}],"commitId":"2074ec107287622d1cca7941b5b93b35c79d063f","commitMessage":"@@@ISIS-2259: moves core/viewers up a level.\n","date":"2020-01-10 21:59:03","modifiedFileCount":"0","status":"B","submitter":"danhaywood"},{"authorTime":"2020-02-12 17:25:20","codes":[{"authorDate":"2020-02-12 17:25:20","commitOrder":2,"curCode":"    public Response domainTypeIsSubtypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"supertype\") final String superTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n        \n        init(ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String supertype = domainTypeFor(superTypeStr, argsUrlEncoded, \"supertype\");\n\n        final ObjectSpecification domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        final ObjectSpecification supertypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(supertype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(getResourceContext(), null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSubtypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(getResourceContext(), Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(getResourceContext(), \"supertype\", supertypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = domainTypeSpec.isOfType(supertypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","date":"2020-02-12 17:25:20","endLine":282,"groupId":"14302","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"domainTypeIsSubtypeOf","params":"(@PathParam(\"domainType\")finalStringdomainType@@QueryParam(\"supertype\")finalStringsuperTypeStr@@QueryParam(\"args\")finalStringargsUrlEncoded)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/8a/367338a212a2e33a6e57c1ed92cc1b260691ae.src","preCode":"    public Response domainTypeIsSubtypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"supertype\") final String superTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n        init(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE);\n\n        final String supertype = domainTypeFor(superTypeStr, argsUrlEncoded, \"supertype\");\n\n        final ObjectSpecification domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        final ObjectSpecification supertypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(supertype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(getResourceContext(), null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSubtypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(getResourceContext(), Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(getResourceContext(), \"supertype\", supertypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = domainTypeSpec.isOfType(supertypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","realPath":"viewers/restfulobjects/viewer/src/main/java/org/apache/isis/viewer/restfulobjects/viewer/resources/DomainTypeResourceServerside.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"},{"authorDate":"2020-02-12 17:25:20","commitOrder":2,"curCode":"    public Response domainTypeIsSupertypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"subtype\") final String subTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n\n        init(ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String subtype = domainTypeFor(subTypeStr, argsUrlEncoded, \"subtype\");\n\n        final ObjectSpecification domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        final ObjectSpecification subtypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(subtype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(getResourceContext(), null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSupertypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(getResourceContext(), Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(getResourceContext(), \"subtype\", subtypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = subtypeSpec.isOfType(domainTypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","date":"2020-02-12 17:25:20","endLine":313,"groupId":"14302","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"domainTypeIsSupertypeOf","params":"(@PathParam(\"domainType\")finalStringdomainType@@QueryParam(\"subtype\")finalStringsubTypeStr@@QueryParam(\"args\")finalStringargsUrlEncoded)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/8a/367338a212a2e33a6e57c1ed92cc1b260691ae.src","preCode":"    public Response domainTypeIsSupertypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"subtype\") final String subTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n\n        init(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE);\n\n        final String subtype = domainTypeFor(subTypeStr, argsUrlEncoded, \"subtype\");\n\n        final ObjectSpecification domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        final ObjectSpecification subtypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(subtype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(getResourceContext(), null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSupertypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(getResourceContext(), Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(getResourceContext(), \"subtype\", subtypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = subtypeSpec.isOfType(domainTypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","realPath":"viewers/restfulobjects/viewer/src/main/java/org/apache/isis/viewer/restfulobjects/viewer/resources/DomainTypeResourceServerside.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"299e68709e8c2fd525ae03132fdd78f86dd660b6","commitMessage":"@@@ISIS-2275: refactor DomainObjectResourceServerside to support testing\n\nallows testing without having to mock or bring up a web stack","date":"2020-02-12 17:25:20","modifiedFileCount":"9","status":"M","submitter":"Andi Huber"},{"authorTime":"2020-02-12 18:07:40","codes":[{"authorDate":"2020-02-12 18:07:40","commitOrder":3,"curCode":"    public Response domainTypeIsSubtypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"supertype\") final String superTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n        \n        init(ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String supertype = domainTypeFor(superTypeStr, argsUrlEncoded, \"supertype\");\n\n        val domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        val supertypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(supertype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(getResourceContext(), null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSubtypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(getResourceContext(), Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(getResourceContext(), \"supertype\", supertypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = domainTypeSpec.isOfType(supertypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","date":"2020-02-12 18:07:40","endLine":282,"groupId":"14302","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"domainTypeIsSubtypeOf","params":"(@PathParam(\"domainType\")finalStringdomainType@@QueryParam(\"supertype\")finalStringsuperTypeStr@@QueryParam(\"args\")finalStringargsUrlEncoded)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/cb/a64368cac0c0703239f0aa5e6373b2c60d5fda.src","preCode":"    public Response domainTypeIsSubtypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"supertype\") final String superTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n        \n        init(ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String supertype = domainTypeFor(superTypeStr, argsUrlEncoded, \"supertype\");\n\n        final ObjectSpecification domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        final ObjectSpecification supertypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(supertype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(getResourceContext(), null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSubtypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(getResourceContext(), Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(getResourceContext(), \"supertype\", supertypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = domainTypeSpec.isOfType(supertypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","realPath":"viewers/restfulobjects/viewer/src/main/java/org/apache/isis/viewer/restfulobjects/viewer/resources/DomainTypeResourceServerside.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"},{"authorDate":"2020-02-12 18:07:40","commitOrder":3,"curCode":"    public Response domainTypeIsSupertypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"subtype\") final String subTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n\n        init(ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String subtype = domainTypeFor(subTypeStr, argsUrlEncoded, \"subtype\");\n\n        val domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        val subtypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(subtype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(getResourceContext(), null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSupertypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(getResourceContext(), Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(getResourceContext(), \"subtype\", subtypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = subtypeSpec.isOfType(domainTypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","date":"2020-02-12 18:07:40","endLine":313,"groupId":"14302","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"domainTypeIsSupertypeOf","params":"(@PathParam(\"domainType\")finalStringdomainType@@QueryParam(\"subtype\")finalStringsubTypeStr@@QueryParam(\"args\")finalStringargsUrlEncoded)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/cb/a64368cac0c0703239f0aa5e6373b2c60d5fda.src","preCode":"    public Response domainTypeIsSupertypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"subtype\") final String subTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n\n        init(ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String subtype = domainTypeFor(subTypeStr, argsUrlEncoded, \"subtype\");\n\n        final ObjectSpecification domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        final ObjectSpecification subtypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(subtype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(getResourceContext(), null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSupertypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(getResourceContext(), Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(getResourceContext(), \"subtype\", subtypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = subtypeSpec.isOfType(domainTypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","realPath":"viewers/restfulobjects/viewer/src/main/java/org/apache/isis/viewer/restfulobjects/viewer/resources/DomainTypeResourceServerside.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"cdf947369e7ab18f0952ef10d5d1ad8a5770c783","commitMessage":"@@@ISIS-2275: further refactoring and fixes tests","date":"2020-02-12 18:07:40","modifiedFileCount":"7","status":"M","submitter":"Andi Huber"},{"authorTime":"2020-02-12 19:17:22","codes":[{"authorDate":"2020-02-12 19:17:22","commitOrder":4,"curCode":"    public Response domainTypeIsSubtypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"supertype\") final String superTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n        \n        val resourceContext = createResourceContext(\n                ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String supertype = domainTypeFor(superTypeStr, argsUrlEncoded, \"supertype\");\n\n        val domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        val supertypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(supertype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(resourceContext, null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSubtypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(resourceContext, Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(resourceContext, \"supertype\", supertypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = domainTypeSpec.isOfType(supertypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","date":"2020-02-12 19:17:22","endLine":290,"groupId":"9102","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"domainTypeIsSubtypeOf","params":"(@PathParam(\"domainType\")finalStringdomainType@@QueryParam(\"supertype\")finalStringsuperTypeStr@@QueryParam(\"args\")finalStringargsUrlEncoded)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/27/68dacf45585d8b4307fa2a74979581433aa58c.src","preCode":"    public Response domainTypeIsSubtypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"supertype\") final String superTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n        \n        init(ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String supertype = domainTypeFor(superTypeStr, argsUrlEncoded, \"supertype\");\n\n        val domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        val supertypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(supertype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(getResourceContext(), null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSubtypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(getResourceContext(), Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(getResourceContext(), \"supertype\", supertypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = domainTypeSpec.isOfType(supertypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","realPath":"viewers/restfulobjects/viewer/src/main/java/org/apache/isis/viewer/restfulobjects/viewer/resources/DomainTypeResourceServerside.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2020-02-12 19:17:22","commitOrder":4,"curCode":"    public Response domainTypeIsSupertypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"subtype\") final String subTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n\n        val resourceContext = createResourceContext(\n                ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String subtype = domainTypeFor(subTypeStr, argsUrlEncoded, \"subtype\");\n\n        val domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        val subtypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(subtype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(resourceContext, null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSupertypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(resourceContext, Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(resourceContext, \"subtype\", subtypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = subtypeSpec.isOfType(domainTypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","date":"2020-02-12 19:17:22","endLine":322,"groupId":"9102","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"domainTypeIsSupertypeOf","params":"(@PathParam(\"domainType\")finalStringdomainType@@QueryParam(\"subtype\")finalStringsubTypeStr@@QueryParam(\"args\")finalStringargsUrlEncoded)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/27/68dacf45585d8b4307fa2a74979581433aa58c.src","preCode":"    public Response domainTypeIsSupertypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"subtype\") final String subTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n\n        init(ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String subtype = domainTypeFor(subTypeStr, argsUrlEncoded, \"subtype\");\n\n        val domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        val subtypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(subtype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(getResourceContext(), null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSupertypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(getResourceContext(), Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(getResourceContext(), \"subtype\", subtypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = subtypeSpec.isOfType(domainTypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","realPath":"viewers/restfulobjects/viewer/src/main/java/org/apache/isis/viewer/restfulobjects/viewer/resources/DomainTypeResourceServerside.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"1755bee10e5cd020723d718f8f983ce2ef3cd899","commitMessage":"@@@ISIS-2275: let ResourceAbstract no longer be a holder of ResourceContext\n\ndecouples the ResourceContext from the resource","date":"2020-02-12 19:17:22","modifiedFileCount":"9","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-04-14 23:26:49","codes":[{"authorDate":"2021-04-14 23:26:49","commitOrder":5,"curCode":"    public Response domainTypeIsSubtypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"supertype\") final String superTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n        \n        val resourceContext = createResourceContext(\n                ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String supertype = domainTypeFor(superTypeStr, argsUrlEncoded, \"supertype\");\n\n        val domainTypeSpec = getSpecificationLoader().specForLogicalTypeName(domainType).orElse(null);\n        val supertypeSpec = getSpecificationLoader().specForLogicalTypeName(supertype).orElse(null);\n        if (domainTypeSpec == null\n                || supertypeSpec == null) {\n            throw RestfulObjectsApplicationException.create(HttpStatusCode.NOT_FOUND);\n        }\n        \n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(resourceContext, null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSubtypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(resourceContext, Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(resourceContext, \"supertype\", supertypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = domainTypeSpec.isOfType(supertypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","date":"2021-04-14 23:26:49","endLine":295,"groupId":"18338","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"domainTypeIsSubtypeOf","params":"(@PathParam(\"domainType\")finalStringdomainType@@QueryParam(\"supertype\")finalStringsuperTypeStr@@QueryParam(\"args\")finalStringargsUrlEncoded)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/38/e08341a084393876e9a724b31b1a46d32e8eb1.src","preCode":"    public Response domainTypeIsSubtypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"supertype\") final String superTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n        \n        val resourceContext = createResourceContext(\n                ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String supertype = domainTypeFor(superTypeStr, argsUrlEncoded, \"supertype\");\n\n        val domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        val supertypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(supertype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(resourceContext, null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSubtypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(resourceContext, Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(resourceContext, \"supertype\", supertypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = domainTypeSpec.isOfType(supertypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","realPath":"viewers/restfulobjects/viewer/src/main/java/org/apache/isis/viewer/restfulobjects/viewer/resources/DomainTypeResourceServerside.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2021-04-14 23:26:49","commitOrder":5,"curCode":"    public Response domainTypeIsSupertypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"subtype\") final String subTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n\n        val resourceContext = createResourceContext(\n                ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String subtype = domainTypeFor(subTypeStr, argsUrlEncoded, \"subtype\");\n\n        val domainTypeSpec = getSpecificationLoader().specForLogicalTypeName(domainType).orElse(null);\n        val subtypeSpec = getSpecificationLoader().specForLogicalTypeName(subtype).orElse(null);\n        if (domainTypeSpec == null\n                || subtypeSpec == null) {\n            throw RestfulObjectsApplicationException.create(HttpStatusCode.NOT_FOUND);\n        }\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(resourceContext, null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSupertypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(resourceContext, Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(resourceContext, \"subtype\", subtypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = subtypeSpec.isOfType(domainTypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","date":"2021-04-14 23:26:49","endLine":331,"groupId":"18338","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"domainTypeIsSupertypeOf","params":"(@PathParam(\"domainType\")finalStringdomainType@@QueryParam(\"subtype\")finalStringsubTypeStr@@QueryParam(\"args\")finalStringargsUrlEncoded)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/38/e08341a084393876e9a724b31b1a46d32e8eb1.src","preCode":"    public Response domainTypeIsSupertypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"subtype\") final String subTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n\n        val resourceContext = createResourceContext(\n                ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String subtype = domainTypeFor(subTypeStr, argsUrlEncoded, \"subtype\");\n\n        val domainTypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(domainType));\n        val subtypeSpec = getSpecificationLoader().lookupBySpecIdElseLoad(ObjectSpecId.of(subtype));\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(resourceContext, null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSupertypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(resourceContext, Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(resourceContext, \"subtype\", subtypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = subtypeSpec.isOfType(domainTypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","realPath":"viewers/restfulobjects/viewer/src/main/java/org/apache/isis/viewer/restfulobjects/viewer/resources/DomainTypeResourceServerside.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"}],"commitId":"75633e1f8ce37deb39e3c2e2644357af15365d05","commitMessage":"@@@Merge branch 'master' of https://github.com/apache/isis into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-14 23:26:49","modifiedFileCount":"1999","status":"M","submitter":"J?rg Rade"},{"authorTime":"2021-08-22 01:17:55","codes":[{"authorDate":"2021-08-22 01:17:55","commitOrder":6,"curCode":"    public Response domainTypeIsSubtypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"supertype\") final String superTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n\n        val resourceContext = createResourceContext(\n                ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String supertype = domainTypeFor(superTypeStr, argsUrlEncoded, \"supertype\",\n                roEx->_EndpointLogging.error(log, \"GET /domain-types/{}/type-actions/isSubtypeOf/invoke\", domainType, roEx));\n\n        val domainTypeSpec = getSpecificationLoader().specForLogicalTypeName(domainType).orElse(null);\n        val supertypeSpec = getSpecificationLoader().specForLogicalTypeName(supertype).orElse(null);\n        if (domainTypeSpec == null\n                || supertypeSpec == null) {\n            throw _EndpointLogging.error(log, \"GET /domain-types/{}/type-actions/isSubtypeOf/invoke\", domainType,\n                    RestfulObjectsApplicationException.create(HttpStatusCode.NOT_FOUND));\n        }\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(resourceContext, null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSubtypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(resourceContext, Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(resourceContext, \"supertype\", supertypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = domainTypeSpec.isOfType(supertypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return _EndpointLogging.response(log, \"GET /domain-types/{}/type-actions/isSubtypeOf/invoke\", domainType,\n                Responses.ofOk(renderer, Caching.ONE_DAY).build());\n    }\n","date":"2021-08-22 01:17:55","endLine":351,"groupId":"10508","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"domainTypeIsSubtypeOf","params":"(@PathParam(\"domainType\")finalStringdomainType@@QueryParam(\"supertype\")finalStringsuperTypeStr@@QueryParam(\"args\")finalStringargsUrlEncoded)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/3b/dd812bb841c81f83d23bc678f926bd49de0de3.src","preCode":"    public Response domainTypeIsSubtypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"supertype\") final String superTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n\n        val resourceContext = createResourceContext(\n                ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String supertype = domainTypeFor(superTypeStr, argsUrlEncoded, \"supertype\");\n\n        val domainTypeSpec = getSpecificationLoader().specForLogicalTypeName(domainType).orElse(null);\n        val supertypeSpec = getSpecificationLoader().specForLogicalTypeName(supertype).orElse(null);\n        if (domainTypeSpec == null\n                || supertypeSpec == null) {\n          \r\n            throw RestfulObjectsApplicationException.create(HttpStatusCode.NOT_FOUND);\n        }\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(resourceContext, null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSubtypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(resourceContext, Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(resourceContext, \"supertype\", supertypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = domainTypeSpec.isOfType(supertypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n      \r\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","realPath":"viewers/restfulobjects/viewer/src/main/java/org/apache/isis/viewer/restfulobjects/viewer/resources/DomainTypeResourceServerside.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"},{"authorDate":"2021-08-22 01:17:55","commitOrder":6,"curCode":"    public Response domainTypeIsSupertypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"subtype\") final String subTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n\n        val resourceContext = createResourceContext(\n                ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String subtype = domainTypeFor(subTypeStr, argsUrlEncoded, \"subtype\",\n                roEx->_EndpointLogging.error(log, \"GET /domain-types/{}/type-actions/isSupertypeOf/invoke\", domainType, roEx));\n\n        val domainTypeSpec = getSpecificationLoader().specForLogicalTypeName(domainType).orElse(null);\n        val subtypeSpec = getSpecificationLoader().specForLogicalTypeName(subtype).orElse(null);\n        if (domainTypeSpec == null\n                || subtypeSpec == null) {\n            throw _EndpointLogging.error(log, \"GET /domain-types/{}/type-actions/isSupertypeOf/invoke\", domainType,\n                    RestfulObjectsApplicationException.create(HttpStatusCode.NOT_FOUND));\n        }\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(resourceContext, null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSupertypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(resourceContext, Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(resourceContext, \"subtype\", subtypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = subtypeSpec.isOfType(domainTypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n        return _EndpointLogging.response(log, \"GET /domain-types/{}/type-actions/isSupertypeOf/invoke\", domainType,\n                Responses.ofOk(renderer, Caching.ONE_DAY).build());\n    }\n","date":"2021-08-22 01:17:55","endLine":393,"groupId":"10508","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"domainTypeIsSupertypeOf","params":"(@PathParam(\"domainType\")finalStringdomainType@@QueryParam(\"subtype\")finalStringsubTypeStr@@QueryParam(\"args\")finalStringargsUrlEncoded)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/3b/dd812bb841c81f83d23bc678f926bd49de0de3.src","preCode":"    public Response domainTypeIsSupertypeOf(\n            @PathParam(\"domainType\") final String domainType,\n            @QueryParam(\"subtype\") final String subTypeStr, \r\n            @QueryParam(\"args\") final String argsUrlEncoded \r\n            ) {\n\n        val resourceContext = createResourceContext(\n                ResourceDescriptor.generic(Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE));\n\n        final String subtype = domainTypeFor(subTypeStr, argsUrlEncoded, \"subtype\");\n\n        val domainTypeSpec = getSpecificationLoader().specForLogicalTypeName(domainType).orElse(null);\n        val subtypeSpec = getSpecificationLoader().specForLogicalTypeName(subtype).orElse(null);\n        if (domainTypeSpec == null\n                || subtypeSpec == null) {\n          \r\n            throw RestfulObjectsApplicationException.create(HttpStatusCode.NOT_FOUND);\n        }\n\n        final TypeActionResultReprRenderer renderer = new TypeActionResultReprRenderer(resourceContext, null, JsonRepresentation.newMap());\n\n        final String url = \"domain-types/\" + domainType + \"/type-actions/isSupertypeOf/invoke\";\n        final LinkBuilder linkBuilder = LinkBuilder.newBuilder(resourceContext, Rel.SELF.getName(), RepresentationType.TYPE_ACTION_RESULT, url);\n        final JsonRepresentation arguments = DomainTypeReprRenderer.argumentsTo(resourceContext, \"subtype\", subtypeSpec);\n        final JsonRepresentation selfLink = linkBuilder.withArguments(arguments).build();\n\n        final boolean value = subtypeSpec.isOfType(domainTypeSpec);\n        renderer.with(domainTypeSpec).withSelf(selfLink).withValue(value);\n\n      \r\n        return Responses.ofOk(renderer, Caching.ONE_DAY).build();\n    }\n","realPath":"viewers/restfulobjects/viewer/src/main/java/org/apache/isis/viewer/restfulobjects/viewer/resources/DomainTypeResourceServerside.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"8ee96f4def2599a822dae4b3f651f59988ea112e","commitMessage":"@@@ISIS-2853: debug logging for DomainTypeResourceServerside","date":"2021-08-22 01:17:55","modifiedFileCount":"1","status":"M","submitter":"andi-huber"}]
