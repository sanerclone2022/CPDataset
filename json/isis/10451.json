[{"authorTime":"2020-01-10 21:59:03","codes":[{"authorDate":"2020-01-10 21:59:03","commitOrder":1,"curCode":"    private void addProperties(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n            if (!(assoc instanceof OneToOneAssociation)) {\n                continue;\n            }\n\n            final OneToOneAssociation property = (OneToOneAssociation) assoc;\n            final LinkFollowSpecs linkFollowerForProp = getLinkFollowSpecs().follow(\"members[\" + property.getId() + \"]\");\n            final JsonRepresentation propertyRepresentation = JsonRepresentation.newMap();\n            final ObjectPropertyReprRenderer renderer =\n                    new ObjectPropertyReprRenderer(getResourceContext(), linkFollowerForProp, property.getId(), propertyRepresentation);\n            renderer.with(new ObjectAndProperty(objectAdapter, property)).usingLinkTo(linkToBuilder);\n\n            if (mode.isArgs()) {\n                renderer.asArguments();\n            }\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            final JsonRepresentation propertyValueRepresentation = renderer.render();\n            final JsonRepresentation propertyRepr = resourceContext.objectPropertyValuesOnly()\n                    ? propertyValueRepresentation.getRepresentation(\"value\")\n                            : propertyValueRepresentation;\n                    members.mapPut(assoc.getId(), propertyRepr);\n        }\n    }\n","date":"2020-01-10 21:59:03","endLine":347,"groupId":"2963","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addProperties","params":"(finalManagedObjectobjectAdapter@finalJsonRepresentationmembers@finalList<ObjectAssociation>associations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/9c/218e5409525e8d916fd875a7f618a390bd1ab7.src","preCode":"    private void addProperties(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n            if (!(assoc instanceof OneToOneAssociation)) {\n                continue;\n            }\n\n            final OneToOneAssociation property = (OneToOneAssociation) assoc;\n            final LinkFollowSpecs linkFollowerForProp = getLinkFollowSpecs().follow(\"members[\" + property.getId() + \"]\");\n            final JsonRepresentation propertyRepresentation = JsonRepresentation.newMap();\n            final ObjectPropertyReprRenderer renderer =\n                    new ObjectPropertyReprRenderer(getResourceContext(), linkFollowerForProp, property.getId(), propertyRepresentation);\n            renderer.with(new ObjectAndProperty(objectAdapter, property)).usingLinkTo(linkToBuilder);\n\n            if (mode.isArgs()) {\n                renderer.asArguments();\n            }\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            final JsonRepresentation propertyValueRepresentation = renderer.render();\n            final JsonRepresentation propertyRepr = resourceContext.objectPropertyValuesOnly()\n                    ? propertyValueRepresentation.getRepresentation(\"value\")\n                            : propertyValueRepresentation;\n                    members.mapPut(assoc.getId(), propertyRepr);\n        }\n    }\n","realPath":"viewers/restfulobjects/rendering/src/main/java/org/apache/isis/viewer/restfulobjects/rendering/domainobjects/DomainObjectReprRenderer.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"B"},{"authorDate":"2020-01-10 21:59:03","commitOrder":1,"curCode":"    private void addCollections(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n\n            if (!(assoc instanceof OneToManyAssociation)) {\n                continue;\n            }\n\n            final OneToManyAssociation collection = (OneToManyAssociation) assoc;\n\n            final LinkFollowSpecs linkFollowerForColl = getLinkFollowSpecs().follow(\n                    \"members[\" + collection.getId() + \"]\");\n            final JsonRepresentation collectionRepresentation = JsonRepresentation.newMap();\n            final ObjectCollectionReprRenderer renderer =\n                    new ObjectCollectionReprRenderer(getResourceContext(), linkFollowerForColl, collection.getId(), collectionRepresentation);\n\n            renderer.with(new ObjectAndCollection(objectAdapter, collection)).usingLinkTo(linkToBuilder);\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            members.mapPut(assoc.getId(), renderer.render());\n        }\n    }\n","date":"2020-01-10 21:59:03","endLine":378,"groupId":"2964","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addCollections","params":"(finalManagedObjectobjectAdapter@finalJsonRepresentationmembers@finalList<ObjectAssociation>associations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/9c/218e5409525e8d916fd875a7f618a390bd1ab7.src","preCode":"    private void addCollections(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n\n            if (!(assoc instanceof OneToManyAssociation)) {\n                continue;\n            }\n\n            final OneToManyAssociation collection = (OneToManyAssociation) assoc;\n\n            final LinkFollowSpecs linkFollowerForColl = getLinkFollowSpecs().follow(\n                    \"members[\" + collection.getId() + \"]\");\n            final JsonRepresentation collectionRepresentation = JsonRepresentation.newMap();\n            final ObjectCollectionReprRenderer renderer =\n                    new ObjectCollectionReprRenderer(getResourceContext(), linkFollowerForColl, collection.getId(), collectionRepresentation);\n\n            renderer.with(new ObjectAndCollection(objectAdapter, collection)).usingLinkTo(linkToBuilder);\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            members.mapPut(assoc.getId(), renderer.render());\n        }\n    }\n","realPath":"viewers/restfulobjects/rendering/src/main/java/org/apache/isis/viewer/restfulobjects/rendering/domainobjects/DomainObjectReprRenderer.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"B"}],"commitId":"2074ec107287622d1cca7941b5b93b35c79d063f","commitMessage":"@@@ISIS-2259: moves core/viewers up a level.\n","date":"2020-01-10 21:59:03","modifiedFileCount":"0","status":"B","submitter":"danhaywood"},{"authorTime":"2020-05-01 22:53:40","codes":[{"authorDate":"2020-05-01 22:53:40","commitOrder":2,"curCode":"    private void addProperties(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n            if (!(assoc instanceof OneToOneAssociation)) {\n                continue;\n            }\n\n            final OneToOneAssociation property = (OneToOneAssociation) assoc;\n            final LinkFollowSpecs linkFollowerForProp = getLinkFollowSpecs().follow(\"members[\" + property.getId() + \"]\");\n            final JsonRepresentation propertyRepresentation = JsonRepresentation.newMap();\n            final ObjectPropertyReprRenderer renderer =\n                    new ObjectPropertyReprRenderer(getResourceContext(), linkFollowerForProp, property.getId(), propertyRepresentation);\n            renderer.with(ManagedProperty.of(objectAdapter, property)).usingLinkTo(linkToBuilder);\n\n            if (mode.isArgs()) {\n                renderer.asArguments();\n            }\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            final JsonRepresentation propertyValueRepresentation = renderer.render();\n            final JsonRepresentation propertyRepr = resourceContext.objectPropertyValuesOnly()\n                    ? propertyValueRepresentation.getRepresentation(\"value\")\n                            : propertyValueRepresentation;\n                    members.mapPut(assoc.getId(), propertyRepr);\n        }\n    }\n","date":"2020-05-01 22:53:40","endLine":350,"groupId":"2963","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addProperties","params":"(finalManagedObjectobjectAdapter@finalJsonRepresentationmembers@finalList<ObjectAssociation>associations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/31/c5f99a3d1a17a6595fea2dc11c043567411358.src","preCode":"    private void addProperties(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n            if (!(assoc instanceof OneToOneAssociation)) {\n                continue;\n            }\n\n            final OneToOneAssociation property = (OneToOneAssociation) assoc;\n            final LinkFollowSpecs linkFollowerForProp = getLinkFollowSpecs().follow(\"members[\" + property.getId() + \"]\");\n            final JsonRepresentation propertyRepresentation = JsonRepresentation.newMap();\n            final ObjectPropertyReprRenderer renderer =\n                    new ObjectPropertyReprRenderer(getResourceContext(), linkFollowerForProp, property.getId(), propertyRepresentation);\n            renderer.with(new ObjectAndProperty(objectAdapter, property)).usingLinkTo(linkToBuilder);\n\n            if (mode.isArgs()) {\n                renderer.asArguments();\n            }\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            final JsonRepresentation propertyValueRepresentation = renderer.render();\n            final JsonRepresentation propertyRepr = resourceContext.objectPropertyValuesOnly()\n                    ? propertyValueRepresentation.getRepresentation(\"value\")\n                            : propertyValueRepresentation;\n                    members.mapPut(assoc.getId(), propertyRepr);\n        }\n    }\n","realPath":"viewers/restfulobjects/rendering/src/main/java/org/apache/isis/viewer/restfulobjects/rendering/domainobjects/DomainObjectReprRenderer.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"M"},{"authorDate":"2020-05-01 22:53:40","commitOrder":2,"curCode":"    private void addCollections(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n\n            if (!(assoc instanceof OneToManyAssociation)) {\n                continue;\n            }\n\n            final OneToManyAssociation collection = (OneToManyAssociation) assoc;\n\n            final LinkFollowSpecs linkFollowerForColl = getLinkFollowSpecs().follow(\n                    \"members[\" + collection.getId() + \"]\");\n            final JsonRepresentation collectionRepresentation = JsonRepresentation.newMap();\n            final ObjectCollectionReprRenderer renderer =\n                    new ObjectCollectionReprRenderer(getResourceContext(), linkFollowerForColl, collection.getId(), collectionRepresentation);\n\n            renderer.with(ManagedCollection.of(objectAdapter, collection)).usingLinkTo(linkToBuilder);\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            members.mapPut(assoc.getId(), renderer.render());\n        }\n    }\n","date":"2020-05-01 22:53:40","endLine":381,"groupId":"2964","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addCollections","params":"(finalManagedObjectobjectAdapter@finalJsonRepresentationmembers@finalList<ObjectAssociation>associations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/31/c5f99a3d1a17a6595fea2dc11c043567411358.src","preCode":"    private void addCollections(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n\n            if (!(assoc instanceof OneToManyAssociation)) {\n                continue;\n            }\n\n            final OneToManyAssociation collection = (OneToManyAssociation) assoc;\n\n            final LinkFollowSpecs linkFollowerForColl = getLinkFollowSpecs().follow(\n                    \"members[\" + collection.getId() + \"]\");\n            final JsonRepresentation collectionRepresentation = JsonRepresentation.newMap();\n            final ObjectCollectionReprRenderer renderer =\n                    new ObjectCollectionReprRenderer(getResourceContext(), linkFollowerForColl, collection.getId(), collectionRepresentation);\n\n            renderer.with(new ObjectAndCollection(objectAdapter, collection)).usingLinkTo(linkToBuilder);\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            members.mapPut(assoc.getId(), renderer.render());\n        }\n    }\n","realPath":"viewers/restfulobjects/rendering/src/main/java/org/apache/isis/viewer/restfulobjects/rendering/domainobjects/DomainObjectReprRenderer.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"M"}],"commitId":"c542086ffdb84215c6de71ccc523abb749daa733","commitMessage":"@@@Merge branch 'master' of https://github.com/apache/isis\n","date":"2020-05-01 22:53:40","modifiedFileCount":"165","status":"M","submitter":"J?rg Rade"},{"authorTime":"2020-05-01 22:53:40","codes":[{"authorDate":"2020-07-29 21:31:11","commitOrder":3,"curCode":"    private void addProperties(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n            if (!(assoc instanceof OneToOneAssociation)) {\n                continue;\n            }\n\n            final OneToOneAssociation property = (OneToOneAssociation) assoc;\n            final LinkFollowSpecs linkFollowerForProp = getLinkFollowSpecs().follow(\"members[\" + property.getId() + \"]\");\n            final JsonRepresentation propertyRepresentation = JsonRepresentation.newMap();\n            final ObjectPropertyReprRenderer renderer =\n                    new ObjectPropertyReprRenderer(getResourceContext(), linkFollowerForProp, property.getId(), propertyRepresentation);\n            renderer.with(ManagedProperty.of(objectAdapter, property, resourceContext.getWhere())).usingLinkTo(linkToBuilder);\n\n            if (mode.isArgs()) {\n                renderer.asArguments();\n            }\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            final JsonRepresentation propertyValueRepresentation = renderer.render();\n            final JsonRepresentation propertyRepr = resourceContext.objectPropertyValuesOnly()\n                    ? propertyValueRepresentation.getRepresentation(\"value\")\n                            : propertyValueRepresentation;\n                    members.mapPut(assoc.getId(), propertyRepr);\n        }\n    }\n","date":"2020-07-29 21:31:11","endLine":344,"groupId":"2696","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addProperties","params":"(finalManagedObjectobjectAdapter@finalJsonRepresentationmembers@finalList<ObjectAssociation>associations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/94/17ac157d640e6f9625b81f1db1427892dd02a9.src","preCode":"    private void addProperties(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n            if (!(assoc instanceof OneToOneAssociation)) {\n                continue;\n            }\n\n            final OneToOneAssociation property = (OneToOneAssociation) assoc;\n            final LinkFollowSpecs linkFollowerForProp = getLinkFollowSpecs().follow(\"members[\" + property.getId() + \"]\");\n            final JsonRepresentation propertyRepresentation = JsonRepresentation.newMap();\n            final ObjectPropertyReprRenderer renderer =\n                    new ObjectPropertyReprRenderer(getResourceContext(), linkFollowerForProp, property.getId(), propertyRepresentation);\n            renderer.with(ManagedProperty.of(objectAdapter, property)).usingLinkTo(linkToBuilder);\n\n            if (mode.isArgs()) {\n                renderer.asArguments();\n            }\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            final JsonRepresentation propertyValueRepresentation = renderer.render();\n            final JsonRepresentation propertyRepr = resourceContext.objectPropertyValuesOnly()\n                    ? propertyValueRepresentation.getRepresentation(\"value\")\n                            : propertyValueRepresentation;\n                    members.mapPut(assoc.getId(), propertyRepr);\n        }\n    }\n","realPath":"viewers/restfulobjects/rendering/src/main/java/org/apache/isis/viewer/restfulobjects/rendering/domainobjects/DomainObjectReprRenderer.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"M"},{"authorDate":"2020-05-01 22:53:40","commitOrder":3,"curCode":"    private void addCollections(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n\n            if (!(assoc instanceof OneToManyAssociation)) {\n                continue;\n            }\n\n            final OneToManyAssociation collection = (OneToManyAssociation) assoc;\n\n            final LinkFollowSpecs linkFollowerForColl = getLinkFollowSpecs().follow(\n                    \"members[\" + collection.getId() + \"]\");\n            final JsonRepresentation collectionRepresentation = JsonRepresentation.newMap();\n            final ObjectCollectionReprRenderer renderer =\n                    new ObjectCollectionReprRenderer(getResourceContext(), linkFollowerForColl, collection.getId(), collectionRepresentation);\n\n            renderer.with(ManagedCollection.of(objectAdapter, collection)).usingLinkTo(linkToBuilder);\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            members.mapPut(assoc.getId(), renderer.render());\n        }\n    }\n","date":"2020-05-01 22:53:40","endLine":381,"groupId":"2964","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addCollections","params":"(finalManagedObjectobjectAdapter@finalJsonRepresentationmembers@finalList<ObjectAssociation>associations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/31/c5f99a3d1a17a6595fea2dc11c043567411358.src","preCode":"    private void addCollections(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n\n            if (!(assoc instanceof OneToManyAssociation)) {\n                continue;\n            }\n\n            final OneToManyAssociation collection = (OneToManyAssociation) assoc;\n\n            final LinkFollowSpecs linkFollowerForColl = getLinkFollowSpecs().follow(\n                    \"members[\" + collection.getId() + \"]\");\n            final JsonRepresentation collectionRepresentation = JsonRepresentation.newMap();\n            final ObjectCollectionReprRenderer renderer =\n                    new ObjectCollectionReprRenderer(getResourceContext(), linkFollowerForColl, collection.getId(), collectionRepresentation);\n\n            renderer.with(ManagedCollection.of(objectAdapter, collection)).usingLinkTo(linkToBuilder);\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            members.mapPut(assoc.getId(), renderer.render());\n        }\n    }\n","realPath":"viewers/restfulobjects/rendering/src/main/java/org/apache/isis/viewer/restfulobjects/rendering/domainobjects/DomainObjectReprRenderer.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"N"}],"commitId":"572386c0c063456e7e4946fe781c83040ebf6373","commitMessage":"@@@ISIS-2340: ManagedProperty to hold an immutable 'Where' field","date":"2020-07-29 21:31:11","modifiedFileCount":"14","status":"M","submitter":"Andi Huber"},{"authorTime":"2020-07-29 22:11:05","codes":[{"authorDate":"2020-07-29 21:31:11","commitOrder":4,"curCode":"    private void addProperties(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n            if (!(assoc instanceof OneToOneAssociation)) {\n                continue;\n            }\n\n            final OneToOneAssociation property = (OneToOneAssociation) assoc;\n            final LinkFollowSpecs linkFollowerForProp = getLinkFollowSpecs().follow(\"members[\" + property.getId() + \"]\");\n            final JsonRepresentation propertyRepresentation = JsonRepresentation.newMap();\n            final ObjectPropertyReprRenderer renderer =\n                    new ObjectPropertyReprRenderer(getResourceContext(), linkFollowerForProp, property.getId(), propertyRepresentation);\n            renderer.with(ManagedProperty.of(objectAdapter, property, resourceContext.getWhere())).usingLinkTo(linkToBuilder);\n\n            if (mode.isArgs()) {\n                renderer.asArguments();\n            }\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            final JsonRepresentation propertyValueRepresentation = renderer.render();\n            final JsonRepresentation propertyRepr = resourceContext.objectPropertyValuesOnly()\n                    ? propertyValueRepresentation.getRepresentation(\"value\")\n                            : propertyValueRepresentation;\n                    members.mapPut(assoc.getId(), propertyRepr);\n        }\n    }\n","date":"2020-07-29 21:31:11","endLine":344,"groupId":"10451","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"addProperties","params":"(finalManagedObjectobjectAdapter@finalJsonRepresentationmembers@finalList<ObjectAssociation>associations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/94/17ac157d640e6f9625b81f1db1427892dd02a9.src","preCode":"    private void addProperties(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n            if (!(assoc instanceof OneToOneAssociation)) {\n                continue;\n            }\n\n            final OneToOneAssociation property = (OneToOneAssociation) assoc;\n            final LinkFollowSpecs linkFollowerForProp = getLinkFollowSpecs().follow(\"members[\" + property.getId() + \"]\");\n            final JsonRepresentation propertyRepresentation = JsonRepresentation.newMap();\n            final ObjectPropertyReprRenderer renderer =\n                    new ObjectPropertyReprRenderer(getResourceContext(), linkFollowerForProp, property.getId(), propertyRepresentation);\n            renderer.with(ManagedProperty.of(objectAdapter, property, resourceContext.getWhere())).usingLinkTo(linkToBuilder);\n\n            if (mode.isArgs()) {\n                renderer.asArguments();\n            }\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            final JsonRepresentation propertyValueRepresentation = renderer.render();\n            final JsonRepresentation propertyRepr = resourceContext.objectPropertyValuesOnly()\n                    ? propertyValueRepresentation.getRepresentation(\"value\")\n                            : propertyValueRepresentation;\n                    members.mapPut(assoc.getId(), propertyRepr);\n        }\n    }\n","realPath":"viewers/restfulobjects/rendering/src/main/java/org/apache/isis/viewer/restfulobjects/rendering/domainobjects/DomainObjectReprRenderer.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"N"},{"authorDate":"2020-07-29 22:11:05","commitOrder":4,"curCode":"    private void addCollections(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n\n            if (!(assoc instanceof OneToManyAssociation)) {\n                continue;\n            }\n\n            final OneToManyAssociation collection = (OneToManyAssociation) assoc;\n\n            final LinkFollowSpecs linkFollowerForColl = getLinkFollowSpecs().follow(\n                    \"members[\" + collection.getId() + \"]\");\n            final JsonRepresentation collectionRepresentation = JsonRepresentation.newMap();\n            final ObjectCollectionReprRenderer renderer =\n                    new ObjectCollectionReprRenderer(getResourceContext(), linkFollowerForColl, collection.getId(), collectionRepresentation);\n\n            val where = resourceContext.getWhere();\n            \n            renderer.with(ManagedCollection.of(objectAdapter, collection, where)).usingLinkTo(linkToBuilder);\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            members.mapPut(assoc.getId(), renderer.render());\n        }\n    }\n","date":"2020-07-29 22:11:05","endLine":377,"groupId":"10451","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"addCollections","params":"(finalManagedObjectobjectAdapter@finalJsonRepresentationmembers@finalList<ObjectAssociation>associations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/00/bb6cb25402ec28e1b8800907e7bcaf92639743.src","preCode":"    private void addCollections(final ManagedObject objectAdapter, final JsonRepresentation members, final List<ObjectAssociation> associations) {\n        for (final ObjectAssociation assoc : associations) {\n\n            if (mode.checkVisibility()) {\n                final Consent visibility = assoc.isVisible(objectAdapter, getInteractionInitiatedBy(), resourceContext.getWhere());\n                if (!visibility.isAllowed()) {\n                    continue;\n                }\n            }\n\n            if (!(assoc instanceof OneToManyAssociation)) {\n                continue;\n            }\n\n            final OneToManyAssociation collection = (OneToManyAssociation) assoc;\n\n            final LinkFollowSpecs linkFollowerForColl = getLinkFollowSpecs().follow(\n                    \"members[\" + collection.getId() + \"]\");\n            final JsonRepresentation collectionRepresentation = JsonRepresentation.newMap();\n            final ObjectCollectionReprRenderer renderer =\n                    new ObjectCollectionReprRenderer(getResourceContext(), linkFollowerForColl, collection.getId(), collectionRepresentation);\n\n            renderer.with(ManagedCollection.of(objectAdapter, collection)).usingLinkTo(linkToBuilder);\n            if(mode.isEventSerialization()) {\n                renderer.asEventSerialization();\n            }\n\n            members.mapPut(assoc.getId(), renderer.render());\n        }\n    }\n","realPath":"viewers/restfulobjects/rendering/src/main/java/org/apache/isis/viewer/restfulobjects/rendering/domainobjects/DomainObjectReprRenderer.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"}],"commitId":"0e5857cfc522684283eb995283cdcbb2ba1a702b","commitMessage":"@@@ISIS-2340: ManagedCollection/Action to hold an immutable 'Where' field","date":"2020-07-29 22:11:05","modifiedFileCount":"26","status":"M","submitter":"Andi Huber"}]
