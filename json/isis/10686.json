[{"authorTime":"2020-01-30 06:48:26","codes":[{"authorDate":"2020-01-30 06:48:26","commitOrder":1,"curCode":"    void classicMixin_shouldHaveProperFacet() {\n\n        val mixinFacet = super.runTypeContextOn(Customer_mixin.class)\n                .getFacet(MixinFacet.class);\n        \n        \r\n        assertNotNull(mixinFacet);\n        assertTrue(mixinFacet.isMixinFor(Customer.class));\n        assertFalse(mixinFacet.isMixinFor(NoCustomer.class));\n        \n        \r\n        val holderPojo = new Customer();\n        val mixinPojo = mixinFacet.instantiate(holderPojo);\n        ((Customer_mixin)mixinPojo).$$(\"hello\");\n        assertEquals(\"hello\", holderPojo.getName());\n        \n    }\n","date":"2020-01-30 07:18:45","endLine":95,"groupId":"4158","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"classicMixin_shouldHaveProperFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/89/e03429fa61f2b8a2a53413000cce1723c9d5b2.src","preCode":"    void classicMixin_shouldHaveProperFacet() {\n\n        val mixinFacet = super.runTypeContextOn(Customer_mixin.class)\n                .getFacet(MixinFacet.class);\n        \n        \r\n        assertNotNull(mixinFacet);\n        assertTrue(mixinFacet.isMixinFor(Customer.class));\n        assertFalse(mixinFacet.isMixinFor(NoCustomer.class));\n        \n        \r\n        val holderPojo = new Customer();\n        val mixinPojo = mixinFacet.instantiate(holderPojo);\n        ((Customer_mixin)mixinPojo).$$(\"hello\");\n        assertEquals(\"hello\", holderPojo.getName());\n        \n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/object/mixin/MixinIntendedAsActionTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"},{"authorDate":"2020-01-30 06:48:26","commitOrder":1,"curCode":"    void actionMixin_shouldHaveProperFacet() {\n\n        val mixinFacet = super.runTypeContextOn(Customer_action.class)\n                .getFacet(MixinFacet.class);\n        \n        \r\n        assertNotNull(mixinFacet);\n        assertTrue(mixinFacet.isMixinFor(Customer.class));\n        assertFalse(mixinFacet.isMixinFor(NoCustomer.class));\n        \n        \r\n        val holderPojo = new Customer();\n        val mixinPojo = mixinFacet.instantiate(holderPojo);\n        ((Customer_action)mixinPojo).$$(\"hello\");\n        assertEquals(\"hello\", holderPojo.getName());\n    }\n","date":"2020-01-30 07:18:45","endLine":125,"groupId":"4158","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"actionMixin_shouldHaveProperFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/89/e03429fa61f2b8a2a53413000cce1723c9d5b2.src","preCode":"    void actionMixin_shouldHaveProperFacet() {\n\n        val mixinFacet = super.runTypeContextOn(Customer_action.class)\n                .getFacet(MixinFacet.class);\n        \n        \r\n        assertNotNull(mixinFacet);\n        assertTrue(mixinFacet.isMixinFor(Customer.class));\n        assertFalse(mixinFacet.isMixinFor(NoCustomer.class));\n        \n        \r\n        val holderPojo = new Customer();\n        val mixinPojo = mixinFacet.instantiate(holderPojo);\n        ((Customer_action)mixinPojo).$$(\"hello\");\n        assertEquals(\"hello\", holderPojo.getName());\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/object/mixin/MixinIntendedAsActionTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"}],"commitId":"54642d72400c6c0bda9681191d822a67f83d38b9","commitMessage":"@@@ISIS-2273: moves detached-tests back again\n","date":"2020-01-30 07:18:45","modifiedFileCount":"0","status":"B","submitter":"danhaywood"},{"authorTime":"2020-01-30 06:48:26","codes":[{"authorDate":"2021-04-14 23:26:49","commitOrder":2,"curCode":"    void classicMixin_shouldHaveProperFacet() {\n\n        val mixinFacet = super.runTypeContextOn(Customer_mixin.class)\n                .getFacet(MixinFacet.class);\n        \n        \r\n        assertNotNull(mixinFacet);\n        assertTrue(mixinFacet.isMixinFor(Customer.class));\n        assertFalse(mixinFacet.isMixinFor(NoCustomer.class));\n        \n        \r\n        val holderPojo = new Customer();\n        val mixinPojo = mixinFacet.instantiate(holderPojo);\n        ((Customer_mixin)mixinPojo).act(\"hello\");\n        assertEquals(\"hello\", holderPojo.getName());\n        \n    }\n","date":"2021-04-14 23:26:49","endLine":93,"groupId":"10686","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"classicMixin_shouldHaveProperFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/2e/0d983975d468bd7f2a004d78acf8220c639757.src","preCode":"    void classicMixin_shouldHaveProperFacet() {\n\n        val mixinFacet = super.runTypeContextOn(Customer_mixin.class)\n                .getFacet(MixinFacet.class);\n        \n        \r\n        assertNotNull(mixinFacet);\n        assertTrue(mixinFacet.isMixinFor(Customer.class));\n        assertFalse(mixinFacet.isMixinFor(NoCustomer.class));\n        \n        \r\n        val holderPojo = new Customer();\n        val mixinPojo = mixinFacet.instantiate(holderPojo);\n        ((Customer_mixin)mixinPojo).$$(\"hello\");\n        assertEquals(\"hello\", holderPojo.getName());\n        \n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/object/mixin/MixinIntendedAsActionTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2020-01-30 06:48:26","commitOrder":2,"curCode":"    void actionMixin_shouldHaveProperFacet() {\n\n        val mixinFacet = super.runTypeContextOn(Customer_action.class)\n                .getFacet(MixinFacet.class);\n        \n        \r\n        assertNotNull(mixinFacet);\n        assertTrue(mixinFacet.isMixinFor(Customer.class));\n        assertFalse(mixinFacet.isMixinFor(NoCustomer.class));\n        \n        \r\n        val holderPojo = new Customer();\n        val mixinPojo = mixinFacet.instantiate(holderPojo);\n        ((Customer_action)mixinPojo).$$(\"hello\");\n        assertEquals(\"hello\", holderPojo.getName());\n    }\n","date":"2020-01-30 07:18:45","endLine":125,"groupId":"10686","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"actionMixin_shouldHaveProperFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/89/e03429fa61f2b8a2a53413000cce1723c9d5b2.src","preCode":"    void actionMixin_shouldHaveProperFacet() {\n\n        val mixinFacet = super.runTypeContextOn(Customer_action.class)\n                .getFacet(MixinFacet.class);\n        \n        \r\n        assertNotNull(mixinFacet);\n        assertTrue(mixinFacet.isMixinFor(Customer.class));\n        assertFalse(mixinFacet.isMixinFor(NoCustomer.class));\n        \n        \r\n        val holderPojo = new Customer();\n        val mixinPojo = mixinFacet.instantiate(holderPojo);\n        ((Customer_action)mixinPojo).$$(\"hello\");\n        assertEquals(\"hello\", holderPojo.getName());\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/object/mixin/MixinIntendedAsActionTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"}],"commitId":"75633e1f8ce37deb39e3c2e2644357af15365d05","commitMessage":"@@@Merge branch 'master' of https://github.com/apache/isis into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-14 23:26:49","modifiedFileCount":"1999","status":"M","submitter":"J?rg Rade"}]
