[{"authorTime":"2021-09-14 18:43:10","codes":[{"authorDate":"2021-09-14 18:43:10","commitOrder":1,"curCode":"    void grid_fromDomainObjectResourceServerside_shouldContainMultiline() {\n\n        assertNotNull(domainObjectResourceServerside);\n\n        val layoutDemo = factoryService.viewModel(LayoutDemo.class);\n        val objectAdapter = objectManager.adapt(layoutDemo);\n        val spec = objectAdapter.getSpecification();\n        val domainType = spec.getLogicalTypeName();\n        val instanceId = objectManager.identifyObject(objectAdapter).getIdentifier(); \r\n\n        val layoutResourceDescriptor = \n                ResourceDescriptor\n                .of(RepresentationType.OBJECT_LAYOUT, Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE);\n\n        val resourceContext = domainObjectResourceServerside.resourceContextForTesting(layoutResourceDescriptor, null);\n\n        val grid = (BS3Grid) spec.getFacet(GridFacet.class).getGrid(objectAdapter);\n\n        DomainObjectResourceServerside.addLinks(resourceContext, domainType, instanceId, grid);\n\n        assertNotNull(grid);\n\n        val jaxbEntity = SerializationStrategy.JSON_INDENTED.entity(grid);\n\n        assertNotNull(jaxbEntity);\n\n        val filteredResult = _Strings.grep(jaxbEntity.toString(), \"multiLine\")\n                .map(String::trim)\n                .collect(Collectors.joining());\n\n        assertTrue(filteredResult.contains(\" 3,\"), \n                String.format(\"multiLine is expected to be populated, got '%s'\", filteredResult));\n\n    }\n","date":"2021-09-14 18:43:10","endLine":120,"groupId":"5776","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"grid_fromDomainObjectResourceServerside_shouldContainMultiline","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/05/a7cfd807f615ce63723df2e35debdd42f5c2b4.src","preCode":"    void grid_fromDomainObjectResourceServerside_shouldContainMultiline() {\n\n        assertNotNull(domainObjectResourceServerside);\n\n        val layoutDemo = factoryService.viewModel(LayoutDemo.class);\n        val objectAdapter = objectManager.adapt(layoutDemo);\n        val spec = objectAdapter.getSpecification();\n        val domainType = spec.getLogicalTypeName();\n        val instanceId = objectManager.identifyObject(objectAdapter).getIdentifier(); \r\n\n        val layoutResourceDescriptor = \n                ResourceDescriptor\n                .of(RepresentationType.OBJECT_LAYOUT, Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE);\n\n        val resourceContext = domainObjectResourceServerside.resourceContextForTesting(layoutResourceDescriptor, null);\n\n        val grid = (BS3Grid) spec.getFacet(GridFacet.class).getGrid(objectAdapter);\n\n        DomainObjectResourceServerside.addLinks(resourceContext, domainType, instanceId, grid);\n\n        assertNotNull(grid);\n\n        val jaxbEntity = SerializationStrategy.JSON_INDENTED.entity(grid);\n\n        assertNotNull(jaxbEntity);\n\n        val filteredResult = _Strings.grep(jaxbEntity.toString(), \"multiLine\")\n                .map(String::trim)\n                .collect(Collectors.joining());\n\n        assertTrue(filteredResult.contains(\" 3,\"), \n                String.format(\"multiLine is expected to be populated, got '%s'\", filteredResult));\n\n    }\n","realPath":"regressiontests/incubating/src/test/java/org/apache/isis/testdomain/rest/DomainObjectResourceTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"},{"authorDate":"2021-09-14 18:43:10","commitOrder":1,"curCode":"    void blobProperty_fromDomainObjectResourceServerside_shouldHaveActionSemantics_GET() {\n\n        assertNotNull(domainObjectResourceServerside);\n\n        val blobDemo = factoryService.viewModel(BlobDemo.class);\n        val objectAdapter = objectManager.adapt(blobDemo);\n        val spec = objectAdapter.getSpecification();\n        val domainType = spec.getLogicalTypeName();\n        val instanceId = objectManager.identifyObject(objectAdapter).getIdentifier(); \r\n\n        val layoutResourceDescriptor = \n                ResourceDescriptor\n                .of(RepresentationType.OBJECT_LAYOUT, Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE);\n\n        val resourceContext = domainObjectResourceServerside.resourceContextForTesting(layoutResourceDescriptor, null);\n\n        val grid = (BS3Grid) spec.getFacet(GridFacet.class).getGrid(objectAdapter);\n\n        DomainObjectResourceServerside.addLinks(resourceContext, domainType, instanceId, grid);\n\n        assertNotNull(grid);\n\n        val logoProperty = grid.getAllPropertiesById().get(\"logo\");\n        \n        assertNotNull(logoProperty);\n        \n        val jaxbEntity = SerializationStrategy.JSON_INDENTED.entity(logoProperty);\n        \r\n\n        assertNotNull(jaxbEntity);\n\n        val linkCountHavingGET = _Strings.grep(jaxbEntity.toString(), \"\\\"method\\\"\")\n                .map(String::trim)\n                .filter(s->s.contains(\"GET\"))\n                .count();\n        \n        assertEquals(1L, linkCountHavingGET);\n        \n    }\n","date":"2021-09-14 18:43:10","endLine":161,"groupId":"6196","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"blobProperty_fromDomainObjectResourceServerside_shouldHaveActionSemantics_GET","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/05/a7cfd807f615ce63723df2e35debdd42f5c2b4.src","preCode":"    void blobProperty_fromDomainObjectResourceServerside_shouldHaveActionSemantics_GET() {\n\n        assertNotNull(domainObjectResourceServerside);\n\n        val blobDemo = factoryService.viewModel(BlobDemo.class);\n        val objectAdapter = objectManager.adapt(blobDemo);\n        val spec = objectAdapter.getSpecification();\n        val domainType = spec.getLogicalTypeName();\n        val instanceId = objectManager.identifyObject(objectAdapter).getIdentifier(); \r\n\n        val layoutResourceDescriptor = \n                ResourceDescriptor\n                .of(RepresentationType.OBJECT_LAYOUT, Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE);\n\n        val resourceContext = domainObjectResourceServerside.resourceContextForTesting(layoutResourceDescriptor, null);\n\n        val grid = (BS3Grid) spec.getFacet(GridFacet.class).getGrid(objectAdapter);\n\n        DomainObjectResourceServerside.addLinks(resourceContext, domainType, instanceId, grid);\n\n        assertNotNull(grid);\n\n        val logoProperty = grid.getAllPropertiesById().get(\"logo\");\n        \n        assertNotNull(logoProperty);\n        \n        val jaxbEntity = SerializationStrategy.JSON_INDENTED.entity(logoProperty);\n        \r\n\n        assertNotNull(jaxbEntity);\n\n        val linkCountHavingGET = _Strings.grep(jaxbEntity.toString(), \"\\\"method\\\"\")\n                .map(String::trim)\n                .filter(s->s.contains(\"GET\"))\n                .count();\n        \n        assertEquals(1L, linkCountHavingGET);\n        \n    }\n","realPath":"regressiontests/incubating/src/test/java/org/apache/isis/testdomain/rest/DomainObjectResourceTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"e5960b42bbefc632f42249015aec93648335d42e","commitMessage":"@@@ISIS-2871: restore lost REST tests","date":"2021-09-14 18:43:10","modifiedFileCount":"0","status":"B","submitter":"Andi Huber"},{"authorTime":"2021-09-15 00:36:03","codes":[{"authorDate":"2021-09-15 00:36:03","commitOrder":2,"curCode":"    void grid_fromDomainObjectResourceServerside_shouldContainMultiline() {\n\n        assertNotNull(domainObjectResourceServerside);\n\n        val layoutDemo = factoryService.viewModel(LayoutDemo.class);\n        val objectAdapter = objectManager.adapt(layoutDemo);\n        val spec = objectAdapter.getSpecification();\n        val domainType = spec.getLogicalTypeName();\n        val instanceId = objectManager.bookmarkObject(objectAdapter).getIdentifier(); \r\n\n        val layoutResourceDescriptor =\n                ResourceDescriptor\n                .of(RepresentationType.OBJECT_LAYOUT, Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE);\n\n        val resourceContext = domainObjectResourceServerside.resourceContextForTesting(layoutResourceDescriptor, null);\n\n        val grid = (BS3Grid) spec.getFacet(GridFacet.class).getGrid(objectAdapter);\n\n        DomainObjectResourceServerside.addLinks(resourceContext, domainType, instanceId, grid);\n\n        assertNotNull(grid);\n\n        val jaxbEntity = SerializationStrategy.JSON_INDENTED.entity(grid);\n\n        assertNotNull(jaxbEntity);\n\n        val filteredResult = _Strings.grep(jaxbEntity.toString(), \"multiLine\")\n                .map(String::trim)\n                .collect(Collectors.joining());\n\n        assertTrue(filteredResult.contains(\" 3,\"),\n                String.format(\"multiLine is expected to be populated, got '%s'\", filteredResult));\n\n    }\n","date":"2021-09-15 00:36:03","endLine":120,"groupId":"1084","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"grid_fromDomainObjectResourceServerside_shouldContainMultiline","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/fa/c94d16a46f8617c33f73b40df16b21c99d9a89.src","preCode":"    void grid_fromDomainObjectResourceServerside_shouldContainMultiline() {\n\n        assertNotNull(domainObjectResourceServerside);\n\n        val layoutDemo = factoryService.viewModel(LayoutDemo.class);\n        val objectAdapter = objectManager.adapt(layoutDemo);\n        val spec = objectAdapter.getSpecification();\n        val domainType = spec.getLogicalTypeName();\n        val instanceId = objectManager.identifyObject(objectAdapter).getIdentifier(); \r\n\n        val layoutResourceDescriptor = \n                ResourceDescriptor\n                .of(RepresentationType.OBJECT_LAYOUT, Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE);\n\n        val resourceContext = domainObjectResourceServerside.resourceContextForTesting(layoutResourceDescriptor, null);\n\n        val grid = (BS3Grid) spec.getFacet(GridFacet.class).getGrid(objectAdapter);\n\n        DomainObjectResourceServerside.addLinks(resourceContext, domainType, instanceId, grid);\n\n        assertNotNull(grid);\n\n        val jaxbEntity = SerializationStrategy.JSON_INDENTED.entity(grid);\n\n        assertNotNull(jaxbEntity);\n\n        val filteredResult = _Strings.grep(jaxbEntity.toString(), \"multiLine\")\n                .map(String::trim)\n                .collect(Collectors.joining());\n\n        assertTrue(filteredResult.contains(\" 3,\"), \n                String.format(\"multiLine is expected to be populated, got '%s'\", filteredResult));\n\n    }\n","realPath":"regressiontests/incubating/src/test/java/org/apache/isis/testdomain/rest/DomainObjectResourceTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2021-09-15 00:36:03","commitOrder":2,"curCode":"    void blobProperty_fromDomainObjectResourceServerside_shouldHaveActionSemantics_GET() {\n\n        assertNotNull(domainObjectResourceServerside);\n\n        val blobDemo = factoryService.viewModel(BlobDemo.class);\n        val objectAdapter = objectManager.adapt(blobDemo);\n        val spec = objectAdapter.getSpecification();\n        val domainType = spec.getLogicalTypeName();\n        val instanceId = objectManager.bookmarkObject(objectAdapter).getIdentifier(); \r\n\n        val layoutResourceDescriptor =\n                ResourceDescriptor\n                .of(RepresentationType.OBJECT_LAYOUT, Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE);\n\n        val resourceContext = domainObjectResourceServerside.resourceContextForTesting(layoutResourceDescriptor, null);\n\n        val grid = (BS3Grid) spec.getFacet(GridFacet.class).getGrid(objectAdapter);\n\n        DomainObjectResourceServerside.addLinks(resourceContext, domainType, instanceId, grid);\n\n        assertNotNull(grid);\n\n        val logoProperty = grid.getAllPropertiesById().get(\"logo\");\n\n        assertNotNull(logoProperty);\n\n        val jaxbEntity = SerializationStrategy.JSON_INDENTED.entity(logoProperty);\n        \r\n\n        assertNotNull(jaxbEntity);\n\n        val linkCountHavingGET = _Strings.grep(jaxbEntity.toString(), \"\\\"method\\\"\")\n                .map(String::trim)\n                .filter(s->s.contains(\"GET\"))\n                .count();\n\n        assertEquals(1L, linkCountHavingGET);\n\n    }\n","date":"2021-09-15 00:36:03","endLine":161,"groupId":"1084","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"blobProperty_fromDomainObjectResourceServerside_shouldHaveActionSemantics_GET","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/fa/c94d16a46f8617c33f73b40df16b21c99d9a89.src","preCode":"    void blobProperty_fromDomainObjectResourceServerside_shouldHaveActionSemantics_GET() {\n\n        assertNotNull(domainObjectResourceServerside);\n\n        val blobDemo = factoryService.viewModel(BlobDemo.class);\n        val objectAdapter = objectManager.adapt(blobDemo);\n        val spec = objectAdapter.getSpecification();\n        val domainType = spec.getLogicalTypeName();\n        val instanceId = objectManager.identifyObject(objectAdapter).getIdentifier(); \r\n\n        val layoutResourceDescriptor = \n                ResourceDescriptor\n                .of(RepresentationType.OBJECT_LAYOUT, Where.ANYWHERE, RepresentationService.Intent.NOT_APPLICABLE);\n\n        val resourceContext = domainObjectResourceServerside.resourceContextForTesting(layoutResourceDescriptor, null);\n\n        val grid = (BS3Grid) spec.getFacet(GridFacet.class).getGrid(objectAdapter);\n\n        DomainObjectResourceServerside.addLinks(resourceContext, domainType, instanceId, grid);\n\n        assertNotNull(grid);\n\n        val logoProperty = grid.getAllPropertiesById().get(\"logo\");\n        \n        assertNotNull(logoProperty);\n        \n        val jaxbEntity = SerializationStrategy.JSON_INDENTED.entity(logoProperty);\n        \r\n\n        assertNotNull(jaxbEntity);\n\n        val linkCountHavingGET = _Strings.grep(jaxbEntity.toString(), \"\\\"method\\\"\")\n                .map(String::trim)\n                .filter(s->s.contains(\"GET\"))\n                .count();\n        \n        assertEquals(1L, linkCountHavingGET);\n        \n    }\n","realPath":"regressiontests/incubating/src/test/java/org/apache/isis/testdomain/rest/DomainObjectResourceTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"efabec3fb0ad4ed374c66b5ca2090db15ce52def","commitMessage":"@@@ISIS-2871: AsciiDoc value edit fixes","date":"2021-09-15 00:36:03","modifiedFileCount":"40","status":"M","submitter":"Andi Huber"}]
