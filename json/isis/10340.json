[{"authorTime":"2015-02-07 02:04:25","codes":[{"authorDate":"2015-09-03 19:32:12","commitOrder":4,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        context.checking(new Expectations() {{\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","date":"2015-09-03 19:32:12","endLine":108,"groupId":"9506","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/27/27ce412b671557d5f1033ad201dd7dcf38a6ab.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        context.checking(new Expectations() {{\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"},{"authorDate":"2015-02-07 02:04:25","commitOrder":4,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        programmableReflector = new ProgrammableReflector();\n        facetHolder = new IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        methodRemover = new ProgrammableMethodRemover();\n    }\n","date":"2015-02-07 02:04:25","endLine":76,"groupId":"9244","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/06/ab3a6df94168fe0481919a58b786b8de16faae.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        programmableReflector = new ProgrammableReflector();\n        facetHolder = new IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        methodRemover = new ProgrammableMethodRemover();\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"NB"}],"commitId":"6f865c596237ab5fc2c974f9f0f1b73485c9c157","commitMessage":"@@@ISIS-1044: removed AuthenticationSession and DeploymentCategory from facet API that call ObjectAdapter.Util#isVisible (either directly or indirectly).\n\nInstead.  the facet can obtain the auth session from the AuthenticationSessionProvider injected in the constructor by the facet factory; DeploymentCategory is similarly injected via the constructor.\n\nUpdated:\n- ActionChoicesFacet\n- ActionInvocationFacet\n- ActionParameterAutoCompleteFacet\n- ActionParameterChoicesFacet\n- AutoCompleteFacet\n- ChoicesFacet\n- CollectionAccessorFacetViaAccessor\n- CollectionAddToFacet   ... ForDomainEventAbstract\n- CollectionRemoveFromFacet  ... ForDomainEventAbstract\n- PropertyAccessorFacetViaAccessor\n- PropertyAutoCompleteFacet\n- PropertyChoicesFacetDerivedFromChoicesFacet\n- PropertyClearFacet  ... ForDomainEventAbstract\n- PropertySetterFacet ... ForDomainEventAbstract\n\n... and their respective implementations and facet factories\n... the  ... ForDomainEventAbstract are because require access to read current state in order to emit event\n","date":"2015-09-03 19:32:12","modifiedFileCount":"73","status":"M","submitter":"Dan Haywood"},{"authorTime":"2015-09-10 19:45:49","codes":[{"authorDate":"2015-09-10 19:45:49","commitOrder":5,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        context.checking(new Expectations() {{\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n        }});\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","date":"2015-09-10 19:45:49","endLine":119,"groupId":"15780","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/4c/5d7231e8937d22e0f6691578bba5e5e279cead.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        context.checking(new Expectations() {{\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2015-09-10 19:45:49","commitOrder":5,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        programmableReflector = new ProgrammableReflector();\n        facetHolder = new IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n\n        context.checking(new Expectations() {{\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n        }});\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n        }});\n\n\n    }\n","date":"2015-09-10 19:45:49","endLine":108,"groupId":"9244","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/d8/ce122226b902eea29f9fd53a6e752bb8249c21.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        programmableReflector = new ProgrammableReflector();\n        facetHolder = new IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        methodRemover = new ProgrammableMethodRemover();\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"550b88d6ede5de6e9ff7b802dfb58c60d3a7e301","commitMessage":"@@@ISIS-1194: fixing up unit tests; also changing isis-core-runtime's pom.xml.  skipTests = false\n","date":"2015-09-10 19:45:49","modifiedFileCount":"17","status":"M","submitter":"Dan Haywood"},{"authorTime":"2016-05-18 13:28:49","codes":[{"authorDate":"2015-09-10 19:45:49","commitOrder":6,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        context.checking(new Expectations() {{\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n        }});\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","date":"2015-09-10 19:45:49","endLine":119,"groupId":"15780","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/4c/5d7231e8937d22e0f6691578bba5e5e279cead.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        context.checking(new Expectations() {{\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n        }});\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"},{"authorDate":"2016-05-18 13:28:49","commitOrder":6,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        programmableReflector = new ProgrammableReflector();\n        facetHolder = new IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n\n        context.checking(new Expectations() {{\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n        }});\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n        }});\n\n\n    }\n","date":"2016-05-18 13:28:49","endLine":111,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/bc/92caf724493319e901a737dfcdd2cffe4e36d4.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        programmableReflector = new ProgrammableReflector();\n        facetHolder = new IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n\n        context.checking(new Expectations() {{\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n        }});\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n        }});\n\n\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"0c7943971380a06f36c45f31651944cda599c250","commitMessage":"@@@ISIS-1405: DeploymentCategoryProvider now implemented by a domain service.  so can be looked up from ServicesInjector.  Removed DeploymentCategoryProviderAware.\n\nAlso removed duplication in setup of various facet factory unit tests per injection.  expectations etc.\n","date":"2016-05-18 13:28:49","modifiedFileCount":"29","status":"M","submitter":"Dan Haywood"},{"authorTime":"2016-05-19 22:33:47","codes":[{"authorDate":"2016-05-19 22:33:47","commitOrder":7,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).lookupService(ConfigurationServiceInternal.class);\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","date":"2016-05-19 22:33:47","endLine":130,"groupId":"9506","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/6d/6084bbf306eaafe5faa274ba183b49839b2d96.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        context.checking(new Expectations() {{\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n        }});\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2016-05-19 22:33:47","commitOrder":7,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        programmableReflector = new ProgrammableReflector();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).lookupService(ConfigurationServiceInternal.class);\n            will(returnValue(stubConfiguration));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2016-05-19 22:33:47","endLine":132,"groupId":"8897","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/5a/13dd5e116376045395ebece8abb1a260743113.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        programmableReflector = new ProgrammableReflector();\n        facetHolder = new IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n\n        context.checking(new Expectations() {{\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n        }});\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n        }});\n\n\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"ddd0cf4fb6bd93a3af73064e1ed2d858cccc0390","commitMessage":"@@@ISIS-1406: unit tests now passing for isis-core-metamodel.\n","date":"2016-05-19 22:33:47","modifiedFileCount":"28","status":"M","submitter":"Dan Haywood"},{"authorTime":"2016-05-20 01:02:29","codes":[{"authorDate":"2016-05-19 22:33:47","commitOrder":8,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).lookupService(ConfigurationServiceInternal.class);\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","date":"2016-05-19 22:33:47","endLine":130,"groupId":"9506","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/6d/6084bbf306eaafe5faa274ba183b49839b2d96.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).lookupService(ConfigurationServiceInternal.class);\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"N"},{"authorDate":"2016-05-20 01:02:29","commitOrder":8,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).lookupService(ConfigurationServiceInternal.class);\n            will(returnValue(stubConfiguration));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2016-05-20 01:02:29","endLine":134,"groupId":"8897","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/53/75a62f949e2dfded77774aba3f276e4c4078da.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        programmableReflector = new ProgrammableReflector();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).lookupService(ConfigurationServiceInternal.class);\n            will(returnValue(stubConfiguration));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"62bc104c114aa44ae5366c6164b55cfd320e2088","commitMessage":"@@@ISIS-1407: collapsed SpecificationLoaderSpi and SpecificationLoader interfaces; removed ProgrammableReflector (finally!)\n","date":"2016-05-20 01:02:29","modifiedFileCount":"87","status":"M","submitter":"Dan Haywood"},{"authorTime":"2016-05-20 06:05:49","codes":[{"authorDate":"2016-05-20 06:05:49","commitOrder":9,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).lookupService(ConfigurationServiceInternal.class);\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(SpecificationLoader.class);\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","date":"2016-05-20 06:05:49","endLine":134,"groupId":"9506","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/c9/b1e9238df148f2a3b0c0a827612760cb970a92.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).lookupService(ConfigurationServiceInternal.class);\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2016-05-20 06:05:49","commitOrder":9,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).lookupService(ConfigurationServiceInternal.class);\n            will(returnValue(stubConfiguration));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(SpecificationLoader.class);\n            will(returnValue(mockSpecificationLoader));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2016-05-20 06:05:49","endLine":137,"groupId":"8897","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/6e/8805a6226dbbb977fd336234540c59841f370b.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).lookupService(ConfigurationServiceInternal.class);\n            will(returnValue(stubConfiguration));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"6e3495f41f457d190c340ce91200a7c1572b8cfc","commitMessage":"@@@ISIS-1407: removed SpecificationLoaderAware.\n\nAlso:\n- minor extension to ServiceRegistry2\n- collapsed ServicesInjector.  ServicesInjectorSpi and ServicesInjectorDefault to just ServicesInjector.\n","date":"2016-05-20 06:05:49","modifiedFileCount":"263","status":"M","submitter":"Dan Haywood"},{"authorTime":"2016-05-20 08:44:12","codes":[{"authorDate":"2016-05-20 08:44:12","commitOrder":10,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(TransactionStateProviderInternal.class);\n            will(returnValue(mockTransactionStateProviderInternal));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","date":"2016-05-20 08:44:12","endLine":142,"groupId":"0","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/a0/7d2b038c98bbdc8e34e5ebf377bdbba9b34156.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).lookupService(ConfigurationServiceInternal.class);\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(SpecificationLoader.class);\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2016-05-20 08:44:12","commitOrder":10,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n        mockTransactionStateProviderInternal = context.mock(TransactionStateProviderInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(stubConfiguration));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TransactionStateProviderInternal.class);\n            will(returnValue(mockTransactionStateProviderInternal));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n        }});\n\n\n    }\n","date":"2016-05-20 08:44:12","endLine":159,"groupId":"12064","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/aa/026ed1fa4f1a9311797e71fd94f52eb8e1417c.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).lookupService(ConfigurationServiceInternal.class);\n            will(returnValue(stubConfiguration));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(SpecificationLoader.class);\n            will(returnValue(mockSpecificationLoader));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"03a1bd1cfacd131bb44c6d1e3aa10f07855ff125","commitMessage":"@@@ISIS-1408: removing RuntimeContext.  ObjectSpecificationDependencies.  ObjectMemberDependencies (WIP)\n\nAlso adding some micro-caching/helper methods in ServicesInjector (not sure if significant).\n\nWIP - runs up ok.  but unit tests failing.\n","date":"2016-05-20 08:44:12","modifiedFileCount":"103","status":"M","submitter":"Dan Haywood"},{"authorTime":"2016-06-03 23:40:41","codes":[{"authorDate":"2016-06-03 23:40:41","commitOrder":11,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(TransactionStateProviderInternal.class);\n            will(returnValue(mockTransactionStateProviderInternal));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","date":"2016-06-03 23:43:11","endLine":149,"groupId":"8671","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/ee/195e256c3ca44cca4a145b6fab4bce9253eda1.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(TransactionStateProviderInternal.class);\n            will(returnValue(mockTransactionStateProviderInternal));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2016-06-03 23:40:41","commitOrder":11,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n        mockTransactionStateProviderInternal = context.mock(TransactionStateProviderInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(stubConfiguration));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TransactionStateProviderInternal.class);\n            will(returnValue(mockTransactionStateProviderInternal));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n        }});\n\n\n    }\n","date":"2016-06-03 23:43:11","endLine":168,"groupId":"12064","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/45/a529a7a1142769d3825c0daa0040b477f712e9.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n        mockTransactionStateProviderInternal = context.mock(TransactionStateProviderInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(stubConfiguration));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TransactionStateProviderInternal.class);\n            will(returnValue(mockTransactionStateProviderInternal));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n        }});\n\n\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"0f5508038f7090bb3c1eed5a9e7fb09aa02e6311","commitMessage":"@@@ISIS-1422: fixing unit tests.\n","date":"2016-06-03 23:43:11","modifiedFileCount":"35","status":"M","submitter":"Dan Haywood"},{"authorTime":"2016-06-10 01:16:19","codes":[{"authorDate":"2016-06-03 23:40:41","commitOrder":12,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(TransactionStateProviderInternal.class);\n            will(returnValue(mockTransactionStateProviderInternal));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","date":"2016-06-03 23:43:11","endLine":149,"groupId":"8671","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/ee/195e256c3ca44cca4a145b6fab4bce9253eda1.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(TransactionStateProviderInternal.class);\n            will(returnValue(mockTransactionStateProviderInternal));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"N"},{"authorDate":"2016-06-10 01:16:19","commitOrder":12,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        stubServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n        mockTransactionStateProviderInternal = context.mock(TransactionStateProviderInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = new ServicesInjector(Lists.newArrayList(\n                mockTransactionStateProviderInternal,\n                stubConfiguration,\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockDeploymentCategoryProvider,\n                mockPersistenceSessionServiceInternal\n        ), stubConfiguration);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2016-06-10 01:25:19","endLine":140,"groupId":"13313","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/47/21012e565ffa1e35162d747706ce2b991475b1.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n        mockTransactionStateProviderInternal = context.mock(TransactionStateProviderInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(stubConfiguration));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TransactionStateProviderInternal.class);\n            will(returnValue(mockTransactionStateProviderInternal));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n        }});\n\n\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"eb6d4a8c92e923078779fe4794e238ff50223d22","commitMessage":"@@@ISIS-1427: fix up unit tests that are failing...\n\n... per the preceding deletion of Localization and also the IsisContext refactoring\n","date":"2016-06-10 01:25:19","modifiedFileCount":"16","status":"M","submitter":"Dan Haywood"},{"authorTime":"2017-01-20 23:18:06","codes":[{"authorDate":"2017-01-20 23:18:06","commitOrder":13,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(TransactionStateProviderInternal.class);\n            will(returnValue(mockTransactionStateProviderInternal));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","date":"2017-01-20 23:18:06","endLine":150,"groupId":"8671","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/5a/80218bf85e3e6337b67f066da1dc7a9bc785c7.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(TransactionStateProviderInternal.class);\n            will(returnValue(mockTransactionStateProviderInternal));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2017-01-20 23:18:06","commitOrder":13,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        stubServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n        mockTransactionStateProviderInternal = context.mock(TransactionStateProviderInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = new ServicesInjector(Lists.newArrayList(\n                mockTransactionStateProviderInternal,\n                stubConfiguration,\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockDeploymentCategoryProvider,\n                mockPersistenceSessionServiceInternal\n        ), stubConfiguration);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2017-01-20 23:18:06","endLine":141,"groupId":"13313","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/12/fd5be3ceb64b8d176d886acdded183df0a5b33.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        stubServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n        mockTransactionStateProviderInternal = context.mock(TransactionStateProviderInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = new ServicesInjector(Lists.newArrayList(\n                mockTransactionStateProviderInternal,\n                stubConfiguration,\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockDeploymentCategoryProvider,\n                mockPersistenceSessionServiceInternal\n        ), stubConfiguration);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"a3b7770d1c6672d116f3a27b3d3f5743ef893bb7","commitMessage":"@@@ISIS-785: fixes conflicts for merging maint-1.13.3 (Wicket 6.x) into master (Wicket 7.x)\n","date":"2017-01-20 23:18:06","modifiedFileCount":"56","status":"M","submitter":"Dan Haywood"},{"authorTime":"2017-05-14 01:41:30","codes":[{"authorDate":"2017-05-14 01:41:30","commitOrder":14,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","date":"2017-05-14 01:41:30","endLine":144,"groupId":"8671","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/af/2ca76681894529fc356498d155178b32d331e3.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(TransactionStateProviderInternal.class);\n            will(returnValue(mockTransactionStateProviderInternal));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2017-05-14 01:41:30","commitOrder":14,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        stubServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = new ServicesInjector(Lists.newArrayList(\n                stubConfiguration,\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockDeploymentCategoryProvider,\n                mockPersistenceSessionServiceInternal\n        ), stubConfiguration);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2017-05-14 01:41:30","endLine":137,"groupId":"0","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/4f/10c976a00dbffbe9b07767a5a6665be58ab469.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        stubServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n        mockTransactionStateProviderInternal = context.mock(TransactionStateProviderInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = new ServicesInjector(Lists.newArrayList(\n                mockTransactionStateProviderInternal,\n                stubConfiguration,\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockDeploymentCategoryProvider,\n                mockPersistenceSessionServiceInternal\n        ), stubConfiguration);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"90dec11e0e9367a8bfd64dd2164adf39411e7589","commitMessage":"@@@ISIS-1468: extends TransactionService.  adding in getTransactionState\n\nThis promotes TransactionState to the applib.  and removes the internal TransactionStateProividerInternalXxx domain services; moved to TransacionServiceDefault simply delegate to the PersistenceSessionServiceInternal for the underlying implementation.\n\nAlso updated docs.\n","date":"2017-05-14 01:41:30","modifiedFileCount":"12","status":"M","submitter":"Dan Haywood"},{"authorTime":"2017-12-01 19:18:11","codes":[{"authorDate":"2017-05-14 01:41:30","commitOrder":15,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","date":"2017-05-14 01:41:30","endLine":144,"groupId":"8671","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/af/2ca76681894529fc356498d155178b32d331e3.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2017-12-01 19:18:11","commitOrder":15,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockConfiguration = context.mock(IsisConfiguration.class);\n        stubServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = new ServicesInjector(Lists.newArrayList(\n                stubConfiguration,\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockDeploymentCategoryProvider,\n                mockPersistenceSessionServiceInternal\n        ), stubConfiguration);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2017-12-01 19:18:11","endLine":140,"groupId":"13313","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/0e/15985c9a76eadf9c4173f944d4ab11d8f4c323.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        stubServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = new ServicesInjector(Lists.newArrayList(\n                stubConfiguration,\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockDeploymentCategoryProvider,\n                mockPersistenceSessionServiceInternal\n        ), stubConfiguration);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"04a7edc964bef1e66ec8367171ab5b8693fdb9f4","commitMessage":"@@@ISIS-1786: fixes unit test\n","date":"2017-12-01 19:18:11","modifiedFileCount":"2","status":"M","submitter":"Dan Haywood"},{"authorTime":"2018-09-16 18:13:18","codes":[{"authorDate":"2017-05-14 01:41:30","commitOrder":16,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","date":"2017-05-14 01:41:30","endLine":144,"groupId":"8671","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/af/2ca76681894529fc356498d155178b32d331e3.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2018-09-16 18:13:18","commitOrder":16,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockConfiguration = context.mock(IsisConfiguration.class);\n        stubServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = new ServicesInjector(_Lists.of(\n                stubConfiguration,\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockDeploymentCategoryProvider,\n                mockPersistenceSessionServiceInternal\n        ), stubConfiguration);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2018-09-16 18:13:18","endLine":140,"groupId":"13313","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/02/63bbfd52d44b046ae177979680c77a5cfbfa6b.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockConfiguration = context.mock(IsisConfiguration.class);\n        stubServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = new ServicesInjector(Lists.newArrayList(\n                stubConfiguration,\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockDeploymentCategoryProvider,\n                mockPersistenceSessionServiceInternal\n        ), stubConfiguration);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"0d5885e75037c833af4d2e1d661062cc8a27c03b","commitMessage":"@@@Merge pull request #127 from apache/ISIS-1976-squash\n\nISIS-1976: removes OA map.  stream for metamodel.  excising guava","date":"2018-09-16 18:13:18","modifiedFileCount":"354","status":"M","submitter":"Dan Haywood"},{"authorTime":"2018-10-05 04:56:03","codes":[{"authorDate":"2018-10-05 04:56:03","commitOrder":17,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","date":"2018-10-05 04:56:03","endLine":147,"groupId":"11341","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/a6/ff538c2c222109bd5f98212030e6055d76c2fb.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(mockTranslationService));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2018-10-05 04:56:03","commitOrder":17,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockConfiguration = context.mock(IsisConfiguration.class);\n        stubServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = new ServicesInjector(_Lists.of(\n                stubConfiguration,\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockDeploymentCategoryProvider,\n                mockPersistenceSessionServiceInternal,\n                mockTranslationService\n        ), stubConfiguration);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2018-10-05 04:56:03","endLine":141,"groupId":"13313","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/2d/cd12fc2e3a3ba9cd93d4a1f51dce3b84b354b9.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockConfiguration = context.mock(IsisConfiguration.class);\n        stubServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = new ServicesInjector(_Lists.of(\n                stubConfiguration,\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockDeploymentCategoryProvider,\n                mockPersistenceSessionServiceInternal\n        ), stubConfiguration);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"09bee70cbe57dad1703f6adfed0ae0c24935dddb","commitMessage":"@@@ISIS-1976: fixing tests that that fail on mockup service lookup now\nbeing Optionals\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-1976","date":"2018-10-05 04:56:03","modifiedFileCount":"36","status":"M","submitter":"Andi Huber"},{"authorTime":"2018-11-17 22:02:36","codes":[{"authorDate":"2018-11-17 22:02:36","commitOrder":18,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","date":"2018-11-17 22:02:36","endLine":135,"groupId":"11341","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/73/250396fd1a0767c3ff4304b52cda9084ba7dbd.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getDeploymentCategoryProvider();\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockServicesInjector).lookupService(DeploymentCategoryProvider.class);\n            will(returnValue(mockDeploymentCategoryProvider));\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2018-11-17 22:02:36","commitOrder":18,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        \n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockConfiguration = context.mock(IsisConfiguration.class);\n        stubServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = new ServicesInjector(_Lists.of(\n                stubConfiguration,\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockPersistenceSessionServiceInternal,\n                mockTranslationService\n        ), stubConfiguration);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2018-11-17 22:02:36","endLine":134,"groupId":"0","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/4e/4977fae5ff6b3caa46d74f79b2046a2ca1bbdf.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockDeploymentCategoryProvider = context.mock(DeploymentCategoryProvider.class);\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockConfiguration = context.mock(IsisConfiguration.class);\n        stubServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = new ServicesInjector(_Lists.of(\n                stubConfiguration,\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockDeploymentCategoryProvider,\n                mockPersistenceSessionServiceInternal,\n                mockTranslationService\n        ), stubConfiguration);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockDeploymentCategoryProvider).getDeploymentCategory();\n            will(returnValue(DeploymentCategory.PRODUCTION));\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"052e46edd434b65cc3c398608354ac9dab5887b4","commitMessage":"@@@ISIS-1991: major: removing the DeploymentCategory\n\nalso rolling up RenderContext2-6\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-1991","date":"2018-11-17 22:02:36","modifiedFileCount":"117","status":"M","submitter":"Andi Huber"},{"authorTime":"2018-11-30 06:55:06","codes":[{"authorDate":"2018-11-30 06:55:06","commitOrder":19,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        \n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupServiceElseFail(EventBusService.class);\n            will(returnValue(mockEventBusService));\n            \n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","date":"2018-11-30 06:55:06","endLine":135,"groupId":"8671","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/36/16f64854c42fc91dc6f7f86bdca394d2539738.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getConfigurationServiceInternal();\n            will(returnValue(mockConfiguration));\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2018-11-30 06:55:06","commitOrder":19,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        \n        \r\n        \n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        \n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = ServicesInjector.builderForTesting()\n                .addServices(_Lists.of(\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockPersistenceSessionServiceInternal,\n                mockTranslationService\n                ))\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2018-11-30 06:55:06","endLine":130,"groupId":"6590","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/86/007985b8e75ccfcdcc40d9343e4cf4ec23890c.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        \n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        mockConfiguration = context.mock(IsisConfiguration.class);\n        stubServicesInjector = context.mock(ServicesInjector.class);\n        mockTranslationService = context.mock(TranslationService.class);\n        stubConfiguration = new IsisConfigurationDefault();\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = new ServicesInjector(_Lists.of(\n                stubConfiguration,\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockPersistenceSessionServiceInternal,\n                mockTranslationService\n        ), stubConfiguration);\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"a33232cae8c85af3ea7c5cf210dfab4e66bbf75d","commitMessage":"@@@2039 redesign of config (#134)\n\n* ISIS-2039: major refactoring\n\nmove config code into its own module\n\nremove number of classes in metamodel.  that hold a reference to\nIsisConfiguration or its implementation\n\nhide the mutable IsisConfigurationDefault\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: reduce visibility of some config classes\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: simplify config access\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: cleaning up the component-provider mess\n\nfor web-modules: no longer negotiate by writing attributes to the\nservlet-context.  instead use a java class for that\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: fixing some tests\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: removing arguments of @PostConstruct methods\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: lazy binding to config for wicket\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: proposed test fix\n\nalso cleaning up verbose tests\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: more test fixes\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: experimenting with AppConfig managed by Guice\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: solving the AppManifest lookup problem independently of the\nconfiguration bootstrapping\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: simplify helloworld\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: moving type discovery to an earlier stage in bootstrapping\n\nIntegration Test Bootstrapping works.\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: on web-context: move the config bootstrapping from wicket\nmodule to the main ServletContextListener\n\nsuch that the wicket module is no longer responsible for initiating the\nframework\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: config bootstrapping: fixes the resource chain\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: allow ServiceLoader lookup for AppConfig to fallback ...\n\nto previous behavior.  that is to lookup the AppManifest from config\nproperty 'isis.appManifest'\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: fixes concurrent modification with _Context\n\nadd a property 'isUnitTesting' to the IsisSystemEnvironment.  to help\nwith the decision on how to bootstrap the configuration\n\nalso doing some cleaning up\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: fixing junit tests ...\n\nby having the IsisSystemEnvironment#isUnitTesting correctly setup by\nJunitRuleMocker2\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: further fixing tests ...\n\nalso moving ExceptionRecognizer services that depend on the 'config'\nmodule from 'applib' to 'runtime'\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: fixing tests.  that fail due to new domain object annot.\nprocessing\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: unify config bootstrapping code for maven-plugin. \nwicket-viewer and headless\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: to fix prev. commit: let the maven-plugin bootstrap the\nconfiguration properly\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: fixing mm verification tests\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: reinstating the ConfigurationServiceDefault\n\nalso renaming packages within the 'config' module -> 'o.a.i.config'\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: removing the ConfigurationService interface\n\nuse the singleton IsisConfiguration instead\n\nfor the UI.  the ConfigurationServiceMenu was renamed to\nConfigurationMenu which uses a ConfigurationViewService for the single\npurpose of displaying config values\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n\n* ISIS-2039: reorg. packages\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2039\n","date":"2018-11-30 06:55:06","modifiedFileCount":"302","status":"M","submitter":"Andi Huber"},{"authorTime":"2019-05-08 17:39:36","codes":[{"authorDate":"2019-05-08 17:39:36","commitOrder":20,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        \n    \tMetaModelContext.preset(MetaModelContext.builder()\n    \t\t\t.configuration(_Config.getConfiguration())\n    \t\t\t.specificationLoader(mockSpecificationLoader)\n        \t\t.serviceInjector(mockServiceInjector)\n        \t\t.serviceRegistry(mockServiceRegistry)\n        \t\t.build());\n        \n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationSessionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n\r\n\r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","date":"2019-05-09 18:45:36","endLine":137,"groupId":"4389","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/43/5a54dc8b95bfb98a715f0bff3006d04e57d572.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        \n        context.checking(new Expectations() {{\n\n            allowing(mockServicesInjector).getPersistenceSessionServiceInternal();\n            will(returnValue(mockPersistenceSessionServiceInternal));\n\n            allowing(mockServicesInjector).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServicesInjector).getAuthenticationSessionProvider();\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(mockAuthenticationSessionProvider));\n\n            allowing(mockServicesInjector).lookupServiceElseFail(EventBusService.class);\n            will(returnValue(mockEventBusService));\n            \n            allowing(mockServicesInjector).getSpecificationLoader();\n            will(returnValue(mockSpecificationLoader));\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2019-05-08 17:39:36","commitOrder":20,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        \n        \r\n        \n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        \n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        ServicesInjector.builderForTesting()\n                .addServices(_Lists.of(\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockPersistenceSessionServiceInternal,\n                mockTranslationService\n                ))\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2019-05-09 18:45:36","endLine":130,"groupId":"6590","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/72/6139f8df5b9d54243c83ee04d075b0a95c99bc.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        \n        \r\n        \n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        \n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        stubServicesInjector = ServicesInjector.builderForTesting()\n                .addServices(_Lists.of(\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockPersistenceSessionServiceInternal,\n                mockTranslationService\n                ))\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"16e80975e0126cc26c276b9891c1dae0054c7022","commitMessage":"@@@ISIS-2112: backporting from '2033-IoC_Spring' branch\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2112","date":"2019-05-09 18:45:36","modifiedFileCount":"732","status":"M","submitter":"Andi Huber"},{"authorTime":"2019-05-11 04:57:49","codes":[{"authorDate":"2019-05-08 17:39:36","commitOrder":21,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        \n    \tMetaModelContext.preset(MetaModelContext.builder()\n    \t\t\t.configuration(_Config.getConfiguration())\n    \t\t\t.specificationLoader(mockSpecificationLoader)\n        \t\t.serviceInjector(mockServiceInjector)\n        \t\t.serviceRegistry(mockServiceRegistry)\n        \t\t.build());\n        \n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationSessionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n\r\n\r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","date":"2019-05-09 18:45:36","endLine":137,"groupId":"4389","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/43/5a54dc8b95bfb98a715f0bff3006d04e57d572.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        \n    \tMetaModelContext.preset(MetaModelContext.builder()\n    \t\t\t.configuration(_Config.getConfiguration())\n    \t\t\t.specificationLoader(mockSpecificationLoader)\n        \t\t.serviceInjector(mockServiceInjector)\n        \t\t.serviceRegistry(mockServiceRegistry)\n        \t\t.build());\n        \n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationSessionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n\r\n\r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2019-05-11 04:57:49","commitOrder":21,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        \n        \r\n        \n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        \n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n        \n        mockServiceRegistry = context.mock(ServiceRegistry.class);\n        mockServiceInjector = context.mock(ServiceInjector.class);\n        mockObjectAdapterProvider = context.mock(ObjectAdapterProvider.class);\n\n        MetaModelContext.preset(MetaModelContext.builder()\n                .configuration(_Config.getConfiguration())\n                .specificationLoader(mockSpecificationLoader)\n                .serviceInjector(mockServiceInjector)\n                .serviceRegistry(mockServiceRegistry)\n                .translationService(mockTranslationService)\n                .objectAdapterProvider(mockPersistenceSessionServiceInternal)\n                .authenticationSessionProvider(mockAuthenticationSessionProvider)\n                .build());\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2019-05-11 04:57:49","endLine":139,"groupId":"0","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/93/99461c9794116abee5d2e5ceecfc061b23e25a.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        \n        \r\n        \n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        \n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        ServicesInjector.builderForTesting()\n                .addServices(_Lists.of(\n                mockAuthenticationSessionProvider,\n                mockSpecificationLoader,\n                mockPersistenceSessionServiceInternal,\n                mockTranslationService\n                ))\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"2c66fa644597713b324fb11af8246ff8bed6d781","commitMessage":"@@@ISIS-2112: fixing 'metamodel' tests\n\n- add minimal infrastructure for when spring context is not available\nduring test\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2112","date":"2019-05-11 04:57:49","modifiedFileCount":"14","status":"M","submitter":"Andi Huber"},{"authorTime":"2019-05-11 15:41:47","codes":[{"authorDate":"2019-05-08 17:39:36","commitOrder":22,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        \n    \tMetaModelContext.preset(MetaModelContext.builder()\n    \t\t\t.configuration(_Config.getConfiguration())\n    \t\t\t.specificationLoader(mockSpecificationLoader)\n        \t\t.serviceInjector(mockServiceInjector)\n        \t\t.serviceRegistry(mockServiceRegistry)\n        \t\t.build());\n        \n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationSessionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n\r\n\r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","date":"2019-05-09 18:45:36","endLine":137,"groupId":"4389","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/43/5a54dc8b95bfb98a715f0bff3006d04e57d572.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        \n    \tMetaModelContext.preset(MetaModelContext.builder()\n    \t\t\t.configuration(_Config.getConfiguration())\n    \t\t\t.specificationLoader(mockSpecificationLoader)\n        \t\t.serviceInjector(mockServiceInjector)\n        \t\t.serviceRegistry(mockServiceRegistry)\n        \t\t.build());\n        \n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationSessionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n\r\n\r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2019-05-11 15:41:47","commitOrder":22,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        \n        \r\n        \n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        \n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n        \n        mockObjectAdapterProvider = context.mock(ObjectAdapterProvider.class);\n\n        MetaModelContext.preset(MetaModelContext.builder()\n                .configuration(_Config.getConfiguration())\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .objectAdapterProvider(mockPersistenceSessionServiceInternal)\n                .authenticationSessionProvider(mockAuthenticationSessionProvider)\n                .build());\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2019-05-11 15:41:47","endLine":131,"groupId":"12235","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/af/290163afec1bc9beaf2352fee41c6578e71910.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        \n        \r\n        \n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        \n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n        \n        mockServiceRegistry = context.mock(ServiceRegistry.class);\n        mockServiceInjector = context.mock(ServiceInjector.class);\n        mockObjectAdapterProvider = context.mock(ObjectAdapterProvider.class);\n\n        MetaModelContext.preset(MetaModelContext.builder()\n                .configuration(_Config.getConfiguration())\n                .specificationLoader(mockSpecificationLoader)\n                .serviceInjector(mockServiceInjector)\n                .serviceRegistry(mockServiceRegistry)\n                .translationService(mockTranslationService)\n                .objectAdapterProvider(mockPersistenceSessionServiceInternal)\n                .authenticationSessionProvider(mockAuthenticationSessionProvider)\n                .build());\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"c4e03eef567c7c38d084307a4b84552517fd459e","commitMessage":"@@@ISIS-2112: further fixing 'metamodel' tests\n\n... by provisioning a minimal MetaModelContext for testing\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2112","date":"2019-05-11 15:41:47","modifiedFileCount":"6","status":"M","submitter":"Andi Huber"},{"authorTime":"2019-05-14 00:54:23","codes":[{"authorDate":"2019-05-14 00:54:23","commitOrder":23,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        \n    \tMetaModelContext.preset(MetaModelContext.builder()\n    \t\t\t.specificationLoader(mockSpecificationLoader)\n        \t\t.serviceInjector(mockServiceInjector)\n        \t\t.serviceRegistry(mockServiceRegistry)\n        \t\t.build());\n        \n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationSessionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n\r\n\r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","date":"2019-05-14 00:54:23","endLine":135,"groupId":"4389","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/53/d9669a2372b0b3101c1d59d820f395b58bd46c.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        \n    \tMetaModelContext.preset(MetaModelContext.builder()\n    \t\t\t.configuration(_Config.getConfiguration())\n    \t\t\t.specificationLoader(mockSpecificationLoader)\n        \t\t.serviceInjector(mockServiceInjector)\n        \t\t.serviceRegistry(mockServiceRegistry)\n        \t\t.build());\n        \n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationSessionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n\r\n\r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2019-05-14 00:54:23","commitOrder":23,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        \n        \r\n        \n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        \n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n        \n        mockObjectAdapterProvider = context.mock(ObjectAdapterProvider.class);\n\n        MetaModelContext.preset(MetaModelContext.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .objectAdapterProvider(mockPersistenceSessionServiceInternal)\n                .authenticationSessionProvider(mockAuthenticationSessionProvider)\n                .build());\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","date":"2019-05-14 00:54:23","endLine":130,"groupId":"12235","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/99/d5892c01f85a45ced51b9629471337104068ae.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        \n        \r\n        \n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        \n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n        \n        mockObjectAdapterProvider = context.mock(ObjectAdapterProvider.class);\n\n        MetaModelContext.preset(MetaModelContext.builder()\n                .configuration(_Config.getConfiguration())\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .objectAdapterProvider(mockPersistenceSessionServiceInternal)\n                .authenticationSessionProvider(mockAuthenticationSessionProvider)\n                .build());\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"849d793852d4b25858d9c09bbc8bbd8c7e71fbf8","commitMessage":"@@@ISIS-2112: further fixing meta-model tests (config related)\n\n- 7 remain failing\n\nTask-Url: https://issues.apache.org/jira/browse/ISIS-2112","date":"2019-05-14 00:54:23","modifiedFileCount":"12","status":"M","submitter":"Andi Huber"},{"authorTime":"2020-01-10 23:10:11","codes":[{"authorDate":"2020-01-10 23:10:11","commitOrder":24,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationSessionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n        \n    }\n","date":"2020-01-10 23:10:11","endLine":129,"groupId":"4389","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/6b/2b5e17020a82d93f610707571c13b24a318e0e.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        \n    \tMetaModelContext.preset(MetaModelContext.builder()\n    \t\t\t.specificationLoader(mockSpecificationLoader)\n        \t\t.serviceInjector(mockServiceInjector)\n        \t\t.serviceRegistry(mockServiceRegistry)\n        \t\t.build());\n        \n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationSessionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n\r\n\r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-01-10 23:10:11","commitOrder":24,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        mockObjectAdapterProvider = context.mock(ObjectAdapterProvider.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n\r\n                .authenticationSessionProvider(mockAuthenticationSessionProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n    }\n","date":"2020-01-10 23:10:11","endLine":129,"groupId":"16894","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/bd/d3da4b6ca87c400bcde771b621fc44783f2199.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n        \n        \r\n        \n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n        );\n\n        methodRemover = new ProgrammableMethodRemover();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n        \n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockPersistenceSessionServiceInternal = context.mock(PersistenceSessionServiceInternal.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n        \n        mockObjectAdapterProvider = context.mock(ObjectAdapterProvider.class);\n\n        MetaModelContext.preset(MetaModelContext.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .objectAdapterProvider(mockPersistenceSessionServiceInternal)\n                .authenticationSessionProvider(mockAuthenticationSessionProvider)\n                .build());\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"31b8b21f2e297439edf889faacfd685122a8751a","commitMessage":"@@@ISIS-2259: fixes up package name of isis-core-metamodel\n","date":"2020-01-10 23:10:11","modifiedFileCount":"436","status":"M","submitter":"danhaywood"},{"authorTime":"2020-02-20 17:45:56","codes":[{"authorDate":"2020-01-10 23:10:11","commitOrder":25,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationSessionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n        \n    }\n","date":"2020-01-10 23:10:11","endLine":129,"groupId":"4389","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/6b/2b5e17020a82d93f610707571c13b24a318e0e.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationSessionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n        \n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"},{"authorDate":"2020-02-20 17:45:56","commitOrder":25,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n\r\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n\r\n                .authenticationSessionProvider(mockAuthenticationSessionProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n    }\n","date":"2020-02-20 17:45:56","endLine":127,"groupId":"1393","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/d7/1dda1a511238d1c6ede13c96f61a5d3e805ae8.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        mockObjectAdapterProvider = context.mock(ObjectAdapterProvider.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n\r\n                .authenticationSessionProvider(mockAuthenticationSessionProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"092c0667824c17e58f69f1a3fd1a810425cb4082","commitMessage":"@@@ISIS-2294: move ObjectAdapterProvider 'metamodel' -> 'persistence-jdo'","date":"2020-02-20 17:45:56","modifiedFileCount":"9","status":"M","submitter":"Andi Huber"},{"authorTime":"2020-03-02 16:22:04","codes":[{"authorDate":"2020-03-02 16:22:04","commitOrder":26,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationSessionTracker.class);\n            will(returnValue(Optional.of(mockAuthenticationSessionTracker)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n        \n    }\n","date":"2020-03-02 16:22:04","endLine":127,"groupId":"4389","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/1c/025ae60b65f07393a50da9565e5a19609aab39.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationSessionProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationSessionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n        \n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-03-02 16:22:04","commitOrder":26,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockAuthenticationSessionTracker = context.mock(AuthenticationSessionTracker.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .authenticationSessionTracker(mockAuthenticationSessionTracker)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionTracker).currentAuthenticationSession();\n            will(returnValue(Optional.of(mockAuthenticationSession)));\n        }});\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n    }\n","date":"2020-03-02 16:22:04","endLine":125,"groupId":"1393","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/39/c43666fb4e6112ee75891ba52e2efece7286cd.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockAuthenticationSessionProvider = context.mock(AuthenticationSessionProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .authenticationSessionProvider(mockAuthenticationSessionProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionProvider).getAuthenticationSession();\n            will(returnValue(mockAuthenticationSession));\n        }});\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"fce6a88b5ca2365e04b6d30abdf0e1bf5aa5fd3b","commitMessage":"@@@ISIS-2296: for each request cycle allow IsisSessionFactory to build an\nIsisSession stack of nested IsisSession tzo be kept track of in a thread\nlocal manner","date":"2020-03-02 16:22:04","modifiedFileCount":"104","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-04-14 23:26:49","codes":[{"authorDate":"2021-04-14 23:26:49","commitOrder":27,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationContext.class);\n            will(returnValue(Optional.of(mockAuthenticationTracker)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n        \n    }\n","date":"2021-04-14 23:26:49","endLine":129,"groupId":"0","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/2a/f781fabac45d788ff02e948188c866f75f33d6.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationSessionTracker.class);\n            will(returnValue(Optional.of(mockAuthenticationSessionTracker)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n        \n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2021-04-14 23:26:49","commitOrder":27,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockAuthenticationContext = context.mock(AuthenticationContext.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthentication = context.mock(Authentication.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .authenticationContext(mockAuthenticationContext)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationContext).currentAuthentication();\n            will(returnValue(Optional.of(mockAuthentication)));\n        }});\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n    }\n","date":"2021-04-14 23:26:49","endLine":131,"groupId":"9948","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/19/7cdbe81b118b3f08c00f17bac6e1e191a039ae.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(Customer.class, \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockAuthenticationSessionTracker = context.mock(AuthenticationSessionTracker.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthenticationSession = context.mock(AuthenticationSession.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .authenticationSessionTracker(mockAuthenticationSessionTracker)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationSessionTracker).currentAuthenticationSession();\n            will(returnValue(Optional.of(mockAuthenticationSession)));\n        }});\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"75633e1f8ce37deb39e3c2e2644357af15365d05","commitMessage":"@@@Merge branch 'master' of https://github.com/apache/isis into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-14 23:26:49","modifiedFileCount":"1999","status":"M","submitter":"J?rg Rade"},{"authorTime":"2021-06-10 12:27:06","codes":[{"authorDate":"2021-06-10 12:27:06","commitOrder":28,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationTracker)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n\n    }\n","date":"2021-06-10 12:27:06","endLine":129,"groupId":"7984","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/8f/06f62618704f13f5a6fd54c2458c1d61993615.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationContext.class);\n            will(returnValue(Optional.of(mockAuthenticationTracker)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n        \n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2021-06-10 12:27:06","commitOrder":28,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockAuthenticationProvider = context.mock(AuthenticationProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthentication = context.mock(Authentication.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .authenticationProvider(mockAuthenticationProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationProvider).currentAuthentication();\n            will(returnValue(Optional.of(mockAuthentication)));\n        }});\n\n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n    }\n","date":"2021-06-10 12:27:06","endLine":131,"groupId":"1393","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/4f/0cde54c5e64c9273a17f916b1590be9a67ae42.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockAuthenticationContext = context.mock(AuthenticationContext.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthentication = context.mock(Authentication.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .authenticationContext(mockAuthenticationContext)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationContext).currentAuthentication();\n            will(returnValue(Optional.of(mockAuthentication)));\n        }});\n        \n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"62820feca3045e678fcee07e7f531f4f56c6f26a","commitMessage":"@@@Merge pull request #590 from apache/ISIS-2727\n\nIsis 2727 : factors out InteractionService as a low-level service available in the applib.","date":"2021-06-10 12:27:06","modifiedFileCount":"86","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-06-10 18:42:21","codes":[{"authorDate":"2021-06-10 12:27:06","commitOrder":29,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationTracker)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n\n    }\n","date":"2021-06-10 12:27:06","endLine":129,"groupId":"7984","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/8f/06f62618704f13f5a6fd54c2458c1d61993615.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationTracker)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"},{"authorDate":"2021-06-10 18:42:21","commitOrder":29,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockAuthenticationProvider = context.mock(AuthenticationProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .authenticationProvider(mockAuthenticationProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationProvider).currentAuthentication();\n            will(returnValue(Optional.of(iaContext)));\n        }});\n\n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n    }\n","date":"2021-06-10 18:42:21","endLine":131,"groupId":"1393","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/d3/76e4bc4150b712a89c18bf86761d60565ebc48.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockAuthenticationProvider = context.mock(AuthenticationProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n        mockAuthentication = context.mock(Authentication.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .authenticationProvider(mockAuthenticationProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationProvider).currentAuthentication();\n            will(returnValue(Optional.of(mockAuthentication)));\n        }});\n\n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"e93e59ddbffbc6337f62e90f1bdc17389cc4d24c","commitMessage":"@@@ISIS-2727: remove Authentication from 'security'\n\ninstead have UserMemento hold the authentication state\n\nalso adds some todos","date":"2021-06-10 18:42:21","modifiedFileCount":"63","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-06-10 21:12:13","codes":[{"authorDate":"2021-06-10 21:12:13","commitOrder":30,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(InteractionProvider.class);\n            will(returnValue(Optional.of(mockInteractionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n\n    }\n","date":"2021-06-10 21:12:13","endLine":129,"groupId":"7984","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/8f/b6b15a38d5a3f676b8bd4f95e063cf7dd4e589.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(AuthenticationProvider.class);\n            will(returnValue(Optional.of(mockAuthenticationTracker)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2021-06-10 21:12:13","commitOrder":30,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockInteractionProvider = context.mock(InteractionProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .interactionProvider(mockInteractionProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockInteractionProvider).currentInteractionContext();\n            will(returnValue(Optional.of(iaContext)));\n        }});\n\n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n    }\n","date":"2021-06-10 21:12:13","endLine":131,"groupId":"1393","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/2b/8ccd5a8023186bb5d5a16d2b6dfe8cdf236d36.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockAuthenticationProvider = context.mock(AuthenticationProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .authenticationProvider(mockAuthenticationProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockAuthenticationProvider).currentAuthentication();\n            will(returnValue(Optional.of(iaContext)));\n        }});\n\n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"42d29aad778964e300a8e4316f8edbad180d843e","commitMessage":"@@@ISIS-2727: remove AuthenticationProvider\n\n(replaced with InteractionProvider)","date":"2021-06-10 21:12:13","modifiedFileCount":"32","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-06-17 01:35:27","codes":[{"authorDate":"2021-06-17 01:35:27","commitOrder":31,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(InteractionProvider.class);\n            will(returnValue(Optional.of(mockInteractionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = FacetHolderAbstract.simple(\n                metaModelContext,\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(metaModelContext, AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(metaModelContext, FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n    }\n","date":"2021-06-17 01:35:27","endLine":125,"groupId":"8626","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/f0/dff445c7a1de1194a6df2a9f48bcc7485241f4.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(InteractionProvider.class);\n            will(returnValue(Optional.of(mockInteractionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = new AbstractFacetFactoryTest.IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2021-06-17 01:35:27","commitOrder":31,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockInteractionProvider = context.mock(InteractionProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .interactionProvider(mockInteractionProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockInteractionProvider).currentInteractionContext();\n            will(returnValue(Optional.of(iaContext)));\n        }});\n\n        facetHolder = FacetHolderAbstract.simple(\n                metaModelContext,\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n\n        facetedMethod = FacetedMethod.createForProperty(metaModelContext, Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                metaModelContext,\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n    }\n","date":"2021-06-17 01:35:27","endLine":115,"groupId":"3944","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/ee/605e8ae0168ad9883c6caf1cee76d95fdc233a.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        facetHolder = new IdentifiedHolderImpl(\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockInteractionProvider = context.mock(InteractionProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .interactionProvider(mockInteractionProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockInteractionProvider).currentInteractionContext();\n            will(returnValue(Optional.of(iaContext)));\n        }});\n\n        ((MetaModelContextAware)facetHolder).setMetaModelContext(metaModelContext);\n        facetedMethod.setMetaModelContext(metaModelContext);\n        facetedMethodParameter.setMetaModelContext(metaModelContext);\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"ad5883b613b9e24b4c3bcdcbf7c798439c08d561","commitMessage":"@@@Merge pull request #587 from apache/2723_facet.preced\n\nISIS-2723: simplify facet precedence logic","date":"2021-06-17 01:35:27","modifiedFileCount":"805","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-06-17 01:35:27","codes":[{"authorDate":"2021-07-04 13:37:49","commitOrder":32,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .build();\n\n        facetHolder = FacetHolderAbstract.simple(\n                metaModelContext,\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(metaModelContext, AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(metaModelContext, FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n    }\n","date":"2021-07-04 13:37:49","endLine":90,"groupId":"8626","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/2c/942eb4e2a167e06f4b81e38b4f9b20d4af2382.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        \r\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .serviceInjector(mockServiceInjector)\n                        .serviceRegistry(mockServiceRegistry)\n                        .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockServiceRegistry).lookupService(TranslationService.class);\n            will(returnValue(Optional.of(mockTranslationService)));\n\n            allowing(mockServiceRegistry).lookupService(InteractionProvider.class);\n            will(returnValue(Optional.of(mockInteractionProvider)));\n\n            allowing(mockServiceRegistry).lookupServiceElseFail(MetamodelEventService.class);\n            will(returnValue(mockMetamodelEventService));\n\n            \r\n            \r\n\n        }});\n\n        facetHolder = FacetHolderAbstract.simple(\n                metaModelContext,\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(metaModelContext, AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(metaModelContext, FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-06-17 01:35:27","commitOrder":32,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockInteractionProvider = context.mock(InteractionProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .interactionProvider(mockInteractionProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockInteractionProvider).currentInteractionContext();\n            will(returnValue(Optional.of(iaContext)));\n        }});\n\n        facetHolder = FacetHolderAbstract.simple(\n                metaModelContext,\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n\n        facetedMethod = FacetedMethod.createForProperty(metaModelContext, Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                metaModelContext,\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n    }\n","date":"2021-06-17 01:35:27","endLine":115,"groupId":"3944","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/ee/605e8ae0168ad9883c6caf1cee76d95fdc233a.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockInteractionProvider = context.mock(InteractionProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .interactionProvider(mockInteractionProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockInteractionProvider).currentInteractionContext();\n            will(returnValue(Optional.of(iaContext)));\n        }});\n\n        facetHolder = FacetHolderAbstract.simple(\n                metaModelContext,\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n\n        facetedMethod = FacetedMethod.createForProperty(metaModelContext, Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                metaModelContext,\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"N"}],"commitId":"8b55e9c0fabb050389fa6546f84d6fd48f278ace","commitMessage":"@@@ISIS-2787: some MM test cleanup","date":"2021-07-04 13:37:49","modifiedFileCount":"7","status":"M","submitter":"andi-huber"},{"authorTime":"2021-09-18 19:53:44","codes":[{"authorDate":"2021-07-04 13:37:49","commitOrder":33,"curCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .build();\n\n        facetHolder = FacetHolderAbstract.simple(\n                metaModelContext,\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(metaModelContext, AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(metaModelContext, FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n    }\n","date":"2021-07-04 13:37:49","endLine":90,"groupId":"10340","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpFacetedMethodAndParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/2c/942eb4e2a167e06f4b81e38b4f9b20d4af2382.src","preCode":"    public void setUpFacetedMethodAndParameter() throws Exception {\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                        .specificationLoader(mockSpecificationLoader)\n                        .build();\n\n        facetHolder = FacetHolderAbstract.simple(\n                metaModelContext,\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n        facetedMethod = FacetedMethod.createForProperty(metaModelContext, AbstractFacetFactoryTest.Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(metaModelContext, FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class);\n\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryJUnit4TestCase.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"N"},{"authorDate":"2021-09-18 19:53:44","commitOrder":33,"curCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        methodRemover = new MethodRemover_forTesting();\n\n        mockInteractionProvider = context.mock(InteractionProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .interactionProvider(mockInteractionProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockInteractionProvider).currentInteractionContext();\n            will(returnValue(Optional.of(iaContext)));\n        }});\n\n        facetHolder = FacetHolderAbstract.simple(\n                metaModelContext,\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n\n        facetedMethod = FacetedMethod.createForProperty(metaModelContext, Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                metaModelContext,\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n    }\n","date":"2021-09-18 19:53:44","endLine":114,"groupId":"10340","id":60,"instanceNumber":2,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/83/3590428b4ab00ecf884e7ced02ee8ef653eb5c.src","preCode":"    protected void setUp() throws Exception {\n        super.setUp();\n\n        \r\n\n        methodRemover = new MethodRemoverForTesting();\n\n        mockInteractionProvider = context.mock(InteractionProvider.class);\n\n        mockTranslationService = context.mock(TranslationService.class);\n\n        mockSpecificationLoader = context.mock(SpecificationLoader.class);\n\n        metaModelContext = MetaModelContext_forTesting.builder()\n                .specificationLoader(mockSpecificationLoader)\n                .translationService(mockTranslationService)\n                .interactionProvider(mockInteractionProvider)\n                .build();\n\n        context.checking(new Expectations() {{\n\n            allowing(mockInteractionProvider).currentInteractionContext();\n            will(returnValue(Optional.of(iaContext)));\n        }});\n\n        facetHolder = FacetHolderAbstract.simple(\n                metaModelContext,\n                Identifier.propertyOrCollectionIdentifier(LogicalType.fqcn(Customer.class), \"firstName\"));\n\n        facetedMethod = FacetedMethod.createForProperty(metaModelContext, Customer.class, \"firstName\");\n        facetedMethodParameter = new FacetedMethodParameter(\n                metaModelContext,\n                FeatureType.ACTION_PARAMETER_SCALAR, facetedMethod.getOwningType(), facetedMethod.getMethod(), String.class\n                );\n    }\n","realPath":"core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AbstractFacetFactoryTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"13c3ae774c655ca2e810a3da8e26fb1ca655fc30","commitMessage":"@@@ISIS-2871: housekeeping","date":"2021-09-18 19:53:44","modifiedFileCount":"22","status":"M","submitter":"andi-huber"}]
