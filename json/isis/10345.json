[{"authorTime":"2021-04-14 23:26:49","codes":[{"authorDate":"2021-04-14 23:26:49","commitOrder":1,"curCode":"    public void refineProgrammingModel(ProgrammingModel programmingModel) {\n        programmingModel.addVisitingValidatorSkipManagedBeans(objectSpec->{\n            \n            final JdoPersistenceCapableFacet pcFacet = objectSpec.getFacet(JdoPersistenceCapableFacet.class);\n            if(pcFacet==null || pcFacet.getIdentityType() == IdentityType.NONDURABLE) {\n                return;\n            }\n\n            final Stream<ObjectAssociation> associations = objectSpec\n                    .streamAssociations(MixedIn.EXCLUDED)\n                    .filter(ObjectAssociation.Predicates.PROPERTIES);\n\n            associations\n            \r\n            .filter(association->!association.containsNonFallbackFacet(JdoNotPersistentFacet.class))\n            .forEach(association->validateMandatoryFacet(association));\n            \n        });\n    }\n","date":"2021-04-14 23:26:49","endLine":139,"groupId":"1851","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"refineProgrammingModel","params":"(ProgrammingModelprogrammingModel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/89/5a832c194b1b4b7ececb7021e6557ad8e745e4.src","preCode":"    public void refineProgrammingModel(ProgrammingModel programmingModel) {\n        programmingModel.addVisitingValidatorSkipManagedBeans(objectSpec->{\n            \n            final JdoPersistenceCapableFacet pcFacet = objectSpec.getFacet(JdoPersistenceCapableFacet.class);\n            if(pcFacet==null || pcFacet.getIdentityType() == IdentityType.NONDURABLE) {\n                return;\n            }\n\n            final Stream<ObjectAssociation> associations = objectSpec\n                    .streamAssociations(MixedIn.EXCLUDED)\n                    .filter(ObjectAssociation.Predicates.PROPERTIES);\n\n            associations\n            \r\n            .filter(association->!association.containsNonFallbackFacet(JdoNotPersistentFacet.class))\n            .forEach(association->validateMandatoryFacet(association));\n            \n        });\n    }\n","realPath":"persistence/jdo/metamodel/src/main/java/org/apache/isis/persistence/jdo/metamodel/facets/prop/column/MandatoryFromJdoColumnAnnotationFacetFactory.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"},{"authorDate":"2021-04-14 23:26:49","commitOrder":1,"curCode":"    private static void validateMandatoryFacet(ObjectAssociation association) {\n        MandatoryFacet facet = association.getFacet(MandatoryFacet.class);\n\n        MandatoryFacet underlying = (MandatoryFacet) facet.getUnderlyingFacet();\n        if(underlying == null) {\n            return;\n        }\n\n        if(facet instanceof MandatoryFacetDerivedFromJdoColumn) {\n\n            if(underlying.isInvertedSemantics() == facet.isInvertedSemantics()) {\n                return;\n            }\n\n            if(underlying.isInvertedSemantics()) {\n                \r\n                ValidationFailure.raiseFormatted(\n                        association,\n                        \"%s: incompatible usage of Isis' @Optional annotation and @javax.jdo.annotations.Column; use just @javax.jdo.annotations.Column(allowsNull=\\\"...\\\")\",\n                        association.getIdentifier().getFullIdentityString());\n            } else {\n                ValidationFailure.raiseFormatted(\n                        association,\n                        \"%s: incompatible Isis' default of required/optional properties vs JDO; add @javax.jdo.annotations.Column(allowsNull=\\\"...\\\")\",\n                        association.getIdentifier().getFullIdentityString());\n            }\n        }\n\n        if(facet instanceof MandatoryFacetInferredFromAbsenceOfJdoColumn) {\n\n            if(underlying.isInvertedSemantics() == facet.isInvertedSemantics()) {\n                return;\n            }\n            if(underlying.isInvertedSemantics()) {\n                \r\n                ValidationFailure.raiseFormatted(\n                        association,\n                        \"%s: incompatible usage of Isis' @Optional annotation and @javax.jdo.annotations.Column; use just @javax.jdo.annotations.Column(allowsNull=\\\"...\\\")\",\n                        association.getIdentifier().getFullIdentityString());\n            } else {\n                ValidationFailure.raiseFormatted(\n                        association,\n                        \"%s: incompatible default handling of required/optional properties between Isis and JDO; add @javax.jdo.annotations.Column(allowsNull=\\\"...\\\")\",\n                        association.getIdentifier().getFullIdentityString());\n            }\n        }\n    }\n","date":"2021-04-14 23:26:49","endLine":187,"groupId":"8433","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validateMandatoryFacet","params":"(ObjectAssociationassociation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/89/5a832c194b1b4b7ececb7021e6557ad8e745e4.src","preCode":"    private static void validateMandatoryFacet(ObjectAssociation association) {\n        MandatoryFacet facet = association.getFacet(MandatoryFacet.class);\n\n        MandatoryFacet underlying = (MandatoryFacet) facet.getUnderlyingFacet();\n        if(underlying == null) {\n            return;\n        }\n\n        if(facet instanceof MandatoryFacetDerivedFromJdoColumn) {\n\n            if(underlying.isInvertedSemantics() == facet.isInvertedSemantics()) {\n                return;\n            }\n\n            if(underlying.isInvertedSemantics()) {\n                \r\n                ValidationFailure.raiseFormatted(\n                        association,\n                        \"%s: incompatible usage of Isis' @Optional annotation and @javax.jdo.annotations.Column; use just @javax.jdo.annotations.Column(allowsNull=\\\"...\\\")\",\n                        association.getIdentifier().getFullIdentityString());\n            } else {\n                ValidationFailure.raiseFormatted(\n                        association,\n                        \"%s: incompatible Isis' default of required/optional properties vs JDO; add @javax.jdo.annotations.Column(allowsNull=\\\"...\\\")\",\n                        association.getIdentifier().getFullIdentityString());\n            }\n        }\n\n        if(facet instanceof MandatoryFacetInferredFromAbsenceOfJdoColumn) {\n\n            if(underlying.isInvertedSemantics() == facet.isInvertedSemantics()) {\n                return;\n            }\n            if(underlying.isInvertedSemantics()) {\n                \r\n                ValidationFailure.raiseFormatted(\n                        association,\n                        \"%s: incompatible usage of Isis' @Optional annotation and @javax.jdo.annotations.Column; use just @javax.jdo.annotations.Column(allowsNull=\\\"...\\\")\",\n                        association.getIdentifier().getFullIdentityString());\n            } else {\n                ValidationFailure.raiseFormatted(\n                        association,\n                        \"%s: incompatible default handling of required/optional properties between Isis and JDO; add @javax.jdo.annotations.Column(allowsNull=\\\"...\\\")\",\n                        association.getIdentifier().getFullIdentityString());\n            }\n        }\n    }\n","realPath":"persistence/jdo/metamodel/src/main/java/org/apache/isis/persistence/jdo/metamodel/facets/prop/column/MandatoryFromJdoColumnAnnotationFacetFactory.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"}],"commitId":"75633e1f8ce37deb39e3c2e2644357af15365d05","commitMessage":"@@@Merge branch 'master' of https://github.com/apache/isis into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-14 23:26:49","modifiedFileCount":"1999","status":"B","submitter":"J?rg Rade"},{"authorTime":"2021-06-17 01:35:27","codes":[{"authorDate":"2021-06-17 01:35:27","commitOrder":2,"curCode":"    public void refineProgrammingModel(final ProgrammingModel programmingModel) {\n        programmingModel.addVisitingValidatorSkipManagedBeans(objectSpec->{\n\n            final JdoPersistenceCapableFacet pcFacet = objectSpec.getFacet(JdoPersistenceCapableFacet.class);\n            if(pcFacet==null || pcFacet.getIdentityType() == IdentityType.NONDURABLE) {\n                return;\n            }\n\n            final Stream<ObjectAssociation> associations = objectSpec\n                    .streamAssociations(MixedIn.EXCLUDED)\n                    .filter(ObjectAssociation.Predicates.PROPERTIES);\n\n            associations\n            \r\n            .filter(association->!association.containsNonFallbackFacet(JdoNotPersistentFacet.class))\n            .forEach(association->validateMandatoryFacet(association));\n\n        });\n    }\n","date":"2021-06-17 01:35:27","endLine":149,"groupId":"10345","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"refineProgrammingModel","params":"(finalProgrammingModelprogrammingModel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/c2/66b577834463f5919da6fc15263b9f2b86a308.src","preCode":"    public void refineProgrammingModel(ProgrammingModel programmingModel) {\n        programmingModel.addVisitingValidatorSkipManagedBeans(objectSpec->{\n\n            final JdoPersistenceCapableFacet pcFacet = objectSpec.getFacet(JdoPersistenceCapableFacet.class);\n            if(pcFacet==null || pcFacet.getIdentityType() == IdentityType.NONDURABLE) {\n                return;\n            }\n\n            final Stream<ObjectAssociation> associations = objectSpec\n                    .streamAssociations(MixedIn.EXCLUDED)\n                    .filter(ObjectAssociation.Predicates.PROPERTIES);\n\n            associations\n            \r\n            .filter(association->!association.containsNonFallbackFacet(JdoNotPersistentFacet.class))\n            .forEach(association->validateMandatoryFacet(association));\n\n        });\n    }\n","realPath":"persistence/jdo/metamodel/src/main/java/org/apache/isis/persistence/jdo/metamodel/facets/prop/column/MandatoryFromJdoColumnAnnotationFacetFactory.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2021-06-17 01:35:27","commitOrder":2,"curCode":"    private static void validateMandatoryFacet(final ObjectAssociation association) {\n\n        association.lookupFacet(MandatoryFacet.class)\n        .map(MandatoryFacet::getSharedFacetRankingElseFail)\n        .ifPresent(facetRanking->facetRanking\n                .visitTopRankPairsSemanticDiffering(MandatoryFacet.class, (a, b)->{\n\n                    ValidationFailure.raiseFormatted(\n                            association,\n                            \"%s: inconsistent Mandatory/Optional semantics specified in %s and %s.\",\n                            association.getFeatureIdentifier().toString(),\n                            a.getClass().getSimpleName(),\n                            b.getClass().getSimpleName());\n                }));\n\n    }\n","date":"2021-06-17 01:35:27","endLine":166,"groupId":"10345","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"validateMandatoryFacet","params":"(finalObjectAssociationassociation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/c2/66b577834463f5919da6fc15263b9f2b86a308.src","preCode":"    private static void validateMandatoryFacet(ObjectAssociation association) {\n        MandatoryFacet facet = association.getFacet(MandatoryFacet.class);\n\n        MandatoryFacet underlying = (MandatoryFacet) facet.getUnderlyingFacet();\n        if(underlying == null) {\n            return;\n        }\n\n        if(facet instanceof MandatoryFacetDerivedFromJdoColumn) {\n\n            if(underlying.isInvertedSemantics() == facet.isInvertedSemantics()) {\n                return;\n            }\n\n            if(underlying.isInvertedSemantics()) {\n                \r\n                ValidationFailure.raiseFormatted(\n                        association,\n                        \"%s: incompatible usage of Isis' @Optional annotation and @javax.jdo.annotations.Column; use just @javax.jdo.annotations.Column(allowsNull=\\\"...\\\")\",\n                        association.getIdentifier().getFullIdentityString());\n            } else {\n                ValidationFailure.raiseFormatted(\n                        association,\n                        \"%s: incompatible Isis' default of required/optional properties vs JDO; add @javax.jdo.annotations.Column(allowsNull=\\\"...\\\")\",\n                        association.getIdentifier().getFullIdentityString());\n            }\n        }\n\n        if(facet instanceof MandatoryFacetInferredFromAbsenceOfJdoColumn) {\n\n            if(underlying.isInvertedSemantics() == facet.isInvertedSemantics()) {\n                return;\n            }\n            if(underlying.isInvertedSemantics()) {\n                \r\n                ValidationFailure.raiseFormatted(\n                        association,\n                        \"%s: incompatible usage of Isis' @Optional annotation and @javax.jdo.annotations.Column; use just @javax.jdo.annotations.Column(allowsNull=\\\"...\\\")\",\n                        association.getIdentifier().getFullIdentityString());\n            } else {\n                ValidationFailure.raiseFormatted(\n                        association,\n                        \"%s: incompatible default handling of required/optional properties between Isis and JDO; add @javax.jdo.annotations.Column(allowsNull=\\\"...\\\")\",\n                        association.getIdentifier().getFullIdentityString());\n            }\n        }\n    }\n","realPath":"persistence/jdo/metamodel/src/main/java/org/apache/isis/persistence/jdo/metamodel/facets/prop/column/MandatoryFromJdoColumnAnnotationFacetFactory.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"ad5883b613b9e24b4c3bcdcbf7c798439c08d561","commitMessage":"@@@Merge pull request #587 from apache/2723_facet.preced\n\nISIS-2723: simplify facet precedence logic","date":"2021-06-17 01:35:27","modifiedFileCount":"805","status":"M","submitter":"Andi Huber"}]
