[{"authorTime":"2021-04-21 23:42:54","codes":[{"authorDate":"2021-04-21 23:42:54","commitOrder":1,"curCode":"    void booksUniqueByIsbn_whenViolated_shouldThrowTranslatedException() {\n\n        \n        transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n            \n            interactionFactory.runAnonymous(()->{\n            \n                _TestFixtures.setUp3Books(repositoryService);\n                \n            });\n            \n            \n        });\n        \n        \r\n        \r\n        \n        assertThrows(DataAccessException.class, ()->{\n\n            transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n                \n                interactionFactory.runAnonymous(()->{\n                \n                    \r\n                    \n                    val inventories = repositoryService.allInstances(JdoInventory.class);\n                    assertEquals(1, inventories.size());\n                    \n                    val inventory = inventories.get(0);\n                    assertNotNull(inventory);\n                    \n                    \n                    \r\n                    _TestFixtures.addABookTo(inventory);\n                \n                });\n    \n            })\n            .ifSuccess(__->fail(\"expected to fail, but did not\"))\n            \r\n            .ifFailure(ex->assertTrue(ex instanceof DataIntegrityViolationException))\n            .optionalElseFail();\n            \n        });\n        \n        \r\n        \n        transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n            \n            interactionFactory.runAnonymous(()->{\n            \n                val inventories = repositoryService.allInstances(JdoInventory.class);\n                assertEquals(1, inventories.size());\n                \n                val inventory = inventories.get(0);\n                assertNotNull(inventory);\n                \n                assertNotNull(inventory);\n                assertNotNull(inventory.getProducts());\n                assertEquals(3, inventory.getProducts().size());\n\n                _TestFixtures.assertInventoryHasBooks(inventory.getProducts(), 1, 2, 3);\n                \n            });\n            \n            \n        });\n\n        \n    }    \n","date":"2021-04-21 23:42:54","endLine":144,"groupId":"11153","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"booksUniqueByIsbn_whenViolated_shouldThrowTranslatedException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/d1/af3889500f402913a76c34e75cb575320ae555.src","preCode":"    void booksUniqueByIsbn_whenViolated_shouldThrowTranslatedException() {\n\n        \n        transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n            \n            interactionFactory.runAnonymous(()->{\n            \n                _TestFixtures.setUp3Books(repositoryService);\n                \n            });\n            \n            \n        });\n        \n        \r\n        \r\n        \n        assertThrows(DataAccessException.class, ()->{\n\n            transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n                \n                interactionFactory.runAnonymous(()->{\n                \n                    \r\n                    \n                    val inventories = repositoryService.allInstances(JdoInventory.class);\n                    assertEquals(1, inventories.size());\n                    \n                    val inventory = inventories.get(0);\n                    assertNotNull(inventory);\n                    \n                    \n                    \r\n                    _TestFixtures.addABookTo(inventory);\n                \n                });\n    \n            })\n            .ifSuccess(__->fail(\"expected to fail, but did not\"))\n            \r\n            .ifFailure(ex->assertTrue(ex instanceof DataIntegrityViolationException))\n            .optionalElseFail();\n            \n        });\n        \n        \r\n        \n        transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n            \n            interactionFactory.runAnonymous(()->{\n            \n                val inventories = repositoryService.allInstances(JdoInventory.class);\n                assertEquals(1, inventories.size());\n                \n                val inventory = inventories.get(0);\n                assertNotNull(inventory);\n                \n                assertNotNull(inventory);\n                assertNotNull(inventory.getProducts());\n                assertEquals(3, inventory.getProducts().size());\n\n                _TestFixtures.assertInventoryHasBooks(inventory.getProducts(), 1, 2, 3);\n                \n            });\n            \n            \n        });\n\n        \n    }    \n","realPath":"regressiontests/stable-persistence-jdo/src/test/java/org/apache/isis/testdomain/persistence/jdo/JdoExceptionTranslationTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2021-04-21 23:42:54","commitOrder":1,"curCode":"    void booksUniqueByIsbn_verifyPhase() {\n\n        \r\n        \n        interactionFactory.runAnonymous(()->{\n            \n            val inventories = repositoryService.allInstances(JdoInventory.class);\n            assertEquals(1, inventories.size());\n            \n            val inventory = inventories.get(0);\n            assertNotNull(inventory);\n            \n            assertNotNull(inventory);\n            assertNotNull(inventory.getProducts());\n            assertEquals(3, inventory.getProducts().size());\n\n            _TestFixtures.assertInventoryHasBooks(inventory.getProducts(), 1, 2, 3);\n            \n        });\n        \n    }\n","date":"2021-04-21 23:42:54","endLine":138,"groupId":"11153","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"booksUniqueByIsbn_verifyPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/92/7e3ecfded18acba15dfce2789229ad6c7e7a42.src","preCode":"    void booksUniqueByIsbn_verifyPhase() {\n\n        \r\n        \n        interactionFactory.runAnonymous(()->{\n            \n            val inventories = repositoryService.allInstances(JdoInventory.class);\n            assertEquals(1, inventories.size());\n            \n            val inventory = inventories.get(0);\n            assertNotNull(inventory);\n            \n            assertNotNull(inventory);\n            assertNotNull(inventory.getProducts());\n            assertEquals(3, inventory.getProducts().size());\n\n            _TestFixtures.assertInventoryHasBooks(inventory.getProducts(), 1, 2, 3);\n            \n        });\n        \n    }\n","realPath":"regressiontests/stable-persistence-jdo/src/test/java/org/apache/isis/testdomain/persistence/jdo/JdoExceptionTranslationTest_usingTransactional.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"}],"commitId":"0348bc49be1ca70a98f195ecaa09e1372df645ec","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-21 23:42:54","modifiedFileCount":"188","status":"B","submitter":"J?rg Rade"},{"authorTime":"2021-06-10 20:10:57","codes":[{"authorDate":"2021-06-10 20:10:57","commitOrder":2,"curCode":"    void booksUniqueByIsbn_whenViolated_shouldThrowTranslatedException() {\n\n\n        transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n\n            interactionService.runAnonymous(()->{\n\n                _TestFixtures.setUp3Books(repositoryService);\n\n            });\n\n\n        });\n\n        \r\n        \r\n\n        assertThrows(DataAccessException.class, ()->{\n\n            transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n\n                interactionService.runAnonymous(()->{\n\n                    \r\n\n                    val inventories = repositoryService.allInstances(JdoInventory.class);\n                    assertEquals(1, inventories.size());\n\n                    val inventory = inventories.get(0);\n                    assertNotNull(inventory);\n\n\n                    \r\n                    _TestFixtures.addABookTo(inventory);\n\n                });\n\n            })\n            .ifSuccess(__->fail(\"expected to fail, but did not\"))\n            \r\n            .ifFailure(ex->assertTrue(ex instanceof DataIntegrityViolationException))\n            .optionalElseFail();\n\n        });\n\n        \r\n\n        transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n\n            interactionService.runAnonymous(()->{\n\n                val inventories = repositoryService.allInstances(JdoInventory.class);\n                assertEquals(1, inventories.size());\n\n                val inventory = inventories.get(0);\n                assertNotNull(inventory);\n\n                assertNotNull(inventory);\n                assertNotNull(inventory.getProducts());\n                assertEquals(3, inventory.getProducts().size());\n\n                _TestFixtures.assertInventoryHasBooks(inventory.getProducts(), 1, 2, 3);\n\n            });\n\n\n        });\n\n\n    }\n","date":"2021-06-10 20:10:57","endLine":144,"groupId":"102","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"booksUniqueByIsbn_whenViolated_shouldThrowTranslatedException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/e3/d122e38cbbad37788146e2b87b83152956887e.src","preCode":"    void booksUniqueByIsbn_whenViolated_shouldThrowTranslatedException() {\n\n        \n        transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n            \n            interactionFactory.runAnonymous(()->{\n            \n                _TestFixtures.setUp3Books(repositoryService);\n                \n            });\n            \n            \n        });\n        \n        \r\n        \r\n        \n        assertThrows(DataAccessException.class, ()->{\n\n            transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n                \n                interactionFactory.runAnonymous(()->{\n                \n                    \r\n                    \n                    val inventories = repositoryService.allInstances(JdoInventory.class);\n                    assertEquals(1, inventories.size());\n                    \n                    val inventory = inventories.get(0);\n                    assertNotNull(inventory);\n                    \n                    \n                    \r\n                    _TestFixtures.addABookTo(inventory);\n                \n                });\n    \n            })\n            .ifSuccess(__->fail(\"expected to fail, but did not\"))\n            \r\n            .ifFailure(ex->assertTrue(ex instanceof DataIntegrityViolationException))\n            .optionalElseFail();\n            \n        });\n        \n        \r\n        \n        transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n            \n            interactionFactory.runAnonymous(()->{\n            \n                val inventories = repositoryService.allInstances(JdoInventory.class);\n                assertEquals(1, inventories.size());\n                \n                val inventory = inventories.get(0);\n                assertNotNull(inventory);\n                \n                assertNotNull(inventory);\n                assertNotNull(inventory.getProducts());\n                assertEquals(3, inventory.getProducts().size());\n\n                _TestFixtures.assertInventoryHasBooks(inventory.getProducts(), 1, 2, 3);\n                \n            });\n            \n            \n        });\n\n        \n    }    \n","realPath":"regressiontests/stable-persistence-jdo/src/test/java/org/apache/isis/testdomain/persistence/jdo/JdoExceptionTranslationTest.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2021-06-10 20:10:57","commitOrder":2,"curCode":"    void booksUniqueByIsbn_verifyPhase() {\n\n        \r\n\n        interactionService.runAnonymous(()->{\n\n            val inventories = repositoryService.allInstances(JdoInventory.class);\n            assertEquals(1, inventories.size());\n\n            val inventory = inventories.get(0);\n            assertNotNull(inventory);\n\n            assertNotNull(inventory);\n            assertNotNull(inventory.getProducts());\n            assertEquals(3, inventory.getProducts().size());\n\n            _TestFixtures.assertInventoryHasBooks(inventory.getProducts(), 1, 2, 3);\n\n        });\n\n    }\n","date":"2021-06-10 20:10:57","endLine":137,"groupId":"102","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"booksUniqueByIsbn_verifyPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/ee/720bea51f9c95ac1a2559a2a887594bc923c93.src","preCode":"    void booksUniqueByIsbn_verifyPhase() {\n\n        \r\n\n        interactionFactory.runAnonymous(()->{\n\n            val inventories = repositoryService.allInstances(JdoInventory.class);\n            assertEquals(1, inventories.size());\n\n            val inventory = inventories.get(0);\n            assertNotNull(inventory);\n\n            assertNotNull(inventory);\n            assertNotNull(inventory.getProducts());\n            assertEquals(3, inventory.getProducts().size());\n\n            _TestFixtures.assertInventoryHasBooks(inventory.getProducts(), 1, 2, 3);\n\n        });\n\n    }\n","realPath":"regressiontests/stable-persistence-jdo/src/test/java/org/apache/isis/testdomain/persistence/jdo/JdoExceptionTranslationTest_usingTransactional.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"fe9d58ed13592b52377d80d92d91eed1102c40bd","commitMessage":"@@@ISIS-2727: remove AnonymousInteractionFactory\n\n(merge up into InteractionService)\n\nremove InteractionFactory.  as is now identical to InteractionService\n\nrename InteractionFactoryDefault->\nInteractionServiceDefault\n\nalso cleanup InteractionContextFactory","date":"2021-06-10 20:10:57","modifiedFileCount":"64","status":"M","submitter":"Andi Huber"}]
