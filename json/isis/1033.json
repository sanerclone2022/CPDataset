[{"authorTime":"2020-09-15 14:35:34","codes":[{"authorDate":"2020-09-15 14:35:34","commitOrder":1,"curCode":"                    .forEach(repository::remove);\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JdoInventory> builder() {\n            return new BuilderScriptWithResult<JdoInventory>() {\n\n                @Override\n                protected JdoInventory buildResult(ExecutionContext ec) {\n\n                    val products = new HashSet<JdoProduct>();\n\n                    products.add(JdoBook.of(\n                            \"Sample Book\", \"A sample book for testing.\", 99.,\n                            \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n                    val inventory = JdoInventory.of(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n","date":"2020-09-15 14:35:34","endLine":96,"groupId":"13387","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"forEach","params":"(repository::remove)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/87/91556d11e81a58eb07040b70b692ed5aad3df1.src","preCode":"                    .forEach(repository::remove);\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JdoInventory> builder() {\n            return new BuilderScriptWithResult<JdoInventory>() {\n\n                @Override\n                protected JdoInventory buildResult(ExecutionContext ec) {\n\n                    val products = new HashSet<JdoProduct>();\n\n                    products.add(JdoBook.of(\n                            \"Sample Book\", \"A sample book for testing.\", 99.,\n                            \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n                    val inventory = JdoInventory.of(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jdo/JdoTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2020-09-15 14:35:34","commitOrder":1,"curCode":"                    .forEach(repository::remove);\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JpaInventory> builder() {\n            return new BuilderScriptWithResult<JpaInventory>() {\n\n                @Override\n                protected JpaInventory buildResult(ExecutionContext ec) {\n\n                    val products = new HashSet<JpaProduct>();\n\n                    products.add(JpaBook.of(\n                            \"Sample Book\", \"A sample book for testing.\", 99.,\n                            \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n                    val inventory = JpaInventory.of(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n","date":"2020-09-15 14:35:34","endLine":96,"groupId":"13387","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"forEach","params":"(repository::remove)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/9a/9b4730a949b1f70bd97b9c1fe8e8028ee124de.src","preCode":"                    .forEach(repository::remove);\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JpaInventory> builder() {\n            return new BuilderScriptWithResult<JpaInventory>() {\n\n                @Override\n                protected JpaInventory buildResult(ExecutionContext ec) {\n\n                    val products = new HashSet<JpaProduct>();\n\n                    products.add(JpaBook.of(\n                            \"Sample Book\", \"A sample book for testing.\", 99.,\n                            \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n                    val inventory = JpaInventory.of(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jpa/JpaTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"}],"commitId":"14fe76bb4a31f4fc84385a6039b21a4d8b0c39d7","commitMessage":"@@@ISIS-2428: move smoketests -> regressiontests","date":"2020-09-15 14:35:34","modifiedFileCount":"0","status":"B","submitter":"Andi Huber"},{"authorTime":"2021-04-14 23:26:49","codes":[{"authorDate":"2020-09-15 14:35:34","commitOrder":2,"curCode":"                    .forEach(repository::remove);\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JdoInventory> builder() {\n            return new BuilderScriptWithResult<JdoInventory>() {\n\n                @Override\n                protected JdoInventory buildResult(ExecutionContext ec) {\n\n                    val products = new HashSet<JdoProduct>();\n\n                    products.add(JdoBook.of(\n                            \"Sample Book\", \"A sample book for testing.\", 99.,\n                            \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n                    val inventory = JdoInventory.of(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n","date":"2020-09-15 14:35:34","endLine":96,"groupId":"13387","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"forEach","params":"(repository::remove)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/87/91556d11e81a58eb07040b70b692ed5aad3df1.src","preCode":"                    .forEach(repository::remove);\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JdoInventory> builder() {\n            return new BuilderScriptWithResult<JdoInventory>() {\n\n                @Override\n                protected JdoInventory buildResult(ExecutionContext ec) {\n\n                    val products = new HashSet<JdoProduct>();\n\n                    products.add(JdoBook.of(\n                            \"Sample Book\", \"A sample book for testing.\", 99.,\n                            \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n                    val inventory = JdoInventory.of(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jdo/JdoTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2021-04-14 23:26:49","commitOrder":2,"curCode":"                    .forEach(repository::remove);\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JpaInventory> builder() {\n            return new BuilderScriptWithResult<JpaInventory>() {\n\n                @Override\n                protected JpaInventory buildResult(ExecutionContext ec) {\n\n                    val products = new TreeSet<JpaProduct>();\n\n                    products.add(JpaBook.of(\n                            \"Sample Book\", \"A sample book for testing.\", 99.,\n                            \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n                    val inventory = new JpaInventory(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n","date":"2021-04-14 23:26:49","endLine":96,"groupId":"13387","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"forEach","params":"(repository::remove)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/17/c77a8507a887776b804d5f230bb10b79b23ca4.src","preCode":"                    .forEach(repository::remove);\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JpaInventory> builder() {\n            return new BuilderScriptWithResult<JpaInventory>() {\n\n                @Override\n                protected JpaInventory buildResult(ExecutionContext ec) {\n\n                    val products = new HashSet<JpaProduct>();\n\n                    products.add(JpaBook.of(\n                            \"Sample Book\", \"A sample book for testing.\", 99.,\n                            \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n                    val inventory = JpaInventory.of(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n                    \n                    return inventory;\n\n                }\n                \n                @Inject private RepositoryService repository;\n\n            };\n        }    \n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jpa/JpaTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"75633e1f8ce37deb39e3c2e2644357af15365d05","commitMessage":"@@@Merge branch 'master' of https://github.com/apache/isis into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-14 23:26:49","modifiedFileCount":"1999","status":"M","submitter":"J?rg Rade"},{"authorTime":"2021-07-23 23:25:16","codes":[{"authorDate":"2021-07-23 23:25:16","commitOrder":3,"curCode":"                    .forEach(repository::remove);\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JdoInventory> builder() {\n            return new BuilderScriptWithResult<JdoInventory>() {\n\n                @Override\n                protected JdoInventory buildResult(final ExecutionContext ec) {\n\n                    val products = new HashSet<JdoProduct>();\n\n                    products.add(JdoBook.of(\n                            \"Sample Book\", \"A sample book for testing.\", 99.,\n                            \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n                    val inventory = JdoInventory.of(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n","date":"2021-07-23 23:25:16","endLine":95,"groupId":"13387","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"forEach","params":"(repository::remove)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/24/b0c4b5a113362cc82a9e795dc8486ff35af28f.src","preCode":"                    .forEach(repository::remove);\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JdoInventory> builder() {\n            return new BuilderScriptWithResult<JdoInventory>() {\n\n                @Override\n                protected JdoInventory buildResult(ExecutionContext ec) {\n\n                    val products = new HashSet<JdoProduct>();\n\n                    products.add(JdoBook.of(\n                            \"Sample Book\", \"A sample book for testing.\", 99.,\n                            \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n                    val inventory = JdoInventory.of(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jdo/JdoTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2021-07-23 23:25:16","commitOrder":3,"curCode":"                    .forEach(repository::remove);\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JpaInventory> builder() {\n            return new BuilderScriptWithResult<JpaInventory>() {\n\n                @Override\n                protected JpaInventory buildResult(final ExecutionContext ec) {\n\n                    val products = new TreeSet<JpaProduct>();\n\n                    products.add(JpaBook.of(\n                            \"Sample Book\", \"A sample book for testing.\", 99.,\n                            \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n                    val inventory = new JpaInventory(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n","date":"2021-07-23 23:25:16","endLine":95,"groupId":"13387","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"forEach","params":"(repository::remove)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/a3/79f4cd7f7893cbadbf96f2709a364bbd85ceec.src","preCode":"                    .forEach(repository::remove);\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JpaInventory> builder() {\n            return new BuilderScriptWithResult<JpaInventory>() {\n\n                @Override\n                protected JpaInventory buildResult(ExecutionContext ec) {\n\n                    val products = new TreeSet<JpaProduct>();\n\n                    products.add(JpaBook.of(\n                            \"Sample Book\", \"A sample book for testing.\", 99.,\n                            \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n                    val inventory = new JpaInventory(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jpa/JpaTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"9d274b298f6f14a63524851f7d2a609e44ab00db","commitMessage":"@@@ISIS-2573: publishing tests: enhanced step tracing\n\nidea is to record all essential execution steps/events.  so that at the\nend of the tests.  we can verify that the expected steps had taken place","date":"2021-07-23 23:25:16","modifiedFileCount":"9","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-07-31 16:13:27","codes":[{"authorDate":"2021-07-31 16:13:27","commitOrder":4,"curCode":"                    .forEach(repository::remove);\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JdoInventory> builder() {\n            return new BuilderScriptWithResult<JdoInventory>() {\n\n                @Override\n                protected JdoInventory buildResult(final ExecutionContext ec) {\n\n                    val products = new HashSet<JdoProduct>();\n\n                    products.add(BookDto.sample().toJdoBook());\n\n                    val inventory = JdoInventory.of(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n","date":"2021-07-31 16:13:27","endLine":94,"groupId":"1033","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"forEach","params":"(repository::remove)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/d1/1ce011951535b38f02a06bfd382c57080faa47.src","preCode":"                    .forEach(repository::remove);\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JdoInventory> builder() {\n            return new BuilderScriptWithResult<JdoInventory>() {\n\n                @Override\n                protected JdoInventory buildResult(final ExecutionContext ec) {\n\n                    val products = new HashSet<JdoProduct>();\n\n                    products.add(JdoBook.of(\n                            \"Sample Book\", \"A sample book for testing.\", 99.,\n                            \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n                    val inventory = JdoInventory.of(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jdo/JdoTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2021-07-31 16:13:27","commitOrder":4,"curCode":"                    .forEach(repository::remove);\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JpaInventory> builder() {\n            return new BuilderScriptWithResult<JpaInventory>() {\n\n                @Override\n                protected JpaInventory buildResult(final ExecutionContext ec) {\n\n                    val products = new TreeSet<JpaProduct>();\n\n                    products.add(BookDto.sample().toJpaBook());\n\n                    val inventory = new JpaInventory(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n","date":"2021-07-31 16:13:27","endLine":94,"groupId":"1033","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"forEach","params":"(repository::remove)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/09/f468633916378e0db0f229870c3af084823102.src","preCode":"                    .forEach(repository::remove);\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n\n    InventoryWith1Book {\n        @Override\n        public BuilderScriptWithResult<JpaInventory> builder() {\n            return new BuilderScriptWithResult<JpaInventory>() {\n\n                @Override\n                protected JpaInventory buildResult(final ExecutionContext ec) {\n\n                    val products = new TreeSet<JpaProduct>();\n\n                    products.add(JpaBook.of(\n                            \"Sample Book\", \"A sample book for testing.\", 99.,\n                            \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n                    val inventory = new JpaInventory(\"Sample Inventory\", products);\n                    repository.persist(inventory);\n\n                    return inventory;\n\n                }\n\n                @Inject private RepositoryService repository;\n\n            };\n        }\n    },\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/jpa/JpaTestDomainPersona.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"8201ff9da35f9deef841a63902c1ccbbc2c2d6c3","commitMessage":"@@@ISIS-2794: TransactionService: also test whether commit events are\ntriggered\n\nin scenarios\n- participating\n- not participating\n\nwhen\n- rollback\n- commit","date":"2021-07-31 16:13:27","modifiedFileCount":"5","status":"M","submitter":"Andi Huber"}]
