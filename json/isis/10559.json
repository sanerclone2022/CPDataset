[{"authorTime":"2020-01-10 21:59:03","codes":[{"authorDate":"2020-01-10 21:59:03","commitOrder":1,"curCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n\n                allowing(mockIsisSessionFactory).doInSession(with(any(Runnable.class)));\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","date":"2020-01-10 21:59:03","endLine":120,"groupId":"15271","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"signInJustDelegatesToAuthenticateAndSavesState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/d8/086159b88a0f96dd8eb8b366378532d28cabd3.src","preCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n\n                allowing(mockIsisSessionFactory).doInSession(with(any(Runnable.class)));\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_SignIn.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2020-01-10 21:59:03","commitOrder":1,"curCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n                \n                allowing(mockIsisSessionFactory).doInSession(with(any(Runnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","date":"2020-01-10 21:59:03","endLine":75,"groupId":"15271","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/54/de88095294ab4942d4f75817817ec31f53946a.src","preCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n                \n                allowing(mockIsisSessionFactory).doInSession(with(any(Runnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_TestAbstract.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"}],"commitId":"2074ec107287622d1cca7941b5b93b35c79d063f","commitMessage":"@@@ISIS-2259: moves core/viewers up a level.\n","date":"2020-01-10 21:59:03","modifiedFileCount":"0","status":"B","submitter":"danhaywood"},{"authorTime":"2020-03-02 16:22:04","codes":[{"authorDate":"2020-03-02 16:22:04","commitOrder":2,"curCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n\n                allowing(mockIsisSessionFactory).runAuthenticated(new InitialisationSession(), with(any(ThrowingRunnable.class)));\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","date":"2020-03-02 16:22:04","endLine":122,"groupId":"15670","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"signInJustDelegatesToAuthenticateAndSavesState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/80/459f841f9fa5a76c93a99dcffe36c54370ac3f.src","preCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n\n                allowing(mockIsisSessionFactory).doInSession(with(any(Runnable.class)));\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_SignIn.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-03-02 16:22:04","commitOrder":2,"curCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n                \n                allowing(mockIsisSessionFactory).runAuthenticated(new InitialisationSession(), with(any(ThrowingRunnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","date":"2020-03-02 16:22:04","endLine":77,"groupId":"15670","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/73/6bc649fda0d39ebbfe929301e5c6e1e7f375a3.src","preCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n                \n                allowing(mockIsisSessionFactory).doInSession(with(any(Runnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_TestAbstract.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"fce6a88b5ca2365e04b6d30abdf0e1bf5aa5fd3b","commitMessage":"@@@ISIS-2296: for each request cycle allow IsisSessionFactory to build an\nIsisSession stack of nested IsisSession tzo be kept track of in a thread\nlocal manner","date":"2020-03-02 16:22:04","modifiedFileCount":"104","status":"M","submitter":"Andi Huber"},{"authorTime":"2020-03-02 16:22:04","codes":[{"authorDate":"2020-03-02 18:01:43","commitOrder":3,"curCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n\n                allowing(mockIsisSessionFactory)\n                .runAuthenticated(with(new InitialisationSession()), with(any(ThrowingRunnable.class)));\n                \n                allowing(mockIsisSessionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n                \n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","date":"2020-03-02 18:01:43","endLine":127,"groupId":"7012","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"signInJustDelegatesToAuthenticateAndSavesState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/c1/758eac858aa1cef16e4a4fb725ade1621f773e.src","preCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n\n                allowing(mockIsisSessionFactory).runAuthenticated(new InitialisationSession(), with(any(ThrowingRunnable.class)));\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_SignIn.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-03-02 16:22:04","commitOrder":3,"curCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n                \n                allowing(mockIsisSessionFactory).runAuthenticated(new InitialisationSession(), with(any(ThrowingRunnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","date":"2020-03-02 16:22:04","endLine":77,"groupId":"15670","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/73/6bc649fda0d39ebbfe929301e5c6e1e7f375a3.src","preCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n                \n                allowing(mockIsisSessionFactory).runAuthenticated(new InitialisationSession(), with(any(ThrowingRunnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_TestAbstract.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"}],"commitId":"56e8e20703ead89a399003354c6af1053209c770","commitMessage":"@@@ISIS-2296: further fixing tests","date":"2020-03-02 18:01:43","modifiedFileCount":"2","status":"M","submitter":"Andi Huber"},{"authorTime":"2020-03-02 16:22:04","codes":[{"authorDate":"2020-03-17 08:06:35","commitOrder":4,"curCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n\n                allowing(mockIsisSessionFactory)\n                .runAuthenticated(with(new InitialisationSession()), with(any(ThrowingRunnable.class)));\n                \n                allowing(mockIsisSessionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n                \n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","date":"2020-03-17 08:06:57","endLine":128,"groupId":"7012","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"signInJustDelegatesToAuthenticateAndSavesState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/cf/7d78c4dd36ad1e99b3dd7599567d6f5fe99e19.src","preCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n\n                allowing(mockIsisSessionFactory)\n                .runAuthenticated(with(new InitialisationSession()), with(any(ThrowingRunnable.class)));\n                \n                allowing(mockIsisSessionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n                \n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_SignIn.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-03-02 16:22:04","commitOrder":4,"curCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n                \n                allowing(mockIsisSessionFactory).runAuthenticated(new InitialisationSession(), with(any(ThrowingRunnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","date":"2020-03-02 16:22:04","endLine":77,"groupId":"15670","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/73/6bc649fda0d39ebbfe929301e5c6e1e7f375a3.src","preCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n                \n                allowing(mockIsisSessionFactory).runAuthenticated(new InitialisationSession(), with(any(ThrowingRunnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_TestAbstract.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"}],"commitId":"7be2dfc145f0d5b319fc77b9584d1e1dc66e071e","commitMessage":"@@@ISIS-2278: fixes unit tests.  integ tests\n","date":"2020-03-17 08:06:57","modifiedFileCount":"16","status":"M","submitter":"danhaywood"},{"authorTime":"2020-03-21 23:54:50","codes":[{"authorDate":"2020-03-21 23:54:50","commitOrder":5,"curCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(IsisInteractionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n\n                allowing(mockIsisSessionFactory)\n                .runAuthenticated(with(new InitialisationSession()), with(any(ThrowingRunnable.class)));\n                \n                allowing(mockIsisSessionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n                \n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","date":"2020-03-21 23:54:50","endLine":128,"groupId":"7012","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"signInJustDelegatesToAuthenticateAndSavesState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/9f/42ae42a5825b8edd176552825f1470db71d7e1.src","preCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n\n                allowing(mockIsisSessionFactory)\n                .runAuthenticated(with(new InitialisationSession()), with(any(ThrowingRunnable.class)));\n                \n                allowing(mockIsisSessionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n                \n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_SignIn.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-03-21 23:54:50","commitOrder":5,"curCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(IsisInteractionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n                \n                allowing(mockIsisSessionFactory).runAuthenticated(new InitialisationSession(), with(any(ThrowingRunnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","date":"2020-03-21 23:54:50","endLine":77,"groupId":"15670","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/51/90e8b1d445ab79c441a0ab7f757321a660fdbd.src","preCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(IsisSessionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n                \n                allowing(mockIsisSessionFactory).runAuthenticated(new InitialisationSession(), with(any(ThrowingRunnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_TestAbstract.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"f83aa74bb3cf832dece3a7ea4ef09680aabef023","commitMessage":"@@@ISIS-2320: Rename IsisSessionFactory -> IsisInteractionFactory","date":"2020-03-21 23:54:50","modifiedFileCount":"43","status":"M","submitter":"Andi Huber"},{"authorTime":"2020-03-22 00:47:59","codes":[{"authorDate":"2020-03-22 00:47:59","commitOrder":6,"curCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(IsisInteractionFactory.class);\n                will(returnValue(mockIsisInteractionFactory));\n\n                allowing(mockIsisInteractionFactory)\n                .runAuthenticated(with(new InitialisationSession()), with(any(ThrowingRunnable.class)));\n                \n                allowing(mockIsisInteractionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n                \n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","date":"2020-03-22 00:47:59","endLine":128,"groupId":"7012","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"signInJustDelegatesToAuthenticateAndSavesState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/91/e1ff182e1bb224b32b348ffcd6aef61f56df6f.src","preCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(IsisInteractionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n\n                allowing(mockIsisSessionFactory)\n                .runAuthenticated(with(new InitialisationSession()), with(any(ThrowingRunnable.class)));\n                \n                allowing(mockIsisSessionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n                \n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_SignIn.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-03-22 00:47:59","commitOrder":6,"curCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(IsisInteractionFactory.class);\n                will(returnValue(mockIsisInteractionFactory));\n                \n                allowing(mockIsisInteractionFactory).runAuthenticated(new InitialisationSession(), with(any(ThrowingRunnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","date":"2020-03-22 00:47:59","endLine":77,"groupId":"15670","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/37/d51946909c23ff88b56835319d33a95a3acca6.src","preCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(IsisInteractionFactory.class);\n                will(returnValue(mockIsisSessionFactory));\n                \n                allowing(mockIsisSessionFactory).runAuthenticated(new InitialisationSession(), with(any(ThrowingRunnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_TestAbstract.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"12b0df04f9288a285e91975f0cb2695ed44711ce","commitMessage":"@@@ISIS-2320: batch replace mockIsisSessionFactory ->\nmockIsisInteractionFactory","date":"2020-03-22 00:47:59","modifiedFileCount":"7","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-04-14 23:26:49","codes":[{"authorDate":"2021-04-14 23:26:49","commitOrder":7,"curCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockIsisInteractionFactory));\n\n                allowing(mockIsisInteractionFactory)\n                .runAuthenticated(with(new SingleUserAuthentication()), with(any(ThrowingRunnable.class)));\n\n                allowing(mockIsisInteractionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","date":"2021-04-14 23:26:49","endLine":127,"groupId":"7012","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"signInJustDelegatesToAuthenticateAndSavesState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/73/e96dcc4c4f47437267d845582395d549f29179.src","preCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(IsisInteractionFactory.class);\n                will(returnValue(mockIsisInteractionFactory));\n\n                allowing(mockIsisInteractionFactory)\n                .runAuthenticated(with(new InitialisationSession()), with(any(ThrowingRunnable.class)));\n                \n                allowing(mockIsisInteractionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n                \n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_SignIn.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2021-04-14 23:26:49","commitOrder":7,"curCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockIsisInteractionFactory));\n                \n                allowing(mockIsisInteractionFactory).runAuthenticated(new SingleUserAuthentication(), with(any(ThrowingRunnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","date":"2021-04-14 23:26:49","endLine":77,"groupId":"15670","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/7e/7d55f123bc4ac7ed4827035fc607d4e22fce85.src","preCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(IsisInteractionFactory.class);\n                will(returnValue(mockIsisInteractionFactory));\n                \n                allowing(mockIsisInteractionFactory).runAuthenticated(new InitialisationSession(), with(any(ThrowingRunnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_TestAbstract.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"75633e1f8ce37deb39e3c2e2644357af15365d05","commitMessage":"@@@Merge branch 'master' of https://github.com/apache/isis into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-14 23:26:49","modifiedFileCount":"1999","status":"M","submitter":"J?rg Rade"},{"authorTime":"2021-04-14 23:26:49","codes":[{"authorDate":"2021-06-03 03:29:31","commitOrder":8,"curCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockInteractionFactory));\n\n                allowing(mockInteractionFactory)\n                .runAuthenticated(with(new SingleUserAuthentication()), with(any(ThrowingRunnable.class)));\n\n                allowing(mockInteractionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","date":"2021-06-03 03:29:31","endLine":127,"groupId":"4342","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"signInJustDelegatesToAuthenticateAndSavesState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/5c/2ee0f4ce666f5d79c26fd77c80c25ea7eb9321.src","preCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockIsisInteractionFactory));\n\n                allowing(mockIsisInteractionFactory)\n                .runAuthenticated(with(new SingleUserAuthentication()), with(any(ThrowingRunnable.class)));\n\n                allowing(mockIsisInteractionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n        context.checking(new Expectations() {\n            {\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_SignIn.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2021-04-14 23:26:49","commitOrder":8,"curCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockIsisInteractionFactory));\n                \n                allowing(mockIsisInteractionFactory).runAuthenticated(new SingleUserAuthentication(), with(any(ThrowingRunnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","date":"2021-04-14 23:26:49","endLine":77,"groupId":"15670","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/7e/7d55f123bc4ac7ed4827035fc607d4e22fce85.src","preCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockIsisInteractionFactory));\n                \n                allowing(mockIsisInteractionFactory).runAuthenticated(new SingleUserAuthentication(), with(any(ThrowingRunnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_TestAbstract.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"}],"commitId":"a90ca82f36f482cc8300650e81e03b964c713b94","commitMessage":"@@@ISIS-2557: let AuthenticationManager.authenticate(...) manage its own\ntransaction and interaction\n\n- let Spring handle the transactional context for this method (readonly)\n- when passing the auth-request to the authenticators wrap the call in\nan anonymous interaction\n- Spring's transaction aware proxies cannot include public methods with\nfinal modifier (found by experiment not by documentation)","date":"2021-06-03 03:29:31","modifiedFileCount":"8","status":"M","submitter":"andi-huber"},{"authorTime":"2021-06-10 12:27:06","codes":[{"authorDate":"2021-06-03 03:29:31","commitOrder":9,"curCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockInteractionFactory));\n\n                allowing(mockInteractionFactory)\n                .runAuthenticated(with(new SingleUserAuthentication()), with(any(ThrowingRunnable.class)));\n\n                allowing(mockInteractionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","date":"2021-06-03 03:29:31","endLine":127,"groupId":"4342","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"signInJustDelegatesToAuthenticateAndSavesState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/5c/2ee0f4ce666f5d79c26fd77c80c25ea7eb9321.src","preCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockInteractionFactory));\n\n                allowing(mockInteractionFactory)\n                .runAuthenticated(with(new SingleUserAuthentication()), with(any(ThrowingRunnable.class)));\n\n                allowing(mockInteractionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_SignIn.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"},{"authorDate":"2021-06-10 12:27:06","commitOrder":9,"curCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockInteractionFactory));\n\n                allowing(mockInteractionFactory).runAuthenticated(new SingleUserAuthentication(), with(any(ThrowingRunnable.class)));\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","date":"2021-06-10 12:27:06","endLine":77,"groupId":"15670","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/bc/51387ddf20fb1e3e48e0b4ee319997841402ce.src","preCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n                \n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n                \n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockIsisInteractionFactory));\n                \n                allowing(mockIsisInteractionFactory).runAuthenticated(new SingleUserAuthentication(), with(any(ThrowingRunnable.class)));\n                \r\n                \n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_TestAbstract.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"62820feca3045e678fcee07e7f531f4f56c6f26a","commitMessage":"@@@Merge pull request #590 from apache/ISIS-2727\n\nIsis 2727 : factors out InteractionService as a low-level service available in the applib.","date":"2021-06-10 12:27:06","modifiedFileCount":"86","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-06-10 18:42:21","codes":[{"authorDate":"2021-06-10 18:42:21","commitOrder":10,"curCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockInteractionFactory));\n\n                allowing(mockInteractionFactory)\n                .run(with(InteractionContextFactory.testing()), with(any(ThrowingRunnable.class)));\n\n                allowing(mockInteractionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n                will(returnValue(InteractionContextFactory.testing()));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","date":"2021-06-10 18:42:21","endLine":129,"groupId":"4342","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"signInJustDelegatesToAuthenticateAndSavesState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/47/0331f65842add1d3971f3e5e32ef232e3d1065.src","preCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockInteractionFactory));\n\n                allowing(mockInteractionFactory)\n                .runAuthenticated(with(new SingleUserAuthentication()), with(any(ThrowingRunnable.class)));\n\n                allowing(mockInteractionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_SignIn.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2021-06-10 18:42:21","commitOrder":10,"curCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockInteractionFactory));\n\n                allowing(mockInteractionFactory).run(\n                        InteractionContextFactory.testing(),\n                        with(any(ThrowingRunnable.class)));\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","date":"2021-06-10 18:42:21","endLine":79,"groupId":"0","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/23/9da8b7c63ac88ef67e1f0f33e4d16793ec301b.src","preCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockInteractionFactory));\n\n                allowing(mockInteractionFactory).runAuthenticated(new SingleUserAuthentication(), with(any(ThrowingRunnable.class)));\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_TestAbstract.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"e93e59ddbffbc6337f62e90f1bdc17389cc4d24c","commitMessage":"@@@ISIS-2727: remove Authentication from 'security'\n\ninstead have UserMemento hold the authentication state\n\nalso adds some todos","date":"2021-06-10 18:42:21","modifiedFileCount":"63","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-06-10 20:10:57","codes":[{"authorDate":"2021-06-10 20:10:57","commitOrder":11,"curCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(InteractionService.class);\n                will(returnValue(mockInteractionService));\n\n                allowing(mockInteractionService)\n                .run(with(InteractionContextFactory.testing()), with(any(ThrowingRunnable.class)));\n\n                allowing(mockInteractionService)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n                will(returnValue(InteractionContextFactory.testing()));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","date":"2021-06-10 20:10:57","endLine":129,"groupId":"10559","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"signInJustDelegatesToAuthenticateAndSavesState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/f0/50eca527500448ddb64a454032bd251b6cc2f1.src","preCode":"    public void signInJustDelegatesToAuthenticateAndSavesState() {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).select(SessionLoggingService.class);\n                will(returnValue(Can.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockInteractionFactory));\n\n                allowing(mockInteractionFactory)\n                .run(with(InteractionContextFactory.testing()), with(any(ThrowingRunnable.class)));\n\n                allowing(mockInteractionFactory)\n                .runAnonymous(with(any(ThrowingRunnable.class)));\n\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n\n                oneOf(mockAuthenticator).canAuthenticate(AuthenticationRequestPassword.class);\n                will(returnValue(true));\n\n                oneOf(mockAuthenticator).authenticate(with(any(AuthenticationRequest.class)), with(any(String.class)));\n                will(returnValue(InteractionContextFactory.testing()));\n            }\n        });\n\n        webSession = new AuthenticatedWebSessionForIsis(mockRequest) {\n            private static final long serialVersionUID = 1L;\n\n            {\n                commonContext = mockCommonContext;\n            }\n\n            @Override\n            protected AuthenticationManager getAuthenticationManager() {\n                return authMgr;\n            }\n        };\n\n\n        \r\n        webSession.signIn(\"john\", \"secret\");\n\n        \r\n        assertThat(webSession.isSignedIn(), is(true));\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_SignIn.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2021-06-10 20:10:57","commitOrder":11,"curCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(InteractionService.class);\n                will(returnValue(mockInteractionService));\n\n                allowing(mockInteractionService).run(\n                        InteractionContextFactory.testing(),\n                        with(any(ThrowingRunnable.class)));\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","date":"2021-06-10 20:10:57","endLine":79,"groupId":"10559","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/d6/051e8a7f9727e36f67913bff83d9ffd9cb11e8.src","preCode":"    protected void setUp() throws Exception {\n        context.checking(new Expectations() {\n            {\n                allowing(mockCommonContext).getServiceRegistry();\n                will(returnValue(mockServiceRegistry));\n\n                allowing(mockServiceRegistry).lookupService(SessionLoggingService.class);\n                will(returnValue(Optional.empty()));\n\n                allowing(mockCommonContext).lookupServiceElseFail(InteractionFactory.class);\n                will(returnValue(mockInteractionFactory));\n\n                allowing(mockInteractionFactory).run(\n                        InteractionContextFactory.testing(),\n                        with(any(ThrowingRunnable.class)));\n                \r\n\n                \r\n                allowing(mockRequest).getLocale();\n                will(returnValue(Locale.getDefault()));\n\n                \r\n                ignoring(mockRequest);\n            }\n        });\n\n    }\n","realPath":"viewers/wicket/viewer/src/test/java/org/apache/isis/viewer/wicket/viewer/integration/AuthenticatedWebSessionForIsis_TestAbstract.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"fe9d58ed13592b52377d80d92d91eed1102c40bd","commitMessage":"@@@ISIS-2727: remove AnonymousInteractionFactory\n\n(merge up into InteractionService)\n\nremove InteractionFactory.  as is now identical to InteractionService\n\nrename InteractionFactoryDefault->\nInteractionServiceDefault\n\nalso cleanup InteractionContextFactory","date":"2021-06-10 20:10:57","modifiedFileCount":"64","status":"M","submitter":"Andi Huber"}]
