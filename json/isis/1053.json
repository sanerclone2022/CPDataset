[{"authorTime":"2021-07-23 23:25:16","codes":[{"authorDate":"2021-07-23 23:25:16","commitOrder":1,"curCode":"    private void setupBookForJpa() {\n\n        transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n\n            val em = jpaSupport.getEntityManagerElseFail(JpaBook.class);\n\n            \r\n            fixtureScripts.runPersona(JpaTestDomainPersona.PurgeAll);\n\n            \r\n\n            val products = new HashSet<JpaProduct>();\n\n            products.add(JpaBook.of(\n                    \"Sample Book\", \"A sample book for testing.\", 99.,\n                    \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n            val inventory = JpaInventory.of(\"Sample Inventory\", products);\n            em.persist(inventory);\n\n            inventory.getProducts().forEach(product->{\n                em.persist(product);\n\n                _Probe.errOut(\"PROD ID: %s\", product.getId());\n\n            });\n\n            \r\n\n            em.flush();\n\n        });\n    }\n","date":"2021-07-23 23:25:16","endLine":321,"groupId":"13893","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupBookForJpa","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/a5/405219c2f8a28a06fca357696cb8913078426c.src","preCode":"    private void setupBookForJpa() {\n\n        transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n\n            val em = jpaSupport.getEntityManagerElseFail(JpaBook.class);\n\n            \r\n            fixtureScripts.runPersona(JpaTestDomainPersona.PurgeAll);\n\n            \r\n\n            val products = new HashSet<JpaProduct>();\n\n            products.add(JpaBook.of(\n                    \"Sample Book\", \"A sample book for testing.\", 99.,\n                    \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n            val inventory = JpaInventory.of(\"Sample Inventory\", products);\n            em.persist(inventory);\n\n            inventory.getProducts().forEach(product->{\n                em.persist(product);\n\n                _Probe.errOut(\"PROD ID: %s\", product.getId());\n\n            });\n\n            \r\n\n            em.flush();\n\n        });\n    }\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/publishing/PublishingTestFactoryJpa.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"B"},{"authorDate":"2021-07-23 23:25:16","commitOrder":1,"curCode":"    private void setupBookForJdo() {\n\n        transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n            val pm = pmf.getPersistenceManager();\n\n            \r\n            fixtureScripts.runPersona(JdoTestDomainPersona.PurgeAll);\n\n            \r\n\n            val products = new HashSet<JdoProduct>();\n\n            products.add(JdoBook.of(\n                    \"Sample Book\", \"A sample book for testing.\", 99.,\n                    \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n            val inventory = JdoInventory.of(\"Sample Inventory\", products);\n            pm.makePersistent(inventory);\n\n            inventory.getProducts().forEach(product->{\n                val prod = pm.makePersistent(product);\n\n                _Probe.errOut(\"PROD ID: %s\", JDOHelper.getObjectId(prod));\n\n            });\n\n            \r\n\n            pm.flush();\n\n        });\n    }\n","date":"2021-07-23 23:25:16","endLine":323,"groupId":"186","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setupBookForJdo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/77/dab9061d7bf4c79364e3978e5c1ef814d099f3.src","preCode":"    private void setupBookForJdo() {\n\n        transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n            val pm = pmf.getPersistenceManager();\n\n            \r\n            fixtureScripts.runPersona(JdoTestDomainPersona.PurgeAll);\n\n            \r\n\n            val products = new HashSet<JdoProduct>();\n\n            products.add(JdoBook.of(\n                    \"Sample Book\", \"A sample book for testing.\", 99.,\n                    \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n            val inventory = JdoInventory.of(\"Sample Inventory\", products);\n            pm.makePersistent(inventory);\n\n            inventory.getProducts().forEach(product->{\n                val prod = pm.makePersistent(product);\n\n                _Probe.errOut(\"PROD ID: %s\", JDOHelper.getObjectId(prod));\n\n            });\n\n            \r\n\n            pm.flush();\n\n        });\n    }\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/publishing/PublishingTestFactoryJdo.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"B"}],"commitId":"9d274b298f6f14a63524851f7d2a609e44ab00db","commitMessage":"@@@ISIS-2573: publishing tests: enhanced step tracing\n\nidea is to record all essential execution steps/events.  so that at the\nend of the tests.  we can verify that the expected steps had taken place","date":"2021-07-23 23:25:16","modifiedFileCount":"9","status":"B","submitter":"Andi Huber"},{"authorTime":"2021-07-24 04:04:33","codes":[{"authorDate":"2021-07-24 04:04:33","commitOrder":2,"curCode":"    private void setupBookForJpa() {\n\n        val em = jpaSupport.getEntityManagerElseFail(JpaBook.class);\n\n        \r\n        fixtureScripts.runPersona(JpaTestDomainPersona.PurgeAll);\n\n        \r\n\n        val products = new HashSet<JpaProduct>();\n\n        products.add(JpaBook.of(\n                \"Sample Book\", \"A sample book for testing.\", 99.,\n                \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n        val inventory = JpaInventory.of(\"Sample Inventory\", products);\n        em.persist(inventory);\n\n        inventory.getProducts().forEach(product->{\n            em.persist(product);\n\n            _Probe.errOut(\"PROD ID: %s\", product.getId());\n\n        });\n\n        \r\n\n        em.flush();\n    }\n","date":"2021-07-24 04:04:33","endLine":278,"groupId":"13893","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupBookForJpa","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/e3/06d8b41560c0003d25fc7395b7376aef30d0ce.src","preCode":"    private void setupBookForJpa() {\n\n        transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n\n            val em = jpaSupport.getEntityManagerElseFail(JpaBook.class);\n\n            \r\n            fixtureScripts.runPersona(JpaTestDomainPersona.PurgeAll);\n\n            \r\n\n            val products = new HashSet<JpaProduct>();\n\n            products.add(JpaBook.of(\n                    \"Sample Book\", \"A sample book for testing.\", 99.,\n                    \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n            val inventory = JpaInventory.of(\"Sample Inventory\", products);\n            em.persist(inventory);\n\n            inventory.getProducts().forEach(product->{\n                em.persist(product);\n\n                _Probe.errOut(\"PROD ID: %s\", product.getId());\n\n            });\n\n            \r\n\n            em.flush();\n\n        });\n    }\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/publishing/PublishingTestFactoryJpa.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"},{"authorDate":"2021-07-24 04:04:33","commitOrder":2,"curCode":"    private void setupBookForJdo() {\n\n        val pm = pmf.getPersistenceManager();\n\n        \r\n        fixtureScripts.runPersona(JdoTestDomainPersona.PurgeAll);\n\n        \r\n\n        val products = new HashSet<JdoProduct>();\n\n        products.add(JdoBook.of(\n                \"Sample Book\", \"A sample book for testing.\", 99.,\n                \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n        val inventory = JdoInventory.of(\"Sample Inventory\", products);\n        pm.makePersistent(inventory);\n\n        inventory.getProducts().forEach(product->{\n            val prod = pm.makePersistent(product);\n\n            _Probe.errOut(\"PROD ID: %s\", JDOHelper.getObjectId(prod));\n\n        });\n\n        \r\n\n        pm.flush();\n\n    }\n","date":"2021-07-24 04:04:33","endLine":285,"groupId":"186","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setupBookForJdo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/df/2f20de5808bd2956f0a13713d6af66c8e873f5.src","preCode":"    private void setupBookForJdo() {\n\n        transactionService.runTransactional(Propagation.REQUIRES_NEW, ()->{\n            val pm = pmf.getPersistenceManager();\n\n            \r\n            fixtureScripts.runPersona(JdoTestDomainPersona.PurgeAll);\n\n            \r\n\n            val products = new HashSet<JdoProduct>();\n\n            products.add(JdoBook.of(\n                    \"Sample Book\", \"A sample book for testing.\", 99.,\n                    \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n            val inventory = JdoInventory.of(\"Sample Inventory\", products);\n            pm.makePersistent(inventory);\n\n            inventory.getProducts().forEach(product->{\n                val prod = pm.makePersistent(product);\n\n                _Probe.errOut(\"PROD ID: %s\", JDOHelper.getObjectId(prod));\n\n            });\n\n            \r\n\n            pm.flush();\n\n        });\n    }\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/publishing/PublishingTestFactoryJdo.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"}],"commitId":"7e730cbf8ddc2fd29f687facf50f11a099899325","commitMessage":"@@@ISIS-2573: remove TransactionService#nextTransaction()\n\nalso fixes most publishing tests","date":"2021-07-24 04:04:33","modifiedFileCount":"6","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-07-31 04:01:42","codes":[{"authorDate":"2021-07-31 04:01:42","commitOrder":3,"curCode":"    private void setupBookForJpa() {\n\n        val em = jpaSupport.getEntityManagerElseFail(JpaBook.class);\n\n        \r\n        fixtureScripts.runPersona(JpaTestDomainPersona.PurgeAll);\n\n        \r\n\n        val products = new HashSet<JpaProduct>();\n\n        products.add(BookDto.sample().toJpaBook());\n\n        val inventory = JpaInventory.of(\"Sample Inventory\", products);\n        em.persist(inventory);\n\n        inventory.getProducts().forEach(product->{\n            em.persist(product);\n\n            _Probe.errOut(\"PROD ID: %s\", product.getId());\n\n        });\n\n        \r\n\n        em.flush();\n    }\n","date":"2021-07-31 04:01:42","endLine":416,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupBookForJpa","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/b2/33d79f687c81c432d345af50e0f48e73b948b1.src","preCode":"    private void setupBookForJpa() {\n\n        val em = jpaSupport.getEntityManagerElseFail(JpaBook.class);\n\n        \r\n        fixtureScripts.runPersona(JpaTestDomainPersona.PurgeAll);\n\n        \r\n\n        val products = new HashSet<JpaProduct>();\n\n        products.add(JpaBook.of(\n                \"Sample Book\", \"A sample book for testing.\", 99.,\n                \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n        val inventory = JpaInventory.of(\"Sample Inventory\", products);\n        em.persist(inventory);\n\n        inventory.getProducts().forEach(product->{\n            em.persist(product);\n\n            _Probe.errOut(\"PROD ID: %s\", product.getId());\n\n        });\n\n        \r\n\n        em.flush();\n    }\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/publishing/PublishingTestFactoryJpa.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"M"},{"authorDate":"2021-07-31 04:01:42","commitOrder":3,"curCode":"    private void setupBookForJdo() {\n\n        val pm = pmf.getPersistenceManager();\n\n        \r\n        fixtureScripts.runPersona(JdoTestDomainPersona.PurgeAll);\n\n        \r\n\n        val products = new HashSet<JdoProduct>();\n\n        products.add(BookDto.sample().toJdoBook());\n\n        val inventory = JdoInventory.of(\"Sample Inventory\", products);\n        pm.makePersistent(inventory);\n\n        inventory.getProducts().forEach(product->{\n            val prod = pm.makePersistent(product);\n\n            _Probe.errOut(\"PROD ID: %s\", JDOHelper.getObjectId(prod));\n\n        });\n\n        \r\n\n        pm.flush();\n\n    }\n","date":"2021-07-31 04:01:42","endLine":425,"groupId":"186","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setupBookForJdo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/dc/b540cdc4ec0c5607623944b491efaca815e210.src","preCode":"    private void setupBookForJdo() {\n\n        val pm = pmf.getPersistenceManager();\n\n        \r\n        fixtureScripts.runPersona(JdoTestDomainPersona.PurgeAll);\n\n        \r\n\n        val products = new HashSet<JdoProduct>();\n\n        products.add(JdoBook.of(\n                \"Sample Book\", \"A sample book for testing.\", 99.,\n                \"Sample Author\", \"Sample ISBN\", \"Sample Publisher\"));\n\n        val inventory = JdoInventory.of(\"Sample Inventory\", products);\n        pm.makePersistent(inventory);\n\n        inventory.getProducts().forEach(product->{\n            val prod = pm.makePersistent(product);\n\n            _Probe.errOut(\"PROD ID: %s\", JDOHelper.getObjectId(prod));\n\n        });\n\n        \r\n\n        pm.flush();\n\n    }\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/publishing/PublishingTestFactoryJdo.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":398,"status":"M"}],"commitId":"ea748af95084e90ac63378a30217e5f728016153","commitMessage":"@@@ISIS-2794: fixes LoadedLifecycleEvents - also adding tests","date":"2021-07-31 04:01:42","modifiedFileCount":"14","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-07-31 04:17:20","codes":[{"authorDate":"2021-07-31 04:17:20","commitOrder":4,"curCode":"    private void setupBookForJpa() {\n\n        val em = jpaSupport.getEntityManagerElseFail(JpaBook.class);\n\n        \r\n        fixtureScripts.runPersona(JpaTestDomainPersona.PurgeAll);\n\n        \r\n\n        val products = new HashSet<JpaProduct>();\n\n        \r\n        val detachedNewBook = factoryService.detachedEntity(BookDto.sample().toJpaBook());\n\n        products.add(detachedNewBook);\n\n        val inventory = JpaInventory.of(\"Sample Inventory\", products);\n        em.persist(inventory);\n\n        inventory.getProducts().forEach(product->{\n            em.persist(product);\n\n            _Probe.errOut(\"PROD ID: %s\", product.getId());\n\n        });\n\n        \r\n\n        em.flush();\n    }\n","date":"2021-07-31 04:17:20","endLine":419,"groupId":"17925","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setupBookForJpa","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/5b/cd078c2becc2eed27c1ef09563309ee883bcbc.src","preCode":"    private void setupBookForJpa() {\n\n        val em = jpaSupport.getEntityManagerElseFail(JpaBook.class);\n\n        \r\n        fixtureScripts.runPersona(JpaTestDomainPersona.PurgeAll);\n\n        \r\n\n        val products = new HashSet<JpaProduct>();\n\n        products.add(BookDto.sample().toJpaBook());\n\n        val inventory = JpaInventory.of(\"Sample Inventory\", products);\n        em.persist(inventory);\n\n        inventory.getProducts().forEach(product->{\n            em.persist(product);\n\n            _Probe.errOut(\"PROD ID: %s\", product.getId());\n\n        });\n\n        \r\n\n        em.flush();\n    }\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/publishing/PublishingTestFactoryJpa.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"M"},{"authorDate":"2021-07-31 04:17:20","commitOrder":4,"curCode":"    private void setupBookForJdo() {\n\n        val pm = pmf.getPersistenceManager();\n\n        \r\n        fixtureScripts.runPersona(JdoTestDomainPersona.PurgeAll);\n\n        \r\n\n        val products = new HashSet<JdoProduct>();\n\n        \r\n        val detachedNewBook = factoryService.detachedEntity(BookDto.sample().toJdoBook());\n\n        products.add(detachedNewBook);\n\n        val inventory = JdoInventory.of(\"Sample Inventory\", products);\n        pm.makePersistent(inventory);\n\n        inventory.getProducts().forEach(product->{\n            val prod = pm.makePersistent(product);\n\n            _Probe.errOut(\"PROD ID: %s\", JDOHelper.getObjectId(prod));\n\n        });\n\n        \r\n\n        pm.flush();\n\n    }\n","date":"2021-07-31 04:17:20","endLine":430,"groupId":"10161","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setupBookForJdo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/f4/9afde85dd58a9529eeaa45d2f50196544c87c0.src","preCode":"    private void setupBookForJdo() {\n\n        val pm = pmf.getPersistenceManager();\n\n        \r\n        fixtureScripts.runPersona(JdoTestDomainPersona.PurgeAll);\n\n        \r\n\n        val products = new HashSet<JdoProduct>();\n\n        products.add(BookDto.sample().toJdoBook());\n\n        val inventory = JdoInventory.of(\"Sample Inventory\", products);\n        pm.makePersistent(inventory);\n\n        inventory.getProducts().forEach(product->{\n            val prod = pm.makePersistent(product);\n\n            _Probe.errOut(\"PROD ID: %s\", JDOHelper.getObjectId(prod));\n\n        });\n\n        \r\n\n        pm.flush();\n\n    }\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/publishing/PublishingTestFactoryJdo.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"}],"commitId":"b5272ff03352c4987b2985c854051e9db71c1d89","commitMessage":"@@@ISIS-2794: add tests for CreatedLifecycleEvent","date":"2021-07-31 04:17:20","modifiedFileCount":"3","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-07-31 15:25:36","codes":[{"authorDate":"2021-07-31 15:25:36","commitOrder":5,"curCode":"    private void setupBookForJpa() {\n\n        val em = jpaSupport.getEntityManagerElseFail(JpaBook.class);\n\n        \r\n        fixtureScripts.runPersona(JpaTestDomainPersona.PurgeAll);\n\n        \r\n\n        val products = new HashSet<JpaProduct>();\n\n        val detachedNewBook = BookDto.sample().toJpaBook();\n\n        products.add(detachedNewBook);\n\n        val inventory = JpaInventory.of(\"Sample Inventory\", products);\n        em.persist(inventory);\n\n        inventory.getProducts().forEach(product->{\n            em.persist(product);\n\n            _Probe.errOut(\"PROD ID: %s\", product.getId());\n\n        });\n\n        \r\n\n        em.flush();\n    }\n","date":"2021-07-31 15:25:36","endLine":423,"groupId":"1053","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setupBookForJpa","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/42/1a3f33514c232b3c6db382d27d8650c3e53c16.src","preCode":"    private void setupBookForJpa() {\n\n        val em = jpaSupport.getEntityManagerElseFail(JpaBook.class);\n\n        \r\n        fixtureScripts.runPersona(JpaTestDomainPersona.PurgeAll);\n\n        \r\n\n        val products = new HashSet<JpaProduct>();\n\n        \r\n        val detachedNewBook = factoryService.detachedEntity(BookDto.sample().toJpaBook());\n\n        products.add(detachedNewBook);\n\n        val inventory = JpaInventory.of(\"Sample Inventory\", products);\n        em.persist(inventory);\n\n        inventory.getProducts().forEach(product->{\n            em.persist(product);\n\n            _Probe.errOut(\"PROD ID: %s\", product.getId());\n\n        });\n\n        \r\n\n        em.flush();\n    }\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/publishing/PublishingTestFactoryJpa.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"},{"authorDate":"2021-07-31 15:25:36","commitOrder":5,"curCode":"    private void setupBookForJdo() {\n\n        val pm = pmf.getPersistenceManager();\n\n        \r\n        fixtureScripts.runPersona(JdoTestDomainPersona.PurgeAll);\n\n        \r\n\n        val products = new HashSet<JdoProduct>();\n\n        val detachedNewBook = BookDto.sample().toJdoBook();\n\n        products.add(detachedNewBook);\n\n        val inventory = JdoInventory.of(\"Sample Inventory\", products);\n        pm.makePersistent(inventory);\n\n        inventory.getProducts().forEach(product->{\n            val prod = pm.makePersistent(product);\n\n            _Probe.errOut(\"PROD ID: %s\", JDOHelper.getObjectId(prod));\n\n        });\n\n        \r\n\n        pm.flush();\n\n    }\n","date":"2021-07-31 15:25:36","endLine":426,"groupId":"1053","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setupBookForJdo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/a0/42cb68c65c8526df8648da7efc4cd977688c10.src","preCode":"    private void setupBookForJdo() {\n\n        val pm = pmf.getPersistenceManager();\n\n        \r\n        fixtureScripts.runPersona(JdoTestDomainPersona.PurgeAll);\n\n        \r\n\n        val products = new HashSet<JdoProduct>();\n\n        \r\n        val detachedNewBook = factoryService.detachedEntity(BookDto.sample().toJdoBook());\n\n        products.add(detachedNewBook);\n\n        val inventory = JdoInventory.of(\"Sample Inventory\", products);\n        pm.makePersistent(inventory);\n\n        inventory.getProducts().forEach(product->{\n            val prod = pm.makePersistent(product);\n\n            _Probe.errOut(\"PROD ID: %s\", JDOHelper.getObjectId(prod));\n\n        });\n\n        \r\n\n        pm.flush();\n\n    }\n","realPath":"regressiontests/stable/src/main/java/org/apache/isis/testdomain/publishing/PublishingTestFactoryJdo.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"M"}],"commitId":"e7d7c3d936ef537ebae412679c2008797c6161b2","commitMessage":"@@@ISIS-2794: rework tests to also test the tx rollback case","date":"2021-07-31 15:25:36","modifiedFileCount":"6","status":"M","submitter":"Andi Huber"}]
