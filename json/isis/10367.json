[{"authorTime":"2021-04-14 23:26:49","codes":[{"authorDate":"2021-04-14 23:26:49","commitOrder":1,"curCode":"\tpublic void testTransactionRollback() {\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\t\tgiven(tx.isActive()).willReturn(true);\n\n\t\tPlatformTransactionManager tm = new JdoTransactionManager(pmf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback<Object>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true);\n\t\t\t\t\tthrow new RuntimeException(\"application exception\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown RuntimeException\");\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\t\r\n\t\t}\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\tverify(pm).close();\n\t\tverify(tx).begin();\n\t\tverify(tx).rollback();\n\t}\n","date":"2021-04-14 23:26:49","endLine":184,"groupId":"4808","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/89/56d6d10401f84d79ae1c4d8e197572319e76d5.src","preCode":"\tpublic void testTransactionRollback() {\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\t\tgiven(tx.isActive()).willReturn(true);\n\n\t\tPlatformTransactionManager tm = new JdoTransactionManager(pmf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback<Object>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true);\n\t\t\t\t\tthrow new RuntimeException(\"application exception\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown RuntimeException\");\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\t\r\n\t\t}\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\tverify(pm).close();\n\t\tverify(tx).begin();\n\t\tverify(tx).rollback();\n\t}\n","realPath":"persistence/jdo/spring/src/test/java/org/apache/isis/persistence/jdo/spring/test/integration/JdoTransactionManagerTests.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"B"},{"authorDate":"2021-04-14 23:26:49","commitOrder":1,"curCode":"\tpublic void testTransactionRollbackWithAlreadyRolledBack() {\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\n\t\tPlatformTransactionManager tm = new JdoTransactionManager(pmf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback<Object>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true);\n\t\t\t\t\tthrow new RuntimeException(\"application exception\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown RuntimeException\");\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\t\r\n\t\t}\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\tverify(pm).close();\n\t\tverify(tx).begin();\n\t}\n","date":"2021-04-14 23:26:49","endLine":216,"groupId":"4808","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransactionRollbackWithAlreadyRolledBack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/89/56d6d10401f84d79ae1c4d8e197572319e76d5.src","preCode":"\tpublic void testTransactionRollbackWithAlreadyRolledBack() {\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\n\t\tPlatformTransactionManager tm = new JdoTransactionManager(pmf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback<Object>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true);\n\t\t\t\t\tthrow new RuntimeException(\"application exception\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown RuntimeException\");\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\t\r\n\t\t}\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\tverify(pm).close();\n\t\tverify(tx).begin();\n\t}\n","realPath":"persistence/jdo/spring/src/test/java/org/apache/isis/persistence/jdo/spring/test/integration/JdoTransactionManagerTests.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"B"}],"commitId":"75633e1f8ce37deb39e3c2e2644357af15365d05","commitMessage":"@@@Merge branch 'master' of https://github.com/apache/isis into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-14 23:26:49","modifiedFileCount":"1999","status":"B","submitter":"J?rg Rade"},{"authorTime":"2021-08-19 14:53:32","codes":[{"authorDate":"2021-08-19 14:53:32","commitOrder":2,"curCode":"\tpublic void testTransactionRollback() {\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\t\tgiven(tx.isActive()).willReturn(true);\n\n\t\tPlatformTransactionManager tm = new JdoTransactionManager(pmf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback<Object>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(final TransactionStatus status) {\n\t\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true);\n\t\t\t\t\tthrow new RuntimeException(\"application exception\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown RuntimeException\");\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\t\r\n\t\t}\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\tverify(pm).close();\n\t\tverify(tx).begin();\n\t\tverify(tx).rollback();\n\t}\n","date":"2021-08-19 14:53:32","endLine":185,"groupId":"10367","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testTransactionRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/b9/096e403d26b11002576163d6bab6b11390671a.src","preCode":"\tpublic void testTransactionRollback() {\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\t\tgiven(tx.isActive()).willReturn(true);\n\n\t\tPlatformTransactionManager tm = new JdoTransactionManager(pmf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback<Object>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true);\n\t\t\t\t\tthrow new RuntimeException(\"application exception\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown RuntimeException\");\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\t\r\n\t\t}\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\tverify(pm).close();\n\t\tverify(tx).begin();\n\t\tverify(tx).rollback();\n\t}\n","realPath":"persistence/jdo/spring/src/test/java/org/apache/isis/persistence/jdo/spring/test/integration/JdoTransactionManagerTests.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2021-08-19 14:53:32","commitOrder":2,"curCode":"\tpublic void testTransactionRollbackWithAlreadyRolledBack() {\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\n\t\tPlatformTransactionManager tm = new JdoTransactionManager(pmf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback<Object>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(final TransactionStatus status) {\n\t\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true);\n\t\t\t\t\tthrow new RuntimeException(\"application exception\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown RuntimeException\");\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\t\r\n\t\t}\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\tverify(pm).close();\n\t\tverify(tx).begin();\n\t}\n","date":"2021-08-19 14:53:32","endLine":217,"groupId":"10367","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testTransactionRollbackWithAlreadyRolledBack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/b9/096e403d26b11002576163d6bab6b11390671a.src","preCode":"\tpublic void testTransactionRollbackWithAlreadyRolledBack() {\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\n\t\tPlatformTransactionManager tm = new JdoTransactionManager(pmf);\n\t\tTransactionTemplate tt = new TransactionTemplate(tm);\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\ttry {\n\t\t\ttt.execute(new TransactionCallback<Object>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true);\n\t\t\t\t\tthrow new RuntimeException(\"application exception\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tfail(\"Should have thrown RuntimeException\");\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\t\r\n\t\t}\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.isSynchronizationActive(), \"JTA synchronizations not active\");\n\n\t\tverify(pm).close();\n\t\tverify(tx).begin();\n\t}\n","realPath":"persistence/jdo/spring/src/test/java/org/apache/isis/persistence/jdo/spring/test/integration/JdoTransactionManagerTests.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"751cba2033a31d7dbbf22831a4925564e86235bd","commitMessage":"@@@ISIS-2845: Reinstate automatic injection into entities when resolved","date":"2021-08-19 14:53:32","modifiedFileCount":"6","status":"M","submitter":"Andi Huber"}]
