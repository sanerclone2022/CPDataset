[{"authorTime":"2021-04-21 23:42:54","codes":[{"authorDate":"2021-04-21 23:42:54","commitOrder":1,"curCode":"    void typeLevelAnnotations_shouldBeHonored_onMixins() {\n\n        val holderSpec = specificationLoader.loadSpecification(ProperMemberSupport.class,\n                        IntrospectionState.FULLY_INTROSPECTED);\n\n        val mx_action = holderSpec.getActionElseFail(\"action\"); \r\n        assertNotNull(mx_action);\n        assertEquals(\"action\", mx_action.getId());\n        assertEquals(\"foo\", mx_action.getName());\n        assertEquals(\"bar\", mx_action.getDescription());\n        assertHasPublishedActionFacet(mx_action);\n\n        val mx_action2 = holderSpec.getActionElseFail(\"action2\"); \r\n        assertNotNull(mx_action2);\n        assertHasPublishedActionFacet(mx_action2);\n\n        val mx_property = holderSpec.getAssociationElseFail(\"property\"); \r\n        assertNotNull(mx_property);\n        assertEquals(\"property\", mx_property.getId());\n        assertEquals(\"foo\", mx_property.getName());\n        assertEquals(\"bar\", mx_property.getDescription());\n\n        val mx_property2 = holderSpec.getAssociationElseFail(\"property2\"); \r\n        assertNotNull(mx_property2);\n        assertEquals(\"property2\", mx_property2.getId());\n        assertEquals(\"foo\", mx_property2.getName());\n        assertEquals(\"bar\", mx_property2.getDescription());\n\n        val mx_collection = holderSpec.getAssociationElseFail(\"collection\"); \r\n        assertNotNull(mx_collection);\n        assertEquals(\"collection\", mx_collection.getId());\n        assertEquals(\"foo\", mx_collection.getName());\n        assertEquals(\"bar\", mx_collection.getDescription());\n\n        val mx_collection2 = holderSpec.getAssociationElseFail(\"collection2\"); \r\n        assertNotNull(mx_collection2);\n        assertEquals(\"collection2\", mx_collection2.getId());\n        assertEquals(\"foo\", mx_collection2.getName());\n        assertEquals(\"bar\", mx_collection2.getDescription());\n\n    }\n","date":"2021-04-21 23:42:54","endLine":169,"groupId":"14369","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"typeLevelAnnotations_shouldBeHonored_onMixins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/69/6a93c658e698eee7593d338ea64ec7a6fba419.src","preCode":"    void typeLevelAnnotations_shouldBeHonored_onMixins() {\n\n        val holderSpec = specificationLoader.loadSpecification(ProperMemberSupport.class,\n                        IntrospectionState.FULLY_INTROSPECTED);\n\n        val mx_action = holderSpec.getActionElseFail(\"action\"); \r\n        assertNotNull(mx_action);\n        assertEquals(\"action\", mx_action.getId());\n        assertEquals(\"foo\", mx_action.getName());\n        assertEquals(\"bar\", mx_action.getDescription());\n        assertHasPublishedActionFacet(mx_action);\n\n        val mx_action2 = holderSpec.getActionElseFail(\"action2\"); \r\n        assertNotNull(mx_action2);\n        assertHasPublishedActionFacet(mx_action2);\n\n        val mx_property = holderSpec.getAssociationElseFail(\"property\"); \r\n        assertNotNull(mx_property);\n        assertEquals(\"property\", mx_property.getId());\n        assertEquals(\"foo\", mx_property.getName());\n        assertEquals(\"bar\", mx_property.getDescription());\n\n        val mx_property2 = holderSpec.getAssociationElseFail(\"property2\"); \r\n        assertNotNull(mx_property2);\n        assertEquals(\"property2\", mx_property2.getId());\n        assertEquals(\"foo\", mx_property2.getName());\n        assertEquals(\"bar\", mx_property2.getDescription());\n\n        val mx_collection = holderSpec.getAssociationElseFail(\"collection\"); \r\n        assertNotNull(mx_collection);\n        assertEquals(\"collection\", mx_collection.getId());\n        assertEquals(\"foo\", mx_collection.getName());\n        assertEquals(\"bar\", mx_collection.getDescription());\n\n        val mx_collection2 = holderSpec.getAssociationElseFail(\"collection2\"); \r\n        assertNotNull(mx_collection2);\n        assertEquals(\"collection2\", mx_collection2.getId());\n        assertEquals(\"foo\", mx_collection2.getName());\n        assertEquals(\"bar\", mx_collection2.getDescription());\n\n    }\n","realPath":"regressiontests/stable-domainmodel/src/test/java/org/apache/isis/testdomain/domainmodel/DomainModelTest_usingGoodDomain.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"},{"authorDate":"2021-04-21 23:42:54","commitOrder":1,"curCode":"    void metamodelContributingMembers_shouldBeInheritable(Class<?> type) {\n\n        val holderSpec = specificationLoader.loadSpecification(type,\n                        IntrospectionState.FULLY_INTROSPECTED);\n\n        val action = holderSpec.getActionElseFail(\"sampleAction\");\n        assertNotNull(action);\n        assertEquals(\"sampleAction\", action.getId());\n        assertEquals(\"foo\", action.getName());\n        assertEquals(\"bar\", action.getDescription());\n\n        val property = holderSpec.getAssociationElseFail(\"sampleProperty\");\n        assertNotNull(property);\n        assertEquals(\"sampleProperty\", property.getId());\n        assertEquals(\"foo\", property.getName());\n        assertEquals(\"bar\", property.getDescription());\n\n        val collection = holderSpec.getAssociationElseFail(\"sampleCollection\");\n        assertNotNull(collection);\n        assertEquals(\"sampleCollection\", collection.getId());\n        assertEquals(\"foo\", collection.getName());\n        assertEquals(\"bar\", collection.getDescription());\n\n    }\n","date":"2021-04-21 23:42:54","endLine":226,"groupId":"14369","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"metamodelContributingMembers_shouldBeInheritable","params":"(Class<?>type)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/69/6a93c658e698eee7593d338ea64ec7a6fba419.src","preCode":"    void metamodelContributingMembers_shouldBeInheritable(Class<?> type) {\n\n        val holderSpec = specificationLoader.loadSpecification(type,\n                        IntrospectionState.FULLY_INTROSPECTED);\n\n        val action = holderSpec.getActionElseFail(\"sampleAction\");\n        assertNotNull(action);\n        assertEquals(\"sampleAction\", action.getId());\n        assertEquals(\"foo\", action.getName());\n        assertEquals(\"bar\", action.getDescription());\n\n        val property = holderSpec.getAssociationElseFail(\"sampleProperty\");\n        assertNotNull(property);\n        assertEquals(\"sampleProperty\", property.getId());\n        assertEquals(\"foo\", property.getName());\n        assertEquals(\"bar\", property.getDescription());\n\n        val collection = holderSpec.getAssociationElseFail(\"sampleCollection\");\n        assertNotNull(collection);\n        assertEquals(\"sampleCollection\", collection.getId());\n        assertEquals(\"foo\", collection.getName());\n        assertEquals(\"bar\", collection.getDescription());\n\n    }\n","realPath":"regressiontests/stable-domainmodel/src/test/java/org/apache/isis/testdomain/domainmodel/DomainModelTest_usingGoodDomain.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"B"}],"commitId":"0348bc49be1ca70a98f195ecaa09e1372df645ec","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-21 23:42:54","modifiedFileCount":"188","status":"B","submitter":"J?rg Rade"},{"authorTime":"2021-05-22 00:00:29","codes":[{"authorDate":"2021-05-22 00:00:29","commitOrder":2,"curCode":"    void typeLevelAnnotations_shouldBeHonored_onMixins() {\n\n        val holderSpec = specificationLoader.specForTypeElseFail(ProperMemberSupport.class);\n\n        val mx_action = holderSpec.getActionElseFail(\"action\"); \r\n        assertNotNull(mx_action);\n        assertEquals(\"action\", mx_action.getId());\n        assertEquals(\"foo\", mx_action.getName());\n        assertEquals(\"bar\", mx_action.getDescription());\n        assertHasPublishedActionFacet(mx_action);\n\n        val mx_action2 = holderSpec.getActionElseFail(\"action2\"); \r\n        assertNotNull(mx_action2);\n        assertHasPublishedActionFacet(mx_action2);\n\n        val mx_property = holderSpec.getAssociationElseFail(\"property\"); \r\n        assertNotNull(mx_property);\n        assertEquals(\"property\", mx_property.getId());\n        assertEquals(\"foo\", mx_property.getName());\n        assertEquals(\"bar\", mx_property.getDescription());\n\n        val mx_property2 = holderSpec.getAssociationElseFail(\"property2\"); \r\n        assertNotNull(mx_property2);\n        assertEquals(\"property2\", mx_property2.getId());\n        assertEquals(\"foo\", mx_property2.getName());\n        assertEquals(\"bar\", mx_property2.getDescription());\n\n        val mx_collection = holderSpec.getAssociationElseFail(\"collection\"); \r\n        assertNotNull(mx_collection);\n        assertEquals(\"collection\", mx_collection.getId());\n        assertEquals(\"foo\", mx_collection.getName());\n        assertEquals(\"bar\", mx_collection.getDescription());\n\n        val mx_collection2 = holderSpec.getAssociationElseFail(\"collection2\"); \r\n        assertNotNull(mx_collection2);\n        assertEquals(\"collection2\", mx_collection2.getId());\n        assertEquals(\"foo\", mx_collection2.getName());\n        assertEquals(\"bar\", mx_collection2.getDescription());\n\n    }\n","date":"2021-05-22 00:00:29","endLine":178,"groupId":"14369","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"typeLevelAnnotations_shouldBeHonored_onMixins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/09/424dc314cacbb0a3bf4e4c686fcab1f246990e.src","preCode":"    void typeLevelAnnotations_shouldBeHonored_onMixins() {\n\n        val holderSpec = specificationLoader.loadSpecification(ProperMemberSupport.class,\n                        IntrospectionState.FULLY_INTROSPECTED);\n\n        val mx_action = holderSpec.getActionElseFail(\"action\"); \r\n        assertNotNull(mx_action);\n        assertEquals(\"action\", mx_action.getId());\n        assertEquals(\"foo\", mx_action.getName());\n        assertEquals(\"bar\", mx_action.getDescription());\n        assertHasPublishedActionFacet(mx_action);\n\n        val mx_action2 = holderSpec.getActionElseFail(\"action2\"); \r\n        assertNotNull(mx_action2);\n        assertHasPublishedActionFacet(mx_action2);\n\n        val mx_property = holderSpec.getAssociationElseFail(\"property\"); \r\n        assertNotNull(mx_property);\n        assertEquals(\"property\", mx_property.getId());\n        assertEquals(\"foo\", mx_property.getName());\n        assertEquals(\"bar\", mx_property.getDescription());\n\n        val mx_property2 = holderSpec.getAssociationElseFail(\"property2\"); \r\n        assertNotNull(mx_property2);\n        assertEquals(\"property2\", mx_property2.getId());\n        assertEquals(\"foo\", mx_property2.getName());\n        assertEquals(\"bar\", mx_property2.getDescription());\n\n        val mx_collection = holderSpec.getAssociationElseFail(\"collection\"); \r\n        assertNotNull(mx_collection);\n        assertEquals(\"collection\", mx_collection.getId());\n        assertEquals(\"foo\", mx_collection.getName());\n        assertEquals(\"bar\", mx_collection.getDescription());\n\n        val mx_collection2 = holderSpec.getAssociationElseFail(\"collection2\"); \r\n        assertNotNull(mx_collection2);\n        assertEquals(\"collection2\", mx_collection2.getId());\n        assertEquals(\"foo\", mx_collection2.getName());\n        assertEquals(\"bar\", mx_collection2.getDescription());\n\n    }\n","realPath":"regressiontests/stable-domainmodel/src/test/java/org/apache/isis/testdomain/domainmodel/DomainModelTest_usingGoodDomain.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2021-05-22 00:00:29","commitOrder":2,"curCode":"    void metamodelContributingMembers_shouldBeInheritable(Class<?> type) {\n\n        val holderSpec = specificationLoader.specForTypeElseFail(type);\n\n        val action = holderSpec.getActionElseFail(\"sampleAction\");\n        assertNotNull(action);\n        assertEquals(\"sampleAction\", action.getId());\n        assertEquals(\"foo\", action.getName());\n        assertEquals(\"bar\", action.getDescription());\n\n        val property = holderSpec.getAssociationElseFail(\"sampleProperty\");\n        assertNotNull(property);\n        assertEquals(\"sampleProperty\", property.getId());\n        assertEquals(\"foo\", property.getName());\n        assertEquals(\"bar\", property.getDescription());\n\n        val collection = holderSpec.getAssociationElseFail(\"sampleCollection\");\n        assertNotNull(collection);\n        assertEquals(\"sampleCollection\", collection.getId());\n        assertEquals(\"foo\", collection.getName());\n        assertEquals(\"bar\", collection.getDescription());\n\n    }\n","date":"2021-05-22 00:00:29","endLine":233,"groupId":"14369","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"metamodelContributingMembers_shouldBeInheritable","params":"(Class<?>type)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/09/424dc314cacbb0a3bf4e4c686fcab1f246990e.src","preCode":"    void metamodelContributingMembers_shouldBeInheritable(Class<?> type) {\n\n        val holderSpec = specificationLoader.loadSpecification(type,\n                        IntrospectionState.FULLY_INTROSPECTED);\n\n        val action = holderSpec.getActionElseFail(\"sampleAction\");\n        assertNotNull(action);\n        assertEquals(\"sampleAction\", action.getId());\n        assertEquals(\"foo\", action.getName());\n        assertEquals(\"bar\", action.getDescription());\n\n        val property = holderSpec.getAssociationElseFail(\"sampleProperty\");\n        assertNotNull(property);\n        assertEquals(\"sampleProperty\", property.getId());\n        assertEquals(\"foo\", property.getName());\n        assertEquals(\"bar\", property.getDescription());\n\n        val collection = holderSpec.getAssociationElseFail(\"sampleCollection\");\n        assertNotNull(collection);\n        assertEquals(\"sampleCollection\", collection.getId());\n        assertEquals(\"foo\", collection.getName());\n        assertEquals(\"bar\", collection.getDescription());\n\n    }\n","realPath":"regressiontests/stable-domainmodel/src/test/java/org/apache/isis/testdomain/domainmodel/DomainModelTest_usingGoodDomain.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"}],"commitId":"d0a586b44ba46905b7f2ec216203897fcecc04a6","commitMessage":"@@@ISIS-2253: just some housekeeping","date":"2021-05-22 00:00:29","modifiedFileCount":"1","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-06-26 21:25:11","codes":[{"authorDate":"2021-06-26 21:25:11","commitOrder":3,"curCode":"    void typeLevelAnnotations_shouldBeHonored_onMixins() {\n\n        val holderSpec = specificationLoader.specForTypeElseFail(ProperMemberSupport.class);\n\n        val mx_action = holderSpec.getActionElseFail(\"action\"); \r\n        assertNotNull(mx_action);\n        assertEquals(\"action\", mx_action.getId());\n        assertEquals(\"foo\", mx_action.getStaticFriendlyName().get());\n        assertEquals(\"bar\", mx_action.getStaticDescription().get());\n        assertHasPublishedActionFacet(mx_action);\n\n        val mx_action2 = holderSpec.getActionElseFail(\"action2\"); \r\n        assertNotNull(mx_action2);\n        assertHasPublishedActionFacet(mx_action2);\n\n        val mx_property = holderSpec.getAssociationElseFail(\"property\"); \r\n        assertNotNull(mx_property);\n        assertEquals(\"property\", mx_property.getId());\n        assertEquals(\"foo\", mx_property.getStaticFriendlyName().get());\n        assertEquals(\"bar\", mx_property.getStaticDescription().get());\n\n        val mx_property2 = holderSpec.getAssociationElseFail(\"property2\"); \r\n        assertNotNull(mx_property2);\n        assertEquals(\"property2\", mx_property2.getId());\n        assertEquals(\"foo\", mx_property2.getStaticFriendlyName().get());\n        assertEquals(\"bar\", mx_property2.getStaticDescription().get());\n\n        val mx_collection = holderSpec.getAssociationElseFail(\"collection\"); \r\n        assertNotNull(mx_collection);\n        assertEquals(\"collection\", mx_collection.getId());\n        assertEquals(\"foo\", mx_collection.getStaticFriendlyName().get());\n        assertEquals(\"bar\", mx_collection.getStaticDescription().get());\n\n        val mx_collection2 = holderSpec.getAssociationElseFail(\"collection2\"); \r\n        assertNotNull(mx_collection2);\n        assertEquals(\"collection2\", mx_collection2.getId());\n        assertEquals(\"foo\", mx_collection2.getStaticFriendlyName().get());\n        assertEquals(\"bar\", mx_collection2.getStaticDescription().get());\n\n    }\n","date":"2021-06-26 21:25:11","endLine":178,"groupId":"10101","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"typeLevelAnnotations_shouldBeHonored_onMixins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/90/61d6aa9240e94f1eac1848d50d5c42b9479de1.src","preCode":"    void typeLevelAnnotations_shouldBeHonored_onMixins() {\n\n        val holderSpec = specificationLoader.specForTypeElseFail(ProperMemberSupport.class);\n\n        val mx_action = holderSpec.getActionElseFail(\"action\"); \r\n        assertNotNull(mx_action);\n        assertEquals(\"action\", mx_action.getId());\n        assertEquals(\"foo\", mx_action.getName());\n        assertEquals(\"bar\", mx_action.getDescription());\n        assertHasPublishedActionFacet(mx_action);\n\n        val mx_action2 = holderSpec.getActionElseFail(\"action2\"); \r\n        assertNotNull(mx_action2);\n        assertHasPublishedActionFacet(mx_action2);\n\n        val mx_property = holderSpec.getAssociationElseFail(\"property\"); \r\n        assertNotNull(mx_property);\n        assertEquals(\"property\", mx_property.getId());\n        assertEquals(\"foo\", mx_property.getName());\n        assertEquals(\"bar\", mx_property.getDescription());\n\n        val mx_property2 = holderSpec.getAssociationElseFail(\"property2\"); \r\n        assertNotNull(mx_property2);\n        assertEquals(\"property2\", mx_property2.getId());\n        assertEquals(\"foo\", mx_property2.getName());\n        assertEquals(\"bar\", mx_property2.getDescription());\n\n        val mx_collection = holderSpec.getAssociationElseFail(\"collection\"); \r\n        assertNotNull(mx_collection);\n        assertEquals(\"collection\", mx_collection.getId());\n        assertEquals(\"foo\", mx_collection.getName());\n        assertEquals(\"bar\", mx_collection.getDescription());\n\n        val mx_collection2 = holderSpec.getAssociationElseFail(\"collection2\"); \r\n        assertNotNull(mx_collection2);\n        assertEquals(\"collection2\", mx_collection2.getId());\n        assertEquals(\"foo\", mx_collection2.getName());\n        assertEquals(\"bar\", mx_collection2.getDescription());\n\n    }\n","realPath":"regressiontests/stable-domainmodel/src/test/java/org/apache/isis/testdomain/domainmodel/DomainModelTest_usingGoodDomain.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2021-06-26 21:25:11","commitOrder":3,"curCode":"    void metamodelContributingMembers_shouldBeInheritable(final Class<?> type) {\n\n        val holderSpec = specificationLoader.specForTypeElseFail(type);\n\n        val action = holderSpec.getActionElseFail(\"sampleAction\");\n        assertNotNull(action);\n        assertEquals(\"sampleAction\", action.getId());\n        assertEquals(\"foo\", action.getStaticFriendlyName().get());\n        assertEquals(\"bar\", action.getStaticDescription().get());\n\n        val property = holderSpec.getAssociationElseFail(\"sampleProperty\");\n        assertNotNull(property);\n        assertEquals(\"sampleProperty\", property.getId());\n        assertEquals(\"foo\", property.getStaticFriendlyName().get());\n        assertEquals(\"bar\", property.getStaticDescription().get());\n\n        val collection = holderSpec.getAssociationElseFail(\"sampleCollection\");\n        assertNotNull(collection);\n        assertEquals(\"sampleCollection\", collection.getId());\n        assertEquals(\"foo\", collection.getStaticFriendlyName().get());\n        assertEquals(\"bar\", collection.getStaticDescription().get());\n\n    }\n","date":"2021-06-26 21:25:11","endLine":233,"groupId":"10101","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"metamodelContributingMembers_shouldBeInheritable","params":"(finalClass<?>type)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/90/61d6aa9240e94f1eac1848d50d5c42b9479de1.src","preCode":"    void metamodelContributingMembers_shouldBeInheritable(Class<?> type) {\n\n        val holderSpec = specificationLoader.specForTypeElseFail(type);\n\n        val action = holderSpec.getActionElseFail(\"sampleAction\");\n        assertNotNull(action);\n        assertEquals(\"sampleAction\", action.getId());\n        assertEquals(\"foo\", action.getName());\n        assertEquals(\"bar\", action.getDescription());\n\n        val property = holderSpec.getAssociationElseFail(\"sampleProperty\");\n        assertNotNull(property);\n        assertEquals(\"sampleProperty\", property.getId());\n        assertEquals(\"foo\", property.getName());\n        assertEquals(\"bar\", property.getDescription());\n\n        val collection = holderSpec.getAssociationElseFail(\"sampleCollection\");\n        assertNotNull(collection);\n        assertEquals(\"sampleCollection\", collection.getId());\n        assertEquals(\"foo\", collection.getName());\n        assertEquals(\"bar\", collection.getDescription());\n\n    }\n","realPath":"regressiontests/stable-domainmodel/src/test/java/org/apache/isis/testdomain/domainmodel/DomainModelTest_usingGoodDomain.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"}],"commitId":"df3c07106d29e8803c233a0145d6bc1424d7a061","commitMessage":"@@@ISIS-1720: MM fundamentals: remove ObjectFeature#getName and\n#getDescription\n\nas we now have imperative replacements","date":"2021-06-26 21:25:11","modifiedFileCount":"97","status":"M","submitter":"Andi Huber"}]
