[{"authorTime":"2021-04-21 23:42:54","codes":[{"authorDate":"2021-04-21 23:42:54","commitOrder":1,"curCode":"    void metamodelContributingActions_shouldBeUnique_whenOverridden(Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.loadSpecification(type,\n                IntrospectionState.FULLY_INTROSPECTED);\n\n        val super_action = holderSpec.getActionElseFail(\"sampleActionOverride\");\n        assertNotNull(super_action);\n        assertEquals(\"sampleActionOverride\", super_action.getId());\n        assertEquals(\"foo\", super_action.getName());\n        assertEquals(\"bar\", super_action.getDescription());\n\n        assertEquals(1L, holderSpec.streamActions(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"sampleActionOverride\"))\n                .count());\n\n    }\n","date":"2021-04-21 23:42:54","endLine":250,"groupId":"13144","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"metamodelContributingActions_shouldBeUnique_whenOverridden","params":"(Class<?>type)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/69/6a93c658e698eee7593d338ea64ec7a6fba419.src","preCode":"    void metamodelContributingActions_shouldBeUnique_whenOverridden(Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.loadSpecification(type,\n                IntrospectionState.FULLY_INTROSPECTED);\n\n        val super_action = holderSpec.getActionElseFail(\"sampleActionOverride\");\n        assertNotNull(super_action);\n        assertEquals(\"sampleActionOverride\", super_action.getId());\n        assertEquals(\"foo\", super_action.getName());\n        assertEquals(\"bar\", super_action.getDescription());\n\n        assertEquals(1L, holderSpec.streamActions(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"sampleActionOverride\"))\n                .count());\n\n    }\n","realPath":"regressiontests/stable-domainmodel/src/test/java/org/apache/isis/testdomain/domainmodel/DomainModelTest_usingGoodDomain.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"},{"authorDate":"2021-04-21 23:42:54","commitOrder":1,"curCode":"    void metamodelContributingProperties_shouldBeUnique_whenOverridden(Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.loadSpecification(type,\n                        IntrospectionState.FULLY_INTROSPECTED);\n\n        val super_property = holderSpec.getAssociationElseFail(\"samplePropertyOverride\");\n        assertNotNull(super_property);\n        assertEquals(\"samplePropertyOverride\", super_property.getId());\n        assertEquals(\"foo\", super_property.getName());\n        assertEquals(\"bar\", super_property.getDescription());\n\n        assertEquals(1L, holderSpec.streamProperties(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"samplePropertyOverride\"))\n                .count());\n\n    }\n","date":"2021-04-21 23:42:54","endLine":274,"groupId":"13143","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"metamodelContributingProperties_shouldBeUnique_whenOverridden","params":"(Class<?>type)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/69/6a93c658e698eee7593d338ea64ec7a6fba419.src","preCode":"    void metamodelContributingProperties_shouldBeUnique_whenOverridden(Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.loadSpecification(type,\n                        IntrospectionState.FULLY_INTROSPECTED);\n\n        val super_property = holderSpec.getAssociationElseFail(\"samplePropertyOverride\");\n        assertNotNull(super_property);\n        assertEquals(\"samplePropertyOverride\", super_property.getId());\n        assertEquals(\"foo\", super_property.getName());\n        assertEquals(\"bar\", super_property.getDescription());\n\n        assertEquals(1L, holderSpec.streamProperties(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"samplePropertyOverride\"))\n                .count());\n\n    }\n","realPath":"regressiontests/stable-domainmodel/src/test/java/org/apache/isis/testdomain/domainmodel/DomainModelTest_usingGoodDomain.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"B"}],"commitId":"0348bc49be1ca70a98f195ecaa09e1372df645ec","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-21 23:42:54","modifiedFileCount":"188","status":"B","submitter":"J?rg Rade"},{"authorTime":"2021-04-21 23:42:54","codes":[{"authorDate":"2021-05-06 14:26:09","commitOrder":2,"curCode":"    void metamodelContributingActions_shouldBeUnique_whenOverridden(Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.loadSpecification(type,\n                IntrospectionState.FULLY_INTROSPECTED);\n\n        val super_action = holderSpec.getActionElseFail(\"sampleActionOverride\");\n        assertNotNull(super_action);\n        assertEquals(\"sampleActionOverride\", super_action.getId());\n        assertEquals(\"foo\", super_action.getName());\n        assertEquals(\"bar\", super_action.getDescription());\n\n        assertEquals(1L, holderSpec.streamAnyActions(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"sampleActionOverride\"))\n                .count());\n\n    }\n","date":"2021-05-06 14:26:09","endLine":256,"groupId":"13144","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"metamodelContributingActions_shouldBeUnique_whenOverridden","params":"(Class<?>type)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/ce/4505cad29ee259defed0dffd41a04fc16cfe16.src","preCode":"    void metamodelContributingActions_shouldBeUnique_whenOverridden(Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.loadSpecification(type,\n                IntrospectionState.FULLY_INTROSPECTED);\n\n        val super_action = holderSpec.getActionElseFail(\"sampleActionOverride\");\n        assertNotNull(super_action);\n        assertEquals(\"sampleActionOverride\", super_action.getId());\n        assertEquals(\"foo\", super_action.getName());\n        assertEquals(\"bar\", super_action.getDescription());\n\n        assertEquals(1L, holderSpec.streamActions(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"sampleActionOverride\"))\n                .count());\n\n    }\n","realPath":"regressiontests/stable-domainmodel/src/test/java/org/apache/isis/testdomain/domainmodel/DomainModelTest_usingGoodDomain.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"},{"authorDate":"2021-04-21 23:42:54","commitOrder":2,"curCode":"    void metamodelContributingProperties_shouldBeUnique_whenOverridden(Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.loadSpecification(type,\n                        IntrospectionState.FULLY_INTROSPECTED);\n\n        val super_property = holderSpec.getAssociationElseFail(\"samplePropertyOverride\");\n        assertNotNull(super_property);\n        assertEquals(\"samplePropertyOverride\", super_property.getId());\n        assertEquals(\"foo\", super_property.getName());\n        assertEquals(\"bar\", super_property.getDescription());\n\n        assertEquals(1L, holderSpec.streamProperties(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"samplePropertyOverride\"))\n                .count());\n\n    }\n","date":"2021-04-21 23:42:54","endLine":274,"groupId":"13143","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"metamodelContributingProperties_shouldBeUnique_whenOverridden","params":"(Class<?>type)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/69/6a93c658e698eee7593d338ea64ec7a6fba419.src","preCode":"    void metamodelContributingProperties_shouldBeUnique_whenOverridden(Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.loadSpecification(type,\n                        IntrospectionState.FULLY_INTROSPECTED);\n\n        val super_property = holderSpec.getAssociationElseFail(\"samplePropertyOverride\");\n        assertNotNull(super_property);\n        assertEquals(\"samplePropertyOverride\", super_property.getId());\n        assertEquals(\"foo\", super_property.getName());\n        assertEquals(\"bar\", super_property.getDescription());\n\n        assertEquals(1L, holderSpec.streamProperties(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"samplePropertyOverride\"))\n                .count());\n\n    }\n","realPath":"regressiontests/stable-domainmodel/src/test/java/org/apache/isis/testdomain/domainmodel/DomainModelTest_usingGoodDomain.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"N"}],"commitId":"523fbf277c615c9c85d11c577b73bffe6c9b4d6c","commitMessage":"@@@ISIS-2648: some MM housekeeping","date":"2021-05-06 14:26:09","modifiedFileCount":"22","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-05-22 00:00:29","codes":[{"authorDate":"2021-05-22 00:00:29","commitOrder":3,"curCode":"    void metamodelContributingActions_shouldBeUnique_whenOverridden(Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.specForTypeElseFail(type);\n\n        val super_action = holderSpec.getActionElseFail(\"sampleActionOverride\");\n        assertNotNull(super_action);\n        assertEquals(\"sampleActionOverride\", super_action.getId());\n        assertEquals(\"foo\", super_action.getName());\n        assertEquals(\"bar\", super_action.getDescription());\n\n        assertEquals(1L, holderSpec.streamAnyActions(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"sampleActionOverride\"))\n                .count());\n\n    }\n","date":"2021-05-22 00:00:29","endLine":256,"groupId":"13144","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"metamodelContributingActions_shouldBeUnique_whenOverridden","params":"(Class<?>type)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/09/424dc314cacbb0a3bf4e4c686fcab1f246990e.src","preCode":"    void metamodelContributingActions_shouldBeUnique_whenOverridden(Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.loadSpecification(type,\n                IntrospectionState.FULLY_INTROSPECTED);\n\n        val super_action = holderSpec.getActionElseFail(\"sampleActionOverride\");\n        assertNotNull(super_action);\n        assertEquals(\"sampleActionOverride\", super_action.getId());\n        assertEquals(\"foo\", super_action.getName());\n        assertEquals(\"bar\", super_action.getDescription());\n\n        assertEquals(1L, holderSpec.streamAnyActions(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"sampleActionOverride\"))\n                .count());\n\n    }\n","realPath":"regressiontests/stable-domainmodel/src/test/java/org/apache/isis/testdomain/domainmodel/DomainModelTest_usingGoodDomain.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2021-05-22 00:00:29","commitOrder":3,"curCode":"    void metamodelContributingProperties_shouldBeUnique_whenOverridden(Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.specForTypeElseFail(type);\n\n        val super_property = holderSpec.getAssociationElseFail(\"samplePropertyOverride\");\n        assertNotNull(super_property);\n        assertEquals(\"samplePropertyOverride\", super_property.getId());\n        assertEquals(\"foo\", super_property.getName());\n        assertEquals(\"bar\", super_property.getDescription());\n\n        assertEquals(1L, holderSpec.streamProperties(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"samplePropertyOverride\"))\n                .count());\n\n    }\n","date":"2021-05-22 00:00:29","endLine":279,"groupId":"13143","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"metamodelContributingProperties_shouldBeUnique_whenOverridden","params":"(Class<?>type)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/09/424dc314cacbb0a3bf4e4c686fcab1f246990e.src","preCode":"    void metamodelContributingProperties_shouldBeUnique_whenOverridden(Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.loadSpecification(type,\n                        IntrospectionState.FULLY_INTROSPECTED);\n\n        val super_property = holderSpec.getAssociationElseFail(\"samplePropertyOverride\");\n        assertNotNull(super_property);\n        assertEquals(\"samplePropertyOverride\", super_property.getId());\n        assertEquals(\"foo\", super_property.getName());\n        assertEquals(\"bar\", super_property.getDescription());\n\n        assertEquals(1L, holderSpec.streamProperties(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"samplePropertyOverride\"))\n                .count());\n\n    }\n","realPath":"regressiontests/stable-domainmodel/src/test/java/org/apache/isis/testdomain/domainmodel/DomainModelTest_usingGoodDomain.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"d0a586b44ba46905b7f2ec216203897fcecc04a6","commitMessage":"@@@ISIS-2253: just some housekeeping","date":"2021-05-22 00:00:29","modifiedFileCount":"1","status":"M","submitter":"Andi Huber"},{"authorTime":"2021-06-26 21:25:11","codes":[{"authorDate":"2021-06-26 21:25:11","commitOrder":4,"curCode":"    void metamodelContributingActions_shouldBeUnique_whenOverridden(final Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.specForTypeElseFail(type);\n\n        val super_action = holderSpec.getActionElseFail(\"sampleActionOverride\");\n        assertNotNull(super_action);\n        assertEquals(\"sampleActionOverride\", super_action.getId());\n        assertEquals(\"foo\", super_action.getStaticFriendlyName().get());\n        assertEquals(\"bar\", super_action.getStaticDescription().get());\n\n        assertEquals(1L, holderSpec.streamAnyActions(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"sampleActionOverride\"))\n                .count());\n\n    }\n","date":"2021-06-26 21:25:11","endLine":256,"groupId":"10102","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"metamodelContributingActions_shouldBeUnique_whenOverridden","params":"(finalClass<?>type)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/90/61d6aa9240e94f1eac1848d50d5c42b9479de1.src","preCode":"    void metamodelContributingActions_shouldBeUnique_whenOverridden(Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.specForTypeElseFail(type);\n\n        val super_action = holderSpec.getActionElseFail(\"sampleActionOverride\");\n        assertNotNull(super_action);\n        assertEquals(\"sampleActionOverride\", super_action.getId());\n        assertEquals(\"foo\", super_action.getName());\n        assertEquals(\"bar\", super_action.getDescription());\n\n        assertEquals(1L, holderSpec.streamAnyActions(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"sampleActionOverride\"))\n                .count());\n\n    }\n","realPath":"regressiontests/stable-domainmodel/src/test/java/org/apache/isis/testdomain/domainmodel/DomainModelTest_usingGoodDomain.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2021-06-26 21:25:11","commitOrder":4,"curCode":"    void metamodelContributingProperties_shouldBeUnique_whenOverridden(final Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.specForTypeElseFail(type);\n\n        val super_property = holderSpec.getAssociationElseFail(\"samplePropertyOverride\");\n        assertNotNull(super_property);\n        assertEquals(\"samplePropertyOverride\", super_property.getId());\n        assertEquals(\"foo\", super_property.getStaticFriendlyName().get());\n        assertEquals(\"bar\", super_property.getStaticDescription().get());\n\n        assertEquals(1L, holderSpec.streamProperties(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"samplePropertyOverride\"))\n                .count());\n\n    }\n","date":"2021-06-26 21:25:11","endLine":279,"groupId":"10102","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"metamodelContributingProperties_shouldBeUnique_whenOverridden","params":"(finalClass<?>type)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/90/61d6aa9240e94f1eac1848d50d5c42b9479de1.src","preCode":"    void metamodelContributingProperties_shouldBeUnique_whenOverridden(Class<?> type) {\n\n        if(type.isInterface()\n                && type.getSuperclass()==null) {\n            return; \r\n        }\n\n        val holderSpec = specificationLoader.specForTypeElseFail(type);\n\n        val super_property = holderSpec.getAssociationElseFail(\"samplePropertyOverride\");\n        assertNotNull(super_property);\n        assertEquals(\"samplePropertyOverride\", super_property.getId());\n        assertEquals(\"foo\", super_property.getName());\n        assertEquals(\"bar\", super_property.getDescription());\n\n        assertEquals(1L, holderSpec.streamProperties(MixedIn.EXCLUDED)\n                .filter(prop->prop.getId().equals(\"samplePropertyOverride\"))\n                .count());\n\n    }\n","realPath":"regressiontests/stable-domainmodel/src/test/java/org/apache/isis/testdomain/domainmodel/DomainModelTest_usingGoodDomain.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"df3c07106d29e8803c233a0145d6bc1424d7a061","commitMessage":"@@@ISIS-1720: MM fundamentals: remove ObjectFeature#getName and\n#getDescription\n\nas we now have imperative replacements","date":"2021-06-26 21:25:11","modifiedFileCount":"97","status":"M","submitter":"Andi Huber"}]
