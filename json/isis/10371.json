[{"authorTime":"2021-04-14 23:26:49","codes":[{"authorDate":"2021-04-14 23:26:49","commitOrder":1,"curCode":"\tpublic void testTransactionCommitWithDataSource() throws SQLException {\n\t\tfinal DataSource ds = mock(DataSource.class);\n\t\tJdoDialect dialect = mock(JdoDialect.class);\n\t\tfinal Connection con = mock(Connection.class);\n\t\tConnectionHandle conHandle = new SimpleConnectionHandle(con);\n\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\t\tTransactionTemplate tt = new TransactionTemplate();\n\t\tgiven(dialect.getJdbcConnection(pm, false)).willReturn(conHandle);\n\n\t\tJdoTransactionManager tm = new JdoTransactionManager();\n\t\ttm.setPersistenceManagerFactory(pmf);\n\t\ttm.setDataSource(ds);\n\t\ttm.setJdoDialect(dialect);\n\t\ttt.setTransactionManager(tm);\n\t\tval l = new ArrayList<Object>();\n\t\tl.add(\"test\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\n\t\tObject result = tt.execute(new TransactionCallback<Object>() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(ds), \"Has thread con\");\n\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true);\n\t\t\t\treturn l;\n\t\t\t}\n\t\t});\n\t\tassertTrue(result == l, \"Correct result list\");\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(ds), \"Hasn't thread con\");\n\n\t\tverify(pm).close();\n\t\tverify(dialect).beginTransaction(tx, tt);\n\t\tverify(dialect).releaseJdbcConnection(conHandle, pm);\n\t\tverify(dialect).cleanupTransaction(null);\n\t\tverify(tx).commit();\n\t}\n","date":"2021-04-14 23:26:49","endLine":620,"groupId":"4822","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionCommitWithDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/89/56d6d10401f84d79ae1c4d8e197572319e76d5.src","preCode":"\tpublic void testTransactionCommitWithDataSource() throws SQLException {\n\t\tfinal DataSource ds = mock(DataSource.class);\n\t\tJdoDialect dialect = mock(JdoDialect.class);\n\t\tfinal Connection con = mock(Connection.class);\n\t\tConnectionHandle conHandle = new SimpleConnectionHandle(con);\n\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\t\tTransactionTemplate tt = new TransactionTemplate();\n\t\tgiven(dialect.getJdbcConnection(pm, false)).willReturn(conHandle);\n\n\t\tJdoTransactionManager tm = new JdoTransactionManager();\n\t\ttm.setPersistenceManagerFactory(pmf);\n\t\ttm.setDataSource(ds);\n\t\ttm.setJdoDialect(dialect);\n\t\ttt.setTransactionManager(tm);\n\t\tval l = new ArrayList<Object>();\n\t\tl.add(\"test\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\n\t\tObject result = tt.execute(new TransactionCallback<Object>() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(ds), \"Has thread con\");\n\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true);\n\t\t\t\treturn l;\n\t\t\t}\n\t\t});\n\t\tassertTrue(result == l, \"Correct result list\");\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(ds), \"Hasn't thread con\");\n\n\t\tverify(pm).close();\n\t\tverify(dialect).beginTransaction(tx, tt);\n\t\tverify(dialect).releaseJdbcConnection(conHandle, pm);\n\t\tverify(dialect).cleanupTransaction(null);\n\t\tverify(tx).commit();\n\t}\n","realPath":"persistence/jdo/spring/src/test/java/org/apache/isis/persistence/jdo/spring/test/integration/JdoTransactionManagerTests.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":581,"status":"B"},{"authorDate":"2021-04-14 23:26:49","commitOrder":1,"curCode":"\tpublic void testTransactionCommitWithAutoDetectedDataSourceAndNoConnection() throws SQLException {\n\t\tfinal DataSource ds = mock(DataSource.class);\n\t\tfinal JdoDialect dialect = mock(JdoDialect.class);\n\n\t\tgiven(pmf.getConnectionFactory()).willReturn(ds);\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\t\tTransactionTemplate tt = new TransactionTemplate();\n\t\tgiven(dialect.getJdbcConnection(pm, false)).willReturn(null);\n\n\t\tJdoTransactionManager tm = new JdoTransactionManager();\n\t\ttm.setPersistenceManagerFactory(pmf);\n\t\ttm.setJdoDialect(dialect);\n\t\ttm.afterPropertiesSet();\n\t\ttt.setTransactionManager(tm);\n\t\tval l = new ArrayList<Object>();\n\t\tl.add(\"test\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\n\t\tObject result = tt.execute(new TransactionCallback<Object>() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\tassertTrue(!TransactionSynchronizationManager.hasResource(ds), \"Hasn't thread con\");\n\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true).flush();\n\t\t\t\treturn l;\n\t\t\t}\n\t\t});\n\t\tassertTrue(result == l, \"Correct result list\");\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(ds), \"Hasn't thread con\");\n\n\t\tverify(pm).flush();\n\t\tverify(pm).close();\n\t\tverify(dialect).beginTransaction(tx, tt);\n\t\tverify(dialect).cleanupTransaction(null);\n\t\tverify(tx).commit();\n\t}\n","date":"2021-04-14 23:26:49","endLine":704,"groupId":"4819","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransactionCommitWithAutoDetectedDataSourceAndNoConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/89/56d6d10401f84d79ae1c4d8e197572319e76d5.src","preCode":"\tpublic void testTransactionCommitWithAutoDetectedDataSourceAndNoConnection() throws SQLException {\n\t\tfinal DataSource ds = mock(DataSource.class);\n\t\tfinal JdoDialect dialect = mock(JdoDialect.class);\n\n\t\tgiven(pmf.getConnectionFactory()).willReturn(ds);\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\t\tTransactionTemplate tt = new TransactionTemplate();\n\t\tgiven(dialect.getJdbcConnection(pm, false)).willReturn(null);\n\n\t\tJdoTransactionManager tm = new JdoTransactionManager();\n\t\ttm.setPersistenceManagerFactory(pmf);\n\t\ttm.setJdoDialect(dialect);\n\t\ttm.afterPropertiesSet();\n\t\ttt.setTransactionManager(tm);\n\t\tval l = new ArrayList<Object>();\n\t\tl.add(\"test\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\n\t\tObject result = tt.execute(new TransactionCallback<Object>() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\tassertTrue(!TransactionSynchronizationManager.hasResource(ds), \"Hasn't thread con\");\n\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true).flush();\n\t\t\t\treturn l;\n\t\t\t}\n\t\t});\n\t\tassertTrue(result == l, \"Correct result list\");\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(ds), \"Hasn't thread con\");\n\n\t\tverify(pm).flush();\n\t\tverify(pm).close();\n\t\tverify(dialect).beginTransaction(tx, tt);\n\t\tverify(dialect).cleanupTransaction(null);\n\t\tverify(tx).commit();\n\t}\n","realPath":"persistence/jdo/spring/src/test/java/org/apache/isis/persistence/jdo/spring/test/integration/JdoTransactionManagerTests.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"B"}],"commitId":"75633e1f8ce37deb39e3c2e2644357af15365d05","commitMessage":"@@@Merge branch 'master' of https://github.com/apache/isis into ISIS-2505_Catch_Up_With_Demo_Examples\n","date":"2021-04-14 23:26:49","modifiedFileCount":"1999","status":"B","submitter":"J?rg Rade"},{"authorTime":"2021-08-19 14:53:32","codes":[{"authorDate":"2021-08-19 14:53:32","commitOrder":2,"curCode":"\tpublic void testTransactionCommitWithDataSource() throws SQLException {\n\t\tfinal DataSource ds = mock(DataSource.class);\n\t\tJdoDialect dialect = mock(JdoDialect.class);\n\t\tfinal Connection con = mock(Connection.class);\n\t\tConnectionHandle conHandle = new SimpleConnectionHandle(con);\n\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\t\tTransactionTemplate tt = new TransactionTemplate();\n\t\tgiven(dialect.getJdbcConnection(pm, false)).willReturn(conHandle);\n\n\t\tJdoTransactionManager tm = new JdoTransactionManager();\n\t\ttm.setPersistenceManagerFactory(pmf);\n\t\ttm.setDataSource(ds);\n\t\ttm.setJdoDialect(dialect);\n\t\ttt.setTransactionManager(tm);\n\t\tval l = new ArrayList<Object>();\n\t\tl.add(\"test\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\n\t\tObject result = tt.execute(new TransactionCallback<Object>() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(final TransactionStatus status) {\n\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(ds), \"Has thread con\");\n\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true);\n\t\t\t\treturn l;\n\t\t\t}\n\t\t});\n\t\tassertTrue(result == l, \"Correct result list\");\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(ds), \"Hasn't thread con\");\n\n\t\tverify(pm).close();\n\t\tverify(dialect).beginTransaction(tx, tt);\n\t\tverify(dialect).releaseJdbcConnection(conHandle, pm);\n\t\tverify(dialect).cleanupTransaction(null);\n\t\tverify(tx).commit();\n\t}\n","date":"2021-08-19 14:53:32","endLine":621,"groupId":"10371","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testTransactionCommitWithDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/b9/096e403d26b11002576163d6bab6b11390671a.src","preCode":"\tpublic void testTransactionCommitWithDataSource() throws SQLException {\n\t\tfinal DataSource ds = mock(DataSource.class);\n\t\tJdoDialect dialect = mock(JdoDialect.class);\n\t\tfinal Connection con = mock(Connection.class);\n\t\tConnectionHandle conHandle = new SimpleConnectionHandle(con);\n\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\t\tTransactionTemplate tt = new TransactionTemplate();\n\t\tgiven(dialect.getJdbcConnection(pm, false)).willReturn(conHandle);\n\n\t\tJdoTransactionManager tm = new JdoTransactionManager();\n\t\ttm.setPersistenceManagerFactory(pmf);\n\t\ttm.setDataSource(ds);\n\t\ttm.setJdoDialect(dialect);\n\t\ttt.setTransactionManager(tm);\n\t\tval l = new ArrayList<Object>();\n\t\tl.add(\"test\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\n\t\tObject result = tt.execute(new TransactionCallback<Object>() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(ds), \"Has thread con\");\n\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true);\n\t\t\t\treturn l;\n\t\t\t}\n\t\t});\n\t\tassertTrue(result == l, \"Correct result list\");\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(ds), \"Hasn't thread con\");\n\n\t\tverify(pm).close();\n\t\tverify(dialect).beginTransaction(tx, tt);\n\t\tverify(dialect).releaseJdbcConnection(conHandle, pm);\n\t\tverify(dialect).cleanupTransaction(null);\n\t\tverify(tx).commit();\n\t}\n","realPath":"persistence/jdo/spring/src/test/java/org/apache/isis/persistence/jdo/spring/test/integration/JdoTransactionManagerTests.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":582,"status":"M"},{"authorDate":"2021-08-19 14:53:32","commitOrder":2,"curCode":"\tpublic void testTransactionCommitWithAutoDetectedDataSourceAndNoConnection() throws SQLException {\n\t\tfinal DataSource ds = mock(DataSource.class);\n\t\tfinal JdoDialect dialect = mock(JdoDialect.class);\n\n\t\tgiven(pmf.getConnectionFactory()).willReturn(ds);\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\t\tTransactionTemplate tt = new TransactionTemplate();\n\t\tgiven(dialect.getJdbcConnection(pm, false)).willReturn(null);\n\n\t\tJdoTransactionManager tm = new JdoTransactionManager();\n\t\ttm.setPersistenceManagerFactory(pmf);\n\t\ttm.setJdoDialect(dialect);\n\t\ttm.afterPropertiesSet();\n\t\ttt.setTransactionManager(tm);\n\t\tval l = new ArrayList<Object>();\n\t\tl.add(\"test\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\n\t\tObject result = tt.execute(new TransactionCallback<Object>() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(final TransactionStatus status) {\n\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\tassertTrue(!TransactionSynchronizationManager.hasResource(ds), \"Hasn't thread con\");\n\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true).flush();\n\t\t\t\treturn l;\n\t\t\t}\n\t\t});\n\t\tassertTrue(result == l, \"Correct result list\");\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(ds), \"Hasn't thread con\");\n\n\t\tverify(pm).flush();\n\t\tverify(pm).close();\n\t\tverify(dialect).beginTransaction(tx, tt);\n\t\tverify(dialect).cleanupTransaction(null);\n\t\tverify(tx).commit();\n\t}\n","date":"2021-08-19 14:53:32","endLine":705,"groupId":"10371","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testTransactionCommitWithAutoDetectedDataSourceAndNoConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-isis-10-0.7/blobInfo/CC_OUT/blobs/b9/096e403d26b11002576163d6bab6b11390671a.src","preCode":"\tpublic void testTransactionCommitWithAutoDetectedDataSourceAndNoConnection() throws SQLException {\n\t\tfinal DataSource ds = mock(DataSource.class);\n\t\tfinal JdoDialect dialect = mock(JdoDialect.class);\n\n\t\tgiven(pmf.getConnectionFactory()).willReturn(ds);\n\t\tgiven(pmf.getPersistenceManager()).willReturn(pm);\n\t\tgiven(pm.currentTransaction()).willReturn(tx);\n\t\tTransactionTemplate tt = new TransactionTemplate();\n\t\tgiven(dialect.getJdbcConnection(pm, false)).willReturn(null);\n\n\t\tJdoTransactionManager tm = new JdoTransactionManager();\n\t\ttm.setPersistenceManagerFactory(pmf);\n\t\ttm.setJdoDialect(dialect);\n\t\ttm.afterPropertiesSet();\n\t\ttt.setTransactionManager(tm);\n\t\tval l = new ArrayList<Object>();\n\t\tl.add(\"test\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\n\t\tObject result = tt.execute(new TransactionCallback<Object>() {\n\t\t\t@Override\n\t\t\tpublic Object doInTransaction(TransactionStatus status) {\n\t\t\t\tassertTrue(TransactionSynchronizationManager.hasResource(pmf), \"Has thread pm\");\n\t\t\t\tassertTrue(!TransactionSynchronizationManager.hasResource(ds), \"Hasn't thread con\");\n\t\t\t\tPersistenceManagerFactoryUtils.getPersistenceManager(pmf, true).flush();\n\t\t\t\treturn l;\n\t\t\t}\n\t\t});\n\t\tassertTrue(result == l, \"Correct result list\");\n\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(pmf), \"Hasn't thread pm\");\n\t\tassertTrue(!TransactionSynchronizationManager.hasResource(ds), \"Hasn't thread con\");\n\n\t\tverify(pm).flush();\n\t\tverify(pm).close();\n\t\tverify(dialect).beginTransaction(tx, tt);\n\t\tverify(dialect).cleanupTransaction(null);\n\t\tverify(tx).commit();\n\t}\n","realPath":"persistence/jdo/spring/src/test/java/org/apache/isis/persistence/jdo/spring/test/integration/JdoTransactionManagerTests.java","repoName":"isis","snippetEndLine":0,"snippetStartLine":0,"startLine":667,"status":"M"}],"commitId":"751cba2033a31d7dbbf22831a4925564e86235bd","commitMessage":"@@@ISIS-2845: Reinstate automatic injection into entities when resolved","date":"2021-08-19 14:53:32","modifiedFileCount":"6","status":"M","submitter":"Andi Huber"}]
