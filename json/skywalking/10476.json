[{"authorTime":"2019-05-15 22:42:38","codes":[{"authorDate":"2019-05-15 22:42:38","commitOrder":1,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, stream.name(), 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-05-15 22:42:38","endLine":63,"groupId":"4736","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/67/0ef931f99bd9e4e405b966d11db3031bae49f0.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, stream.name(), 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2019-05-15 22:42:38","commitOrder":1,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, stream.name(), 1000, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(recordClass, persistentWorker);\n    }\n","date":"2019-05-15 22:42:38","endLine":67,"groupId":"4736","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsRecord>recordClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3d/fb2fb8ff346033f65bf21e4e8c42bc1a48b2fa.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, stream.name(), 1000, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(recordClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"}],"commitId":"63fb961c0d1de02f053045c3bf80361ebd7bd58d","commitMessage":"@@@New OAP annotations.  they are friendly for streaming loader. (#2670)\n\n* New stream annotation.\n- Inventory annotation example:\n@Stream(name = ServiceInventory.INDEX_NAME.  scopeId = DefaultScopeDefine.SERVICE_INVENTORY.  storage = @Storage(builder = ServiceInventory.Builder.class.  deleteHistory = false).  kind = StreamKind.Inventory)\n\n- Metrics annotation example:\n@Stream(name = ServiceRelationClientSideMetrics.INDEX_NAME.  scopeId = DefaultScopeDefine.SERVICE_RELATION.  storage = @Storage(builder = ServiceRelationClientSideMetrics.Builder.class).  kind = StreamKind.Metrics)\n\n- Record annotation example:\n@Stream(name = SegmentRecord.INDEX_NAME.  scopeId = DefaultScopeDefine.SEGMENT.  storage = @Storage(builder = SegmentRecord.Builder.class).  kind = StreamKind.Record)\n\n- TopN annotation example:\n@Stream(name = TopNDatabaseStatement.INDEX_NAME.  scopeId = DefaultScopeDefine.DATABASE_SLOW_STATEMENT.  storage = @Storage(builder = TopNDatabaseStatement.Builder.class).  kind = StreamKind.TopN)\n\n* no message\n\n* Stream annotation finish.\n\n* Make stream processors to be the singleton class.\n\n* Fixed the compile errors.\n\n* Modify the OAL module for this annotation refactor.\n\n* Add apache license header.\n\n* Duplicate import.\n\n* Fixed check style error.\n","date":"2019-05-15 22:42:38","modifiedFileCount":"55","status":"B","submitter":"??? pengys"},{"authorTime":"2019-05-17 00:33:29","codes":[{"authorDate":"2019-05-17 00:33:29","commitOrder":2,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.name(), stream.scopeId(), stream.storage());\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model.getName(), 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-05-17 00:33:29","endLine":68,"groupId":"73","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/4b/a101d070a1dc5dbe856be72b55b933b68335dd.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, stream.name(), 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2019-05-17 00:33:29","commitOrder":2,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(recordClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Second);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model.getName(), 1000, recordDAO);\n\n        persistentWorkers.add(persistentWorker);\n        workers.put(recordClass, persistentWorker);\n    }\n","date":"2019-05-17 00:33:29","endLine":72,"groupId":"73","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsRecord>recordClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ff/2a636bba4ca520f798fb4a8ebd4c6798d831a9.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, stream.name(), 1000, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(recordClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"4eb5def126fcd0c0d0f04a47201341a25668c1a4","commitMessage":"@@@Manage models in one place. (#2695)\n\n","date":"2019-05-17 00:33:29","modifiedFileCount":"11","status":"M","submitter":"??? pengys"},{"authorTime":"2019-06-03 18:46:42","codes":[{"authorDate":"2019-06-03 18:46:42","commitOrder":3,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Minute);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-06-03 18:46:42","endLine":68,"groupId":"73","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e3/c648c6692b8b77d339a3f3276a1185c4222f88.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.name(), stream.scopeId(), stream.storage());\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model.getName(), 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2019-06-03 18:46:42","commitOrder":3,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(recordClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Minute);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, 1000, recordDAO);\n\n        persistentWorkers.add(persistentWorker);\n        workers.put(recordClass, persistentWorker);\n    }\n","date":"2019-06-03 18:46:42","endLine":72,"groupId":"73","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsRecord>recordClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e4/60b5a6c900f43d1ae8bc7d51cdbbea89e6c0ad.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(recordClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Second);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model.getName(), 1000, recordDAO);\n\n        persistentWorkers.add(persistentWorker);\n        workers.put(recordClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"5036e8334301322d49973005cd98513c17b0f28f","commitMessage":"@@@Good news of an important feature: time series implementation in Elasticsearch storage. (#2808)\n\n* The new feature of Elasticsearch storage with the time series implementation.\n\n* Time bucket util improve.\n\n* Fixed some Gramma error.\n\n* Update ttl.md\n\nPolish English a little.\n\n* Update ttl.md\n\nAdd more explicit description of TTL\n\n* Update ttl.md\n\n* Update StorageModuleElasticsearchConfig.java\n\nSet otherMetricsDataTTL = 0 as default.  make user more clear.\n\n* Rename the timeSeriesAble to capableOfTimeSeries\n\n* Fixed a test case failure.\n","date":"2019-06-03 18:46:42","modifiedFileCount":"46","status":"M","submitter":"??? pengys"},{"authorTime":"2019-06-04 09:53:50","codes":[{"authorDate":"2019-06-04 09:53:50","commitOrder":4,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute));\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-06-04 09:53:50","endLine":69,"groupId":"6438","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/92/a88a495150a169d77cec96c74a6490ad421ede.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Minute);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-06-04 09:53:50","commitOrder":4,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute));\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, 1000, recordDAO);\n\n        persistentWorkers.add(persistentWorker);\n        workers.put(recordClass, persistentWorker);\n    }\n","date":"2019-06-04 09:53:50","endLine":73,"groupId":"6438","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsRecord>recordClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/04/e772a5c12c83c52f0ba6cdf1067e0ab87752a5.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(recordClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Minute);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, 1000, recordDAO);\n\n        persistentWorkers.add(persistentWorker);\n        workers.put(recordClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"1f7125a02edc8e5090a661ea18c876b7c1c4d891","commitMessage":"@@@Remove storage annotation. (#2813)\n\n","date":"2019-06-04 09:53:50","modifiedFileCount":"22","status":"M","submitter":"??? pengys"},{"authorTime":"2019-06-12 08:17:15","codes":[{"authorDate":"2019-06-12 08:17:15","commitOrder":5,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second));\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-06-12 08:17:15","endLine":69,"groupId":"6438","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/03/ae693ef5cf3401bd726eb7ba031f77853f79ac.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute));\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-06-12 08:17:15","commitOrder":5,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second));\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, 1000, recordDAO);\n\n        persistentWorkers.add(persistentWorker);\n        workers.put(recordClass, persistentWorker);\n    }\n","date":"2019-06-12 08:17:15","endLine":73,"groupId":"6438","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsRecord>recordClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/64/83a118f739b0a29e29fd716e692389e9b8b3e6.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute));\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, 1000, recordDAO);\n\n        persistentWorkers.add(persistentWorker);\n        workers.put(recordClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"1c545a3708d2e382519741c6d6df5666e4cb4775","commitMessage":"@@@Fixed a time series bug about downsampling setting in processors are different from the setting in receivers. (#2856)\n\n#2851","date":"2019-06-12 08:17:15","modifiedFileCount":"3","status":"M","submitter":"??? pengys"},{"authorTime":"2019-07-20 22:59:52","codes":[{"authorDate":"2019-07-20 22:59:52","commitOrder":6,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-07-20 22:59:52","endLine":69,"groupId":"6438","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fc/b3a68808abcbeda3d833d121973004c48342df.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second));\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-07-20 22:59:52","commitOrder":6,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, 4000, recordDAO);\n\n        persistentWorkers.add(persistentWorker);\n        workers.put(recordClass, persistentWorker);\n    }\n","date":"2019-07-20 22:59:52","endLine":73,"groupId":"6438","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsRecord>recordClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b8/4d99b63b7b728a9da87c8a637dd9d37151cf63.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second));\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, 1000, recordDAO);\n\n        persistentWorkers.add(persistentWorker);\n        workers.put(recordClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"6338de392fe988e4bf46e8a6c5aadb92b946ddab","commitMessage":"@@@Improve OAP server performance. (#3127)\n\n* Improve OAP server performance.","date":"2019-07-20 22:59:52","modifiedFileCount":"23","status":"M","submitter":"??? pengys"},{"authorTime":"2019-07-21 15:51:24","codes":[{"authorDate":"2019-07-20 22:59:52","commitOrder":7,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-07-20 22:59:52","endLine":69,"groupId":"6438","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fc/b3a68808abcbeda3d833d121973004c48342df.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2019-07-21 15:51:24","commitOrder":7,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);\n\n        workers.put(recordClass, persistentWorker);\n    }\n","date":"2019-07-21 15:51:24","endLine":69,"groupId":"6438","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsRecord>recordClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/33/97f7519d7c57ba062ce52d6fe4b68704ccacbc.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, 4000, recordDAO);\n\n        persistentWorkers.add(persistentWorker);\n        workers.put(recordClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"8306ad45318ba1679c118658fb3761c62801b33f","commitMessage":"@@@Reduce the number of threads to improve performance. (#3133)\n\n* Refactor Persistence worker.\n\n* 1. Provide InsertRequest and UpdateRequest interface for prepare persistence.\n2. Implement the ids query for H2 metrics DAO.\n\n* Refactor worker framework\n\n* Use queue to receive asynchronous batch request.\n\n* Rename the Datacarrier thread name.\n\n* Fixed some mistake.\n\n* New mistake.\n","date":"2019-07-21 15:51:24","modifiedFileCount":"15","status":"M","submitter":"??? pengys"},{"authorTime":"2019-07-21 15:51:24","codes":[{"authorDate":"2019-11-19 17:26:30","commitOrder":8,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-11-19 17:26:30","endLine":72,"groupId":"6438","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/72/65d73a31a6058a9e7607f636565b50a1bf7a8a.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2019-07-21 15:51:24","commitOrder":8,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);\n\n        workers.put(recordClass, persistentWorker);\n    }\n","date":"2019-07-21 15:51:24","endLine":69,"groupId":"6438","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsRecord>recordClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/33/97f7519d7c57ba062ce52d6fe4b68704ccacbc.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);\n\n        workers.put(recordClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"5d064ced5f820a51dcc000341858ebe3b4416da5","commitMessage":"@@@make topN worker report period configurable. (#3892)\n\n","date":"2019-11-19 17:26:30","modifiedFileCount":"4","status":"M","submitter":"Jared Tan"},{"authorTime":"2020-03-30 18:56:26","codes":[{"authorDate":"2020-03-30 18:56:26","commitOrder":9,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        Model model = modelSetter.add(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2020-03-30 18:56:26","endLine":86,"groupId":"3050","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/97/cffb5ed231a40d2fe988544e2aeaf68cd6b18d.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-03-30 18:56:26","commitOrder":9,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        Model model = modelSetter.add(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);\n\n        workers.put(recordClass, persistentWorker);\n    }\n","date":"2020-03-30 18:56:26","endLine":74,"groupId":"3050","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsRecord>recordClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e1/ab46dec3c76648b233f0b09d6a5fe0459283ac.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);\n\n        workers.put(recordClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"e55073e51970ecb50d014094e4e9b8dcc7d8c0d9","commitMessage":"@@@OAP Core polish.  especially storage level (#4587)\n\n- Add length definition with reasonable default value.\n- #content of @Column has been renamed to storageOnly . I add this to many fields as they are not being query in any case.\n- Merge H2 and MySQL columntype mapping back to consistent.\n- Remove @IDColumn.\n- Support @QueryUnifiedIndex.\n- Refactor the MySQL and H2 installers to use @Column and @QueryUnifiedIndex definitions to create indices automatically. But the index naming rule has been changed to entityseqIDX. seq is the Increment Interger for every entity.\n- Support @MetricsExtension and insertOnly in the MetricsPersistentWorker worker.\n- Optimize MetricsStreamProcessor","date":"2020-03-30 18:56:26","modifiedFileCount":"58","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":10,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2020-04-10 11:03:24","endLine":88,"groupId":"3050","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e8/900d5ba4ad0fc0f5dc1454607980c45ea9dab5.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        Model model = modelSetter.add(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":10,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        Model model = modelSetter.add(\n            recordClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);\n\n        workers.put(recordClass, persistentWorker);\n    }\n","date":"2020-04-10 11:03:24","endLine":75,"groupId":"3050","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsRecord>recordClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ca/17aea17f5cd5cf1a8e6cf364ce9ad8c49f4830.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        Model model = modelSetter.add(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);\n\n        workers.put(recordClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-05-08 21:21:03","codes":[{"authorDate":"2020-05-08 21:21:03","commitOrder":11,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2020-05-08 21:21:03","endLine":89,"groupId":"2790","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8c/fc99fa9946bf8f96383b9db608f699909efc02.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-05-08 21:21:03","commitOrder":11,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            recordClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);\n\n        workers.put(recordClass, persistentWorker);\n    }\n","date":"2020-05-08 21:21:03","endLine":76,"groupId":"2790","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsRecord>recordClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/30/f9666d0e33df499ed58b3d7b7c8e74888a1f15.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        Model model = modelSetter.add(\n            recordClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);\n\n        workers.put(recordClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"7edcd5aa33cec034047871ac1348b5b858b630f0","commitMessage":"@@@Change the model installation into the reactive module (#4761)\n\n","date":"2020-05-08 21:21:03","modifiedFileCount":"31","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-02-07 10:37:14","codes":[{"authorDate":"2021-02-07 10:37:14","commitOrder":12,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(topNClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\n                \"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2021-02-07 10:37:14","endLine":93,"groupId":"1762","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5a/0c6a4793d28fa777e93d0c66fd5460b8a766c2.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2021-02-07 10:37:14","commitOrder":12,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(recordClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            recordClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);\n\n        workers.put(recordClass, persistentWorker);\n    }\n","date":"2021-02-07 10:37:14","endLine":81,"groupId":"1762","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsRecord>recordClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/23/a6531e1aaa7595ea8a1d6816d0f9ffe717a91a.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            recordClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);\n\n        workers.put(recordClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"5e8f1eb5528911f924ffca451af20dcdf6151971","commitMessage":"@@@Support multiple implementations of StorageBuilder in different storage implementations - stage 2 (#6336)\n\n","date":"2021-02-07 10:37:14","modifiedFileCount":"16","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-07-15 18:06:11","codes":[{"authorDate":"2021-07-15 18:06:11","commitOrder":13,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       Stream stream,\n                       Class<? extends TopN> topNClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(topNClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\n                \"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        \r\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), false, DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2021-07-15 18:06:11","endLine":96,"groupId":"10476","id":25,"instanceNumber":1,"isCurCommit":1,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/26/a8b373b9121f07656ca0893709cfef695d0130.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(topNClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\n                \"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2021-07-15 18:06:11","commitOrder":13,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(recordClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        \r\n        Model model = modelSetter.add(\n            recordClass, stream.scopeId(), new Storage(stream.name(), false, DownSampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);\n\n        workers.put(recordClass, persistentWorker);\n    }\n","date":"2021-07-15 18:06:11","endLine":82,"groupId":"10476","id":26,"instanceNumber":2,"isCurCommit":1,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsRecord>recordClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e1/c586d8303715d07da644664e32c247088444dd.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Record> recordClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(recordClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            recordClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);\n\n        workers.put(recordClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"c59ee900299d24d15780c0b1600c823c3ea111eb","commitMessage":"@@@Performance: optimize IDs read of ElasticSearch storage options(6 and 7) (#7307)\n\n* Performance: optimize IDs read of ElasticSearch storage options(6 and 7). Use the physical index rather than template alias name.","date":"2021-07-15 18:06:11","modifiedFileCount":"15","status":"M","submitter":"?? Wu Sheng"}]
