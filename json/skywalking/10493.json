[{"authorTime":"2020-03-04 14:44:54","codes":[{"authorDate":"2020-03-04 20:28:14","commitOrder":37,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-03-04 20:28:14","endLine":169,"groupId":"4310","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/61/43f9d8994b029d3b6c2527120894a31f515fa0.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2020-03-04 14:44:54","commitOrder":37,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-03-04 14:44:54","endLine":255,"groupId":"4310","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/41/75877f5cabce6357d35cbbe843790c6a4a364a.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"NB"}],"commitId":"0df2d0a5e9210e0c2a6c4f7e5fe350d3aa21cab0","commitMessage":"@@@Provide profile exporter tool (#4416)\n\n","date":"2020-03-04 20:28:14","modifiedFileCount":"2","status":"M","submitter":"mrproliu"},{"authorTime":"2020-03-15 08:15:28","codes":[{"authorDate":"2020-03-04 20:28:14","commitOrder":38,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-03-04 20:28:14","endLine":169,"groupId":"4310","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/61/43f9d8994b029d3b6c2527120894a31f515fa0.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2020-03-15 08:15:28","commitOrder":38,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile());\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath()).toFile());\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-03-15 08:15:28","endLine":267,"groupId":"4310","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/cd/4c63946f73bd7028e9a96aac554f330735e119.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"}],"commitId":"78d14ebbd6a62f3b90cf7e60d6d1c719754fadeb","commitMessage":"@@@Enable OAP gRPC SSL transportation (#4470)\n\n* Enable OAP gRPC SSL transportation\n\nPorting to OpenSSL to enable SSL transportation. The server private\nkey is in the format of PCKS#8.  certificates is x509 though.\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Add netty-tcnative-boringssl-static 2.0.26 licnese\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Update docs/en/setup/backend/grpc-ssl.md\n\nCo-Authored-By: kezhenxu94 <kezhenxu94@apache.org>\n\n* Update docs/en/setup/backend/grpc-ssl.md\n\nCo-Authored-By: kezhenxu94 <kezhenxu94@apache.org>\n\n* Add SSL to grpc remote client and sharing server\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Update documents\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Fix nits\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Fix test case\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Add e2e-ssl and remove other test cases temporarily\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Add TLS relevant files\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Decrease timeout\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Test config works\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* triger CI on oap-ssl branch\n\n* Disable agent ca\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Switch to sharing server\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Add agent log to console\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Upload log files\n\n* Change backend\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Revert \"Change backend\"\n\nThis reverts commit 7a085711e3653d3bf642aa84f73650e22595e383.\n\n* Update backend\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Revert e2e\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Ignore TSL relevant files\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Polish codes\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Update certificates expires year to 2120\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>\nCo-authored-by: kezhenxu94 <kezhenxu94@apache.org>","date":"2020-03-15 08:15:28","modifiedFileCount":"10","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2020-03-28 22:51:41","codes":[{"authorDate":"2020-03-28 22:51:41","commitOrder":39,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-03-28 22:51:41","endLine":169,"groupId":"4310","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/54/dda096e9bbe6d54423417693143155589eac9f.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2020-03-28 22:51:41","commitOrder":39,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-03-28 22:51:41","endLine":262,"groupId":"4310","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b7/d0fa5c8abd3d972408a1e0995fc005cda51989.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile());\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath()).toFile());\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"4474907fef809e2342b644a324da011834a55420","commitMessage":"@@@[Inventory Design Change] Remove endpoint register and endpoint inventory (#4570)\n\n* Finish step one.  source and entity changed.\n\n* Step 2.  finish the basic and core DAO changes.\n\n* Step 3. Change all source codes of backend.  and make project compiling successfully.\n\n* Make startup successful and persistence works.\n\n* Fix dead codes in the MySQLTableInstaller.\n\n* Fix mischange.\n\n* Fix MySQL storage bootstrap error.\n\n* Rollback dependency change.\n\n* Simply enable tailing logs from container no mater it's in CI or not\n\n* Fix segment table issue.\n\n* Fix MySQL Instanller.\n\n* Support Influxdb implementation of new endpoint traffic.\n\n* Set and modify timeout to 90mins\n\n* Remove unnecessary entity in the EndpointTraffic.\n\n* Fix wrong entity builder and make name more clear.\n\n* Fix 2 equal methods bug.\n\n* Fix InfluxDB identifier(name) conflict issue.\n\n* Fix endpoint topology query.  endpoint id should be changed as a string.\n\n* Fix a missing change.\n\n* Fix a wrong commit.\n\n* Column name can't be changed.  due to it affect the hybrid metadb(h2/mysql) query.  change it explicitly with double quotation marks.\n\n* Fix formats.\n\n* Remove endpoint/operation register from the agent. and change the plugin tests(without local tests). operationId relation codes have been removed from agent too.\n\n* Try to fix the hytrix case.\n\n* Fix 3 cases.\n\n* Try to fix cases.\n\n* Fix 2.\n\n* Fix one.\n\n* Fix the serviceId type mis-change.\n\n* Fix int query\n\n* Fix hystrix case.\n\n* Fix a case.\n\n* Fix EndpointCallRelationDispatcher set the source/dest endpoint without id encoding.\n\n* Update documentation and add 2 test cases.\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>","date":"2020-03-28 22:51:41","modifiedFileCount":"121","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-03-30 18:56:26","codes":[{"authorDate":"2020-03-30 18:56:26","commitOrder":40,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-03-30 18:56:26","endLine":169,"groupId":"4310","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f7/0a2e060799484128d8dc8db3a3fd38c14050d1.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2020-03-30 18:56:26","commitOrder":40,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-03-30 18:56:26","endLine":262,"groupId":"4310","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/54/7c57d6c12581ab8462873c97c9186796ed4d97.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"e55073e51970ecb50d014094e4e9b8dcc7d8c0d9","commitMessage":"@@@OAP Core polish.  especially storage level (#4587)\n\n- Add length definition with reasonable default value.\n- #content of @Column has been renamed to storageOnly . I add this to many fields as they are not being query in any case.\n- Merge H2 and MySQL columntype mapping back to consistent.\n- Remove @IDColumn.\n- Support @QueryUnifiedIndex.\n- Refactor the MySQL and H2 installers to use @Column and @QueryUnifiedIndex definitions to create indices automatically. But the index naming rule has been changed to entityseqIDX. seq is the Increment Interger for every entity.\n- Support @MetricsExtension and insertOnly in the MetricsPersistentWorker worker.\n- Optimize MetricsStreamProcessor","date":"2020-03-30 18:56:26","modifiedFileCount":"58","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-03-31 09:04:10","codes":[{"authorDate":"2020-03-30 18:56:26","commitOrder":41,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-03-30 18:56:26","endLine":169,"groupId":"4310","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f7/0a2e060799484128d8dc8db3a3fd38c14050d1.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"},{"authorDate":"2020-03-31 09:04:10","commitOrder":41,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        if (moduleConfig.getEndpointNameMaxLength() > 0) {\n            CoreModule.setEndpointNameMaxLength(moduleConfig.getEndpointNameMaxLength());\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-03-31 09:04:10","endLine":265,"groupId":"4310","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/43/d90c8f93bb9028d010561b54f3937abeff6e4c.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"54fb6e7285d695b1bd467edb6df0c3a3254adc12","commitMessage":"@@@Set the endpoint name length to 150.  to keep safe and avoid over-length. (#4595)\n\n* Set the endpoint name length to 150.  to keep safe and avoid over-length.\n\n* Set endpointNameMaxLength in the application.yml\n\n* Fix a mischange.\n\n* Correct the endpoint name length control logic\n\nCo-authored-by: kezhenxu94 <kezhenxu94@apache.org>","date":"2020-03-31 09:04:10","modifiedFileCount":"7","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":42,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-04-10 11:03:24","endLine":150,"groupId":"4565","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/21/8ab381cc662111690079fd73bde2a273e35581.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":42,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        if (moduleConfig.getEndpointNameMaxLength() > 0) {\n            CoreModule.setEndpointNameMaxLength(moduleConfig.getEndpointNameMaxLength());\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-04-10 11:03:24","endLine":246,"groupId":"5494","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/23cee065ad9d861e34bf965aa37005a81898a3.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        if (moduleConfig.getEndpointNameMaxLength() > 0) {\n            CoreModule.setEndpointNameMaxLength(moduleConfig.getEndpointNameMaxLength());\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 17:59:21","codes":[{"authorDate":"2020-04-10 17:59:21","commitOrder":43,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-04-10 17:59:21","endLine":153,"groupId":"4565","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/04/413b9a55807d27d04d139528ad11b29bada883.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2020-04-10 17:59:21","commitOrder":43,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-04-10 17:59:21","endLine":249,"groupId":"5494","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c2/3255c810bab915609a99237bfa218edece79aa.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        if (moduleConfig.getEndpointNameMaxLength() > 0) {\n            CoreModule.setEndpointNameMaxLength(moduleConfig.getEndpointNameMaxLength());\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"44cae97c259c06f95d1fc4b78ee41268670b6542","commitMessage":"@@@Set up restrict length rules for service.  instance and endpoint (#4633)\n\n* Set up restrict length rules for service.  instance and endpoint\n\n* Adjust two env names.","date":"2020-04-10 17:59:21","modifiedFileCount":"26","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-21 15:39:18","codes":[{"authorDate":"2020-04-21 15:39:18","commitOrder":44,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-04-21 15:39:18","endLine":153,"groupId":"4565","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b4/8790fb3c232bfca5ad7135706c21f1604eaf55.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2020-04-21 15:39:18","commitOrder":44,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-04-21 15:39:18","endLine":249,"groupId":"5494","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/03/a1be7537b88c7baef38e219cc72d92390986a8.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"418bdff277179b4660e578b1837f21fd3db514cb","commitMessage":"@@@New metrics query protocol v2 (#4679)\n\n1. Support the new query protocol.  and the v1 query protocol is still supported \n2. All `numOfxxx`/`GlobalBrief` is only a mock now.  no real number.\n3. typeOfMetrics service is a mock only too.  follow up PR will implement this.","date":"2020-04-21 15:39:18","modifiedFileCount":"123","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-22 13:14:59","codes":[{"authorDate":"2020-04-22 13:14:59","commitOrder":45,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-04-22 13:14:59","endLine":155,"groupId":"6597","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8f/32900144625138baa4a62ff6ee9e4775249378.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-04-22 13:14:59","commitOrder":45,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-04-22 13:14:59","endLine":251,"groupId":"6573","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/cf/811325f8b6faffabae0a47dec49ccd1c9a85f7.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"991d08337800b28dfe3c03eb8c166fe137c05e35","commitMessage":"@@@Support typeOfMetrics query (#4686)\n\n* Add data type to the column definition to replace the simple isValue definition. And top N query is also requiring value column now.\n\n* Support typeOfMetrics query.","date":"2020-04-22 13:14:59","modifiedFileCount":"28","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-24 23:33:13","codes":[{"authorDate":"2020-04-24 23:33:13","commitOrder":46,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        MeterSystem meterSystem = MeterSystem.meterSystem(getManager());\n        this.registerServiceImplementation(MeterSystem.class, meterSystem);\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-04-24 23:33:13","endLine":159,"groupId":"6597","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/41/2cb79d19995dc40938c708e311475db64049f8.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2020-04-24 23:33:13","commitOrder":46,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        MeterSystem meterSystem = MeterSystem.meterSystem(getManager());\n        this.registerServiceImplementation(MeterSystem.class, meterSystem);\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-04-24 23:33:13","endLine":255,"groupId":"6573","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/03/20650406edc5bec361253b195b7c72df7cd6e7.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"b635e254c4b327aca22469d0551c9b3a63d991b9","commitMessage":"@@@Provide Meter(metrics) system  (#4694)\n\nHere are the basic and simple usages of the MeterSystem APIs.\n\n## Meter Creation\nNew meter could be created based on metrics name.  function.  scope and data type. \n1. Metrics name is still the storage entity name.\n2. Functions are every similar with the OAL function.  just accepting different input.\n```java\nfinal MeterSystem meterSystem = MeterSystem.meterSystem(getManager());\nmeterSystem.create(\"test_long_metrics\".  \"avg\".  ScopeType.SERVICE.  Long.class);\n```\nNOTICE.  this creation should only be called in the `module#prepare` stage.  otherwise.  `Can't create new metrics anymore` exception will be raised after the **CORE** module `start` stage finished. You may find out.  there is a chance `create` could be executed successfully in your own `module#start` stage.  but it it just because of the sequence of provider loaded by the class loader.  **no guarantee.  so please don't do that**.\n\n## Runtime Calculation\n`AcceptableValue` is the object created at the runtime to accept new metrics value.\n```java\n         final MeterSystem service = getManager().find(CoreModule.NAME).provider().getService(MeterSystem.class);\n        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                final AcceptableValue<Long> value = service.buildMetrics(\"test_long_metrics\".  Long.class);\n                value.accept(MeterEntity.newService(\"abc\").  5L);\n                value.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\n                service.doStreamingCalculation(value);\n            }\n        }.  2.  2.  TimeUnit.SECONDS);\n```\n\n## Meter Functions\nRight now.  only `avg` function has been implemented. I submit this PR as soon as possible to get your feedback. I will add more functions.\n\n## Notice\n1. Make slow trace query available in the sampled record. Logically.  they are the same thing. The UI doesn't need to concern about the trace as a special case.\n2. Endpoint dependency will be removed from the dashboard. Because no query available for it. We will provide a new page for that in 8.1\n3. Comparison page will be removed due to dashboard is powerful enough to replace it.","date":"2020-04-24 23:33:13","modifiedFileCount":"10","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-05-08 21:21:03","codes":[{"authorDate":"2020-05-08 21:21:03","commitOrder":47,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-05-08 21:21:03","endLine":159,"groupId":"6408","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e2/451d5386ebf92bd8ec021bb5a789e26c0e4a92.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        MeterSystem meterSystem = MeterSystem.meterSystem(getManager());\n        this.registerServiceImplementation(MeterSystem.class, meterSystem);\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-05-08 21:21:03","commitOrder":47,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-05-08 21:21:03","endLine":255,"groupId":"6829","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/96/aa177b43e9ad3b2560cf935a0d2e7931464ad8.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        MeterSystem meterSystem = MeterSystem.meterSystem(getManager());\n        this.registerServiceImplementation(MeterSystem.class, meterSystem);\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"7edcd5aa33cec034047871ac1348b5b858b630f0","commitMessage":"@@@Change the model installation into the reactive module (#4761)\n\n","date":"2020-05-08 21:21:03","modifiedFileCount":"31","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-05-08 23:53:49","codes":[{"authorDate":"2020-05-08 23:53:49","commitOrder":48,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n    }\n","date":"2020-05-08 23:53:49","endLine":163,"groupId":"6408","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/00/d241d594437798e178177368dbb82cc2fc66fe.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2020-05-08 23:53:49","commitOrder":48,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-05-08 23:53:49","endLine":251,"groupId":"6829","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fc/ef1b02af89794a66d4c2e965a49de98c5c39ec.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"d4f3218dea29371fc23c66f5c72f5e48f88dd4be","commitMessage":"@@@Support define multiple OAL configuration (#4748)\n\n","date":"2020-05-08 23:53:49","modifiedFileCount":"25","status":"M","submitter":"zhang-wei"},{"authorTime":"2020-05-20 22:50:22","codes":[{"authorDate":"2020-05-20 22:50:22","commitOrder":49,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n            NamingControl.class,\n            new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n    }\n","date":"2020-05-20 22:50:22","endLine":167,"groupId":"6408","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/60292d19965660b23e37de378d437f1deb5b43.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2020-05-20 22:50:22","commitOrder":49,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-05-20 22:50:22","endLine":263,"groupId":"6829","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/cd/6430b49bcebacf4a52b1a519f41a059a26fd66.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"}],"commitId":"a10e04493272a88931d6916662b30d0a320287bb","commitMessage":"@@@Group Parameterized Endpoints (#4802)\n\n* Group Parameterized Endpoints. Configure the grouping rules for parameterized endpoints.  to improve the meaning of the metrics.\n","date":"2020-05-20 22:50:22","modifiedFileCount":"14","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-06-01 23:06:14","codes":[{"authorDate":"2020-06-01 23:06:14","commitOrder":50,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n    }\n","date":"2020-06-01 23:06:14","endLine":171,"groupId":"6408","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/71/f1d9ad6f885435aee5bfbca2f48af561ebf5dc.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n            NamingControl.class,\n            new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2020-06-01 23:06:14","commitOrder":50,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n                moduleConfig.getServiceNameMaxLength(),\n                moduleConfig.getInstanceNameMaxLength(),\n                moduleConfig.getEndpointNameMaxLength(),\n                endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                    this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                    Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                    Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n                moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n                .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                    Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                            .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-06-01 23:06:14","endLine":270,"groupId":"6829","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6a/eba0f64488bc2101685d403a654f6c3daebafc.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"}],"commitId":"d094a0f7c0b4a2cf0de38735128b5c07181e30d2","commitMessage":"@@@Support UI template management. (#4843)\n\n","date":"2020-06-01 23:06:14","modifiedFileCount":"32","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-07-25 17:41:49","codes":[{"authorDate":"2020-06-01 23:06:14","commitOrder":51,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n    }\n","date":"2020-06-01 23:06:14","endLine":171,"groupId":"6408","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/71/f1d9ad6f885435aee5bfbca2f48af561ebf5dc.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"N"},{"authorDate":"2020-07-25 17:41:49","commitOrder":51,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n                moduleConfig.getServiceNameMaxLength(),\n                moduleConfig.getInstanceNameMaxLength(),\n                moduleConfig.getEndpointNameMaxLength(),\n                endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                    this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                    Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                    Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                    Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                            .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-07-25 17:41:49","endLine":282,"groupId":"904","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/80/521caada46ba858af7945aad5ae337bf35b88c.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n                moduleConfig.getServiceNameMaxLength(),\n                moduleConfig.getInstanceNameMaxLength(),\n                moduleConfig.getEndpointNameMaxLength(),\n                endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                    this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                    Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                    Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n                moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n                .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                    Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                            .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"}],"commitId":"db9f8e6e008115d10ed8132b671e41229513beb7","commitMessage":"@@@Support Jetty server advanced configuration. (#5147)\n\n","date":"2020-07-25 17:41:49","modifiedFileCount":"8","status":"M","submitter":"Jared Tan"},{"authorTime":"2020-08-31 15:46:37","codes":[{"authorDate":"2020-08-31 15:46:37","commitOrder":52,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n    }\n","date":"2020-08-31 15:46:37","endLine":173,"groupId":"6408","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ab/d9839881b2dd7a467d8606da30db2e897031d9.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2020-08-31 15:46:37","commitOrder":52,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n                moduleConfig.getServiceNameMaxLength(),\n                moduleConfig.getInstanceNameMaxLength(),\n                moduleConfig.getEndpointNameMaxLength(),\n                endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                    this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                    Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                    Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                    Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                            .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-08-31 15:46:37","endLine":284,"groupId":"904","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b5/f9bec0c6d1cc59d007f5aa36a9a8339c1c0b15.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n                moduleConfig.getServiceNameMaxLength(),\n                moduleConfig.getInstanceNameMaxLength(),\n                moduleConfig.getEndpointNameMaxLength(),\n                endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                    this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                    Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                    Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                    Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                            .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"7ef8b3e476001154ba5d600f7206add0277d4d24","commitMessage":"@@@Support Browser protocol at OAP (#4228)\n\n","date":"2020-08-31 15:46:37","modifiedFileCount":"24","status":"M","submitter":"zhang-wei"},{"authorTime":"2020-08-31 23:11:01","codes":[{"authorDate":"2020-08-31 15:46:37","commitOrder":53,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n    }\n","date":"2020-08-31 15:46:37","endLine":173,"groupId":"6408","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ab/d9839881b2dd7a467d8606da30db2e897031d9.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"},{"authorDate":"2020-08-31 23:11:01","commitOrder":53,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n                moduleConfig.getServiceNameMaxLength(),\n                moduleConfig.getInstanceNameMaxLength(),\n                moduleConfig.getEndpointNameMaxLength(),\n                endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                    this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                    moduleConfig.getGRPCSslCertChainPath(),\n                    moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                    moduleConfig.getGRPCSslTrustedCAPath());\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-08-31 23:11:01","endLine":281,"groupId":"904","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/72/cebd5bb266ac287eddb18f62c8835f21ec8b8d.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n                moduleConfig.getServiceNameMaxLength(),\n                moduleConfig.getInstanceNameMaxLength(),\n                moduleConfig.getEndpointNameMaxLength(),\n                endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                    this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                    Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                    Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                    Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                            .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"}],"commitId":"30ce1959a7109cce22b4dee8064099789c37da0d","commitMessage":"@@@Hot reload gRPC certs of OAP. (#5376)\n\n","date":"2020-08-31 23:11:01","modifiedFileCount":"4","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2021-02-05 18:37:18","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":54,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","date":"2021-02-05 18:37:18","endLine":176,"groupId":"6408","id":35,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/07a41e3aaadbbcb0fda99537b05766d0876b2e.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2021-02-05 18:37:18","commitOrder":54,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-02-05 18:37:18","endLine":287,"groupId":"904","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/cb/dd38d5d02a20a687eba9354f0fcaaa3f691775.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"b92eac2cd6bf8774860b921ea04bafd59550a607","commitMessage":"@@@Add a new concept \"Event\" and its implementations to collect events (#6183)\n\n","date":"2021-02-05 18:37:18","modifiedFileCount":"15","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-04-05 20:11:34","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":55,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","date":"2021-02-05 18:37:18","endLine":176,"groupId":"6408","id":37,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/07a41e3aaadbbcb0fda99537b05766d0876b2e.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2021-04-05 20:11:34","commitOrder":55,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-04-05 20:11:34","endLine":289,"groupId":"904","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/38/929892f913f1928209697ef10dd9e84ab17c4f.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"2b85ba104175f0e121b381a4739101b7b7ee9cb8","commitMessage":"@@@Fix `disable` statement not working (#6687)\n\n","date":"2021-04-05 20:11:34","modifiedFileCount":"1","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-06-20 07:57:10","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":56,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","date":"2021-02-05 18:37:18","endLine":176,"groupId":"6408","id":39,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/07a41e3aaadbbcb0fda99537b05766d0876b2e.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2021-06-20 07:57:10","commitOrder":56,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-06-20 07:57:10","endLine":295,"groupId":"904","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9e/99bd1f09ea955c5660c7d76c0e42c49e58e300.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"19a068d7083b1849c088a4c8b9a246f1537649ad","commitMessage":"@@@Feature: support endpoint name grouping by OpenAPI definitions. (#7130)\n\n","date":"2021-06-20 07:57:10","modifiedFileCount":"5","status":"M","submitter":"wankai123"},{"authorTime":"2021-06-30 19:14:20","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":57,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","date":"2021-02-05 18:37:18","endLine":176,"groupId":"6408","id":41,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/07a41e3aaadbbcb0fda99537b05766d0876b2e.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2021-06-30 19:14:20","commitOrder":57,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        MetricsStreamProcessor.getInstance().setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-06-30 19:14:20","endLine":296,"groupId":"904","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a8/bbcbe8e35fb3673f13c929eda1154a31a2a75c.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"50a0bcbf7395c49029759a8cb1208271405cdcc4","commitMessage":"@@@Optimize L1 aggregation.  enhance gRPC client between L1 and L2 aggregation. (#7206)\n\n1.0Performance: Add L1 aggregation flush period.  which reduces the CPU load and helps young GC.\n\n2. Replace do not direct send after the first aggregation to reduce the network #6400.\n\n3. Enhance the DataCarrier to notify the consumer in no enqueue event in short term.\n\n4. L1 aggregation flush period still works even no further metrics generated.  powered by <3>\n\n5. Fix gRPC remote client OOM. The concurrency control mechanism failed.","date":"2021-06-30 19:14:20","modifiedFileCount":"8","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-07-01 23:25:52","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":58,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","date":"2021-02-05 18:37:18","endLine":176,"groupId":"6408","id":43,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/07a41e3aaadbbcb0fda99537b05766d0876b2e.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2021-07-01 23:25:52","commitOrder":58,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-07-01 23:25:52","endLine":298,"groupId":"904","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/af/6c2ecb31a854a59d2aa0cf415920b731217dde.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        MetricsStreamProcessor.getInstance().setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"f32d3d072081943e29a367ccb714b362f5acddc7","commitMessage":"@@@Enhance the storage session mechanism (#7221)\n\n","date":"2021-07-01 23:25:52","modifiedFileCount":"8","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-07-06 15:10:15","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":59,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","date":"2021-02-05 18:37:18","endLine":176,"groupId":"6408","id":45,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/07a41e3aaadbbcb0fda99537b05766d0876b2e.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2021-07-06 15:10:15","commitOrder":59,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .jettyHttpMaxRequestHeaderSize(\n                                                                   moduleConfig.getHttpMaxRequestHeaderSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-07-06 15:10:15","endLine":300,"groupId":"4460","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/31/f511290374fc77bcbd3ca113cbce8fe9252619.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"d15b67bd97cfe8386df0c61198d9f1ca2060089b","commitMessage":"@@@Allow configuring max request header size (#7249)\n\n* Allow configuring max request header size\n\nThis allows configuring the HTTP max request header size from the jetty\nserver.\nBy default it uses 8192.  the same jetty default.\n","date":"2021-07-06 15:10:15","modifiedFileCount":"6","status":"M","submitter":"Sergi Castro"},{"authorTime":"2021-07-20 07:50:27","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":60,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","date":"2021-02-05 18:37:18","endLine":176,"groupId":"6408","id":47,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/07a41e3aaadbbcb0fda99537b05766d0876b2e.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2021-07-20 07:50:27","commitOrder":60,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .jettyHttpMaxRequestHeaderSize(\n                                                                   moduleConfig.getHttpMaxRequestHeaderSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        if (moduleConfig.getMetricsDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Metric TTL should be at least 2 days, current value is \" + moduleConfig.getMetricsDataTTL());\n        }\n        if (moduleConfig.getRecordDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Record TTL should be at least 2 days, current value is \" + moduleConfig.getRecordDataTTL());\n        }\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        metricsStreamProcessor.setMetricsDataTTL(moduleConfig.getMetricsDataTTL());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-07-20 07:50:27","endLine":310,"groupId":"4460","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1b/e58a3280675ee065f3fbc6dab69bedea121948.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .jettyHttpMaxRequestHeaderSize(\n                                                                   moduleConfig.getHttpMaxRequestHeaderSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"3a4ee08e54bd3f08441f1023fd25442d6a2badde","commitMessage":"@@@Enhance persistent session timeout mechanism. (#7334)\n\nFix bug.  the enhanced session could cache the metadata metrics(hot entity) forever. A new timeout mechanism is designed for avoiding this specific case.\n\nOptimize this timeout mechanism.  make it different for ES(one index per day) and non-ES storage implementation.","date":"2021-07-20 07:50:27","modifiedFileCount":"5","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-07-29 19:55:22","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":61,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","date":"2021-02-05 18:37:18","endLine":176,"groupId":"6408","id":49,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/07a41e3aaadbbcb0fda99537b05766d0876b2e.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2021-07-29 19:55:22","commitOrder":61,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .jettyHttpMaxRequestHeaderSize(\n                                                                   moduleConfig.getHttpMaxRequestHeaderSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        if (moduleConfig.getMetricsDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Metric TTL should be at least 2 days, current value is \" + moduleConfig.getMetricsDataTTL());\n        }\n        if (moduleConfig.getRecordDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Record TTL should be at least 2 days, current value is \" + moduleConfig.getRecordDataTTL());\n        }\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        metricsStreamProcessor.setMetricsDataTTL(moduleConfig.getMetricsDataTTL());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n        loggingConfigWatcher = new LoggingConfigWatcher(this);\n    }\n","date":"2021-07-29 19:55:22","endLine":313,"groupId":"4460","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d6/b1b9795463f5cff60359b395a3a0316a9d85e4.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .jettyHttpMaxRequestHeaderSize(\n                                                                   moduleConfig.getHttpMaxRequestHeaderSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        if (moduleConfig.getMetricsDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Metric TTL should be at least 2 days, current value is \" + moduleConfig.getMetricsDataTTL());\n        }\n        if (moduleConfig.getRecordDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Record TTL should be at least 2 days, current value is \" + moduleConfig.getRecordDataTTL());\n        }\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        metricsStreamProcessor.setMetricsDataTTL(moduleConfig.getMetricsDataTTL());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"1f28d2036a0581d6d891933a9cc1933c3990eea4","commitMessage":"@@@Add logging module to load log configuration dynamically (#7377)\n\n* Add logging module to load log configuration dynamically\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>","date":"2021-07-29 19:55:22","modifiedFileCount":"3","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2021-09-03 09:17:16","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":62,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","date":"2021-02-05 18:37:18","endLine":176,"groupId":"10493","id":51,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/07a41e3aaadbbcb0fda99537b05766d0876b2e.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2021-09-03 09:17:16","commitOrder":62,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath(),\n                                        null\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .jettyHttpMaxRequestHeaderSize(\n                                                                   moduleConfig.getHttpMaxRequestHeaderSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        if (moduleConfig.getMetricsDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Metric TTL should be at least 2 days, current value is \" + moduleConfig.getMetricsDataTTL());\n        }\n        if (moduleConfig.getRecordDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Record TTL should be at least 2 days, current value is \" + moduleConfig.getRecordDataTTL());\n        }\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        metricsStreamProcessor.setMetricsDataTTL(moduleConfig.getMetricsDataTTL());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n        loggingConfigWatcher = new LoggingConfigWatcher(this);\n    }\n","date":"2021-09-03 09:17:16","endLine":314,"groupId":"10493","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/b5443ad2b6dcf1095b9345354cb0f8fd3fc95b.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .jettyHttpMaxRequestHeaderSize(\n                                                                   moduleConfig.getHttpMaxRequestHeaderSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        if (moduleConfig.getMetricsDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Metric TTL should be at least 2 days, current value is \" + moduleConfig.getMetricsDataTTL());\n        }\n        if (moduleConfig.getRecordDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Record TTL should be at least 2 days, current value is \" + moduleConfig.getRecordDataTTL());\n        }\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        metricsStreamProcessor.setMetricsDataTTL(moduleConfig.getMetricsDataTTL());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n        loggingConfigWatcher = new LoggingConfigWatcher(this);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"0b67d29996a80b5f4fc4ce3619e9eec17dc5ac61","commitMessage":"@@@Support mTLS for gRPC channel (#7565)\n\n","date":"2021-09-03 09:17:16","modifiedFileCount":"8","status":"M","submitter":"Daming"}]
