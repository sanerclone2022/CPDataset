[{"authorTime":"2021-03-17 09:02:38","codes":[{"authorDate":"2021-03-17 09:02:38","commitOrder":1,"curCode":"    public void testSingle() {\n        analyzer = Analyzer.build(\n            \"sum_service_instance\",\n            \"http_success_request.sum(['region', 'idc']).instance(['idc'] , ['region'])\",\n            meterSystem\n        );\n        ImmutableMap<String, SampleFamily> input = ImmutableMap.of(\n            \"http_success_request\", SampleFamilyBuilder.newBuilder(\n                Sample.builder().labels(of(\"idc\", \"t1\")).value(50).build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"svc\", \"catalog\")).value(51).build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"svc\", \"product\")).value(50).build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"instance\", \"10.0.0.1\")).value(100).build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"instance\", \"10.0.0.1\")).value(3).build()\n            ).build()\n        );\n\n        Map<String, AvgFunction> actValues = new HashMap<>();\n        doAnswer(invocationOnMock -> {\n            AvgFunction actValue = (AvgFunction) invocationOnMock.getArgument(\n                0, AcceptableValue.class);\n            actValues.put(actValue.getEntityId(), actValue);\n            return null;\n        }).when(meterSystem).doStreamingCalculation(any());\n        analyzer.analyse(input);\n\n        AvgFunction t1 = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"\"));\n        AvgFunction t1Us = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"us\"));\n        AvgFunction t3Cn = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t3\", true), \"cn\"));\n\n        Assert.assertEquals(50L, t1.getSummation(), 0.0);\n        Assert.assertEquals(1L, t1.getCount(), 0.0);\n\n        Assert.assertEquals(150L, t1Us.getSummation(), 0.0);\n        Assert.assertEquals(1L, t1Us.getCount(), 0.0);\n\n        Assert.assertEquals(54L, t3Cn.getSummation(), 0.0);\n        Assert.assertEquals(1L, t3Cn.getCount(), 0.0);\n    }\n","date":"2021-03-17 09:02:38","endLine":111,"groupId":"5760","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/18/94799ac156ff786acdbe11aea34438eb381e27.src","preCode":"    public void testSingle() {\n        analyzer = Analyzer.build(\n            \"sum_service_instance\",\n            \"http_success_request.sum(['region', 'idc']).instance(['idc'] , ['region'])\",\n            meterSystem\n        );\n        ImmutableMap<String, SampleFamily> input = ImmutableMap.of(\n            \"http_success_request\", SampleFamilyBuilder.newBuilder(\n                Sample.builder().labels(of(\"idc\", \"t1\")).value(50).build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"svc\", \"catalog\")).value(51).build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"svc\", \"product\")).value(50).build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"instance\", \"10.0.0.1\")).value(100).build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"instance\", \"10.0.0.1\")).value(3).build()\n            ).build()\n        );\n\n        Map<String, AvgFunction> actValues = new HashMap<>();\n        doAnswer(invocationOnMock -> {\n            AvgFunction actValue = (AvgFunction) invocationOnMock.getArgument(\n                0, AcceptableValue.class);\n            actValues.put(actValue.getEntityId(), actValue);\n            return null;\n        }).when(meterSystem).doStreamingCalculation(any());\n        analyzer.analyse(input);\n\n        AvgFunction t1 = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"\"));\n        AvgFunction t1Us = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"us\"));\n        AvgFunction t3Cn = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t3\", true), \"cn\"));\n\n        Assert.assertEquals(50L, t1.getSummation(), 0.0);\n        Assert.assertEquals(1L, t1.getCount(), 0.0);\n\n        Assert.assertEquals(150L, t1Us.getSummation(), 0.0);\n        Assert.assertEquals(1L, t1Us.getCount(), 0.0);\n\n        Assert.assertEquals(54L, t3Cn.getSummation(), 0.0);\n        Assert.assertEquals(1L, t3Cn.getCount(), 0.0);\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/test/java/org/apache/skywalking/oap/meter/analyzer/dsl/AnalyzerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2021-03-17 09:02:38","commitOrder":1,"curCode":"    public void testLabeled() {\n        analyzer = Analyzer.build(\n            \"sum_service_instance_labels\",\n            \"http_success_request.sum(['region', 'idc' , 'instance']).instance(['idc'] , ['region'])\",\n            meterSystem\n        );\n        ImmutableMap<String, SampleFamily> input = ImmutableMap.of(\n            \"http_success_request\", SampleFamilyBuilder.newBuilder(\n                Sample.builder().labels(of(\"idc\", \"t1\")).value(50).build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"svc\", \"catalog\")).value(51).build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"svc\", \"product\")).value(50).build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"instance\", \"10.0.0.1\")).value(100).build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"instance\", \"10.0.0.1\")).value(3).build()\n            ).build()\n        );\n\n        Map<String, AvgLabeledFunction> actValues = new HashMap<>();\n        doAnswer(invocationOnMock -> {\n            AvgLabeledFunction actValue = (AvgLabeledFunction) invocationOnMock.getArgument(\n                0, AcceptableValue.class);\n            actValues.put(actValue.getEntityId(), actValue);\n            return null;\n        }).when(meterSystem).doStreamingCalculation(any());\n\n        analyzer.analyse(input);\n\n        AvgLabeledFunction t1 = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"\"));\n        AvgLabeledFunction t1Us = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"us\"));\n        AvgLabeledFunction t3Cn = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t3\", true), \"cn\"));\n\n        Assert.assertEquals(50L, t1.getSummation().get(\"\"), 0.0);\n        Assert.assertEquals(1L, t1.getCount().get(\"\"), 0.0);\n\n        Assert.assertEquals(50L, t1Us.getSummation().get(\"\"), 0.0);\n        Assert.assertEquals(100L, t1Us.getSummation().get(\"10.0.0.1\"), 0.0);\n        Assert.assertEquals(1L, t1Us.getCount().get(\"\"), 0.0);\n        Assert.assertEquals(1L, t1Us.getCount().get(\"10.0.0.1\"), 0.0);\n\n        Assert.assertEquals(51L, t3Cn.getSummation().get(\"\"), 0.0);\n        Assert.assertEquals(3L, t3Cn.getSummation().get(\"10.0.0.1\"), 0.0);\n        Assert.assertEquals(1L, t3Cn.getCount().get(\"\"), 0.0);\n        Assert.assertEquals(1L, t3Cn.getCount().get(\"10.0.0.1\"), 0.0);\n    }\n","date":"2021-03-17 09:02:38","endLine":159,"groupId":"5760","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLabeled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/18/94799ac156ff786acdbe11aea34438eb381e27.src","preCode":"    public void testLabeled() {\n        analyzer = Analyzer.build(\n            \"sum_service_instance_labels\",\n            \"http_success_request.sum(['region', 'idc' , 'instance']).instance(['idc'] , ['region'])\",\n            meterSystem\n        );\n        ImmutableMap<String, SampleFamily> input = ImmutableMap.of(\n            \"http_success_request\", SampleFamilyBuilder.newBuilder(\n                Sample.builder().labels(of(\"idc\", \"t1\")).value(50).build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"svc\", \"catalog\")).value(51).build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"svc\", \"product\")).value(50).build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"instance\", \"10.0.0.1\")).value(100).build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"instance\", \"10.0.0.1\")).value(3).build()\n            ).build()\n        );\n\n        Map<String, AvgLabeledFunction> actValues = new HashMap<>();\n        doAnswer(invocationOnMock -> {\n            AvgLabeledFunction actValue = (AvgLabeledFunction) invocationOnMock.getArgument(\n                0, AcceptableValue.class);\n            actValues.put(actValue.getEntityId(), actValue);\n            return null;\n        }).when(meterSystem).doStreamingCalculation(any());\n\n        analyzer.analyse(input);\n\n        AvgLabeledFunction t1 = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"\"));\n        AvgLabeledFunction t1Us = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"us\"));\n        AvgLabeledFunction t3Cn = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t3\", true), \"cn\"));\n\n        Assert.assertEquals(50L, t1.getSummation().get(\"\"), 0.0);\n        Assert.assertEquals(1L, t1.getCount().get(\"\"), 0.0);\n\n        Assert.assertEquals(50L, t1Us.getSummation().get(\"\"), 0.0);\n        Assert.assertEquals(100L, t1Us.getSummation().get(\"10.0.0.1\"), 0.0);\n        Assert.assertEquals(1L, t1Us.getCount().get(\"\"), 0.0);\n        Assert.assertEquals(1L, t1Us.getCount().get(\"10.0.0.1\"), 0.0);\n\n        Assert.assertEquals(51L, t3Cn.getSummation().get(\"\"), 0.0);\n        Assert.assertEquals(3L, t3Cn.getSummation().get(\"10.0.0.1\"), 0.0);\n        Assert.assertEquals(1L, t3Cn.getCount().get(\"\"), 0.0);\n        Assert.assertEquals(1L, t3Cn.getCount().get(\"10.0.0.1\"), 0.0);\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/test/java/org/apache/skywalking/oap/meter/analyzer/dsl/AnalyzerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"B"}],"commitId":"a8810b1ab0b50fe439bc14517281fca7e82489b2","commitMessage":"@@@Support metrics grouped by scope labelValue in MAL.  no need global same labelValue as before. (#6495)\n\n","date":"2021-03-17 09:02:38","modifiedFileCount":"2","status":"B","submitter":"wankai123"},{"authorTime":"2021-04-28 23:09:57","codes":[{"authorDate":"2021-04-28 23:09:57","commitOrder":2,"curCode":"    public void testSingle() {\n        analyzer = Analyzer.build(\n            \"sum_service_instance\",\n            \"http_success_request.sum(['region', 'idc']).instance(['idc'] , ['region'])\",\n            meterSystem\n        );\n        ImmutableMap<String, SampleFamily> input = ImmutableMap.of(\n            \"http_success_request\", SampleFamilyBuilder.newBuilder(\n                Sample.builder().labels(of(\"idc\", \"t1\")).value(50).build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"svc\", \"catalog\")).value(51).name(\"http_success_request\").build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"svc\", \"product\")).value(50).name(\"http_success_request\").build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"instance\", \"10.0.0.1\")).value(100).name(\"http_success_request\").build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"instance\", \"10.0.0.1\")).value(3).name(\"http_success_request\").build()\n            ).build()\n        );\n\n        Map<String, AvgFunction> actValues = new HashMap<>();\n        doAnswer(invocationOnMock -> {\n            AvgFunction actValue = (AvgFunction) invocationOnMock.getArgument(\n                0, AcceptableValue.class);\n            actValues.put(actValue.getEntityId(), actValue);\n            return null;\n        }).when(meterSystem).doStreamingCalculation(any());\n        analyzer.analyse(input);\n\n        AvgFunction t1 = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"\"));\n        AvgFunction t1Us = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"us\"));\n        AvgFunction t3Cn = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t3\", true), \"cn\"));\n\n        Assert.assertEquals(50L, t1.getSummation(), 0.0);\n        Assert.assertEquals(1L, t1.getCount(), 0.0);\n\n        Assert.assertEquals(150L, t1Us.getSummation(), 0.0);\n        Assert.assertEquals(1L, t1Us.getCount(), 0.0);\n\n        Assert.assertEquals(54L, t3Cn.getSummation(), 0.0);\n        Assert.assertEquals(1L, t3Cn.getCount(), 0.0);\n    }\n","date":"2021-04-28 23:09:57","endLine":111,"groupId":"10722","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testSingle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/20/639cc2b390d882f7ed76523323eaea77fc7c1d.src","preCode":"    public void testSingle() {\n        analyzer = Analyzer.build(\n            \"sum_service_instance\",\n            \"http_success_request.sum(['region', 'idc']).instance(['idc'] , ['region'])\",\n            meterSystem\n        );\n        ImmutableMap<String, SampleFamily> input = ImmutableMap.of(\n            \"http_success_request\", SampleFamilyBuilder.newBuilder(\n                Sample.builder().labels(of(\"idc\", \"t1\")).value(50).build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"svc\", \"catalog\")).value(51).build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"svc\", \"product\")).value(50).build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"instance\", \"10.0.0.1\")).value(100).build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"instance\", \"10.0.0.1\")).value(3).build()\n            ).build()\n        );\n\n        Map<String, AvgFunction> actValues = new HashMap<>();\n        doAnswer(invocationOnMock -> {\n            AvgFunction actValue = (AvgFunction) invocationOnMock.getArgument(\n                0, AcceptableValue.class);\n            actValues.put(actValue.getEntityId(), actValue);\n            return null;\n        }).when(meterSystem).doStreamingCalculation(any());\n        analyzer.analyse(input);\n\n        AvgFunction t1 = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"\"));\n        AvgFunction t1Us = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"us\"));\n        AvgFunction t3Cn = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t3\", true), \"cn\"));\n\n        Assert.assertEquals(50L, t1.getSummation(), 0.0);\n        Assert.assertEquals(1L, t1.getCount(), 0.0);\n\n        Assert.assertEquals(150L, t1Us.getSummation(), 0.0);\n        Assert.assertEquals(1L, t1Us.getCount(), 0.0);\n\n        Assert.assertEquals(54L, t3Cn.getSummation(), 0.0);\n        Assert.assertEquals(1L, t3Cn.getCount(), 0.0);\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/test/java/org/apache/skywalking/oap/meter/analyzer/dsl/AnalyzerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2021-04-28 23:09:57","commitOrder":2,"curCode":"    public void testLabeled() {\n        analyzer = Analyzer.build(\n            \"sum_service_instance_labels\",\n            \"http_success_request.sum(['region', 'idc' , 'instance']).instance(['idc'] , ['region'])\",\n            meterSystem\n        );\n        ImmutableMap<String, SampleFamily> input = ImmutableMap.of(\n            \"http_success_request\", SampleFamilyBuilder.newBuilder(\n                Sample.builder().labels(of(\"idc\", \"t1\")).value(50).build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"svc\", \"catalog\")).value(51).name(\"http_success_request\").build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"svc\", \"product\")).value(50).name(\"http_success_request\").build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"instance\", \"10.0.0.1\")).value(100).name(\"http_success_request\").build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"instance\", \"10.0.0.1\")).value(3).name(\"http_success_request\").build()\n            ).build()\n        );\n\n        Map<String, AvgLabeledFunction> actValues = new HashMap<>();\n        doAnswer(invocationOnMock -> {\n            AvgLabeledFunction actValue = (AvgLabeledFunction) invocationOnMock.getArgument(\n                0, AcceptableValue.class);\n            actValues.put(actValue.getEntityId(), actValue);\n            return null;\n        }).when(meterSystem).doStreamingCalculation(any());\n\n        analyzer.analyse(input);\n\n        AvgLabeledFunction t1 = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"\"));\n        AvgLabeledFunction t1Us = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"us\"));\n        AvgLabeledFunction t3Cn = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t3\", true), \"cn\"));\n\n        Assert.assertEquals(50L, t1.getSummation().get(\"\"), 0.0);\n        Assert.assertEquals(1L, t1.getCount().get(\"\"), 0.0);\n\n        Assert.assertEquals(50L, t1Us.getSummation().get(\"\"), 0.0);\n        Assert.assertEquals(100L, t1Us.getSummation().get(\"10.0.0.1\"), 0.0);\n        Assert.assertEquals(1L, t1Us.getCount().get(\"\"), 0.0);\n        Assert.assertEquals(1L, t1Us.getCount().get(\"10.0.0.1\"), 0.0);\n\n        Assert.assertEquals(51L, t3Cn.getSummation().get(\"\"), 0.0);\n        Assert.assertEquals(3L, t3Cn.getSummation().get(\"10.0.0.1\"), 0.0);\n        Assert.assertEquals(1L, t3Cn.getCount().get(\"\"), 0.0);\n        Assert.assertEquals(1L, t3Cn.getCount().get(\"10.0.0.1\"), 0.0);\n    }\n","date":"2021-04-28 23:09:57","endLine":159,"groupId":"10722","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testLabeled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/20/639cc2b390d882f7ed76523323eaea77fc7c1d.src","preCode":"    public void testLabeled() {\n        analyzer = Analyzer.build(\n            \"sum_service_instance_labels\",\n            \"http_success_request.sum(['region', 'idc' , 'instance']).instance(['idc'] , ['region'])\",\n            meterSystem\n        );\n        ImmutableMap<String, SampleFamily> input = ImmutableMap.of(\n            \"http_success_request\", SampleFamilyBuilder.newBuilder(\n                Sample.builder().labels(of(\"idc\", \"t1\")).value(50).build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"svc\", \"catalog\")).value(51).build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"svc\", \"product\")).value(50).build(),\n                Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"instance\", \"10.0.0.1\")).value(100).build(),\n                Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"instance\", \"10.0.0.1\")).value(3).build()\n            ).build()\n        );\n\n        Map<String, AvgLabeledFunction> actValues = new HashMap<>();\n        doAnswer(invocationOnMock -> {\n            AvgLabeledFunction actValue = (AvgLabeledFunction) invocationOnMock.getArgument(\n                0, AcceptableValue.class);\n            actValues.put(actValue.getEntityId(), actValue);\n            return null;\n        }).when(meterSystem).doStreamingCalculation(any());\n\n        analyzer.analyse(input);\n\n        AvgLabeledFunction t1 = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"\"));\n        AvgLabeledFunction t1Us = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t1\", true), \"us\"));\n        AvgLabeledFunction t3Cn = actValues.get(IDManager.ServiceInstanceID.buildId(\n            IDManager.ServiceID.buildId(\"t3\", true), \"cn\"));\n\n        Assert.assertEquals(50L, t1.getSummation().get(\"\"), 0.0);\n        Assert.assertEquals(1L, t1.getCount().get(\"\"), 0.0);\n\n        Assert.assertEquals(50L, t1Us.getSummation().get(\"\"), 0.0);\n        Assert.assertEquals(100L, t1Us.getSummation().get(\"10.0.0.1\"), 0.0);\n        Assert.assertEquals(1L, t1Us.getCount().get(\"\"), 0.0);\n        Assert.assertEquals(1L, t1Us.getCount().get(\"10.0.0.1\"), 0.0);\n\n        Assert.assertEquals(51L, t3Cn.getSummation().get(\"\"), 0.0);\n        Assert.assertEquals(3L, t3Cn.getSummation().get(\"10.0.0.1\"), 0.0);\n        Assert.assertEquals(1L, t3Cn.getCount().get(\"\"), 0.0);\n        Assert.assertEquals(1L, t3Cn.getCount().get(\"10.0.0.1\"), 0.0);\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/test/java/org/apache/skywalking/oap/meter/analyzer/dsl/AnalyzerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"db1d655b47ff976586eb1ac5e63f5feb3275b6a6","commitMessage":"@@@Fix: MAL function would miss samples name after creating new samples. (#6864)\n\n","date":"2021-04-28 23:09:57","modifiedFileCount":"11","status":"M","submitter":"wankai123"}]
