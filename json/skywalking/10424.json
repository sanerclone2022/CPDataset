[{"authorTime":"2020-10-21 16:45:47","codes":[{"authorDate":"2020-10-21 16:45:47","commitOrder":1,"curCode":"    public void calculate() {\n        if (!isCalculated) {\n            final Set<String> keys = summation.keys();\n            for (String key : keys) {\n                long value = 0;\n                if (count.get(key) != 0) {\n                    value = summation.get(key) / count.get(key);\n                    if (value == 0L && summation.get(key) > 0L) {\n                        value = 1;\n                    }\n                }\n                dataset.put(key, value);\n            }\n            dataset.keys().stream()\n                .map(key -> {\n                    if (key.contains(\":\")) {\n                        String[] kk = key.split(\":\");\n                        return Tuple.of(kk[0], key);\n                    } else {\n                        return Tuple.of(DEFAULT_GROUP, key);\n                    }\n                })\n                .collect(groupingBy(Tuple2::_1, mapping(Tuple2::_2, Collector.of(\n                    DataTable::new,\n                    (dt, key) -> dt.put(key.contains(\":\") ? key.split(\":\")[1] : key, dataset.get(key)),\n                    DataTable::append))))\n                .forEach((group, subDataset) -> {\n                    long total;\n                    total = subDataset.sumOfValues();\n\n                    int[] roofs = new int[ranks.size()];\n                    for (int i = 0; i < ranks.size(); i++) {\n                        roofs[i] = Math.round(total * ranks.get(i) * 1.0f / 100);\n                    }\n\n                    int count = 0;\n                    final List<String> sortedKeys = subDataset.sortedKeys(Comparator.comparingLong(Long::parseLong));\n\n                    int loopIndex = 0;\n\n                    for (String key : sortedKeys) {\n                        final Long value = subDataset.get(key);\n\n                        count += value;\n                        for (int rankIdx = loopIndex; rankIdx < roofs.length; rankIdx++) {\n                            int roof = roofs[rankIdx];\n\n                            if (count >= roof) {\n                                if (group.equals(DEFAULT_GROUP)) {\n                                    percentileValues.put(String.valueOf(ranks.get(rankIdx)), Long.parseLong(key));\n                                } else {\n                                    percentileValues.put(String.format(\"%s:%s\", group, ranks.get(rankIdx)), Long.parseLong(key));\n                                }\n                                loopIndex++;\n                            } else {\n                                break;\n                            }\n                        }\n                    }\n                });\n        }\n    }\n","date":"2020-10-21 16:45:47","endLine":242,"groupId":"2441","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"calculate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3f/3e2b254f016da63ed8872247bef861d2a5ef78.src","preCode":"    public void calculate() {\n        if (!isCalculated) {\n            final Set<String> keys = summation.keys();\n            for (String key : keys) {\n                long value = 0;\n                if (count.get(key) != 0) {\n                    value = summation.get(key) / count.get(key);\n                    if (value == 0L && summation.get(key) > 0L) {\n                        value = 1;\n                    }\n                }\n                dataset.put(key, value);\n            }\n            dataset.keys().stream()\n                .map(key -> {\n                    if (key.contains(\":\")) {\n                        String[] kk = key.split(\":\");\n                        return Tuple.of(kk[0], key);\n                    } else {\n                        return Tuple.of(DEFAULT_GROUP, key);\n                    }\n                })\n                .collect(groupingBy(Tuple2::_1, mapping(Tuple2::_2, Collector.of(\n                    DataTable::new,\n                    (dt, key) -> dt.put(key.contains(\":\") ? key.split(\":\")[1] : key, dataset.get(key)),\n                    DataTable::append))))\n                .forEach((group, subDataset) -> {\n                    long total;\n                    total = subDataset.sumOfValues();\n\n                    int[] roofs = new int[ranks.size()];\n                    for (int i = 0; i < ranks.size(); i++) {\n                        roofs[i] = Math.round(total * ranks.get(i) * 1.0f / 100);\n                    }\n\n                    int count = 0;\n                    final List<String> sortedKeys = subDataset.sortedKeys(Comparator.comparingLong(Long::parseLong));\n\n                    int loopIndex = 0;\n\n                    for (String key : sortedKeys) {\n                        final Long value = subDataset.get(key);\n\n                        count += value;\n                        for (int rankIdx = loopIndex; rankIdx < roofs.length; rankIdx++) {\n                            int roof = roofs[rankIdx];\n\n                            if (count >= roof) {\n                                if (group.equals(DEFAULT_GROUP)) {\n                                    percentileValues.put(String.valueOf(ranks.get(rankIdx)), Long.parseLong(key));\n                                } else {\n                                    percentileValues.put(String.format(\"%s:%s\", group, ranks.get(rankIdx)), Long.parseLong(key));\n                                }\n                                loopIndex++;\n                            } else {\n                                break;\n                            }\n                        }\n                    }\n                });\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"B"},{"authorDate":"2020-10-21 16:45:47","commitOrder":1,"curCode":"    public void calculate() {\n        for (String key : summation.keys()) {\n            long value = 0;\n            if (count.get(key) != 0) {\n                value = summation.get(key) / count.get(key);\n                if (value == 0L && summation.get(key) > 0L) {\n                    value = 1;\n                }\n            }\n            dataset.put(key, value);\n        }\n    }\n","date":"2020-10-21 16:45:47","endLine":122,"groupId":"2441","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"calculate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3b/cbeb23fbfb6dc606d3105bc6252c9c0efab2e7.src","preCode":"    public void calculate() {\n        for (String key : summation.keys()) {\n            long value = 0;\n            if (count.get(key) != 0) {\n                value = summation.get(key) / count.get(key);\n                if (value == 0L && summation.get(key) > 0L) {\n                    value = 1;\n                }\n            }\n            dataset.put(key, value);\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"}],"commitId":"9ce47d5bdc9e614885066d66384ee6092604efba","commitMessage":"@@@Meter Analysis Language (#5531)\n\n","date":"2020-10-21 16:45:47","modifiedFileCount":"7","status":"B","submitter":"Gao Hongtao"},{"authorTime":"2020-10-21 16:45:47","codes":[{"authorDate":"2020-11-10 14:14:01","commitOrder":2,"curCode":"    public void calculate() {\n        if (!isCalculated) {\n            final Set<String> keys = summation.keys();\n            for (String key : keys) {\n                long value = 0;\n                if (count.get(key) != 0) {\n                    value = summation.get(key) / count.get(key);\n                    if (value == 0L && summation.get(key) > 0L) {\n                        value = 1;\n                    }\n                }\n                dataset.put(key, value);\n            }\n            dataset.keys().stream()\n                .map(key -> {\n                    if (key.contains(\":\")) {\n                        int index = key.lastIndexOf(\":\");\n                        return Tuple.of(key.substring(0, index), key.substring(index + 1));\n                    } else {\n                        return Tuple.of(DEFAULT_GROUP, key);\n                    }\n                })\n                .collect(groupingBy(Tuple2::_1, mapping(Tuple2::_2, Collector.of(\n                    DataTable::new,\n                    (dt, key) -> dt.put(key.contains(\":\") ? key.split(\":\")[1] : key, dataset.get(key)),\n                    DataTable::append))))\n                .forEach((group, subDataset) -> {\n                    long total;\n                    total = subDataset.sumOfValues();\n\n                    int[] roofs = new int[ranks.size()];\n                    for (int i = 0; i < ranks.size(); i++) {\n                        roofs[i] = Math.round(total * ranks.get(i) * 1.0f / 100);\n                    }\n\n                    int count = 0;\n                    final List<String> sortedKeys = subDataset.sortedKeys(Comparator.comparingLong(Long::parseLong));\n\n                    int loopIndex = 0;\n\n                    for (String key : sortedKeys) {\n                        final Long value = subDataset.get(key);\n\n                        count += value;\n                        for (int rankIdx = loopIndex; rankIdx < roofs.length; rankIdx++) {\n                            int roof = roofs[rankIdx];\n\n                            if (count >= roof) {\n                                if (group.equals(DEFAULT_GROUP)) {\n                                    percentileValues.put(String.valueOf(ranks.get(rankIdx)), Long.parseLong(key));\n                                } else {\n                                    percentileValues.put(String.format(\"%s:%s\", group, ranks.get(rankIdx)), Long.parseLong(key));\n                                }\n                                loopIndex++;\n                            } else {\n                                break;\n                            }\n                        }\n                    }\n                });\n        }\n    }\n","date":"2020-11-10 14:14:01","endLine":242,"groupId":"2441","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"calculate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3d/06d8603705df8c59f36a75db18b689d2de150a.src","preCode":"    public void calculate() {\n        if (!isCalculated) {\n            final Set<String> keys = summation.keys();\n            for (String key : keys) {\n                long value = 0;\n                if (count.get(key) != 0) {\n                    value = summation.get(key) / count.get(key);\n                    if (value == 0L && summation.get(key) > 0L) {\n                        value = 1;\n                    }\n                }\n                dataset.put(key, value);\n            }\n            dataset.keys().stream()\n                .map(key -> {\n                    if (key.contains(\":\")) {\n                        String[] kk = key.split(\":\");\n                        return Tuple.of(kk[0], key);\n                    } else {\n                        return Tuple.of(DEFAULT_GROUP, key);\n                    }\n                })\n                .collect(groupingBy(Tuple2::_1, mapping(Tuple2::_2, Collector.of(\n                    DataTable::new,\n                    (dt, key) -> dt.put(key.contains(\":\") ? key.split(\":\")[1] : key, dataset.get(key)),\n                    DataTable::append))))\n                .forEach((group, subDataset) -> {\n                    long total;\n                    total = subDataset.sumOfValues();\n\n                    int[] roofs = new int[ranks.size()];\n                    for (int i = 0; i < ranks.size(); i++) {\n                        roofs[i] = Math.round(total * ranks.get(i) * 1.0f / 100);\n                    }\n\n                    int count = 0;\n                    final List<String> sortedKeys = subDataset.sortedKeys(Comparator.comparingLong(Long::parseLong));\n\n                    int loopIndex = 0;\n\n                    for (String key : sortedKeys) {\n                        final Long value = subDataset.get(key);\n\n                        count += value;\n                        for (int rankIdx = loopIndex; rankIdx < roofs.length; rankIdx++) {\n                            int roof = roofs[rankIdx];\n\n                            if (count >= roof) {\n                                if (group.equals(DEFAULT_GROUP)) {\n                                    percentileValues.put(String.valueOf(ranks.get(rankIdx)), Long.parseLong(key));\n                                } else {\n                                    percentileValues.put(String.format(\"%s:%s\", group, ranks.get(rankIdx)), Long.parseLong(key));\n                                }\n                                loopIndex++;\n                            } else {\n                                break;\n                            }\n                        }\n                    }\n                });\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2020-10-21 16:45:47","commitOrder":2,"curCode":"    public void calculate() {\n        for (String key : summation.keys()) {\n            long value = 0;\n            if (count.get(key) != 0) {\n                value = summation.get(key) / count.get(key);\n                if (value == 0L && summation.get(key) > 0L) {\n                    value = 1;\n                }\n            }\n            dataset.put(key, value);\n        }\n    }\n","date":"2020-10-21 16:45:47","endLine":122,"groupId":"2441","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"calculate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3b/cbeb23fbfb6dc606d3105bc6252c9c0efab2e7.src","preCode":"    public void calculate() {\n        for (String key : summation.keys()) {\n            long value = 0;\n            if (count.get(key) != 0) {\n                value = summation.get(key) / count.get(key);\n                if (value == 0L && summation.get(key) > 0L) {\n                    value = 1;\n                }\n            }\n            dataset.put(key, value);\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"}],"commitId":"4a01f80ae748bd073edc2d3a57c77529259db0e2","commitMessage":"@@@Fix that chunked string is incorrect while the tag contains colon (#5818)\n\n","date":"2020-11-10 14:14:01","modifiedFileCount":"1","status":"M","submitter":"XinZhang"},{"authorTime":"2020-10-21 16:45:47","codes":[{"authorDate":"2020-11-11 13:59:27","commitOrder":3,"curCode":"    public void calculate() {\n        if (!isCalculated) {\n            final Set<String> keys = summation.keys();\n            for (String key : keys) {\n                long value = 0;\n                if (count.get(key) != 0) {\n                    value = summation.get(key) / count.get(key);\n                    if (value == 0L && summation.get(key) > 0L) {\n                        value = 1;\n                    }\n                }\n                dataset.put(key, value);\n            }\n            dataset.keys().stream()\n                   .map(key -> {\n                       if (key.contains(\":\")) {\n                           int index = key.lastIndexOf(\":\");\n                           return Tuple.of(key.substring(0, index), key);\n                       } else {\n                           return Tuple.of(DEFAULT_GROUP, key);\n                       }\n                   })\n                   .collect(groupingBy(Tuple2::_1, mapping(Tuple2::_2, Collector.of(\n                       DataTable::new,\n                       (dt, key) -> {\n                           String v;\n                           if (key.contains(\":\")) {\n                               int index = key.lastIndexOf(\":\");\n                               v = key.substring(index + 1);\n                           } else {\n                               v = key;\n                           }\n                           dt.put(v, dataset.get(key));\n                       },\n                       DataTable::append\n                   ))))\n                   .forEach((group, subDataset) -> {\n                       long total;\n                       total = subDataset.sumOfValues();\n\n                    int[] roofs = new int[ranks.size()];\n                    for (int i = 0; i < ranks.size(); i++) {\n                        roofs[i] = Math.round(total * ranks.get(i) * 1.0f / 100);\n                    }\n\n                    int count = 0;\n                    final List<String> sortedKeys = subDataset.sortedKeys(Comparator.comparingLong(Long::parseLong));\n\n                    int loopIndex = 0;\n\n                    for (String key : sortedKeys) {\n                        final Long value = subDataset.get(key);\n\n                        count += value;\n                        for (int rankIdx = loopIndex; rankIdx < roofs.length; rankIdx++) {\n                            int roof = roofs[rankIdx];\n\n                            if (count >= roof) {\n                                if (group.equals(DEFAULT_GROUP)) {\n                                    percentileValues.put(String.valueOf(ranks.get(rankIdx)), Long.parseLong(key));\n                                } else {\n                                    percentileValues.put(String.format(\"%s:%s\", group, ranks.get(rankIdx)), Long.parseLong(key));\n                                }\n                                loopIndex++;\n                            } else {\n                                break;\n                            }\n                        }\n                    }\n                });\n        }\n    }\n","date":"2020-11-11 13:59:27","endLine":252,"groupId":"10424","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"calculate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/85/f1582e36d2c9234d0b18890c23fed1f802a270.src","preCode":"    public void calculate() {\n        if (!isCalculated) {\n            final Set<String> keys = summation.keys();\n            for (String key : keys) {\n                long value = 0;\n                if (count.get(key) != 0) {\n                    value = summation.get(key) / count.get(key);\n                    if (value == 0L && summation.get(key) > 0L) {\n                        value = 1;\n                    }\n                }\n                dataset.put(key, value);\n            }\n            dataset.keys().stream()\n                .map(key -> {\n                    if (key.contains(\":\")) {\n                        int index = key.lastIndexOf(\":\");\n                        return Tuple.of(key.substring(0, index), key.substring(index + 1));\n                    } else {\n                        return Tuple.of(DEFAULT_GROUP, key);\n                    }\n                })\n                .collect(groupingBy(Tuple2::_1, mapping(Tuple2::_2, Collector.of(\n                    DataTable::new,\n                    (dt, key) -> dt.put(key.contains(\":\") ? key.split(\":\")[1] : key, dataset.get(key)),\n                    DataTable::append))))\n                .forEach((group, subDataset) -> {\n                    long total;\n                    total = subDataset.sumOfValues();\n\n                    int[] roofs = new int[ranks.size()];\n                    for (int i = 0; i < ranks.size(); i++) {\n                        roofs[i] = Math.round(total * ranks.get(i) * 1.0f / 100);\n                    }\n\n                    int count = 0;\n                    final List<String> sortedKeys = subDataset.sortedKeys(Comparator.comparingLong(Long::parseLong));\n\n                    int loopIndex = 0;\n\n                    for (String key : sortedKeys) {\n                        final Long value = subDataset.get(key);\n\n                        count += value;\n                        for (int rankIdx = loopIndex; rankIdx < roofs.length; rankIdx++) {\n                            int roof = roofs[rankIdx];\n\n                            if (count >= roof) {\n                                if (group.equals(DEFAULT_GROUP)) {\n                                    percentileValues.put(String.valueOf(ranks.get(rankIdx)), Long.parseLong(key));\n                                } else {\n                                    percentileValues.put(String.format(\"%s:%s\", group, ranks.get(rankIdx)), Long.parseLong(key));\n                                }\n                                loopIndex++;\n                            } else {\n                                break;\n                            }\n                        }\n                    }\n                });\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2020-10-21 16:45:47","commitOrder":3,"curCode":"    public void calculate() {\n        for (String key : summation.keys()) {\n            long value = 0;\n            if (count.get(key) != 0) {\n                value = summation.get(key) / count.get(key);\n                if (value == 0L && summation.get(key) > 0L) {\n                    value = 1;\n                }\n            }\n            dataset.put(key, value);\n        }\n    }\n","date":"2020-10-21 16:45:47","endLine":122,"groupId":"10424","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"calculate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3b/cbeb23fbfb6dc606d3105bc6252c9c0efab2e7.src","preCode":"    public void calculate() {\n        for (String key : summation.keys()) {\n            long value = 0;\n            if (count.get(key) != 0) {\n                value = summation.get(key) / count.get(key);\n                if (value == 0L && summation.get(key) > 0L) {\n                    value = 1;\n                }\n            }\n            dataset.put(key, value);\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"}],"commitId":"c66ae0b0c2db184117d2f1852c63f611a011346b","commitMessage":"@@@Fix issue caused by PR#5818 (#5826)\n\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>","date":"2020-11-11 13:59:27","modifiedFileCount":"2","status":"M","submitter":"XinZhang"}]
