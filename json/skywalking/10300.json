[{"authorTime":"2021-06-29 14:34:29","codes":[{"authorDate":"2021-06-29 14:34:29","commitOrder":1,"curCode":"    private MetricsPersistentWorker genWorkers(int num, int count) {\n        MetricsPersistentWorker persistenceWorker = mock(MetricsPersistentWorker.class);\n        doAnswer(invocation -> {\n            List argument = invocation.getArgument(0, List.class);\n            for (int i = 0; i < count; i++) {\n                argument.add(new MockStorageData(num + \" \" + UUID.randomUUID()));\n            }\n            return Void.class;\n        }).when(persistenceWorker).buildBatchRequests(anyList());\n        return persistenceWorker;\n    }\n","date":"2021-06-29 14:34:29","endLine":98,"groupId":"2476","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"genWorkers","params":"(intnum@intcount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1f/c73557ffb4cdd5c4b78094907b490b02c5fbee.src","preCode":"    private MetricsPersistentWorker genWorkers(int num, int count) {\n        MetricsPersistentWorker persistenceWorker = mock(MetricsPersistentWorker.class);\n        doAnswer(invocation -> {\n            List argument = invocation.getArgument(0, List.class);\n            for (int i = 0; i < count; i++) {\n                argument.add(new MockStorageData(num + \" \" + UUID.randomUUID()));\n            }\n            return Void.class;\n        }).when(persistenceWorker).buildBatchRequests(anyList());\n        return persistenceWorker;\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/PersistenceTimerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"},{"authorDate":"2021-06-29 14:34:29","commitOrder":1,"curCode":"    private TopNWorker genTopNWorkers(int num, int count) {\n        TopNWorker persistenceWorker = mock(TopNWorker.class);\n        doAnswer(invocation -> {\n            List argument = invocation.getArgument(0, List.class);\n            for (int i = 0; i < count; i++) {\n                argument.add(new MockStorageData(num + \" \" + UUID.randomUUID()));\n            }\n            return Void.class;\n        }).when(persistenceWorker).buildBatchRequests(anyList());\n        return persistenceWorker;\n    }\n","date":"2021-06-29 14:34:29","endLine":110,"groupId":"2476","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"genTopNWorkers","params":"(intnum@intcount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1f/c73557ffb4cdd5c4b78094907b490b02c5fbee.src","preCode":"    private TopNWorker genTopNWorkers(int num, int count) {\n        TopNWorker persistenceWorker = mock(TopNWorker.class);\n        doAnswer(invocation -> {\n            List argument = invocation.getArgument(0, List.class);\n            for (int i = 0; i < count; i++) {\n                argument.add(new MockStorageData(num + \" \" + UUID.randomUUID()));\n            }\n            return Void.class;\n        }).when(persistenceWorker).buildBatchRequests(anyList());\n        return persistenceWorker;\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/PersistenceTimerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"a966eea35c8a939dec3803282d5516dd431e1d73","commitMessage":"@@@Support prepare and save metrics concurrency (#7153)\n\n","date":"2021-06-29 14:34:29","modifiedFileCount":"2","status":"B","submitter":"Alvin"},{"authorTime":"2021-07-17 16:03:50","codes":[{"authorDate":"2021-07-17 16:03:50","commitOrder":2,"curCode":"    private MetricsPersistentWorker genWorkers(int num, int count) {\n        MetricsPersistentWorker persistenceWorker = mock(MetricsPersistentWorker.class);\n        doAnswer(invocation -> {\n            List<MockStorageData> results = new ArrayList<>(count);\n            for (int i = 0; i < count; i++) {\n                results.add(new MockStorageData(num + \" \" + UUID.randomUUID()));\n            }\n            return results;\n        }).when(persistenceWorker).buildBatchRequests();\n        return persistenceWorker;\n    }\n","date":"2021-07-17 16:03:50","endLine":97,"groupId":"10300","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"genWorkers","params":"(intnum@intcount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bb/e9ca6dfd33b6887f43445dba6a7fbf50181d79.src","preCode":"    private MetricsPersistentWorker genWorkers(int num, int count) {\n        MetricsPersistentWorker persistenceWorker = mock(MetricsPersistentWorker.class);\n        doAnswer(invocation -> {\n            List argument = invocation.getArgument(0, List.class);\n            for (int i = 0; i < count; i++) {\n                argument.add(new MockStorageData(num + \" \" + UUID.randomUUID()));\n            }\n            return Void.class;\n        }).when(persistenceWorker).buildBatchRequests(anyList());\n        return persistenceWorker;\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/PersistenceTimerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2021-07-17 16:03:50","commitOrder":2,"curCode":"    private TopNWorker genTopNWorkers(int num, int count) {\n        TopNWorker persistenceWorker = mock(TopNWorker.class);\n        doAnswer(invocation -> {\n            List<MockStorageData> results = new ArrayList<>(count);\n            for (int i = 0; i < count; i++) {\n                results.add(new MockStorageData(num + \" \" + UUID.randomUUID()));\n            }\n            return results;\n        }).when(persistenceWorker).buildBatchRequests();\n        return persistenceWorker;\n    }\n","date":"2021-07-17 16:03:50","endLine":109,"groupId":"10300","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"genTopNWorkers","params":"(intnum@intcount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bb/e9ca6dfd33b6887f43445dba6a7fbf50181d79.src","preCode":"    private TopNWorker genTopNWorkers(int num, int count) {\n        TopNWorker persistenceWorker = mock(TopNWorker.class);\n        doAnswer(invocation -> {\n            List argument = invocation.getArgument(0, List.class);\n            for (int i = 0; i < count; i++) {\n                argument.add(new MockStorageData(num + \" \" + UUID.randomUUID()));\n            }\n            return Void.class;\n        }).when(persistenceWorker).buildBatchRequests(anyList());\n        return persistenceWorker;\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/PersistenceTimerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"a6afcac86e251f67d9c06120c1cf7ef9835bf65a","commitMessage":"@@@Logically revert #6642 and partial #7153 to reduce unnecessary thread and concurrency process (#7318)\n\n The key logic behinds all these is.  metrics persistence is fully asynchronous.\n\n* The core/maxSyncOperationNum setting(added in 8.5.0) is removed due to metrics persistence is fully asynchronous.\n* The core/syncThreads setting(added in 8.5.0) is removed due to metrics persistence is fully asynchronous.\n* Optimization: Concurrency mode of execution stage for metrics is removed(added in 8.5.0). The only concurrency of prepare stage is meaningful and kept.\n* Remove the outside preparedRequest list initialization.  worker instance could always build a suitable size list in the first place (Reduce Array.copy and GC load a little).","date":"2021-07-17 16:03:50","modifiedFileCount":"8","status":"M","submitter":"?? Wu Sheng"}]
