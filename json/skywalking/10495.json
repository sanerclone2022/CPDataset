[{"authorTime":"2018-11-18 22:46:27","codes":[{"authorDate":"2018-10-29 20:45:44","commitOrder":11,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new SourceReceiverImpl());\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2018-10-29 20:45:44","endLine":169,"groupId":"6694","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b1/16fec9e5b17543be61b622e450bd86ec3513cd.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new SourceReceiverImpl());\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"NB"},{"authorDate":"2018-11-18 22:46:27","commitOrder":11,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","date":"2018-11-18 22:46:27","endLine":74,"groupId":"2922","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/b20791b699d1cdc1bc3730c80b509d8dfaaf67.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"}],"commitId":"6b35113536df28ed9a3464e729875a1e08788065","commitMessage":"@@@Restore Zipkin receiver based on new core (#1932)\n\n* Change some codes to make zipkin receiver works.  not done yet.\n\n* @adriancole Zipkin receiver is coming back again.\n\n* Fix document and fix for Zipkin receiver.\n\n* Fix some bugs.\n\n* Fix register bug.\n\n* Fix transfer bug for new backend core.\n","date":"2018-11-18 22:46:27","modifiedFileCount":"4","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2018-11-18 22:46:27","codes":[{"authorDate":"2018-11-28 22:59:02","commitOrder":12,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new SourceReceiverImpl());\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2018-11-28 22:59:02","endLine":139,"groupId":"6694","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/20/ea0bcbf968a755df30f0756d0469b659e87ebc.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new SourceReceiverImpl());\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2018-11-18 22:46:27","commitOrder":12,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","date":"2018-11-18 22:46:27","endLine":74,"groupId":"2922","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/b20791b699d1cdc1bc3730c80b509d8dfaaf67.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"215eab74288328e13f2c0fecf222168632685ff9","commitMessage":"@@@Mysql style storage implementation (#1964)\n\nAlso fixed several bugs in this merge.","date":"2018-11-28 22:59:02","modifiedFileCount":"33","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2018-11-18 22:46:27","codes":[{"authorDate":"2018-12-06 14:40:29","commitOrder":13,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2018-12-06 14:40:29","endLine":174,"groupId":"4297","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/df48cfa30068958cb8d03f298d216dab518648.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new SourceReceiverImpl());\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2018-11-18 22:46:27","commitOrder":13,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","date":"2018-11-18 22:46:27","endLine":74,"groupId":"2922","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/b20791b699d1cdc1bc3730c80b509d8dfaaf67.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"f2b158862cc6525e83ca5c0eb007ccf95b52d677","commitMessage":"@@@[OAL refactor step 1]Refactor dispatcher manager (#2006)\n\n* Remove the hard codes about DispatcherManager.\n\n* Add comments.\n","date":"2018-12-06 14:40:29","modifiedFileCount":"3","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2018-11-18 22:46:27","codes":[{"authorDate":"2019-02-12 23:13:02","commitOrder":14,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2019-02-12 23:13:02","endLine":145,"groupId":"4297","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/01/06fe7338477bf3614e11368deb25cf50985fe5.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2018-11-18 22:46:27","commitOrder":14,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","date":"2018-11-18 22:46:27","endLine":74,"groupId":"2922","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/b20791b699d1cdc1bc3730c80b509d8dfaaf67.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"4babd6ff73ee32535f09eb31ecbda736e3052a32","commitMessage":"@@@Support Top sql (#2239)\n\n* The prototype of topN sql worker.\n\n* Add scope and new manual dispatcher.\n\n* no message\n\n* Finish topN persistence codes. Not test yet. And query have not added.\n\n* Finish the top n database statement persistent.\n\n* Support different slow thresholds for different db types.\n\n* Fix wrong db default threshold\n\n* Finish new query protocol binding.\n\n* Provide query empty implementation and sync ui.\n\n* Finish all codes.  hope it works :P\nI will run the tests tonight.\n\n* Fix\n\n* Fix\n\n* Fix a startup issue.\n\n* Add time bucket to persistent.\n\n* Fix wrong query result column name.\n\n* Fix Database query.\n\n* Fix checkstyle.\n\n* Fix wrong order logic.  and add a test case to verify.  to fix https://github.com/apache/incubator-skywalking/pull/2239#discussion_r255948249\n","date":"2019-02-12 23:13:02","modifiedFileCount":"21","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2018-11-18 22:46:27","codes":[{"authorDate":"2019-02-18 14:55:07","commitOrder":15,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2019-02-18 14:55:07","endLine":145,"groupId":"4297","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f6/db6329b4dbcfc59fd39456836c3106501b2e92.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2018-11-18 22:46:27","commitOrder":15,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","date":"2018-11-18 22:46:27","endLine":74,"groupId":"2922","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/b20791b699d1cdc1bc3730c80b509d8dfaaf67.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"2f3ccf368c6ccd88f2f9fa56ae3de047c3f2d810","commitMessage":"@@@Backend streaming thread model improvement (#2247)\n\n[Performance Improvement]Backend streaming thread model improvement","date":"2019-02-18 14:55:07","modifiedFileCount":"15","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2018-11-18 22:46:27","codes":[{"authorDate":"2019-02-26 13:43:14","commitOrder":16,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2019-02-26 13:43:14","endLine":153,"groupId":"4297","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/cb/4160b2b0e11cfe86939b750d3309dd85f4f783.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2018-11-18 22:46:27","commitOrder":16,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","date":"2018-11-18 22:46:27","endLine":74,"groupId":"2922","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/b20791b699d1cdc1bc3730c80b509d8dfaaf67.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"fb62025da832ba04a83b45a5437fe9728ecfe8e3","commitMessage":"@@@Improve OAP extendibility (#2288)\n\n* Make scope meta configurable.\n\n* Fix test cases in ci.\n\n* Change step 1\n\n* Refactor step 2\n\n* Other compile issue done. Prepare the generator changes.\n\n* Revert some wrong changes to Istio receiver.\n\n* Step 3.  make compile pass.\n\n* Try to make CI passed.\n\n* Add a check.\n\n* Fix generated code style\n\n* Provide new and extendable dispatcher generator tool\n\n* Fix startup.\n\n* Can't guarantee the dispatchers are always existing. Put explicit comments at there to avoid confusion.  since this is different with old version.\n\n* Fix a H2 query for endpoint search.\n\n* Fix a wrong mysql alarm query.\n\n* Provide new document and `generate-tool-grammer` module.\n\n* Add missing last section of document.\n\n* Fix typo\n\n* Relocate the @ScopeDeclaration annotation.  make it more sense. Also remove the useless @SourceType annotation. And adjust document for these changes\n\n* ScopeDeclaration can be used once for each class only.  now.\n","date":"2019-02-26 13:43:14","modifiedFileCount":"73","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2018-11-18 22:46:27","codes":[{"authorDate":"2019-03-12 16:36:36","commitOrder":17,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2019-03-12 16:36:36","endLine":154,"groupId":"4297","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0c/fc9568875d10ee592ef7fddc0af61d2f1740dc.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2018-11-18 22:46:27","commitOrder":17,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","date":"2018-11-18 22:46:27","endLine":74,"groupId":"2922","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/b20791b699d1cdc1bc3730c80b509d8dfaaf67.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"0951b9434b6f043c99dab697dd6db629a6669178","commitMessage":"@@@Make k8s-Coordinator works in role mode. (#2347)\n\n* Make k8s-Coordinator back in role mode.\n\n* Start query API server after the core started.\n\n* Do lock when port has been intialized.\n\n* Rename service.\n\n* Fix text cases.\n\n* Declare ConfigService.class in core module.\n\n* Implement in an easier way.\n\n* Envoy print whole metric.  now in debug.\n\n* Forcedly fix envoy timestamp issue.\n","date":"2019-03-12 16:36:36","modifiedFileCount":"8","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2018-11-18 22:46:27","codes":[{"authorDate":"2019-03-26 23:34:31","commitOrder":18,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        scopeScan.registerListener(DisableRegister.INSTANCE);\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2019-03-26 23:34:31","endLine":156,"groupId":"4297","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f8/a3d95a2c5a8d4d5a4ad47f7b507e3a5486a8c1.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2018-11-18 22:46:27","commitOrder":18,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","date":"2018-11-18 22:46:27","endLine":74,"groupId":"2922","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/b20791b699d1cdc1bc3730c80b509d8dfaaf67.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"9a09e96204e52f9998820624753e080100bf4d38","commitMessage":"@@@Support disable statement in OAL (#2402)\n\n* Try to make disable work.\n\n* Make disable works.\n\n* Add disable document.\n","date":"2019-03-26 23:34:31","modifiedFileCount":"10","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2018-11-18 22:46:27","codes":[{"authorDate":"2019-03-30 15:37:19","commitOrder":19,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        scopeScan.registerListener(DisableRegister.INSTANCE);\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2019-03-30 15:37:19","endLine":161,"groupId":"4297","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e5/84cd564038561012ceb69e387e57e72685e2d4.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        scopeScan.registerListener(DisableRegister.INSTANCE);\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2018-11-18 22:46:27","commitOrder":19,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","date":"2018-11-18 22:46:27","endLine":74,"groupId":"2922","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/b20791b699d1cdc1bc3730c80b509d8dfaaf67.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"1fd5c5790a25875f0e10c72fd767eaf38bbd2c99","commitMessage":"@@@Divide two static classes (#2411)\n\n* 1. Remove static worker instances holder.\n2. Remove static worker instance id generator.\n\n* Fixed test case failure.\n","date":"2019-03-30 15:37:19","modifiedFileCount":"26","status":"M","submitter":"??? pengys"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-03-30 15:37:19","commitOrder":20,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        scopeScan.registerListener(DisableRegister.INSTANCE);\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2019-03-30 15:37:19","endLine":161,"groupId":"4297","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e5/84cd564038561012ceb69e387e57e72685e2d4.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        scopeScan.registerListener(DisableRegister.INSTANCE);\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"},{"authorDate":"2019-03-31 01:36:36","commitOrder":20,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config));\n        jettyServer.addHandler(new SpanV2JettyHandler(config));\n\n        ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n        Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n        Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"601b472ef6ebe5c0d026a5afcc5e6856683c0328","commitMessage":"@@@Support Backend acts as pure Zipkin collector (#2424)\n\n* Codebase for zipkin span persistence.\n\n* Fix missing fields in storage.\n\n* Miss the latency field.\n\n* Finish some tests.\n\n* Fix wrong latency.\n\n* Finish doc and reset application.yml\n\n* Make the description more clear.\n","date":"2019-03-31 01:36:36","modifiedFileCount":"14","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-04-02 11:52:59","commitOrder":21,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        scopeScan.registerListener(DisableRegister.INSTANCE);\n        scopeScan.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2019-04-02 11:52:59","endLine":162,"groupId":"4297","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0c/fe991a3c383a9c06b2bbc03faf6247d342dd43.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        scopeScan.registerListener(DisableRegister.INSTANCE);\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":21,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"ff6fb90d384f0030af2723afa06b02d8792eb861","commitMessage":"@@@Add jaeger traces support  (#2434)\n\n* Make Jaeger receiver works in 12450 as default.\n\n* Finish compile and codebase.\n\n* Make codes runnable.\n\n* Finish Jaeger query tests.\n\n* Add document for jaeger receiver.\n\n* Add readme.\n\n* Fix a break link.\n\n* Finish doc.\n","date":"2019-04-02 11:52:59","modifiedFileCount":"8","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-04-08 07:53:06","commitOrder":22,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        scopeScan.registerListener(DisableRegister.INSTANCE);\n        scopeScan.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2019-04-08 07:53:06","endLine":163,"groupId":"4297","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9b/677ec4b054c56ea18206be6714e127d05eae24.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        scopeScan.registerListener(DisableRegister.INSTANCE);\n        scopeScan.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":22,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"df362b18f0e3b7498a0a4f252630e6204d539bba","commitMessage":"@@@Query protocol and codebase for log type record (#2449)\n\n* New query graphql protocol added.\n\n* Finish a new metric.  log(abstract) with HTTP Access Log.\n\n* Submit the draft codes of logs.\n\n* Remove @IDColumn\n\n* Fix startup issue.\n\n* Add http_access_log to disable list.\n\n* Finish a wrong service implementation.\n\n* Add trace id in log query condition and result.\n\n* Fix style\n","date":"2019-04-08 07:53:06","modifiedFileCount":"11","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-05-10 08:05:37","commitOrder":23,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        scopeScan.registerListener(DisableRegister.INSTANCE);\n        scopeScan.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new MetricsTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2019-05-10 08:05:37","endLine":163,"groupId":"4297","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/36/4fd7ec5f88d3339222a82ebe19f579c73be90b.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        scopeScan.registerListener(DisableRegister.INSTANCE);\n        scopeScan.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new IndicatorTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":23,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"ed78dabe8b142be3d546d349046768135f0a752a","commitMessage":"@@@Rename metric and indicator to metrics. (#2643)\n\n* Rename metric to metrics.\n\n* Fixed test case execute failure issues.\n","date":"2019-05-10 08:05:37","modifiedFileCount":"102","status":"M","submitter":"??? pengys"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-05-15 22:42:38","commitOrder":24,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        scopeScan.registerListener(DisableRegister.INSTANCE);\n        scopeScan.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataMappingGetter.class, streamDataMapping);\n        this.registerServiceImplementation(StreamDataMappingSetter.class, streamDataMapping);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2019-05-15 22:42:38","endLine":151,"groupId":"4310","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/79/879b9fc71c2ec9fe52c03b77eb49106d073ce1.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        scopeScan.registerListener(DisableRegister.INSTANCE);\n        scopeScan.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataClassGetter.class, streamDataAnnotationContainer);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);\n        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(storageAnnotationListener);\n        annotationScan.registerListener(streamAnnotationListener);\n        annotationScan.registerListener(new MetricsTypeListener(getManager()));\n        annotationScan.registerListener(new InventoryTypeListener(getManager()));\n        annotationScan.registerListener(new RecordTypeListener(getManager()));\n        annotationScan.registerListener(new TopNTypeListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":24,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"63fb961c0d1de02f053045c3bf80361ebd7bd58d","commitMessage":"@@@New OAP annotations.  they are friendly for streaming loader. (#2670)\n\n* New stream annotation.\n- Inventory annotation example:\n@Stream(name = ServiceInventory.INDEX_NAME.  scopeId = DefaultScopeDefine.SERVICE_INVENTORY.  storage = @Storage(builder = ServiceInventory.Builder.class.  deleteHistory = false).  kind = StreamKind.Inventory)\n\n- Metrics annotation example:\n@Stream(name = ServiceRelationClientSideMetrics.INDEX_NAME.  scopeId = DefaultScopeDefine.SERVICE_RELATION.  storage = @Storage(builder = ServiceRelationClientSideMetrics.Builder.class).  kind = StreamKind.Metrics)\n\n- Record annotation example:\n@Stream(name = SegmentRecord.INDEX_NAME.  scopeId = DefaultScopeDefine.SEGMENT.  storage = @Storage(builder = SegmentRecord.Builder.class).  kind = StreamKind.Record)\n\n- TopN annotation example:\n@Stream(name = TopNDatabaseStatement.INDEX_NAME.  scopeId = DefaultScopeDefine.DATABASE_SLOW_STATEMENT.  storage = @Storage(builder = TopNDatabaseStatement.Builder.class).  kind = StreamKind.TopN)\n\n* no message\n\n* Stream annotation finish.\n\n* Make stream processors to be the singleton class.\n\n* Fixed the compile errors.\n\n* Modify the OAL module for this annotation refactor.\n\n* Add apache license header.\n\n* Duplicate import.\n\n* Fixed check style error.\n","date":"2019-05-15 22:42:38","modifiedFileCount":"55","status":"M","submitter":"??? pengys"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-07-18 19:47:23","commitOrder":25,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataMappingGetter.class, streamDataMapping);\n        this.registerServiceImplementation(StreamDataMappingSetter.class, streamDataMapping);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2019-07-18 19:47:23","endLine":169,"groupId":"4310","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2c/8f78a0fb47d1376679ccd6f342dbbccf6245e4.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        scopeScan.registerListener(DisableRegister.INSTANCE);\n        scopeScan.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            scopeScan.scan(null);\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataMappingGetter.class, streamDataMapping);\n        this.registerServiceImplementation(StreamDataMappingSetter.class, streamDataMapping);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":25,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"5b039e9747fac98444b4ec423a5d57524202f286","commitMessage":"@@@All NEW OAL Runtime Engine (#3109)\n\n* Change OAL generator tool to runtime.\n\nStep 1. change project structure. API links and maven pom.\n\n* Part of metrics class generation\n\n* Metrcis class generated.\n\n* Set up the basic structure of new OAL engine.\n\n* Finish metrics generation.\n\n* Support dispatcher generation.\n\n* Format codes.\n\n* Generate dispatcher all methods.\n\n* Implement disable in hardcode.\n\n* Clear up\n\n* Fix compile startup.\n\n* Update license and document of new OAL engine.\n\n* Fix rat.\n\n* Disable class output in default\n\n* Copy from @kezhenxu94 's test PR.  https://github.com/apache/skywalking/pull/3110\n\n* Wait for the mount command to finish\n","date":"2019-07-18 19:47:23","modifiedFileCount":"16","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-07-20 23:47:17","commitOrder":26,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","date":"2019-07-20 23:47:17","endLine":203,"groupId":"4310","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f0/5b776323bb1a8f885df8b40d9e0c2439d5b81f.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        this.registerServiceImplementation(StreamDataMappingGetter.class, streamDataMapping);\n        this.registerServiceImplementation(StreamDataMappingSetter.class, streamDataMapping);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":26,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"d256fc348e727549cebf6d4f42ba88458ab771ab","commitMessage":"@@@OAP internal RemoteService protocol change and code refactor (#3128)\n\n* Remove the worker id.  and add worker name for remote handler only.\n\n* Remote metrics and inventory classes mapping too.\n\n* Refactor codes.\n","date":"2019-07-20 23:47:17","modifiedFileCount":"24","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-07-24 13:43:19","commitOrder":27,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n    }\n","date":"2019-07-24 13:43:19","endLine":164,"groupId":"4310","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fa/6c48a70e6da6f57de429a4f0708a5dbd80b877.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":27,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"8d234a91e55f4ddaed46ed885a81443f9f2fd0ce","commitMessage":"@@@Feature of database session in OAP server. (#3147)\n\n* Feature of database session\n\n* Make it configurable.\n\n* Make the OAP server can't startup.\n","date":"2019-07-24 13:43:19","modifiedFileCount":"12","status":"M","submitter":"??? pengys"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-08-02 09:25:17","commitOrder":28,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n    }\n","date":"2019-08-02 09:25:17","endLine":167,"groupId":"4310","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/de/bb71687fc77aa107ea1f737a4a35f1f131cf17.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":28,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"49f50a24a4c88fcc9a6c95f1f94d95a8166d5955","commitMessage":"@@@Support upgrade backend w/o rebooting agents (#3170)\n\n* Support upgrade backend w/o rebooting agents\n","date":"2019-08-02 09:25:17","modifiedFileCount":"21","status":"M","submitter":"kezhenxu94"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-08-09 09:14:55","commitOrder":29,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n    }\n","date":"2019-08-09 09:14:55","endLine":173,"groupId":"4310","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/62/37f68098f3cdc12446c06313186ac317907f80.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":29,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"1bfda1dd65f275ece62d180d5f45970b62013248","commitMessage":"@@@Modify the thread pool of grpc server. (#3225)\n\n* Modify the thread pool of grpc server.\n\n* add license header\n\n* make param confingable\n\n* Add sharing and Jaeger config.\n\n* Remove grpc thread config from yml\n","date":"2019-08-09 09:14:55","modifiedFileCount":"7","status":"M","submitter":"yantaowu"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-09-20 15:02:28","commitOrder":30,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n    }\n","date":"2019-09-20 15:02:28","endLine":173,"groupId":"4310","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3b/c4e9af774f351d02995c95cec273a6bb82075e.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":30,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"8ebf3aac04fed8a61b0b8f60182ae8b22355448d","commitMessage":"@@@Support timeout configuration in agent and backend. (#3491)\n\n* Support timeout configuration in agent and backend.\n\n* Fix CI\n\n* no message\n","date":"2019-09-20 15:02:28","modifiedFileCount":"11","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-10-30 13:45:11","commitOrder":31,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n    }\n","date":"2019-10-30 13:45:11","endLine":173,"groupId":"4310","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9f/58df6dc20f406e18677913063154f939a426ec.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager()));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager()));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":31,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"42d422e8527a3b302a88a6bce9c9350f30a190ac","commitMessage":"@@@parameterize the cache size. (#3741)\n\n","date":"2019-10-30 13:45:11","modifiedFileCount":"6","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-11-19 17:26:30","commitOrder":32,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n    }\n","date":"2019-11-19 17:26:30","endLine":175,"groupId":"4310","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b2/ae9718275c73855f9df6f69e62ad9ac9985d4e.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":32,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"5d064ced5f820a51dcc000341858ebe3b4416da5","commitMessage":"@@@make topN worker report period configurable. (#3892)\n\n","date":"2019-11-19 17:26:30","modifiedFileCount":"4","status":"M","submitter":"Jared Tan"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-11-29 12:54:33","commitOrder":33,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2019-11-29 12:54:33","endLine":180,"groupId":"4310","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/51/ec77b5d6330277fc688892da8baa59204a8953.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":33,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"6475ab3d1d6651ca2fb8095a2b50a3394716d8da","commitMessage":"@@@Add apdex function to OAL (#3855)\n\n* Add apdex function to OAL\n\n* Add empty line\n\n* Setup config watcher\n\n* Add identifier type to function parameter\n\n* Add config test\n\n* Update score algorithm\n\n* Replace responseCode with status\n\n* Add comments about apdex score algorithm\n\n* Add docs\n\n* Add e2e test case\n\n* Update test case\n\n* Fix disptch class generating error\n\n* Update value name of apdex metric\n\n* Tuning threshold\n\n* Fix single tolerated point bug\n","date":"2019-11-29 12:54:33","modifiedFileCount":"5","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2019-12-31 20:49:45","commitOrder":34,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager()));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2019-12-31 20:49:45","endLine":185,"groupId":"4310","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/42/86cb7b6109b3d5e7f6a4b413d85d59507cb8a8.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":34,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"d38a8eaaa7e7193bff292cd03016c6a9320c8c9a","commitMessage":"@@@Provide thread monitor create task feature (#4145)\n\n* provide thread monitor task service to create\n\n* provide thread monitor task GraphQL implements\n\n* 1. change thread monitor field names\n2. fix `getThreadMonitorTaskList` query time bucket error\n\n* provide config stream processor\n\n* update submodule `query-protocol`\n\n* resolve e2e-mysql error\n\n* remove useless storage interface method.\n\n* rename `ThreadMonitorTask` to `ProfileTask`\n\n* change e2e-profile to the top level\n\n* fix profile test analyze error\n\n* remove StringUtil#isBlank.\n\n* 1. remove create profile task duration unit\n2. remove GraphQL getTask list duration field\n3. add `profileTaskQueryMaxSize` in `storage` -> `elasticsearch(7)` configuration.  default get 200 profile task\n\n* provide e2e different storage tests\n\n* 1. fix rat check\n2. remove DurationUtils.java#toSecond\n3. remove ProfileTaskQueryEs7DAO\n\n* fix e2e code format error\n\n* provide es6 and es7 storage e2e tests\n\n* change e2e profile es module artifactId\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>\n","date":"2019-12-31 20:49:45","modifiedFileCount":"12","status":"M","submitter":"mrproliu"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2020-01-09 09:35:40","commitOrder":35,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager()));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-01-09 09:35:39","endLine":186,"groupId":"4310","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/07/13497af0666d8e8e1ab2db58f973c5b10d5ef5.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager()));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":35,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"4cf0600f351f9c99af804bc90bcb54d3b778c7b8","commitMessage":"@@@Provide profile task downstream to sniffer (#4172)\n\n* Provide profile task downstream to sniffer\n\n* fix agent unit testcase issue\n\n* add profile switch config on sniffer\n\n* fix es error\n\n* 1. add @DefaultImplementor on the sniffer profile task service\n2. change ProfileTaskExecutionService#PROFILE_TASK_READY_SCHEDULE to final and remove volatile\n2. fix style error\n\n* change timeFromStartMills use `<` to compare\n\n* 1. add `maxSamplingCount` to profile task\n2. make profile task limit to the common package\n\n* 1. change `agent.active_profile` to `profile.active` and make true on default\n2. add `maxSamplingCount` in profile task\n3. use `createTime` to check has new command list\n4. add task re-check before process profile task\n\n* 1. add `profile-receiver` document\n2. change `ProfileTaskExecutionService` use single schedule thread pool\n3. cache dont need fetch data when no data.  use auto-fresh mechanism only\n\n* remove navigate time judge.  fix comment wrong meaning\n","date":"2020-01-09 09:35:39","modifiedFileCount":"30","status":"M","submitter":"mrproliu"},{"authorTime":"2019-03-31 01:36:36","codes":[{"authorDate":"2020-02-11 10:11:08","commitOrder":36,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-02-11 10:11:08","endLine":186,"groupId":"4310","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c0/1cc403cde2174be3f6734a9a2885eacbd776d8.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager()));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2019-03-31 01:36:36","commitOrder":36,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2019-03-31 01:36:36","endLine":78,"groupId":"2922","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/e1e63bf6b9f07fcb67444575fb27e27e67f90c.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"fa526e52279d553152a1c8ca8dbeb9158fad6296","commitMessage":"@@@Provide profile analyze query (#4335)\n\n* provide profile analyze query\n\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>\n","date":"2020-02-11 10:11:08","modifiedFileCount":"14","status":"M","submitter":"mrproliu"},{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":37,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-02-11 17:10:49","endLine":232,"groupId":"4310","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/90/69cb0355c247cc03ece46bada3f7cdcc1a36d1.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2020-02-11 17:10:49","commitOrder":37,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-02-11 17:10:49","endLine":83,"groupId":"2922","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f2/b14c4a00ad60655f8d11c53c11657220e9c6ef.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME).provider().getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"5b255ba3e3b50e0e0196b28cdca21dcd5c9c3da2","commitMessage":"@@@Set up more strict code styles and fix existing issues (#4337)\n\nMotivation:\n\nReview code styles with some bots automatically.\n\nModifications:\n\nSet up ReviewDog in GitHub Action to review code style.\n\nAdd more check rules to checkstyle plugin.\n\nResult:\n\nObvious code styles can be reviewed and commented automatically.","date":"2020-02-11 17:10:49","modifiedFileCount":"2429","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-03-04 14:44:54","commitOrder":38,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-03-04 14:44:54","endLine":255,"groupId":"4310","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/41/75877f5cabce6357d35cbbe843790c6a4a364a.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2020-02-11 17:10:49","commitOrder":38,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-02-11 17:10:49","endLine":83,"groupId":"2922","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f2/b14c4a00ad60655f8d11c53c11657220e9c6ef.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"d32450aa7d29a2ccb1b0d48ee251d2d1ef8851af","commitMessage":"@@@Support name column(s) in the storage for 3rd party integration.  like Kibana. Default OFF (#4439)\n\n* Support dynamic column in the source.\n\n* Support activeExtraModelColumns as a default OFF option.\n\n* Fix words\n\n* Update backend-setup.md\n\nFix format issue.\n","date":"2020-03-04 14:44:54","modifiedFileCount":"19","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-03-15 08:15:28","commitOrder":39,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile());\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath()).toFile());\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-03-15 08:15:28","endLine":267,"groupId":"4310","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/cd/4c63946f73bd7028e9a96aac554f330735e119.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2020-02-11 17:10:49","commitOrder":39,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-02-11 17:10:49","endLine":83,"groupId":"2922","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f2/b14c4a00ad60655f8d11c53c11657220e9c6ef.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"78d14ebbd6a62f3b90cf7e60d6d1c719754fadeb","commitMessage":"@@@Enable OAP gRPC SSL transportation (#4470)\n\n* Enable OAP gRPC SSL transportation\n\nPorting to OpenSSL to enable SSL transportation. The server private\nkey is in the format of PCKS#8.  certificates is x509 though.\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Add netty-tcnative-boringssl-static 2.0.26 licnese\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Update docs/en/setup/backend/grpc-ssl.md\n\nCo-Authored-By: kezhenxu94 <kezhenxu94@apache.org>\n\n* Update docs/en/setup/backend/grpc-ssl.md\n\nCo-Authored-By: kezhenxu94 <kezhenxu94@apache.org>\n\n* Add SSL to grpc remote client and sharing server\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Update documents\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Fix nits\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Fix test case\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Add e2e-ssl and remove other test cases temporarily\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Add TLS relevant files\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Decrease timeout\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Test config works\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* triger CI on oap-ssl branch\n\n* Disable agent ca\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Switch to sharing server\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Add agent log to console\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Upload log files\n\n* Change backend\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Revert \"Change backend\"\n\nThis reverts commit 7a085711e3653d3bf642aa84f73650e22595e383.\n\n* Update backend\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Revert e2e\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Ignore TSL relevant files\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Polish codes\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Update certificates expires year to 2120\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>\nCo-authored-by: kezhenxu94 <kezhenxu94@apache.org>","date":"2020-03-15 08:15:28","modifiedFileCount":"10","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-03-28 22:51:41","commitOrder":40,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-03-28 22:51:41","endLine":262,"groupId":"4310","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b7/d0fa5c8abd3d972408a1e0995fc005cda51989.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile());\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath()).toFile());\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2020-02-11 17:10:49","commitOrder":40,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-02-11 17:10:49","endLine":83,"groupId":"2922","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f2/b14c4a00ad60655f8d11c53c11657220e9c6ef.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"4474907fef809e2342b644a324da011834a55420","commitMessage":"@@@[Inventory Design Change] Remove endpoint register and endpoint inventory (#4570)\n\n* Finish step one.  source and entity changed.\n\n* Step 2.  finish the basic and core DAO changes.\n\n* Step 3. Change all source codes of backend.  and make project compiling successfully.\n\n* Make startup successful and persistence works.\n\n* Fix dead codes in the MySQLTableInstaller.\n\n* Fix mischange.\n\n* Fix MySQL storage bootstrap error.\n\n* Rollback dependency change.\n\n* Simply enable tailing logs from container no mater it's in CI or not\n\n* Fix segment table issue.\n\n* Fix MySQL Instanller.\n\n* Support Influxdb implementation of new endpoint traffic.\n\n* Set and modify timeout to 90mins\n\n* Remove unnecessary entity in the EndpointTraffic.\n\n* Fix wrong entity builder and make name more clear.\n\n* Fix 2 equal methods bug.\n\n* Fix InfluxDB identifier(name) conflict issue.\n\n* Fix endpoint topology query.  endpoint id should be changed as a string.\n\n* Fix a missing change.\n\n* Fix a wrong commit.\n\n* Column name can't be changed.  due to it affect the hybrid metadb(h2/mysql) query.  change it explicitly with double quotation marks.\n\n* Fix formats.\n\n* Remove endpoint/operation register from the agent. and change the plugin tests(without local tests). operationId relation codes have been removed from agent too.\n\n* Try to fix the hytrix case.\n\n* Fix 3 cases.\n\n* Try to fix cases.\n\n* Fix 2.\n\n* Fix one.\n\n* Fix the serviceId type mis-change.\n\n* Fix int query\n\n* Fix hystrix case.\n\n* Fix a case.\n\n* Fix EndpointCallRelationDispatcher set the source/dest endpoint without id encoding.\n\n* Update documentation and add 2 test cases.\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>","date":"2020-03-28 22:51:41","modifiedFileCount":"121","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-03-30 18:56:26","commitOrder":41,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-03-30 18:56:26","endLine":262,"groupId":"4310","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/54/7c57d6c12581ab8462873c97c9186796ed4d97.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2020-02-11 17:10:49","commitOrder":41,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-02-11 17:10:49","endLine":83,"groupId":"2922","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f2/b14c4a00ad60655f8d11c53c11657220e9c6ef.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"e55073e51970ecb50d014094e4e9b8dcc7d8c0d9","commitMessage":"@@@OAP Core polish.  especially storage level (#4587)\n\n- Add length definition with reasonable default value.\n- #content of @Column has been renamed to storageOnly . I add this to many fields as they are not being query in any case.\n- Merge H2 and MySQL columntype mapping back to consistent.\n- Remove @IDColumn.\n- Support @QueryUnifiedIndex.\n- Refactor the MySQL and H2 installers to use @Column and @QueryUnifiedIndex definitions to create indices automatically. But the index naming rule has been changed to entityseqIDX. seq is the Increment Interger for every entity.\n- Support @MetricsExtension and insertOnly in the MetricsPersistentWorker worker.\n- Optimize MetricsStreamProcessor","date":"2020-03-30 18:56:26","modifiedFileCount":"58","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-03-31 09:04:10","commitOrder":42,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        if (moduleConfig.getEndpointNameMaxLength() > 0) {\n            CoreModule.setEndpointNameMaxLength(moduleConfig.getEndpointNameMaxLength());\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-03-31 09:04:10","endLine":265,"groupId":"4310","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/43/d90c8f93bb9028d010561b54f3937abeff6e4c.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2020-02-11 17:10:49","commitOrder":42,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-02-11 17:10:49","endLine":83,"groupId":"2922","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f2/b14c4a00ad60655f8d11c53c11657220e9c6ef.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"54fb6e7285d695b1bd467edb6df0c3a3254adc12","commitMessage":"@@@Set the endpoint name length to 150.  to keep safe and avoid over-length. (#4595)\n\n* Set the endpoint name length to 150.  to keep safe and avoid over-length.\n\n* Set endpointNameMaxLength in the application.yml\n\n* Fix a mischange.\n\n* Correct the endpoint name length control logic\n\nCo-authored-by: kezhenxu94 <kezhenxu94@apache.org>","date":"2020-03-31 09:04:10","modifiedFileCount":"7","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":43,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        if (moduleConfig.getEndpointNameMaxLength() > 0) {\n            CoreModule.setEndpointNameMaxLength(moduleConfig.getEndpointNameMaxLength());\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-04-10 11:03:24","endLine":246,"groupId":"5494","id":65,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/23cee065ad9d861e34bf965aa37005a81898a3.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        if (moduleConfig.getEndpointNameMaxLength() > 0) {\n            CoreModule.setEndpointNameMaxLength(moduleConfig.getEndpointNameMaxLength());\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":43,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":66,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 17:59:21","commitOrder":44,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-04-10 17:59:21","endLine":249,"groupId":"5494","id":67,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c2/3255c810bab915609a99237bfa218edece79aa.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        if (moduleConfig.getEndpointNameMaxLength() > 0) {\n            CoreModule.setEndpointNameMaxLength(moduleConfig.getEndpointNameMaxLength());\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":44,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":68,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"44cae97c259c06f95d1fc4b78ee41268670b6542","commitMessage":"@@@Set up restrict length rules for service.  instance and endpoint (#4633)\n\n* Set up restrict length rules for service.  instance and endpoint\n\n* Adjust two env names.","date":"2020-04-10 17:59:21","modifiedFileCount":"26","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-21 15:39:18","commitOrder":45,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-04-21 15:39:18","endLine":249,"groupId":"5494","id":69,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/03/a1be7537b88c7baef38e219cc72d92390986a8.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":45,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":70,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"418bdff277179b4660e578b1837f21fd3db514cb","commitMessage":"@@@New metrics query protocol v2 (#4679)\n\n1. Support the new query protocol.  and the v1 query protocol is still supported \n2. All `numOfxxx`/`GlobalBrief` is only a mock now.  no real number.\n3. typeOfMetrics service is a mock only too.  follow up PR will implement this.","date":"2020-04-21 15:39:18","modifiedFileCount":"123","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-22 13:14:59","commitOrder":46,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-04-22 13:14:59","endLine":251,"groupId":"6573","id":71,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/cf/811325f8b6faffabae0a47dec49ccd1c9a85f7.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":46,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":72,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"991d08337800b28dfe3c03eb8c166fe137c05e35","commitMessage":"@@@Support typeOfMetrics query (#4686)\n\n* Add data type to the column definition to replace the simple isValue definition. And top N query is also requiring value column now.\n\n* Support typeOfMetrics query.","date":"2020-04-22 13:14:59","modifiedFileCount":"28","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-24 23:33:13","commitOrder":47,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        MeterSystem meterSystem = MeterSystem.meterSystem(getManager());\n        this.registerServiceImplementation(MeterSystem.class, meterSystem);\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-04-24 23:33:13","endLine":255,"groupId":"6573","id":73,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/03/20650406edc5bec361253b195b7c72df7cd6e7.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":47,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":74,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"b635e254c4b327aca22469d0551c9b3a63d991b9","commitMessage":"@@@Provide Meter(metrics) system  (#4694)\n\nHere are the basic and simple usages of the MeterSystem APIs.\n\n## Meter Creation\nNew meter could be created based on metrics name.  function.  scope and data type. \n1. Metrics name is still the storage entity name.\n2. Functions are every similar with the OAL function.  just accepting different input.\n```java\nfinal MeterSystem meterSystem = MeterSystem.meterSystem(getManager());\nmeterSystem.create(\"test_long_metrics\".  \"avg\".  ScopeType.SERVICE.  Long.class);\n```\nNOTICE.  this creation should only be called in the `module#prepare` stage.  otherwise.  `Can't create new metrics anymore` exception will be raised after the **CORE** module `start` stage finished. You may find out.  there is a chance `create` could be executed successfully in your own `module#start` stage.  but it it just because of the sequence of provider loaded by the class loader.  **no guarantee.  so please don't do that**.\n\n## Runtime Calculation\n`AcceptableValue` is the object created at the runtime to accept new metrics value.\n```java\n         final MeterSystem service = getManager().find(CoreModule.NAME).provider().getService(MeterSystem.class);\n        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                final AcceptableValue<Long> value = service.buildMetrics(\"test_long_metrics\".  Long.class);\n                value.accept(MeterEntity.newService(\"abc\").  5L);\n                value.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\n                service.doStreamingCalculation(value);\n            }\n        }.  2.  2.  TimeUnit.SECONDS);\n```\n\n## Meter Functions\nRight now.  only `avg` function has been implemented. I submit this PR as soon as possible to get your feedback. I will add more functions.\n\n## Notice\n1. Make slow trace query available in the sampled record. Logically.  they are the same thing. The UI doesn't need to concern about the trace as a special case.\n2. Endpoint dependency will be removed from the dashboard. Because no query available for it. We will provide a new page for that in 8.1\n3. Comparison page will be removed due to dashboard is powerful enough to replace it.","date":"2020-04-24 23:33:13","modifiedFileCount":"10","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-05-08 21:21:03","commitOrder":48,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-05-08 21:21:03","endLine":255,"groupId":"6829","id":75,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/96/aa177b43e9ad3b2560cf935a0d2e7931464ad8.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        MeterSystem meterSystem = MeterSystem.meterSystem(getManager());\n        this.registerServiceImplementation(MeterSystem.class, meterSystem);\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":48,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":76,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"7edcd5aa33cec034047871ac1348b5b858b630f0","commitMessage":"@@@Change the model installation into the reactive module (#4761)\n\n","date":"2020-05-08 21:21:03","modifiedFileCount":"31","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-05-08 23:53:49","commitOrder":49,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-05-08 23:53:49","endLine":251,"groupId":"6829","id":77,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fc/ef1b02af89794a66d4c2e965a49de98c5c39ec.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n\n            oalEngine = OALEngineLoader.get();\n            oalEngine.setStreamListener(streamAnnotationListener);\n            oalEngine.setDispatcherListener(receiver.getDispatcherManager());\n            oalEngine.start(getClass().getClassLoader());\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":49,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":78,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"d4f3218dea29371fc23c66f5c72f5e48f88dd4be","commitMessage":"@@@Support define multiple OAL configuration (#4748)\n\n","date":"2020-05-08 23:53:49","modifiedFileCount":"25","status":"M","submitter":"zhang-wei"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-05-20 22:50:22","commitOrder":50,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-05-20 22:50:22","endLine":263,"groupId":"6829","id":79,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/cd/6430b49bcebacf4a52b1a519f41a059a26fd66.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength()\n        ));\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":50,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":80,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"a10e04493272a88931d6916662b30d0a320287bb","commitMessage":"@@@Group Parameterized Endpoints (#4802)\n\n* Group Parameterized Endpoints. Configure the grouping rules for parameterized endpoints.  to improve the meaning of the metrics.\n","date":"2020-05-20 22:50:22","modifiedFileCount":"14","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-06-01 23:06:14","commitOrder":51,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n                moduleConfig.getServiceNameMaxLength(),\n                moduleConfig.getInstanceNameMaxLength(),\n                moduleConfig.getEndpointNameMaxLength(),\n                endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                    this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                    Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                    Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n                moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n                .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                    Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                            .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-06-01 23:06:14","endLine":270,"groupId":"6829","id":81,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6a/eba0f64488bc2101685d403a654f6c3daebafc.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                                        Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n            moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n            .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                                                                    .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":51,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":82,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"d094a0f7c0b4a2cf0de38735128b5c07181e30d2","commitMessage":"@@@Support UI template management. (#4843)\n\n","date":"2020-06-01 23:06:14","modifiedFileCount":"32","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-07-25 17:41:49","codes":[{"authorDate":"2020-07-25 17:41:49","commitOrder":52,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n                moduleConfig.getServiceNameMaxLength(),\n                moduleConfig.getInstanceNameMaxLength(),\n                moduleConfig.getEndpointNameMaxLength(),\n                endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                    this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                    Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                    Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                    Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                            .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-07-25 17:41:49","endLine":282,"groupId":"904","id":83,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/80/521caada46ba858af7945aad5ae337bf35b88c.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n                moduleConfig.getServiceNameMaxLength(),\n                moduleConfig.getInstanceNameMaxLength(),\n                moduleConfig.getEndpointNameMaxLength(),\n                endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                    this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                    Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                    Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        jettyServer = new JettyServer(\n                moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig\n                .getJettySelectors());\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                    Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                            .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2020-07-25 17:41:49","commitOrder":52,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-07-25 17:41:49","endLine":93,"groupId":"2922","id":84,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/dafe68aec0aff248f9325a28b54ac75d01d342.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"db9f8e6e008115d10ed8132b671e41229513beb7","commitMessage":"@@@Support Jetty server advanced configuration. (#5147)\n\n","date":"2020-07-25 17:41:49","modifiedFileCount":"8","status":"M","submitter":"Jared Tan"},{"authorTime":"2020-07-25 17:41:49","codes":[{"authorDate":"2020-08-31 15:46:37","commitOrder":53,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n                moduleConfig.getServiceNameMaxLength(),\n                moduleConfig.getInstanceNameMaxLength(),\n                moduleConfig.getEndpointNameMaxLength(),\n                endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                    this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                    Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                    Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                    Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                            .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-08-31 15:46:37","endLine":284,"groupId":"904","id":85,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b5/f9bec0c6d1cc59d007f5aa36a9a8339c1c0b15.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n                moduleConfig.getServiceNameMaxLength(),\n                moduleConfig.getInstanceNameMaxLength(),\n                moduleConfig.getEndpointNameMaxLength(),\n                endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                    this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                    Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                    Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                    Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                            .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2020-07-25 17:41:49","commitOrder":53,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-07-25 17:41:49","endLine":93,"groupId":"2922","id":86,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/dafe68aec0aff248f9325a28b54ac75d01d342.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"7ef8b3e476001154ba5d600f7206add0277d4d24","commitMessage":"@@@Support Browser protocol at OAP (#4228)\n\n","date":"2020-08-31 15:46:37","modifiedFileCount":"24","status":"M","submitter":"zhang-wei"},{"authorTime":"2020-07-25 17:41:49","codes":[{"authorDate":"2020-08-31 23:11:01","commitOrder":54,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n                moduleConfig.getServiceNameMaxLength(),\n                moduleConfig.getInstanceNameMaxLength(),\n                moduleConfig.getEndpointNameMaxLength(),\n                endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                    this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                    moduleConfig.getGRPCSslCertChainPath(),\n                    moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                    moduleConfig.getGRPCSslTrustedCAPath());\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2020-08-31 23:11:01","endLine":281,"groupId":"904","id":87,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/72/cebd5bb266ac287eddb18f62c8835f21ec8b8d.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n                moduleConfig.getServiceNameMaxLength(),\n                moduleConfig.getInstanceNameMaxLength(),\n                moduleConfig.getEndpointNameMaxLength(),\n                endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                    this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                    Paths.get(moduleConfig.getGRPCSslCertChainPath()).toFile(),\n                    Paths.get(moduleConfig.getGRPCSslKeyPath()).toFile()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                    Paths.get(moduleConfig.getGRPCSslTrustedCAPath())\n                            .toFile()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2020-07-25 17:41:49","commitOrder":54,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-07-25 17:41:49","endLine":93,"groupId":"2922","id":88,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/dafe68aec0aff248f9325a28b54ac75d01d342.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"30ce1959a7109cce22b4dee8064099789c37da0d","commitMessage":"@@@Hot reload gRPC certs of OAP. (#5376)\n\n","date":"2020-08-31 23:11:01","modifiedFileCount":"4","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2020-07-25 17:41:49","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":55,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-02-05 18:37:18","endLine":287,"groupId":"904","id":89,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/cb/dd38d5d02a20a687eba9354f0fcaaa3f691775.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2020-07-25 17:41:49","commitOrder":55,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-07-25 17:41:49","endLine":93,"groupId":"2922","id":90,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/dafe68aec0aff248f9325a28b54ac75d01d342.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"b92eac2cd6bf8774860b921ea04bafd59550a607","commitMessage":"@@@Add a new concept \"Event\" and its implementations to collect events (#6183)\n\n","date":"2021-02-05 18:37:18","modifiedFileCount":"15","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-02-27 14:50:54","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":56,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-02-05 18:37:18","endLine":287,"groupId":"904","id":91,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/cb/dd38d5d02a20a687eba9354f0fcaaa3f691775.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"},{"authorDate":"2021-02-27 14:50:54","commitOrder":56,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","date":"2021-02-27 14:50:54","endLine":81,"groupId":"2922","id":92,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/81/e6d2846a31c0bb10c0493979aa33ba31cc7bf2.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"0e1d5c3767e1c02dcb0e44919be126081352f941","commitMessage":"@@@Make Zipkin trace query available (#6454)\n\n","date":"2021-02-27 14:50:54","modifiedFileCount":"7","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-02-27 14:50:54","codes":[{"authorDate":"2021-04-05 20:11:34","commitOrder":57,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-04-05 20:11:34","endLine":289,"groupId":"904","id":93,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/38/929892f913f1928209697ef10dd9e84ab17c4f.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        annotationScan.registerListener(streamAnnotationListener);\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2021-02-27 14:50:54","commitOrder":57,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","date":"2021-02-27 14:50:54","endLine":81,"groupId":"2922","id":94,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/81/e6d2846a31c0bb10c0493979aa33ba31cc7bf2.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"2b85ba104175f0e121b381a4739101b7b7ee9cb8","commitMessage":"@@@Fix `disable` statement not working (#6687)\n\n","date":"2021-04-05 20:11:34","modifiedFileCount":"1","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-02-27 14:50:54","codes":[{"authorDate":"2021-06-20 07:57:10","commitOrder":58,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-06-20 07:57:10","endLine":295,"groupId":"904","id":95,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9e/99bd1f09ea955c5660c7d76c0e42c49e58e300.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2021-02-27 14:50:54","commitOrder":58,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","date":"2021-02-27 14:50:54","endLine":81,"groupId":"2922","id":96,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/81/e6d2846a31c0bb10c0493979aa33ba31cc7bf2.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"19a068d7083b1849c088a4c8b9a246f1537649ad","commitMessage":"@@@Feature: support endpoint name grouping by OpenAPI definitions. (#7130)\n\n","date":"2021-06-20 07:57:10","modifiedFileCount":"5","status":"M","submitter":"wankai123"},{"authorTime":"2021-02-27 14:50:54","codes":[{"authorDate":"2021-06-30 19:14:20","commitOrder":59,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        MetricsStreamProcessor.getInstance().setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-06-30 19:14:20","endLine":296,"groupId":"904","id":97,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a8/bbcbe8e35fb3673f13c929eda1154a31a2a75c.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2021-02-27 14:50:54","commitOrder":59,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","date":"2021-02-27 14:50:54","endLine":81,"groupId":"2922","id":98,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/81/e6d2846a31c0bb10c0493979aa33ba31cc7bf2.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"50a0bcbf7395c49029759a8cb1208271405cdcc4","commitMessage":"@@@Optimize L1 aggregation.  enhance gRPC client between L1 and L2 aggregation. (#7206)\n\n1.0Performance: Add L1 aggregation flush period.  which reduces the CPU load and helps young GC.\n\n2. Replace do not direct send after the first aggregation to reduce the network #6400.\n\n3. Enhance the DataCarrier to notify the consumer in no enqueue event in short term.\n\n4. L1 aggregation flush period still works even no further metrics generated.  powered by <3>\n\n5. Fix gRPC remote client OOM. The concurrency control mechanism failed.","date":"2021-06-30 19:14:20","modifiedFileCount":"8","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-02-27 14:50:54","codes":[{"authorDate":"2021-07-01 23:25:52","commitOrder":60,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-07-01 23:25:52","endLine":298,"groupId":"904","id":99,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/af/6c2ecb31a854a59d2aa0cf415920b731217dde.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        MetricsStreamProcessor.getInstance().setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2021-02-27 14:50:54","commitOrder":60,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","date":"2021-02-27 14:50:54","endLine":81,"groupId":"2922","id":100,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/81/e6d2846a31c0bb10c0493979aa33ba31cc7bf2.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"f32d3d072081943e29a367ccb714b362f5acddc7","commitMessage":"@@@Enhance the storage session mechanism (#7221)\n\n","date":"2021-07-01 23:25:52","modifiedFileCount":"8","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-02-27 14:50:54","codes":[{"authorDate":"2021-07-06 15:10:15","commitOrder":61,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .jettyHttpMaxRequestHeaderSize(\n                                                                   moduleConfig.getHttpMaxRequestHeaderSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-07-06 15:10:15","endLine":300,"groupId":"4460","id":101,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/31/f511290374fc77bcbd3ca113cbce8fe9252619.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2021-02-27 14:50:54","commitOrder":61,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","date":"2021-02-27 14:50:54","endLine":81,"groupId":"2922","id":102,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/81/e6d2846a31c0bb10c0493979aa33ba31cc7bf2.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"d15b67bd97cfe8386df0c61198d9f1ca2060089b","commitMessage":"@@@Allow configuring max request header size (#7249)\n\n* Allow configuring max request header size\n\nThis allows configuring the HTTP max request header size from the jetty\nserver.\nBy default it uses 8192.  the same jetty default.\n","date":"2021-07-06 15:10:15","modifiedFileCount":"6","status":"M","submitter":"Sergi Castro"},{"authorTime":"2021-02-27 14:50:54","codes":[{"authorDate":"2021-07-20 07:50:27","commitOrder":62,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .jettyHttpMaxRequestHeaderSize(\n                                                                   moduleConfig.getHttpMaxRequestHeaderSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        if (moduleConfig.getMetricsDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Metric TTL should be at least 2 days, current value is \" + moduleConfig.getMetricsDataTTL());\n        }\n        if (moduleConfig.getRecordDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Record TTL should be at least 2 days, current value is \" + moduleConfig.getRecordDataTTL());\n        }\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        metricsStreamProcessor.setMetricsDataTTL(moduleConfig.getMetricsDataTTL());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","date":"2021-07-20 07:50:27","endLine":310,"groupId":"4460","id":103,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1b/e58a3280675ee065f3fbc6dab69bedea121948.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .jettyHttpMaxRequestHeaderSize(\n                                                                   moduleConfig.getHttpMaxRequestHeaderSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2021-02-27 14:50:54","commitOrder":62,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","date":"2021-02-27 14:50:54","endLine":81,"groupId":"2922","id":104,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/81/e6d2846a31c0bb10c0493979aa33ba31cc7bf2.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"3a4ee08e54bd3f08441f1023fd25442d6a2badde","commitMessage":"@@@Enhance persistent session timeout mechanism. (#7334)\n\nFix bug.  the enhanced session could cache the metadata metrics(hot entity) forever. A new timeout mechanism is designed for avoiding this specific case.\n\nOptimize this timeout mechanism.  make it different for ES(one index per day) and non-ES storage implementation.","date":"2021-07-20 07:50:27","modifiedFileCount":"5","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-02-27 14:50:54","codes":[{"authorDate":"2021-07-29 19:55:22","commitOrder":63,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .jettyHttpMaxRequestHeaderSize(\n                                                                   moduleConfig.getHttpMaxRequestHeaderSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        if (moduleConfig.getMetricsDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Metric TTL should be at least 2 days, current value is \" + moduleConfig.getMetricsDataTTL());\n        }\n        if (moduleConfig.getRecordDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Record TTL should be at least 2 days, current value is \" + moduleConfig.getRecordDataTTL());\n        }\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        metricsStreamProcessor.setMetricsDataTTL(moduleConfig.getMetricsDataTTL());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n        loggingConfigWatcher = new LoggingConfigWatcher(this);\n    }\n","date":"2021-07-29 19:55:22","endLine":313,"groupId":"4460","id":105,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d6/b1b9795463f5cff60359b395a3a0316a9d85e4.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .jettyHttpMaxRequestHeaderSize(\n                                                                   moduleConfig.getHttpMaxRequestHeaderSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        if (moduleConfig.getMetricsDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Metric TTL should be at least 2 days, current value is \" + moduleConfig.getMetricsDataTTL());\n        }\n        if (moduleConfig.getRecordDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Record TTL should be at least 2 days, current value is \" + moduleConfig.getRecordDataTTL());\n        }\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        metricsStreamProcessor.setMetricsDataTTL(moduleConfig.getMetricsDataTTL());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2021-02-27 14:50:54","commitOrder":63,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","date":"2021-02-27 14:50:54","endLine":81,"groupId":"2922","id":106,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/81/e6d2846a31c0bb10c0493979aa33ba31cc7bf2.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"1f28d2036a0581d6d891933a9cc1933c3990eea4","commitMessage":"@@@Add logging module to load log configuration dynamically (#7377)\n\n* Add logging module to load log configuration dynamically\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>","date":"2021-07-29 19:55:22","modifiedFileCount":"3","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2021-02-27 14:50:54","codes":[{"authorDate":"2021-09-03 09:17:16","commitOrder":64,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath(),\n                                        null\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .jettyHttpMaxRequestHeaderSize(\n                                                                   moduleConfig.getHttpMaxRequestHeaderSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        if (moduleConfig.getMetricsDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Metric TTL should be at least 2 days, current value is \" + moduleConfig.getMetricsDataTTL());\n        }\n        if (moduleConfig.getRecordDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Record TTL should be at least 2 days, current value is \" + moduleConfig.getRecordDataTTL());\n        }\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        metricsStreamProcessor.setMetricsDataTTL(moduleConfig.getMetricsDataTTL());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n        loggingConfigWatcher = new LoggingConfigWatcher(this);\n    }\n","date":"2021-09-03 09:17:16","endLine":314,"groupId":"10495","id":107,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/b5443ad2b6dcf1095b9345354cb0f8fd3fc95b.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        if (moduleConfig.isActiveExtraModelColumns()) {\n            DefaultScopeDefine.activeExtraModelColumns();\n        }\n        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n        this.registerServiceImplementation(NamingControl.class, new NamingControl(\n            moduleConfig.getServiceNameMaxLength(),\n            moduleConfig.getInstanceNameMaxLength(),\n            moduleConfig.getEndpointNameMaxLength(),\n            endpointNameGrouping\n        ));\n        try {\n            endpointNameGroupingRuleWatcher = new EndpointNameGroupingRuleWatcher(\n                this, endpointNameGrouping);\n\n            if (moduleConfig.isEnableEndpointNameGroupingByOpenapi()) {\n                endpointNameGrouping.setEndpointGroupingRule4Openapi(\n                    new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\").read());\n            }\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        AnnotationScan oalDisable = new AnnotationScan();\n        oalDisable.registerListener(DisableRegister.INSTANCE);\n        oalDisable.registerListener(new DisableRegister.SingleDisableScanListener());\n        try {\n            oalDisable.scan();\n        } catch (IOException | StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(),\n                                        moduleConfig.getGRPCSslCertChainPath(),\n                                        moduleConfig.getGRPCSslKeyPath()\n            );\n        } else {\n            grpcServer = new GRPCServer(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort());\n        }\n        if (moduleConfig.getMaxConcurrentCallsPerConnection() > 0) {\n            grpcServer.setMaxConcurrentCallsPerConnection(moduleConfig.getMaxConcurrentCallsPerConnection());\n        }\n        if (moduleConfig.getMaxMessageSize() > 0) {\n            grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {\n            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());\n        }\n        if (moduleConfig.getGRPCThreadPoolSize() > 0) {\n            grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());\n        }\n        grpcServer.initialize();\n\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(moduleConfig.getRestHost())\n                                                               .port(moduleConfig.getRestPort())\n                                                               .contextPath(moduleConfig.getRestContextPath())\n                                                               .jettyIdleTimeOut(moduleConfig.getRestIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   moduleConfig.getRestAcceptorPriorityDelta())\n                                                               .jettyMinThreads(moduleConfig.getRestMinThreads())\n                                                               .jettyMaxThreads(moduleConfig.getRestMaxThreads())\n                                                               .jettyAcceptQueueSize(\n                                                                   moduleConfig.getRestAcceptQueueSize())\n                                                               .jettyHttpMaxRequestHeaderSize(\n                                                                   moduleConfig.getHttpMaxRequestHeaderSize())\n                                                               .build();\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(moduleConfig.getDownsampling()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));\n        this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, receiver);\n\n        WorkerInstancesService instancesService = new WorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        \r\n        oalEngineLoaderService = new OALEngineLoaderService(getManager());\n        this.registerServiceImplementation(OALEngineLoaderService.class, oalEngineLoaderService);\n\n        annotationScan.registerListener(new StreamAnnotationListener(getManager()));\n\n        if (moduleConfig.isGRPCSslEnabled()) {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout(),\n                                                               moduleConfig.getGRPCSslTrustedCAPath()\n            );\n        } else {\n            this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());\n        }\n        this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);\n\n        \r\n        this.registerServiceImplementation(\n            UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        if (moduleConfig.getMetricsDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Metric TTL should be at least 2 days, current value is \" + moduleConfig.getMetricsDataTTL());\n        }\n        if (moduleConfig.getRecordDataTTL() < 2) {\n            throw new ModuleStartException(\n                \"Record TTL should be at least 2 days, current value is \" + moduleConfig.getRecordDataTTL());\n        }\n\n        final MetricsStreamProcessor metricsStreamProcessor = MetricsStreamProcessor.getInstance();\n        metricsStreamProcessor.setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());\n        metricsStreamProcessor.setL1FlushPeriod(moduleConfig.getL1FlushPeriod());\n        metricsStreamProcessor.setStorageSessionTimeout(moduleConfig.getStorageSessionTimeout());\n        metricsStreamProcessor.setMetricsDataTTL(moduleConfig.getMetricsDataTTL());\n        TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());\n        apdexThresholdConfig = new ApdexThresholdConfig(this);\n        ApdexMetrics.setDICT(apdexThresholdConfig);\n        loggingConfigWatcher = new LoggingConfigWatcher(this);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2021-02-27 14:50:54","commitOrder":64,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","date":"2021-02-27 14:50:54","endLine":81,"groupId":"10495","id":108,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/81/e6d2846a31c0bb10c0493979aa33ba31cc7bf2.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"0b67d29996a80b5f4fc4ce3619e9eec17dc5ac61","commitMessage":"@@@Support mTLS for gRPC channel (#7565)\n\n","date":"2021-09-03 09:17:16","modifiedFileCount":"8","status":"M","submitter":"Daming"}]
