[{"authorTime":"2019-06-16 22:49:44","codes":[{"authorDate":"2019-10-05 10:49:53","commitOrder":2,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(ConsulConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","date":"2019-10-05 10:49:53","endLine":76,"groupId":"6349","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e0/3b32ebabbb1bed2e626080baf90541c18e37a4.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(ConsulConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","realPath":"oap-server/server-configuration/configuration-consul/src/test/java/org/apache/skywalking/oap/server/configuration/consul/ConsulConfigurationTestProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"},{"authorDate":"2019-06-16 22:49:44","commitOrder":2,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(ApolloConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","date":"2019-06-16 22:49:44","endLine":72,"groupId":"6349","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/04/20a5ab0be9a9ff27d5dbdf309d4562f34d0588.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(ApolloConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","realPath":"oap-server/server-configuration/configuration-apollo/src/test/java/org/apache/skywalking/oap/server/configuration/apollo/ApolloConfigurationTestProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"NB"}],"commitId":"81f4c087b01bee72ddd79b2dfb9c995359b5708e","commitMessage":"@@@Provide Consul dynamic configuration center implementation (#3560)\n\n* Provide Consul dynamic configuration center implementation\n\n* Add more unit tests\n\n* Fix unit test\n\n* Add more unit tests and remove unused file\n\n* Remove redundant doc\n","date":"2019-10-05 10:49:53","modifiedFileCount":"1","status":"M","submitter":"kezhenxu94"},{"authorTime":"2019-06-16 22:49:44","codes":[{"authorDate":"2021-09-03 20:52:22","commitOrder":3,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(ConsulConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                log.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n\n        groupWatcher = new GroupConfigChangeWatcher(ConsulConfigurationTestModule.NAME, this, \"testKeyGroup\") {\n            private Map<String, String> config = new ConcurrentHashMap<>();\n\n            @Override\n            public void notifyGroup(Map<String, ConfigChangeEvent> groupItems) {\n                log.info(\"GroupConfigChangeWatcher.ConfigChangeEvents: {}\", groupItems);\n                groupItems.forEach((groupItemName, event) -> {\n                    if (EventType.DELETE.equals(event.getEventType())) {\n                        config.remove(groupItemName);\n                    } else {\n                        config.put(groupItemName, event.getNewValue());\n                    }\n                });\n            }\n\n            @Override\n            public Map<String, String> groupItems() {\n                return config;\n            }\n        };\n    }\n","date":"2021-09-03 20:52:22","endLine":96,"groupId":"6349","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/16e51d2591fe2472acfbe35328adb74efd3769.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(ConsulConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","realPath":"oap-server/server-configuration/configuration-consul/src/test/java/org/apache/skywalking/oap/server/configuration/consul/ConsulConfigurationTestProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2019-06-16 22:49:44","commitOrder":3,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(ApolloConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","date":"2019-06-16 22:49:44","endLine":72,"groupId":"6349","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/04/20a5ab0be9a9ff27d5dbdf309d4562f34d0588.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(ApolloConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","realPath":"oap-server/server-configuration/configuration-apollo/src/test/java/org/apache/skywalking/oap/server/configuration/apollo/ApolloConfigurationTestProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"}],"commitId":"0fae36ed4c14264143aa0a4f3a04e67aa1bad23c","commitMessage":"@@@Support consul grouped dynamic configurations (#7647)\n\n","date":"2021-09-03 20:52:22","modifiedFileCount":"5","status":"M","submitter":"wankai123"},{"authorTime":"2021-09-10 14:33:08","codes":[{"authorDate":"2021-09-03 20:52:22","commitOrder":4,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(ConsulConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                log.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n\n        groupWatcher = new GroupConfigChangeWatcher(ConsulConfigurationTestModule.NAME, this, \"testKeyGroup\") {\n            private Map<String, String> config = new ConcurrentHashMap<>();\n\n            @Override\n            public void notifyGroup(Map<String, ConfigChangeEvent> groupItems) {\n                log.info(\"GroupConfigChangeWatcher.ConfigChangeEvents: {}\", groupItems);\n                groupItems.forEach((groupItemName, event) -> {\n                    if (EventType.DELETE.equals(event.getEventType())) {\n                        config.remove(groupItemName);\n                    } else {\n                        config.put(groupItemName, event.getNewValue());\n                    }\n                });\n            }\n\n            @Override\n            public Map<String, String> groupItems() {\n                return config;\n            }\n        };\n    }\n","date":"2021-09-03 20:52:22","endLine":96,"groupId":"10605","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/16e51d2591fe2472acfbe35328adb74efd3769.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(ConsulConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                log.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n\n        groupWatcher = new GroupConfigChangeWatcher(ConsulConfigurationTestModule.NAME, this, \"testKeyGroup\") {\n            private Map<String, String> config = new ConcurrentHashMap<>();\n\n            @Override\n            public void notifyGroup(Map<String, ConfigChangeEvent> groupItems) {\n                log.info(\"GroupConfigChangeWatcher.ConfigChangeEvents: {}\", groupItems);\n                groupItems.forEach((groupItemName, event) -> {\n                    if (EventType.DELETE.equals(event.getEventType())) {\n                        config.remove(groupItemName);\n                    } else {\n                        config.put(groupItemName, event.getNewValue());\n                    }\n                });\n            }\n\n            @Override\n            public Map<String, String> groupItems() {\n                return config;\n            }\n        };\n    }\n","realPath":"oap-server/server-configuration/configuration-consul/src/test/java/org/apache/skywalking/oap/server/configuration/consul/ConsulConfigurationTestProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"},{"authorDate":"2021-09-10 14:33:08","commitOrder":4,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(ApolloConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                log.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n\n        groupWatcher = new GroupConfigChangeWatcher(ApolloConfigurationTestModule.NAME, this, \"testKeyGroup\") {\n            private Map<String, String> config = new ConcurrentHashMap<>();\n\n            @Override\n            public void notifyGroup(Map<String, ConfigChangeEvent> groupItems) {\n                log.info(\"GroupConfigChangeWatcher.ConfigChangeEvents: {}\", groupItems);\n                groupItems.forEach((groupItemName, event) -> {\n                    if (EventType.DELETE.equals(event.getEventType())) {\n                        config.remove(groupItemName);\n                    } else {\n                        config.put(groupItemName, event.getNewValue());\n                    }\n                });\n            }\n\n            @Override\n            public Map<String, String> groupItems() {\n                return config;\n            }\n        };\n    }\n","date":"2021-09-10 14:33:08","endLine":96,"groupId":"10605","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/78/d56fc8d42452ae5db3ce9d62de83424d7b1ef2.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(ApolloConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","realPath":"oap-server/server-configuration/configuration-apollo/src/test/java/org/apache/skywalking/oap/server/configuration/apollo/ApolloConfigurationTestProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"80f999f998c7a8277b15b41c32c4fd4c7437a918","commitMessage":"@@@Support apollo grouped dynamic configurations (#7685)\n\n","date":"2021-09-10 14:33:08","modifiedFileCount":"2","status":"M","submitter":"wankai123"}]
