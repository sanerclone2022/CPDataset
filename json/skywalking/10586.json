[{"authorTime":"2020-07-20 12:35:35","codes":[{"authorDate":"2021-05-15 17:38:51","commitOrder":2,"curCode":"    public void readConfigWhenConfigMapDataIsNull() throws Exception {\n        V1ConfigMap v1ConfigMap = new V1ConfigMap();\n        PowerMockito.doReturn(Optional.of(v1ConfigMap)).when(informer).configMap();\n        Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {{\n            add(\"key1\");\n        }});\n\n        Assert.assertTrue(optionalConfigTable.isPresent());\n        ConfigTable configTable = optionalConfigTable.get();\n        Assert.assertEquals(configTable.getItems().size(), 0);\n    }\n","date":"2021-05-15 17:38:51","endLine":71,"groupId":"6141","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"readConfigWhenConfigMapDataIsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/19/e5177df1315f214aeae3487633292a20e9c904.src","preCode":"    public void readConfigWhenConfigMapDataIsNull() throws Exception {\n        V1ConfigMap v1ConfigMap = new V1ConfigMap();\n        PowerMockito.doReturn(Optional.of(v1ConfigMap)).when(informer).configMap();\n        Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {{\n            add(\"key1\");\n        }});\n\n        Assert.assertTrue(optionalConfigTable.isPresent());\n        ConfigTable configTable = optionalConfigTable.get();\n        Assert.assertEquals(configTable.getItems().size(), 0);\n    }\n","realPath":"oap-server/server-configuration/configuration-k8s-configmap/src/test/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigWatcherRegisterTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2020-07-20 12:35:35","commitOrder":2,"curCode":"    public void readConfigWhenInformerNotwork() throws Exception {\n        PowerMockito.doReturn(Optional.empty()).when(informer).configMap();\n        Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {{\n            add(\"key1\");\n        }});\n\n        Assert.assertTrue(optionalConfigTable.isPresent());\n        ConfigTable configTable = optionalConfigTable.get();\n        Assert.assertEquals(configTable.getItems().size(), 0);\n    }\n","date":"2020-07-20 12:35:35","endLine":70,"groupId":"6141","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"readConfigWhenInformerNotwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2f/d449cd2c3c61477aeb496e83f2a47e4c14f435.src","preCode":"    public void readConfigWhenInformerNotwork() throws Exception {\n        PowerMockito.doReturn(Optional.empty()).when(informer).configMap();\n        Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {{\n            add(\"key1\");\n        }});\n\n        Assert.assertTrue(optionalConfigTable.isPresent());\n        ConfigTable configTable = optionalConfigTable.get();\n        Assert.assertEquals(configTable.getItems().size(), 0);\n    }\n","realPath":"oap-server/server-configuration/configuration-k8s-configmap/src/test/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigWatcherRegisterTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"NB"}],"commitId":"5e40a0998a7dda8e2e69320c109ffb0a832c872d","commitMessage":"@@@Fix issue 6945 (#6948)\n\n","date":"2021-05-15 17:38:51","modifiedFileCount":"2","status":"M","submitter":"Joe"},{"authorTime":"2021-07-29 19:55:22","codes":[{"authorDate":"2021-07-29 19:55:22","commitOrder":3,"curCode":"    public void readConfigWhenConfigMapDataIsNull() throws Exception {\n        V1ConfigMap v1ConfigMap = new V1ConfigMap();\n        PowerMockito.doReturn(Optional.of(v1ConfigMap)).when(informer).configMap();\n        Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {{\n            add(\"key1\");\n        }});\n\n        Assert.assertTrue(optionalConfigTable.isPresent());\n        ConfigTable configTable = optionalConfigTable.get();\n        Assert.assertEquals(configTable.getItems().size(), 1);\n        Assert.assertEquals(configTable.getItems().get(0).getName(), \"key1\");\n        Assert.assertNull(configTable.getItems().get(0).getValue());\n    }\n","date":"2021-07-29 19:55:22","endLine":73,"groupId":"6141","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"readConfigWhenConfigMapDataIsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/46/125479de649a287760881e25b10d68bc5f10fe.src","preCode":"    public void readConfigWhenConfigMapDataIsNull() throws Exception {\n        V1ConfigMap v1ConfigMap = new V1ConfigMap();\n        PowerMockito.doReturn(Optional.of(v1ConfigMap)).when(informer).configMap();\n        Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {{\n            add(\"key1\");\n        }});\n\n        Assert.assertTrue(optionalConfigTable.isPresent());\n        ConfigTable configTable = optionalConfigTable.get();\n        Assert.assertEquals(configTable.getItems().size(), 0);\n    }\n","realPath":"oap-server/server-configuration/configuration-k8s-configmap/src/test/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigWatcherRegisterTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2021-07-29 19:55:22","commitOrder":3,"curCode":"    public void readConfigWhenInformerNotwork() throws Exception {\n        PowerMockito.doReturn(Optional.empty()).when(informer).configMap();\n        Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {{\n            add(\"key1\");\n        }});\n\n        Assert.assertTrue(optionalConfigTable.isPresent());\n        ConfigTable configTable = optionalConfigTable.get();\n        Assert.assertEquals(configTable.getItems().size(), 1);\n        Assert.assertEquals(configTable.getItems().get(0).getName(), \"key1\");\n        Assert.assertNull(configTable.getItems().get(0).getValue());\n    }\n","date":"2021-07-29 19:55:22","endLine":87,"groupId":"6141","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"readConfigWhenInformerNotwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/46/125479de649a287760881e25b10d68bc5f10fe.src","preCode":"    public void readConfigWhenInformerNotwork() throws Exception {\n        PowerMockito.doReturn(Optional.empty()).when(informer).configMap();\n        Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {{\n            add(\"key1\");\n        }});\n\n        Assert.assertTrue(optionalConfigTable.isPresent());\n        ConfigTable configTable = optionalConfigTable.get();\n        Assert.assertEquals(configTable.getItems().size(), 0);\n    }\n","realPath":"oap-server/server-configuration/configuration-k8s-configmap/src/test/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigWatcherRegisterTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"1f28d2036a0581d6d891933a9cc1933c3990eea4","commitMessage":"@@@Add logging module to load log configuration dynamically (#7377)\n\n* Add logging module to load log configuration dynamically\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>","date":"2021-07-29 19:55:22","modifiedFileCount":"3","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2021-08-26 15:30:11","codes":[{"authorDate":"2021-08-26 15:30:11","commitOrder":4,"curCode":"    public void readConfigWhenConfigMapDataIsNull() throws Exception {\n        Map<String, String> configMapData = new HashMap<>();\n        PowerMockito.doReturn(configMapData).when(informer).configMapData();\n        Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {{\n            add(\"key1\");\n        }});\n\n        Assert.assertTrue(optionalConfigTable.isPresent());\n        ConfigTable configTable = optionalConfigTable.get();\n        Assert.assertEquals(configTable.getItems().size(), 1);\n        Assert.assertEquals(configTable.getItems().get(0).getName(), \"key1\");\n        Assert.assertNull(configTable.getItems().get(0).getValue());\n    }\n","date":"2021-08-26 15:30:11","endLine":75,"groupId":"10586","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"readConfigWhenConfigMapDataIsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/dc/8c5b6d8f6416babcc31368bab5f8986dc6ba37.src","preCode":"    public void readConfigWhenConfigMapDataIsNull() throws Exception {\n        V1ConfigMap v1ConfigMap = new V1ConfigMap();\n        PowerMockito.doReturn(Optional.of(v1ConfigMap)).when(informer).configMap();\n        Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {{\n            add(\"key1\");\n        }});\n\n        Assert.assertTrue(optionalConfigTable.isPresent());\n        ConfigTable configTable = optionalConfigTable.get();\n        Assert.assertEquals(configTable.getItems().size(), 1);\n        Assert.assertEquals(configTable.getItems().get(0).getName(), \"key1\");\n        Assert.assertNull(configTable.getItems().get(0).getValue());\n    }\n","realPath":"oap-server/server-configuration/configuration-k8s-configmap/src/test/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigWatcherRegisterTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2021-08-26 15:30:11","commitOrder":4,"curCode":"    public void readConfigWhenInformerNotwork() throws Exception {\n        PowerMockito.doReturn(new HashMap<>()).when(informer).configMapData();\n        Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {{\n            add(\"key1\");\n        }});\n\n        Assert.assertTrue(optionalConfigTable.isPresent());\n        ConfigTable configTable = optionalConfigTable.get();\n        Assert.assertEquals(configTable.getItems().size(), 1);\n        Assert.assertEquals(configTable.getItems().get(0).getName(), \"key1\");\n        Assert.assertNull(configTable.getItems().get(0).getValue());\n    }\n","date":"2021-08-26 15:30:11","endLine":89,"groupId":"10586","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"readConfigWhenInformerNotwork","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/dc/8c5b6d8f6416babcc31368bab5f8986dc6ba37.src","preCode":"    public void readConfigWhenInformerNotwork() throws Exception {\n        PowerMockito.doReturn(Optional.empty()).when(informer).configMap();\n        Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {{\n            add(\"key1\");\n        }});\n\n        Assert.assertTrue(optionalConfigTable.isPresent());\n        ConfigTable configTable = optionalConfigTable.get();\n        Assert.assertEquals(configTable.getItems().size(), 1);\n        Assert.assertEquals(configTable.getItems().get(0).getName(), \"key1\");\n        Assert.assertNull(configTable.getItems().get(0).getValue());\n    }\n","realPath":"oap-server/server-configuration/configuration-k8s-configmap/src/test/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigWatcherRegisterTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"be0f57ae2867c4b04791dbd832d39f45d2d1d312","commitMessage":"@@@Support k8s configmap grouped dynamic configurations (#7570)\n\n* Support k8s configmap grouped dynamic configurations\n\n* Support single config read from multiple configmaps","date":"2021-08-26 15:30:11","modifiedFileCount":"3","status":"M","submitter":"wankai123"}]
